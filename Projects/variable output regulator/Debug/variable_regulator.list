
variable_regulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a928  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800abd8  0800abd8  0001abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae80  0800ae80  0001ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae8c  0800ae8c  0001ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ae90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000400  24000078  0800af04  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000478  0800af04  00020478  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001cead  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003429  00000000  00000000  0003cf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001558  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010a6  00000000  00000000  00041918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000331b1  00000000  00000000  000429be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dc4a  00000000  00000000  00075b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014df1f  00000000  00000000  000937b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000061d4  00000000  00000000  001e16d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001e78ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800abc0 	.word	0x0800abc0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800abc0 	.word	0x0800abc0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2224      	movs	r2, #36	; 0x24
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f009 f821 	bl	80096e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_DAC1_Init+0x5c>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_DAC1_Init+0x60>)
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <MX_DAC1_Init+0x5c>)
 80006a6:	f001 fa00 	bl	8001aaa <HAL_DAC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006b0:	f000 fc0e 	bl	8000ed0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_DAC1_Init+0x5c>)
 80006d0:	f001 fa84 	bl	8001bdc <HAL_DAC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 fbf9 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	24000094 	.word	0x24000094
 80006ec:	40007400 	.word	0x40007400

080006f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <HAL_DAC_MspInit+0x80>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d129      	bne.n	8000766 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_DAC_MspInit+0x84>)
 8000714:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <HAL_DAC_MspInit+0x84>)
 800071a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800071e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_DAC_MspInit+0x84>)
 8000724:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_DAC_MspInit+0x84>)
 8000732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_DAC_MspInit+0x84>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_DAC_MspInit+0x84>)
 8000742:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800074e:	2310      	movs	r3, #16
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_DAC_MspInit+0x88>)
 8000762:	f002 fd45 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40007400 	.word	0x40007400
 8000774:	58024400 	.word	0x58024400
 8000778:	58020000 	.word	0x58020000

0800077c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000782:	4a2f      	ldr	r2, [pc, #188]	; (8000840 <MX_FDCAN2_Init+0xc4>)
 8000784:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_FDCAN2_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_FDCAN2_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 18;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007a6:	2212      	movs	r2, #18
 80007a8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 8;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007be:	2201      	movs	r2, #1
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_FDCAN2_Init+0xc0>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000806:	2204      	movs	r2, #4
 8000808:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_FDCAN2_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 1;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000812:	2201      	movs	r2, #1
 8000814:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000818:	2201      	movs	r2, #1
 800081a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_FDCAN2_Init+0xc0>)
 800081e:	2200      	movs	r2, #0
 8000820:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_FDCAN2_Init+0xc0>)
 8000824:	2204      	movs	r2, #4
 8000826:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_FDCAN2_Init+0xc0>)
 800082a:	f002 f879 	bl	8002920 <HAL_FDCAN_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000834:	f000 fb4c 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000a8 	.word	0x240000a8
 8000840:	4000a400 	.word	0x4000a400

08000844 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ba      	sub	sp, #232	; 0xe8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	22c0      	movs	r2, #192	; 0xc0
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f008 ff3b 	bl	80096e0 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <HAL_FDCAN_MspInit+0xe8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d157      	bne.n	8000924 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000880:	2305      	movs	r3, #5
 8000882:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 800088c:	2314      	movs	r3, #20
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80008a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fe7b 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80008b8:	f000 fb0a 	bl	8000ed0 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008be:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80008c2:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c8:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80008d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e0:	4a13      	ldr	r2, [pc, #76]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_FDCAN_MspInit+0xec>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000912:	2309      	movs	r3, #9
 8000914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <HAL_FDCAN_MspInit+0xf0>)
 8000920:	f002 fc66 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000924:	bf00      	nop
 8000926:	37e8      	adds	r7, #232	; 0xe8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	4000a400 	.word	0x4000a400
 8000930:	58024400 	.word	0x58024400
 8000934:	58020400 	.word	0x58020400

08000938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <MX_GPIO_Init+0xe0>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000954:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <MX_GPIO_Init+0xe0>)
 8000956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <MX_GPIO_Init+0xe0>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_GPIO_Init+0xe0>)
 800096e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000972:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <MX_GPIO_Init+0xe0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <MX_GPIO_Init+0xe0>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_GPIO_Init+0xe0>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <MX_GPIO_Init+0xe0>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_GPIO_Init+0xe0>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|LED1_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f244 0110 	movw	r1, #16400	; 0x4010
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_GPIO_Init+0xe4>)
 80009ec:	f002 fdb0 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|LED1_Pin;
 80009f0:	f244 0310 	movw	r3, #16400	; 0x4010
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0xe4>)
 8000a0a:	f002 fbf1 	bl	80031f0 <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	58020c00 	.word	0x58020c00

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	logPacket.strat = 0x24;  //$
 8000a24:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <main+0xe8>)
 8000a26:	2224      	movs	r2, #36	; 0x24
 8000a28:	701a      	strb	r2, [r3, #0]
	logPacket.end = 0x23;    //#
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <main+0xe8>)
 8000a2c:	2223      	movs	r2, #35	; 0x23
 8000a2e:	729a      	strb	r2, [r3, #10]
	logPacket.address = Log;
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <main+0xe8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	705a      	strb	r2, [r3, #1]
	logPacket.dataLength = 4;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <main+0xe8>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	70da      	strb	r2, [r3, #3]
	(void)sprintf(logPacket.data,"OK\r\n");
 8000a3c:	4933      	ldr	r1, [pc, #204]	; (8000b0c <main+0xec>)
 8000a3e:	4834      	ldr	r0, [pc, #208]	; (8000b10 <main+0xf0>)
 8000a40:	f008 fe2e 	bl	80096a0 <siprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fe6c 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f874 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff ff74 	bl	8000938 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000a50:	f7ff fe1c 	bl	800068c <MX_DAC1_Init>
  MX_TIM1_Init();
 8000a54:	f000 fb5c 	bl	8001110 <MX_TIM1_Init>
  MX_FDCAN2_Init();
 8000a58:	f7ff fe90 	bl	800077c <MX_FDCAN2_Init>
  MX_TIM2_Init();
 8000a5c:	f000 fc1c 	bl	8001298 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a60:	f000 fc68 	bl	8001334 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 8000a64:	f000 fd74 	bl	8001550 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//////////
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	482a      	ldr	r0, [pc, #168]	; (8000b14 <main+0xf4>)
 8000a6c:	f001 f83f 	bl	8001aee <HAL_DAC_Start>

	HAL_TIM_Base_Start_IT(&htim1);
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <main+0xf8>)
 8000a72:	f005 fbd1 	bl	8006218 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <main+0xfc>)
 8000a78:	f005 fbce 	bl	8006218 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000a7c:	4828      	ldr	r0, [pc, #160]	; (8000b20 <main+0x100>)
 8000a7e:	f005 fbcb 	bl	8006218 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Configure TX Header for FDCAN2
	TxHeader.Identifier = 0;
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <main+0x104>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <main+0x104>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <main+0x104>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
	//TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <main+0x104>)
 8000a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a9a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <main+0x104>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <main+0x104>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <main+0x104>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <main+0x104>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <main+0x104>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
	HAL_FDCAN_Start(&hfdcan2);
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <main+0x108>)
 8000abc:	f002 f90e 	bl	8002cdc <HAL_FDCAN_Start>
	//  FDCAN_FilterTypeDef sFilterConfig;
	//  sFilterConfig.FilterConfig = FDCAN_FILTER_DISABLE;
	//  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4815      	ldr	r0, [pc, #84]	; (8000b18 <main+0xf8>)
 8000ac4:	f005 fc82 	bl	80063cc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <main+0xf8>)
 8000acc:	f006 fd14 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4811      	ldr	r0, [pc, #68]	; (8000b18 <main+0xf8>)
 8000ad4:	f005 fc7a 	bl	80063cc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ad8:	2104      	movs	r1, #4
 8000ada:	480f      	ldr	r0, [pc, #60]	; (8000b18 <main+0xf8>)
 8000adc:	f006 fd0c 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <main+0xf8>)
 8000ae4:	f005 fc72 	bl	80063cc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ae8:	2108      	movs	r1, #8
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <main+0xf8>)
 8000aec:	f006 fd04 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x10c>)
 8000af6:	f002 fd2b 	bl	8003550 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//uint8_t serialBuff[];
		HAL_UART_Transmit(&hlpuart1, &logPacket, 120, 200);
 8000afa:	23c8      	movs	r3, #200	; 0xc8
 8000afc:	2278      	movs	r2, #120	; 0x78
 8000afe:	4902      	ldr	r1, [pc, #8]	; (8000b08 <main+0xe8>)
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <main+0x110>)
 8000b02:	f006 ff7c 	bl	80079fe <HAL_UART_Transmit>
 8000b06:	e7f8      	b.n	8000afa <main+0xda>
 8000b08:	240001a0 	.word	0x240001a0
 8000b0c:	0800abd8 	.word	0x0800abd8
 8000b10:	240001a5 	.word	0x240001a5
 8000b14:	24000094 	.word	0x24000094
 8000b18:	240001b4 	.word	0x240001b4
 8000b1c:	24000200 	.word	0x24000200
 8000b20:	2400024c 	.word	0x2400024c
 8000b24:	24000148 	.word	0x24000148
 8000b28:	240000a8 	.word	0x240000a8
 8000b2c:	58020c00 	.word	0x58020c00
 8000b30:	24000298 	.word	0x24000298

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	; 0x70
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	224c      	movs	r2, #76	; 0x4c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fdcc 	bl	80096e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 fdc6 	bl	80096e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <SystemClock_Config+0xe4>)
 8000b56:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f002 fd2a 	bl	80035b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <SystemClock_Config+0xe8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <SystemClock_Config+0xe8>)
 8000b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <SystemClock_Config+0xe8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b80:	bf00      	nop
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <SystemClock_Config+0xe8>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8e:	d1f8      	bne.n	8000b82 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b90:	2309      	movs	r3, #9
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 112;
 8000baa:	2370      	movs	r3, #112	; 0x70
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 22;
 8000bb2:	2316      	movs	r3, #22
 8000bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fd2e 	bl	800362c <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bd6:	f000 f97b 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	233f      	movs	r3, #63	; 0x3f
 8000bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bee:	2340      	movs	r3, #64	; 0x40
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2106      	movs	r1, #6
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f945 	bl	8003e90 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c0c:	f000 f960 	bl	8000ed0 <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3770      	adds	r7, #112	; 0x70
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58024800 	.word	0x58024800

08000c20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	ed2d 8b02 	vpush	{d8}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	if(htim == &htim3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a94      	ldr	r2, [pc, #592]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d11f      	bne.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		//dac_value = 2000*sin(2*3.1415*1000*t/10)+2000;

		static int8_t direction = 1;

		if (dac_value
 8000c34:	4b93      	ldr	r3, [pc, #588]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c3c:	d902      	bls.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			direction = -1;
 8000c3e:	4b92      	ldr	r3, [pc, #584]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	701a      	strb	r2, [r3, #0]
		}

		if (dac_value < 1)
 8000c44:	4b8f      	ldr	r3, [pc, #572]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			direction = 1;
 8000c4c:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		}

		dac_value += direction;
 8000c52:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000c54:	f993 3000 	ldrsb.w	r3, [r3]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b8a      	ldr	r3, [pc, #552]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b88      	ldr	r3, [pc, #544]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c64:	801a      	strh	r2, [r3, #0]
		//				dac_value = 0;
		//			} else {
		//				dac_value = 4095;
		//			}
		//		}
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8000c66:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4887      	ldr	r0, [pc, #540]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000c70:	f000 ff8f 	bl	8001b92 <HAL_DAC_SetValue>
	}


	if(htim == &htim1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a86      	ldr	r2, [pc, #536]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	f040 80a7 	bne.w	8000dcc <HAL_TIM_PeriodElapsedCallback+0x1ac>
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, va/(TIM1->ARR+1)*4095);
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (double)t/4000*4095);


		///////////////////////////////////////////////
		teta = 2*PI*f*t;
 8000c7e:	4b85      	ldr	r3, [pc, #532]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000c80:	ed93 7b00 	vldr	d7, [r3]
 8000c84:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8000e70 <HAL_TIM_PeriodElapsedCallback+0x250>
 8000c88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c8c:	4b82      	ldr	r3, [pc, #520]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000c8e:	ed93 7b00 	vldr	d7, [r3]
 8000c92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c96:	4b81      	ldr	r3, [pc, #516]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000c98:	ed83 7b00 	vstr	d7, [r3]
		uint32_t PWM_max = (TIM1->ARR+1)/2;
 8000c9c:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]

		va = vm*(PWM_max)*(cos(teta)+1);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000cb0:	4b7c      	ldr	r3, [pc, #496]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000cb2:	ed93 7b00 	vldr	d7, [r3]
 8000cb6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8000cba:	4b78      	ldr	r3, [pc, #480]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000cbc:	ed93 7b00 	vldr	d7, [r3]
 8000cc0:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc4:	f009 f990 	bl	8009fe8 <cos>
 8000cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8000ccc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cd4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000cda:	ed83 7b00 	vstr	d7, [r3]
		vb = vm*(PWM_max)*(cos(teta+2*PI/3)+1);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ce8:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000cea:	ed93 7b00 	vldr	d7, [r3]
 8000cee:	ee26 8b07 	vmul.f64	d8, d6, d7
 8000cf2:	4b6a      	ldr	r3, [pc, #424]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000cf4:	ed93 7b00 	vldr	d7, [r3]
 8000cf8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8000e78 <HAL_TIM_PeriodElapsedCallback+0x258>
 8000cfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d00:	eeb0 0b47 	vmov.f64	d0, d7
 8000d04:	f009 f970 	bl	8009fe8 <cos>
 8000d08:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d18:	4b64      	ldr	r3, [pc, #400]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000d1a:	ed83 7b00 	vstr	d7, [r3]
		vc = vm*(PWM_max)*(cos(teta-2*PI/3)+1);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000d28:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000d2a:	ed93 7b00 	vldr	d7, [r3]
 8000d2e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8000d32:	4b5a      	ldr	r3, [pc, #360]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000d34:	ed93 7b00 	vldr	d7, [r3]
 8000d38:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000e78 <HAL_TIM_PeriodElapsedCallback+0x258>
 8000d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d40:	eeb0 0b47 	vmov.f64	d0, d7
 8000d44:	f009 f950 	bl	8009fe8 <cos>
 8000d48:	eeb0 7b40 	vmov.f64	d7, d0
 8000d4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000d5a:	ed83 7b00 	vstr	d7, [r3]

		TIM1->CCR1 = va;
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000d60:	ed93 7b00 	vldr	d7, [r3]
 8000d64:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000d66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d6a:	ee17 2a90 	vmov	r2, s15
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = vb;
 8000d70:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000d72:	ed93 7b00 	vldr	d7, [r3]
 8000d76:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000d78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d7c:	ee17 2a90 	vmov	r2, s15
 8000d80:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = vc;
 8000d82:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000d84:	ed93 7b00 	vldr	d7, [r3]
 8000d88:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8e:	ee17 2a90 	vmov	r2, s15
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
		///////////////////////////////////////////////
		uint32_t intFrequency = 280000000/(TIM1->ARR+1);
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	60bb      	str	r3, [r7, #8]
		static uint32_t n =0;

		n++;
 8000da2:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a43      	ldr	r2, [pc, #268]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000daa:	6013      	str	r3, [r2, #0]
		//		if (n > intFrequency/f)
		//		{
		//			n = 0;
		//		}
		t = (double)n/intFrequency;
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000dc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000dc8:	ed83 7b00 	vstr	d7, [r3]

	}


	if(htim == &htim2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d146      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x242>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000dda:	f002 fbd2 	bl	8003582 <HAL_GPIO_TogglePin>
		//HAL_FDCAN_AddMessageToTxBuffer(&hfdcan2, &TxHeader, TxData, FDCAN_TX_BUFFER0);
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData);
 8000dde:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000de0:	4939      	ldr	r1, [pc, #228]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000de2:	483a      	ldr	r0, [pc, #232]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000de4:	f001 ffa5 	bl	8002d32 <HAL_FDCAN_AddMessageToTxFifoQ>
		TxData[0]++;
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000df2:	701a      	strb	r2, [r3, #0]
		TxData[1]++;
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000dfe:	705a      	strb	r2, [r3, #1]
		TxData[2]++;
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e0a:	709a      	strb	r2, [r3, #2]
		TxData[3]++;
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e16:	70da      	strb	r2, [r3, #3]
		TxData[4]++;
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e22:	711a      	strb	r2, [r3, #4]
		TxData[5]++;
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e26:	795b      	ldrb	r3, [r3, #5]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e2e:	715a      	strb	r2, [r3, #5]
		TxData[6]++;
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e32:	799b      	ldrb	r3, [r3, #6]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e3a:	719a      	strb	r2, [r3, #6]
		TxData[7]++;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e3e:	79db      	ldrb	r3, [r3, #7]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e46:	71da      	strb	r2, [r3, #7]
		TxHeader.Identifier++;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e50:	6013      	str	r3, [r2, #0]
		if (TxHeader.Identifier > 0x7ff) TxHeader.Identifier=0;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e5a:	d302      	bcc.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x242>
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	}
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	ecbd 8b02 	vpop	{d8}
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	54442eea 	.word	0x54442eea
 8000e74:	401921fb 	.word	0x401921fb
 8000e78:	382d749c 	.word	0x382d749c
 8000e7c:	4000c152 	.word	0x4000c152
 8000e80:	2400024c 	.word	0x2400024c
 8000e84:	24000174 	.word	0x24000174
 8000e88:	24000010 	.word	0x24000010
 8000e8c:	24000094 	.word	0x24000094
 8000e90:	240001b4 	.word	0x240001b4
 8000e94:	24000008 	.word	0x24000008
 8000e98:	24000180 	.word	0x24000180
 8000e9c:	24000178 	.word	0x24000178
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	24000000 	.word	0x24000000
 8000ea8:	24000188 	.word	0x24000188
 8000eac:	24000190 	.word	0x24000190
 8000eb0:	24000198 	.word	0x24000198
 8000eb4:	10b07600 	.word	0x10b07600
 8000eb8:	240001ac 	.word	0x240001ac
 8000ebc:	24000200 	.word	0x24000200
 8000ec0:	58020c00 	.word	0x58020c00
 8000ec4:	2400016c 	.word	0x2400016c
 8000ec8:	24000148 	.word	0x24000148
 8000ecc:	240000a8 	.word	0x240000a8

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MspInit+0x30>)
 8000ee4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x30>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x30>)
 8000ef4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58024400 	.word	0x58024400

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 fc52 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM1_UP_IRQHandler+0x10>)
 8000f6a:	f005 fb3d 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240001b4 	.word	0x240001b4

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM2_IRQHandler+0x10>)
 8000f7e:	f005 fb33 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000200 	.word	0x24000200

08000f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM3_IRQHandler+0x10>)
 8000f92:	f005 fb29 	bl	80065e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2400024c 	.word	0x2400024c

08000fa0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <LPUART1_IRQHandler+0x10>)
 8000fa6:	f006 fdb9 	bl	8007b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000298 	.word	0x24000298

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f008 fb84 	bl	80096f0 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	24100000 	.word	0x24100000
 8001014:	00000400 	.word	0x00000400
 8001018:	240001b0 	.word	0x240001b0
 800101c:	24000478 	.word	0x24000478

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <SystemInit+0xd0>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <SystemInit+0xd0>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <SystemInit+0xd4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	2b02      	cmp	r3, #2
 800103e:	d807      	bhi.n	8001050 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <SystemInit+0xd4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 030f 	bic.w	r3, r3, #15
 8001048:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <SystemInit+0xd4>)
 800104a:	f043 0303 	orr.w	r3, r3, #3
 800104e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SystemInit+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <SystemInit+0xd8>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <SystemInit+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <SystemInit+0xd8>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4924      	ldr	r1, [pc, #144]	; (80010f8 <SystemInit+0xd8>)
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <SystemInit+0xdc>)
 800106a:	4013      	ands	r3, r2
 800106c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <SystemInit+0xd4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <SystemInit+0xd4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 030f 	bic.w	r3, r3, #15
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <SystemInit+0xd4>)
 8001084:	f043 0303 	orr.w	r3, r3, #3
 8001088:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <SystemInit+0xd8>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <SystemInit+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <SystemInit+0xd8>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <SystemInit+0xd8>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <SystemInit+0xe0>)
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <SystemInit+0xd8>)
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <SystemInit+0xe4>)
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <SystemInit+0xd8>)
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <SystemInit+0xe8>)
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <SystemInit+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <SystemInit+0xd8>)
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <SystemInit+0xe8>)
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <SystemInit+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <SystemInit+0xd8>)
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <SystemInit+0xe8>)
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <SystemInit+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SystemInit+0xd8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <SystemInit+0xd8>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <SystemInit+0xd8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <SystemInit+0xec>)
 80010e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	52002000 	.word	0x52002000
 80010f8:	58024400 	.word	0x58024400
 80010fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001100:	02020200 	.word	0x02020200
 8001104:	01ff0000 	.word	0x01ff0000
 8001108:	01010280 	.word	0x01010280
 800110c:	52004000 	.word	0x52004000

08001110 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2234      	movs	r2, #52	; 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f008 fac8 	bl	80096e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001150:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <MX_TIM1_Init+0x180>)
 8001152:	4a50      	ldr	r2, [pc, #320]	; (8001294 <MX_TIM1_Init+0x184>)
 8001154:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <MX_TIM1_Init+0x180>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <MX_TIM1_Init+0x180>)
 800115e:	2220      	movs	r2, #32
 8001160:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6999;
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <MX_TIM1_Init+0x180>)
 8001164:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001168:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <MX_TIM1_Init+0x180>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <MX_TIM1_Init+0x180>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <MX_TIM1_Init+0x180>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800117c:	4844      	ldr	r0, [pc, #272]	; (8001290 <MX_TIM1_Init+0x180>)
 800117e:	f004 fff3 	bl	8006168 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001188:	f7ff fea2 	bl	8000ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001192:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001196:	4619      	mov	r1, r3
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <MX_TIM1_Init+0x180>)
 800119a:	f005 fc59 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011a4:	f7ff fe94 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a8:	4839      	ldr	r0, [pc, #228]	; (8001290 <MX_TIM1_Init+0x180>)
 80011aa:	f005 f8ad 	bl	8006308 <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011b4:	f7ff fe8c 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	4619      	mov	r1, r3
 80011ca:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_TIM1_Init+0x180>)
 80011cc:	f006 fa56 	bl	800767c <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011d6:	f7ff fe7b 	bl	8000ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011da:	2360      	movs	r3, #96	; 0x60
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4824      	ldr	r0, [pc, #144]	; (8001290 <MX_TIM1_Init+0x180>)
 8001200:	f005 fb12 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800120a:	f7ff fe61 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001212:	2204      	movs	r2, #4
 8001214:	4619      	mov	r1, r3
 8001216:	481e      	ldr	r0, [pc, #120]	; (8001290 <MX_TIM1_Init+0x180>)
 8001218:	f005 fb06 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001222:	f7ff fe55 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122a:	2208      	movs	r2, #8
 800122c:	4619      	mov	r1, r3
 800122e:	4818      	ldr	r0, [pc, #96]	; (8001290 <MX_TIM1_Init+0x180>)
 8001230:	f005 fafa 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800123a:	f7ff fe49 	bl	8000ed0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <MX_TIM1_Init+0x180>)
 8001274:	f006 fa90 	bl	8007798 <HAL_TIMEx_ConfigBreakDeadTime>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800127e:	f7ff fe27 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <MX_TIM1_Init+0x180>)
 8001284:	f000 f908 	bl	8001498 <HAL_TIM_MspPostInit>

}
 8001288:	bf00      	nop
 800128a:	3770      	adds	r7, #112	; 0x70
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	240001b4 	.word	0x240001b4
 8001294:	40010000 	.word	0x40010000

08001298 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM2_Init+0x98>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c0:	2263      	movs	r2, #99	; 0x63
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2799;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM2_Init+0x98>)
 80012cc:	f640 22ef 	movw	r2, #2799	; 0xaef
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_TIM2_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM2_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_TIM2_Init+0x98>)
 80012e0:	f004 ff42 	bl	8006168 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ea:	f7ff fdf1 	bl	8000ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM2_Init+0x98>)
 80012fc:	f005 fba8 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001306:	f7ff fde3 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_TIM2_Init+0x98>)
 8001318:	f006 f9b0 	bl	800767c <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001322:	f7ff fdd5 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	24000200 	.word	0x24000200

08001334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <MX_TIM3_Init+0x98>)
 8001356:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM3_Init+0x94>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001360:	2220      	movs	r2, #32
 8001362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55999;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001366:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800136a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_TIM3_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <MX_TIM3_Init+0x94>)
 800137a:	f004 fef5 	bl	8006168 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001384:	f7ff fda4 	bl	8000ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001396:	f005 fb5b 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f7ff fd96 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM3_Init+0x94>)
 80013b2:	f006 f963 	bl	800767c <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f7ff fd88 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400024c 	.word	0x2400024c
 80013cc:	40000400 	.word	0x40000400

080013d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2b      	ldr	r2, [pc, #172]	; (800148c <HAL_TIM_Base_MspInit+0xbc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d117      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 80013e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 80013f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2019      	movs	r0, #25
 8001406:	f000 fb1c 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800140a:	2019      	movs	r0, #25
 800140c:	f000 fb33 	bl	8001a76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001410:	e038      	b.n	8001484 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141a:	d117      	bne.n	800144c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 800141e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 800142e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f000 faff 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001444:	201c      	movs	r0, #28
 8001446:	f000 fb16 	bl	8001a76 <HAL_NVIC_EnableIRQ>
}
 800144a:	e01b      	b.n	8001484 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d116      	bne.n	8001484 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 8001458:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 8001468:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	201d      	movs	r0, #29
 800147a:	f000 fae2 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800147e:	201d      	movs	r0, #29
 8001480:	f000 faf9 	bl	8001a76 <HAL_NVIC_EnableIRQ>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010000 	.word	0x40010000
 8001490:	58024400 	.word	0x58024400
 8001494:	40000400 	.word	0x40000400

08001498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_TIM_MspPostInit+0xa8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d13e      	bne.n	8001538 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f6:	2303      	movs	r3, #3
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <HAL_TIM_MspPostInit+0xb0>)
 8001512:	f001 fe6d 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001516:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001528:	2301      	movs	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_TIM_MspPostInit+0xb4>)
 8001534:	f001 fe5c 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40010000 	.word	0x40010000
 8001544:	58024400 	.word	0x58024400
 8001548:	58020400 	.word	0x58020400
 800154c:	58021000 	.word	0x58021000

08001550 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <MX_LPUART1_UART_Init+0x94>)
 8001558:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 800155c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001560:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001588:	2202      	movs	r2, #2
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 800159a:	f006 f9e0 	bl	800795e <HAL_UART_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80015a4:	f7ff fc94 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 80015ac:	f007 ffae 	bl	800950c <HAL_UARTEx_SetTxFifoThreshold>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015b6:	f7ff fc8b 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 80015be:	f007 ffe3 	bl	8009588 <HAL_UARTEx_SetRxFifoThreshold>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f7ff fc82 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_LPUART1_UART_Init+0x90>)
 80015ce:	f007 ff64 	bl	800949a <HAL_UARTEx_DisableFifoMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f7ff fc7a 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000298 	.word	0x24000298
 80015e4:	58000c00 	.word	0x58000c00

080015e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0ba      	sub	sp, #232	; 0xe8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	22c0      	movs	r2, #192	; 0xc0
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f008 f869 	bl	80096e0 <memset>
  if(uartHandle->Instance==LPUART1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_UART_MspInit+0xd8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d14e      	bne.n	80016b6 <HAL_UART_MspInit+0xce>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001618:	f04f 0204 	mov.w	r2, #4
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4618      	mov	r0, r3
 8001630:	f002 ffba 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800163a:	f7ff fc49 	bl	8000ed0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 8001640:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001644:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 8001650:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 800165e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0xdc>)
 800166e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800167e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001694:	2303      	movs	r3, #3
 8001696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800169e:	4619      	mov	r1, r3
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <HAL_UART_MspInit+0xe0>)
 80016a2:	f001 fda5 	bl	80031f0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	208e      	movs	r0, #142	; 0x8e
 80016ac:	f000 f9c9 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016b0:	208e      	movs	r0, #142	; 0x8e
 80016b2:	f000 f9e0 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	37e8      	adds	r7, #232	; 0xe8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	58000c00 	.word	0x58000c00
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58020000 	.word	0x58020000

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d0:	f7ff fca6 	bl	8001020 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f007 ffff 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff f98f 	bl	8000a20 <main>
  bx  lr
 8001702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001708:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800170c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001710:	0800ae90 	.word	0x0800ae90
  ldr r2, =_sbss
 8001714:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001718:	24000478 	.word	0x24000478

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f980 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800172c:	f002 fd66 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8001730:	4602      	mov	r2, r0
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	4913      	ldr	r1, [pc, #76]	; (800178c <HAL_Init+0x6c>)
 800173e:	5ccb      	ldrb	r3, [r1, r3]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_Init+0x68>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_Init+0x6c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_Init+0x70>)
 8001762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_Init+0x74>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f814 	bl	8001798 <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e002      	b.n	8001780 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177a:	f7ff fbaf 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	0800ac2c 	.word	0x0800ac2c
 8001790:	24000018 	.word	0x24000018
 8001794:	24000014 	.word	0x24000014

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_InitTick+0x60>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e021      	b.n	80017f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_InitTick+0x64>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_InitTick+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f965 	bl	8001a92 <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f92f 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_InitTick+0x68>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	24000020 	.word	0x24000020
 80017fc:	24000014 	.word	0x24000014
 8001800:	2400001c 	.word	0x2400001c

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	24000020 	.word	0x24000020
 8001828:	2400032c 	.word	0x2400032c

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2400032c 	.word	0x2400032c

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	24000020 	.word	0x24000020

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	05fa0000 	.word	0x05fa0000

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff40 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff90 	bl	8001980 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa4 	bl	80019e8 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e014      	b.n	8001ae6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7fe fe0f 	bl	80006f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	795b      	ldrb	r3, [r3, #5]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_DAC_Start+0x16>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e040      	b.n	8001b86 <HAL_DAC_Start+0x98>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d11d      	bne.n	8001b78 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	e014      	b.n	8001b78 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2102      	movs	r1, #2
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0202 	orr.w	r2, r2, #2
 8001b76:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e004      	b.n	8001bc6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_DAC_ConfigChannel+0x18>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e12a      	b.n	8001e4a <HAL_DAC_ConfigChannel+0x26e>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	f040 8081 	bne.w	8001d0c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c0a:	f7ff fe0f 	bl	800182c <HAL_GetTick>
 8001c0e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d140      	bne.n	8001c98 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c16:	e018      	b.n	8001c4a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c18:	f7ff fe08 	bl	800182c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d911      	bls.n	8001c4a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_DAC_ConfigChannel+0x278>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f043 0208 	orr.w	r2, r3, #8
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2203      	movs	r2, #3
 8001c44:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0ff      	b.n	8001e4a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_DAC_ConfigChannel+0x278>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1df      	bne.n	8001c18 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fdf3 	bl	8001844 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	6992      	ldr	r2, [r2, #24]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
 8001c68:	e023      	b.n	8001cb2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c6a:	f7ff fddf 	bl	800182c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d90f      	bls.n	8001c98 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da0a      	bge.n	8001c98 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f043 0208 	orr.w	r2, r3, #8
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2203      	movs	r2, #3
 8001c92:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0d8      	b.n	8001e4a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dbe3      	blt.n	8001c6a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff fdce 	bl	8001844 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	6992      	ldr	r2, [r2, #24]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	ea02 0103 	and.w	r1, r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	21ff      	movs	r1, #255	; 0xff
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	ea02 0103 	and.w	r1, r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6a1a      	ldr	r2, [r3, #32]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d11d      	bne.n	8001d50 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2207      	movs	r2, #7
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d102      	bne.n	8001d7a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	e00f      	b.n	8001d9a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d102      	bne.n	8001d88 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e008      	b.n	8001d9a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e001      	b.n	8001d9a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	400a      	ands	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	22c0      	movs	r2, #192	; 0xc0
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20008000 	.word	0x20008000

08001e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fce4 	bl	800182c <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2dc      	b.n	800242a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e2cd      	b.n	800242a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a76      	ldr	r2, [pc, #472]	; (800206c <HAL_DMA_Abort+0x214>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a74      	ldr	r2, [pc, #464]	; (8002070 <HAL_DMA_Abort+0x218>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_DMA_Abort+0x21c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a71      	ldr	r2, [pc, #452]	; (8002078 <HAL_DMA_Abort+0x220>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a70      	ldr	r2, [pc, #448]	; (800207c <HAL_DMA_Abort+0x224>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_DMA_Abort+0x228>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6d      	ldr	r2, [pc, #436]	; (8002084 <HAL_DMA_Abort+0x22c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	; (8002088 <HAL_DMA_Abort+0x230>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_DMA_Abort+0x234>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_DMA_Abort+0x238>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a67      	ldr	r2, [pc, #412]	; (8002094 <HAL_DMA_Abort+0x23c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_DMA_Abort+0x240>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a64      	ldr	r2, [pc, #400]	; (800209c <HAL_DMA_Abort+0x244>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a62      	ldr	r2, [pc, #392]	; (80020a0 <HAL_DMA_Abort+0x248>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <HAL_DMA_Abort+0x24c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5f      	ldr	r2, [pc, #380]	; (80020a8 <HAL_DMA_Abort+0x250>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Abort+0xda>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Abort+0xdc>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 021e 	bic.w	r2, r2, #30
 8001f46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00a      	b.n	8001f76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 020e 	bic.w	r2, r2, #14
 8001f6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_DMA_Abort+0x214>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d072      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3a      	ldr	r2, [pc, #232]	; (8002070 <HAL_DMA_Abort+0x218>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d06d      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_DMA_Abort+0x21c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d068      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_DMA_Abort+0x220>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d063      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a36      	ldr	r2, [pc, #216]	; (800207c <HAL_DMA_Abort+0x224>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_DMA_Abort+0x228>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d059      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a33      	ldr	r2, [pc, #204]	; (8002084 <HAL_DMA_Abort+0x22c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d054      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <HAL_DMA_Abort+0x230>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04f      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <HAL_DMA_Abort+0x234>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04a      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_DMA_Abort+0x238>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d045      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <HAL_DMA_Abort+0x23c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_DMA_Abort+0x240>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03b      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <HAL_DMA_Abort+0x244>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_DMA_Abort+0x248>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d031      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_DMA_Abort+0x24c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02c      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_DMA_Abort+0x250>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d027      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_DMA_Abort+0x254>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_Abort+0x258>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_DMA_Abort+0x25c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_DMA_Abort+0x260>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_DMA_Abort+0x264>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_DMA_Abort+0x268>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_DMA_Abort+0x26c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_DMA_Abort+0x270>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d132      	bne.n	80020cc <HAL_DMA_Abort+0x274>
 8002066:	2301      	movs	r3, #1
 8002068:	e031      	b.n	80020ce <HAL_DMA_Abort+0x276>
 800206a:	bf00      	nop
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	58025408 	.word	0x58025408
 80020b0:	5802541c 	.word	0x5802541c
 80020b4:	58025430 	.word	0x58025430
 80020b8:	58025444 	.word	0x58025444
 80020bc:	58025458 	.word	0x58025458
 80020c0:	5802546c 	.word	0x5802546c
 80020c4:	58025480 	.word	0x58025480
 80020c8:	58025494 	.word	0x58025494
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6d      	ldr	r2, [pc, #436]	; (800229c <HAL_DMA_Abort+0x444>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <HAL_DMA_Abort+0x448>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_DMA_Abort+0x44c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_DMA_Abort+0x450>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a67      	ldr	r2, [pc, #412]	; (80022ac <HAL_DMA_Abort+0x454>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_DMA_Abort+0x458>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a64      	ldr	r2, [pc, #400]	; (80022b4 <HAL_DMA_Abort+0x45c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_DMA_Abort+0x460>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <HAL_DMA_Abort+0x464>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5f      	ldr	r2, [pc, #380]	; (80022c0 <HAL_DMA_Abort+0x468>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <HAL_DMA_Abort+0x46c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_DMA_Abort+0x470>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_DMA_Abort+0x474>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a59      	ldr	r2, [pc, #356]	; (80022d0 <HAL_DMA_Abort+0x478>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_DMA_Abort+0x47c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <HAL_DMA_Abort+0x480>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <HAL_DMA_Abort+0x33c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_DMA_Abort+0x34c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021a4:	e013      	b.n	80021ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a6:	f7ff fb41 	bl	800182c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d90c      	bls.n	80021ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12d      	b.n	800242a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e5      	bne.n	80021a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_DMA_Abort+0x444>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_DMA_Abort+0x448>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_DMA_Abort+0x44c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_DMA_Abort+0x450>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_DMA_Abort+0x454>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <HAL_DMA_Abort+0x458>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_DMA_Abort+0x45c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_DMA_Abort+0x460>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_DMA_Abort+0x464>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_DMA_Abort+0x468>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_DMA_Abort+0x46c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_DMA_Abort+0x470>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_DMA_Abort+0x474>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_DMA_Abort+0x478>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_DMA_Abort+0x47c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_DMA_Abort+0x480>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_DMA_Abort+0x426>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_DMA_Abort+0x428>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02b      	beq.n	80022dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	223f      	movs	r2, #63	; 0x3f
 8002294:	409a      	lsls	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e02a      	b.n	80022f2 <HAL_DMA_Abort+0x49a>
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	40020040 	.word	0x40020040
 80022a8:	40020058 	.word	0x40020058
 80022ac:	40020070 	.word	0x40020070
 80022b0:	40020088 	.word	0x40020088
 80022b4:	400200a0 	.word	0x400200a0
 80022b8:	400200b8 	.word	0x400200b8
 80022bc:	40020410 	.word	0x40020410
 80022c0:	40020428 	.word	0x40020428
 80022c4:	40020440 	.word	0x40020440
 80022c8:	40020458 	.word	0x40020458
 80022cc:	40020470 	.word	0x40020470
 80022d0:	40020488 	.word	0x40020488
 80022d4:	400204a0 	.word	0x400204a0
 80022d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2201      	movs	r2, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_DMA_Abort+0x5dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d072      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_DMA_Abort+0x5e0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d06d      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_DMA_Abort+0x5e4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d068      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a4a      	ldr	r2, [pc, #296]	; (8002440 <HAL_DMA_Abort+0x5e8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d063      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a49      	ldr	r2, [pc, #292]	; (8002444 <HAL_DMA_Abort+0x5ec>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d05e      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <HAL_DMA_Abort+0x5f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d059      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a46      	ldr	r2, [pc, #280]	; (800244c <HAL_DMA_Abort+0x5f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d054      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_DMA_Abort+0x5f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04f      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a43      	ldr	r2, [pc, #268]	; (8002454 <HAL_DMA_Abort+0x5fc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04a      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a41      	ldr	r2, [pc, #260]	; (8002458 <HAL_DMA_Abort+0x600>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d045      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_DMA_Abort+0x604>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d040      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <HAL_DMA_Abort+0x608>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d03b      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <HAL_DMA_Abort+0x60c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d036      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_DMA_Abort+0x610>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_DMA_Abort+0x614>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d02c      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_DMA_Abort+0x618>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a37      	ldr	r2, [pc, #220]	; (8002474 <HAL_DMA_Abort+0x61c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_DMA_Abort+0x620>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01d      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_DMA_Abort+0x624>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d018      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_DMA_Abort+0x628>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_DMA_Abort+0x62c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <HAL_DMA_Abort+0x630>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_DMA_Abort+0x634>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <HAL_DMA_Abort+0x638>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Abort+0x58e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_Abort+0x590>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002416:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40020010 	.word	0x40020010
 8002438:	40020028 	.word	0x40020028
 800243c:	40020040 	.word	0x40020040
 8002440:	40020058 	.word	0x40020058
 8002444:	40020070 	.word	0x40020070
 8002448:	40020088 	.word	0x40020088
 800244c:	400200a0 	.word	0x400200a0
 8002450:	400200b8 	.word	0x400200b8
 8002454:	40020410 	.word	0x40020410
 8002458:	40020428 	.word	0x40020428
 800245c:	40020440 	.word	0x40020440
 8002460:	40020458 	.word	0x40020458
 8002464:	40020470 	.word	0x40020470
 8002468:	40020488 	.word	0x40020488
 800246c:	400204a0 	.word	0x400204a0
 8002470:	400204b8 	.word	0x400204b8
 8002474:	58025408 	.word	0x58025408
 8002478:	5802541c 	.word	0x5802541c
 800247c:	58025430 	.word	0x58025430
 8002480:	58025444 	.word	0x58025444
 8002484:	58025458 	.word	0x58025458
 8002488:	5802546c 	.word	0x5802546c
 800248c:	58025480 	.word	0x58025480
 8002490:	58025494 	.word	0x58025494

08002494 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e237      	b.n	8002916 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e22c      	b.n	8002916 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5c      	ldr	r2, [pc, #368]	; (8002634 <HAL_DMA_Abort_IT+0x1a0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5b      	ldr	r2, [pc, #364]	; (8002638 <HAL_DMA_Abort_IT+0x1a4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a59      	ldr	r2, [pc, #356]	; (800263c <HAL_DMA_Abort_IT+0x1a8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_DMA_Abort_IT+0x1ac>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a56      	ldr	r2, [pc, #344]	; (8002644 <HAL_DMA_Abort_IT+0x1b0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <HAL_DMA_Abort_IT+0x1b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a53      	ldr	r2, [pc, #332]	; (800264c <HAL_DMA_Abort_IT+0x1b8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_DMA_Abort_IT+0x1bc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_DMA_Abort_IT+0x1c0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <HAL_DMA_Abort_IT+0x1c4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_DMA_Abort_IT+0x1c8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_DMA_Abort_IT+0x1cc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_DMA_Abort_IT+0x1d0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_DMA_Abort_IT+0x1d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_DMA_Abort_IT+0x1d8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a46      	ldr	r2, [pc, #280]	; (8002670 <HAL_DMA_Abort_IT+0x1dc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Abort_IT+0xcc>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Abort_IT+0xce>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8086 	beq.w	8002674 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_DMA_Abort_IT+0x1a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_DMA_Abort_IT+0x1a4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d045      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_DMA_Abort_IT+0x1a8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d040      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_DMA_Abort_IT+0x1ac>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d03b      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_DMA_Abort_IT+0x1b0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d036      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_DMA_Abort_IT+0x1b4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_DMA_Abort_IT+0x1b8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02c      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_DMA_Abort_IT+0x1bc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d027      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_DMA_Abort_IT+0x1c0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_DMA_Abort_IT+0x1c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01d      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <HAL_DMA_Abort_IT+0x1c8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <HAL_DMA_Abort_IT+0x1cc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_DMA_Abort_IT+0x1d0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_DMA_Abort_IT+0x1d4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_DMA_Abort_IT+0x1d8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_DMA_Abort_IT+0x1dc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <HAL_DMA_Abort_IT+0x18e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e178      	b.n	8002914 <HAL_DMA_Abort_IT+0x480>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e16f      	b.n	8002914 <HAL_DMA_Abort_IT+0x480>
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 020e 	bic.w	r2, r2, #14
 8002682:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6c      	ldr	r2, [pc, #432]	; (800283c <HAL_DMA_Abort_IT+0x3a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d04a      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <HAL_DMA_Abort_IT+0x3ac>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d045      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_DMA_Abort_IT+0x3b0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d040      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_DMA_Abort_IT+0x3b4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d03b      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_DMA_Abort_IT+0x3b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d036      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_DMA_Abort_IT+0x3bc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d031      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_DMA_Abort_IT+0x3c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02c      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_DMA_Abort_IT+0x3c4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d027      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_DMA_Abort_IT+0x3c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d022      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_DMA_Abort_IT+0x3cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01d      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_DMA_Abort_IT+0x3d0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_DMA_Abort_IT+0x3d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5a      	ldr	r2, [pc, #360]	; (800286c <HAL_DMA_Abort_IT+0x3d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00e      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_DMA_Abort_IT+0x3dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_DMA_Abort_IT+0x3e0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_DMA_Abort_IT+0x3e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <HAL_DMA_Abort_IT+0x2a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e007      	b.n	8002746 <HAL_DMA_Abort_IT+0x2b2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_DMA_Abort_IT+0x3a8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d072      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_DMA_Abort_IT+0x3ac>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d06d      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_DMA_Abort_IT+0x3b0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d068      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_DMA_Abort_IT+0x3b4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d063      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_DMA_Abort_IT+0x3b8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d05e      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_DMA_Abort_IT+0x3bc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d059      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_DMA_Abort_IT+0x3c0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d054      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_DMA_Abort_IT+0x3c4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d04f      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_DMA_Abort_IT+0x3c8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04a      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_DMA_Abort_IT+0x3cc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d045      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <HAL_DMA_Abort_IT+0x3d0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d040      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_DMA_Abort_IT+0x3d4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_DMA_Abort_IT+0x3d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d036      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_DMA_Abort_IT+0x3dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_DMA_Abort_IT+0x3e0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02c      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_DMA_Abort_IT+0x3e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_DMA_Abort_IT+0x3e8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_DMA_Abort_IT+0x3ec>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <HAL_DMA_Abort_IT+0x3f0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_DMA_Abort_IT+0x3f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_DMA_Abort_IT+0x3f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_DMA_Abort_IT+0x3fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_DMA_Abort_IT+0x400>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_DMA_Abort_IT+0x404>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d132      	bne.n	800289c <HAL_DMA_Abort_IT+0x408>
 8002836:	2301      	movs	r3, #1
 8002838:	e031      	b.n	800289e <HAL_DMA_Abort_IT+0x40a>
 800283a:	bf00      	nop
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	58025408 	.word	0x58025408
 8002880:	5802541c 	.word	0x5802541c
 8002884:	58025430 	.word	0x58025430
 8002888:	58025444 	.word	0x58025444
 800288c:	58025458 	.word	0x58025458
 8002890:	5802546c 	.word	0x5802546c
 8002894:	58025480 	.word	0x58025480
 8002898:	58025494 	.word	0x58025494
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2201      	movs	r2, #1
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop

08002920 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b098      	sub	sp, #96	; 0x60
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002928:	4a84      	ldr	r2, [pc, #528]	; (8002b3c <HAL_FDCAN_Init+0x21c>)
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4611      	mov	r1, r2
 8002930:	224c      	movs	r2, #76	; 0x4c
 8002932:	4618      	mov	r0, r3
 8002934:	f006 ff08 	bl	8009748 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c6      	b.n	8002cd0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7e      	ldr	r2, [pc, #504]	; (8002b40 <HAL_FDCAN_Init+0x220>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d106      	bne.n	800295a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd ff68 	bl	8000844 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0210 	bic.w	r2, r2, #16
 8002982:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002984:	f7fe ff52 	bl	800182c <HAL_GetTick>
 8002988:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800298a:	e014      	b.n	80029b6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800298c:	f7fe ff4e 	bl	800182c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b0a      	cmp	r3, #10
 8002998:	d90d      	bls.n	80029b6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e18c      	b.n	8002cd0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d0e3      	beq.n	800298c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d4:	f7fe ff2a 	bl	800182c <HAL_GetTick>
 80029d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80029da:	e014      	b.n	8002a06 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80029dc:	f7fe ff26 	bl	800182c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b0a      	cmp	r3, #10
 80029e8:	d90d      	bls.n	8002a06 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e164      	b.n	8002cd0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0e3      	beq.n	80029dc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7c1b      	ldrb	r3, [r3, #16]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d108      	bne.n	8002a3e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	e007      	b.n	8002a4e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7c5b      	ldrb	r3, [r3, #17]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d108      	bne.n	8002a68 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a64:	619a      	str	r2, [r3, #24]
 8002a66:	e007      	b.n	8002a78 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a76:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7c9b      	ldrb	r3, [r3, #18]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a8e:	619a      	str	r2, [r3, #24]
 8002a90:	e007      	b.n	8002aa2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aa0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002ac6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0210 	bic.w	r2, r2, #16
 8002ad6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d108      	bne.n	8002af2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	619a      	str	r2, [r3, #24]
 8002af0:	e030      	b.n	8002b54 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d02c      	beq.n	8002b54 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d020      	beq.n	8002b44 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b10:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0210 	orr.w	r2, r2, #16
 8002b20:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d114      	bne.n	8002b54 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	e00b      	b.n	8002b54 <HAL_FDCAN_Init+0x234>
 8002b3c:	0800abe0 	.word	0x0800abe0
 8002b40:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b64:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002b6c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b7c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b7e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b88:	d115      	bne.n	8002bb6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	3b01      	subs	r3, #1
 8002b96:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002b98:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002bb2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002bb4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	4413      	add	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002bea:	f023 0107 	bic.w	r1, r3, #7
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	443b      	add	r3, r7
 8002bf8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d011      	beq.n	8002c32 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c16:	f023 0107 	bic.w	r1, r3, #7
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	443b      	add	r3, r7
 8002c24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c42:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	443b      	add	r3, r7
 8002c50:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002c54:	011a      	lsls	r2, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c70:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	3360      	adds	r3, #96	; 0x60
 8002c7c:	443b      	add	r3, r7
 8002c7e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_FDCAN_Init+0x3b8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d107      	bne.n	8002ca8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f022 0203 	bic.w	r2, r2, #3
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f891 	bl	8002de8 <FDCAN_CalcultateRamBlockAddresses>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002ccc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3760      	adds	r7, #96	; 0x60
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	4000a000 	.word	0x4000a000

08002cdc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d111      	bne.n	8002d14 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e008      	b.n	8002d26 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d141      	bne.n	8002dce <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d52:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e038      	b.n	8002de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e026      	b.n	8002de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f9a3 	bl	80030f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e008      	b.n	8002de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd4:	f043 0208 	orr.w	r2, r3, #8
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002dfe:	4ba7      	ldr	r3, [pc, #668]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	0091      	lsls	r1, r2, #2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e18:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e3e:	4b97      	ldr	r3, [pc, #604]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	0091      	lsls	r1, r2, #2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	041a      	lsls	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4413      	add	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e80:	4b86      	ldr	r3, [pc, #536]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	0091      	lsls	r1, r2, #2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e9a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	041a      	lsls	r2, r3, #16
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ec8:	4b74      	ldr	r3, [pc, #464]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	0091      	lsls	r1, r2, #2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ee2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eea:	041a      	lsls	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4413      	add	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002f10:	4b62      	ldr	r3, [pc, #392]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	0091      	lsls	r1, r2, #2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f3c:	4b57      	ldr	r3, [pc, #348]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	0091      	lsls	r1, r2, #2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f56:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4413      	add	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	0091      	lsls	r1, r2, #2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f98:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	061a      	lsls	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	009a      	lsls	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d915      	bls.n	80030c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003098:	e006      	b.n	80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800309a:	bf00      	nop
 800309c:	ffff0003 	.word	0xffff0003
 80030a0:	10002b00 	.word	0x10002b00
 80030a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e010      	b.n	80030e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e005      	b.n	80030d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d3f3      	bcc.n	80030cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003112:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800311a:	4313      	orrs	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e00a      	b.n	8003136 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003128:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800312e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003134:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003140:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003146:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800314c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3304      	adds	r3, #4
 8003176:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	3304      	adds	r3, #4
 8003182:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e020      	b.n	80031cc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3303      	adds	r3, #3
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3302      	adds	r3, #2
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	440b      	add	r3, r1
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80031a2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	440b      	add	r3, r1
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80031b0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	440a      	add	r2, r1
 80031b8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80031ba:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	3304      	adds	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3304      	adds	r3, #4
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <FDCAN_CopyMessageToRAM+0xf8>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	461a      	mov	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4293      	cmp	r3, r2
 80031dc:	d3d5      	bcc.n	800318a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	3724      	adds	r7, #36	; 0x24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	0800ac3c 	.word	0x0800ac3c

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031fe:	4b89      	ldr	r3, [pc, #548]	; (8003424 <HAL_GPIO_Init+0x234>)
 8003200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003202:	e194      	b.n	800352e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8186 	beq.w	8003528 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d005      	beq.n	8003234 <HAL_GPIO_Init+0x44>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d130      	bne.n	8003296 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326a:	2201      	movs	r2, #1
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 0201 	and.w	r2, r3, #1
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d017      	beq.n	80032d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d123      	bne.n	8003326 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0203 	and.w	r2, r3, #3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80e0 	beq.w	8003528 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_GPIO_Init+0x238>)
 800336a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800336e:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <HAL_GPIO_Init+0x238>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <HAL_GPIO_Init+0x238>)
 800337a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a29      	ldr	r2, [pc, #164]	; (800342c <HAL_GPIO_Init+0x23c>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <HAL_GPIO_Init+0x240>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d052      	beq.n	8003458 <HAL_GPIO_Init+0x268>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_GPIO_Init+0x244>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_GPIO_Init+0x22e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_GPIO_Init+0x248>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02b      	beq.n	800341a <HAL_GPIO_Init+0x22a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_GPIO_Init+0x24c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d025      	beq.n	8003416 <HAL_GPIO_Init+0x226>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_GPIO_Init+0x250>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <HAL_GPIO_Init+0x222>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_GPIO_Init+0x254>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_Init+0x21e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <HAL_GPIO_Init+0x258>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_Init+0x21a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_GPIO_Init+0x25c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_Init+0x216>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_GPIO_Init+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_Init+0x212>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <HAL_GPIO_Init+0x264>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_Init+0x20e>
 80033fa:	2309      	movs	r3, #9
 80033fc:	e02d      	b.n	800345a <HAL_GPIO_Init+0x26a>
 80033fe:	230a      	movs	r3, #10
 8003400:	e02b      	b.n	800345a <HAL_GPIO_Init+0x26a>
 8003402:	2308      	movs	r3, #8
 8003404:	e029      	b.n	800345a <HAL_GPIO_Init+0x26a>
 8003406:	2307      	movs	r3, #7
 8003408:	e027      	b.n	800345a <HAL_GPIO_Init+0x26a>
 800340a:	2306      	movs	r3, #6
 800340c:	e025      	b.n	800345a <HAL_GPIO_Init+0x26a>
 800340e:	2305      	movs	r3, #5
 8003410:	e023      	b.n	800345a <HAL_GPIO_Init+0x26a>
 8003412:	2304      	movs	r3, #4
 8003414:	e021      	b.n	800345a <HAL_GPIO_Init+0x26a>
 8003416:	2303      	movs	r3, #3
 8003418:	e01f      	b.n	800345a <HAL_GPIO_Init+0x26a>
 800341a:	2302      	movs	r3, #2
 800341c:	e01d      	b.n	800345a <HAL_GPIO_Init+0x26a>
 800341e:	2301      	movs	r3, #1
 8003420:	e01b      	b.n	800345a <HAL_GPIO_Init+0x26a>
 8003422:	bf00      	nop
 8003424:	58000080 	.word	0x58000080
 8003428:	58024400 	.word	0x58024400
 800342c:	58000400 	.word	0x58000400
 8003430:	58020000 	.word	0x58020000
 8003434:	58020400 	.word	0x58020400
 8003438:	58020800 	.word	0x58020800
 800343c:	58020c00 	.word	0x58020c00
 8003440:	58021000 	.word	0x58021000
 8003444:	58021400 	.word	0x58021400
 8003448:	58021800 	.word	0x58021800
 800344c:	58021c00 	.word	0x58021c00
 8003450:	58022000 	.word	0x58022000
 8003454:	58022400 	.word	0x58022400
 8003458:	2300      	movs	r3, #0
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f002 0203 	and.w	r2, r2, #3
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	4093      	lsls	r3, r2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346a:	4938      	ldr	r1, [pc, #224]	; (800354c <HAL_GPIO_Init+0x35c>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800349e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3301      	adds	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f ae63 	bne.w	8003204 <HAL_GPIO_Init+0x14>
  }
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	3724      	adds	r7, #36	; 0x24
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	58000400 	.word	0x58000400

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003594:	887a      	ldrh	r2, [r7, #2]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	041a      	lsls	r2, r3, #16
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43d9      	mvns	r1, r3
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	400b      	ands	r3, r1
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_PWREx_ConfigSupply+0x70>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d00a      	beq.n	80035e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_PWREx_ConfigSupply+0x70>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e01f      	b.n	800361e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e01d      	b.n	800361e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_PWREx_ConfigSupply+0x70>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	490f      	ldr	r1, [pc, #60]	; (8003628 <HAL_PWREx_ConfigSupply+0x70>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035f2:	f7fe f91b 	bl	800182c <HAL_GetTick>
 80035f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035f8:	e009      	b.n	800360e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035fa:	f7fe f917 	bl	800182c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003608:	d901      	bls.n	800360e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_PWREx_ConfigSupply+0x70>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d1ee      	bne.n	80035fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	58024800 	.word	0x58024800

0800362c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f000 bc1f 	b.w	8003e7e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80b3 	beq.w	80037b4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	4b95      	ldr	r3, [pc, #596]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003658:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	2b10      	cmp	r3, #16
 8003662:	d007      	beq.n	8003674 <HAL_RCC_OscConfig+0x48>
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b18      	cmp	r3, #24
 8003668:	d112      	bne.n	8003690 <HAL_RCC_OscConfig+0x64>
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d10d      	bne.n	8003690 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b8b      	ldr	r3, [pc, #556]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8098 	beq.w	80037b2 <HAL_RCC_OscConfig+0x186>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 8093 	bne.w	80037b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e3f6      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x7c>
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e058      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <HAL_RCC_OscConfig+0xaa>
 80036b0:	4b7c      	ldr	r3, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7b      	ldr	r2, [pc, #492]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a78      	ldr	r2, [pc, #480]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e041      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036de:	d112      	bne.n	8003706 <HAL_RCC_OscConfig+0xda>
 80036e0:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6c      	ldr	r2, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e029      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800370e:	d112      	bne.n	8003736 <HAL_RCC_OscConfig+0x10a>
 8003710:	4b64      	ldr	r3, [pc, #400]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a63      	ldr	r2, [pc, #396]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a60      	ldr	r2, [pc, #384]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e011      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5a      	ldr	r2, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a54      	ldr	r2, [pc, #336]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003754:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d013      	beq.n	800378a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fe f863 	bl	800182c <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376a:	f7fe f85f 	bl	800182c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e380      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377c:	4b49      	ldr	r3, [pc, #292]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x13e>
 8003788:	e014      	b.n	80037b4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fe f84f 	bl	800182c <HAL_GetTick>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003792:	f7fe f84b 	bl	800182c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e36c      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037a4:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x166>
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808c 	beq.w	80038da <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037cc:	4b35      	ldr	r3, [pc, #212]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_RCC_OscConfig+0x1bc>
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	2b18      	cmp	r3, #24
 80037dc:	d137      	bne.n	800384e <HAL_RCC_OscConfig+0x222>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d132      	bne.n	800384e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x1d4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e33e      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 0219 	bic.w	r2, r3, #25
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4925      	ldr	r1, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fe f80b 	bl	800182c <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe f807 	bl	800182c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e328      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	4917      	ldr	r1, [pc, #92]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384c:	e045      	b.n	80038da <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0219 	bic.w	r2, r3, #25
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4910      	ldr	r1, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd ffe0 	bl	800182c <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7fd ffdc 	bl	800182c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e2fd      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	4901      	ldr	r1, [pc, #4]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e01a      	b.n	80038da <HAL_RCC_OscConfig+0x2ae>
 80038a4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a8:	4b97      	ldr	r3, [pc, #604]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a96      	ldr	r2, [pc, #600]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd ffba 	bl	800182c <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fd ffb6 	bl	800182c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e2d7      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038ce:	4b8e      	ldr	r3, [pc, #568]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d06a      	beq.n	80039bc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f0:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d007      	beq.n	800390c <HAL_RCC_OscConfig+0x2e0>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b18      	cmp	r3, #24
 8003900:	d11b      	bne.n	800393a <HAL_RCC_OscConfig+0x30e>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d116      	bne.n	800393a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x2f8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e2ac      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003924:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	4975      	ldr	r1, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003938:	e040      	b.n	80039bc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d023      	beq.n	800398a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003942:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a70      	ldr	r2, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fd ff6d 	bl	800182c <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003956:	f7fd ff69 	bl	800182c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e28a      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003968:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	4961      	ldr	r1, [pc, #388]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
 8003988:	e018      	b.n	80039bc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd ff49 	bl	800182c <HAL_GetTick>
 800399a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800399e:	f7fd ff45 	bl	800182c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e266      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d036      	beq.n	8003a36 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d019      	beq.n	8003a04 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80039d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d4:	4a4c      	ldr	r2, [pc, #304]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd ff26 	bl	800182c <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd ff22 	bl	800182c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e243      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x3b8>
 8003a02:	e018      	b.n	8003a36 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a08:	4a3f      	ldr	r2, [pc, #252]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd ff0c 	bl	800182c <HAL_GetTick>
 8003a14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a18:	f7fd ff08 	bl	800182c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e229      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d019      	beq.n	8003a7e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2e      	ldr	r2, [pc, #184]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fee9 	bl	800182c <HAL_GetTick>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5e:	f7fd fee5 	bl	800182c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e206      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x432>
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fecf 	bl	800182c <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a92:	f7fd fecb 	bl	800182c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1ec      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80af 	beq.w	8003c1c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCC_OscConfig+0x4e0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_RCC_OscConfig+0x4e0>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aca:	f7fd feaf 	bl	800182c <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fd feab 	bl	800182c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1cc      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x4e0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4e4>
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a02      	ldr	r2, [pc, #8]	; (8003b08 <HAL_RCC_OscConfig+0x4dc>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	e05b      	b.n	8003bbe <HAL_RCC_OscConfig+0x592>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	58024800 	.word	0x58024800
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d112      	bne.n	8003b3e <HAL_RCC_OscConfig+0x512>
 8003b18:	4b9d      	ldr	r3, [pc, #628]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a9c      	ldr	r2, [pc, #624]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b9a      	ldr	r3, [pc, #616]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a99      	ldr	r2, [pc, #612]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	4b97      	ldr	r3, [pc, #604]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a96      	ldr	r2, [pc, #600]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b36:	f023 0304 	bic.w	r3, r3, #4
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	e03f      	b.n	8003bbe <HAL_RCC_OscConfig+0x592>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d112      	bne.n	8003b6c <HAL_RCC_OscConfig+0x540>
 8003b46:	4b92      	ldr	r3, [pc, #584]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a91      	ldr	r2, [pc, #580]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a8e      	ldr	r2, [pc, #568]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b8c      	ldr	r3, [pc, #560]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a8b      	ldr	r2, [pc, #556]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6a:	e028      	b.n	8003bbe <HAL_RCC_OscConfig+0x592>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b85      	cmp	r3, #133	; 0x85
 8003b72:	d112      	bne.n	8003b9a <HAL_RCC_OscConfig+0x56e>
 8003b74:	4b86      	ldr	r3, [pc, #536]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a85      	ldr	r2, [pc, #532]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b83      	ldr	r3, [pc, #524]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a82      	ldr	r2, [pc, #520]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	4b80      	ldr	r3, [pc, #512]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a7f      	ldr	r2, [pc, #508]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	e011      	b.n	8003bbe <HAL_RCC_OscConfig+0x592>
 8003b9a:	4b7d      	ldr	r3, [pc, #500]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a7c      	ldr	r2, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba6:	4b7a      	ldr	r3, [pc, #488]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a79      	ldr	r2, [pc, #484]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a76      	ldr	r2, [pc, #472]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d015      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fe31 	bl	800182c <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd fe2d 	bl	800182c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e14c      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ee      	beq.n	8003bce <HAL_RCC_OscConfig+0x5a2>
 8003bf0:	e014      	b.n	8003c1c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fe1b 	bl	800182c <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fd fe17 	bl	800182c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e136      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c10:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ee      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 812b 	beq.w	8003e7c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c26:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c2e:	2b18      	cmp	r3, #24
 8003c30:	f000 80bb 	beq.w	8003daa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f040 8095 	bne.w	8003d68 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fdef 	bl	800182c <HAL_GetTick>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fdeb 	bl	800182c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e10c      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c64:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c70:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_OscConfig+0x768>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	430a      	orrs	r2, r1
 8003c84:	4942      	ldr	r1, [pc, #264]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	628b      	str	r3, [r1, #40]	; 0x28
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	025b      	lsls	r3, r3, #9
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cba:	4935      	ldr	r1, [pc, #212]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cc0:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cd8:	00d2      	lsls	r2, r2, #3
 8003cda:	492d      	ldr	r1, [pc, #180]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f023 020c 	bic.w	r2, r3, #12
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4928      	ldr	r1, [pc, #160]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f023 0202 	bic.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4924      	ldr	r1, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fd74 	bl	800182c <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fd70 	bl	800182c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e091      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x71c>
 8003d66:	e089      	b.n	8003e7c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_RCC_OscConfig+0x764>)
 8003d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd fd5a 	bl	800182c <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7a:	e00f      	b.n	8003d9c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fd fd56 	bl	800182c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d908      	bls.n	8003d9c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e077      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
 8003d94:	fffffc0c 	.word	0xfffffc0c
 8003d98:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d9c:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e9      	bne.n	8003d7c <HAL_RCC_OscConfig+0x750>
 8003da8:	e068      	b.n	8003e7c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d031      	beq.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0203 	and.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d12a      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d122      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d11a      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	0a5b      	lsrs	r3, r3, #9
 8003df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d111      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d108      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	0e1b      	lsrs	r3, r3, #24
 8003e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e02b      	b.n	8003e7e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	08db      	lsrs	r3, r3, #3
 8003e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e30:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d01f      	beq.n	8003e7c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e3c:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a11      	ldr	r2, [pc, #68]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e48:	f7fd fcf0 	bl	800182c <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e4e:	bf00      	nop
 8003e50:	f7fd fcec 	bl	800182c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d0f9      	beq.n	8003e50 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x860>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e68:	00d2      	lsls	r2, r2, #3
 8003e6a:	4907      	ldr	r1, [pc, #28]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HAL_RCC_OscConfig+0x85c>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3730      	adds	r7, #48	; 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	ffff0007 	.word	0xffff0007

08003e90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e19c      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b8a      	ldr	r3, [pc, #552]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b87      	ldr	r3, [pc, #540]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 020f 	bic.w	r2, r3, #15
 8003eba:	4985      	ldr	r1, [pc, #532]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b83      	ldr	r3, [pc, #524]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e184      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d908      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ef0:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	4975      	ldr	r1, [pc, #468]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d908      	bls.n	8003f30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	496a      	ldr	r1, [pc, #424]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d908      	bls.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	495e      	ldr	r1, [pc, #376]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d908      	bls.n	8003f8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4953      	ldr	r1, [pc, #332]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d908      	bls.n	8003fba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f023 020f 	bic.w	r2, r3, #15
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4947      	ldr	r1, [pc, #284]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d055      	beq.n	8004072 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4940      	ldr	r1, [pc, #256]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe0:	4b3c      	ldr	r3, [pc, #240]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d121      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0f6      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d115      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0ea      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0de      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004020:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0d6      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004030:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f023 0207 	bic.w	r2, r3, #7
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4925      	ldr	r1, [pc, #148]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 800403e:	4313      	orrs	r3, r2
 8004040:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fd fbf3 	bl	800182c <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	e00a      	b.n	8004060 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404a:	f7fd fbef 	bl	800182c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0be      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	429a      	cmp	r2, r3
 8004070:	d1eb      	bne.n	800404a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	429a      	cmp	r2, r3
 800408c:	d208      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f023 020f 	bic.w	r2, r3, #15
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_RCC_ClockConfig+0x244>)
 800409c:	4313      	orrs	r3, r2
 800409e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d214      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 020f 	bic.w	r2, r3, #15
 80040b6:	4906      	ldr	r1, [pc, #24]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_RCC_ClockConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e086      	b.n	80041de <HAL_RCC_ClockConfig+0x34e>
 80040d0:	52002000 	.word	0x52002000
 80040d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d208      	bcs.n	8004106 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f4:	4b3c      	ldr	r3, [pc, #240]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4939      	ldr	r1, [pc, #228]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004102:	4313      	orrs	r3, r2
 8004104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	4b34      	ldr	r3, [pc, #208]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800411e:	429a      	cmp	r2, r3
 8004120:	d208      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	492e      	ldr	r1, [pc, #184]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800414c:	429a      	cmp	r2, r3
 800414e:	d208      	bcs.n	8004162 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 800415e:	4313      	orrs	r3, r2
 8004160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417a:	429a      	cmp	r2, r3
 800417c:	d208      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4917      	ldr	r1, [pc, #92]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 800418c:	4313      	orrs	r3, r2
 800418e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004190:	f000 f834 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	4912      	ldr	r1, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x35c>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <HAL_RCC_ClockConfig+0x35c>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x360>)
 80041c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x364>)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_ClockConfig+0x368>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd fae0 	bl	8001798 <HAL_InitTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	0800ac2c 	.word	0x0800ac2c
 80041f0:	24000018 	.word	0x24000018
 80041f4:	24000014 	.word	0x24000014
 80041f8:	2400001c 	.word	0x2400001c

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004202:	4bb3      	ldr	r3, [pc, #716]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800420a:	2b18      	cmp	r3, #24
 800420c:	f200 8155 	bhi.w	80044ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	0800427d 	.word	0x0800427d
 800421c:	080044bb 	.word	0x080044bb
 8004220:	080044bb 	.word	0x080044bb
 8004224:	080044bb 	.word	0x080044bb
 8004228:	080044bb 	.word	0x080044bb
 800422c:	080044bb 	.word	0x080044bb
 8004230:	080044bb 	.word	0x080044bb
 8004234:	080044bb 	.word	0x080044bb
 8004238:	080042a3 	.word	0x080042a3
 800423c:	080044bb 	.word	0x080044bb
 8004240:	080044bb 	.word	0x080044bb
 8004244:	080044bb 	.word	0x080044bb
 8004248:	080044bb 	.word	0x080044bb
 800424c:	080044bb 	.word	0x080044bb
 8004250:	080044bb 	.word	0x080044bb
 8004254:	080044bb 	.word	0x080044bb
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080044bb 	.word	0x080044bb
 8004260:	080044bb 	.word	0x080044bb
 8004264:	080044bb 	.word	0x080044bb
 8004268:	080044bb 	.word	0x080044bb
 800426c:	080044bb 	.word	0x080044bb
 8004270:	080044bb 	.word	0x080044bb
 8004274:	080044bb 	.word	0x080044bb
 8004278:	080042af 	.word	0x080042af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800427c:	4b94      	ldr	r3, [pc, #592]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004288:	4b91      	ldr	r3, [pc, #580]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	4a90      	ldr	r2, [pc, #576]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800429a:	e111      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800429c:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800429e:	61bb      	str	r3, [r7, #24]
      break;
 80042a0:	e10e      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042a2:	4b8d      	ldr	r3, [pc, #564]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042a4:	61bb      	str	r3, [r7, #24]
      break;
 80042a6:	e10b      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042a8:	4b8c      	ldr	r3, [pc, #560]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042aa:	61bb      	str	r3, [r7, #24]
      break;
 80042ac:	e108      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ae:	4b88      	ldr	r3, [pc, #544]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042b8:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042c4:	4b82      	ldr	r3, [pc, #520]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042ce:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80e1 	beq.w	80044b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	f000 8083 	beq.w	8004400 <HAL_RCC_GetSysClockFreq+0x204>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f200 80a1 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x248>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x114>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d056      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800430e:	e099      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004310:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800431c:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	4a6b      	ldr	r2, [pc, #428]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b62      	ldr	r3, [pc, #392]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004376:	e087      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ba:	e065      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fe:	e043      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a02 	vldr	s12, [r7, #8]
 8004426:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004442:	e021      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004466:	ed97 6a02 	vldr	s12, [r7, #8]
 800446a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004486:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	0a5b      	lsrs	r3, r3, #9
 800448e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004492:	3301      	adds	r3, #1
 8004494:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ac:	ee17 3a90 	vmov	r3, s15
 80044b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
      break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044bc:	61bb      	str	r3, [r7, #24]
      break;
 80044be:	bf00      	nop
  }

  return sysclockfreq;
 80044c0:	69bb      	ldr	r3, [r7, #24]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
 80044d4:	03d09000 	.word	0x03d09000
 80044d8:	003d0900 	.word	0x003d0900
 80044dc:	017d7840 	.word	0x017d7840
 80044e0:	46000000 	.word	0x46000000
 80044e4:	4c742400 	.word	0x4c742400
 80044e8:	4a742400 	.word	0x4a742400
 80044ec:	4bbebc20 	.word	0x4bbebc20

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80044f6:	f7ff fe81 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCC_GetHCLKFreq+0x50>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	490f      	ldr	r1, [pc, #60]	; (8004544 <HAL_RCC_GetHCLKFreq+0x54>)
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_GetHCLKFreq+0x50>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_RCC_GetHCLKFreq+0x54>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <HAL_RCC_GetHCLKFreq+0x58>)
 800452c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800452e:	4a07      	ldr	r2, [pc, #28]	; (800454c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <HAL_RCC_GetHCLKFreq+0x58>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	58024400 	.word	0x58024400
 8004544:	0800ac2c 	.word	0x0800ac2c
 8004548:	24000018 	.word	0x24000018
 800454c:	24000014 	.word	0x24000014

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004554:	f7ff ffcc 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	58024400 	.word	0x58024400
 8004578:	0800ac2c 	.word	0x0800ac2c

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004580:	f7ff ffb6 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	58024400 	.word	0x58024400
 80045a4:	0800ac2c 	.word	0x0800ac2c

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ac:	b0c8      	sub	sp, #288	; 0x120
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80045cc:	2500      	movs	r5, #0
 80045ce:	ea54 0305 	orrs.w	r3, r4, r5
 80045d2:	d049      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045de:	d02f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80045e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045e4:	d828      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ea:	d01a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f0:	d822      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d007      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045fc:	e01c      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fe:	4ba7      	ldr	r3, [pc, #668]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4aa6      	ldr	r2, [pc, #664]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800460a:	e01a      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	3308      	adds	r3, #8
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f001 fc43 	bl	8005ea0 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	3328      	adds	r3, #40	; 0x28
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fcea 	bl	8006004 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800464a:	4b94      	ldr	r3, [pc, #592]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	4a90      	ldr	r2, [pc, #576]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800465a:	430b      	orrs	r3, r1
 800465c:	6513      	str	r3, [r2, #80]	; 0x50
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004664:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004674:	f04f 0900 	mov.w	r9, #0
 8004678:	ea58 0309 	orrs.w	r3, r8, r9
 800467c:	d047      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	2b04      	cmp	r3, #4
 8004686:	d82a      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046a5 	.word	0x080046a5
 8004694:	080046b3 	.word	0x080046b3
 8004698:	080046c9 	.word	0x080046c9
 800469c:	080046e7 	.word	0x080046e7
 80046a0:	080046e7 	.word	0x080046e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a4:	4b7d      	ldr	r3, [pc, #500]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	4a7c      	ldr	r2, [pc, #496]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b0:	e01a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b6:	3308      	adds	r3, #8
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fbf0 	bl	8005ea0 <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c6:	e00f      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046cc:	3328      	adds	r3, #40	; 0x28
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 fc97 	bl	8006004 <RCCEx_PLL3_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046dc:	e004      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80046e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	f023 0107 	bic.w	r1, r3, #7
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	4a67      	ldr	r2, [pc, #412]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6513      	str	r3, [r2, #80]	; 0x50
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800470a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800471a:	f04f 0b00 	mov.w	fp, #0
 800471e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004722:	d054      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800472e:	d036      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004730:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004734:	d82f      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	d032      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800473c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004740:	d829      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	d02f      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d825      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d018      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d821      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d007      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800475a:	e01c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b4f      	ldr	r3, [pc, #316]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	4a4e      	ldr	r2, [pc, #312]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004768:	e01e      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476e:	3308      	adds	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fb94 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800477e:	e013      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	3328      	adds	r3, #40	; 0x28
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fc3b 	bl	8006004 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80047a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	4a37      	ldr	r2, [pc, #220]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6513      	str	r3, [r2, #80]	; 0x50
 80047c4:	e003      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80047da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d05c      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80047f8:	d03b      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047fa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80047fe:	d834      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d037      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480a:	d82e      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800480c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004810:	d033      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004812:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004816:	d828      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d01a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d822      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d007      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800482e:	e01c      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800483c:	e01e      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004842:	3308      	adds	r3, #8
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fb2a 	bl	8005ea0 <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004852:	e013      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004858:	3328      	adds	r3, #40	; 0x28
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f001 fbd1 	bl	8006004 <RCCEx_PLL3_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004868:	e008      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004870:	e004      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800487a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004888:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	4a02      	ldr	r2, [pc, #8]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6513      	str	r3, [r2, #80]	; 0x50
 8004898:	e006      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800489a:	bf00      	nop
 800489c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d03a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d01f      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d819      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d815      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d111      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e6:	4bae      	ldr	r3, [pc, #696]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4aad      	ldr	r2, [pc, #692]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	3308      	adds	r3, #8
 80048fa:	2102      	movs	r1, #2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 facf 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004910:	e002      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004920:	4b9f      	ldr	r3, [pc, #636]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004924:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	4a9c      	ldr	r2, [pc, #624]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004930:	430b      	orrs	r3, r1
 8004932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800493a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800494a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004954:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d051      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004968:	d035      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800496a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496e:	d82e      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004974:	d031      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800497a:	d828      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004980:	d01a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004986:	d822      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004990:	d007      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004992:	e01c      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004994:	4b82      	ldr	r3, [pc, #520]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a81      	ldr	r2, [pc, #516]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049a0:	e01c      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	3308      	adds	r3, #8
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fa78 	bl	8005ea0 <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049bc:	3328      	adds	r3, #40	; 0x28
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fb1f 	bl	8006004 <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80049da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049e4:	4b6e      	ldr	r3, [pc, #440]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f2:	4a6b      	ldr	r2, [pc, #428]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6513      	str	r3, [r2, #80]	; 0x50
 80049f8:	e003      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	d053      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2c:	d033      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a32:	d82c      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a38:	d02f      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004a3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a3e:	d826      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a44:	d02b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a4a:	d820      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a50:	d012      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a56:	d81a      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d022      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a60:	d115      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	3308      	adds	r3, #8
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fa18 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a76:	e015      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	3328      	adds	r3, #40	; 0x28
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fabf 	bl	8006004 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004a96:	bf00      	nop
 8004a98:	e004      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004aac:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aba:	4a39      	ldr	r2, [pc, #228]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6513      	str	r3, [r2, #80]	; 0x50
 8004ac0:	e003      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ac6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ada:	2300      	movs	r3, #0
 8004adc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ae0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	d060      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004af6:	d039      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004af8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004afc:	d832      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b02:	d035      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b08:	d82c      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d031      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d826      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b1a:	d02d      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004b1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b20:	d820      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b26:	d012      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d81a      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d024      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b36:	d115      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 f9ad 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e017      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b52:	3328      	adds	r3, #40	; 0x28
 8004b54:	2101      	movs	r1, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fa54 	bl	8006004 <RCCEx_PLL3_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b62:	e00c      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b6c:	bf00      	nop
 8004b6e:	e006      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b96:	4a02      	ldr	r2, [pc, #8]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ba8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	d037      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bdc:	d816      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be6:	d111      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be8:	4bc4      	ldr	r3, [pc, #784]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4ac3      	ldr	r2, [pc, #780]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f94e 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c1e:	4bb7      	ldr	r3, [pc, #732]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2c:	4ab3      	ldr	r2, [pc, #716]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6513      	str	r3, [r2, #80]	; 0x50
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	d039      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d81c      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004ca9 	.word	0x08004ca9
 8004c70:	08004c7d 	.word	0x08004c7d
 8004c74:	08004c8b 	.word	0x08004c8b
 8004c78:	08004ca9 	.word	0x08004ca9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4b9f      	ldr	r3, [pc, #636]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a9e      	ldr	r2, [pc, #632]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c88:	e00f      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 f904 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c9e:	e004      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ca6:	e000      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004caa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cb2:	4b92      	ldr	r3, [pc, #584]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	f023 0103 	bic.w	r1, r3, #3
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	4a8e      	ldr	r2, [pc, #568]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc6:	e003      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ccc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ce6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f000 8099 	beq.w	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf2:	4b83      	ldr	r3, [pc, #524]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a82      	ldr	r2, [pc, #520]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cfe:	f7fc fd95 	bl	800182c <HAL_GetTick>
 8004d02:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d06:	e00b      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fc fd90 	bl	800182c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d903      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d1e:	e005      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d20:	4b77      	ldr	r3, [pc, #476]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ed      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d173      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d34:	4b71      	ldr	r3, [pc, #452]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d40:	4053      	eors	r3, r2
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d015      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	4b69      	ldr	r3, [pc, #420]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a68      	ldr	r2, [pc, #416]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	4b66      	ldr	r3, [pc, #408]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a65      	ldr	r2, [pc, #404]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d6e:	4a63      	ldr	r2, [pc, #396]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d118      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fc fd52 	bl	800182c <HAL_GetTick>
 8004d88:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d8c:	e00d      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fc fd4d 	bl	800182c <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d903      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004da8:	e005      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004daa:	4b54      	ldr	r3, [pc, #336]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0eb      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004db6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d129      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dce:	d10e      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004dd0:	4b4a      	ldr	r3, [pc, #296]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004de0:	091a      	lsrs	r2, r3, #4
 8004de2:	4b48      	ldr	r3, [pc, #288]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	4a45      	ldr	r2, [pc, #276]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6113      	str	r3, [r2, #16]
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004dee:	4b43      	ldr	r3, [pc, #268]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	4a42      	ldr	r2, [pc, #264]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004df8:	6113      	str	r3, [r2, #16]
 8004dfa:	4b40      	ldr	r3, [pc, #256]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f002 0301 	and.w	r3, r2, #1
 8004e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f000 8090 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4e:	2b28      	cmp	r3, #40	; 0x28
 8004e50:	d870      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004f3d 	.word	0x08004f3d
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	08004f35 	.word	0x08004f35
 8004e64:	08004f35 	.word	0x08004f35
 8004e68:	08004f35 	.word	0x08004f35
 8004e6c:	08004f35 	.word	0x08004f35
 8004e70:	08004f35 	.word	0x08004f35
 8004e74:	08004f35 	.word	0x08004f35
 8004e78:	08004f09 	.word	0x08004f09
 8004e7c:	08004f35 	.word	0x08004f35
 8004e80:	08004f35 	.word	0x08004f35
 8004e84:	08004f35 	.word	0x08004f35
 8004e88:	08004f35 	.word	0x08004f35
 8004e8c:	08004f35 	.word	0x08004f35
 8004e90:	08004f35 	.word	0x08004f35
 8004e94:	08004f35 	.word	0x08004f35
 8004e98:	08004f1f 	.word	0x08004f1f
 8004e9c:	08004f35 	.word	0x08004f35
 8004ea0:	08004f35 	.word	0x08004f35
 8004ea4:	08004f35 	.word	0x08004f35
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f35 	.word	0x08004f35
 8004eb0:	08004f35 	.word	0x08004f35
 8004eb4:	08004f35 	.word	0x08004f35
 8004eb8:	08004f3d 	.word	0x08004f3d
 8004ebc:	08004f35 	.word	0x08004f35
 8004ec0:	08004f35 	.word	0x08004f35
 8004ec4:	08004f35 	.word	0x08004f35
 8004ec8:	08004f35 	.word	0x08004f35
 8004ecc:	08004f35 	.word	0x08004f35
 8004ed0:	08004f35 	.word	0x08004f35
 8004ed4:	08004f35 	.word	0x08004f35
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	08004f35 	.word	0x08004f35
 8004ee0:	08004f35 	.word	0x08004f35
 8004ee4:	08004f35 	.word	0x08004f35
 8004ee8:	08004f35 	.word	0x08004f35
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f35 	.word	0x08004f35
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f3d 	.word	0x08004f3d
 8004efc:	58024400 	.word	0x58024400
 8004f00:	58024800 	.word	0x58024800
 8004f04:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 ffc5 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f1c:	e00f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	3328      	adds	r3, #40	; 0x28
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f86c 	bl	8006004 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f32:	e004      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f46:	4bc0      	ldr	r3, [pc, #768]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f56:	4abc      	ldr	r2, [pc, #752]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6553      	str	r3, [r2, #84]	; 0x54
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f002 0302 	and.w	r3, r2, #2
 8004f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f7c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d043      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d824      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fe5 	.word	0x08004fe5
 8004f9c:	08004fb1 	.word	0x08004fb1
 8004fa0:	08004fc7 	.word	0x08004fc7
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fe5 	.word	0x08004fe5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 ff71 	bl	8005ea0 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e00f      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fca:	3328      	adds	r3, #40	; 0x28
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f818 	bl	8006004 <RCCEx_PLL3_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fee:	4b96      	ldr	r3, [pc, #600]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f023 0107 	bic.w	r1, r3, #7
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffe:	4a92      	ldr	r2, [pc, #584]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005000:	430b      	orrs	r3, r1
 8005002:	6553      	str	r3, [r2, #84]	; 0x54
 8005004:	e003      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800500a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800500e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f002 0304 	and.w	r3, r2, #4
 800501a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005024:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d043      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005036:	2b05      	cmp	r3, #5
 8005038:	d824      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	0800508d 	.word	0x0800508d
 8005044:	08005059 	.word	0x08005059
 8005048:	0800506f 	.word	0x0800506f
 800504c:	0800508d 	.word	0x0800508d
 8005050:	0800508d 	.word	0x0800508d
 8005054:	0800508d 	.word	0x0800508d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	3308      	adds	r3, #8
 800505e:	2101      	movs	r1, #1
 8005060:	4618      	mov	r0, r3
 8005062:	f000 ff1d 	bl	8005ea0 <RCCEx_PLL2_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800506c:	e00f      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005072:	3328      	adds	r3, #40	; 0x28
 8005074:	2101      	movs	r1, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f000 ffc4 	bl	8006004 <RCCEx_PLL3_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005082:	e004      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800508c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005096:	4b6c      	ldr	r3, [pc, #432]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	f023 0107 	bic.w	r1, r3, #7
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a6:	4a68      	ldr	r2, [pc, #416]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6593      	str	r3, [r2, #88]	; 0x58
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f002 0320 	and.w	r3, r2, #32
 80050c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c6:	2300      	movs	r3, #0
 80050c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d055      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e2:	d033      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80050e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e8:	d82c      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ee:	d02f      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d826      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80050f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050fa:	d02b      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80050fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005100:	d820      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005106:	d012      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d81a      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005116:	d115      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511c:	3308      	adds	r3, #8
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f000 febd 	bl	8005ea0 <RCCEx_PLL2_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800512c:	e015      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005132:	3328      	adds	r3, #40	; 0x28
 8005134:	2102      	movs	r1, #2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 ff64 	bl	8006004 <RCCEx_PLL3_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005142:	e00a      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800514a:	e006      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800514c:	bf00      	nop
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005150:	bf00      	nop
 8005152:	e002      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800516a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005172:	4a35      	ldr	r2, [pc, #212]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6553      	str	r3, [r2, #84]	; 0x54
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800517e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800518e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005198:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d058      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ae:	d033      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80051b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051b4:	d82c      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d02f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d826      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80051c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c6:	d02b      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80051c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051cc:	d820      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d012      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d81a      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d022      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d115      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e8:	3308      	adds	r3, #8
 80051ea:	2100      	movs	r1, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fe57 	bl	8005ea0 <RCCEx_PLL2_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051f8:	e015      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fe:	3328      	adds	r3, #40	; 0x28
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fefe 	bl	8006004 <RCCEx_PLL3_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800520e:	e00a      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005216:	e006      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005218:	bf00      	nop
 800521a:	e004      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800521c:	bf00      	nop
 800521e:	e002      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005220:	bf00      	nop
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10e      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800523e:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005250:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800526a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800526e:	460b      	mov	r3, r1
 8005270:	4313      	orrs	r3, r2
 8005272:	d055      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005278:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800527c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005280:	d033      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005282:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005286:	d82c      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	d02f      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d826      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005294:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005298:	d02b      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800529a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800529e:	d820      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80052a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a4:	d012      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80052a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052aa:	d81a      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d022      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	d115      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ba:	3308      	adds	r3, #8
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fdee 	bl	8005ea0 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052ca:	e015      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d0:	3328      	adds	r3, #40	; 0x28
 80052d2:	2102      	movs	r1, #2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fe95 	bl	8006004 <RCCEx_PLL3_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052e0:	e00a      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80052ea:	bf00      	nop
 80052ec:	e004      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80052ee:	bf00      	nop
 80052f0:	e002      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80052f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005300:	4ba1      	ldr	r3, [pc, #644]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005310:	4a9d      	ldr	r2, [pc, #628]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005312:	430b      	orrs	r3, r1
 8005314:	6593      	str	r3, [r2, #88]	; 0x58
 8005316:	e003      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800531c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f002 0308 	and.w	r3, r2, #8
 800532c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005336:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800533a:	460b      	mov	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	d01e      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800534e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005352:	3328      	adds	r3, #40	; 0x28
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fe54 	bl	8006004 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005368:	4b87      	ldr	r3, [pc, #540]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005378:	4a83      	ldr	r2, [pc, #524]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800537a:	430b      	orrs	r3, r1
 800537c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800537e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f002 0310 	and.w	r3, r2, #16
 800538a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005394:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d01e      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	3328      	adds	r3, #40	; 0x28
 80053b2:	2102      	movs	r1, #2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fe25 	bl	8006004 <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d6:	4a6c      	ldr	r2, [pc, #432]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80053e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ec:	2300      	movs	r3, #0
 80053ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053f6:	460b      	mov	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	d03e      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80053fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005400:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005408:	d022      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800540a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540e:	d81b      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d00b      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800541a:	e015      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005420:	3308      	adds	r3, #8
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fd3b 	bl	8005ea0 <RCCEx_PLL2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005430:	e00f      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005436:	3328      	adds	r3, #40	; 0x28
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fde2 	bl	8006004 <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005446:	e004      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005466:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800546a:	4a47      	ldr	r2, [pc, #284]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800546c:	430b      	orrs	r3, r1
 800546e:	6593      	str	r3, [r2, #88]	; 0x58
 8005470:	e003      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005472:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005476:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800547a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005486:	67bb      	str	r3, [r7, #120]	; 0x78
 8005488:	2300      	movs	r3, #0
 800548a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800548c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005490:	460b      	mov	r3, r1
 8005492:	4313      	orrs	r3, r2
 8005494:	d03b      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054a2:	d01f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80054a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054a8:	d818      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80054aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b4:	d007      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80054b6:	e011      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b8:	4b33      	ldr	r3, [pc, #204]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a32      	ldr	r2, [pc, #200]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054c4:	e00f      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ca:	3328      	adds	r3, #40	; 0x28
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fd98 	bl	8006004 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005500:	430b      	orrs	r3, r1
 8005502:	6553      	str	r3, [r2, #84]	; 0x54
 8005504:	e003      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800550a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800550e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800551a:	673b      	str	r3, [r7, #112]	; 0x70
 800551c:	2300      	movs	r3, #0
 800551e:	677b      	str	r3, [r7, #116]	; 0x74
 8005520:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d034      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800552a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d007      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800553a:	e011      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a11      	ldr	r2, [pc, #68]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005548:	e00e      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554e:	3308      	adds	r3, #8
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fca4 	bl	8005ea0 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800555e:	e003      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005568:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557e:	4a02      	ldr	r2, [pc, #8]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005580:	430b      	orrs	r3, r1
 8005582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005590:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80055a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a2:	2300      	movs	r3, #0
 80055a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80055aa:	460b      	mov	r3, r1
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d00c      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b4:	3328      	adds	r3, #40	; 0x28
 80055b6:	2102      	movs	r1, #2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fd23 	bl	8006004 <RCCEx_PLL3_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055d6:	663b      	str	r3, [r7, #96]	; 0x60
 80055d8:	2300      	movs	r3, #0
 80055da:	667b      	str	r3, [r7, #100]	; 0x64
 80055dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055e0:	460b      	mov	r3, r1
 80055e2:	4313      	orrs	r3, r2
 80055e4:	d038      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f2:	d018      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80055f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f8:	d811      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80055fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fe:	d014      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005604:	d80b      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800560a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560e:	d106      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4bc3      	ldr	r3, [pc, #780]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4ac2      	ldr	r2, [pc, #776]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800561c:	e008      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005624:	e004      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005626:	bf00      	nop
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800562e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005638:	4bb9      	ldr	r3, [pc, #740]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	4ab5      	ldr	r2, [pc, #724]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800564a:	430b      	orrs	r3, r1
 800564c:	6553      	str	r3, [r2, #84]	; 0x54
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005654:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005664:	65bb      	str	r3, [r7, #88]	; 0x58
 8005666:	2300      	movs	r3, #0
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800566a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005674:	4baa      	ldr	r3, [pc, #680]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800567c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005682:	4aa7      	ldr	r2, [pc, #668]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005684:	430b      	orrs	r3, r1
 8005686:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005694:	653b      	str	r3, [r7, #80]	; 0x50
 8005696:	2300      	movs	r3, #0
 8005698:	657b      	str	r3, [r7, #84]	; 0x54
 800569a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056a4:	4b9e      	ldr	r3, [pc, #632]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80056ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a9b      	ldr	r2, [pc, #620]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80056b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c6:	2300      	movs	r3, #0
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d009      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	4a8f      	ldr	r2, [pc, #572]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80056f4:	643b      	str	r3, [r7, #64]	; 0x40
 80056f6:	2300      	movs	r3, #0
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
 80056fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005704:	4b86      	ldr	r3, [pc, #536]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	4a85      	ldr	r2, [pc, #532]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800570a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800570e:	6113      	str	r3, [r2, #16]
 8005710:	4b83      	ldr	r3, [pc, #524]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005712:	6919      	ldr	r1, [r3, #16]
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005718:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800571c:	4a80      	ldr	r2, [pc, #512]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800571e:	430b      	orrs	r3, r1
 8005720:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005730:	2300      	movs	r3, #0
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005734:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800573e:	4b78      	ldr	r3, [pc, #480]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	4a74      	ldr	r2, [pc, #464]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800574e:	430b      	orrs	r3, r1
 8005750:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800575e:	633b      	str	r3, [r7, #48]	; 0x30
 8005760:	2300      	movs	r3, #0
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800576e:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800577e:	4a68      	ldr	r2, [pc, #416]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005780:	430b      	orrs	r3, r1
 8005782:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	2100      	movs	r1, #0
 800578e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005796:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800579a:	460b      	mov	r3, r1
 800579c:	4313      	orrs	r3, r2
 800579e:	d011      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a4:	3308      	adds	r3, #8
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fb79 	bl	8005ea0 <RCCEx_PLL2_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80057b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	2100      	movs	r1, #0
 80057ce:	6239      	str	r1, [r7, #32]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057da:	460b      	mov	r3, r1
 80057dc:	4313      	orrs	r3, r2
 80057de:	d011      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e4:	3308      	adds	r3, #8
 80057e6:	2101      	movs	r1, #1
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fb59 	bl	8005ea0 <RCCEx_PLL2_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80057f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005800:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	2100      	movs	r1, #0
 800580e:	61b9      	str	r1, [r7, #24]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d011      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005824:	3308      	adds	r3, #8
 8005826:	2102      	movs	r1, #2
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fb39 	bl	8005ea0 <RCCEx_PLL2_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	2100      	movs	r1, #0
 800584e:	6139      	str	r1, [r7, #16]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d011      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005864:	3328      	adds	r3, #40	; 0x28
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fbcb 	bl	8006004 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005880:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	2100      	movs	r1, #0
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d011      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a4:	3328      	adds	r3, #40	; 0x28
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fbab 	bl	8006004 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80058b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	2100      	movs	r1, #0
 80058ce:	6039      	str	r1, [r7, #0]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d011      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e4:	3328      	adds	r3, #40	; 0x28
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fb8b 	bl	8006004 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80058f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005900:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005904:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
}
 8005912:	4618      	mov	r0, r3
 8005914:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591e:	bf00      	nop
 8005920:	58024400 	.word	0x58024400

08005924 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005928:	f7fe fde2 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4904      	ldr	r1, [pc, #16]	; (800594c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005944:	4618      	mov	r0, r3
 8005946:	bd80      	pop	{r7, pc}
 8005948:	58024400 	.word	0x58024400
 800594c:	0800ac2c 	.word	0x0800ac2c

08005950 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	; 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005958:	4ba1      	ldr	r3, [pc, #644]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005962:	4b9f      	ldr	r3, [pc, #636]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	0b1b      	lsrs	r3, r3, #12
 8005968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800596c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800596e:	4b9c      	ldr	r3, [pc, #624]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	091b      	lsrs	r3, r3, #4
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800597a:	4b99      	ldr	r3, [pc, #612]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8111 	beq.w	8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	f000 8083 	beq.w	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	f200 80a1 	bhi.w	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d056      	beq.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059ba:	e099      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059bc:	4b88      	ldr	r3, [pc, #544]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02d      	beq.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059c8:	4b85      	ldr	r3, [pc, #532]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	08db      	lsrs	r3, r3, #3
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	4a84      	ldr	r2, [pc, #528]	; (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b7b      	ldr	r3, [pc, #492]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a22:	e087      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	e065      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aaa:	e043      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aee:	e021      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b34:	4b2a      	ldr	r3, [pc, #168]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	0a5b      	lsrs	r3, r3, #9
 8005b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5a:	ee17 2a90 	vmov	r2, s15
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b62:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b88:	ee17 2a90 	vmov	r2, s15
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb6:	ee17 2a90 	vmov	r2, s15
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
}
 8005bd2:	bf00      	nop
 8005bd4:	3724      	adds	r7, #36	; 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	58024400 	.word	0x58024400
 8005be4:	03d09000 	.word	0x03d09000
 8005be8:	46000000 	.word	0x46000000
 8005bec:	4c742400 	.word	0x4c742400
 8005bf0:	4a742400 	.word	0x4a742400
 8005bf4:	4bbebc20 	.word	0x4bbebc20

08005bf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c00:	4ba1      	ldr	r3, [pc, #644]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c0a:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	0d1b      	lsrs	r3, r3, #20
 8005c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c16:	4b9c      	ldr	r3, [pc, #624]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c22:	4b99      	ldr	r3, [pc, #612]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8111 	beq.w	8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	f000 8083 	beq.w	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	f200 80a1 	bhi.w	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d056      	beq.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c62:	e099      	b.n	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c64:	4b88      	ldr	r3, [pc, #544]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d02d      	beq.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c70:	4b85      	ldr	r3, [pc, #532]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	4a84      	ldr	r2, [pc, #528]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b7b      	ldr	r3, [pc, #492]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cca:	e087      	b.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d0e:	e065      	b.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b59      	ldr	r3, [pc, #356]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d52:	e043      	b.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d66:	4b48      	ldr	r3, [pc, #288]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d96:	e021      	b.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ddc:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	0a5b      	lsrs	r3, r3, #9
 8005de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e02:	ee17 2a90 	vmov	r2, s15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	0c1b      	lsrs	r3, r3, #16
 8005e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e30:	ee17 2a90 	vmov	r2, s15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e38:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	0e1b      	lsrs	r3, r3, #24
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5e:	ee17 2a90 	vmov	r2, s15
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e66:	e008      	b.n	8005e7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	3724      	adds	r7, #36	; 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	03d09000 	.word	0x03d09000
 8005e90:	46000000 	.word	0x46000000
 8005e94:	4c742400 	.word	0x4c742400
 8005e98:	4a742400 	.word	0x4a742400
 8005e9c:	4bbebc20 	.word	0x4bbebc20

08005ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eae:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d101      	bne.n	8005ebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e099      	b.n	8005ff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ebe:	4b4f      	ldr	r3, [pc, #316]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a4e      	ldr	r2, [pc, #312]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eca:	f7fb fcaf 	bl	800182c <HAL_GetTick>
 8005ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ed0:	e008      	b.n	8005ee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ed2:	f7fb fcab 	bl	800182c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e086      	b.n	8005ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ee4:	4b45      	ldr	r3, [pc, #276]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f0      	bne.n	8005ed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ef0:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	031b      	lsls	r3, r3, #12
 8005efe:	493f      	ldr	r1, [pc, #252]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	628b      	str	r3, [r1, #40]	; 0x28
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	025b      	lsls	r3, r3, #9
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	061b      	lsls	r3, r3, #24
 8005f30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f34:	4931      	ldr	r1, [pc, #196]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f3a:	4b30      	ldr	r3, [pc, #192]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	492d      	ldr	r1, [pc, #180]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f023 0220 	bic.w	r2, r3, #32
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	4928      	ldr	r1, [pc, #160]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f5e:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f64:	f023 0310 	bic.w	r3, r3, #16
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6e:	4b24      	ldr	r3, [pc, #144]	; (8006000 <RCCEx_PLL2_Config+0x160>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	69d2      	ldr	r2, [r2, #28]
 8005f76:	00d2      	lsls	r2, r2, #3
 8005f78:	4920      	ldr	r1, [pc, #128]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f84:	f043 0310 	orr.w	r3, r3, #16
 8005f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f9c:	e00f      	b.n	8005fbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d106      	bne.n	8005fb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fa4:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a14      	ldr	r2, [pc, #80]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fb0:	e005      	b.n	8005fbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	4a11      	ldr	r2, [pc, #68]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a0e      	ldr	r2, [pc, #56]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fca:	f7fb fc2f 	bl	800182c <HAL_GetTick>
 8005fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fd0:	e008      	b.n	8005fe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fd2:	f7fb fc2b 	bl	800182c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e006      	b.n	8005ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <RCCEx_PLL2_Config+0x15c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	58024400 	.word	0x58024400
 8006000:	ffff0007 	.word	0xffff0007

08006004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d101      	bne.n	8006022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e099      	b.n	8006156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006022:	4b4f      	ldr	r3, [pc, #316]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a4e      	ldr	r2, [pc, #312]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602e:	f7fb fbfd 	bl	800182c <HAL_GetTick>
 8006032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006034:	e008      	b.n	8006048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006036:	f7fb fbf9 	bl	800182c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e086      	b.n	8006156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006054:	4b42      	ldr	r3, [pc, #264]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	493f      	ldr	r1, [pc, #252]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006064:	4313      	orrs	r3, r2
 8006066:	628b      	str	r3, [r1, #40]	; 0x28
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	3b01      	subs	r3, #1
 800606e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	3b01      	subs	r3, #1
 8006078:	025b      	lsls	r3, r3, #9
 800607a:	b29b      	uxth	r3, r3
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	3b01      	subs	r3, #1
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	3b01      	subs	r3, #1
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006098:	4931      	ldr	r1, [pc, #196]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800609a:	4313      	orrs	r3, r2
 800609c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	492d      	ldr	r1, [pc, #180]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060b0:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	4928      	ldr	r1, [pc, #160]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060c2:	4b27      	ldr	r3, [pc, #156]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4a26      	ldr	r2, [pc, #152]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060ce:	4b24      	ldr	r3, [pc, #144]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d2:	4b24      	ldr	r3, [pc, #144]	; (8006164 <RCCEx_PLL3_Config+0x160>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	69d2      	ldr	r2, [r2, #28]
 80060da:	00d2      	lsls	r2, r2, #3
 80060dc:	4920      	ldr	r1, [pc, #128]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060e2:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060f4:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a19      	ldr	r2, [pc, #100]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 80060fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006100:	e00f      	b.n	8006122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d106      	bne.n	8006116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4a14      	ldr	r2, [pc, #80]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800610e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006114:	e005      	b.n	8006122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	4a11      	ldr	r2, [pc, #68]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800611c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006120:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006122:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a0e      	ldr	r2, [pc, #56]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 8006128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612e:	f7fb fb7d 	bl	800182c <HAL_GetTick>
 8006132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006134:	e008      	b.n	8006148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006136:	f7fb fb79 	bl	800182c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e006      	b.n	8006156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <RCCEx_PLL3_Config+0x15c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	58024400 	.word	0x58024400
 8006164:	ffff0007 	.word	0xffff0007

08006168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e049      	b.n	800620e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fb f91e 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f000 fd72 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e054      	b.n	80062da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d01d      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a22      	ldr	r2, [pc, #136]	; (80062ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <HAL_TIM_Base_Start_IT+0xe4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x80>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <HAL_TIM_Base_Start_IT+0xe8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d115      	bne.n	80062c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	4b19      	ldr	r3, [pc, #100]	; (8006304 <HAL_TIM_Base_Start_IT+0xec>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d015      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0xbe>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d011      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c2:	e008      	b.n	80062d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e000      	b.n	80062d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40010400 	.word	0x40010400
 80062fc:	40001800 	.word	0x40001800
 8006300:	40014000 	.word	0x40014000
 8006304:	00010007 	.word	0x00010007

08006308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e049      	b.n	80063ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f841 	bl	80063b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f000 fca2 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <HAL_TIM_PWM_Start+0x24>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e03c      	b.n	800646a <HAL_TIM_PWM_Start+0x9e>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d109      	bne.n	800640a <HAL_TIM_PWM_Start+0x3e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	e02f      	b.n	800646a <HAL_TIM_PWM_Start+0x9e>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d109      	bne.n	8006424 <HAL_TIM_PWM_Start+0x58>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e022      	b.n	800646a <HAL_TIM_PWM_Start+0x9e>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d109      	bne.n	800643e <HAL_TIM_PWM_Start+0x72>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e015      	b.n	800646a <HAL_TIM_PWM_Start+0x9e>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b10      	cmp	r3, #16
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start+0x8c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e008      	b.n	800646a <HAL_TIM_PWM_Start+0x9e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e0a1      	b.n	80065b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <HAL_TIM_PWM_Start+0xb6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006480:	e023      	b.n	80064ca <HAL_TIM_PWM_Start+0xfe>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Start+0xc6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006490:	e01b      	b.n	80064ca <HAL_TIM_PWM_Start+0xfe>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Start+0xd6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a0:	e013      	b.n	80064ca <HAL_TIM_PWM_Start+0xfe>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start+0xe6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b0:	e00b      	b.n	80064ca <HAL_TIM_PWM_Start+0xfe>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0xf6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c0:	e003      	b.n	80064ca <HAL_TIM_PWM_Start+0xfe>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 ffea 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a38      	ldr	r2, [pc, #224]	; (80065c0 <HAL_TIM_PWM_Start+0x1f4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_TIM_PWM_Start+0x13e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a37      	ldr	r2, [pc, #220]	; (80065c4 <HAL_TIM_PWM_Start+0x1f8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIM_PWM_Start+0x13e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a35      	ldr	r2, [pc, #212]	; (80065c8 <HAL_TIM_PWM_Start+0x1fc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIM_PWM_Start+0x13e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a34      	ldr	r2, [pc, #208]	; (80065cc <HAL_TIM_PWM_Start+0x200>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIM_PWM_Start+0x13e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a32      	ldr	r2, [pc, #200]	; (80065d0 <HAL_TIM_PWM_Start+0x204>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <HAL_TIM_PWM_Start+0x142>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <HAL_TIM_PWM_Start+0x144>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006522:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <HAL_TIM_PWM_Start+0x1f4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d01d      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <HAL_TIM_PWM_Start+0x208>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <HAL_TIM_PWM_Start+0x20c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a22      	ldr	r2, [pc, #136]	; (80065dc <HAL_TIM_PWM_Start+0x210>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <HAL_TIM_PWM_Start+0x1f8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <HAL_TIM_PWM_Start+0x214>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_PWM_Start+0x1a8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <HAL_TIM_PWM_Start+0x1fc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d115      	bne.n	80065a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_TIM_PWM_Start+0x218>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d015      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1e6>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658c:	d011      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	e008      	b.n	80065b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e000      	b.n	80065b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	40014800 	.word	0x40014800
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40001800 	.word	0x40001800
 80065e4:	00010007 	.word	0x00010007

080065e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d122      	bne.n	8006644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d11b      	bne.n	8006644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0202 	mvn.w	r2, #2
 8006614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fb12 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006630:	e005      	b.n	800663e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fb04 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fb15 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b04      	cmp	r3, #4
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b04      	cmp	r3, #4
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0204 	mvn.w	r2, #4
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fae8 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fada 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 faeb 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0208 	mvn.w	r2, #8
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2204      	movs	r2, #4
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fabe 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fab0 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fac1 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d122      	bne.n	8006740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0210 	mvn.w	r2, #16
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2208      	movs	r2, #8
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa94 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa86 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa97 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	d10e      	bne.n	800676c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d107      	bne.n	800676c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0201 	mvn.w	r2, #1
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fa fa5a 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d10e      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d107      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f8aa 	bl	80078ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a6:	d10e      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d107      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f89d 	bl	8007900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d10e      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d107      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa45 	bl	8006c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d10e      	bne.n	800681e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d107      	bne.n	800681e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0220 	mvn.w	r2, #32
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f85d 	bl	80078d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006842:	2302      	movs	r3, #2
 8006844:	e0ff      	b.n	8006a46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b14      	cmp	r3, #20
 8006852:	f200 80f0 	bhi.w	8006a36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	080068b1 	.word	0x080068b1
 8006860:	08006a37 	.word	0x08006a37
 8006864:	08006a37 	.word	0x08006a37
 8006868:	08006a37 	.word	0x08006a37
 800686c:	080068f1 	.word	0x080068f1
 8006870:	08006a37 	.word	0x08006a37
 8006874:	08006a37 	.word	0x08006a37
 8006878:	08006a37 	.word	0x08006a37
 800687c:	08006933 	.word	0x08006933
 8006880:	08006a37 	.word	0x08006a37
 8006884:	08006a37 	.word	0x08006a37
 8006888:	08006a37 	.word	0x08006a37
 800688c:	08006973 	.word	0x08006973
 8006890:	08006a37 	.word	0x08006a37
 8006894:	08006a37 	.word	0x08006a37
 8006898:	08006a37 	.word	0x08006a37
 800689c:	080069b5 	.word	0x080069b5
 80068a0:	08006a37 	.word	0x08006a37
 80068a4:	08006a37 	.word	0x08006a37
 80068a8:	08006a37 	.word	0x08006a37
 80068ac:	080069f5 	.word	0x080069f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fa84 	bl	8006dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0208 	orr.w	r2, r2, #8
 80068ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0204 	bic.w	r2, r2, #4
 80068da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6999      	ldr	r1, [r3, #24]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	619a      	str	r2, [r3, #24]
      break;
 80068ee:	e0a5      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 faf4 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800690a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800691a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6999      	ldr	r1, [r3, #24]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	021a      	lsls	r2, r3, #8
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	619a      	str	r2, [r3, #24]
      break;
 8006930:	e084      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fb5d 	bl	8006ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0208 	orr.w	r2, r2, #8
 800694c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0204 	bic.w	r2, r2, #4
 800695c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69d9      	ldr	r1, [r3, #28]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	61da      	str	r2, [r3, #28]
      break;
 8006970:	e064      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fbc5 	bl	8007108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800698c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800699c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69d9      	ldr	r1, [r3, #28]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	021a      	lsls	r2, r3, #8
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	61da      	str	r2, [r3, #28]
      break;
 80069b2:	e043      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fc0e 	bl	80071dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069f2:	e023      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fc52 	bl	80072a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a34:	e002      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0dc      	b.n	8006c26 <HAL_TIM_ConfigClockSource+0x1d6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4b6a      	ldr	r3, [pc, #424]	; (8006c30 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a64      	ldr	r2, [pc, #400]	; (8006c34 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f000 80a9 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006aa8:	4a62      	ldr	r2, [pc, #392]	; (8006c34 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f200 80ae 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ab0:	4a61      	ldr	r2, [pc, #388]	; (8006c38 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f000 80a1 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006ab8:	4a5f      	ldr	r2, [pc, #380]	; (8006c38 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f200 80a6 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	f000 8099 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006ac8:	4a5c      	ldr	r2, [pc, #368]	; (8006c3c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	f200 809e 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ad0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ad4:	f000 8091 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006ad8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006adc:	f200 8096 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae4:	f000 8089 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aec:	f200 808e 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af4:	d03e      	beq.n	8006b74 <HAL_TIM_ConfigClockSource+0x124>
 8006af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afa:	f200 8087 	bhi.w	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	f000 8086 	beq.w	8006c12 <HAL_TIM_ConfigClockSource+0x1c2>
 8006b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0a:	d87f      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b0c:	2b70      	cmp	r3, #112	; 0x70
 8006b0e:	d01a      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0xf6>
 8006b10:	2b70      	cmp	r3, #112	; 0x70
 8006b12:	d87b      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b14:	2b60      	cmp	r3, #96	; 0x60
 8006b16:	d050      	beq.n	8006bba <HAL_TIM_ConfigClockSource+0x16a>
 8006b18:	2b60      	cmp	r3, #96	; 0x60
 8006b1a:	d877      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b1c:	2b50      	cmp	r3, #80	; 0x50
 8006b1e:	d03c      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0x14a>
 8006b20:	2b50      	cmp	r3, #80	; 0x50
 8006b22:	d873      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d058      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x18a>
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d86f      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d064      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006b30:	2b30      	cmp	r3, #48	; 0x30
 8006b32:	d86b      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d060      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d867      	bhi.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05c      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d05a      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x1aa>
 8006b44:	e062      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b56:	f000 fc89 	bl	800746c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	609a      	str	r2, [r3, #8]
      break;
 8006b72:	e04f      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b84:	f000 fc72 	bl	800746c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b96:	609a      	str	r2, [r3, #8]
      break;
 8006b98:	e03c      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f000 fbe2 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2150      	movs	r1, #80	; 0x50
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fc3c 	bl	8007430 <TIM_ITRx_SetConfig>
      break;
 8006bb8:	e02c      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f000 fc01 	bl	80073ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2160      	movs	r1, #96	; 0x60
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fc2c 	bl	8007430 <TIM_ITRx_SetConfig>
      break;
 8006bd8:	e01c      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be6:	461a      	mov	r2, r3
 8006be8:	f000 fbc2 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fc1c 	bl	8007430 <TIM_ITRx_SetConfig>
      break;
 8006bf8:	e00c      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f000 fc13 	bl	8007430 <TIM_ITRx_SetConfig>
      break;
 8006c0a:	e003      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	e000      	b.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	ffceff88 	.word	0xffceff88
 8006c34:	00100040 	.word	0x00100040
 8006c38:	00100030 	.word	0x00100030
 8006c3c:	00100020 	.word	0x00100020

08006c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a40      	ldr	r2, [pc, #256]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3d      	ldr	r2, [pc, #244]	; (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <TIM_Base_SetConfig+0x120>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a3a      	ldr	r2, [pc, #232]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <TIM_Base_SetConfig+0x120>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <TIM_Base_SetConfig+0x128>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a27      	ldr	r2, [pc, #156]	; (8006dbc <TIM_Base_SetConfig+0x12c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <TIM_Base_SetConfig+0x128>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <TIM_Base_SetConfig+0x12c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40010400 	.word	0x40010400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4b37      	ldr	r3, [pc, #220]	; (8006ecc <TIM_OC1_SetConfig+0x108>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f023 0302 	bic.w	r3, r3, #2
 8006e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <TIM_OC1_SetConfig+0x10c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00f      	beq.n	8006e40 <TIM_OC1_SetConfig+0x7c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <TIM_OC1_SetConfig+0x110>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC1_SetConfig+0x7c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ed8 <TIM_OC1_SetConfig+0x114>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC1_SetConfig+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <TIM_OC1_SetConfig+0x118>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC1_SetConfig+0x7c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <TIM_OC1_SetConfig+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10c      	bne.n	8006e5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0308 	bic.w	r3, r3, #8
 8006e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f023 0304 	bic.w	r3, r3, #4
 8006e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <TIM_OC1_SetConfig+0x10c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00f      	beq.n	8006e82 <TIM_OC1_SetConfig+0xbe>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <TIM_OC1_SetConfig+0x110>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <TIM_OC1_SetConfig+0xbe>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <TIM_OC1_SetConfig+0x114>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_OC1_SetConfig+0xbe>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a19      	ldr	r2, [pc, #100]	; (8006edc <TIM_OC1_SetConfig+0x118>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC1_SetConfig+0xbe>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <TIM_OC1_SetConfig+0x11c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d111      	bne.n	8006ea6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	621a      	str	r2, [r3, #32]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	fffeff8f 	.word	0xfffeff8f
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <TIM_OC2_SetConfig+0xfc>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <TIM_OC2_SetConfig+0x100>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC2_SetConfig+0x68>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a28      	ldr	r2, [pc, #160]	; (8006fe8 <TIM_OC2_SetConfig+0x104>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10d      	bne.n	8006f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <TIM_OC2_SetConfig+0x100>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00f      	beq.n	8006f90 <TIM_OC2_SetConfig+0xac>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <TIM_OC2_SetConfig+0x104>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <TIM_OC2_SetConfig+0xac>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <TIM_OC2_SetConfig+0x108>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_OC2_SetConfig+0xac>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <TIM_OC2_SetConfig+0x10c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0xac>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <TIM_OC2_SetConfig+0x110>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d113      	bne.n	8006fb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	feff8fff 	.word	0xfeff8fff
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <TIM_OC3_SetConfig+0xf8>)
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <TIM_OC3_SetConfig+0xfc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_OC3_SetConfig+0x66>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <TIM_OC3_SetConfig+0x100>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d10d      	bne.n	800707a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <TIM_OC3_SetConfig+0xfc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_OC3_SetConfig+0xaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <TIM_OC3_SetConfig+0x100>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_OC3_SetConfig+0xaa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <TIM_OC3_SetConfig+0x104>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_OC3_SetConfig+0xaa>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <TIM_OC3_SetConfig+0x108>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0xaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <TIM_OC3_SetConfig+0x10c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d113      	bne.n	80070ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	fffeff8f 	.word	0xfffeff8f
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40010400 	.word	0x40010400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800

08007108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <TIM_OC4_SetConfig+0xbc>)
 8007134:	4013      	ands	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <TIM_OC4_SetConfig+0xc0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00f      	beq.n	8007188 <TIM_OC4_SetConfig+0x80>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <TIM_OC4_SetConfig+0xc4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_OC4_SetConfig+0x80>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC4_SetConfig+0xc8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_OC4_SetConfig+0x80>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC4_SetConfig+0xcc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC4_SetConfig+0x80>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC4_SetConfig+0xd0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d109      	bne.n	800719c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	019b      	lsls	r3, r3, #6
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	feff8fff 	.word	0xfeff8fff
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40010400 	.word	0x40010400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800

080071dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4b21      	ldr	r3, [pc, #132]	; (800728c <TIM_OC5_SetConfig+0xb0>)
 8007208:	4013      	ands	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800721c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a18      	ldr	r2, [pc, #96]	; (8007290 <TIM_OC5_SetConfig+0xb4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_OC5_SetConfig+0x76>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a17      	ldr	r2, [pc, #92]	; (8007294 <TIM_OC5_SetConfig+0xb8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_OC5_SetConfig+0x76>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a16      	ldr	r2, [pc, #88]	; (8007298 <TIM_OC5_SetConfig+0xbc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_OC5_SetConfig+0x76>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a15      	ldr	r2, [pc, #84]	; (800729c <TIM_OC5_SetConfig+0xc0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC5_SetConfig+0x76>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a14      	ldr	r2, [pc, #80]	; (80072a0 <TIM_OC5_SetConfig+0xc4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d109      	bne.n	8007266 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007258:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	621a      	str	r2, [r3, #32]
}
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	fffeff8f 	.word	0xfffeff8f
 8007290:	40010000 	.word	0x40010000
 8007294:	40010400 	.word	0x40010400
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800

080072a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4b22      	ldr	r3, [pc, #136]	; (8007358 <TIM_OC6_SetConfig+0xb4>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	051b      	lsls	r3, r3, #20
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a19      	ldr	r2, [pc, #100]	; (800735c <TIM_OC6_SetConfig+0xb8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00f      	beq.n	800731c <TIM_OC6_SetConfig+0x78>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a18      	ldr	r2, [pc, #96]	; (8007360 <TIM_OC6_SetConfig+0xbc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00b      	beq.n	800731c <TIM_OC6_SetConfig+0x78>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC6_SetConfig+0xc0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_OC6_SetConfig+0x78>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a16      	ldr	r2, [pc, #88]	; (8007368 <TIM_OC6_SetConfig+0xc4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC6_SetConfig+0x78>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a15      	ldr	r2, [pc, #84]	; (800736c <TIM_OC6_SetConfig+0xc8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d109      	bne.n	8007330 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	feff8fff 	.word	0xfeff8fff
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800739a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 030a 	bic.w	r3, r3, #10
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b087      	sub	sp, #28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f023 0210 	bic.w	r2, r3, #16
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800740a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <TIM_ITRx_SetConfig+0x38>)
 8007444:	4013      	ands	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	f043 0307 	orr.w	r3, r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	609a      	str	r2, [r3, #8]
}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	ffcfff8f 	.word	0xffcfff8f

0800746c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	431a      	orrs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_TIMEx_PWMN_Start+0x24>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e022      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d109      	bne.n	8007536 <HAL_TIMEx_PWMN_Start+0x3e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e015      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d109      	bne.n	8007550 <HAL_TIMEx_PWMN_Start+0x58>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	e008      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e073      	b.n	8007652 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <HAL_TIMEx_PWMN_Start+0x82>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007578:	e013      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d104      	bne.n	800758a <HAL_TIMEx_PWMN_Start+0x92>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007588:	e00b      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d104      	bne.n	800759a <HAL_TIMEx_PWMN_Start+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007598:	e003      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f9b2 	bl	8007914 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a25      	ldr	r2, [pc, #148]	; (800765c <HAL_TIMEx_PWMN_Start+0x164>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d022      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d2:	d01d      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a21      	ldr	r2, [pc, #132]	; (8007660 <HAL_TIMEx_PWMN_Start+0x168>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a20      	ldr	r2, [pc, #128]	; (8007664 <HAL_TIMEx_PWMN_Start+0x16c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <HAL_TIMEx_PWMN_Start+0x170>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a1d      	ldr	r2, [pc, #116]	; (800766c <HAL_TIMEx_PWMN_Start+0x174>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1b      	ldr	r2, [pc, #108]	; (8007670 <HAL_TIMEx_PWMN_Start+0x178>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIMEx_PWMN_Start+0x118>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1a      	ldr	r2, [pc, #104]	; (8007674 <HAL_TIMEx_PWMN_Start+0x17c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d115      	bne.n	800763c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	4b18      	ldr	r3, [pc, #96]	; (8007678 <HAL_TIMEx_PWMN_Start+0x180>)
 8007618:	4013      	ands	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d015      	beq.n	800764e <HAL_TIMEx_PWMN_Start+0x156>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007628:	d011      	beq.n	800764e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	e008      	b.n	800764e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e000      	b.n	8007650 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40010400 	.word	0x40010400
 8007670:	40001800 	.word	0x40001800
 8007674:	40014000 	.word	0x40014000
 8007678:	00010007 	.word	0x00010007

0800767c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007690:	2302      	movs	r3, #2
 8007692:	e06d      	b.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a30      	ldr	r2, [pc, #192]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a2f      	ldr	r2, [pc, #188]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d108      	bne.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a20      	ldr	r2, [pc, #128]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d022      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007706:	d01d      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1a      	ldr	r2, [pc, #104]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a15      	ldr	r2, [pc, #84]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d10c      	bne.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800774a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4313      	orrs	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40010000 	.word	0x40010000
 8007780:	40010400 	.word	0x40010400
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40001800 	.word	0x40001800
 8007794:	40014000 	.word	0x40014000

08007798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e087      	b.n	80078c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a25      	ldr	r2, [pc, #148]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d106      	bne.n	8007850 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d126      	bne.n	80078b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	051b      	lsls	r3, r3, #20
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0e      	ldr	r2, [pc, #56]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d004      	beq.n	80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a0d      	ldr	r2, [pc, #52]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d106      	bne.n	80078b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40010400 	.word	0x40010400

080078d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	2204      	movs	r2, #4
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1a      	ldr	r2, [r3, #32]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	43db      	mvns	r3, r3
 8007936:	401a      	ands	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a1a      	ldr	r2, [r3, #32]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	fa01 f303 	lsl.w	r3, r1, r3
 800794c:	431a      	orrs	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e042      	b.n	80079f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7f9 fe30 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2224      	movs	r2, #36	; 0x24
 800798c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fc95 	bl	80082d0 <UART_SetConfig>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e022      	b.n	80079f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 faf5 	bl	8008fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fb7c 	bl	80090ec <UART_CheckIdleState>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b08a      	sub	sp, #40	; 0x28
 8007a02:	af02      	add	r7, sp, #8
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d17b      	bne.n	8007b10 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Transmit+0x26>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e074      	b.n	8007b12 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2221      	movs	r2, #33	; 0x21
 8007a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a38:	f7f9 fef8 	bl	800182c <HAL_GetTick>
 8007a3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d108      	bne.n	8007a6a <HAL_UART_Transmit+0x6c>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	e003      	b.n	8007a72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a72:	e030      	b.n	8007ad6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 fbde 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e03d      	b.n	8007b12 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	3302      	adds	r3, #2
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e007      	b.n	8007ac4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1c8      	bne.n	8007a74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2140      	movs	r1, #64	; 0x40
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f001 fba7 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e006      	b.n	8007b12 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b0ba      	sub	sp, #232	; 0xe8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11b      	bne.n	8007b90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8377 	beq.w	8008274 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
      }
      return;
 8007b8e:	e371      	b.n	8008274 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8123 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b9e:	4b8d      	ldr	r3, [pc, #564]	; (8007dd4 <HAL_UART_IRQHandler+0x2b8>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007baa:	4b8b      	ldr	r3, [pc, #556]	; (8007dd8 <HAL_UART_IRQHandler+0x2bc>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8116 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <HAL_UART_IRQHandler+0xc8>
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d011      	beq.n	8007c14 <HAL_UART_IRQHandler+0xf8>
 8007bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2202      	movs	r2, #2
 8007c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	f043 0204 	orr.w	r2, r3, #4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d011      	beq.n	8007c44 <HAL_UART_IRQHandler+0x128>
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2204      	movs	r2, #4
 8007c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f043 0202 	orr.w	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d017      	beq.n	8007c80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d105      	bne.n	8007c68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c60:	4b5c      	ldr	r3, [pc, #368]	; (8007dd4 <HAL_UART_IRQHandler+0x2b8>)
 8007c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f043 0208 	orr.w	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d012      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x196>
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 82dd 	beq.w	8008278 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d005      	beq.n	8007d16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d054      	beq.n	8007dc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fafa 	bl	8009310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d146      	bne.n	8007db8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d9      	bne.n	8007d2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d017      	beq.n	8007db0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <HAL_UART_IRQHandler+0x2c0>)
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fa fb7f 	bl	8002494 <HAL_DMA_Abort_IT>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d019      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dae:	e00f      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa77 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db6:	e00b      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa73 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbe:	e007      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa6f 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007dce:	e253      	b.n	8008278 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	bf00      	nop
    return;
 8007dd2:	e251      	b.n	8008278 <HAL_UART_IRQHandler+0x75c>
 8007dd4:	10000001 	.word	0x10000001
 8007dd8:	04000120 	.word	0x04000120
 8007ddc:	080093dd 	.word	0x080093dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 81e7 	bne.w	80081b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 81e0 	beq.w	80081b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 81d9 	beq.w	80081b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	f040 8151 	bne.w	80080c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a96      	ldr	r2, [pc, #600]	; (8008080 <HAL_UART_IRQHandler+0x564>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d068      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a93      	ldr	r2, [pc, #588]	; (8008084 <HAL_UART_IRQHandler+0x568>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d061      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a91      	ldr	r2, [pc, #580]	; (8008088 <HAL_UART_IRQHandler+0x56c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d05a      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a8e      	ldr	r2, [pc, #568]	; (800808c <HAL_UART_IRQHandler+0x570>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d053      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a8c      	ldr	r2, [pc, #560]	; (8008090 <HAL_UART_IRQHandler+0x574>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d04c      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a89      	ldr	r2, [pc, #548]	; (8008094 <HAL_UART_IRQHandler+0x578>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d045      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a87      	ldr	r2, [pc, #540]	; (8008098 <HAL_UART_IRQHandler+0x57c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d03e      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a84      	ldr	r2, [pc, #528]	; (800809c <HAL_UART_IRQHandler+0x580>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d037      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a82      	ldr	r2, [pc, #520]	; (80080a0 <HAL_UART_IRQHandler+0x584>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d030      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a7f      	ldr	r2, [pc, #508]	; (80080a4 <HAL_UART_IRQHandler+0x588>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d029      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7d      	ldr	r2, [pc, #500]	; (80080a8 <HAL_UART_IRQHandler+0x58c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d022      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a7a      	ldr	r2, [pc, #488]	; (80080ac <HAL_UART_IRQHandler+0x590>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01b      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a78      	ldr	r2, [pc, #480]	; (80080b0 <HAL_UART_IRQHandler+0x594>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d014      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a75      	ldr	r2, [pc, #468]	; (80080b4 <HAL_UART_IRQHandler+0x598>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00d      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <HAL_UART_IRQHandler+0x59c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d006      	beq.n	8007efe <HAL_UART_IRQHandler+0x3e2>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a70      	ldr	r2, [pc, #448]	; (80080bc <HAL_UART_IRQHandler+0x5a0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d106      	bne.n	8007f0c <HAL_UART_IRQHandler+0x3f0>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	e005      	b.n	8007f18 <HAL_UART_IRQHandler+0x3fc>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 81ab 	beq.w	800827c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f30:	429a      	cmp	r2, r3
 8007f32:	f080 81a3 	bcs.w	800827c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4c:	f000 8087 	beq.w	800805e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1da      	bne.n	8007f50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e1      	bne.n	8007f9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e3      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800802a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008040:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800804c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e4      	bne.n	800801c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	4618      	mov	r0, r3
 800805a:	f7f9 fefd 	bl	8001e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008070:	b29b      	uxth	r3, r3
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	b29b      	uxth	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f91d 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800807e:	e0fd      	b.n	800827c <HAL_UART_IRQHandler+0x760>
 8008080:	40020010 	.word	0x40020010
 8008084:	40020028 	.word	0x40020028
 8008088:	40020040 	.word	0x40020040
 800808c:	40020058 	.word	0x40020058
 8008090:	40020070 	.word	0x40020070
 8008094:	40020088 	.word	0x40020088
 8008098:	400200a0 	.word	0x400200a0
 800809c:	400200b8 	.word	0x400200b8
 80080a0:	40020410 	.word	0x40020410
 80080a4:	40020428 	.word	0x40020428
 80080a8:	40020440 	.word	0x40020440
 80080ac:	40020458 	.word	0x40020458
 80080b0:	40020470 	.word	0x40020470
 80080b4:	40020488 	.word	0x40020488
 80080b8:	400204a0 	.word	0x400204a0
 80080bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80cf 	beq.w	8008280 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80080e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80ca 	beq.w	8008280 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800810e:	647b      	str	r3, [r7, #68]	; 0x44
 8008110:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800811c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e4      	bne.n	80080ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	623b      	str	r3, [r7, #32]
   return(result);
 8008132:	6a3a      	ldr	r2, [r7, #32]
 8008134:	4b55      	ldr	r3, [pc, #340]	; (800828c <HAL_UART_IRQHandler+0x770>)
 8008136:	4013      	ands	r3, r2
 8008138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008146:	633a      	str	r2, [r7, #48]	; 0x30
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800814c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e3      	bne.n	8008122 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60fb      	str	r3, [r7, #12]
   return(result);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0310 	bic.w	r3, r3, #16
 8008182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	617b      	str	r3, [r7, #20]
   return(result);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e4      	bne.n	800816e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f881 	bl	80082b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081b6:	e063      	b.n	8008280 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00e      	beq.n	80081e2 <HAL_UART_IRQHandler+0x6c6>
 80081c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f93f 	bl	800945e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081e0:	e051      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d014      	beq.n	8008218 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800820a:	2b00      	cmp	r3, #0
 800820c:	d03a      	beq.n	8008284 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
    }
    return;
 8008216:	e035      	b.n	8008284 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <HAL_UART_IRQHandler+0x71c>
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f8e9 	bl	8009408 <UART_EndTransmit_IT>
    return;
 8008236:	e026      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <HAL_UART_IRQHandler+0x73c>
 8008244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 f918 	bl	8009486 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008256:	e016      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <HAL_UART_IRQHandler+0x76a>
 8008264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008268:	2b00      	cmp	r3, #0
 800826a:	da0c      	bge.n	8008286 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f900 	bl	8009472 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008272:	e008      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
      return;
 8008274:	bf00      	nop
 8008276:	e006      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
    return;
 8008278:	bf00      	nop
 800827a:	e004      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
      return;
 800827c:	bf00      	nop
 800827e:	e002      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
      return;
 8008280:	bf00      	nop
 8008282:	e000      	b.n	8008286 <HAL_UART_IRQHandler+0x76a>
    return;
 8008284:	bf00      	nop
  }
}
 8008286:	37e8      	adds	r7, #232	; 0xe8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	effffffe 	.word	0xeffffffe

08008290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d4:	b092      	sub	sp, #72	; 0x48
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4bbe      	ldr	r3, [pc, #760]	; (80085f8 <UART_SetConfig+0x328>)
 8008300:	4013      	ands	r3, r2
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008308:	430b      	orrs	r3, r1
 800830a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4ab3      	ldr	r2, [pc, #716]	; (80085fc <UART_SetConfig+0x32c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008338:	4313      	orrs	r3, r2
 800833a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	4baf      	ldr	r3, [pc, #700]	; (8008600 <UART_SetConfig+0x330>)
 8008344:	4013      	ands	r3, r2
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800834c:	430b      	orrs	r3, r1
 800834e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	f023 010f 	bic.w	r1, r3, #15
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4aa6      	ldr	r2, [pc, #664]	; (8008604 <UART_SetConfig+0x334>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d177      	bne.n	8008460 <UART_SetConfig+0x190>
 8008370:	4ba5      	ldr	r3, [pc, #660]	; (8008608 <UART_SetConfig+0x338>)
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008378:	2b28      	cmp	r3, #40	; 0x28
 800837a:	d86d      	bhi.n	8008458 <UART_SetConfig+0x188>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <UART_SetConfig+0xb4>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008429 	.word	0x08008429
 8008388:	08008459 	.word	0x08008459
 800838c:	08008459 	.word	0x08008459
 8008390:	08008459 	.word	0x08008459
 8008394:	08008459 	.word	0x08008459
 8008398:	08008459 	.word	0x08008459
 800839c:	08008459 	.word	0x08008459
 80083a0:	08008459 	.word	0x08008459
 80083a4:	08008431 	.word	0x08008431
 80083a8:	08008459 	.word	0x08008459
 80083ac:	08008459 	.word	0x08008459
 80083b0:	08008459 	.word	0x08008459
 80083b4:	08008459 	.word	0x08008459
 80083b8:	08008459 	.word	0x08008459
 80083bc:	08008459 	.word	0x08008459
 80083c0:	08008459 	.word	0x08008459
 80083c4:	08008439 	.word	0x08008439
 80083c8:	08008459 	.word	0x08008459
 80083cc:	08008459 	.word	0x08008459
 80083d0:	08008459 	.word	0x08008459
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008441 	.word	0x08008441
 80083e8:	08008459 	.word	0x08008459
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008459 	.word	0x08008459
 8008404:	08008449 	.word	0x08008449
 8008408:	08008459 	.word	0x08008459
 800840c:	08008459 	.word	0x08008459
 8008410:	08008459 	.word	0x08008459
 8008414:	08008459 	.word	0x08008459
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
 8008420:	08008459 	.word	0x08008459
 8008424:	08008451 	.word	0x08008451
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e326      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e322      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e31e      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e31a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008448:	2320      	movs	r3, #32
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e316      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e312      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e30e      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a69      	ldr	r2, [pc, #420]	; (800860c <UART_SetConfig+0x33c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d130      	bne.n	80084cc <UART_SetConfig+0x1fc>
 800846a:	4b67      	ldr	r3, [pc, #412]	; (8008608 <UART_SetConfig+0x338>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b05      	cmp	r3, #5
 8008474:	d826      	bhi.n	80084c4 <UART_SetConfig+0x1f4>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x1ac>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	08008495 	.word	0x08008495
 8008480:	0800849d 	.word	0x0800849d
 8008484:	080084a5 	.word	0x080084a5
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084b5 	.word	0x080084b5
 8008490:	080084bd 	.word	0x080084bd
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e2f0      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800849c:	2304      	movs	r3, #4
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e2ec      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084a4:	2308      	movs	r3, #8
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e2e8      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084ac:	2310      	movs	r3, #16
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e2e4      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084b4:	2320      	movs	r3, #32
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e2e0      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084bc:	2340      	movs	r3, #64	; 0x40
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e2dc      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e2d8      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a4f      	ldr	r2, [pc, #316]	; (8008610 <UART_SetConfig+0x340>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d130      	bne.n	8008538 <UART_SetConfig+0x268>
 80084d6:	4b4c      	ldr	r3, [pc, #304]	; (8008608 <UART_SetConfig+0x338>)
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b05      	cmp	r3, #5
 80084e0:	d826      	bhi.n	8008530 <UART_SetConfig+0x260>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <UART_SetConfig+0x218>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008509 	.word	0x08008509
 80084f0:	08008511 	.word	0x08008511
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008521 	.word	0x08008521
 80084fc:	08008529 	.word	0x08008529
 8008500:	2300      	movs	r3, #0
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e2ba      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008508:	2304      	movs	r3, #4
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e2b6      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008510:	2308      	movs	r3, #8
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e2b2      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e2ae      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008520:	2320      	movs	r3, #32
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e2aa      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008528:	2340      	movs	r3, #64	; 0x40
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e2a6      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008530:	2380      	movs	r3, #128	; 0x80
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e2a2      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a35      	ldr	r2, [pc, #212]	; (8008614 <UART_SetConfig+0x344>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d130      	bne.n	80085a4 <UART_SetConfig+0x2d4>
 8008542:	4b31      	ldr	r3, [pc, #196]	; (8008608 <UART_SetConfig+0x338>)
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b05      	cmp	r3, #5
 800854c:	d826      	bhi.n	800859c <UART_SetConfig+0x2cc>
 800854e:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <UART_SetConfig+0x284>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	0800856d 	.word	0x0800856d
 8008558:	08008575 	.word	0x08008575
 800855c:	0800857d 	.word	0x0800857d
 8008560:	08008585 	.word	0x08008585
 8008564:	0800858d 	.word	0x0800858d
 8008568:	08008595 	.word	0x08008595
 800856c:	2300      	movs	r3, #0
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e284      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e280      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e27c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e278      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800858c:	2320      	movs	r3, #32
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e274      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008594:	2340      	movs	r3, #64	; 0x40
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e270      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e26c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1b      	ldr	r2, [pc, #108]	; (8008618 <UART_SetConfig+0x348>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d142      	bne.n	8008634 <UART_SetConfig+0x364>
 80085ae:	4b16      	ldr	r3, [pc, #88]	; (8008608 <UART_SetConfig+0x338>)
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d838      	bhi.n	800862c <UART_SetConfig+0x35c>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x2f0>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	080085f1 	.word	0x080085f1
 80085d0:	0800861d 	.word	0x0800861d
 80085d4:	08008625 	.word	0x08008625
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e24e      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80085e0:	2304      	movs	r3, #4
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e24a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e246      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e242      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80085f8:	cfff69f3 	.word	0xcfff69f3
 80085fc:	58000c00 	.word	0x58000c00
 8008600:	11fff4ff 	.word	0x11fff4ff
 8008604:	40011000 	.word	0x40011000
 8008608:	58024400 	.word	0x58024400
 800860c:	40004400 	.word	0x40004400
 8008610:	40004800 	.word	0x40004800
 8008614:	40004c00 	.word	0x40004c00
 8008618:	40005000 	.word	0x40005000
 800861c:	2320      	movs	r3, #32
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e22c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008624:	2340      	movs	r3, #64	; 0x40
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e228      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e224      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4ab1      	ldr	r2, [pc, #708]	; (8008900 <UART_SetConfig+0x630>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d176      	bne.n	800872c <UART_SetConfig+0x45c>
 800863e:	4bb1      	ldr	r3, [pc, #708]	; (8008904 <UART_SetConfig+0x634>)
 8008640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008646:	2b28      	cmp	r3, #40	; 0x28
 8008648:	d86c      	bhi.n	8008724 <UART_SetConfig+0x454>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x380>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	080086f5 	.word	0x080086f5
 8008654:	08008725 	.word	0x08008725
 8008658:	08008725 	.word	0x08008725
 800865c:	08008725 	.word	0x08008725
 8008660:	08008725 	.word	0x08008725
 8008664:	08008725 	.word	0x08008725
 8008668:	08008725 	.word	0x08008725
 800866c:	08008725 	.word	0x08008725
 8008670:	080086fd 	.word	0x080086fd
 8008674:	08008725 	.word	0x08008725
 8008678:	08008725 	.word	0x08008725
 800867c:	08008725 	.word	0x08008725
 8008680:	08008725 	.word	0x08008725
 8008684:	08008725 	.word	0x08008725
 8008688:	08008725 	.word	0x08008725
 800868c:	08008725 	.word	0x08008725
 8008690:	08008705 	.word	0x08008705
 8008694:	08008725 	.word	0x08008725
 8008698:	08008725 	.word	0x08008725
 800869c:	08008725 	.word	0x08008725
 80086a0:	08008725 	.word	0x08008725
 80086a4:	08008725 	.word	0x08008725
 80086a8:	08008725 	.word	0x08008725
 80086ac:	08008725 	.word	0x08008725
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	08008725 	.word	0x08008725
 80086b8:	08008725 	.word	0x08008725
 80086bc:	08008725 	.word	0x08008725
 80086c0:	08008725 	.word	0x08008725
 80086c4:	08008725 	.word	0x08008725
 80086c8:	08008725 	.word	0x08008725
 80086cc:	08008725 	.word	0x08008725
 80086d0:	08008715 	.word	0x08008715
 80086d4:	08008725 	.word	0x08008725
 80086d8:	08008725 	.word	0x08008725
 80086dc:	08008725 	.word	0x08008725
 80086e0:	08008725 	.word	0x08008725
 80086e4:	08008725 	.word	0x08008725
 80086e8:	08008725 	.word	0x08008725
 80086ec:	08008725 	.word	0x08008725
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e1c0      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80086fc:	2304      	movs	r3, #4
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e1bc      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008704:	2308      	movs	r3, #8
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e1b8      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800870c:	2310      	movs	r3, #16
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e1b4      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008714:	2320      	movs	r3, #32
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e1b0      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e1ac      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e1a8      	b.n	8008a7e <UART_SetConfig+0x7ae>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a75      	ldr	r2, [pc, #468]	; (8008908 <UART_SetConfig+0x638>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d130      	bne.n	8008798 <UART_SetConfig+0x4c8>
 8008736:	4b73      	ldr	r3, [pc, #460]	; (8008904 <UART_SetConfig+0x634>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	2b05      	cmp	r3, #5
 8008740:	d826      	bhi.n	8008790 <UART_SetConfig+0x4c0>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <UART_SetConfig+0x478>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008761 	.word	0x08008761
 800874c:	08008769 	.word	0x08008769
 8008750:	08008771 	.word	0x08008771
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	2300      	movs	r3, #0
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e18a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e186      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e182      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e17e      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e17a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e176      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008790:	2380      	movs	r3, #128	; 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e172      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5b      	ldr	r2, [pc, #364]	; (800890c <UART_SetConfig+0x63c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d130      	bne.n	8008804 <UART_SetConfig+0x534>
 80087a2:	4b58      	ldr	r3, [pc, #352]	; (8008904 <UART_SetConfig+0x634>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d826      	bhi.n	80087fc <UART_SetConfig+0x52c>
 80087ae:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x4e4>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	080087ed 	.word	0x080087ed
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e154      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e150      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e14c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e148      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087ec:	2320      	movs	r3, #32
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e144      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e140      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e13c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a41      	ldr	r2, [pc, #260]	; (8008910 <UART_SetConfig+0x640>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f040 8082 	bne.w	8008914 <UART_SetConfig+0x644>
 8008810:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <UART_SetConfig+0x634>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008818:	2b28      	cmp	r3, #40	; 0x28
 800881a:	d86d      	bhi.n	80088f8 <UART_SetConfig+0x628>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x554>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	080088c9 	.word	0x080088c9
 8008828:	080088f9 	.word	0x080088f9
 800882c:	080088f9 	.word	0x080088f9
 8008830:	080088f9 	.word	0x080088f9
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088d1 	.word	0x080088d1
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088f9 	.word	0x080088f9
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088d9 	.word	0x080088d9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f9 	.word	0x080088f9
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088e1 	.word	0x080088e1
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088f9 	.word	0x080088f9
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e0d6      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e0d2      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e0ce      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e0ca      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e0c6      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e0c2      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80088f8:	2380      	movs	r3, #128	; 0x80
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e0be      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008900:	40011400 	.word	0x40011400
 8008904:	58024400 	.word	0x58024400
 8008908:	40007800 	.word	0x40007800
 800890c:	40007c00 	.word	0x40007c00
 8008910:	40011800 	.word	0x40011800
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4aad      	ldr	r2, [pc, #692]	; (8008bd0 <UART_SetConfig+0x900>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d176      	bne.n	8008a0c <UART_SetConfig+0x73c>
 800891e:	4bad      	ldr	r3, [pc, #692]	; (8008bd4 <UART_SetConfig+0x904>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008926:	2b28      	cmp	r3, #40	; 0x28
 8008928:	d86c      	bhi.n	8008a04 <UART_SetConfig+0x734>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <UART_SetConfig+0x660>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	080089d5 	.word	0x080089d5
 8008934:	08008a05 	.word	0x08008a05
 8008938:	08008a05 	.word	0x08008a05
 800893c:	08008a05 	.word	0x08008a05
 8008940:	08008a05 	.word	0x08008a05
 8008944:	08008a05 	.word	0x08008a05
 8008948:	08008a05 	.word	0x08008a05
 800894c:	08008a05 	.word	0x08008a05
 8008950:	080089dd 	.word	0x080089dd
 8008954:	08008a05 	.word	0x08008a05
 8008958:	08008a05 	.word	0x08008a05
 800895c:	08008a05 	.word	0x08008a05
 8008960:	08008a05 	.word	0x08008a05
 8008964:	08008a05 	.word	0x08008a05
 8008968:	08008a05 	.word	0x08008a05
 800896c:	08008a05 	.word	0x08008a05
 8008970:	080089e5 	.word	0x080089e5
 8008974:	08008a05 	.word	0x08008a05
 8008978:	08008a05 	.word	0x08008a05
 800897c:	08008a05 	.word	0x08008a05
 8008980:	08008a05 	.word	0x08008a05
 8008984:	08008a05 	.word	0x08008a05
 8008988:	08008a05 	.word	0x08008a05
 800898c:	08008a05 	.word	0x08008a05
 8008990:	080089ed 	.word	0x080089ed
 8008994:	08008a05 	.word	0x08008a05
 8008998:	08008a05 	.word	0x08008a05
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008a05 	.word	0x08008a05
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	080089f5 	.word	0x080089f5
 80089b4:	08008a05 	.word	0x08008a05
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e050      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80089dc:	2304      	movs	r3, #4
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e04c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80089e4:	2308      	movs	r3, #8
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e048      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80089ec:	2310      	movs	r3, #16
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e044      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80089f4:	2320      	movs	r3, #32
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e040      	b.n	8008a7e <UART_SetConfig+0x7ae>
 80089fc:	2340      	movs	r3, #64	; 0x40
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e03c      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e038      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a71      	ldr	r2, [pc, #452]	; (8008bd8 <UART_SetConfig+0x908>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d130      	bne.n	8008a78 <UART_SetConfig+0x7a8>
 8008a16:	4b6f      	ldr	r3, [pc, #444]	; (8008bd4 <UART_SetConfig+0x904>)
 8008a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b05      	cmp	r3, #5
 8008a20:	d826      	bhi.n	8008a70 <UART_SetConfig+0x7a0>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <UART_SetConfig+0x758>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a49 	.word	0x08008a49
 8008a30:	08008a51 	.word	0x08008a51
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	2302      	movs	r3, #2
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e01a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e016      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a50:	2308      	movs	r3, #8
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e012      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e00e      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a60:	2320      	movs	r3, #32
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e00a      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e006      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e002      	b.n	8008a7e <UART_SetConfig+0x7ae>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a55      	ldr	r2, [pc, #340]	; (8008bd8 <UART_SetConfig+0x908>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	f040 80f8 	bne.w	8008c7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	dc46      	bgt.n	8008b20 <UART_SetConfig+0x850>
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	db75      	blt.n	8008b82 <UART_SetConfig+0x8b2>
 8008a96:	3b02      	subs	r3, #2
 8008a98:	2b1e      	cmp	r3, #30
 8008a9a:	d872      	bhi.n	8008b82 <UART_SetConfig+0x8b2>
 8008a9c:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <UART_SetConfig+0x7d4>)
 8008a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa2:	bf00      	nop
 8008aa4:	08008b27 	.word	0x08008b27
 8008aa8:	08008b83 	.word	0x08008b83
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b83 	.word	0x08008b83
 8008ab4:	08008b83 	.word	0x08008b83
 8008ab8:	08008b83 	.word	0x08008b83
 8008abc:	08008b3f 	.word	0x08008b3f
 8008ac0:	08008b83 	.word	0x08008b83
 8008ac4:	08008b83 	.word	0x08008b83
 8008ac8:	08008b83 	.word	0x08008b83
 8008acc:	08008b83 	.word	0x08008b83
 8008ad0:	08008b83 	.word	0x08008b83
 8008ad4:	08008b83 	.word	0x08008b83
 8008ad8:	08008b83 	.word	0x08008b83
 8008adc:	08008b4f 	.word	0x08008b4f
 8008ae0:	08008b83 	.word	0x08008b83
 8008ae4:	08008b83 	.word	0x08008b83
 8008ae8:	08008b83 	.word	0x08008b83
 8008aec:	08008b83 	.word	0x08008b83
 8008af0:	08008b83 	.word	0x08008b83
 8008af4:	08008b83 	.word	0x08008b83
 8008af8:	08008b83 	.word	0x08008b83
 8008afc:	08008b83 	.word	0x08008b83
 8008b00:	08008b83 	.word	0x08008b83
 8008b04:	08008b83 	.word	0x08008b83
 8008b08:	08008b83 	.word	0x08008b83
 8008b0c:	08008b83 	.word	0x08008b83
 8008b10:	08008b83 	.word	0x08008b83
 8008b14:	08008b83 	.word	0x08008b83
 8008b18:	08008b83 	.word	0x08008b83
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	d02a      	beq.n	8008b7a <UART_SetConfig+0x8aa>
 8008b24:	e02d      	b.n	8008b82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b26:	f7fc fefd 	bl	8005924 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b2c:	e02f      	b.n	8008b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fc ff0c 	bl	8005950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b3c:	e027      	b.n	8008b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3e:	f107 0318 	add.w	r3, r7, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fd f858 	bl	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b4c:	e01f      	b.n	8008b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b4e:	4b21      	ldr	r3, [pc, #132]	; (8008bd4 <UART_SetConfig+0x904>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d009      	beq.n	8008b6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b5a:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <UART_SetConfig+0x904>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	08db      	lsrs	r3, r3, #3
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <UART_SetConfig+0x90c>)
 8008b66:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b6c:	e00f      	b.n	8008b8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b6e:	4b1b      	ldr	r3, [pc, #108]	; (8008bdc <UART_SetConfig+0x90c>)
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b72:	e00c      	b.n	8008b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b74:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <UART_SetConfig+0x910>)
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	e009      	b.n	8008b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b80:	e005      	b.n	8008b8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 81ee 	beq.w	8008f72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	4a12      	ldr	r2, [pc, #72]	; (8008be4 <UART_SetConfig+0x914>)
 8008b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d305      	bcc.n	8008bc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d910      	bls.n	8008be8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bcc:	e1d1      	b.n	8008f72 <UART_SetConfig+0xca2>
 8008bce:	bf00      	nop
 8008bd0:	40011c00 	.word	0x40011c00
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	58000c00 	.word	0x58000c00
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	0800ac4c 	.word	0x0800ac4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bea:	2200      	movs	r2, #0
 8008bec:	60bb      	str	r3, [r7, #8]
 8008bee:	60fa      	str	r2, [r7, #12]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	4ac0      	ldr	r2, [pc, #768]	; (8008ef8 <UART_SetConfig+0xc28>)
 8008bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c0a:	f7f7 fbc1 	bl	8000390 <__aeabi_uldivmod>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4610      	mov	r0, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	020b      	lsls	r3, r1, #8
 8008c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c24:	0202      	lsls	r2, r0, #8
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	6849      	ldr	r1, [r1, #4]
 8008c2a:	0849      	lsrs	r1, r1, #1
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	4605      	mov	r5, r0
 8008c32:	eb12 0804 	adds.w	r8, r2, r4
 8008c36:	eb43 0905 	adc.w	r9, r3, r5
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	469a      	mov	sl, r3
 8008c42:	4693      	mov	fp, r2
 8008c44:	4652      	mov	r2, sl
 8008c46:	465b      	mov	r3, fp
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 fba0 	bl	8000390 <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4613      	mov	r3, r2
 8008c56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c5e:	d308      	bcc.n	8008c72 <UART_SetConfig+0x9a2>
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c66:	d204      	bcs.n	8008c72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6e:	60da      	str	r2, [r3, #12]
 8008c70:	e17f      	b.n	8008f72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c78:	e17b      	b.n	8008f72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c82:	f040 80bd 	bne.w	8008e00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	dc48      	bgt.n	8008d20 <UART_SetConfig+0xa50>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	db7b      	blt.n	8008d8a <UART_SetConfig+0xaba>
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d879      	bhi.n	8008d8a <UART_SetConfig+0xaba>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <UART_SetConfig+0x9cc>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008d27 	.word	0x08008d27
 8008ca0:	08008d2f 	.word	0x08008d2f
 8008ca4:	08008d8b 	.word	0x08008d8b
 8008ca8:	08008d8b 	.word	0x08008d8b
 8008cac:	08008d37 	.word	0x08008d37
 8008cb0:	08008d8b 	.word	0x08008d8b
 8008cb4:	08008d8b 	.word	0x08008d8b
 8008cb8:	08008d8b 	.word	0x08008d8b
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d8b 	.word	0x08008d8b
 8008cc4:	08008d8b 	.word	0x08008d8b
 8008cc8:	08008d8b 	.word	0x08008d8b
 8008ccc:	08008d8b 	.word	0x08008d8b
 8008cd0:	08008d8b 	.word	0x08008d8b
 8008cd4:	08008d8b 	.word	0x08008d8b
 8008cd8:	08008d8b 	.word	0x08008d8b
 8008cdc:	08008d57 	.word	0x08008d57
 8008ce0:	08008d8b 	.word	0x08008d8b
 8008ce4:	08008d8b 	.word	0x08008d8b
 8008ce8:	08008d8b 	.word	0x08008d8b
 8008cec:	08008d8b 	.word	0x08008d8b
 8008cf0:	08008d8b 	.word	0x08008d8b
 8008cf4:	08008d8b 	.word	0x08008d8b
 8008cf8:	08008d8b 	.word	0x08008d8b
 8008cfc:	08008d8b 	.word	0x08008d8b
 8008d00:	08008d8b 	.word	0x08008d8b
 8008d04:	08008d8b 	.word	0x08008d8b
 8008d08:	08008d8b 	.word	0x08008d8b
 8008d0c:	08008d8b 	.word	0x08008d8b
 8008d10:	08008d8b 	.word	0x08008d8b
 8008d14:	08008d8b 	.word	0x08008d8b
 8008d18:	08008d8b 	.word	0x08008d8b
 8008d1c:	08008d7d 	.word	0x08008d7d
 8008d20:	2b40      	cmp	r3, #64	; 0x40
 8008d22:	d02e      	beq.n	8008d82 <UART_SetConfig+0xab2>
 8008d24:	e031      	b.n	8008d8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d26:	f7fb fc13 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8008d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d2c:	e033      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d2e:	f7fb fc25 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8008d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d34:	e02f      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fc fe08 	bl	8005950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d44:	e027      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d46:	f107 0318 	add.w	r3, r7, #24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fc ff54 	bl	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d54:	e01f      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d56:	4b69      	ldr	r3, [pc, #420]	; (8008efc <UART_SetConfig+0xc2c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d62:	4b66      	ldr	r3, [pc, #408]	; (8008efc <UART_SetConfig+0xc2c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	08db      	lsrs	r3, r3, #3
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	4a64      	ldr	r2, [pc, #400]	; (8008f00 <UART_SetConfig+0xc30>)
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d74:	e00f      	b.n	8008d96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008d76:	4b62      	ldr	r3, [pc, #392]	; (8008f00 <UART_SetConfig+0xc30>)
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d7a:	e00c      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d7c:	4b61      	ldr	r3, [pc, #388]	; (8008f04 <UART_SetConfig+0xc34>)
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d80:	e009      	b.n	8008d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d88:	e005      	b.n	8008d96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80ea 	beq.w	8008f72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	4a55      	ldr	r2, [pc, #340]	; (8008ef8 <UART_SetConfig+0xc28>)
 8008da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db0:	005a      	lsls	r2, r3, #1
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	441a      	add	r2, r3
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d916      	bls.n	8008df8 <UART_SetConfig+0xb28>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd0:	d212      	bcs.n	8008df8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f023 030f 	bic.w	r3, r3, #15
 8008dda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008dea:	4313      	orrs	r3, r2
 8008dec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e0bc      	b.n	8008f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008dfe:	e0b8      	b.n	8008f72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	dc4b      	bgt.n	8008ea0 <UART_SetConfig+0xbd0>
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f2c0 8087 	blt.w	8008f1c <UART_SetConfig+0xc4c>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	f200 8084 	bhi.w	8008f1c <UART_SetConfig+0xc4c>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <UART_SetConfig+0xb4c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008ea7 	.word	0x08008ea7
 8008e20:	08008eaf 	.word	0x08008eaf
 8008e24:	08008f1d 	.word	0x08008f1d
 8008e28:	08008f1d 	.word	0x08008f1d
 8008e2c:	08008eb7 	.word	0x08008eb7
 8008e30:	08008f1d 	.word	0x08008f1d
 8008e34:	08008f1d 	.word	0x08008f1d
 8008e38:	08008f1d 	.word	0x08008f1d
 8008e3c:	08008ec7 	.word	0x08008ec7
 8008e40:	08008f1d 	.word	0x08008f1d
 8008e44:	08008f1d 	.word	0x08008f1d
 8008e48:	08008f1d 	.word	0x08008f1d
 8008e4c:	08008f1d 	.word	0x08008f1d
 8008e50:	08008f1d 	.word	0x08008f1d
 8008e54:	08008f1d 	.word	0x08008f1d
 8008e58:	08008f1d 	.word	0x08008f1d
 8008e5c:	08008ed7 	.word	0x08008ed7
 8008e60:	08008f1d 	.word	0x08008f1d
 8008e64:	08008f1d 	.word	0x08008f1d
 8008e68:	08008f1d 	.word	0x08008f1d
 8008e6c:	08008f1d 	.word	0x08008f1d
 8008e70:	08008f1d 	.word	0x08008f1d
 8008e74:	08008f1d 	.word	0x08008f1d
 8008e78:	08008f1d 	.word	0x08008f1d
 8008e7c:	08008f1d 	.word	0x08008f1d
 8008e80:	08008f1d 	.word	0x08008f1d
 8008e84:	08008f1d 	.word	0x08008f1d
 8008e88:	08008f1d 	.word	0x08008f1d
 8008e8c:	08008f1d 	.word	0x08008f1d
 8008e90:	08008f1d 	.word	0x08008f1d
 8008e94:	08008f1d 	.word	0x08008f1d
 8008e98:	08008f1d 	.word	0x08008f1d
 8008e9c:	08008f0f 	.word	0x08008f0f
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d037      	beq.n	8008f14 <UART_SetConfig+0xc44>
 8008ea4:	e03a      	b.n	8008f1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea6:	f7fb fb53 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8008eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008eac:	e03c      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eae:	f7fb fb65 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8008eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008eb4:	e038      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fc fd48 	bl	8005950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec4:	e030      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec6:	f107 0318 	add.w	r3, r7, #24
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fc fe94 	bl	8005bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed4:	e028      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <UART_SetConfig+0xc2c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d012      	beq.n	8008f08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <UART_SetConfig+0xc2c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	08db      	lsrs	r3, r3, #3
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <UART_SetConfig+0xc30>)
 8008eee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ef4:	e018      	b.n	8008f28 <UART_SetConfig+0xc58>
 8008ef6:	bf00      	nop
 8008ef8:	0800ac4c 	.word	0x0800ac4c
 8008efc:	58024400 	.word	0x58024400
 8008f00:	03d09000 	.word	0x03d09000
 8008f04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008f08:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <UART_SetConfig+0xccc>)
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0c:	e00c      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f0e:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <UART_SetConfig+0xcd0>)
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f12:	e009      	b.n	8008f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1a:	e005      	b.n	8008f28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f26:	bf00      	nop
    }

    if (pclk != 0U)
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d021      	beq.n	8008f72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <UART_SetConfig+0xcd4>)
 8008f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	441a      	add	r2, r3
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b0f      	cmp	r3, #15
 8008f56:	d909      	bls.n	8008f6c <UART_SetConfig+0xc9c>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5e:	d205      	bcs.n	8008f6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	e002      	b.n	8008f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2200      	movs	r2, #0
 8008f86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008f8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3748      	adds	r7, #72	; 0x48
 8008f96:	46bd      	mov	sp, r7
 8008f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f9c:	03d09000 	.word	0x03d09000
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	0800ac4c 	.word	0x0800ac4c

08008fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00a      	beq.n	8009016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	f003 0308 	and.w	r3, r3, #8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01a      	beq.n	80090be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090a6:	d10a      	bne.n	80090be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	605a      	str	r2, [r3, #4]
  }
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b098      	sub	sp, #96	; 0x60
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090fc:	f7f8 fb96 	bl	800182c <HAL_GetTick>
 8009100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b08      	cmp	r3, #8
 800910e:	d12f      	bne.n	8009170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009118:	2200      	movs	r2, #0
 800911a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f88e 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d022      	beq.n	8009170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800913e:	653b      	str	r3, [r7, #80]	; 0x50
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009148:	647b      	str	r3, [r7, #68]	; 0x44
 800914a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800914e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e6      	bne.n	800912a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e063      	b.n	8009238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b04      	cmp	r3, #4
 800917c:	d149      	bne.n	8009212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800917e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009186:	2200      	movs	r2, #0
 8009188:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f857 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d03c      	beq.n	8009212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	623b      	str	r3, [r7, #32]
   return(result);
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
 80091b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e6      	bne.n	8009198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f023 0301 	bic.w	r3, r3, #1
 80091e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ea:	61fa      	str	r2, [r7, #28]
 80091ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	69b9      	ldr	r1, [r7, #24]
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	617b      	str	r3, [r7, #20]
   return(result);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e5      	bne.n	80091ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e012      	b.n	8009238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3758      	adds	r7, #88	; 0x58
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	4613      	mov	r3, r2
 800924e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009250:	e049      	b.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d045      	beq.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925a:	f7f8 fae7 	bl	800182c <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	429a      	cmp	r2, r3
 8009268:	d302      	bcc.n	8009270 <UART_WaitOnFlagUntilTimeout+0x30>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e048      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d031      	beq.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b08      	cmp	r3, #8
 800928e:	d110      	bne.n	80092b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2208      	movs	r2, #8
 8009296:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f839 	bl	8009310 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2208      	movs	r2, #8
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e029      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092c0:	d111      	bne.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f81f 	bl	8009310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e00f      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4013      	ands	r3, r2
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	bf0c      	ite	eq
 80092f6:	2301      	moveq	r3, #1
 80092f8:	2300      	movne	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	429a      	cmp	r2, r3
 8009302:	d0a6      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b095      	sub	sp, #84	; 0x54
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800932c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009336:	643b      	str	r3, [r7, #64]	; 0x40
 8009338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800933c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	61fb      	str	r3, [r7, #28]
   return(result);
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <UART_EndRxTransfer+0xc8>)
 800935e:	4013      	ands	r3, r2
 8009360:	64bb      	str	r3, [r7, #72]	; 0x48
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009382:	2b01      	cmp	r3, #1
 8009384:	d118      	bne.n	80093b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	60bb      	str	r3, [r7, #8]
   return(result);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f023 0310 	bic.w	r3, r3, #16
 800939a:	647b      	str	r3, [r7, #68]	; 0x44
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	613b      	str	r3, [r7, #16]
   return(result);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80093cc:	bf00      	nop
 80093ce:	3754      	adds	r7, #84	; 0x54
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	effffffe 	.word	0xeffffffe

080093dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7fe ff52 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	60bb      	str	r3, [r7, #8]
   return(result);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6979      	ldr	r1, [r7, #20]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	613b      	str	r3, [r7, #16]
   return(result);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e6      	bne.n	8009410 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fe ff1d 	bl	8008290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009456:	bf00      	nop
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e027      	b.n	8009500 <HAL_UARTEx_DisableFifoMode+0x66>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	; 0x24
 80094bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009520:	2302      	movs	r3, #2
 8009522:	e02d      	b.n	8009580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2224      	movs	r2, #36	; 0x24
 8009530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f84f 	bl	8009604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800959c:	2302      	movs	r3, #2
 800959e:	e02d      	b.n	80095fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2224      	movs	r2, #36	; 0x24
 80095ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0201 	bic.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f811 	bl	8009604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009624:	e031      	b.n	800968a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009626:	2310      	movs	r3, #16
 8009628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800962a:	2310      	movs	r3, #16
 800962c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	0e5b      	lsrs	r3, r3, #25
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	0f5b      	lsrs	r3, r3, #29
 8009646:	b2db      	uxtb	r3, r3
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	7b3a      	ldrb	r2, [r7, #12]
 8009652:	4911      	ldr	r1, [pc, #68]	; (8009698 <UARTEx_SetNbDataToProcess+0x94>)
 8009654:	5c8a      	ldrb	r2, [r1, r2]
 8009656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800965a:	7b3a      	ldrb	r2, [r7, #12]
 800965c:	490f      	ldr	r1, [pc, #60]	; (800969c <UARTEx_SetNbDataToProcess+0x98>)
 800965e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009660:	fb93 f3f2 	sdiv	r3, r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	7b7a      	ldrb	r2, [r7, #13]
 8009670:	4909      	ldr	r1, [pc, #36]	; (8009698 <UARTEx_SetNbDataToProcess+0x94>)
 8009672:	5c8a      	ldrb	r2, [r1, r2]
 8009674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009678:	7b7a      	ldrb	r2, [r7, #13]
 800967a:	4908      	ldr	r1, [pc, #32]	; (800969c <UARTEx_SetNbDataToProcess+0x98>)
 800967c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800967e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	0800ac64 	.word	0x0800ac64
 800969c:	0800ac6c 	.word	0x0800ac6c

080096a0 <siprintf>:
 80096a0:	b40e      	push	{r1, r2, r3}
 80096a2:	b500      	push	{lr}
 80096a4:	b09c      	sub	sp, #112	; 0x70
 80096a6:	ab1d      	add	r3, sp, #116	; 0x74
 80096a8:	9002      	str	r0, [sp, #8]
 80096aa:	9006      	str	r0, [sp, #24]
 80096ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096b0:	4809      	ldr	r0, [pc, #36]	; (80096d8 <siprintf+0x38>)
 80096b2:	9107      	str	r1, [sp, #28]
 80096b4:	9104      	str	r1, [sp, #16]
 80096b6:	4909      	ldr	r1, [pc, #36]	; (80096dc <siprintf+0x3c>)
 80096b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096bc:	9105      	str	r1, [sp, #20]
 80096be:	6800      	ldr	r0, [r0, #0]
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	a902      	add	r1, sp, #8
 80096c4:	f000 f9a0 	bl	8009a08 <_svfiprintf_r>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	b01c      	add	sp, #112	; 0x70
 80096d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d4:	b003      	add	sp, #12
 80096d6:	4770      	bx	lr
 80096d8:	24000070 	.word	0x24000070
 80096dc:	ffff0208 	.word	0xffff0208

080096e0 <memset>:
 80096e0:	4402      	add	r2, r0
 80096e2:	4603      	mov	r3, r0
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <memset+0xa>
 80096e8:	4770      	bx	lr
 80096ea:	f803 1b01 	strb.w	r1, [r3], #1
 80096ee:	e7f9      	b.n	80096e4 <memset+0x4>

080096f0 <__errno>:
 80096f0:	4b01      	ldr	r3, [pc, #4]	; (80096f8 <__errno+0x8>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	24000070 	.word	0x24000070

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4d0d      	ldr	r5, [pc, #52]	; (8009734 <__libc_init_array+0x38>)
 8009700:	4c0d      	ldr	r4, [pc, #52]	; (8009738 <__libc_init_array+0x3c>)
 8009702:	1b64      	subs	r4, r4, r5
 8009704:	10a4      	asrs	r4, r4, #2
 8009706:	2600      	movs	r6, #0
 8009708:	42a6      	cmp	r6, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	4d0b      	ldr	r5, [pc, #44]	; (800973c <__libc_init_array+0x40>)
 800970e:	4c0c      	ldr	r4, [pc, #48]	; (8009740 <__libc_init_array+0x44>)
 8009710:	f001 fa56 	bl	800abc0 <_init>
 8009714:	1b64      	subs	r4, r4, r5
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	2600      	movs	r6, #0
 800971a:	42a6      	cmp	r6, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f855 3b04 	ldr.w	r3, [r5], #4
 8009724:	4798      	blx	r3
 8009726:	3601      	adds	r6, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f855 3b04 	ldr.w	r3, [r5], #4
 800972e:	4798      	blx	r3
 8009730:	3601      	adds	r6, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	0800ae88 	.word	0x0800ae88
 8009738:	0800ae88 	.word	0x0800ae88
 800973c:	0800ae88 	.word	0x0800ae88
 8009740:	0800ae8c 	.word	0x0800ae8c

08009744 <__retarget_lock_acquire_recursive>:
 8009744:	4770      	bx	lr

08009746 <__retarget_lock_release_recursive>:
 8009746:	4770      	bx	lr

08009748 <memcpy>:
 8009748:	440a      	add	r2, r1
 800974a:	4291      	cmp	r1, r2
 800974c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009750:	d100      	bne.n	8009754 <memcpy+0xc>
 8009752:	4770      	bx	lr
 8009754:	b510      	push	{r4, lr}
 8009756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800975e:	4291      	cmp	r1, r2
 8009760:	d1f9      	bne.n	8009756 <memcpy+0xe>
 8009762:	bd10      	pop	{r4, pc}

08009764 <_free_r>:
 8009764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009766:	2900      	cmp	r1, #0
 8009768:	d044      	beq.n	80097f4 <_free_r+0x90>
 800976a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976e:	9001      	str	r0, [sp, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f1a1 0404 	sub.w	r4, r1, #4
 8009776:	bfb8      	it	lt
 8009778:	18e4      	addlt	r4, r4, r3
 800977a:	f000 f8df 	bl	800993c <__malloc_lock>
 800977e:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <_free_r+0x94>)
 8009780:	9801      	ldr	r0, [sp, #4]
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x30>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009790:	f000 b8da 	b.w	8009948 <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x46>
 8009798:	6825      	ldr	r5, [r4, #0]
 800979a:	1961      	adds	r1, r4, r5
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1949      	addeq	r1, r1, r5
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x22>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x50>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x46>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1855      	adds	r5, r2, r1
 80097b8:	42a5      	cmp	r5, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x70>
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	4421      	add	r1, r4
 80097c0:	1854      	adds	r4, r2, r1
 80097c2:	42a3      	cmp	r3, r4
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x26>
 80097c8:	681c      	ldr	r4, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	440c      	add	r4, r1
 80097d0:	6014      	str	r4, [r2, #0]
 80097d2:	e7da      	b.n	800978a <_free_r+0x26>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x78>
 80097d6:	230c      	movs	r3, #12
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x26>
 80097dc:	6825      	ldr	r5, [r4, #0]
 80097de:	1961      	adds	r1, r4, r5
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf04      	itt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	bf04      	itt	eq
 80097ec:	1949      	addeq	r1, r1, r5
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	6054      	str	r4, [r2, #4]
 80097f2:	e7ca      	b.n	800978a <_free_r+0x26>
 80097f4:	b003      	add	sp, #12
 80097f6:	bd30      	pop	{r4, r5, pc}
 80097f8:	24000470 	.word	0x24000470

080097fc <sbrk_aligned>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	4e0e      	ldr	r6, [pc, #56]	; (8009838 <sbrk_aligned+0x3c>)
 8009800:	460c      	mov	r4, r1
 8009802:	6831      	ldr	r1, [r6, #0]
 8009804:	4605      	mov	r5, r0
 8009806:	b911      	cbnz	r1, 800980e <sbrk_aligned+0x12>
 8009808:	f000 fba6 	bl	8009f58 <_sbrk_r>
 800980c:	6030      	str	r0, [r6, #0]
 800980e:	4621      	mov	r1, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f000 fba1 	bl	8009f58 <_sbrk_r>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d00a      	beq.n	8009830 <sbrk_aligned+0x34>
 800981a:	1cc4      	adds	r4, r0, #3
 800981c:	f024 0403 	bic.w	r4, r4, #3
 8009820:	42a0      	cmp	r0, r4
 8009822:	d007      	beq.n	8009834 <sbrk_aligned+0x38>
 8009824:	1a21      	subs	r1, r4, r0
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fb96 	bl	8009f58 <_sbrk_r>
 800982c:	3001      	adds	r0, #1
 800982e:	d101      	bne.n	8009834 <sbrk_aligned+0x38>
 8009830:	f04f 34ff 	mov.w	r4, #4294967295
 8009834:	4620      	mov	r0, r4
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	24000474 	.word	0x24000474

0800983c <_malloc_r>:
 800983c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009840:	1ccd      	adds	r5, r1, #3
 8009842:	f025 0503 	bic.w	r5, r5, #3
 8009846:	3508      	adds	r5, #8
 8009848:	2d0c      	cmp	r5, #12
 800984a:	bf38      	it	cc
 800984c:	250c      	movcc	r5, #12
 800984e:	2d00      	cmp	r5, #0
 8009850:	4607      	mov	r7, r0
 8009852:	db01      	blt.n	8009858 <_malloc_r+0x1c>
 8009854:	42a9      	cmp	r1, r5
 8009856:	d905      	bls.n	8009864 <_malloc_r+0x28>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	2600      	movs	r6, #0
 800985e:	4630      	mov	r0, r6
 8009860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009938 <_malloc_r+0xfc>
 8009868:	f000 f868 	bl	800993c <__malloc_lock>
 800986c:	f8d8 3000 	ldr.w	r3, [r8]
 8009870:	461c      	mov	r4, r3
 8009872:	bb5c      	cbnz	r4, 80098cc <_malloc_r+0x90>
 8009874:	4629      	mov	r1, r5
 8009876:	4638      	mov	r0, r7
 8009878:	f7ff ffc0 	bl	80097fc <sbrk_aligned>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	4604      	mov	r4, r0
 8009880:	d155      	bne.n	800992e <_malloc_r+0xf2>
 8009882:	f8d8 4000 	ldr.w	r4, [r8]
 8009886:	4626      	mov	r6, r4
 8009888:	2e00      	cmp	r6, #0
 800988a:	d145      	bne.n	8009918 <_malloc_r+0xdc>
 800988c:	2c00      	cmp	r4, #0
 800988e:	d048      	beq.n	8009922 <_malloc_r+0xe6>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	4631      	mov	r1, r6
 8009894:	4638      	mov	r0, r7
 8009896:	eb04 0903 	add.w	r9, r4, r3
 800989a:	f000 fb5d 	bl	8009f58 <_sbrk_r>
 800989e:	4581      	cmp	r9, r0
 80098a0:	d13f      	bne.n	8009922 <_malloc_r+0xe6>
 80098a2:	6821      	ldr	r1, [r4, #0]
 80098a4:	1a6d      	subs	r5, r5, r1
 80098a6:	4629      	mov	r1, r5
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff ffa7 	bl	80097fc <sbrk_aligned>
 80098ae:	3001      	adds	r0, #1
 80098b0:	d037      	beq.n	8009922 <_malloc_r+0xe6>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	442b      	add	r3, r5
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	f8d8 3000 	ldr.w	r3, [r8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d038      	beq.n	8009932 <_malloc_r+0xf6>
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	42a2      	cmp	r2, r4
 80098c4:	d12b      	bne.n	800991e <_malloc_r+0xe2>
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	e00f      	b.n	80098ec <_malloc_r+0xb0>
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	1b52      	subs	r2, r2, r5
 80098d0:	d41f      	bmi.n	8009912 <_malloc_r+0xd6>
 80098d2:	2a0b      	cmp	r2, #11
 80098d4:	d917      	bls.n	8009906 <_malloc_r+0xca>
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	42a3      	cmp	r3, r4
 80098da:	6025      	str	r5, [r4, #0]
 80098dc:	bf18      	it	ne
 80098de:	6059      	strne	r1, [r3, #4]
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	bf08      	it	eq
 80098e4:	f8c8 1000 	streq.w	r1, [r8]
 80098e8:	5162      	str	r2, [r4, r5]
 80098ea:	604b      	str	r3, [r1, #4]
 80098ec:	4638      	mov	r0, r7
 80098ee:	f104 060b 	add.w	r6, r4, #11
 80098f2:	f000 f829 	bl	8009948 <__malloc_unlock>
 80098f6:	f026 0607 	bic.w	r6, r6, #7
 80098fa:	1d23      	adds	r3, r4, #4
 80098fc:	1af2      	subs	r2, r6, r3
 80098fe:	d0ae      	beq.n	800985e <_malloc_r+0x22>
 8009900:	1b9b      	subs	r3, r3, r6
 8009902:	50a3      	str	r3, [r4, r2]
 8009904:	e7ab      	b.n	800985e <_malloc_r+0x22>
 8009906:	42a3      	cmp	r3, r4
 8009908:	6862      	ldr	r2, [r4, #4]
 800990a:	d1dd      	bne.n	80098c8 <_malloc_r+0x8c>
 800990c:	f8c8 2000 	str.w	r2, [r8]
 8009910:	e7ec      	b.n	80098ec <_malloc_r+0xb0>
 8009912:	4623      	mov	r3, r4
 8009914:	6864      	ldr	r4, [r4, #4]
 8009916:	e7ac      	b.n	8009872 <_malloc_r+0x36>
 8009918:	4634      	mov	r4, r6
 800991a:	6876      	ldr	r6, [r6, #4]
 800991c:	e7b4      	b.n	8009888 <_malloc_r+0x4c>
 800991e:	4613      	mov	r3, r2
 8009920:	e7cc      	b.n	80098bc <_malloc_r+0x80>
 8009922:	230c      	movs	r3, #12
 8009924:	603b      	str	r3, [r7, #0]
 8009926:	4638      	mov	r0, r7
 8009928:	f000 f80e 	bl	8009948 <__malloc_unlock>
 800992c:	e797      	b.n	800985e <_malloc_r+0x22>
 800992e:	6025      	str	r5, [r4, #0]
 8009930:	e7dc      	b.n	80098ec <_malloc_r+0xb0>
 8009932:	605b      	str	r3, [r3, #4]
 8009934:	deff      	udf	#255	; 0xff
 8009936:	bf00      	nop
 8009938:	24000470 	.word	0x24000470

0800993c <__malloc_lock>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__malloc_lock+0x8>)
 800993e:	f7ff bf01 	b.w	8009744 <__retarget_lock_acquire_recursive>
 8009942:	bf00      	nop
 8009944:	2400046c 	.word	0x2400046c

08009948 <__malloc_unlock>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__malloc_unlock+0x8>)
 800994a:	f7ff befc 	b.w	8009746 <__retarget_lock_release_recursive>
 800994e:	bf00      	nop
 8009950:	2400046c 	.word	0x2400046c

08009954 <__ssputs_r>:
 8009954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	688e      	ldr	r6, [r1, #8]
 800995a:	461f      	mov	r7, r3
 800995c:	42be      	cmp	r6, r7
 800995e:	680b      	ldr	r3, [r1, #0]
 8009960:	4682      	mov	sl, r0
 8009962:	460c      	mov	r4, r1
 8009964:	4690      	mov	r8, r2
 8009966:	d82c      	bhi.n	80099c2 <__ssputs_r+0x6e>
 8009968:	898a      	ldrh	r2, [r1, #12]
 800996a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800996e:	d026      	beq.n	80099be <__ssputs_r+0x6a>
 8009970:	6965      	ldr	r5, [r4, #20]
 8009972:	6909      	ldr	r1, [r1, #16]
 8009974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009978:	eba3 0901 	sub.w	r9, r3, r1
 800997c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009980:	1c7b      	adds	r3, r7, #1
 8009982:	444b      	add	r3, r9
 8009984:	106d      	asrs	r5, r5, #1
 8009986:	429d      	cmp	r5, r3
 8009988:	bf38      	it	cc
 800998a:	461d      	movcc	r5, r3
 800998c:	0553      	lsls	r3, r2, #21
 800998e:	d527      	bpl.n	80099e0 <__ssputs_r+0x8c>
 8009990:	4629      	mov	r1, r5
 8009992:	f7ff ff53 	bl	800983c <_malloc_r>
 8009996:	4606      	mov	r6, r0
 8009998:	b360      	cbz	r0, 80099f4 <__ssputs_r+0xa0>
 800999a:	6921      	ldr	r1, [r4, #16]
 800999c:	464a      	mov	r2, r9
 800999e:	f7ff fed3 	bl	8009748 <memcpy>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	6126      	str	r6, [r4, #16]
 80099b0:	6165      	str	r5, [r4, #20]
 80099b2:	444e      	add	r6, r9
 80099b4:	eba5 0509 	sub.w	r5, r5, r9
 80099b8:	6026      	str	r6, [r4, #0]
 80099ba:	60a5      	str	r5, [r4, #8]
 80099bc:	463e      	mov	r6, r7
 80099be:	42be      	cmp	r6, r7
 80099c0:	d900      	bls.n	80099c4 <__ssputs_r+0x70>
 80099c2:	463e      	mov	r6, r7
 80099c4:	6820      	ldr	r0, [r4, #0]
 80099c6:	4632      	mov	r2, r6
 80099c8:	4641      	mov	r1, r8
 80099ca:	f000 faab 	bl	8009f24 <memmove>
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	1b9b      	subs	r3, r3, r6
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	4433      	add	r3, r6
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	2000      	movs	r0, #0
 80099dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e0:	462a      	mov	r2, r5
 80099e2:	f000 fac9 	bl	8009f78 <_realloc_r>
 80099e6:	4606      	mov	r6, r0
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1e0      	bne.n	80099ae <__ssputs_r+0x5a>
 80099ec:	6921      	ldr	r1, [r4, #16]
 80099ee:	4650      	mov	r0, sl
 80099f0:	f7ff feb8 	bl	8009764 <_free_r>
 80099f4:	230c      	movs	r3, #12
 80099f6:	f8ca 3000 	str.w	r3, [sl]
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295
 8009a06:	e7e9      	b.n	80099dc <__ssputs_r+0x88>

08009a08 <_svfiprintf_r>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4698      	mov	r8, r3
 8009a0e:	898b      	ldrh	r3, [r1, #12]
 8009a10:	061b      	lsls	r3, r3, #24
 8009a12:	b09d      	sub	sp, #116	; 0x74
 8009a14:	4607      	mov	r7, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	d50e      	bpl.n	8009a3a <_svfiprintf_r+0x32>
 8009a1c:	690b      	ldr	r3, [r1, #16]
 8009a1e:	b963      	cbnz	r3, 8009a3a <_svfiprintf_r+0x32>
 8009a20:	2140      	movs	r1, #64	; 0x40
 8009a22:	f7ff ff0b 	bl	800983c <_malloc_r>
 8009a26:	6028      	str	r0, [r5, #0]
 8009a28:	6128      	str	r0, [r5, #16]
 8009a2a:	b920      	cbnz	r0, 8009a36 <_svfiprintf_r+0x2e>
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	e0d0      	b.n	8009bd8 <_svfiprintf_r+0x1d0>
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	616b      	str	r3, [r5, #20]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3e:	2320      	movs	r3, #32
 8009a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a48:	2330      	movs	r3, #48	; 0x30
 8009a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bf0 <_svfiprintf_r+0x1e8>
 8009a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a52:	f04f 0901 	mov.w	r9, #1
 8009a56:	4623      	mov	r3, r4
 8009a58:	469a      	mov	sl, r3
 8009a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5e:	b10a      	cbz	r2, 8009a64 <_svfiprintf_r+0x5c>
 8009a60:	2a25      	cmp	r2, #37	; 0x25
 8009a62:	d1f9      	bne.n	8009a58 <_svfiprintf_r+0x50>
 8009a64:	ebba 0b04 	subs.w	fp, sl, r4
 8009a68:	d00b      	beq.n	8009a82 <_svfiprintf_r+0x7a>
 8009a6a:	465b      	mov	r3, fp
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7ff ff6f 	bl	8009954 <__ssputs_r>
 8009a76:	3001      	adds	r0, #1
 8009a78:	f000 80a9 	beq.w	8009bce <_svfiprintf_r+0x1c6>
 8009a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7e:	445a      	add	r2, fp
 8009a80:	9209      	str	r2, [sp, #36]	; 0x24
 8009a82:	f89a 3000 	ldrb.w	r3, [sl]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80a1 	beq.w	8009bce <_svfiprintf_r+0x1c6>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a96:	f10a 0a01 	add.w	sl, sl, #1
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8009aa4:	4654      	mov	r4, sl
 8009aa6:	2205      	movs	r2, #5
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	4850      	ldr	r0, [pc, #320]	; (8009bf0 <_svfiprintf_r+0x1e8>)
 8009aae:	f7f6 fc1f 	bl	80002f0 <memchr>
 8009ab2:	9a04      	ldr	r2, [sp, #16]
 8009ab4:	b9d8      	cbnz	r0, 8009aee <_svfiprintf_r+0xe6>
 8009ab6:	06d0      	lsls	r0, r2, #27
 8009ab8:	bf44      	itt	mi
 8009aba:	2320      	movmi	r3, #32
 8009abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac0:	0711      	lsls	r1, r2, #28
 8009ac2:	bf44      	itt	mi
 8009ac4:	232b      	movmi	r3, #43	; 0x2b
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ace:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad0:	d015      	beq.n	8009afe <_svfiprintf_r+0xf6>
 8009ad2:	9a07      	ldr	r2, [sp, #28]
 8009ad4:	4654      	mov	r4, sl
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f04f 0c0a 	mov.w	ip, #10
 8009adc:	4621      	mov	r1, r4
 8009ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae2:	3b30      	subs	r3, #48	; 0x30
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	d94d      	bls.n	8009b84 <_svfiprintf_r+0x17c>
 8009ae8:	b1b0      	cbz	r0, 8009b18 <_svfiprintf_r+0x110>
 8009aea:	9207      	str	r2, [sp, #28]
 8009aec:	e014      	b.n	8009b18 <_svfiprintf_r+0x110>
 8009aee:	eba0 0308 	sub.w	r3, r0, r8
 8009af2:	fa09 f303 	lsl.w	r3, r9, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	46a2      	mov	sl, r4
 8009afc:	e7d2      	b.n	8009aa4 <_svfiprintf_r+0x9c>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	1d19      	adds	r1, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9103      	str	r1, [sp, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbb      	ittet	lt
 8009b0a:	425b      	neglt	r3, r3
 8009b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b10:	9307      	strge	r3, [sp, #28]
 8009b12:	9307      	strlt	r3, [sp, #28]
 8009b14:	bfb8      	it	lt
 8009b16:	9204      	strlt	r2, [sp, #16]
 8009b18:	7823      	ldrb	r3, [r4, #0]
 8009b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b1c:	d10c      	bne.n	8009b38 <_svfiprintf_r+0x130>
 8009b1e:	7863      	ldrb	r3, [r4, #1]
 8009b20:	2b2a      	cmp	r3, #42	; 0x2a
 8009b22:	d134      	bne.n	8009b8e <_svfiprintf_r+0x186>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	9203      	str	r2, [sp, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bfb8      	it	lt
 8009b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b34:	3402      	adds	r4, #2
 8009b36:	9305      	str	r3, [sp, #20]
 8009b38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c00 <_svfiprintf_r+0x1f8>
 8009b3c:	7821      	ldrb	r1, [r4, #0]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	4650      	mov	r0, sl
 8009b42:	f7f6 fbd5 	bl	80002f0 <memchr>
 8009b46:	b138      	cbz	r0, 8009b58 <_svfiprintf_r+0x150>
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	eba0 000a 	sub.w	r0, r0, sl
 8009b4e:	2240      	movs	r2, #64	; 0x40
 8009b50:	4082      	lsls	r2, r0
 8009b52:	4313      	orrs	r3, r2
 8009b54:	3401      	adds	r4, #1
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5c:	4825      	ldr	r0, [pc, #148]	; (8009bf4 <_svfiprintf_r+0x1ec>)
 8009b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b62:	2206      	movs	r2, #6
 8009b64:	f7f6 fbc4 	bl	80002f0 <memchr>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d038      	beq.n	8009bde <_svfiprintf_r+0x1d6>
 8009b6c:	4b22      	ldr	r3, [pc, #136]	; (8009bf8 <_svfiprintf_r+0x1f0>)
 8009b6e:	bb1b      	cbnz	r3, 8009bb8 <_svfiprintf_r+0x1b0>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	3307      	adds	r3, #7
 8009b74:	f023 0307 	bic.w	r3, r3, #7
 8009b78:	3308      	adds	r3, #8
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	4433      	add	r3, r6
 8009b80:	9309      	str	r3, [sp, #36]	; 0x24
 8009b82:	e768      	b.n	8009a56 <_svfiprintf_r+0x4e>
 8009b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b88:	460c      	mov	r4, r1
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7a6      	b.n	8009adc <_svfiprintf_r+0xd4>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	3401      	adds	r4, #1
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	4619      	mov	r1, r3
 8009b96:	f04f 0c0a 	mov.w	ip, #10
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba0:	3a30      	subs	r2, #48	; 0x30
 8009ba2:	2a09      	cmp	r2, #9
 8009ba4:	d903      	bls.n	8009bae <_svfiprintf_r+0x1a6>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0c6      	beq.n	8009b38 <_svfiprintf_r+0x130>
 8009baa:	9105      	str	r1, [sp, #20]
 8009bac:	e7c4      	b.n	8009b38 <_svfiprintf_r+0x130>
 8009bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e7f0      	b.n	8009b9a <_svfiprintf_r+0x192>
 8009bb8:	ab03      	add	r3, sp, #12
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <_svfiprintf_r+0x1f4>)
 8009bc0:	a904      	add	r1, sp, #16
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	1c42      	adds	r2, r0, #1
 8009bca:	4606      	mov	r6, r0
 8009bcc:	d1d6      	bne.n	8009b7c <_svfiprintf_r+0x174>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	065b      	lsls	r3, r3, #25
 8009bd2:	f53f af2d 	bmi.w	8009a30 <_svfiprintf_r+0x28>
 8009bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd8:	b01d      	add	sp, #116	; 0x74
 8009bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bde:	ab03      	add	r3, sp, #12
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	462a      	mov	r2, r5
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <_svfiprintf_r+0x1f4>)
 8009be6:	a904      	add	r1, sp, #16
 8009be8:	4638      	mov	r0, r7
 8009bea:	f000 f879 	bl	8009ce0 <_printf_i>
 8009bee:	e7eb      	b.n	8009bc8 <_svfiprintf_r+0x1c0>
 8009bf0:	0800ac74 	.word	0x0800ac74
 8009bf4:	0800ac7e 	.word	0x0800ac7e
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	08009955 	.word	0x08009955
 8009c00:	0800ac7a 	.word	0x0800ac7a

08009c04 <_printf_common>:
 8009c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	4616      	mov	r6, r2
 8009c0a:	4699      	mov	r9, r3
 8009c0c:	688a      	ldr	r2, [r1, #8]
 8009c0e:	690b      	ldr	r3, [r1, #16]
 8009c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bfb8      	it	lt
 8009c18:	4613      	movlt	r3, r2
 8009c1a:	6033      	str	r3, [r6, #0]
 8009c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c20:	4607      	mov	r7, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	b10a      	cbz	r2, 8009c2a <_printf_common+0x26>
 8009c26:	3301      	adds	r3, #1
 8009c28:	6033      	str	r3, [r6, #0]
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	0699      	lsls	r1, r3, #26
 8009c2e:	bf42      	ittt	mi
 8009c30:	6833      	ldrmi	r3, [r6, #0]
 8009c32:	3302      	addmi	r3, #2
 8009c34:	6033      	strmi	r3, [r6, #0]
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	f015 0506 	ands.w	r5, r5, #6
 8009c3c:	d106      	bne.n	8009c4c <_printf_common+0x48>
 8009c3e:	f104 0a19 	add.w	sl, r4, #25
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	6832      	ldr	r2, [r6, #0]
 8009c46:	1a9b      	subs	r3, r3, r2
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dc26      	bgt.n	8009c9a <_printf_common+0x96>
 8009c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c50:	1e13      	subs	r3, r2, #0
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	bf18      	it	ne
 8009c56:	2301      	movne	r3, #1
 8009c58:	0692      	lsls	r2, r2, #26
 8009c5a:	d42b      	bmi.n	8009cb4 <_printf_common+0xb0>
 8009c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c60:	4649      	mov	r1, r9
 8009c62:	4638      	mov	r0, r7
 8009c64:	47c0      	blx	r8
 8009c66:	3001      	adds	r0, #1
 8009c68:	d01e      	beq.n	8009ca8 <_printf_common+0xa4>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	6922      	ldr	r2, [r4, #16]
 8009c6e:	f003 0306 	and.w	r3, r3, #6
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	bf02      	ittt	eq
 8009c76:	68e5      	ldreq	r5, [r4, #12]
 8009c78:	6833      	ldreq	r3, [r6, #0]
 8009c7a:	1aed      	subeq	r5, r5, r3
 8009c7c:	68a3      	ldr	r3, [r4, #8]
 8009c7e:	bf0c      	ite	eq
 8009c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c84:	2500      	movne	r5, #0
 8009c86:	4293      	cmp	r3, r2
 8009c88:	bfc4      	itt	gt
 8009c8a:	1a9b      	subgt	r3, r3, r2
 8009c8c:	18ed      	addgt	r5, r5, r3
 8009c8e:	2600      	movs	r6, #0
 8009c90:	341a      	adds	r4, #26
 8009c92:	42b5      	cmp	r5, r6
 8009c94:	d11a      	bne.n	8009ccc <_printf_common+0xc8>
 8009c96:	2000      	movs	r0, #0
 8009c98:	e008      	b.n	8009cac <_printf_common+0xa8>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	47c0      	blx	r8
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d103      	bne.n	8009cb0 <_printf_common+0xac>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	e7c6      	b.n	8009c42 <_printf_common+0x3e>
 8009cb4:	18e1      	adds	r1, r4, r3
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	2030      	movs	r0, #48	; 0x30
 8009cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cbe:	4422      	add	r2, r4
 8009cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc8:	3302      	adds	r3, #2
 8009cca:	e7c7      	b.n	8009c5c <_printf_common+0x58>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	47c0      	blx	r8
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d0e6      	beq.n	8009ca8 <_printf_common+0xa4>
 8009cda:	3601      	adds	r6, #1
 8009cdc:	e7d9      	b.n	8009c92 <_printf_common+0x8e>
	...

08009ce0 <_printf_i>:
 8009ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	7e0f      	ldrb	r7, [r1, #24]
 8009ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ce8:	2f78      	cmp	r7, #120	; 0x78
 8009cea:	4691      	mov	r9, r2
 8009cec:	4680      	mov	r8, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	469a      	mov	sl, r3
 8009cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cf6:	d807      	bhi.n	8009d08 <_printf_i+0x28>
 8009cf8:	2f62      	cmp	r7, #98	; 0x62
 8009cfa:	d80a      	bhi.n	8009d12 <_printf_i+0x32>
 8009cfc:	2f00      	cmp	r7, #0
 8009cfe:	f000 80d4 	beq.w	8009eaa <_printf_i+0x1ca>
 8009d02:	2f58      	cmp	r7, #88	; 0x58
 8009d04:	f000 80c0 	beq.w	8009e88 <_printf_i+0x1a8>
 8009d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d10:	e03a      	b.n	8009d88 <_printf_i+0xa8>
 8009d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d16:	2b15      	cmp	r3, #21
 8009d18:	d8f6      	bhi.n	8009d08 <_printf_i+0x28>
 8009d1a:	a101      	add	r1, pc, #4	; (adr r1, 8009d20 <_printf_i+0x40>)
 8009d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d8d 	.word	0x08009d8d
 8009d28:	08009d09 	.word	0x08009d09
 8009d2c:	08009d09 	.word	0x08009d09
 8009d30:	08009d09 	.word	0x08009d09
 8009d34:	08009d09 	.word	0x08009d09
 8009d38:	08009d8d 	.word	0x08009d8d
 8009d3c:	08009d09 	.word	0x08009d09
 8009d40:	08009d09 	.word	0x08009d09
 8009d44:	08009d09 	.word	0x08009d09
 8009d48:	08009d09 	.word	0x08009d09
 8009d4c:	08009e91 	.word	0x08009e91
 8009d50:	08009db9 	.word	0x08009db9
 8009d54:	08009e4b 	.word	0x08009e4b
 8009d58:	08009d09 	.word	0x08009d09
 8009d5c:	08009d09 	.word	0x08009d09
 8009d60:	08009eb3 	.word	0x08009eb3
 8009d64:	08009d09 	.word	0x08009d09
 8009d68:	08009db9 	.word	0x08009db9
 8009d6c:	08009d09 	.word	0x08009d09
 8009d70:	08009d09 	.word	0x08009d09
 8009d74:	08009e53 	.word	0x08009e53
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	602a      	str	r2, [r5, #0]
 8009d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e09f      	b.n	8009ecc <_printf_i+0x1ec>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	0607      	lsls	r7, r0, #24
 8009d92:	f103 0104 	add.w	r1, r3, #4
 8009d96:	6029      	str	r1, [r5, #0]
 8009d98:	d501      	bpl.n	8009d9e <_printf_i+0xbe>
 8009d9a:	681e      	ldr	r6, [r3, #0]
 8009d9c:	e003      	b.n	8009da6 <_printf_i+0xc6>
 8009d9e:	0646      	lsls	r6, r0, #25
 8009da0:	d5fb      	bpl.n	8009d9a <_printf_i+0xba>
 8009da2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	da03      	bge.n	8009db2 <_printf_i+0xd2>
 8009daa:	232d      	movs	r3, #45	; 0x2d
 8009dac:	4276      	negs	r6, r6
 8009dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db2:	485a      	ldr	r0, [pc, #360]	; (8009f1c <_printf_i+0x23c>)
 8009db4:	230a      	movs	r3, #10
 8009db6:	e012      	b.n	8009dde <_printf_i+0xfe>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	1d19      	adds	r1, r3, #4
 8009dbe:	6029      	str	r1, [r5, #0]
 8009dc0:	0605      	lsls	r5, r0, #24
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0xe8>
 8009dc4:	681e      	ldr	r6, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0xee>
 8009dc8:	0641      	lsls	r1, r0, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0xe4>
 8009dcc:	881e      	ldrh	r6, [r3, #0]
 8009dce:	4853      	ldr	r0, [pc, #332]	; (8009f1c <_printf_i+0x23c>)
 8009dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2308      	moveq	r3, #8
 8009dd6:	230a      	movne	r3, #10
 8009dd8:	2100      	movs	r1, #0
 8009dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dde:	6865      	ldr	r5, [r4, #4]
 8009de0:	60a5      	str	r5, [r4, #8]
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	bfa2      	ittt	ge
 8009de6:	6821      	ldrge	r1, [r4, #0]
 8009de8:	f021 0104 	bicge.w	r1, r1, #4
 8009dec:	6021      	strge	r1, [r4, #0]
 8009dee:	b90e      	cbnz	r6, 8009df4 <_printf_i+0x114>
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d04b      	beq.n	8009e8c <_printf_i+0x1ac>
 8009df4:	4615      	mov	r5, r2
 8009df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8009dfe:	5dc7      	ldrb	r7, [r0, r7]
 8009e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e04:	4637      	mov	r7, r6
 8009e06:	42bb      	cmp	r3, r7
 8009e08:	460e      	mov	r6, r1
 8009e0a:	d9f4      	bls.n	8009df6 <_printf_i+0x116>
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d10b      	bne.n	8009e28 <_printf_i+0x148>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07de      	lsls	r6, r3, #31
 8009e14:	d508      	bpl.n	8009e28 <_printf_i+0x148>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6861      	ldr	r1, [r4, #4]
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	bfde      	ittt	le
 8009e1e:	2330      	movle	r3, #48	; 0x30
 8009e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e28:	1b52      	subs	r2, r2, r5
 8009e2a:	6122      	str	r2, [r4, #16]
 8009e2c:	f8cd a000 	str.w	sl, [sp]
 8009e30:	464b      	mov	r3, r9
 8009e32:	aa03      	add	r2, sp, #12
 8009e34:	4621      	mov	r1, r4
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fee4 	bl	8009c04 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d14a      	bne.n	8009ed6 <_printf_i+0x1f6>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	b004      	add	sp, #16
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	f043 0320 	orr.w	r3, r3, #32
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	4833      	ldr	r0, [pc, #204]	; (8009f20 <_printf_i+0x240>)
 8009e54:	2778      	movs	r7, #120	; 0x78
 8009e56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	6829      	ldr	r1, [r5, #0]
 8009e5e:	061f      	lsls	r7, r3, #24
 8009e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e64:	d402      	bmi.n	8009e6c <_printf_i+0x18c>
 8009e66:	065f      	lsls	r7, r3, #25
 8009e68:	bf48      	it	mi
 8009e6a:	b2b6      	uxthmi	r6, r6
 8009e6c:	07df      	lsls	r7, r3, #31
 8009e6e:	bf48      	it	mi
 8009e70:	f043 0320 	orrmi.w	r3, r3, #32
 8009e74:	6029      	str	r1, [r5, #0]
 8009e76:	bf48      	it	mi
 8009e78:	6023      	strmi	r3, [r4, #0]
 8009e7a:	b91e      	cbnz	r6, 8009e84 <_printf_i+0x1a4>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	f023 0320 	bic.w	r3, r3, #32
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	2310      	movs	r3, #16
 8009e86:	e7a7      	b.n	8009dd8 <_printf_i+0xf8>
 8009e88:	4824      	ldr	r0, [pc, #144]	; (8009f1c <_printf_i+0x23c>)
 8009e8a:	e7e4      	b.n	8009e56 <_printf_i+0x176>
 8009e8c:	4615      	mov	r5, r2
 8009e8e:	e7bd      	b.n	8009e0c <_printf_i+0x12c>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	6826      	ldr	r6, [r4, #0]
 8009e94:	6961      	ldr	r1, [r4, #20]
 8009e96:	1d18      	adds	r0, r3, #4
 8009e98:	6028      	str	r0, [r5, #0]
 8009e9a:	0635      	lsls	r5, r6, #24
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	d501      	bpl.n	8009ea4 <_printf_i+0x1c4>
 8009ea0:	6019      	str	r1, [r3, #0]
 8009ea2:	e002      	b.n	8009eaa <_printf_i+0x1ca>
 8009ea4:	0670      	lsls	r0, r6, #25
 8009ea6:	d5fb      	bpl.n	8009ea0 <_printf_i+0x1c0>
 8009ea8:	8019      	strh	r1, [r3, #0]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	4615      	mov	r5, r2
 8009eb0:	e7bc      	b.n	8009e2c <_printf_i+0x14c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	1d1a      	adds	r2, r3, #4
 8009eb6:	602a      	str	r2, [r5, #0]
 8009eb8:	681d      	ldr	r5, [r3, #0]
 8009eba:	6862      	ldr	r2, [r4, #4]
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7f6 fa16 	bl	80002f0 <memchr>
 8009ec4:	b108      	cbz	r0, 8009eca <_printf_i+0x1ea>
 8009ec6:	1b40      	subs	r0, r0, r5
 8009ec8:	6060      	str	r0, [r4, #4]
 8009eca:	6863      	ldr	r3, [r4, #4]
 8009ecc:	6123      	str	r3, [r4, #16]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed4:	e7aa      	b.n	8009e2c <_printf_i+0x14c>
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4649      	mov	r1, r9
 8009edc:	4640      	mov	r0, r8
 8009ede:	47d0      	blx	sl
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d0ad      	beq.n	8009e40 <_printf_i+0x160>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	079b      	lsls	r3, r3, #30
 8009ee8:	d413      	bmi.n	8009f12 <_printf_i+0x232>
 8009eea:	68e0      	ldr	r0, [r4, #12]
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	4298      	cmp	r0, r3
 8009ef0:	bfb8      	it	lt
 8009ef2:	4618      	movlt	r0, r3
 8009ef4:	e7a6      	b.n	8009e44 <_printf_i+0x164>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4632      	mov	r2, r6
 8009efa:	4649      	mov	r1, r9
 8009efc:	4640      	mov	r0, r8
 8009efe:	47d0      	blx	sl
 8009f00:	3001      	adds	r0, #1
 8009f02:	d09d      	beq.n	8009e40 <_printf_i+0x160>
 8009f04:	3501      	adds	r5, #1
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	9903      	ldr	r1, [sp, #12]
 8009f0a:	1a5b      	subs	r3, r3, r1
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dcf2      	bgt.n	8009ef6 <_printf_i+0x216>
 8009f10:	e7eb      	b.n	8009eea <_printf_i+0x20a>
 8009f12:	2500      	movs	r5, #0
 8009f14:	f104 0619 	add.w	r6, r4, #25
 8009f18:	e7f5      	b.n	8009f06 <_printf_i+0x226>
 8009f1a:	bf00      	nop
 8009f1c:	0800ac85 	.word	0x0800ac85
 8009f20:	0800ac96 	.word	0x0800ac96

08009f24 <memmove>:
 8009f24:	4288      	cmp	r0, r1
 8009f26:	b510      	push	{r4, lr}
 8009f28:	eb01 0402 	add.w	r4, r1, r2
 8009f2c:	d902      	bls.n	8009f34 <memmove+0x10>
 8009f2e:	4284      	cmp	r4, r0
 8009f30:	4623      	mov	r3, r4
 8009f32:	d807      	bhi.n	8009f44 <memmove+0x20>
 8009f34:	1e43      	subs	r3, r0, #1
 8009f36:	42a1      	cmp	r1, r4
 8009f38:	d008      	beq.n	8009f4c <memmove+0x28>
 8009f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f42:	e7f8      	b.n	8009f36 <memmove+0x12>
 8009f44:	4402      	add	r2, r0
 8009f46:	4601      	mov	r1, r0
 8009f48:	428a      	cmp	r2, r1
 8009f4a:	d100      	bne.n	8009f4e <memmove+0x2a>
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f56:	e7f7      	b.n	8009f48 <memmove+0x24>

08009f58 <_sbrk_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	; (8009f74 <_sbrk_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f7 f826 	bl	8000fb4 <_sbrk>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_sbrk_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_sbrk_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	24000468 	.word	0x24000468

08009f78 <_realloc_r>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4614      	mov	r4, r2
 8009f80:	460e      	mov	r6, r1
 8009f82:	b921      	cbnz	r1, 8009f8e <_realloc_r+0x16>
 8009f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	4611      	mov	r1, r2
 8009f8a:	f7ff bc57 	b.w	800983c <_malloc_r>
 8009f8e:	b92a      	cbnz	r2, 8009f9c <_realloc_r+0x24>
 8009f90:	f7ff fbe8 	bl	8009764 <_free_r>
 8009f94:	4625      	mov	r5, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	f000 f81b 	bl	8009fd6 <_malloc_usable_size_r>
 8009fa0:	4284      	cmp	r4, r0
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	d802      	bhi.n	8009fac <_realloc_r+0x34>
 8009fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009faa:	d812      	bhi.n	8009fd2 <_realloc_r+0x5a>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fc44 	bl	800983c <_malloc_r>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0ed      	beq.n	8009f96 <_realloc_r+0x1e>
 8009fba:	42bc      	cmp	r4, r7
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	bf28      	it	cs
 8009fc2:	463a      	movcs	r2, r7
 8009fc4:	f7ff fbc0 	bl	8009748 <memcpy>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff fbca 	bl	8009764 <_free_r>
 8009fd0:	e7e1      	b.n	8009f96 <_realloc_r+0x1e>
 8009fd2:	4635      	mov	r5, r6
 8009fd4:	e7df      	b.n	8009f96 <_realloc_r+0x1e>

08009fd6 <_malloc_usable_size_r>:
 8009fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fda:	1f18      	subs	r0, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfbc      	itt	lt
 8009fe0:	580b      	ldrlt	r3, [r1, r0]
 8009fe2:	18c0      	addlt	r0, r0, r3
 8009fe4:	4770      	bx	lr
	...

08009fe8 <cos>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	eeb0 7b40 	vmov.f64	d7, d0
 8009fee:	ee17 3a90 	vmov	r3, s15
 8009ff2:	4a21      	ldr	r2, [pc, #132]	; (800a078 <cos+0x90>)
 8009ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	dc06      	bgt.n	800a00a <cos+0x22>
 8009ffc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a070 <cos+0x88>
 800a000:	b005      	add	sp, #20
 800a002:	f85d eb04 	ldr.w	lr, [sp], #4
 800a006:	f000 b83b 	b.w	800a080 <__kernel_cos>
 800a00a:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <cos+0x94>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	dd04      	ble.n	800a01a <cos+0x32>
 800a010:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a014:	b005      	add	sp, #20
 800a016:	f85d fb04 	ldr.w	pc, [sp], #4
 800a01a:	4668      	mov	r0, sp
 800a01c:	f000 f8f4 	bl	800a208 <__ieee754_rem_pio2>
 800a020:	f000 0003 	and.w	r0, r0, #3
 800a024:	2801      	cmp	r0, #1
 800a026:	d009      	beq.n	800a03c <cos+0x54>
 800a028:	2802      	cmp	r0, #2
 800a02a:	d010      	beq.n	800a04e <cos+0x66>
 800a02c:	b9b0      	cbnz	r0, 800a05c <cos+0x74>
 800a02e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a032:	ed9d 0b00 	vldr	d0, [sp]
 800a036:	f000 f823 	bl	800a080 <__kernel_cos>
 800a03a:	e7eb      	b.n	800a014 <cos+0x2c>
 800a03c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a040:	ed9d 0b00 	vldr	d0, [sp]
 800a044:	f000 f888 	bl	800a158 <__kernel_sin>
 800a048:	eeb1 0b40 	vneg.f64	d0, d0
 800a04c:	e7e2      	b.n	800a014 <cos+0x2c>
 800a04e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a052:	ed9d 0b00 	vldr	d0, [sp]
 800a056:	f000 f813 	bl	800a080 <__kernel_cos>
 800a05a:	e7f5      	b.n	800a048 <cos+0x60>
 800a05c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a060:	ed9d 0b00 	vldr	d0, [sp]
 800a064:	2001      	movs	r0, #1
 800a066:	f000 f877 	bl	800a158 <__kernel_sin>
 800a06a:	e7d3      	b.n	800a014 <cos+0x2c>
 800a06c:	f3af 8000 	nop.w
	...
 800a078:	3fe921fb 	.word	0x3fe921fb
 800a07c:	7fefffff 	.word	0x7fefffff

0800a080 <__kernel_cos>:
 800a080:	ee10 1a90 	vmov	r1, s1
 800a084:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a08c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a090:	da05      	bge.n	800a09e <__kernel_cos+0x1e>
 800a092:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a096:	ee17 3a90 	vmov	r3, s15
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d03d      	beq.n	800a11a <__kernel_cos+0x9a>
 800a09e:	ee20 5b00 	vmul.f64	d5, d0, d0
 800a0a2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800a0a6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800a120 <__kernel_cos+0xa0>
 800a0aa:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800a128 <__kernel_cos+0xa8>
 800a0ae:	eea5 4b07 	vfma.f64	d4, d5, d7
 800a0b2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a130 <__kernel_cos+0xb0>
 800a0b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a0ba:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800a138 <__kernel_cos+0xb8>
 800a0be:	eea7 4b05 	vfma.f64	d4, d7, d5
 800a0c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a140 <__kernel_cos+0xc0>
 800a0c6:	4b22      	ldr	r3, [pc, #136]	; (800a150 <__kernel_cos+0xd0>)
 800a0c8:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a0cc:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800a148 <__kernel_cos+0xc8>
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	eea7 4b05 	vfma.f64	d4, d7, d5
 800a0d6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a0da:	ee24 4b05 	vmul.f64	d4, d4, d5
 800a0de:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a0e2:	eea5 1b04 	vfma.f64	d1, d5, d4
 800a0e6:	dc04      	bgt.n	800a0f2 <__kernel_cos+0x72>
 800a0e8:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a0ec:	ee36 0b47 	vsub.f64	d0, d6, d7
 800a0f0:	4770      	bx	lr
 800a0f2:	4b18      	ldr	r3, [pc, #96]	; (800a154 <__kernel_cos+0xd4>)
 800a0f4:	4299      	cmp	r1, r3
 800a0f6:	dc0d      	bgt.n	800a114 <__kernel_cos+0x94>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a0fe:	ec43 2b15 	vmov	d5, r2, r3
 800a102:	ee36 0b45 	vsub.f64	d0, d6, d5
 800a106:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a10a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a10e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a112:	4770      	bx	lr
 800a114:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a118:	e7f3      	b.n	800a102 <__kernel_cos+0x82>
 800a11a:	eeb0 0b46 	vmov.f64	d0, d6
 800a11e:	4770      	bx	lr
 800a120:	be8838d4 	.word	0xbe8838d4
 800a124:	bda8fae9 	.word	0xbda8fae9
 800a128:	bdb4b1c4 	.word	0xbdb4b1c4
 800a12c:	3e21ee9e 	.word	0x3e21ee9e
 800a130:	809c52ad 	.word	0x809c52ad
 800a134:	be927e4f 	.word	0xbe927e4f
 800a138:	19cb1590 	.word	0x19cb1590
 800a13c:	3efa01a0 	.word	0x3efa01a0
 800a140:	16c15177 	.word	0x16c15177
 800a144:	bf56c16c 	.word	0xbf56c16c
 800a148:	5555554c 	.word	0x5555554c
 800a14c:	3fa55555 	.word	0x3fa55555
 800a150:	3fd33332 	.word	0x3fd33332
 800a154:	3fe90000 	.word	0x3fe90000

0800a158 <__kernel_sin>:
 800a158:	ee10 3a90 	vmov	r3, s1
 800a15c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a160:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a164:	da04      	bge.n	800a170 <__kernel_sin+0x18>
 800a166:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a16a:	ee17 3a90 	vmov	r3, s15
 800a16e:	b35b      	cbz	r3, 800a1c8 <__kernel_sin+0x70>
 800a170:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a174:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a178:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a1d0 <__kernel_sin+0x78>
 800a17c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1d8 <__kernel_sin+0x80>
 800a180:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a184:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a1e0 <__kernel_sin+0x88>
 800a188:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a18c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1e8 <__kernel_sin+0x90>
 800a190:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a194:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a1f0 <__kernel_sin+0x98>
 800a198:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a19c:	b930      	cbnz	r0, 800a1ac <__kernel_sin+0x54>
 800a19e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a1f8 <__kernel_sin+0xa0>
 800a1a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a1a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a1aa:	4770      	bx	lr
 800a1ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a1b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a1b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a1b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a1bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a200 <__kernel_sin+0xa8>
 800a1c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a1c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	f3af 8000 	nop.w
 800a1d0:	5acfd57c 	.word	0x5acfd57c
 800a1d4:	3de5d93a 	.word	0x3de5d93a
 800a1d8:	8a2b9ceb 	.word	0x8a2b9ceb
 800a1dc:	be5ae5e6 	.word	0xbe5ae5e6
 800a1e0:	57b1fe7d 	.word	0x57b1fe7d
 800a1e4:	3ec71de3 	.word	0x3ec71de3
 800a1e8:	19c161d5 	.word	0x19c161d5
 800a1ec:	bf2a01a0 	.word	0xbf2a01a0
 800a1f0:	1110f8a6 	.word	0x1110f8a6
 800a1f4:	3f811111 	.word	0x3f811111
 800a1f8:	55555549 	.word	0x55555549
 800a1fc:	bfc55555 	.word	0xbfc55555
 800a200:	55555549 	.word	0x55555549
 800a204:	3fc55555 	.word	0x3fc55555

0800a208 <__ieee754_rem_pio2>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	eeb0 7b40 	vmov.f64	d7, d0
 800a20e:	ee17 5a90 	vmov	r5, s15
 800a212:	4b99      	ldr	r3, [pc, #612]	; (800a478 <__ieee754_rem_pio2+0x270>)
 800a214:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a218:	429e      	cmp	r6, r3
 800a21a:	b088      	sub	sp, #32
 800a21c:	4604      	mov	r4, r0
 800a21e:	dc07      	bgt.n	800a230 <__ieee754_rem_pio2+0x28>
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	ed84 0b00 	vstr	d0, [r4]
 800a228:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a22c:	2000      	movs	r0, #0
 800a22e:	e01b      	b.n	800a268 <__ieee754_rem_pio2+0x60>
 800a230:	4b92      	ldr	r3, [pc, #584]	; (800a47c <__ieee754_rem_pio2+0x274>)
 800a232:	429e      	cmp	r6, r3
 800a234:	dc3b      	bgt.n	800a2ae <__ieee754_rem_pio2+0xa6>
 800a236:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a23a:	2d00      	cmp	r5, #0
 800a23c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800a438 <__ieee754_rem_pio2+0x230>
 800a240:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a244:	dd19      	ble.n	800a27a <__ieee754_rem_pio2+0x72>
 800a246:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a24a:	429e      	cmp	r6, r3
 800a24c:	d00e      	beq.n	800a26c <__ieee754_rem_pio2+0x64>
 800a24e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a440 <__ieee754_rem_pio2+0x238>
 800a252:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a256:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a25a:	ed84 5b00 	vstr	d5, [r4]
 800a25e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a262:	ed84 7b02 	vstr	d7, [r4, #8]
 800a266:	2001      	movs	r0, #1
 800a268:	b008      	add	sp, #32
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a448 <__ieee754_rem_pio2+0x240>
 800a270:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a274:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a450 <__ieee754_rem_pio2+0x248>
 800a278:	e7eb      	b.n	800a252 <__ieee754_rem_pio2+0x4a>
 800a27a:	429e      	cmp	r6, r3
 800a27c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a280:	d00e      	beq.n	800a2a0 <__ieee754_rem_pio2+0x98>
 800a282:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800a440 <__ieee754_rem_pio2+0x238>
 800a286:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a28a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a28e:	ed84 5b00 	vstr	d5, [r4]
 800a292:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a29e:	e7e3      	b.n	800a268 <__ieee754_rem_pio2+0x60>
 800a2a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a448 <__ieee754_rem_pio2+0x240>
 800a2a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a2a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a450 <__ieee754_rem_pio2+0x248>
 800a2ac:	e7eb      	b.n	800a286 <__ieee754_rem_pio2+0x7e>
 800a2ae:	4b74      	ldr	r3, [pc, #464]	; (800a480 <__ieee754_rem_pio2+0x278>)
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	dc70      	bgt.n	800a396 <__ieee754_rem_pio2+0x18e>
 800a2b4:	f000 f8ec 	bl	800a490 <fabs>
 800a2b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a2bc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a458 <__ieee754_rem_pio2+0x250>
 800a2c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a2c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a2c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a2cc:	ee17 0a90 	vmov	r0, s15
 800a2d0:	eeb1 4b45 	vneg.f64	d4, d5
 800a2d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a438 <__ieee754_rem_pio2+0x230>
 800a2d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a2dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a440 <__ieee754_rem_pio2+0x238>
 800a2e0:	281f      	cmp	r0, #31
 800a2e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a2ea:	dc08      	bgt.n	800a2fe <__ieee754_rem_pio2+0xf6>
 800a2ec:	4b65      	ldr	r3, [pc, #404]	; (800a484 <__ieee754_rem_pio2+0x27c>)
 800a2ee:	1e42      	subs	r2, r0, #1
 800a2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f4:	42b3      	cmp	r3, r6
 800a2f6:	d002      	beq.n	800a2fe <__ieee754_rem_pio2+0xf6>
 800a2f8:	ed84 6b00 	vstr	d6, [r4]
 800a2fc:	e024      	b.n	800a348 <__ieee754_rem_pio2+0x140>
 800a2fe:	ee16 3a90 	vmov	r3, s13
 800a302:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a306:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a310:	ddf2      	ble.n	800a2f8 <__ieee754_rem_pio2+0xf0>
 800a312:	eeb0 6b40 	vmov.f64	d6, d0
 800a316:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800a448 <__ieee754_rem_pio2+0x240>
 800a31a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a31e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a322:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a326:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800a450 <__ieee754_rem_pio2+0x248>
 800a32a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a32e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a332:	ee13 3a90 	vmov	r3, s7
 800a336:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b31      	cmp	r3, #49	; 0x31
 800a33e:	dc17      	bgt.n	800a370 <__ieee754_rem_pio2+0x168>
 800a340:	eeb0 0b46 	vmov.f64	d0, d6
 800a344:	ed84 3b00 	vstr	d3, [r4]
 800a348:	ed94 6b00 	vldr	d6, [r4]
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a352:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a356:	ed84 0b02 	vstr	d0, [r4, #8]
 800a35a:	da85      	bge.n	800a268 <__ieee754_rem_pio2+0x60>
 800a35c:	eeb1 6b46 	vneg.f64	d6, d6
 800a360:	eeb1 0b40 	vneg.f64	d0, d0
 800a364:	ed84 6b00 	vstr	d6, [r4]
 800a368:	ed84 0b02 	vstr	d0, [r4, #8]
 800a36c:	4240      	negs	r0, r0
 800a36e:	e77b      	b.n	800a268 <__ieee754_rem_pio2+0x60>
 800a370:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800a460 <__ieee754_rem_pio2+0x258>
 800a374:	eeb0 0b46 	vmov.f64	d0, d6
 800a378:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a37c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800a380:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a384:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800a468 <__ieee754_rem_pio2+0x260>
 800a388:	eeb0 7b46 	vmov.f64	d7, d6
 800a38c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800a390:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a394:	e7b0      	b.n	800a2f8 <__ieee754_rem_pio2+0xf0>
 800a396:	4b3c      	ldr	r3, [pc, #240]	; (800a488 <__ieee754_rem_pio2+0x280>)
 800a398:	429e      	cmp	r6, r3
 800a39a:	dd06      	ble.n	800a3aa <__ieee754_rem_pio2+0x1a2>
 800a39c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a3a0:	ed80 7b02 	vstr	d7, [r0, #8]
 800a3a4:	ed80 7b00 	vstr	d7, [r0]
 800a3a8:	e740      	b.n	800a22c <__ieee754_rem_pio2+0x24>
 800a3aa:	1532      	asrs	r2, r6, #20
 800a3ac:	ee10 0a10 	vmov	r0, s0
 800a3b0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a3b4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a3b8:	ec41 0b17 	vmov	d7, r0, r1
 800a3bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a3c0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800a470 <__ieee754_rem_pio2+0x268>
 800a3c4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a3c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a3cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a3d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a3d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a3d8:	a808      	add	r0, sp, #32
 800a3da:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a3de:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a3e2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a3e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a3ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3ee:	2103      	movs	r1, #3
 800a3f0:	ed30 7b02 	vldmdb	r0!, {d7}
 800a3f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	f101 31ff 	add.w	r1, r1, #4294967295
 800a402:	d0f5      	beq.n	800a3f0 <__ieee754_rem_pio2+0x1e8>
 800a404:	4921      	ldr	r1, [pc, #132]	; (800a48c <__ieee754_rem_pio2+0x284>)
 800a406:	9101      	str	r1, [sp, #4]
 800a408:	2102      	movs	r1, #2
 800a40a:	9100      	str	r1, [sp, #0]
 800a40c:	a802      	add	r0, sp, #8
 800a40e:	4621      	mov	r1, r4
 800a410:	f000 f84a 	bl	800a4a8 <__kernel_rem_pio2>
 800a414:	2d00      	cmp	r5, #0
 800a416:	f6bf af27 	bge.w	800a268 <__ieee754_rem_pio2+0x60>
 800a41a:	ed94 7b00 	vldr	d7, [r4]
 800a41e:	eeb1 7b47 	vneg.f64	d7, d7
 800a422:	ed84 7b00 	vstr	d7, [r4]
 800a426:	ed94 7b02 	vldr	d7, [r4, #8]
 800a42a:	eeb1 7b47 	vneg.f64	d7, d7
 800a42e:	ed84 7b02 	vstr	d7, [r4, #8]
 800a432:	e79b      	b.n	800a36c <__ieee754_rem_pio2+0x164>
 800a434:	f3af 8000 	nop.w
 800a438:	54400000 	.word	0x54400000
 800a43c:	3ff921fb 	.word	0x3ff921fb
 800a440:	1a626331 	.word	0x1a626331
 800a444:	3dd0b461 	.word	0x3dd0b461
 800a448:	1a600000 	.word	0x1a600000
 800a44c:	3dd0b461 	.word	0x3dd0b461
 800a450:	2e037073 	.word	0x2e037073
 800a454:	3ba3198a 	.word	0x3ba3198a
 800a458:	6dc9c883 	.word	0x6dc9c883
 800a45c:	3fe45f30 	.word	0x3fe45f30
 800a460:	2e000000 	.word	0x2e000000
 800a464:	3ba3198a 	.word	0x3ba3198a
 800a468:	252049c1 	.word	0x252049c1
 800a46c:	397b839a 	.word	0x397b839a
 800a470:	00000000 	.word	0x00000000
 800a474:	41700000 	.word	0x41700000
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	4002d97b 	.word	0x4002d97b
 800a480:	413921fb 	.word	0x413921fb
 800a484:	0800aca8 	.word	0x0800aca8
 800a488:	7fefffff 	.word	0x7fefffff
 800a48c:	0800ad28 	.word	0x0800ad28

0800a490 <fabs>:
 800a490:	ec51 0b10 	vmov	r0, r1, d0
 800a494:	ee10 2a10 	vmov	r2, s0
 800a498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a49c:	ec43 2b10 	vmov	d0, r2, r3
 800a4a0:	4770      	bx	lr
 800a4a2:	0000      	movs	r0, r0
 800a4a4:	0000      	movs	r0, r0
	...

0800a4a8 <__kernel_rem_pio2>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	ed2d 8b06 	vpush	{d8-d10}
 800a4b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a4b4:	460f      	mov	r7, r1
 800a4b6:	9002      	str	r0, [sp, #8]
 800a4b8:	49c3      	ldr	r1, [pc, #780]	; (800a7c8 <__kernel_rem_pio2+0x320>)
 800a4ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800a4c2:	9901      	ldr	r1, [sp, #4]
 800a4c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a4c6:	f112 0f14 	cmn.w	r2, #20
 800a4ca:	bfa8      	it	ge
 800a4cc:	1ed0      	subge	r0, r2, #3
 800a4ce:	f101 3aff 	add.w	sl, r1, #4294967295
 800a4d2:	bfaa      	itet	ge
 800a4d4:	2418      	movge	r4, #24
 800a4d6:	2000      	movlt	r0, #0
 800a4d8:	fb90 f0f4 	sdivge	r0, r0, r4
 800a4dc:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800a7b0 <__kernel_rem_pio2+0x308>
 800a4e0:	f06f 0417 	mvn.w	r4, #23
 800a4e4:	fb00 4404 	mla	r4, r0, r4, r4
 800a4e8:	eba0 060a 	sub.w	r6, r0, sl
 800a4ec:	4414      	add	r4, r2
 800a4ee:	eb09 0c0a 	add.w	ip, r9, sl
 800a4f2:	ad1a      	add	r5, sp, #104	; 0x68
 800a4f4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4562      	cmp	r2, ip
 800a4fc:	dd10      	ble.n	800a520 <__kernel_rem_pio2+0x78>
 800a4fe:	9a01      	ldr	r2, [sp, #4]
 800a500:	a91a      	add	r1, sp, #104	; 0x68
 800a502:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a506:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800a50a:	f04f 0c00 	mov.w	ip, #0
 800a50e:	45cc      	cmp	ip, r9
 800a510:	dc26      	bgt.n	800a560 <__kernel_rem_pio2+0xb8>
 800a512:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800a7b0 <__kernel_rem_pio2+0x308>
 800a516:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a51a:	4616      	mov	r6, r2
 800a51c:	2500      	movs	r5, #0
 800a51e:	e015      	b.n	800a54c <__kernel_rem_pio2+0xa4>
 800a520:	42d6      	cmn	r6, r2
 800a522:	d409      	bmi.n	800a538 <__kernel_rem_pio2+0x90>
 800a524:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800a528:	ee07 1a90 	vmov	s15, r1
 800a52c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a530:	eca5 7b02 	vstmia	r5!, {d7}
 800a534:	3201      	adds	r2, #1
 800a536:	e7e0      	b.n	800a4fa <__kernel_rem_pio2+0x52>
 800a538:	eeb0 7b46 	vmov.f64	d7, d6
 800a53c:	e7f8      	b.n	800a530 <__kernel_rem_pio2+0x88>
 800a53e:	ecbe 5b02 	vldmia	lr!, {d5}
 800a542:	ed96 6b00 	vldr	d6, [r6]
 800a546:	3501      	adds	r5, #1
 800a548:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a54c:	4555      	cmp	r5, sl
 800a54e:	f1a6 0608 	sub.w	r6, r6, #8
 800a552:	ddf4      	ble.n	800a53e <__kernel_rem_pio2+0x96>
 800a554:	eca8 7b02 	vstmia	r8!, {d7}
 800a558:	f10c 0c01 	add.w	ip, ip, #1
 800a55c:	3208      	adds	r2, #8
 800a55e:	e7d6      	b.n	800a50e <__kernel_rem_pio2+0x66>
 800a560:	aa06      	add	r2, sp, #24
 800a562:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800a7b8 <__kernel_rem_pio2+0x310>
 800a566:	ed9f ab96 	vldr	d10, [pc, #600]	; 800a7c0 <__kernel_rem_pio2+0x318>
 800a56a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800a56e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a572:	9204      	str	r2, [sp, #16]
 800a574:	9303      	str	r3, [sp, #12]
 800a576:	464d      	mov	r5, r9
 800a578:	00eb      	lsls	r3, r5, #3
 800a57a:	9305      	str	r3, [sp, #20]
 800a57c:	ab92      	add	r3, sp, #584	; 0x248
 800a57e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a582:	f10d 0b18 	add.w	fp, sp, #24
 800a586:	ab6a      	add	r3, sp, #424	; 0x1a8
 800a588:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800a58c:	465e      	mov	r6, fp
 800a58e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a592:	4628      	mov	r0, r5
 800a594:	2800      	cmp	r0, #0
 800a596:	f1a2 0208 	sub.w	r2, r2, #8
 800a59a:	dc48      	bgt.n	800a62e <__kernel_rem_pio2+0x186>
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fa17 	bl	800a9d0 <scalbn>
 800a5a2:	eeb0 8b40 	vmov.f64	d8, d0
 800a5a6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a5aa:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a5ae:	f000 fa8f 	bl	800aad0 <floor>
 800a5b2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a5b6:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a5ba:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a5be:	2c00      	cmp	r4, #0
 800a5c0:	ee17 8a90 	vmov	r8, s15
 800a5c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a5c8:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a5cc:	dd41      	ble.n	800a652 <__kernel_rem_pio2+0x1aa>
 800a5ce:	1e68      	subs	r0, r5, #1
 800a5d0:	ab06      	add	r3, sp, #24
 800a5d2:	f1c4 0c18 	rsb	ip, r4, #24
 800a5d6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a5da:	fa46 f20c 	asr.w	r2, r6, ip
 800a5de:	4490      	add	r8, r2
 800a5e0:	fa02 f20c 	lsl.w	r2, r2, ip
 800a5e4:	1ab6      	subs	r6, r6, r2
 800a5e6:	f1c4 0217 	rsb	r2, r4, #23
 800a5ea:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800a5ee:	4116      	asrs	r6, r2
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	dd3d      	ble.n	800a670 <__kernel_rem_pio2+0x1c8>
 800a5f4:	f04f 0c00 	mov.w	ip, #0
 800a5f8:	f108 0801 	add.w	r8, r8, #1
 800a5fc:	4660      	mov	r0, ip
 800a5fe:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800a602:	4565      	cmp	r5, ip
 800a604:	dc6a      	bgt.n	800a6dc <__kernel_rem_pio2+0x234>
 800a606:	2c00      	cmp	r4, #0
 800a608:	dd04      	ble.n	800a614 <__kernel_rem_pio2+0x16c>
 800a60a:	2c01      	cmp	r4, #1
 800a60c:	d07b      	beq.n	800a706 <__kernel_rem_pio2+0x25e>
 800a60e:	2c02      	cmp	r4, #2
 800a610:	f000 8083 	beq.w	800a71a <__kernel_rem_pio2+0x272>
 800a614:	2e02      	cmp	r6, #2
 800a616:	d12b      	bne.n	800a670 <__kernel_rem_pio2+0x1c8>
 800a618:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a61c:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a620:	b330      	cbz	r0, 800a670 <__kernel_rem_pio2+0x1c8>
 800a622:	4620      	mov	r0, r4
 800a624:	f000 f9d4 	bl	800a9d0 <scalbn>
 800a628:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a62c:	e020      	b.n	800a670 <__kernel_rem_pio2+0x1c8>
 800a62e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a632:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a636:	3801      	subs	r0, #1
 800a638:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a63c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a640:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a644:	eca6 0a01 	vstmia	r6!, {s0}
 800a648:	ed92 0b00 	vldr	d0, [r2]
 800a64c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a650:	e7a0      	b.n	800a594 <__kernel_rem_pio2+0xec>
 800a652:	d105      	bne.n	800a660 <__kernel_rem_pio2+0x1b8>
 800a654:	1e6a      	subs	r2, r5, #1
 800a656:	ab06      	add	r3, sp, #24
 800a658:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a65c:	15f6      	asrs	r6, r6, #23
 800a65e:	e7c7      	b.n	800a5f0 <__kernel_rem_pio2+0x148>
 800a660:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a664:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	da34      	bge.n	800a6d8 <__kernel_rem_pio2+0x230>
 800a66e:	2600      	movs	r6, #0
 800a670:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a678:	f040 80aa 	bne.w	800a7d0 <__kernel_rem_pio2+0x328>
 800a67c:	f105 3bff 	add.w	fp, r5, #4294967295
 800a680:	4658      	mov	r0, fp
 800a682:	2200      	movs	r2, #0
 800a684:	4548      	cmp	r0, r9
 800a686:	da50      	bge.n	800a72a <__kernel_rem_pio2+0x282>
 800a688:	2a00      	cmp	r2, #0
 800a68a:	d06b      	beq.n	800a764 <__kernel_rem_pio2+0x2bc>
 800a68c:	ab06      	add	r3, sp, #24
 800a68e:	3c18      	subs	r4, #24
 800a690:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8087 	beq.w	800a7a8 <__kernel_rem_pio2+0x300>
 800a69a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f996 	bl	800a9d0 <scalbn>
 800a6a4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800a7b8 <__kernel_rem_pio2+0x310>
 800a6a8:	f10b 0201 	add.w	r2, fp, #1
 800a6ac:	a96a      	add	r1, sp, #424	; 0x1a8
 800a6ae:	00d3      	lsls	r3, r2, #3
 800a6b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a6b4:	465a      	mov	r2, fp
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	f280 80b8 	bge.w	800a82c <__kernel_rem_pio2+0x384>
 800a6bc:	465a      	mov	r2, fp
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	f2c0 80d6 	blt.w	800a870 <__kernel_rem_pio2+0x3c8>
 800a6c4:	a96a      	add	r1, sp, #424	; 0x1a8
 800a6c6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800a6ca:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a7b0 <__kernel_rem_pio2+0x308>
 800a6ce:	4d3f      	ldr	r5, [pc, #252]	; (800a7cc <__kernel_rem_pio2+0x324>)
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	ebab 0102 	sub.w	r1, fp, r2
 800a6d6:	e0c0      	b.n	800a85a <__kernel_rem_pio2+0x3b2>
 800a6d8:	2602      	movs	r6, #2
 800a6da:	e78b      	b.n	800a5f4 <__kernel_rem_pio2+0x14c>
 800a6dc:	f8db 2000 	ldr.w	r2, [fp]
 800a6e0:	b958      	cbnz	r0, 800a6fa <__kernel_rem_pio2+0x252>
 800a6e2:	b122      	cbz	r2, 800a6ee <__kernel_rem_pio2+0x246>
 800a6e4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800a6e8:	f8cb 2000 	str.w	r2, [fp]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f10c 0c01 	add.w	ip, ip, #1
 800a6f2:	f10b 0b04 	add.w	fp, fp, #4
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	e783      	b.n	800a602 <__kernel_rem_pio2+0x15a>
 800a6fa:	ebae 0202 	sub.w	r2, lr, r2
 800a6fe:	f8cb 2000 	str.w	r2, [fp]
 800a702:	4602      	mov	r2, r0
 800a704:	e7f3      	b.n	800a6ee <__kernel_rem_pio2+0x246>
 800a706:	f105 3cff 	add.w	ip, r5, #4294967295
 800a70a:	ab06      	add	r3, sp, #24
 800a70c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a710:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a714:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800a718:	e77c      	b.n	800a614 <__kernel_rem_pio2+0x16c>
 800a71a:	f105 3cff 	add.w	ip, r5, #4294967295
 800a71e:	ab06      	add	r3, sp, #24
 800a720:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a724:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800a728:	e7f4      	b.n	800a714 <__kernel_rem_pio2+0x26c>
 800a72a:	ab06      	add	r3, sp, #24
 800a72c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a730:	3801      	subs	r0, #1
 800a732:	431a      	orrs	r2, r3
 800a734:	e7a6      	b.n	800a684 <__kernel_rem_pio2+0x1dc>
 800a736:	3201      	adds	r2, #1
 800a738:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	d0fa      	beq.n	800a736 <__kernel_rem_pio2+0x28e>
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a746:	eb0d 0003 	add.w	r0, sp, r3
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	18ee      	adds	r6, r5, r3
 800a74e:	ab1a      	add	r3, sp, #104	; 0x68
 800a750:	f105 0c01 	add.w	ip, r5, #1
 800a754:	3898      	subs	r0, #152	; 0x98
 800a756:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a75a:	442a      	add	r2, r5
 800a75c:	4562      	cmp	r2, ip
 800a75e:	da04      	bge.n	800a76a <__kernel_rem_pio2+0x2c2>
 800a760:	4615      	mov	r5, r2
 800a762:	e709      	b.n	800a578 <__kernel_rem_pio2+0xd0>
 800a764:	9804      	ldr	r0, [sp, #16]
 800a766:	2201      	movs	r2, #1
 800a768:	e7e6      	b.n	800a738 <__kernel_rem_pio2+0x290>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a770:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a77e:	2500      	movs	r5, #0
 800a780:	eca6 7b02 	vstmia	r6!, {d7}
 800a784:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800a7b0 <__kernel_rem_pio2+0x308>
 800a788:	46b0      	mov	r8, r6
 800a78a:	4555      	cmp	r5, sl
 800a78c:	dd04      	ble.n	800a798 <__kernel_rem_pio2+0x2f0>
 800a78e:	eca0 7b02 	vstmia	r0!, {d7}
 800a792:	f10c 0c01 	add.w	ip, ip, #1
 800a796:	e7e1      	b.n	800a75c <__kernel_rem_pio2+0x2b4>
 800a798:	ecbe 5b02 	vldmia	lr!, {d5}
 800a79c:	ed38 6b02 	vldmdb	r8!, {d6}
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a7a6:	e7f0      	b.n	800a78a <__kernel_rem_pio2+0x2e2>
 800a7a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7ac:	e76e      	b.n	800a68c <__kernel_rem_pio2+0x1e4>
 800a7ae:	bf00      	nop
	...
 800a7bc:	3e700000 	.word	0x3e700000
 800a7c0:	00000000 	.word	0x00000000
 800a7c4:	41700000 	.word	0x41700000
 800a7c8:	0800ae70 	.word	0x0800ae70
 800a7cc:	0800ae30 	.word	0x0800ae30
 800a7d0:	4260      	negs	r0, r4
 800a7d2:	eeb0 0b48 	vmov.f64	d0, d8
 800a7d6:	f000 f8fb 	bl	800a9d0 <scalbn>
 800a7da:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800a9b8 <__kernel_rem_pio2+0x510>
 800a7de:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	db18      	blt.n	800a81a <__kernel_rem_pio2+0x372>
 800a7e8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800a9c0 <__kernel_rem_pio2+0x518>
 800a7ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a7f0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a7f4:	aa06      	add	r2, sp, #24
 800a7f6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a7fa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a7fe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a802:	f105 0b01 	add.w	fp, r5, #1
 800a806:	ee10 3a10 	vmov	r3, s0
 800a80a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a80e:	ee17 3a10 	vmov	r3, s14
 800a812:	3418      	adds	r4, #24
 800a814:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800a818:	e73f      	b.n	800a69a <__kernel_rem_pio2+0x1f2>
 800a81a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a81e:	aa06      	add	r2, sp, #24
 800a820:	ee10 3a10 	vmov	r3, s0
 800a824:	46ab      	mov	fp, r5
 800a826:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a82a:	e736      	b.n	800a69a <__kernel_rem_pio2+0x1f2>
 800a82c:	a806      	add	r0, sp, #24
 800a82e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a832:	9001      	str	r0, [sp, #4]
 800a834:	ee07 0a90 	vmov	s15, r0
 800a838:	3a01      	subs	r2, #1
 800a83a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a83e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a842:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a846:	ed21 7b02 	vstmdb	r1!, {d7}
 800a84a:	e734      	b.n	800a6b6 <__kernel_rem_pio2+0x20e>
 800a84c:	ecb5 5b02 	vldmia	r5!, {d5}
 800a850:	ecb4 6b02 	vldmia	r4!, {d6}
 800a854:	3001      	adds	r0, #1
 800a856:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a85a:	4548      	cmp	r0, r9
 800a85c:	dc01      	bgt.n	800a862 <__kernel_rem_pio2+0x3ba>
 800a85e:	4288      	cmp	r0, r1
 800a860:	ddf4      	ble.n	800a84c <__kernel_rem_pio2+0x3a4>
 800a862:	a842      	add	r0, sp, #264	; 0x108
 800a864:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a868:	ed81 7b00 	vstr	d7, [r1]
 800a86c:	3a01      	subs	r2, #1
 800a86e:	e726      	b.n	800a6be <__kernel_rem_pio2+0x216>
 800a870:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800a872:	2a02      	cmp	r2, #2
 800a874:	dc0a      	bgt.n	800a88c <__kernel_rem_pio2+0x3e4>
 800a876:	2a00      	cmp	r2, #0
 800a878:	dc2e      	bgt.n	800a8d8 <__kernel_rem_pio2+0x430>
 800a87a:	d047      	beq.n	800a90c <__kernel_rem_pio2+0x464>
 800a87c:	f008 0007 	and.w	r0, r8, #7
 800a880:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800a884:	ecbd 8b06 	vpop	{d8-d10}
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800a88e:	2a03      	cmp	r2, #3
 800a890:	d1f4      	bne.n	800a87c <__kernel_rem_pio2+0x3d4>
 800a892:	a942      	add	r1, sp, #264	; 0x108
 800a894:	f1a3 0208 	sub.w	r2, r3, #8
 800a898:	440a      	add	r2, r1
 800a89a:	4611      	mov	r1, r2
 800a89c:	4658      	mov	r0, fp
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f1a1 0108 	sub.w	r1, r1, #8
 800a8a4:	dc55      	bgt.n	800a952 <__kernel_rem_pio2+0x4aa>
 800a8a6:	4659      	mov	r1, fp
 800a8a8:	2901      	cmp	r1, #1
 800a8aa:	f1a2 0208 	sub.w	r2, r2, #8
 800a8ae:	dc60      	bgt.n	800a972 <__kernel_rem_pio2+0x4ca>
 800a8b0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800a9c8 <__kernel_rem_pio2+0x520>
 800a8b4:	aa42      	add	r2, sp, #264	; 0x108
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f1bb 0f01 	cmp.w	fp, #1
 800a8bc:	dc69      	bgt.n	800a992 <__kernel_rem_pio2+0x4ea>
 800a8be:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800a8c2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d16a      	bne.n	800a9a0 <__kernel_rem_pio2+0x4f8>
 800a8ca:	ed87 5b00 	vstr	d5, [r7]
 800a8ce:	ed87 6b02 	vstr	d6, [r7, #8]
 800a8d2:	ed87 7b04 	vstr	d7, [r7, #16]
 800a8d6:	e7d1      	b.n	800a87c <__kernel_rem_pio2+0x3d4>
 800a8d8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a9c8 <__kernel_rem_pio2+0x520>
 800a8dc:	aa42      	add	r2, sp, #264	; 0x108
 800a8de:	4413      	add	r3, r2
 800a8e0:	465a      	mov	r2, fp
 800a8e2:	2a00      	cmp	r2, #0
 800a8e4:	da26      	bge.n	800a934 <__kernel_rem_pio2+0x48c>
 800a8e6:	b35e      	cbz	r6, 800a940 <__kernel_rem_pio2+0x498>
 800a8e8:	eeb1 7b46 	vneg.f64	d7, d6
 800a8ec:	ed87 7b00 	vstr	d7, [r7]
 800a8f0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800a8f4:	aa44      	add	r2, sp, #272	; 0x110
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8fc:	459b      	cmp	fp, r3
 800a8fe:	da22      	bge.n	800a946 <__kernel_rem_pio2+0x49e>
 800a900:	b10e      	cbz	r6, 800a906 <__kernel_rem_pio2+0x45e>
 800a902:	eeb1 7b47 	vneg.f64	d7, d7
 800a906:	ed87 7b02 	vstr	d7, [r7, #8]
 800a90a:	e7b7      	b.n	800a87c <__kernel_rem_pio2+0x3d4>
 800a90c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a9c8 <__kernel_rem_pio2+0x520>
 800a910:	aa42      	add	r2, sp, #264	; 0x108
 800a912:	4413      	add	r3, r2
 800a914:	f1bb 0f00 	cmp.w	fp, #0
 800a918:	da05      	bge.n	800a926 <__kernel_rem_pio2+0x47e>
 800a91a:	b10e      	cbz	r6, 800a920 <__kernel_rem_pio2+0x478>
 800a91c:	eeb1 7b47 	vneg.f64	d7, d7
 800a920:	ed87 7b00 	vstr	d7, [r7]
 800a924:	e7aa      	b.n	800a87c <__kernel_rem_pio2+0x3d4>
 800a926:	ed33 6b02 	vldmdb	r3!, {d6}
 800a92a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a92e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a932:	e7ef      	b.n	800a914 <__kernel_rem_pio2+0x46c>
 800a934:	ed33 7b02 	vldmdb	r3!, {d7}
 800a938:	3a01      	subs	r2, #1
 800a93a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a93e:	e7d0      	b.n	800a8e2 <__kernel_rem_pio2+0x43a>
 800a940:	eeb0 7b46 	vmov.f64	d7, d6
 800a944:	e7d2      	b.n	800a8ec <__kernel_rem_pio2+0x444>
 800a946:	ecb2 6b02 	vldmia	r2!, {d6}
 800a94a:	3301      	adds	r3, #1
 800a94c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a950:	e7d4      	b.n	800a8fc <__kernel_rem_pio2+0x454>
 800a952:	ed91 7b00 	vldr	d7, [r1]
 800a956:	ed91 5b02 	vldr	d5, [r1, #8]
 800a95a:	3801      	subs	r0, #1
 800a95c:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a960:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a964:	ed81 6b00 	vstr	d6, [r1]
 800a968:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a96c:	ed81 7b02 	vstr	d7, [r1, #8]
 800a970:	e795      	b.n	800a89e <__kernel_rem_pio2+0x3f6>
 800a972:	ed92 7b00 	vldr	d7, [r2]
 800a976:	ed92 5b02 	vldr	d5, [r2, #8]
 800a97a:	3901      	subs	r1, #1
 800a97c:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a980:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a984:	ed82 6b00 	vstr	d6, [r2]
 800a988:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a98c:	ed82 7b02 	vstr	d7, [r2, #8]
 800a990:	e78a      	b.n	800a8a8 <__kernel_rem_pio2+0x400>
 800a992:	ed33 6b02 	vldmdb	r3!, {d6}
 800a996:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a99a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a99e:	e78b      	b.n	800a8b8 <__kernel_rem_pio2+0x410>
 800a9a0:	eeb1 5b45 	vneg.f64	d5, d5
 800a9a4:	eeb1 6b46 	vneg.f64	d6, d6
 800a9a8:	ed87 5b00 	vstr	d5, [r7]
 800a9ac:	eeb1 7b47 	vneg.f64	d7, d7
 800a9b0:	ed87 6b02 	vstr	d6, [r7, #8]
 800a9b4:	e78d      	b.n	800a8d2 <__kernel_rem_pio2+0x42a>
 800a9b6:	bf00      	nop
 800a9b8:	00000000 	.word	0x00000000
 800a9bc:	41700000 	.word	0x41700000
 800a9c0:	00000000 	.word	0x00000000
 800a9c4:	3e700000 	.word	0x3e700000
	...

0800a9d0 <scalbn>:
 800a9d0:	ee10 1a90 	vmov	r1, s1
 800a9d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9d8:	b98b      	cbnz	r3, 800a9fe <scalbn+0x2e>
 800a9da:	ee10 3a10 	vmov	r3, s0
 800a9de:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9e2:	4319      	orrs	r1, r3
 800a9e4:	d00a      	beq.n	800a9fc <scalbn+0x2c>
 800a9e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800aa98 <scalbn+0xc8>
 800a9ea:	4b37      	ldr	r3, [pc, #220]	; (800aac8 <scalbn+0xf8>)
 800a9ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a9f0:	4298      	cmp	r0, r3
 800a9f2:	da0b      	bge.n	800aa0c <scalbn+0x3c>
 800a9f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800aaa0 <scalbn+0xd0>
 800a9f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a9fc:	4770      	bx	lr
 800a9fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d107      	bne.n	800aa16 <scalbn+0x46>
 800aa06:	ee30 0b00 	vadd.f64	d0, d0, d0
 800aa0a:	4770      	bx	lr
 800aa0c:	ee10 1a90 	vmov	r1, s1
 800aa10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa14:	3b36      	subs	r3, #54	; 0x36
 800aa16:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aa1a:	4290      	cmp	r0, r2
 800aa1c:	dd0d      	ble.n	800aa3a <scalbn+0x6a>
 800aa1e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800aaa8 <scalbn+0xd8>
 800aa22:	ee10 3a90 	vmov	r3, s1
 800aa26:	eeb0 6b47 	vmov.f64	d6, d7
 800aa2a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800aab0 <scalbn+0xe0>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	fe27 7b05 	vselge.f64	d7, d7, d5
 800aa34:	ee27 0b06 	vmul.f64	d0, d7, d6
 800aa38:	4770      	bx	lr
 800aa3a:	4418      	add	r0, r3
 800aa3c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800aa40:	4298      	cmp	r0, r3
 800aa42:	dcec      	bgt.n	800aa1e <scalbn+0x4e>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	dd0a      	ble.n	800aa5e <scalbn+0x8e>
 800aa48:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800aa4c:	ec53 2b10 	vmov	r2, r3, d0
 800aa50:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800aa54:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800aa58:	ec43 2b10 	vmov	d0, r2, r3
 800aa5c:	4770      	bx	lr
 800aa5e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800aa62:	da09      	bge.n	800aa78 <scalbn+0xa8>
 800aa64:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800aaa0 <scalbn+0xd0>
 800aa68:	ee10 3a90 	vmov	r3, s1
 800aa6c:	eeb0 6b47 	vmov.f64	d6, d7
 800aa70:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800aab8 <scalbn+0xe8>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	e7db      	b.n	800aa30 <scalbn+0x60>
 800aa78:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800aa7c:	ec53 2b10 	vmov	r2, r3, d0
 800aa80:	3036      	adds	r0, #54	; 0x36
 800aa82:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800aa86:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800aa8a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800aac0 <scalbn+0xf0>
 800aa8e:	ec43 2b10 	vmov	d0, r2, r3
 800aa92:	e7b1      	b.n	800a9f8 <scalbn+0x28>
 800aa94:	f3af 8000 	nop.w
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	43500000 	.word	0x43500000
 800aaa0:	c2f8f359 	.word	0xc2f8f359
 800aaa4:	01a56e1f 	.word	0x01a56e1f
 800aaa8:	8800759c 	.word	0x8800759c
 800aaac:	7e37e43c 	.word	0x7e37e43c
 800aab0:	8800759c 	.word	0x8800759c
 800aab4:	fe37e43c 	.word	0xfe37e43c
 800aab8:	c2f8f359 	.word	0xc2f8f359
 800aabc:	81a56e1f 	.word	0x81a56e1f
 800aac0:	00000000 	.word	0x00000000
 800aac4:	3c900000 	.word	0x3c900000
 800aac8:	ffff3cb0 	.word	0xffff3cb0
 800aacc:	00000000 	.word	0x00000000

0800aad0 <floor>:
 800aad0:	ee10 1a90 	vmov	r1, s1
 800aad4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aad8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800aadc:	2b13      	cmp	r3, #19
 800aade:	b530      	push	{r4, r5, lr}
 800aae0:	ee10 0a10 	vmov	r0, s0
 800aae4:	ee10 5a10 	vmov	r5, s0
 800aae8:	dc31      	bgt.n	800ab4e <floor+0x7e>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da15      	bge.n	800ab1a <floor+0x4a>
 800aaee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800abb0 <floor+0xe0>
 800aaf2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800aaf6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800aafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafe:	dd07      	ble.n	800ab10 <floor+0x40>
 800ab00:	2900      	cmp	r1, #0
 800ab02:	da4e      	bge.n	800aba2 <floor+0xd2>
 800ab04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ab08:	4308      	orrs	r0, r1
 800ab0a:	d04d      	beq.n	800aba8 <floor+0xd8>
 800ab0c:	492a      	ldr	r1, [pc, #168]	; (800abb8 <floor+0xe8>)
 800ab0e:	2000      	movs	r0, #0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4602      	mov	r2, r0
 800ab14:	ec43 2b10 	vmov	d0, r2, r3
 800ab18:	e020      	b.n	800ab5c <floor+0x8c>
 800ab1a:	4a28      	ldr	r2, [pc, #160]	; (800abbc <floor+0xec>)
 800ab1c:	411a      	asrs	r2, r3
 800ab1e:	ea01 0402 	and.w	r4, r1, r2
 800ab22:	4304      	orrs	r4, r0
 800ab24:	d01a      	beq.n	800ab5c <floor+0x8c>
 800ab26:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800abb0 <floor+0xe0>
 800ab2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ab2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	ddeb      	ble.n	800ab10 <floor+0x40>
 800ab38:	2900      	cmp	r1, #0
 800ab3a:	bfbe      	ittt	lt
 800ab3c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ab40:	fa40 f303 	asrlt.w	r3, r0, r3
 800ab44:	18c9      	addlt	r1, r1, r3
 800ab46:	ea21 0102 	bic.w	r1, r1, r2
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	e7e0      	b.n	800ab10 <floor+0x40>
 800ab4e:	2b33      	cmp	r3, #51	; 0x33
 800ab50:	dd05      	ble.n	800ab5e <floor+0x8e>
 800ab52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab56:	d101      	bne.n	800ab5c <floor+0x8c>
 800ab58:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ab5c:	bd30      	pop	{r4, r5, pc}
 800ab5e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295
 800ab66:	40e2      	lsrs	r2, r4
 800ab68:	4210      	tst	r0, r2
 800ab6a:	d0f7      	beq.n	800ab5c <floor+0x8c>
 800ab6c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800abb0 <floor+0xe0>
 800ab70:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ab74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	ddc8      	ble.n	800ab10 <floor+0x40>
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	da02      	bge.n	800ab88 <floor+0xb8>
 800ab82:	2b14      	cmp	r3, #20
 800ab84:	d103      	bne.n	800ab8e <floor+0xbe>
 800ab86:	3101      	adds	r1, #1
 800ab88:	ea20 0002 	bic.w	r0, r0, r2
 800ab8c:	e7c0      	b.n	800ab10 <floor+0x40>
 800ab8e:	2401      	movs	r4, #1
 800ab90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ab94:	fa04 f303 	lsl.w	r3, r4, r3
 800ab98:	4418      	add	r0, r3
 800ab9a:	4285      	cmp	r5, r0
 800ab9c:	bf88      	it	hi
 800ab9e:	1909      	addhi	r1, r1, r4
 800aba0:	e7f2      	b.n	800ab88 <floor+0xb8>
 800aba2:	2000      	movs	r0, #0
 800aba4:	4601      	mov	r1, r0
 800aba6:	e7b3      	b.n	800ab10 <floor+0x40>
 800aba8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800abac:	e7b0      	b.n	800ab10 <floor+0x40>
 800abae:	bf00      	nop
 800abb0:	8800759c 	.word	0x8800759c
 800abb4:	7e37e43c 	.word	0x7e37e43c
 800abb8:	bff00000 	.word	0xbff00000
 800abbc:	000fffff 	.word	0x000fffff

0800abc0 <_init>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr

0800abcc <_fini>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr
