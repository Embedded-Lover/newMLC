
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text.Reset_Handler 00000090  900002b0  900002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text1        00000378  90000340  90000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0001a5b8  24000000  900006b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000e46bc  9001ac70  9001ac70  0003ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  900ff32c  900ff32c  0011f32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  900ff334  900ff334  0011f334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  900ff338  900ff338  0011f338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  2401a5b8  900ff33c  0012a5b8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0001b5c4  2401a8e0  900ff664  0012a8e0  2**3
                  ALLOC
 10 ._user_heap_stack 0000c004  24035ea4  900ff664  00135ea4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0012a8e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0012a90e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000930e6  00000000  00000000  0012a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010e01  00000000  00000000  001bda37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000320fc  00000000  00000000  001ce838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ff0  00000000  00000000  00200938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00005855  00000000  00000000  00203928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004418a  00000000  00000000  0020917d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00077bfa  00000000  00000000  0024d307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001722c0  00000000  00000000  002c4f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009788  00000000  00000000  004371c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0044094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text.Reset_Handler:

900002b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900002b0:	f8df d04c 	ldr.w	sp, [pc, #76]	; 90000300 <LoopFillZerobss+0x14>
  
/* Call the clock system initialization function.*/
 //
 //////////////////////////////////////////////////////////
  ldr r0, =_ramStartText
900002b4:	4813      	ldr	r0, [pc, #76]	; (90000304 <LoopFillZerobss+0x18>)
  ldr r1, =_ramEndText
900002b6:	4914      	ldr	r1, [pc, #80]	; (90000308 <LoopFillZerobss+0x1c>)
  ldr r2, =_flashStartText
900002b8:	4a14      	ldr	r2, [pc, #80]	; (9000030c <LoopFillZerobss+0x20>)
  movs r3, #0
900002ba:	2300      	movs	r3, #0
  b LoopCopyCodeInit
900002bc:	e002      	b.n	900002c4 <LoopCopyCodeInit>

900002be <CopyCodeInit>:

CopyCodeInit:
  ldr r4, [r2, r3]
900002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900002c2:	3304      	adds	r3, #4

900002c4 <LoopCopyCodeInit>:

LoopCopyCodeInit:
  adds r4, r0, r3
900002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900002c6:	428c      	cmp	r4, r1
  bcc CopyCodeInit
900002c8:	d3f9      	bcc.n	900002be <CopyCodeInit>
 ///////////////////////////////////////////////////////////
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
900002ca:	4811      	ldr	r0, [pc, #68]	; (90000310 <LoopFillZerobss+0x24>)
  ldr r1, =_edata
900002cc:	4911      	ldr	r1, [pc, #68]	; (90000314 <LoopFillZerobss+0x28>)
  ldr r2, =_sidata
900002ce:	4a12      	ldr	r2, [pc, #72]	; (90000318 <LoopFillZerobss+0x2c>)
  movs r3, #0
900002d0:	2300      	movs	r3, #0
  b LoopCopyDataInit
900002d2:	e002      	b.n	900002da <LoopCopyDataInit>

900002d4 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900002d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900002d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900002d8:	3304      	adds	r3, #4

900002da <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
900002da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900002dc:	428c      	cmp	r4, r1
  bcc CopyDataInit
900002de:	d3f9      	bcc.n	900002d4 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900002e0:	4a0e      	ldr	r2, [pc, #56]	; (9000031c <LoopFillZerobss+0x30>)
  ldr r4, =_ebss
900002e2:	4c0f      	ldr	r4, [pc, #60]	; (90000320 <LoopFillZerobss+0x34>)
  movs r3, #0
900002e4:	2300      	movs	r3, #0
  b LoopFillZerobss
900002e6:	e001      	b.n	900002ec <LoopFillZerobss>

900002e8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900002e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900002ea:	3204      	adds	r2, #4

900002ec <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900002ec:	42a2      	cmp	r2, r4
  bcc FillZerobss
900002ee:	d3fb      	bcc.n	900002e8 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
900002f0:	f000 f81a 	bl	90000328 <____libc_init_array_veneer>
/* Call the application's entry point.*/
  bl  SystemInit
900002f4:	f000 f81c 	bl	90000330 <__SystemInit_veneer>
  bl  main
900002f8:	f000 f81e 	bl	90000338 <__main_veneer>
  bx  lr
900002fc:	4770      	bx	lr
900002fe:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
90000300:	24100000 	.word	0x24100000
  ldr r0, =_ramStartText
90000304:	24000000 	.word	0x24000000
  ldr r1, =_ramEndText
90000308:	2401a5b8 	.word	0x2401a5b8
  ldr r2, =_flashStartText
9000030c:	900006b8 	.word	0x900006b8
  ldr r0, =_sdata
90000310:	2401a5b8 	.word	0x2401a5b8
  ldr r1, =_edata
90000314:	2401a8e0 	.word	0x2401a8e0
  ldr r2, =_sidata
90000318:	900ff33c 	.word	0x900ff33c
  ldr r2, =_sbss
9000031c:	2401a8e0 	.word	0x2401a8e0
  ldr r4, =_ebss
90000320:	24035ea4 	.word	0x24035ea4
90000324:	00000000 	.word	0x00000000

90000328 <____libc_init_array_veneer>:
90000328:	f85f f000 	ldr.w	pc, [pc]	; 9000032c <____libc_init_array_veneer+0x4>
9000032c:	2401a521 	.word	0x2401a521

90000330 <__SystemInit_veneer>:
90000330:	f85f f000 	ldr.w	pc, [pc]	; 90000334 <__SystemInit_veneer+0x4>
90000334:	24000e3d 	.word	0x24000e3d

90000338 <__main_veneer>:
90000338:	f85f f000 	ldr.w	pc, [pc]	; 9000033c <__main_veneer+0x4>
9000033c:	24000861 	.word	0x24000861

Disassembly of section .text1:

90000340 <__do_global_dtors_aux>:
90000340:	b510      	push	{r4, lr}
90000342:	4c05      	ldr	r4, [pc, #20]	; (90000358 <__do_global_dtors_aux+0x18>)
90000344:	7823      	ldrb	r3, [r4, #0]
90000346:	b933      	cbnz	r3, 90000356 <__do_global_dtors_aux+0x16>
90000348:	4b04      	ldr	r3, [pc, #16]	; (9000035c <__do_global_dtors_aux+0x1c>)
9000034a:	b113      	cbz	r3, 90000352 <__do_global_dtors_aux+0x12>
9000034c:	4804      	ldr	r0, [pc, #16]	; (90000360 <__do_global_dtors_aux+0x20>)
9000034e:	f3af 8000 	nop.w
90000352:	2301      	movs	r3, #1
90000354:	7023      	strb	r3, [r4, #0]
90000356:	bd10      	pop	{r4, pc}
90000358:	2401a8e0 	.word	0x2401a8e0
9000035c:	00000000 	.word	0x00000000
90000360:	2401a5b8 	.word	0x2401a5b8

90000364 <frame_dummy>:
90000364:	b508      	push	{r3, lr}
90000366:	4b03      	ldr	r3, [pc, #12]	; (90000374 <frame_dummy+0x10>)
90000368:	b11b      	cbz	r3, 90000372 <frame_dummy+0xe>
9000036a:	4903      	ldr	r1, [pc, #12]	; (90000378 <frame_dummy+0x14>)
9000036c:	4803      	ldr	r0, [pc, #12]	; (9000037c <frame_dummy+0x18>)
9000036e:	f3af 8000 	nop.w
90000372:	bd08      	pop	{r3, pc}
90000374:	00000000 	.word	0x00000000
90000378:	2401a8e4 	.word	0x2401a8e4
9000037c:	2401a5b8 	.word	0x2401a5b8

90000380 <strcmp>:
90000380:	f810 2b01 	ldrb.w	r2, [r0], #1
90000384:	f811 3b01 	ldrb.w	r3, [r1], #1
90000388:	2a01      	cmp	r2, #1
9000038a:	bf28      	it	cs
9000038c:	429a      	cmpcs	r2, r3
9000038e:	d0f7      	beq.n	90000380 <strcmp>
90000390:	1ad0      	subs	r0, r2, r3
90000392:	4770      	bx	lr

90000394 <strlen>:
90000394:	4603      	mov	r3, r0
90000396:	f813 2b01 	ldrb.w	r2, [r3], #1
9000039a:	2a00      	cmp	r2, #0
9000039c:	d1fb      	bne.n	90000396 <strlen+0x2>
9000039e:	1a18      	subs	r0, r3, r0
900003a0:	3801      	subs	r0, #1
900003a2:	4770      	bx	lr

900003a4 <__aeabi_uldivmod>:
900003a4:	b953      	cbnz	r3, 900003bc <__aeabi_uldivmod+0x18>
900003a6:	b94a      	cbnz	r2, 900003bc <__aeabi_uldivmod+0x18>
900003a8:	2900      	cmp	r1, #0
900003aa:	bf08      	it	eq
900003ac:	2800      	cmpeq	r0, #0
900003ae:	bf1c      	itt	ne
900003b0:	f04f 31ff 	movne.w	r1, #4294967295
900003b4:	f04f 30ff 	movne.w	r0, #4294967295
900003b8:	f000 b970 	b.w	9000069c <__aeabi_idiv0>
900003bc:	f1ad 0c08 	sub.w	ip, sp, #8
900003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003c4:	f000 f806 	bl	900003d4 <__udivmoddi4>
900003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
900003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003d0:	b004      	add	sp, #16
900003d2:	4770      	bx	lr

900003d4 <__udivmoddi4>:
900003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003d8:	9e08      	ldr	r6, [sp, #32]
900003da:	460d      	mov	r5, r1
900003dc:	4604      	mov	r4, r0
900003de:	460f      	mov	r7, r1
900003e0:	2b00      	cmp	r3, #0
900003e2:	d14a      	bne.n	9000047a <__udivmoddi4+0xa6>
900003e4:	428a      	cmp	r2, r1
900003e6:	4694      	mov	ip, r2
900003e8:	d965      	bls.n	900004b6 <__udivmoddi4+0xe2>
900003ea:	fab2 f382 	clz	r3, r2
900003ee:	b143      	cbz	r3, 90000402 <__udivmoddi4+0x2e>
900003f0:	fa02 fc03 	lsl.w	ip, r2, r3
900003f4:	f1c3 0220 	rsb	r2, r3, #32
900003f8:	409f      	lsls	r7, r3
900003fa:	fa20 f202 	lsr.w	r2, r0, r2
900003fe:	4317      	orrs	r7, r2
90000400:	409c      	lsls	r4, r3
90000402:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90000406:	fa1f f58c 	uxth.w	r5, ip
9000040a:	fbb7 f1fe 	udiv	r1, r7, lr
9000040e:	0c22      	lsrs	r2, r4, #16
90000410:	fb0e 7711 	mls	r7, lr, r1, r7
90000414:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000418:	fb01 f005 	mul.w	r0, r1, r5
9000041c:	4290      	cmp	r0, r2
9000041e:	d90a      	bls.n	90000436 <__udivmoddi4+0x62>
90000420:	eb1c 0202 	adds.w	r2, ip, r2
90000424:	f101 37ff 	add.w	r7, r1, #4294967295
90000428:	f080 811c 	bcs.w	90000664 <__udivmoddi4+0x290>
9000042c:	4290      	cmp	r0, r2
9000042e:	f240 8119 	bls.w	90000664 <__udivmoddi4+0x290>
90000432:	3902      	subs	r1, #2
90000434:	4462      	add	r2, ip
90000436:	1a12      	subs	r2, r2, r0
90000438:	b2a4      	uxth	r4, r4
9000043a:	fbb2 f0fe 	udiv	r0, r2, lr
9000043e:	fb0e 2210 	mls	r2, lr, r0, r2
90000442:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000446:	fb00 f505 	mul.w	r5, r0, r5
9000044a:	42a5      	cmp	r5, r4
9000044c:	d90a      	bls.n	90000464 <__udivmoddi4+0x90>
9000044e:	eb1c 0404 	adds.w	r4, ip, r4
90000452:	f100 32ff 	add.w	r2, r0, #4294967295
90000456:	f080 8107 	bcs.w	90000668 <__udivmoddi4+0x294>
9000045a:	42a5      	cmp	r5, r4
9000045c:	f240 8104 	bls.w	90000668 <__udivmoddi4+0x294>
90000460:	4464      	add	r4, ip
90000462:	3802      	subs	r0, #2
90000464:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000468:	1b64      	subs	r4, r4, r5
9000046a:	2100      	movs	r1, #0
9000046c:	b11e      	cbz	r6, 90000476 <__udivmoddi4+0xa2>
9000046e:	40dc      	lsrs	r4, r3
90000470:	2300      	movs	r3, #0
90000472:	e9c6 4300 	strd	r4, r3, [r6]
90000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000047a:	428b      	cmp	r3, r1
9000047c:	d908      	bls.n	90000490 <__udivmoddi4+0xbc>
9000047e:	2e00      	cmp	r6, #0
90000480:	f000 80ed 	beq.w	9000065e <__udivmoddi4+0x28a>
90000484:	2100      	movs	r1, #0
90000486:	e9c6 0500 	strd	r0, r5, [r6]
9000048a:	4608      	mov	r0, r1
9000048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000490:	fab3 f183 	clz	r1, r3
90000494:	2900      	cmp	r1, #0
90000496:	d149      	bne.n	9000052c <__udivmoddi4+0x158>
90000498:	42ab      	cmp	r3, r5
9000049a:	d302      	bcc.n	900004a2 <__udivmoddi4+0xce>
9000049c:	4282      	cmp	r2, r0
9000049e:	f200 80f8 	bhi.w	90000692 <__udivmoddi4+0x2be>
900004a2:	1a84      	subs	r4, r0, r2
900004a4:	eb65 0203 	sbc.w	r2, r5, r3
900004a8:	2001      	movs	r0, #1
900004aa:	4617      	mov	r7, r2
900004ac:	2e00      	cmp	r6, #0
900004ae:	d0e2      	beq.n	90000476 <__udivmoddi4+0xa2>
900004b0:	e9c6 4700 	strd	r4, r7, [r6]
900004b4:	e7df      	b.n	90000476 <__udivmoddi4+0xa2>
900004b6:	b902      	cbnz	r2, 900004ba <__udivmoddi4+0xe6>
900004b8:	deff      	udf	#255	; 0xff
900004ba:	fab2 f382 	clz	r3, r2
900004be:	2b00      	cmp	r3, #0
900004c0:	f040 8090 	bne.w	900005e4 <__udivmoddi4+0x210>
900004c4:	1a8a      	subs	r2, r1, r2
900004c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
900004ca:	fa1f fe8c 	uxth.w	lr, ip
900004ce:	2101      	movs	r1, #1
900004d0:	fbb2 f5f7 	udiv	r5, r2, r7
900004d4:	fb07 2015 	mls	r0, r7, r5, r2
900004d8:	0c22      	lsrs	r2, r4, #16
900004da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900004de:	fb0e f005 	mul.w	r0, lr, r5
900004e2:	4290      	cmp	r0, r2
900004e4:	d908      	bls.n	900004f8 <__udivmoddi4+0x124>
900004e6:	eb1c 0202 	adds.w	r2, ip, r2
900004ea:	f105 38ff 	add.w	r8, r5, #4294967295
900004ee:	d202      	bcs.n	900004f6 <__udivmoddi4+0x122>
900004f0:	4290      	cmp	r0, r2
900004f2:	f200 80cb 	bhi.w	9000068c <__udivmoddi4+0x2b8>
900004f6:	4645      	mov	r5, r8
900004f8:	1a12      	subs	r2, r2, r0
900004fa:	b2a4      	uxth	r4, r4
900004fc:	fbb2 f0f7 	udiv	r0, r2, r7
90000500:	fb07 2210 	mls	r2, r7, r0, r2
90000504:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000508:	fb0e fe00 	mul.w	lr, lr, r0
9000050c:	45a6      	cmp	lr, r4
9000050e:	d908      	bls.n	90000522 <__udivmoddi4+0x14e>
90000510:	eb1c 0404 	adds.w	r4, ip, r4
90000514:	f100 32ff 	add.w	r2, r0, #4294967295
90000518:	d202      	bcs.n	90000520 <__udivmoddi4+0x14c>
9000051a:	45a6      	cmp	lr, r4
9000051c:	f200 80bb 	bhi.w	90000696 <__udivmoddi4+0x2c2>
90000520:	4610      	mov	r0, r2
90000522:	eba4 040e 	sub.w	r4, r4, lr
90000526:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
9000052a:	e79f      	b.n	9000046c <__udivmoddi4+0x98>
9000052c:	f1c1 0720 	rsb	r7, r1, #32
90000530:	408b      	lsls	r3, r1
90000532:	fa22 fc07 	lsr.w	ip, r2, r7
90000536:	ea4c 0c03 	orr.w	ip, ip, r3
9000053a:	fa05 f401 	lsl.w	r4, r5, r1
9000053e:	fa20 f307 	lsr.w	r3, r0, r7
90000542:	40fd      	lsrs	r5, r7
90000544:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000548:	4323      	orrs	r3, r4
9000054a:	fbb5 f8f9 	udiv	r8, r5, r9
9000054e:	fa1f fe8c 	uxth.w	lr, ip
90000552:	fb09 5518 	mls	r5, r9, r8, r5
90000556:	0c1c      	lsrs	r4, r3, #16
90000558:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
9000055c:	fb08 f50e 	mul.w	r5, r8, lr
90000560:	42a5      	cmp	r5, r4
90000562:	fa02 f201 	lsl.w	r2, r2, r1
90000566:	fa00 f001 	lsl.w	r0, r0, r1
9000056a:	d90b      	bls.n	90000584 <__udivmoddi4+0x1b0>
9000056c:	eb1c 0404 	adds.w	r4, ip, r4
90000570:	f108 3aff 	add.w	sl, r8, #4294967295
90000574:	f080 8088 	bcs.w	90000688 <__udivmoddi4+0x2b4>
90000578:	42a5      	cmp	r5, r4
9000057a:	f240 8085 	bls.w	90000688 <__udivmoddi4+0x2b4>
9000057e:	f1a8 0802 	sub.w	r8, r8, #2
90000582:	4464      	add	r4, ip
90000584:	1b64      	subs	r4, r4, r5
90000586:	b29d      	uxth	r5, r3
90000588:	fbb4 f3f9 	udiv	r3, r4, r9
9000058c:	fb09 4413 	mls	r4, r9, r3, r4
90000590:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
90000594:	fb03 fe0e 	mul.w	lr, r3, lr
90000598:	45a6      	cmp	lr, r4
9000059a:	d908      	bls.n	900005ae <__udivmoddi4+0x1da>
9000059c:	eb1c 0404 	adds.w	r4, ip, r4
900005a0:	f103 35ff 	add.w	r5, r3, #4294967295
900005a4:	d26c      	bcs.n	90000680 <__udivmoddi4+0x2ac>
900005a6:	45a6      	cmp	lr, r4
900005a8:	d96a      	bls.n	90000680 <__udivmoddi4+0x2ac>
900005aa:	3b02      	subs	r3, #2
900005ac:	4464      	add	r4, ip
900005ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900005b2:	fba3 9502 	umull	r9, r5, r3, r2
900005b6:	eba4 040e 	sub.w	r4, r4, lr
900005ba:	42ac      	cmp	r4, r5
900005bc:	46c8      	mov	r8, r9
900005be:	46ae      	mov	lr, r5
900005c0:	d356      	bcc.n	90000670 <__udivmoddi4+0x29c>
900005c2:	d053      	beq.n	9000066c <__udivmoddi4+0x298>
900005c4:	b156      	cbz	r6, 900005dc <__udivmoddi4+0x208>
900005c6:	ebb0 0208 	subs.w	r2, r0, r8
900005ca:	eb64 040e 	sbc.w	r4, r4, lr
900005ce:	fa04 f707 	lsl.w	r7, r4, r7
900005d2:	40ca      	lsrs	r2, r1
900005d4:	40cc      	lsrs	r4, r1
900005d6:	4317      	orrs	r7, r2
900005d8:	e9c6 7400 	strd	r7, r4, [r6]
900005dc:	4618      	mov	r0, r3
900005de:	2100      	movs	r1, #0
900005e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900005e4:	f1c3 0120 	rsb	r1, r3, #32
900005e8:	fa02 fc03 	lsl.w	ip, r2, r3
900005ec:	fa20 f201 	lsr.w	r2, r0, r1
900005f0:	fa25 f101 	lsr.w	r1, r5, r1
900005f4:	409d      	lsls	r5, r3
900005f6:	432a      	orrs	r2, r5
900005f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
900005fc:	fa1f fe8c 	uxth.w	lr, ip
90000600:	fbb1 f0f7 	udiv	r0, r1, r7
90000604:	fb07 1510 	mls	r5, r7, r0, r1
90000608:	0c11      	lsrs	r1, r2, #16
9000060a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
9000060e:	fb00 f50e 	mul.w	r5, r0, lr
90000612:	428d      	cmp	r5, r1
90000614:	fa04 f403 	lsl.w	r4, r4, r3
90000618:	d908      	bls.n	9000062c <__udivmoddi4+0x258>
9000061a:	eb1c 0101 	adds.w	r1, ip, r1
9000061e:	f100 38ff 	add.w	r8, r0, #4294967295
90000622:	d22f      	bcs.n	90000684 <__udivmoddi4+0x2b0>
90000624:	428d      	cmp	r5, r1
90000626:	d92d      	bls.n	90000684 <__udivmoddi4+0x2b0>
90000628:	3802      	subs	r0, #2
9000062a:	4461      	add	r1, ip
9000062c:	1b49      	subs	r1, r1, r5
9000062e:	b292      	uxth	r2, r2
90000630:	fbb1 f5f7 	udiv	r5, r1, r7
90000634:	fb07 1115 	mls	r1, r7, r5, r1
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	fb05 f10e 	mul.w	r1, r5, lr
90000640:	4291      	cmp	r1, r2
90000642:	d908      	bls.n	90000656 <__udivmoddi4+0x282>
90000644:	eb1c 0202 	adds.w	r2, ip, r2
90000648:	f105 38ff 	add.w	r8, r5, #4294967295
9000064c:	d216      	bcs.n	9000067c <__udivmoddi4+0x2a8>
9000064e:	4291      	cmp	r1, r2
90000650:	d914      	bls.n	9000067c <__udivmoddi4+0x2a8>
90000652:	3d02      	subs	r5, #2
90000654:	4462      	add	r2, ip
90000656:	1a52      	subs	r2, r2, r1
90000658:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
9000065c:	e738      	b.n	900004d0 <__udivmoddi4+0xfc>
9000065e:	4631      	mov	r1, r6
90000660:	4630      	mov	r0, r6
90000662:	e708      	b.n	90000476 <__udivmoddi4+0xa2>
90000664:	4639      	mov	r1, r7
90000666:	e6e6      	b.n	90000436 <__udivmoddi4+0x62>
90000668:	4610      	mov	r0, r2
9000066a:	e6fb      	b.n	90000464 <__udivmoddi4+0x90>
9000066c:	4548      	cmp	r0, r9
9000066e:	d2a9      	bcs.n	900005c4 <__udivmoddi4+0x1f0>
90000670:	ebb9 0802 	subs.w	r8, r9, r2
90000674:	eb65 0e0c 	sbc.w	lr, r5, ip
90000678:	3b01      	subs	r3, #1
9000067a:	e7a3      	b.n	900005c4 <__udivmoddi4+0x1f0>
9000067c:	4645      	mov	r5, r8
9000067e:	e7ea      	b.n	90000656 <__udivmoddi4+0x282>
90000680:	462b      	mov	r3, r5
90000682:	e794      	b.n	900005ae <__udivmoddi4+0x1da>
90000684:	4640      	mov	r0, r8
90000686:	e7d1      	b.n	9000062c <__udivmoddi4+0x258>
90000688:	46d0      	mov	r8, sl
9000068a:	e77b      	b.n	90000584 <__udivmoddi4+0x1b0>
9000068c:	3d02      	subs	r5, #2
9000068e:	4462      	add	r2, ip
90000690:	e732      	b.n	900004f8 <__udivmoddi4+0x124>
90000692:	4608      	mov	r0, r1
90000694:	e70a      	b.n	900004ac <__udivmoddi4+0xd8>
90000696:	4464      	add	r4, ip
90000698:	3802      	subs	r0, #2
9000069a:	e742      	b.n	90000522 <__udivmoddi4+0x14e>

9000069c <__aeabi_idiv0>:
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_init>:
900006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900006a2:	bf00      	nop
900006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
900006a6:	bc08      	pop	{r3}
900006a8:	469e      	mov	lr, r3
900006aa:	4770      	bx	lr

900006ac <_fini>:
900006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900006ae:	bf00      	nop
900006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900006b2:	bc08      	pop	{r3}
900006b4:	469e      	mov	lr, r3
900006b6:	4770      	bx	lr

Disassembly of section .text:

24000000 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
24000000:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
24000002:	2400      	movs	r4, #0
{
24000004:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
24000006:	221c      	movs	r2, #28
24000008:	4621      	mov	r1, r4
2400000a:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
2400000c:	9402      	str	r4, [sp, #8]
2400000e:	e9cd 4400 	strd	r4, r4, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
24000012:	f01a fa67 	bl	2401a4e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
24000016:	481c      	ldr	r0, [pc, #112]	; (24000088 <MX_ADC1_Init+0x88>)
24000018:	4b1c      	ldr	r3, [pc, #112]	; (2400008c <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
2400001a:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
2400001c:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
2400001e:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
24000020:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
24000024:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
24000028:	2304      	movs	r3, #4
2400002a:	6103      	str	r3, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
2400002c:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
2400002e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
24000032:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
24000034:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
24000038:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
2400003c:	f001 fc86 	bl	2400194c <HAL_ADC_Init>
24000040:	b108      	cbz	r0, 24000046 <MX_ADC1_Init+0x46>
  {
    Error_Handler();
24000042:	f000 fd99 	bl	24000b78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
24000046:	4669      	mov	r1, sp
24000048:	480f      	ldr	r0, [pc, #60]	; (24000088 <MX_ADC1_Init+0x88>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
2400004a:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
2400004c:	f001 fd6c 	bl	24001b28 <HAL_ADCEx_MultiModeConfigChannel>
24000050:	b108      	cbz	r0, 24000056 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
24000052:	f000 fd91 	bl	24000b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
  sConfig.Rank = ADC_REGULAR_RANK_1;
24000056:	2306      	movs	r3, #6
24000058:	4a0d      	ldr	r2, [pc, #52]	; (24000090 <MX_ADC1_Init+0x90>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
2400005a:	2101      	movs	r1, #1
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
2400005c:	2004      	movs	r0, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
2400005e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
24000062:	f240 73ff 	movw	r3, #2047	; 0x7ff
24000066:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sConfig.Offset = 0;
2400006a:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
2400006c:	a903      	add	r1, sp, #12
  sConfig.Offset = 0;
2400006e:	e9cd 0307 	strd	r0, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
24000072:	4805      	ldr	r0, [pc, #20]	; (24000088 <MX_ADC1_Init+0x88>)
  sConfig.OffsetSignedSaturation = DISABLE;
24000074:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
24000078:	f001 f958 	bl	2400132c <HAL_ADC_ConfigChannel>
2400007c:	b108      	cbz	r0, 24000082 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
2400007e:	f000 fd7b 	bl	24000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
24000082:	b00a      	add	sp, #40	; 0x28
24000084:	bd10      	pop	{r4, pc}
24000086:	bf00      	nop
24000088:	2401a8fc 	.word	0x2401a8fc
2400008c:	40022000 	.word	0x40022000
24000090:	43210000 	.word	0x43210000

24000094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
24000094:	b530      	push	{r4, r5, lr}
24000096:	b0b9      	sub	sp, #228	; 0xe4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000098:	25c0      	movs	r5, #192	; 0xc0
{
2400009a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400009c:	2214      	movs	r2, #20
2400009e:	2100      	movs	r1, #0
240000a0:	a803      	add	r0, sp, #12
240000a2:	f01a fa1f 	bl	2401a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240000a6:	462a      	mov	r2, r5
240000a8:	2100      	movs	r1, #0
240000aa:	a808      	add	r0, sp, #32
240000ac:	f01a fa1a 	bl	2401a4e4 <memset>
  if(adcHandle->Instance==ADC1)
240000b0:	6822      	ldr	r2, [r4, #0]
240000b2:	4b22      	ldr	r3, [pc, #136]	; (2400013c <HAL_ADC_MspInit+0xa8>)
240000b4:	429a      	cmp	r2, r3
240000b6:	d13f      	bne.n	24000138 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
240000b8:	2300      	movs	r3, #0
240000ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    PeriphClkInitStruct.PLL2.PLL2M = 1;
    PeriphClkInitStruct.PLL2.PLL2N = 8;
240000be:	2101      	movs	r1, #1
    PeriphClkInitStruct.PLL2.PLL2P = 3;
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
240000c0:	2003      	movs	r0, #3
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
240000c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
240000c6:	2308      	movs	r3, #8
240000c8:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
240000cc:	2302      	movs	r3, #2
240000ce:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240000d2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
240000d4:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240000d8:	f003 fd18 	bl	24003b0c <HAL_RCCEx_PeriphCLKConfig>
240000dc:	b108      	cbz	r0, 240000e2 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
240000de:	f000 fd4b 	bl	24000b78 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
240000e2:	4b17      	ldr	r3, [pc, #92]	; (24000140 <HAL_ADC_MspInit+0xac>)
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240000e4:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240000e6:	a903      	add	r1, sp, #12
240000e8:	4816      	ldr	r0, [pc, #88]	; (24000144 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
240000ea:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
240000ee:	f042 0220 	orr.w	r2, r2, #32
240000f2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
240000f6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
240000fa:	f002 0220 	and.w	r2, r2, #32
240000fe:	9201      	str	r2, [sp, #4]
24000100:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000102:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000106:	f042 0201 	orr.w	r2, r2, #1
2400010a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2400010e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000110:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000114:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000116:	f003 0301 	and.w	r3, r3, #1
2400011a:	9302      	str	r3, [sp, #8]
2400011c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2400011e:	2303      	movs	r3, #3
24000120:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000124:	f002 fcae 	bl	24002a84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
24000128:	2012      	movs	r0, #18
2400012a:	4622      	mov	r2, r4
2400012c:	4621      	mov	r1, r4
2400012e:	f001 fd71 	bl	24001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24000132:	2012      	movs	r0, #18
24000134:	f001 fda0 	bl	24001c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
24000138:	b039      	add	sp, #228	; 0xe4
2400013a:	bd30      	pop	{r4, r5, pc}
2400013c:	40022000 	.word	0x40022000
24000140:	58024400 	.word	0x58024400
24000144:	58020000 	.word	0x58020000

24000148 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
24000148:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
2400014a:	480f      	ldr	r0, [pc, #60]	; (24000188 <MX_DMA2D_Init+0x40>)
  hdma2d.Init.Mode = DMA2D_M2M;
2400014c:	2300      	movs	r3, #0
2400014e:	4a0f      	ldr	r2, [pc, #60]	; (2400018c <MX_DMA2D_Init+0x44>)
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
24000150:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma2d.Init.Mode = DMA2D_M2M;
24000152:	e9c0 2300 	strd	r2, r3, [r0]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
24000156:	2202      	movs	r2, #2
  hdma2d.LayerCfg[1].InputAlpha = 0;
24000158:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
2400015c:	e9c0 3211 	strd	r3, r2, [r0, #68]	; 0x44
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
24000160:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma2d.Init.OutputOffset = 0;
24000164:	e9c0 2302 	strd	r2, r3, [r0, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
24000168:	f001 fe7f 	bl	24001e6a <HAL_DMA2D_Init>
2400016c:	b108      	cbz	r0, 24000172 <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
2400016e:	f000 fd03 	bl	24000b78 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
24000172:	2101      	movs	r1, #1
24000174:	4804      	ldr	r0, [pc, #16]	; (24000188 <MX_DMA2D_Init+0x40>)
24000176:	f001 ff4b 	bl	24002010 <HAL_DMA2D_ConfigLayer>
2400017a:	b118      	cbz	r0, 24000184 <MX_DMA2D_Init+0x3c>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
2400017c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24000180:	f000 bcfa 	b.w	24000b78 <Error_Handler>
}
24000184:	bd08      	pop	{r3, pc}
24000186:	bf00      	nop
24000188:	2401a960 	.word	0x2401a960
2400018c:	52001000 	.word	0x52001000

24000190 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
24000190:	6802      	ldr	r2, [r0, #0]
{
24000192:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
24000194:	4b08      	ldr	r3, [pc, #32]	; (240001b8 <HAL_DMA2D_MspInit+0x28>)
24000196:	429a      	cmp	r2, r3
24000198:	d10c      	bne.n	240001b4 <HAL_DMA2D_MspInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
2400019a:	4b08      	ldr	r3, [pc, #32]	; (240001bc <HAL_DMA2D_MspInit+0x2c>)
2400019c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
240001a0:	f042 0210 	orr.w	r2, r2, #16
240001a4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
240001a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240001ac:	f003 0310 	and.w	r3, r3, #16
240001b0:	9301      	str	r3, [sp, #4]
240001b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
240001b4:	b002      	add	sp, #8
240001b6:	4770      	bx	lr
240001b8:	52001000 	.word	0x52001000
240001bc:	58024400 	.word	0x58024400

240001c0 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
240001c0:	4816      	ldr	r0, [pc, #88]	; (2400021c <MX_FDCAN2_Init+0x5c>)
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 100;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
240001c2:	2201      	movs	r2, #1
240001c4:	2164      	movs	r1, #100	; 0x64
  hfdcan2.Init.NominalTimeSeg1 = 8;
  hfdcan2.Init.NominalTimeSeg2 = 3;
240001c6:	f04f 0c08 	mov.w	ip, #8
{
240001ca:	b508      	push	{r3, lr}
  hfdcan2.Instance = FDCAN2;
240001cc:	4b14      	ldr	r3, [pc, #80]	; (24000220 <MX_FDCAN2_Init+0x60>)
  hfdcan2.Init.NominalSyncJumpWidth = 1;
240001ce:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 3;
240001d2:	2103      	movs	r1, #3
  hfdcan2.Instance = FDCAN2;
240001d4:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
240001d6:	2300      	movs	r3, #0
  hfdcan2.Init.NominalTimeSeg2 = 3;
240001d8:	e9c0 c107 	strd	ip, r1, [r0, #28]
  hfdcan2.Init.DataTimeSeg2 = 1;
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
240001dc:	2104      	movs	r1, #4
  hfdcan2.Init.AutoRetransmission = DISABLE;
240001de:	8203      	strh	r3, [r0, #16]
  hfdcan2.Init.ProtocolException = DISABLE;
240001e0:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
240001e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan2.Init.DataSyncJumpWidth = 1;
240001e6:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg2 = 1;
240001ea:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
240001ee:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
240001f2:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
240001f6:	e9c0 1311 	strd	r1, r3, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxBuffersNbr = 0;
240001fa:	e9c0 1313 	strd	r1, r3, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.TxEventsNbr = 0;
240001fe:	e9c0 1315 	strd	r1, r3, [r0, #84]	; 0x54
  hfdcan2.Init.TxBuffersNbr = 0;
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
24000202:	e9c0 3217 	strd	r3, r2, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
24000206:	e9c0 3119 	strd	r3, r1, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
2400020a:	f001 ff9f 	bl	2400214c <HAL_FDCAN_Init>
2400020e:	b118      	cbz	r0, 24000218 <MX_FDCAN2_Init+0x58>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
24000210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24000214:	f000 bcb0 	b.w	24000b78 <Error_Handler>
}
24000218:	bd08      	pop	{r3, pc}
2400021a:	bf00      	nop
2400021c:	2401a9c8 	.word	0x2401a9c8
24000220:	4000a400 	.word	0x4000a400

24000224 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
24000224:	b510      	push	{r4, lr}
24000226:	b0b8      	sub	sp, #224	; 0xe0
24000228:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400022a:	2214      	movs	r2, #20
2400022c:	2100      	movs	r1, #0
2400022e:	a803      	add	r0, sp, #12
24000230:	f01a f958 	bl	2401a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000234:	22c0      	movs	r2, #192	; 0xc0
24000236:	2100      	movs	r1, #0
24000238:	a808      	add	r0, sp, #32
2400023a:	f01a f953 	bl	2401a4e4 <memset>
  if(fdcanHandle->Instance==FDCAN2)
2400023e:	6822      	ldr	r2, [r4, #0]
24000240:	4b1f      	ldr	r3, [pc, #124]	; (240002c0 <HAL_FDCAN_MspInit+0x9c>)
24000242:	429a      	cmp	r2, r3
24000244:	d139      	bne.n	240002ba <HAL_FDCAN_MspInit+0x96>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
24000246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
2400024a:	2300      	movs	r3, #0
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400024c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
2400024e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000252:	f003 fc5b 	bl	24003b0c <HAL_RCCEx_PeriphCLKConfig>
24000256:	b108      	cbz	r0, 2400025c <HAL_FDCAN_MspInit+0x38>
    {
      Error_Handler();
24000258:	f000 fc8e 	bl	24000b78 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
2400025c:	4b19      	ldr	r3, [pc, #100]	; (240002c4 <HAL_FDCAN_MspInit+0xa0>)
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400025e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000260:	a903      	add	r1, sp, #12
24000262:	4819      	ldr	r0, [pc, #100]	; (240002c8 <HAL_FDCAN_MspInit+0xa4>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
24000264:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
24000268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400026c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
24000270:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
24000274:	f402 7280 	and.w	r2, r2, #256	; 0x100
24000278:	9201      	str	r2, [sp, #4]
2400027a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400027c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000280:	f042 0202 	orr.w	r2, r2, #2
24000284:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000288:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400028c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24000290:	f003 0302 	and.w	r3, r3, #2
24000294:	9302      	str	r3, [sp, #8]
24000296:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000298:	2302      	movs	r3, #2
2400029a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
2400029e:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240002a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
240002a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240002a6:	f002 fbed 	bl	24002a84 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
240002aa:	2014      	movs	r0, #20
240002ac:	4622      	mov	r2, r4
240002ae:	4621      	mov	r1, r4
240002b0:	f001 fcb0 	bl	24001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
240002b4:	2014      	movs	r0, #20
240002b6:	f001 fcdf 	bl	24001c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
240002ba:	b038      	add	sp, #224	; 0xe0
240002bc:	bd10      	pop	{r4, pc}
240002be:	bf00      	nop
240002c0:	4000a400 	.word	0x4000a400
240002c4:	58024400 	.word	0x58024400
240002c8:	58020400 	.word	0x58020400

240002cc <MX_GPIO_Init>:
     PD12   ------> OCTOSPIM_P1_IO1
     PD13   ------> OCTOSPIM_P1_IO3
     PB6   ------> OCTOSPIM_P1_NCS
*/
void MX_GPIO_Init(void)
{
240002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240002d0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240002d2:	2214      	movs	r2, #20
240002d4:	2100      	movs	r1, #0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
240002d6:	f8df b198 	ldr.w	fp, [pc, #408]	; 24000470 <MX_GPIO_Init+0x1a4>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240002da:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AO_CS_Pin|DO_CS_Pin|DI_CS_Pin, GPIO_PIN_RESET);
240002dc:	f8df a194 	ldr.w	sl, [pc, #404]	; 24000474 <MX_GPIO_Init+0x1a8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240002e0:	f01a f900 	bl	2401a4e4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
240002e4:	4b60      	ldr	r3, [pc, #384]	; (24000468 <MX_GPIO_Init+0x19c>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
240002e6:	2104      	movs	r1, #4

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BACK_LIGHT_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
240002e8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 24000478 <MX_GPIO_Init+0x1ac>
  __HAL_RCC_GPIOE_CLK_ENABLE();
240002ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240002f0:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240002f2:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240002f4:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
240002f6:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240002fa:	f04f 0909 	mov.w	r9, #9
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240002fe:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000300:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000304:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000308:	f002 0210 	and.w	r2, r2, #16
2400030c:	9201      	str	r2, [sp, #4]
2400030e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000310:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24000318:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
2400031c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000320:	f002 0280 	and.w	r2, r2, #128	; 0x80
24000324:	9202      	str	r2, [sp, #8]
24000326:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000328:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
2400032c:	f042 0204 	orr.w	r2, r2, #4
24000330:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000334:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000338:	f002 0204 	and.w	r2, r2, #4
2400033c:	9203      	str	r2, [sp, #12]
2400033e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000340:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000344:	f042 0201 	orr.w	r2, r2, #1
24000348:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
2400034c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000350:	f002 0201 	and.w	r2, r2, #1
24000354:	9204      	str	r2, [sp, #16]
24000356:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000358:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
2400035c:	f042 0202 	orr.w	r2, r2, #2
24000360:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000364:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000368:	f002 0202 	and.w	r2, r2, #2
2400036c:	9205      	str	r2, [sp, #20]
2400036e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24000370:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000374:	f042 0208 	orr.w	r2, r2, #8
24000378:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
2400037c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
2400037e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24000382:	f003 0308 	and.w	r3, r3, #8
24000386:	9306      	str	r3, [sp, #24]
24000388:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
2400038a:	4b38      	ldr	r3, [pc, #224]	; (2400046c <MX_GPIO_Init+0x1a0>)
2400038c:	4618      	mov	r0, r3
2400038e:	f002 fc63 	bl	24002c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
24000392:	4658      	mov	r0, fp
24000394:	2200      	movs	r2, #0
24000396:	2120      	movs	r1, #32
24000398:	f002 fc5e 	bl	24002c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, AO_CS_Pin|DO_CS_Pin|DI_CS_Pin, GPIO_PIN_RESET);
2400039c:	4650      	mov	r0, sl
2400039e:	2200      	movs	r2, #0
240003a0:	f240 2103 	movw	r1, #515	; 0x203
240003a4:	f002 fc58 	bl	24002c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_BACK_LIGHT_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
240003a8:	4640      	mov	r0, r8
240003aa:	2200      	movs	r2, #0
240003ac:	f248 0130 	movw	r1, #32816	; 0x8030
240003b0:	f002 fc52 	bl	24002c58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240003b4:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240003b6:	a907      	add	r1, sp, #28
240003b8:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240003ba:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240003be:	e9cd 2607 	strd	r2, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240003c2:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240003c6:	f002 fb5d 	bl	24002a84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
240003ca:	4b28      	ldr	r3, [pc, #160]	; (2400046c <MX_GPIO_Init+0x1a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240003cc:	2204      	movs	r2, #4
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
240003ce:	a907      	add	r1, sp, #28
240003d0:	4618      	mov	r0, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240003d2:	e9cd 2707 	strd	r2, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240003d6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
240003da:	f002 fb53 	bl	24002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzz_Pin;
240003de:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
240003e0:	a907      	add	r1, sp, #28
240003e2:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240003e4:	f5ab 6b80 	sub.w	fp, fp, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240003e8:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240003ec:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
240003f0:	f002 fb48 	bl	24002a84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
240003f4:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240003f6:	a907      	add	r1, sp, #28
240003f8:	4658      	mov	r0, fp
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240003fa:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240003fe:	e9cd 2607 	strd	r2, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000402:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000406:	f002 fb3d 	bl	24002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AO_CS_Pin|DO_CS_Pin|DI_CS_Pin;
2400040a:	f240 2303 	movw	r3, #515	; 0x203
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400040e:	a907      	add	r1, sp, #28
24000410:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24000412:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000416:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400041a:	f002 fb33 	bl	24002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
2400041e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000422:	a907      	add	r1, sp, #28
24000424:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24000426:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400042a:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400042e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000432:	f002 fb27 	bl	24002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_BACK_LIGHT_Pin|LED1_Pin|LED2_Pin;
24000436:	f248 0330 	movw	r3, #32816	; 0x8030
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400043a:	a907      	add	r1, sp, #28
2400043c:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2400043e:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000442:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000446:	f002 fb1d 	bl	24002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
2400044a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400044c:	a907      	add	r1, sp, #28
2400044e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000450:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
24000454:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000456:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
2400045a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400045c:	f002 fb12 	bl	24002a84 <HAL_GPIO_Init>

}
24000460:	b00d      	add	sp, #52	; 0x34
24000462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24000466:	bf00      	nop
24000468:	58024400 	.word	0x58024400
2400046c:	58020000 	.word	0x58020000
24000470:	58020800 	.word	0x58020800
24000474:	58021000 	.word	0x58021000
24000478:	58020c00 	.word	0x58020c00

2400047c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
2400047c:	b510      	push	{r4, lr}
2400047e:	b08e      	sub	sp, #56	; 0x38

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
24000480:	2234      	movs	r2, #52	; 0x34
24000482:	2100      	movs	r1, #0

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
24000484:	2400      	movs	r4, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
24000486:	a801      	add	r0, sp, #4
24000488:	f01a f82c 	bl	2401a4e4 <memset>
  hltdc.Instance = LTDC;
2400048c:	4822      	ldr	r0, [pc, #136]	; (24000518 <MX_LTDC_Init+0x9c>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
2400048e:	4b23      	ldr	r3, [pc, #140]	; (2400051c <MX_LTDC_Init+0xa0>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
  hltdc.Init.VerticalSync = 3;
24000490:	f04f 0c07 	mov.w	ip, #7
  hltdc.Init.AccumulatedHBP = 14;
  hltdc.Init.AccumulatedVBP = 5;
24000494:	f04f 0e0e 	mov.w	lr, #14
  hltdc.Init.AccumulatedActiveW = 814;
  hltdc.Init.AccumulatedActiveH = 485;
24000498:	f240 322e 	movw	r2, #814	; 0x32e
  hltdc.Init.TotalWidth = 820;
  hltdc.Init.TotalHeigh = 487;
2400049c:	f44f 714d 	mov.w	r1, #820	; 0x334
  hltdc.Init.Backcolor.Blue = 0;
240004a0:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
240004a2:	6104      	str	r4, [r0, #16]
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
240004a4:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
240004a8:	e9c0 3400 	strd	r3, r4, [r0]
  hltdc.Init.VerticalSync = 3;
240004ac:	2303      	movs	r3, #3
240004ae:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hltdc.Init.AccumulatedVBP = 5;
240004b2:	2305      	movs	r3, #5
240004b4:	e9c0 e307 	strd	lr, r3, [r0, #28]
  hltdc.Init.AccumulatedActiveH = 485;
240004b8:	f240 13e5 	movw	r3, #485	; 0x1e5
240004bc:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  hltdc.Init.TotalHeigh = 487;
240004c0:	f240 13e7 	movw	r3, #487	; 0x1e7
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
240004c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc.Init.TotalHeigh = 487;
240004c8:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
240004cc:	f002 fc54 	bl	24002d78 <HAL_LTDC_Init>
240004d0:	b108      	cbz	r0, 240004d6 <MX_LTDC_Init+0x5a>
  {
    Error_Handler();
240004d2:	f000 fb51 	bl	24000b78 <Error_Handler>
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 100;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 100;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
  pLayerCfg.Alpha = 255;
240004d6:	2102      	movs	r1, #2
240004d8:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240004da:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 100;
240004de:	2364      	movs	r3, #100	; 0x64
  pLayerCfg.WindowX0 = 0;
240004e0:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY1 = 100;
240004e2:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
240004e4:	9407      	str	r4, [sp, #28]
  pLayerCfg.FBStartAdress = 0;
  pLayerCfg.ImageWidth = 100;
  pLayerCfg.ImageHeight = 100;
240004e6:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
240004e8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
240004ec:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  pLayerCfg.Alpha = 255;
240004f0:	e9cd 1205 	strd	r1, r2, [sp, #20]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240004f4:	2205      	movs	r2, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
240004f6:	a901      	add	r1, sp, #4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240004f8:	e9cd 0208 	strd	r0, r2, [sp, #32]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
240004fc:	2200      	movs	r2, #0
240004fe:	4806      	ldr	r0, [pc, #24]	; (24000518 <MX_LTDC_Init+0x9c>)
  pLayerCfg.WindowY0 = 0;
24000500:	e9cd 3402 	strd	r3, r4, [sp, #8]
  pLayerCfg.ImageWidth = 100;
24000504:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
24000508:	f002 fca2 	bl	24002e50 <HAL_LTDC_ConfigLayer>
2400050c:	b108      	cbz	r0, 24000512 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
2400050e:	f000 fb33 	bl	24000b78 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
24000512:	b00e      	add	sp, #56	; 0x38
24000514:	bd10      	pop	{r4, pc}
24000516:	bf00      	nop
24000518:	2401aa68 	.word	0x2401aa68
2400051c:	50001000 	.word	0x50001000

24000520 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
24000520:	b570      	push	{r4, r5, r6, lr}
24000522:	b0bc      	sub	sp, #240	; 0xf0
24000524:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000526:	2214      	movs	r2, #20
24000528:	2100      	movs	r1, #0
2400052a:	a807      	add	r0, sp, #28
2400052c:	f019 ffda 	bl	2401a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000530:	22c0      	movs	r2, #192	; 0xc0
24000532:	2100      	movs	r1, #0
24000534:	a80c      	add	r0, sp, #48	; 0x30
24000536:	f019 ffd5 	bl	2401a4e4 <memset>
  if(ltdcHandle->Instance==LTDC)
2400053a:	6822      	ldr	r2, [r4, #0]
2400053c:	4b54      	ldr	r3, [pc, #336]	; (24000690 <HAL_LTDC_MspInit+0x170>)
2400053e:	429a      	cmp	r2, r3
24000540:	f040 80a3 	bne.w	2400068a <HAL_LTDC_MspInit+0x16a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
24000544:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
24000548:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 25;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 16;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
2400054a:	2110      	movs	r1, #16
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400054c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
2400054e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3N = 25;
24000552:	2319      	movs	r3, #25
24000554:	2201      	movs	r2, #1
24000556:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
2400055a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
2400055c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24000560:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24000564:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000568:	f003 fad0 	bl	24003b0c <HAL_RCCEx_PeriphCLKConfig>
2400056c:	b108      	cbz	r0, 24000572 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
2400056e:	f000 fb03 	bl	24000b78 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
24000572:	4b48      	ldr	r3, [pc, #288]	; (24000694 <HAL_LTDC_MspInit+0x174>)
    PD6     ------> LTDC_B2
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000574:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000576:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24000578:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
2400057a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400057e:	a907      	add	r1, sp, #28
24000580:	4845      	ldr	r0, [pc, #276]	; (24000698 <HAL_LTDC_MspInit+0x178>)
    __HAL_RCC_LTDC_CLK_ENABLE();
24000582:	f042 0208 	orr.w	r2, r2, #8
24000586:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
2400058a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
2400058e:	f002 0208 	and.w	r2, r2, #8
24000592:	9201      	str	r2, [sp, #4]
24000594:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24000596:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
2400059a:	f042 0204 	orr.w	r2, r2, #4
2400059e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
240005a2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005a6:	f002 0204 	and.w	r2, r2, #4
240005aa:	9202      	str	r2, [sp, #8]
240005ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240005ae:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005b2:	f042 0201 	orr.w	r2, r2, #1
240005b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
240005ba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005be:	f002 0201 	and.w	r2, r2, #1
240005c2:	9203      	str	r2, [sp, #12]
240005c4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240005c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005ca:	f042 0202 	orr.w	r2, r2, #2
240005ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
240005d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005d6:	f002 0202 	and.w	r2, r2, #2
240005da:	9204      	str	r2, [sp, #16]
240005dc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
240005de:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005e2:	f042 0210 	orr.w	r2, r2, #16
240005e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
240005ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005ee:	f002 0210 	and.w	r2, r2, #16
240005f2:	9205      	str	r2, [sp, #20]
240005f4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240005f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
240005fa:	f042 0208 	orr.w	r2, r2, #8
240005fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24000606:	f003 0308 	and.w	r3, r3, #8
2400060a:	9306      	str	r3, [sp, #24]
2400060c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400060e:	23c1      	movs	r3, #193	; 0xc1
24000610:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000614:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24000618:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400061a:	f002 fa33 	bl	24002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
2400061e:	23ea      	movs	r3, #234	; 0xea
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000620:	a907      	add	r1, sp, #28
24000622:	481e      	ldr	r0, [pc, #120]	; (2400069c <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24000624:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000626:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400062a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400062e:	f002 fa29 	bl	24002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
24000632:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000634:	a907      	add	r1, sp, #28
24000636:	481a      	ldr	r0, [pc, #104]	; (240006a0 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000638:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
2400063c:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400063e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24000642:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000644:	f002 fa1e 	bl	24002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
24000648:	f44f 4378 	mov.w	r3, #63488	; 0xf800
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400064c:	a907      	add	r1, sp, #28
2400064e:	4815      	ldr	r0, [pc, #84]	; (240006a4 <HAL_LTDC_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24000650:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000652:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000656:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400065a:	f002 fa13 	bl	24002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
2400065e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000662:	a907      	add	r1, sp, #28
24000664:	480e      	ldr	r0, [pc, #56]	; (240006a0 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24000666:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000668:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400066c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000670:	f002 fa08 	bl	24002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
24000674:	f44f 6389 	mov.w	r3, #1096	; 0x448
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000678:	a907      	add	r1, sp, #28
2400067a:	480b      	ldr	r0, [pc, #44]	; (240006a8 <HAL_LTDC_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2400067c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400067e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000682:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000686:	f002 f9fd 	bl	24002a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
2400068a:	b03c      	add	sp, #240	; 0xf0
2400068c:	bd70      	pop	{r4, r5, r6, pc}
2400068e:	bf00      	nop
24000690:	50001000 	.word	0x50001000
24000694:	58024400 	.word	0x58024400
24000698:	58020800 	.word	0x58020800
2400069c:	58020000 	.word	0x58020000
240006a0:	58020400 	.word	0x58020400
240006a4:	58021000 	.word	0x58021000
240006a8:	58020c00 	.word	0x58020c00

240006ac <LCD_on_task>:

}

static void LCD_on_task(lv_task_t* task)
{
	HAL_GPIO_WritePin(LED_BACK_LIGHT_GPIO_Port, LED_BACK_LIGHT_Pin, GPIO_PIN_SET);
240006ac:	2201      	movs	r2, #1
240006ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
240006b2:	4801      	ldr	r0, [pc, #4]	; (240006b8 <LCD_on_task+0xc>)
240006b4:	f002 bad0 	b.w	24002c58 <HAL_GPIO_WritePin>
240006b8:	58020c00 	.word	0x58020c00

240006bc <intro_page_task>:
}

static void intro_page_task(lv_task_t* task)
{
240006bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_scr_load(getMainScreen().window);
240006be:	4668      	mov	r0, sp
240006c0:	f006 fb82 	bl	24006dc8 <getMainScreen>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
240006c4:	9800      	ldr	r0, [sp, #0]
}
240006c6:	b007      	add	sp, #28
240006c8:	f85d eb04 	ldr.w	lr, [sp], #4
240006cc:	f006 bb98 	b.w	24006e00 <lv_disp_load_scr>

240006d0 <lvgl_touch_read>:
{
240006d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	point = touchUpdate();
240006d2:	4668      	mov	r0, sp
{
240006d4:	460c      	mov	r4, r1
	point = touchUpdate();
240006d6:	4d0d      	ldr	r5, [pc, #52]	; (2400070c <lvgl_touch_read+0x3c>)
240006d8:	f019 fe12 	bl	2401a300 <touchUpdate>
240006dc:	9b00      	ldr	r3, [sp, #0]
240006de:	602b      	str	r3, [r5, #0]
240006e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
240006e4:	80ab      	strh	r3, [r5, #4]
    if(getTouchFlag())
240006e6:	f019 fd6f 	bl	2401a1c8 <getTouchFlag>
240006ea:	4a09      	ldr	r2, [pc, #36]	; (24000710 <lvgl_touch_read+0x40>)
240006ec:	4b09      	ldr	r3, [pc, #36]	; (24000714 <lvgl_touch_read+0x44>)
240006ee:	b120      	cbz	r0, 240006fa <lvgl_touch_read+0x2a>
		last_x = point.x;
240006f0:	8829      	ldrh	r1, [r5, #0]
240006f2:	2001      	movs	r0, #1
240006f4:	8011      	strh	r1, [r2, #0]
		last_y = point.y;
240006f6:	8869      	ldrh	r1, [r5, #2]
240006f8:	8019      	strh	r1, [r3, #0]
	data->point.x = last_x;
240006fa:	8812      	ldrh	r2, [r2, #0]
	data->point.y = last_y;
240006fc:	881b      	ldrh	r3, [r3, #0]
    	data->state = LV_INDEV_STATE_PR;
240006fe:	73a0      	strb	r0, [r4, #14]
}
24000700:	2000      	movs	r0, #0
	data->point.x = last_x;
24000702:	8022      	strh	r2, [r4, #0]
	data->point.y = last_y;
24000704:	8063      	strh	r3, [r4, #2]
}
24000706:	b003      	add	sp, #12
24000708:	bd30      	pop	{r4, r5, pc}
2400070a:	bf00      	nop
2400070c:	2402d7b8 	.word	0x2402d7b8
24000710:	2402d7b4 	.word	0x2402d7b4
24000714:	2402d7b6 	.word	0x2402d7b6

24000718 <my_flush_cb>:
{
24000718:	460b      	mov	r3, r1
2400071a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int height = area->y2 - area->y1 + 1;
2400071c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
{
24000720:	4605      	mov	r5, r0
24000722:	4611      	mov	r1, r2
	int width = area->x2 - area->x1 + 1;
24000724:	f9b3 0000 	ldrsh.w	r0, [r3]
	int height = area->y2 - area->y1 + 1;
24000728:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	uint32_t offset = (DISPLAY_WIDTH * area->y1 + area->x1)/pixelSize;
2400072c:	f44f 7648 	mov.w	r6, #800	; 0x320
	int width = area->x2 - area->x1 + 1;
24000730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	uint32_t offset = (DISPLAY_WIDTH * area->y1 + area->x1)/pixelSize;
24000734:	fb12 0c06 	smlabb	ip, r2, r6, r0
	int height = area->y2 - area->y1 + 1;
24000738:	1aa4      	subs	r4, r4, r2
	int width = area->x2 - area->x1 + 1;
2400073a:	1a1b      	subs	r3, r3, r0
	hdma2d.Instance->OOR = DISPLAY_WIDTH - width; // set row offset
2400073c:	4e0c      	ldr	r6, [pc, #48]	; (24000770 <my_flush_cb+0x58>)
	uint32_t destinationAddress = LCD_MemoryAdd + offset; // final address;
2400073e:	480d      	ldr	r0, [pc, #52]	; (24000774 <my_flush_cb+0x5c>)
	int height = area->y2 - area->y1 + 1;
24000740:	3401      	adds	r4, #1
	int width = area->x2 - area->x1 + 1;
24000742:	3301      	adds	r3, #1
	hdma2d.Instance->OOR = DISPLAY_WIDTH - width; // set row offset
24000744:	6832      	ldr	r2, [r6, #0]
	uint32_t destinationAddress = LCD_MemoryAdd + offset; // final address;
24000746:	6800      	ldr	r0, [r0, #0]
	hdma2d.Instance->OOR = DISPLAY_WIDTH - width; // set row offset
24000748:	f5c3 7748 	rsb	r7, r3, #800	; 0x320
2400074c:	6417      	str	r7, [r2, #64]	; 0x40
	HAL_DMA2D_Start(&hdma2d , (uint32_t)color_p, destinationAddress, width, height);
2400074e:	eb00 024c 	add.w	r2, r0, ip, lsl #1
24000752:	9400      	str	r4, [sp, #0]
24000754:	4630      	mov	r0, r6
24000756:	f001 fbc5 	bl	24001ee4 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer(&hdma2d, 10); // wait for the transfer to complete
2400075a:	210a      	movs	r1, #10
2400075c:	4630      	mov	r0, r6
2400075e:	f001 fbdb 	bl	24001f18 <HAL_DMA2D_PollForTransfer>
	lv_disp_flush_ready(disp_drv);
24000762:	4628      	mov	r0, r5
}
24000764:	b003      	add	sp, #12
24000766:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);
2400076a:	f00e bb73 	b.w	2400ee54 <lv_disp_flush_ready>
2400076e:	bf00      	nop
24000770:	2401a960 	.word	0x2401a960
24000774:	2401ab10 	.word	0x2401ab10

24000778 <lv_screen_update_task>:
{
24000778:	b500      	push	{lr}
2400077a:	b09d      	sub	sp, #116	; 0x74
	if(getAnalogScreen().testStartBtn == true)
2400077c:	4668      	mov	r0, sp
2400077e:	f006 f853 	bl	24006828 <getAnalogScreen>
24000782:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
24000786:	b15b      	cbz	r3, 240007a0 <lv_screen_update_task+0x28>
		lv_label_set_text_fmt(getAnalogScreen().analogData1, "Analog_1:     %03d",RxData2[0]);
24000788:	a80e      	add	r0, sp, #56	; 0x38
2400078a:	f006 f84d 	bl	24006828 <getAnalogScreen>
2400078e:	4b06      	ldr	r3, [pc, #24]	; (240007a8 <lv_screen_update_task+0x30>)
24000790:	4906      	ldr	r1, [pc, #24]	; (240007ac <lv_screen_update_task+0x34>)
24000792:	781a      	ldrb	r2, [r3, #0]
24000794:	9810      	ldr	r0, [sp, #64]	; 0x40
}
24000796:	b01d      	add	sp, #116	; 0x74
24000798:	f85d eb04 	ldr.w	lr, [sp], #4
		lv_label_set_text_fmt(getAnalogScreen().analogData1, "Analog_1:     %03d",RxData2[0]);
2400079c:	f016 b9b0 	b.w	24016b00 <lv_label_set_text_fmt>
}
240007a0:	b01d      	add	sp, #116	; 0x74
240007a2:	f85d fb04 	ldr.w	pc, [sp], #4
240007a6:	bf00      	nop
240007a8:	2401ab14 	.word	0x2401ab14
240007ac:	9001acc6 	.word	0x9001acc6

240007b0 <SystemClock_Config>:
{
240007b0:	b500      	push	{lr}
240007b2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240007b4:	224c      	movs	r2, #76	; 0x4c
240007b6:	2100      	movs	r1, #0
240007b8:	a809      	add	r0, sp, #36	; 0x24
240007ba:	f019 fe93 	bl	2401a4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240007be:	2220      	movs	r2, #32
240007c0:	2100      	movs	r1, #0
240007c2:	a801      	add	r0, sp, #4
240007c4:	f019 fe8e 	bl	2401a4e4 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
240007c8:	4b23      	ldr	r3, [pc, #140]	; (24000858 <SystemClock_Config+0xa8>)
240007ca:	f04f 32ff 	mov.w	r2, #4294967295
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240007ce:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
240007d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240007d4:	f002 fbe0 	bl	24002f98 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240007d8:	2300      	movs	r3, #0
240007da:	9300      	str	r3, [sp, #0]
240007dc:	4b1f      	ldr	r3, [pc, #124]	; (2400085c <SystemClock_Config+0xac>)
240007de:	699a      	ldr	r2, [r3, #24]
240007e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
240007e4:	619a      	str	r2, [r3, #24]
240007e6:	699a      	ldr	r2, [r3, #24]
240007e8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240007ec:	9200      	str	r2, [sp, #0]
240007ee:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240007f0:	699a      	ldr	r2, [r3, #24]
240007f2:	0490      	lsls	r0, r2, #18
240007f4:	d5fc      	bpl.n	240007f0 <SystemClock_Config+0x40>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
240007f6:	2201      	movs	r2, #1
240007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240007fc:	210c      	movs	r1, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240007fe:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 1;
24000800:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24000802:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000806:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 35;
24000808:	2223      	movs	r2, #35	; 0x23
  RCC_OscInitStruct.PLL.PLLP = 2;
2400080a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 80;
2400080e:	2250      	movs	r2, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000810:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
24000814:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000818:	2300      	movs	r3, #0
2400081a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
2400081e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000820:	f002 fbde 	bl	24002fe0 <HAL_RCC_OscConfig>
24000824:	b108      	cbz	r0, 2400082a <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24000826:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
24000828:	e7fe      	b.n	24000828 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400082a:	223f      	movs	r2, #63	; 0x3f
2400082c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
2400082e:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000830:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24000834:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000836:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
2400083a:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
2400083e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000840:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000844:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
24000848:	f002 ff16 	bl	24003678 <HAL_RCC_ClockConfig>
2400084c:	b108      	cbz	r0, 24000852 <SystemClock_Config+0xa2>
2400084e:	b672      	cpsid	i
	while (1)
24000850:	e7fe      	b.n	24000850 <SystemClock_Config+0xa0>
}
24000852:	b01d      	add	sp, #116	; 0x74
24000854:	f85d fb04 	ldr.w	pc, [sp], #4
24000858:	58024400 	.word	0x58024400
2400085c:	58024800 	.word	0x58024800

24000860 <main>:
{
24000860:	b570      	push	{r4, r5, r6, lr}
24000862:	b08c      	sub	sp, #48	; 0x30
	HAL_LTDC_SetAddress(&hltdc, LCD_MemoryAdd, 0);
24000864:	4c7f      	ldr	r4, [pc, #508]	; (24000a64 <main+0x204>)
  HAL_Init();
24000866:	f000 fbcf 	bl	24001008 <HAL_Init>
  SystemClock_Config();
2400086a:	f7ff ffa1 	bl	240007b0 <SystemClock_Config>
  MX_GPIO_Init();
2400086e:	f7ff fd2d 	bl	240002cc <MX_GPIO_Init>
  MX_DMA2D_Init();
24000872:	f7ff fc69 	bl	24000148 <MX_DMA2D_Init>
  MX_TIM1_Init();
24000876:	f000 fb39 	bl	24000eec <MX_TIM1_Init>
  MX_FDCAN2_Init();
2400087a:	f7ff fca1 	bl	240001c0 <MX_FDCAN2_Init>
  MX_SPI2_Init();
2400087e:	f000 f9ab 	bl	24000bd8 <MX_SPI2_Init>
  MX_LTDC_Init();
24000882:	f7ff fdfb 	bl	2400047c <MX_LTDC_Init>
  MX_ADC1_Init();
24000886:	f7ff fbbb 	bl	24000000 <MX_ADC1_Init>
  MX_SPI1_Init();
2400088a:	f000 f977 	bl	24000b7c <MX_SPI1_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
2400088e:	2200      	movs	r2, #0
24000890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000894:	4874      	ldr	r0, [pc, #464]	; (24000a68 <main+0x208>)
24000896:	f002 f9df 	bl	24002c58 <HAL_GPIO_WritePin>
	LCD_MemoryAdd = malloc(imageSize * sizeof(*LCD_MemoryAdd));
2400089a:	4874      	ldr	r0, [pc, #464]	; (24000a6c <main+0x20c>)
2400089c:	f019 fd44 	bl	2401a328 <malloc>
240008a0:	4b73      	ldr	r3, [pc, #460]	; (24000a70 <main+0x210>)
240008a2:	4605      	mov	r5, r0
	memset(LCD_MemoryAdd, 0, imageSize * sizeof(*LCD_MemoryAdd));
240008a4:	4a71      	ldr	r2, [pc, #452]	; (24000a6c <main+0x20c>)
240008a6:	2100      	movs	r1, #0
	LCD_MemoryAdd = malloc(imageSize * sizeof(*LCD_MemoryAdd));
240008a8:	6018      	str	r0, [r3, #0]
	memset(LCD_MemoryAdd, 0, imageSize * sizeof(*LCD_MemoryAdd));
240008aa:	f019 fe1b 	bl	2401a4e4 <memset>
	HAL_LTDC_SetAddress(&hltdc, LCD_MemoryAdd, 0);
240008ae:	4629      	mov	r1, r5
240008b0:	2200      	movs	r2, #0
240008b2:	4620      	mov	r0, r4
240008b4:	f002 fb4f 	bl	24002f56 <HAL_LTDC_SetAddress>
	HAL_LTDC_SetWindowSize(&hltdc, DISPLAY_WIDTH, DISPLAY_HEIGHT, 0);
240008b8:	2300      	movs	r3, #0
240008ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
240008be:	f44f 7148 	mov.w	r1, #800	; 0x320
240008c2:	4620      	mov	r0, r4
    indev_drv.type = LV_INDEV_TYPE_POINTER;
240008c4:	2501      	movs	r5, #1
	HAL_LTDC_SetWindowSize(&hltdc, DISPLAY_WIDTH, DISPLAY_HEIGHT, 0);
240008c6:	f002 faf0 	bl	24002eaa <HAL_LTDC_SetWindowSize>
	hltdc.Init.TotalWidth = 850;
240008ca:	f240 3352 	movw	r3, #850	; 0x352
	HAL_LTDC_SetWindowPosition(&hltdc, 0, 0, 0);
240008ce:	4620      	mov	r0, r4
	hltdc.Init.TotalWidth = 850;
240008d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	HAL_LTDC_SetWindowPosition(&hltdc, 0, 0, 0);
240008d2:	2300      	movs	r3, #0
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LVGL_buff_size);
240008d4:	4c67      	ldr	r4, [pc, #412]	; (24000a74 <main+0x214>)
	HAL_LTDC_SetWindowPosition(&hltdc, 0, 0, 0);
240008d6:	461a      	mov	r2, r3
240008d8:	4619      	mov	r1, r3
240008da:	f002 fb13 	bl	24002f04 <HAL_LTDC_SetWindowPosition>
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
240008de:	2101      	movs	r1, #1
240008e0:	4865      	ldr	r0, [pc, #404]	; (24000a78 <main+0x218>)
240008e2:	f001 fb95 	bl	24002010 <HAL_DMA2D_ConfigLayer>
	lv_init();
240008e6:	f007 f999 	bl	24007c1c <lv_init>
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LVGL_buff_size);
240008ea:	2200      	movs	r2, #0
240008ec:	4963      	ldr	r1, [pc, #396]	; (24000a7c <main+0x21c>)
240008ee:	f44f 4316 	mov.w	r3, #38400	; 0x9600
240008f2:	4620      	mov	r0, r4
240008f4:	f00e fa46 	bl	2400ed84 <lv_disp_buf_init>
	lv_disp_drv_init(&disp_drv);
240008f8:	a801      	add	r0, sp, #4
240008fa:	f00e fa29 	bl	2400ed50 <lv_disp_drv_init>
	disp_drv.hor_res = DISPLAY_WIDTH;
240008fe:	4b60      	ldr	r3, [pc, #384]	; (24000a80 <main+0x220>)
	lv_disp_drv_register(&disp_drv);
24000900:	a801      	add	r0, sp, #4
	disp_drv.buffer = &disp_buf;
24000902:	9402      	str	r4, [sp, #8]
	disp_drv.hor_res = DISPLAY_WIDTH;
24000904:	9301      	str	r3, [sp, #4]
	disp_drv.flush_cb = my_flush_cb;
24000906:	4b5f      	ldr	r3, [pc, #380]	; (24000a84 <main+0x224>)
    lv_indev_drv_init(&indev_drv);
24000908:	4c5f      	ldr	r4, [pc, #380]	; (24000a88 <main+0x228>)
	disp_drv.flush_cb = my_flush_cb;
2400090a:	9304      	str	r3, [sp, #16]
	lv_disp_drv_register(&disp_drv);
2400090c:	f00e fae2 	bl	2400eed4 <lv_disp_drv_register>
    return lv_disp_get_scr_act(lv_disp_get_default());
24000910:	f00e fa46 	bl	2400eda0 <lv_disp_get_default>
24000914:	f006 fa66 	bl	24006de4 <lv_disp_get_scr_act>
	lv_obj_clean(lv_scr_act());
24000918:	f007 fc9e 	bl	24008258 <lv_obj_clean>
	createMainScreen();
2400091c:	f006 f900 	bl	24006b20 <createMainScreen>
	createAnalogScreen();
24000920:	f005 f90a 	bl	24005b38 <createAnalogScreen>
	createHomeScreen();
24000924:	f005 ffb0 	bl	24006888 <createHomeScreen>
24000928:	f00e fa3a 	bl	2400eda0 <lv_disp_get_default>
2400092c:	f006 fa5a 	bl	24006de4 <lv_disp_get_scr_act>
    lv_obj_t * image = lv_img_create(lv_scr_act(), NULL);
24000930:	2100      	movs	r1, #0
24000932:	f015 f93b 	bl	24015bac <lv_img_create>
	lv_img_set_src(image, &MAP30_small);
24000936:	4955      	ldr	r1, [pc, #340]	; (24000a8c <main+0x22c>)
24000938:	f015 f87d 	bl	24015a36 <lv_img_set_src>
    lv_indev_drv_init(&indev_drv);
2400093c:	4620      	mov	r0, r4
2400093e:	f00e fb33 	bl	2400efa8 <lv_indev_drv_init>
    indev_drv.read_cb = lvgl_touch_read;
24000942:	4b53      	ldr	r3, [pc, #332]	; (24000a90 <main+0x230>)
    indev_touchpad = lv_indev_drv_register(&indev_drv);
24000944:	4620      	mov	r0, r4
    indev_drv.type = LV_INDEV_TYPE_POINTER;
24000946:	7025      	strb	r5, [r4, #0]
    indev_drv.read_cb = lvgl_touch_read;
24000948:	6063      	str	r3, [r4, #4]
    indev_touchpad = lv_indev_drv_register(&indev_drv);
2400094a:	f00e fb3d 	bl	2400efc8 <lv_indev_drv_register>
2400094e:	4b51      	ldr	r3, [pc, #324]	; (24000a94 <main+0x234>)
	lv_task_t* task0 = lv_task_create(LCD_on_task, 1, LV_TASK_PRIO_MID, 0);
24000950:	4629      	mov	r1, r5
24000952:	2203      	movs	r2, #3
    indev_touchpad = lv_indev_drv_register(&indev_drv);
24000954:	6018      	str	r0, [r3, #0]
	lv_task_t* task0 = lv_task_create(LCD_on_task, 1, LV_TASK_PRIO_MID, 0);
24000956:	2300      	movs	r3, #0
24000958:	484f      	ldr	r0, [pc, #316]	; (24000a98 <main+0x238>)
2400095a:	f00f ff05 	bl	24010768 <lv_task_create>
	lv_task_t* task1 = lv_task_create(intro_page_task, 7000, LV_TASK_PRIO_MID, 0);
2400095e:	2300      	movs	r3, #0
	lv_task_t* task0 = lv_task_create(LCD_on_task, 1, LV_TASK_PRIO_MID, 0);
24000960:	4606      	mov	r6, r0
	lv_task_t* task1 = lv_task_create(intro_page_task, 7000, LV_TASK_PRIO_MID, 0);
24000962:	2203      	movs	r2, #3
24000964:	f641 3158 	movw	r1, #7000	; 0x1b58
24000968:	484c      	ldr	r0, [pc, #304]	; (24000a9c <main+0x23c>)
2400096a:	f00f fefd 	bl	24010768 <lv_task_create>
	lv_task_t* task2 = lv_task_create(lv_screen_update_task, 500, LV_TASK_PRIO_MID, 0);
2400096e:	2300      	movs	r3, #0
24000970:	2203      	movs	r2, #3
	lv_task_t* task1 = lv_task_create(intro_page_task, 7000, LV_TASK_PRIO_MID, 0);
24000972:	4604      	mov	r4, r0
	lv_task_t* task2 = lv_task_create(lv_screen_update_task, 500, LV_TASK_PRIO_MID, 0);
24000974:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
24000978:	4849      	ldr	r0, [pc, #292]	; (24000aa0 <main+0x240>)
2400097a:	f00f fef5 	bl	24010768 <lv_task_create>
 *--------------------*/
#if LV_USE_API_EXTENSION_V6

static inline void lv_task_once(lv_task_t * task)
{
    lv_task_set_repeat_count(task, 1);
2400097e:	4629      	mov	r1, r5
24000980:	4630      	mov	r0, r6
24000982:	f00f ff0c 	bl	2401079e <lv_task_set_repeat_count>
24000986:	4629      	mov	r1, r5
24000988:	4620      	mov	r0, r4
		TxHeader2.IdType = FDCAN_STANDARD_ID;
2400098a:	2400      	movs	r4, #0
2400098c:	f00f ff07 	bl	2401079e <lv_task_set_repeat_count>
	setScreenSize(800, 480);
24000990:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
24000994:	f44f 7048 	mov.w	r0, #800	; 0x320
24000998:	f019 fbf8 	bl	2401a18c <setScreenSize>
	setRotation(3);
2400099c:	2003      	movs	r0, #3
2400099e:	f019 fbff 	bl	2401a1a0 <setRotation>
	setOffset(150,150);
240009a2:	2196      	movs	r1, #150	; 0x96
240009a4:	4608      	mov	r0, r1
240009a6:	f019 fc03 	bl	2401a1b0 <setOffset>
	setThreshold(300);
240009aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
240009ae:	f019 fc05 	bl	2401a1bc <setThreshold>
		TxHeader2.Identifier = 0x0019;
240009b2:	4b3c      	ldr	r3, [pc, #240]	; (24000aa4 <main+0x244>)
		TxHeader2.IdType = FDCAN_STANDARD_ID;
240009b4:	2219      	movs	r2, #25
		TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
240009b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		HAL_FDCAN_Start(&hfdcan2);
240009ba:	483b      	ldr	r0, [pc, #236]	; (24000aa8 <main+0x248>)
		TxHeader2.MessageMarker = 0;
240009bc:	621c      	str	r4, [r3, #32]
		TxHeader2.IdType = FDCAN_STANDARD_ID;
240009be:	e9c3 2400 	strd	r2, r4, [r3]
		TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
240009c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
		TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
240009c6:	e9c3 4404 	strd	r4, r4, [r3, #16]
		TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
240009ca:	e9c3 1202 	strd	r1, r2, [r3, #8]
		TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
240009ce:	e9c3 4406 	strd	r4, r4, [r3, #24]
		HAL_FDCAN_Start(&hfdcan2);
240009d2:	f001 fda7 	bl	24002524 <HAL_FDCAN_Start>
		HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
240009d6:	4622      	mov	r2, r4
240009d8:	4629      	mov	r1, r5
240009da:	4833      	ldr	r0, [pc, #204]	; (24000aa8 <main+0x248>)
240009dc:	f001 fea0 	bl	24002720 <HAL_FDCAN_ActivateNotification>
		TxData2[i] = 0x00;
240009e0:	4b32      	ldr	r3, [pc, #200]	; (24000aac <main+0x24c>)
	HAL_TIM_Base_Start_IT(&htim1);
240009e2:	4833      	ldr	r0, [pc, #204]	; (24000ab0 <main+0x250>)
		TxData2[i] = 0x00;
240009e4:	601c      	str	r4, [r3, #0]
240009e6:	605c      	str	r4, [r3, #4]
	HAL_TIM_Base_Start_IT(&htim1);
240009e8:	f004 fd56 	bl	24005498 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
240009ec:	2110      	movs	r1, #16
240009ee:	4831      	ldr	r0, [pc, #196]	; (24000ab4 <main+0x254>)
240009f0:	f002 f937 	bl	24002c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
240009f4:	2120      	movs	r1, #32
240009f6:	482f      	ldr	r0, [pc, #188]	; (24000ab4 <main+0x254>)
240009f8:	f002 f933 	bl	24002c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
240009fc:	4622      	mov	r2, r4
240009fe:	2120      	movs	r1, #32
24000a00:	482d      	ldr	r0, [pc, #180]	; (24000ab8 <main+0x258>)
24000a02:	f002 f929 	bl	24002c58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO_CS_GPIO_Port, DO_CS_Pin, GPIO_PIN_SET);
24000a06:	462a      	mov	r2, r5
24000a08:	4629      	mov	r1, r5
24000a0a:	482c      	ldr	r0, [pc, #176]	; (24000abc <main+0x25c>)
24000a0c:	f002 f924 	bl	24002c58 <HAL_GPIO_WritePin>
	uint8_t outputBuffer[1] = {0x55};
24000a10:	2355      	movs	r3, #85	; 0x55
	HAL_GPIO_WritePin(DI_CS_GPIO_Port, DI_CS_Pin, GPIO_PIN_SET);
24000a12:	462a      	mov	r2, r5
24000a14:	2102      	movs	r1, #2
24000a16:	4829      	ldr	r0, [pc, #164]	; (24000abc <main+0x25c>)
	uint8_t outputBuffer[1] = {0x55};
24000a18:	f88d 3000 	strb.w	r3, [sp]
	HAL_GPIO_WritePin(DI_CS_GPIO_Port, DI_CS_Pin, GPIO_PIN_SET);
24000a1c:	f002 f91c 	bl	24002c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_CS_GPIO_Port, DO_CS_Pin, GPIO_PIN_RESET);
24000a20:	4c26      	ldr	r4, [pc, #152]	; (24000abc <main+0x25c>)
	HAL_GPIO_WritePin(AO_CS_GPIO_Port, AO_CS_Pin, GPIO_PIN_SET);
24000a22:	462a      	mov	r2, r5
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
24000a24:	4d26      	ldr	r5, [pc, #152]	; (24000ac0 <main+0x260>)
	HAL_GPIO_WritePin(AO_CS_GPIO_Port, AO_CS_Pin, GPIO_PIN_SET);
24000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
24000a2a:	4824      	ldr	r0, [pc, #144]	; (24000abc <main+0x25c>)
24000a2c:	f002 f914 	bl	24002c58 <HAL_GPIO_WritePin>
		lv_task_handler();
24000a30:	f019 fe9c 	bl	2401a76c <lv_task_handler>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
24000a34:	4628      	mov	r0, r5
24000a36:	2104      	movs	r1, #4
24000a38:	f002 f913 	bl	24002c62 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(DO_CS_GPIO_Port, DO_CS_Pin, GPIO_PIN_RESET);
24000a3c:	4620      	mov	r0, r4
24000a3e:	2200      	movs	r2, #0
24000a40:	2101      	movs	r1, #1
24000a42:	f002 f909 	bl	24002c58 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, outputBuffer, 1, 30);
24000a46:	231e      	movs	r3, #30
24000a48:	4669      	mov	r1, sp
24000a4a:	2201      	movs	r2, #1
24000a4c:	481d      	ldr	r0, [pc, #116]	; (24000ac4 <main+0x264>)
24000a4e:	f004 f9ad 	bl	24004dac <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DO_CS_GPIO_Port, DO_CS_Pin, GPIO_PIN_SET);
24000a52:	2201      	movs	r2, #1
24000a54:	4620      	mov	r0, r4
24000a56:	4611      	mov	r1, r2
24000a58:	f002 f8fe 	bl	24002c58 <HAL_GPIO_WritePin>
		HAL_Delay(100);
24000a5c:	2064      	movs	r0, #100	; 0x64
24000a5e:	f000 fb13 	bl	24001088 <HAL_Delay>
	while (1)
24000a62:	e7e5      	b.n	24000a30 <main+0x1d0>
24000a64:	2401aa68 	.word	0x2401aa68
24000a68:	58020400 	.word	0x58020400
24000a6c:	000bb800 	.word	0x000bb800
24000a70:	2401ab10 	.word	0x2401ab10
24000a74:	2402d770 	.word	0x2402d770
24000a78:	2401a960 	.word	0x2401a960
24000a7c:	2401ab70 	.word	0x2401ab70
24000a80:	01e00320 	.word	0x01e00320
24000a84:	24000719 	.word	0x24000719
24000a88:	2402d794 	.word	0x2402d794
24000a8c:	9001acdc 	.word	0x9001acdc
24000a90:	240006d1 	.word	0x240006d1
24000a94:	2402d7b0 	.word	0x2402d7b0
24000a98:	240006ad 	.word	0x240006ad
24000a9c:	240006bd 	.word	0x240006bd
24000aa0:	24000779 	.word	0x24000779
24000aa4:	2401ab4c 	.word	0x2401ab4c
24000aa8:	2401a9c8 	.word	0x2401a9c8
24000aac:	2401ab44 	.word	0x2401ab44
24000ab0:	2402d8dc 	.word	0x2402d8dc
24000ab4:	58020c00 	.word	0x58020c00
24000ab8:	58020800 	.word	0x58020800
24000abc:	58021000 	.word	0x58021000
24000ac0:	58020000 	.word	0x58020000
24000ac4:	2402d7c8 	.word	0x2402d7c8

24000ac8 <HAL_TIM_PeriodElapsedCallback>:
{
24000ac8:	b500      	push	{lr}
24000aca:	b08f      	sub	sp, #60	; 0x3c
	if(getAnalogScreen().testStartBtn == true)
24000acc:	4668      	mov	r0, sp
24000ace:	f005 feab 	bl	24006828 <getAnalogScreen>
24000ad2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
24000ad6:	b153      	cbz	r3, 24000aee <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2);
24000ad8:	4a06      	ldr	r2, [pc, #24]	; (24000af4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
24000ada:	4907      	ldr	r1, [pc, #28]	; (24000af8 <HAL_TIM_PeriodElapsedCallback+0x30>)
24000adc:	4807      	ldr	r0, [pc, #28]	; (24000afc <HAL_TIM_PeriodElapsedCallback+0x34>)
24000ade:	f001 fd3a 	bl	24002556 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_ADC_Start_IT(&hadc1);
24000ae2:	4807      	ldr	r0, [pc, #28]	; (24000b00 <HAL_TIM_PeriodElapsedCallback+0x38>)
}
24000ae4:	b00f      	add	sp, #60	; 0x3c
24000ae6:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_ADC_Start_IT(&hadc1);
24000aea:	f000 be15 	b.w	24001718 <HAL_ADC_Start_IT>
}
24000aee:	b00f      	add	sp, #60	; 0x3c
24000af0:	f85d fb04 	ldr.w	pc, [sp], #4
24000af4:	2401ab44 	.word	0x2401ab44
24000af8:	2401ab4c 	.word	0x2401ab4c
24000afc:	2401a9c8 	.word	0x2401a9c8
24000b00:	2401a8fc 	.word	0x2401a8fc

24000b04 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
24000b04:	07cb      	lsls	r3, r1, #31
{
24000b06:	b510      	push	{r4, lr}
24000b08:	4604      	mov	r4, r0
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
24000b0a:	d50b      	bpl.n	24000b24 <HAL_FDCAN_RxFifo0Callback+0x20>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader2, RxData2);
24000b0c:	4a06      	ldr	r2, [pc, #24]	; (24000b28 <HAL_FDCAN_RxFifo0Callback+0x24>)
24000b0e:	2140      	movs	r1, #64	; 0x40
24000b10:	4b06      	ldr	r3, [pc, #24]	; (24000b2c <HAL_FDCAN_RxFifo0Callback+0x28>)
24000b12:	f001 fd53 	bl	240025bc <HAL_FDCAN_GetRxMessage>
		HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
24000b16:	4620      	mov	r0, r4
24000b18:	2200      	movs	r2, #0
24000b1a:	2101      	movs	r1, #1
}
24000b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
24000b20:	f001 bdfe 	b.w	24002720 <HAL_FDCAN_ActivateNotification>
}
24000b24:	bd10      	pop	{r4, pc}
24000b26:	bf00      	nop
24000b28:	2401ab1c 	.word	0x2401ab1c
24000b2c:	2401ab14 	.word	0x2401ab14

24000b30 <HAL_ADC_ConvCpltCallback>:
{
24000b30:	b508      	push	{r3, lr}
	temp = HAL_ADC_GetValue(&hadc1);
24000b32:	480f      	ldr	r0, [pc, #60]	; (24000b70 <HAL_ADC_ConvCpltCallback+0x40>)
24000b34:	f000 fad2 	bl	240010dc <HAL_ADC_GetValue>
	supplyCurrent24V = (float)temp*shuntCurrentGain;
24000b38:	b283      	uxth	r3, r0
24000b3a:	ee07 3a10 	vmov	s14, r3
24000b3e:	4b0d      	ldr	r3, [pc, #52]	; (24000b74 <HAL_ADC_ConvCpltCallback+0x44>)
24000b40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24000b60 <HAL_ADC_ConvCpltCallback+0x30>
24000b44:	eeb8 7b47 	vcvt.f64.u32	d7, s14
24000b48:	ed9f 5b07 	vldr	d5, [pc, #28]	; 24000b68 <HAL_ADC_ConvCpltCallback+0x38>
24000b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
24000b50:	ee87 6b05 	vdiv.f64	d6, d7, d5
24000b54:	ed83 6b00 	vstr	d6, [r3]
}
24000b58:	bd08      	pop	{r3, pc}
24000b5a:	bf00      	nop
24000b5c:	f3af 8000 	nop.w
24000b60:	66666666 	.word	0x66666666
24000b64:	400a6666 	.word	0x400a6666
24000b68:	00000000 	.word	0x00000000
24000b6c:	40efffe0 	.word	0x40efffe0
24000b70:	2401a8fc 	.word	0x2401a8fc
24000b74:	2402d7c0 	.word	0x2402d7c0

24000b78 <Error_Handler>:
24000b78:	b672      	cpsid	i
	while (1)
24000b7a:	e7fe      	b.n	24000b7a <Error_Handler+0x2>

24000b7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
24000b7c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24000b7e:	4814      	ldr	r0, [pc, #80]	; (24000bd0 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
24000b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24000b84:	4a13      	ldr	r2, [pc, #76]	; (24000bd4 <MX_SPI1_Init+0x58>)
24000b86:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24000b8a:	2300      	movs	r3, #0
24000b8c:	2207      	movs	r2, #7
24000b8e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
24000b92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
24000b96:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
24000b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24000b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
24000ba2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
24000ba6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24000baa:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24000bae:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24000bb2:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24000bb6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24000bba:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24000bbe:	f004 f851 	bl	24004c64 <HAL_SPI_Init>
24000bc2:	b118      	cbz	r0, 24000bcc <MX_SPI1_Init+0x50>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24000bc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24000bc8:	f7ff bfd6 	b.w	24000b78 <Error_Handler>
}
24000bcc:	bd08      	pop	{r3, pc}
24000bce:	bf00      	nop
24000bd0:	2402d7c8 	.word	0x2402d7c8
24000bd4:	40013000 	.word	0x40013000

24000bd8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
24000bd8:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
24000bda:	4815      	ldr	r0, [pc, #84]	; (24000c30 <MX_SPI2_Init+0x58>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
24000bdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24000be0:	4a14      	ldr	r2, [pc, #80]	; (24000c34 <MX_SPI2_Init+0x5c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
24000be2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Mode = SPI_MODE_MASTER;
24000be6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
24000bea:	2300      	movs	r3, #0
24000bec:	2207      	movs	r2, #7
24000bee:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
24000bf2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
24000bf6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
24000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
24000bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24000c02:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
24000c06:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24000c0a:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24000c0e:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24000c12:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24000c16:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24000c1a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
24000c1e:	f004 f821 	bl	24004c64 <HAL_SPI_Init>
24000c22:	b118      	cbz	r0, 24000c2c <MX_SPI2_Init+0x54>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
24000c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24000c28:	f7ff bfa6 	b.w	24000b78 <Error_Handler>
}
24000c2c:	bd08      	pop	{r3, pc}
24000c2e:	bf00      	nop
24000c30:	2402d850 	.word	0x2402d850
24000c34:	40003800 	.word	0x40003800

24000c38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24000c38:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000c3a:	2214      	movs	r2, #20
{
24000c3c:	b0ba      	sub	sp, #232	; 0xe8
24000c3e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000c40:	2100      	movs	r1, #0
24000c42:	eb0d 0002 	add.w	r0, sp, r2
24000c46:	f019 fc4d 	bl	2401a4e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000c4a:	22c0      	movs	r2, #192	; 0xc0
24000c4c:	2100      	movs	r1, #0
24000c4e:	a80a      	add	r0, sp, #40	; 0x28
24000c50:	f019 fc48 	bl	2401a4e4 <memset>
  if(spiHandle->Instance==SPI1)
24000c54:	6823      	ldr	r3, [r4, #0]
24000c56:	4a45      	ldr	r2, [pc, #276]	; (24000d6c <HAL_SPI_MspInit+0x134>)
24000c58:	4293      	cmp	r3, r2
24000c5a:	d13a      	bne.n	24000cd2 <HAL_SPI_MspInit+0x9a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24000c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000c60:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000c62:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24000c64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000c68:	f002 ff50 	bl	24003b0c <HAL_RCCEx_PeriphCLKConfig>
24000c6c:	b108      	cbz	r0, 24000c72 <HAL_SPI_MspInit+0x3a>
    {
      Error_Handler();
24000c6e:	f7ff ff83 	bl	24000b78 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
24000c72:	4b3f      	ldr	r3, [pc, #252]	; (24000d70 <HAL_SPI_MspInit+0x138>)
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000c74:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000c76:	a905      	add	r1, sp, #20
24000c78:	483e      	ldr	r0, [pc, #248]	; (24000d74 <HAL_SPI_MspInit+0x13c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
24000c7a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
24000c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24000c82:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
24000c86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
24000c8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24000c8e:	9200      	str	r2, [sp, #0]
24000c90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000c92:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000c96:	f042 0202 	orr.w	r2, r2, #2
24000c9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000c9e:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000ca0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24000ca4:	f003 0302 	and.w	r3, r3, #2
24000ca8:	9301      	str	r3, [sp, #4]
24000caa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000cac:	2302      	movs	r3, #2
24000cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24000cb2:	2305      	movs	r3, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000cb4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24000cb8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000cba:	f001 fee3 	bl	24002a84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
24000cbe:	2023      	movs	r0, #35	; 0x23
24000cc0:	4622      	mov	r2, r4
24000cc2:	4621      	mov	r1, r4
24000cc4:	f000 ffa6 	bl	24001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24000cc8:	2023      	movs	r0, #35	; 0x23
24000cca:	f000 ffd5 	bl	24001c78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
24000cce:	b03a      	add	sp, #232	; 0xe8
24000cd0:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
24000cd2:	4a29      	ldr	r2, [pc, #164]	; (24000d78 <HAL_SPI_MspInit+0x140>)
24000cd4:	4293      	cmp	r3, r2
24000cd6:	d1fa      	bne.n	24000cce <HAL_SPI_MspInit+0x96>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
24000cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000cdc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000cde:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
24000ce0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000ce4:	f002 ff12 	bl	24003b0c <HAL_RCCEx_PeriphCLKConfig>
24000ce8:	b108      	cbz	r0, 24000cee <HAL_SPI_MspInit+0xb6>
      Error_Handler();
24000cea:	f7ff ff45 	bl	24000b78 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
24000cee:	4b20      	ldr	r3, [pc, #128]	; (24000d70 <HAL_SPI_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000cf0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000cf2:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
24000cf4:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
24000cf6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000cfa:	a905      	add	r1, sp, #20
24000cfc:	481f      	ldr	r0, [pc, #124]	; (24000d7c <HAL_SPI_MspInit+0x144>)
    __HAL_RCC_SPI2_CLK_ENABLE();
24000cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24000d02:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
24000d06:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
24000d0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
24000d0e:	9202      	str	r2, [sp, #8]
24000d10:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24000d12:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000d16:	f042 0204 	orr.w	r2, r2, #4
24000d1a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000d1e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000d22:	f002 0204 	and.w	r2, r2, #4
24000d26:	9203      	str	r2, [sp, #12]
24000d28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000d2a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
24000d2e:	f042 0201 	orr.w	r2, r2, #1
24000d32:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
24000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
24000d3a:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000d3c:	f003 0301 	and.w	r3, r3, #1
24000d40:	9304      	str	r3, [sp, #16]
24000d42:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000d44:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000d46:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000d4a:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000d4e:	f001 fe99 	bl	24002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Touch_SCK_Pin;
24000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(Touch_SCK_GPIO_Port, &GPIO_InitStruct);
24000d56:	a905      	add	r1, sp, #20
24000d58:	4809      	ldr	r0, [pc, #36]	; (24000d80 <HAL_SPI_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
24000d5a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000d5c:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24000d60:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(Touch_SCK_GPIO_Port, &GPIO_InitStruct);
24000d64:	f001 fe8e 	bl	24002a84 <HAL_GPIO_Init>
}
24000d68:	e7b1      	b.n	24000cce <HAL_SPI_MspInit+0x96>
24000d6a:	bf00      	nop
24000d6c:	40013000 	.word	0x40013000
24000d70:	58024400 	.word	0x58024400
24000d74:	58020400 	.word	0x58020400
24000d78:	40003800 	.word	0x40003800
24000d7c:	58020800 	.word	0x58020800
24000d80:	58020000 	.word	0x58020000

24000d84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000d84:	4b07      	ldr	r3, [pc, #28]	; (24000da4 <HAL_MspInit+0x20>)
{
24000d86:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000d88:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
24000d8c:	f042 0202 	orr.w	r2, r2, #2
24000d90:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
24000d94:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24000d98:	f003 0302 	and.w	r3, r3, #2
24000d9c:	9301      	str	r3, [sp, #4]
24000d9e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24000da0:	b002      	add	sp, #8
24000da2:	4770      	bx	lr
24000da4:	58024400 	.word	0x58024400

24000da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24000da8:	e7fe      	b.n	24000da8 <NMI_Handler>

24000daa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24000daa:	e7fe      	b.n	24000daa <HardFault_Handler>

24000dac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24000dac:	e7fe      	b.n	24000dac <MemManage_Handler>

24000dae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24000dae:	e7fe      	b.n	24000dae <BusFault_Handler>

24000db0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24000db0:	e7fe      	b.n	24000db0 <UsageFault_Handler>

24000db2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24000db2:	4770      	bx	lr

24000db4 <DebugMon_Handler>:
24000db4:	4770      	bx	lr

24000db6 <PendSV_Handler>:
24000db6:	4770      	bx	lr

24000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24000db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24000dba:	f000 f953 	bl	24001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  lv_tick_inc(1);
24000dbe:	2001      	movs	r0, #1
  /* USER CODE END SysTick_IRQn 1 */
}
24000dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lv_tick_inc(1);
24000dc4:	f00e b95e 	b.w	2400f084 <lv_tick_inc>

24000dc8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
24000dc8:	4801      	ldr	r0, [pc, #4]	; (24000dd0 <ADC_IRQHandler+0x8>)
24000dca:	f000 b98d 	b.w	240010e8 <HAL_ADC_IRQHandler>
24000dce:	bf00      	nop
24000dd0:	2401a8fc 	.word	0x2401a8fc

24000dd4 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
24000dd4:	4801      	ldr	r0, [pc, #4]	; (24000ddc <FDCAN2_IT0_IRQHandler+0x8>)
24000dd6:	f001 bcf1 	b.w	240027bc <HAL_FDCAN_IRQHandler>
24000dda:	bf00      	nop
24000ddc:	2401a9c8 	.word	0x2401a9c8

24000de0 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
24000de0:	4801      	ldr	r0, [pc, #4]	; (24000de8 <TIM1_BRK_IRQHandler+0x8>)
24000de2:	f004 bb9b 	b.w	2400551c <HAL_TIM_IRQHandler>
24000de6:	bf00      	nop
24000de8:	2402d8dc 	.word	0x2402d8dc

24000dec <TIM1_UP_IRQHandler>:
24000dec:	f7ff bff8 	b.w	24000de0 <TIM1_BRK_IRQHandler>

24000df0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24000df0:	4801      	ldr	r0, [pc, #4]	; (24000df8 <SPI1_IRQHandler+0x8>)
24000df2:	f004 ba4d 	b.w	24005290 <HAL_SPI_IRQHandler>
24000df6:	bf00      	nop
24000df8:	2402d7c8 	.word	0x2402d7c8

24000dfc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24000dfc:	4a0b      	ldr	r2, [pc, #44]	; (24000e2c <_sbrk+0x30>)
{
24000dfe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
24000e00:	6811      	ldr	r1, [r2, #0]
{
24000e02:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
24000e04:	b909      	cbnz	r1, 24000e0a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
24000e06:	490a      	ldr	r1, [pc, #40]	; (24000e30 <_sbrk+0x34>)
24000e08:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24000e0a:	6810      	ldr	r0, [r2, #0]
24000e0c:	4909      	ldr	r1, [pc, #36]	; (24000e34 <_sbrk+0x38>)
24000e0e:	4c0a      	ldr	r4, [pc, #40]	; (24000e38 <_sbrk+0x3c>)
24000e10:	4403      	add	r3, r0
24000e12:	1b09      	subs	r1, r1, r4
24000e14:	428b      	cmp	r3, r1
24000e16:	d906      	bls.n	24000e26 <_sbrk+0x2a>
  {
    errno = ENOMEM;
24000e18:	f019 fb7c 	bl	2401a514 <__errno>
24000e1c:	230c      	movs	r3, #12
24000e1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
24000e20:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
24000e24:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
24000e26:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
24000e28:	e7fc      	b.n	24000e24 <_sbrk+0x28>
24000e2a:	bf00      	nop
24000e2c:	2402d8d8 	.word	0x2402d8d8
24000e30:	24035ea8 	.word	0x24035ea8
24000e34:	24100000 	.word	0x24100000
24000e38:	00000800 	.word	0x00000800

24000e3c <SystemInit>:
	__IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24000e3c:	4a23      	ldr	r2, [pc, #140]	; (24000ecc <SystemInit+0x90>)
24000e3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
24000e42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24000e46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000e4a:	4a21      	ldr	r2, [pc, #132]	; (24000ed0 <SystemInit+0x94>)
24000e4c:	6813      	ldr	r3, [r2, #0]
24000e4e:	f003 030f 	and.w	r3, r3, #15
24000e52:	2b02      	cmp	r3, #2
24000e54:	d805      	bhi.n	24000e62 <SystemInit+0x26>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24000e56:	6813      	ldr	r3, [r2, #0]
24000e58:	f023 030f 	bic.w	r3, r3, #15
24000e5c:	f043 0303 	orr.w	r3, r3, #3
24000e60:	6013      	str	r3, [r2, #0]
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
24000e62:	4b1c      	ldr	r3, [pc, #112]	; (24000ed4 <SystemInit+0x98>)
24000e64:	681a      	ldr	r2, [r3, #0]
24000e66:	f042 0201 	orr.w	r2, r2, #1
24000e6a:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
24000e6c:	2200      	movs	r2, #0
24000e6e:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
24000e70:	4a19      	ldr	r2, [pc, #100]	; (24000ed8 <SystemInit+0x9c>)
24000e72:	6819      	ldr	r1, [r3, #0]
24000e74:	400a      	ands	r2, r1

	/* Decreasing the number of wait states because of lower CPU frequency */
	if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000e76:	4916      	ldr	r1, [pc, #88]	; (24000ed0 <SystemInit+0x94>)
	RCC->CR &= 0xEAF6ED7FU;
24000e78:	601a      	str	r2, [r3, #0]
	if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24000e7a:	680a      	ldr	r2, [r1, #0]
24000e7c:	f012 0f0c 	tst.w	r2, #12
24000e80:	d005      	beq.n	24000e8e <SystemInit+0x52>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24000e82:	680a      	ldr	r2, [r1, #0]
24000e84:	f022 020f 	bic.w	r2, r2, #15
24000e88:	f042 0203 	orr.w	r2, r2, #3
24000e8c:	600a      	str	r2, [r1, #0]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
#else
	/* Reset CDCFGR1 register */
	RCC->CDCFGR1 = 0x00000000;
24000e8e:	2200      	movs	r2, #0

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
24000e90:	4912      	ldr	r1, [pc, #72]	; (24000edc <SystemInit+0xa0>)
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
24000e92:	f243 00d2 	movw	r0, #12498	; 0x30d2
	RCC->CDCFGR1 = 0x00000000;
24000e96:	619a      	str	r2, [r3, #24]
	RCC->CDCFGR2 = 0x00000000;
24000e98:	61da      	str	r2, [r3, #28]
	RCC->SRDCFGR = 0x00000000;
24000e9a:	621a      	str	r2, [r3, #32]
	RCC->PLLCKSELR = 0x02020200;
24000e9c:	6299      	str	r1, [r3, #40]	; 0x28
	RCC->PLLCFGR = 0x01FF0000;
24000e9e:	4910      	ldr	r1, [pc, #64]	; (24000ee0 <SystemInit+0xa4>)
24000ea0:	62d9      	str	r1, [r3, #44]	; 0x2c
	RCC->PLL1DIVR = 0x01010280;
24000ea2:	4910      	ldr	r1, [pc, #64]	; (24000ee4 <SystemInit+0xa8>)
24000ea4:	6319      	str	r1, [r3, #48]	; 0x30
	RCC->PLL1FRACR = 0x00000000;
24000ea6:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->PLL2DIVR = 0x01010280;
24000ea8:	6399      	str	r1, [r3, #56]	; 0x38
	RCC->PLL2FRACR = 0x00000000;
24000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	RCC->PLL3DIVR = 0x01010280;
24000eac:	6419      	str	r1, [r3, #64]	; 0x40
	RCC->PLL3FRACR = 0x00000000;
24000eae:	645a      	str	r2, [r3, #68]	; 0x44
	RCC->CR &= 0xFFFBFFFFU;
24000eb0:	6819      	ldr	r1, [r3, #0]
24000eb2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
24000eb6:	6019      	str	r1, [r3, #0]
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
24000eb8:	490b      	ldr	r1, [pc, #44]	; (24000ee8 <SystemInit+0xac>)
	RCC->CIER = 0x00000000;
24000eba:	661a      	str	r2, [r3, #96]	; 0x60
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
24000ebc:	6008      	str	r0, [r1, #0]
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */


	RCC->CFGR = 0x00000000;
24000ebe:	611a      	str	r2, [r3, #16]
	SCB->VTOR = 0x90000000;
24000ec0:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
24000ec4:	4b01      	ldr	r3, [pc, #4]	; (24000ecc <SystemInit+0x90>)
24000ec6:	609a      	str	r2, [r3, #8]

#endif /*DUAL_CORE && CORE_CM4*/
}
24000ec8:	4770      	bx	lr
24000eca:	bf00      	nop
24000ecc:	e000ed00 	.word	0xe000ed00
24000ed0:	52002000 	.word	0x52002000
24000ed4:	58024400 	.word	0x58024400
24000ed8:	eaf6ed7f 	.word	0xeaf6ed7f
24000edc:	02020200 	.word	0x02020200
24000ee0:	01ff0000 	.word	0x01ff0000
24000ee4:	01010280 	.word	0x01010280
24000ee8:	52004000 	.word	0x52004000

24000eec <MX_TIM1_Init>:

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
24000eec:	2210      	movs	r2, #16
24000eee:	2100      	movs	r1, #0
{
24000ef0:	b500      	push	{lr}
24000ef2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
24000ef4:	eb0d 0002 	add.w	r0, sp, r2
24000ef8:	f019 faf4 	bl	2401a4e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
24000efc:	4816      	ldr	r0, [pc, #88]	; (24000f58 <MX_TIM1_Init+0x6c>)
  htim1.Init.Prescaler = 19;
24000efe:	2213      	movs	r2, #19
24000f00:	4916      	ldr	r1, [pc, #88]	; (24000f5c <MX_TIM1_Init+0x70>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
24000f02:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 19;
24000f04:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 13999;
24000f08:	f243 62af 	movw	r2, #13999	; 0x36af
  TIM_MasterConfigTypeDef sMasterConfig = {0};
24000f0c:	9303      	str	r3, [sp, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
24000f0e:	6083      	str	r3, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
24000f10:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
24000f14:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
24000f18:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
24000f1c:	f004 fc14 	bl	24005748 <HAL_TIM_Base_Init>
24000f20:	b108      	cbz	r0, 24000f26 <MX_TIM1_Init+0x3a>
  {
    Error_Handler();
24000f22:	f7ff fe29 	bl	24000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
24000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
24000f2a:	a904      	add	r1, sp, #16
24000f2c:	480a      	ldr	r0, [pc, #40]	; (24000f58 <MX_TIM1_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
24000f2e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
24000f30:	f004 fc44 	bl	240057bc <HAL_TIM_ConfigClockSource>
24000f34:	b108      	cbz	r0, 24000f3a <MX_TIM1_Init+0x4e>
  {
    Error_Handler();
24000f36:	f7ff fe1f 	bl	24000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
24000f3a:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
24000f3c:	a901      	add	r1, sp, #4
24000f3e:	4806      	ldr	r0, [pc, #24]	; (24000f58 <MX_TIM1_Init+0x6c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
24000f40:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
24000f42:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
24000f46:	f004 fcf5 	bl	24005934 <HAL_TIMEx_MasterConfigSynchronization>
24000f4a:	b108      	cbz	r0, 24000f50 <MX_TIM1_Init+0x64>
  {
    Error_Handler();
24000f4c:	f7ff fe14 	bl	24000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
24000f50:	b009      	add	sp, #36	; 0x24
24000f52:	f85d fb04 	ldr.w	pc, [sp], #4
24000f56:	bf00      	nop
24000f58:	2402d8dc 	.word	0x2402d8dc
24000f5c:	40010000 	.word	0x40010000

24000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
24000f60:	4b13      	ldr	r3, [pc, #76]	; (24000fb0 <HAL_TIM_Base_MspInit+0x50>)
{
24000f62:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM1)
24000f64:	6802      	ldr	r2, [r0, #0]
24000f66:	429a      	cmp	r2, r3
24000f68:	d11f      	bne.n	24000faa <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
24000f6a:	4b12      	ldr	r3, [pc, #72]	; (24000fb4 <HAL_TIM_Base_MspInit+0x54>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
24000f6c:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
24000f6e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
24000f72:	f042 0201 	orr.w	r2, r2, #1
24000f76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
24000f7a:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
24000f7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
24000f80:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
24000f82:	f003 0301 	and.w	r3, r3, #1
24000f86:	9301      	str	r3, [sp, #4]
24000f88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
24000f8a:	f000 fe43 	bl	24001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
24000f8e:	2018      	movs	r0, #24
24000f90:	f000 fe72 	bl	24001c78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
24000f94:	2200      	movs	r2, #0
24000f96:	2019      	movs	r0, #25
24000f98:	4611      	mov	r1, r2
24000f9a:	f000 fe3b 	bl	24001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
24000f9e:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
24000fa0:	b003      	add	sp, #12
24000fa2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
24000fa6:	f000 be67 	b.w	24001c78 <HAL_NVIC_EnableIRQ>
}
24000faa:	b003      	add	sp, #12
24000fac:	f85d fb04 	ldr.w	pc, [sp], #4
24000fb0:	40010000 	.word	0x40010000
24000fb4:	58024400 	.word	0x58024400

24000fb8 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24000fb8:	e7fe      	b.n	24000fb8 <BDMA1_IRQHandler>
	...

24000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24000fbc:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24000fbe:	4b0f      	ldr	r3, [pc, #60]	; (24000ffc <HAL_InitTick+0x40>)
{
24000fc0:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
24000fc2:	781a      	ldrb	r2, [r3, #0]
24000fc4:	b90a      	cbnz	r2, 24000fca <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
24000fc6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24000fc8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24000fce:	fbb3 f3f2 	udiv	r3, r3, r2
24000fd2:	4a0b      	ldr	r2, [pc, #44]	; (24001000 <HAL_InitTick+0x44>)
24000fd4:	6810      	ldr	r0, [r2, #0]
24000fd6:	fbb0 f0f3 	udiv	r0, r0, r3
24000fda:	f000 fe5b 	bl	24001c94 <HAL_SYSTICK_Config>
24000fde:	4604      	mov	r4, r0
24000fe0:	2800      	cmp	r0, #0
24000fe2:	d1f0      	bne.n	24000fc6 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24000fe4:	2d0f      	cmp	r5, #15
24000fe6:	d8ee      	bhi.n	24000fc6 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24000fe8:	4602      	mov	r2, r0
24000fea:	4629      	mov	r1, r5
24000fec:	f04f 30ff 	mov.w	r0, #4294967295
24000ff0:	f000 fe10 	bl	24001c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24000ff4:	4b03      	ldr	r3, [pc, #12]	; (24001004 <HAL_InitTick+0x48>)
24000ff6:	4620      	mov	r0, r4
24000ff8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
24000ffa:	e7e5      	b.n	24000fc8 <HAL_InitTick+0xc>
24000ffc:	2401a5c0 	.word	0x2401a5c0
24001000:	2401a5b8 	.word	0x2401a5b8
24001004:	2401a5c4 	.word	0x2401a5c4

24001008 <HAL_Init>:
{
24001008:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400100a:	2003      	movs	r0, #3
2400100c:	f000 fdf0 	bl	24001bf0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24001010:	f002 fa90 	bl	24003534 <HAL_RCC_GetSysClockFreq>
24001014:	490f      	ldr	r1, [pc, #60]	; (24001054 <HAL_Init+0x4c>)
24001016:	4a10      	ldr	r2, [pc, #64]	; (24001058 <HAL_Init+0x50>)
24001018:	698b      	ldr	r3, [r1, #24]
2400101a:	f3c3 2303 	ubfx	r3, r3, #8, #4
2400101e:	5cd3      	ldrb	r3, [r2, r3]
24001020:	f003 031f 	and.w	r3, r3, #31
24001024:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24001026:	698b      	ldr	r3, [r1, #24]
24001028:	f003 030f 	and.w	r3, r3, #15
2400102c:	5cd3      	ldrb	r3, [r2, r3]
2400102e:	4a0b      	ldr	r2, [pc, #44]	; (2400105c <HAL_Init+0x54>)
24001030:	f003 031f 	and.w	r3, r3, #31
24001034:	fa20 f303 	lsr.w	r3, r0, r3
24001038:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
2400103a:	4b09      	ldr	r3, [pc, #36]	; (24001060 <HAL_Init+0x58>)
2400103c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400103e:	200f      	movs	r0, #15
24001040:	f7ff ffbc 	bl	24000fbc <HAL_InitTick>
24001044:	4604      	mov	r4, r0
24001046:	b918      	cbnz	r0, 24001050 <HAL_Init+0x48>
  HAL_MspInit();
24001048:	f7ff fe9c 	bl	24000d84 <HAL_MspInit>
}
2400104c:	4620      	mov	r0, r4
2400104e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
24001050:	2401      	movs	r4, #1
24001052:	e7fb      	b.n	2400104c <HAL_Init+0x44>
24001054:	58024400 	.word	0x58024400
24001058:	900d64e8 	.word	0x900d64e8
2400105c:	2401a5bc 	.word	0x2401a5bc
24001060:	2401a5b8 	.word	0x2401a5b8

24001064 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24001064:	4a03      	ldr	r2, [pc, #12]	; (24001074 <HAL_IncTick+0x10>)
24001066:	4b04      	ldr	r3, [pc, #16]	; (24001078 <HAL_IncTick+0x14>)
24001068:	6811      	ldr	r1, [r2, #0]
2400106a:	781b      	ldrb	r3, [r3, #0]
2400106c:	440b      	add	r3, r1
2400106e:	6013      	str	r3, [r2, #0]
}
24001070:	4770      	bx	lr
24001072:	bf00      	nop
24001074:	2402d928 	.word	0x2402d928
24001078:	2401a5c0 	.word	0x2401a5c0

2400107c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
2400107c:	4b01      	ldr	r3, [pc, #4]	; (24001084 <HAL_GetTick+0x8>)
2400107e:	6818      	ldr	r0, [r3, #0]
}
24001080:	4770      	bx	lr
24001082:	bf00      	nop
24001084:	2402d928 	.word	0x2402d928

24001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24001088:	b538      	push	{r3, r4, r5, lr}
2400108a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
2400108c:	f7ff fff6 	bl	2400107c <HAL_GetTick>
24001090:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24001092:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
24001094:	bf1e      	ittt	ne
24001096:	4b04      	ldrne	r3, [pc, #16]	; (240010a8 <HAL_Delay+0x20>)
24001098:	781b      	ldrbne	r3, [r3, #0]
2400109a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
2400109c:	f7ff ffee 	bl	2400107c <HAL_GetTick>
240010a0:	1b43      	subs	r3, r0, r5
240010a2:	42a3      	cmp	r3, r4
240010a4:	d3fa      	bcc.n	2400109c <HAL_Delay+0x14>
  {
  }
}
240010a6:	bd38      	pop	{r3, r4, r5, pc}
240010a8:	2401a5c0 	.word	0x2401a5c0

240010ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
240010ac:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
240010ae:	0dcc      	lsrs	r4, r1, #23
240010b0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
240010b2:	f3c1 5104 	ubfx	r1, r1, #20, #5
240010b6:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
240010b8:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
240010bc:	408d      	lsls	r5, r1
240010be:	408a      	lsls	r2, r1
240010c0:	5903      	ldr	r3, [r0, r4]
240010c2:	ea23 0305 	bic.w	r3, r3, r5
240010c6:	4313      	orrs	r3, r2
240010c8:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
240010ca:	bd30      	pop	{r4, r5, pc}

240010cc <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
240010cc:	6880      	ldr	r0, [r0, #8]
}
240010ce:	f000 0001 	and.w	r0, r0, #1
240010d2:	4770      	bx	lr

240010d4 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
240010d4:	6880      	ldr	r0, [r0, #8]
}
240010d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
240010da:	4770      	bx	lr

240010dc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
240010dc:	6803      	ldr	r3, [r0, #0]
240010de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
240010e0:	4770      	bx	lr

240010e2 <HAL_ADC_LevelOutOfWindowCallback>:
240010e2:	4770      	bx	lr

240010e4 <HAL_ADC_ErrorCallback>:
240010e4:	4770      	bx	lr
	...

240010e8 <HAL_ADC_IRQHandler>:
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
240010e8:	6803      	ldr	r3, [r0, #0]
{
240010ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
240010ee:	681d      	ldr	r5, [r3, #0]
{
240010f0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
240010f2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 24001328 <HAL_ADC_IRQHandler+0x240>
  uint32_t tmp_ier = hadc->Instance->IER;
240010f6:	685e      	ldr	r6, [r3, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
240010f8:	07a9      	lsls	r1, r5, #30
240010fa:	f8d8 7008 	ldr.w	r7, [r8, #8]
240010fe:	f007 071f 	and.w	r7, r7, #31
24001102:	d50e      	bpl.n	24001122 <HAL_ADC_IRQHandler+0x3a>
24001104:	07b2      	lsls	r2, r6, #30
24001106:	d50c      	bpl.n	24001122 <HAL_ADC_IRQHandler+0x3a>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24001108:	6d43      	ldr	r3, [r0, #84]	; 0x54
2400110a:	06db      	lsls	r3, r3, #27
2400110c:	d403      	bmi.n	24001116 <HAL_ADC_IRQHandler+0x2e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
2400110e:	6d43      	ldr	r3, [r0, #84]	; 0x54
24001110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
24001114:	6543      	str	r3, [r0, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
24001116:	4620      	mov	r0, r4
24001118:	f000 fd04 	bl	24001b24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
2400111c:	6823      	ldr	r3, [r4, #0]
2400111e:	2202      	movs	r2, #2
24001120:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24001122:	0768      	lsls	r0, r5, #29
24001124:	d501      	bpl.n	2400112a <HAL_ADC_IRQHandler+0x42>
24001126:	0771      	lsls	r1, r6, #29
24001128:	d403      	bmi.n	24001132 <HAL_ADC_IRQHandler+0x4a>
2400112a:	072a      	lsls	r2, r5, #28
2400112c:	d532      	bpl.n	24001194 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
2400112e:	0733      	lsls	r3, r6, #28
24001130:	d530      	bpl.n	24001194 <HAL_ADC_IRQHandler+0xac>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24001132:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001134:	06d8      	lsls	r0, r3, #27
24001136:	d403      	bmi.n	24001140 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24001138:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400113e:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24001140:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24001142:	68da      	ldr	r2, [r3, #12]
24001144:	f412 6f40 	tst.w	r2, #3072	; 0xc00
24001148:	d11e      	bne.n	24001188 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2400114a:	4a75      	ldr	r2, [pc, #468]	; (24001320 <HAL_ADC_IRQHandler+0x238>)
2400114c:	4293      	cmp	r3, r2
2400114e:	f000 80dc 	beq.w	2400130a <HAL_ADC_IRQHandler+0x222>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24001152:	68da      	ldr	r2, [r3, #12]
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24001154:	0491      	lsls	r1, r2, #18
24001156:	d417      	bmi.n	24001188 <HAL_ADC_IRQHandler+0xa0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
24001158:	681a      	ldr	r2, [r3, #0]
2400115a:	0712      	lsls	r2, r2, #28
2400115c:	d514      	bpl.n	24001188 <HAL_ADC_IRQHandler+0xa0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2400115e:	4618      	mov	r0, r3
24001160:	f7ff ffb8 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
24001164:	2800      	cmp	r0, #0
24001166:	f040 80b2 	bne.w	240012ce <HAL_ADC_IRQHandler+0x1e6>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2400116a:	685a      	ldr	r2, [r3, #4]
2400116c:	f022 020c 	bic.w	r2, r2, #12
24001170:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
24001172:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24001178:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
2400117a:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400117c:	04db      	lsls	r3, r3, #19
2400117e:	d403      	bmi.n	24001188 <HAL_ADC_IRQHandler+0xa0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24001180:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001182:	f043 0301 	orr.w	r3, r3, #1
24001186:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
24001188:	4620      	mov	r0, r4
2400118a:	f7ff fcd1 	bl	24000b30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
2400118e:	6823      	ldr	r3, [r4, #0]
24001190:	220c      	movs	r2, #12
24001192:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24001194:	06a8      	lsls	r0, r5, #26
24001196:	d501      	bpl.n	2400119c <HAL_ADC_IRQHandler+0xb4>
24001198:	06b1      	lsls	r1, r6, #26
2400119a:	d403      	bmi.n	240011a4 <HAL_ADC_IRQHandler+0xbc>
2400119c:	066a      	lsls	r2, r5, #25
2400119e:	d53a      	bpl.n	24001216 <HAL_ADC_IRQHandler+0x12e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240011a0:	0673      	lsls	r3, r6, #25
240011a2:	d538      	bpl.n	24001216 <HAL_ADC_IRQHandler+0x12e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240011a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
240011a6:	06d8      	lsls	r0, r3, #27
240011a8:	d403      	bmi.n	240011b2 <HAL_ADC_IRQHandler+0xca>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
240011aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
240011ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
240011b0:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
240011b2:	6823      	ldr	r3, [r4, #0]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240011b4:	4a5a      	ldr	r2, [pc, #360]	; (24001320 <HAL_ADC_IRQHandler+0x238>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
240011b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
240011b8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
240011ba:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
240011bc:	f401 71c0 	and.w	r1, r1, #384	; 0x180
240011c0:	f040 808e 	bne.w	240012e0 <HAL_ADC_IRQHandler+0x1f8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240011c4:	22c1      	movs	r2, #193	; 0xc1
240011c6:	40fa      	lsrs	r2, r7
240011c8:	07d2      	lsls	r2, r2, #31
240011ca:	f100 8089 	bmi.w	240012e0 <HAL_ADC_IRQHandler+0x1f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
240011ce:	4a55      	ldr	r2, [pc, #340]	; (24001324 <HAL_ADC_IRQHandler+0x23c>)
240011d0:	68d2      	ldr	r2, [r2, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
240011d2:	b9d1      	cbnz	r1, 2400120a <HAL_ADC_IRQHandler+0x122>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
240011d4:	0191      	lsls	r1, r2, #6
240011d6:	d505      	bpl.n	240011e4 <HAL_ADC_IRQHandler+0xfc>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
240011d8:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
240011dc:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
240011e0:	4301      	orrs	r1, r0
240011e2:	d112      	bne.n	2400120a <HAL_ADC_IRQHandler+0x122>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
240011e4:	6819      	ldr	r1, [r3, #0]
240011e6:	0648      	lsls	r0, r1, #25
240011e8:	d50f      	bpl.n	2400120a <HAL_ADC_IRQHandler+0x122>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
240011ea:	0291      	lsls	r1, r2, #10
240011ec:	d40d      	bmi.n	2400120a <HAL_ADC_IRQHandler+0x122>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
240011ee:	689a      	ldr	r2, [r3, #8]
240011f0:	0712      	lsls	r2, r2, #28
240011f2:	d477      	bmi.n	240012e4 <HAL_ADC_IRQHandler+0x1fc>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
240011f4:	685a      	ldr	r2, [r3, #4]
240011f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
240011fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
240011fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
240011fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24001202:	6563      	str	r3, [r4, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
24001204:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001206:	05db      	lsls	r3, r3, #23
24001208:	d575      	bpl.n	240012f6 <HAL_ADC_IRQHandler+0x20e>
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
2400120a:	4620      	mov	r0, r4
2400120c:	f000 fc86 	bl	24001b1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24001210:	6823      	ldr	r3, [r4, #0]
24001212:	2260      	movs	r2, #96	; 0x60
24001214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24001216:	0628      	lsls	r0, r5, #24
24001218:	d50b      	bpl.n	24001232 <HAL_ADC_IRQHandler+0x14a>
2400121a:	0631      	lsls	r1, r6, #24
2400121c:	d509      	bpl.n	24001232 <HAL_ADC_IRQHandler+0x14a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2400121e:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24001220:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24001226:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24001228:	f7ff ff5b 	bl	240010e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
2400122c:	6823      	ldr	r3, [r4, #0]
2400122e:	2280      	movs	r2, #128	; 0x80
24001230:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24001232:	05ea      	lsls	r2, r5, #23
24001234:	d50c      	bpl.n	24001250 <HAL_ADC_IRQHandler+0x168>
24001236:	05f3      	lsls	r3, r6, #23
24001238:	d50a      	bpl.n	24001250 <HAL_ADC_IRQHandler+0x168>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2400123a:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
2400123c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2400123e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24001242:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24001244:	f000 fc6c 	bl	24001b20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24001248:	6823      	ldr	r3, [r4, #0]
2400124a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400124e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24001250:	05a8      	lsls	r0, r5, #22
24001252:	d50c      	bpl.n	2400126e <HAL_ADC_IRQHandler+0x186>
24001254:	05b1      	lsls	r1, r6, #22
24001256:	d50a      	bpl.n	2400126e <HAL_ADC_IRQHandler+0x186>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24001258:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
2400125a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2400125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24001260:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24001262:	f000 fc5e 	bl	24001b22 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24001266:	6823      	ldr	r3, [r4, #0]
24001268:	f44f 7200 	mov.w	r2, #512	; 0x200
2400126c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
2400126e:	06ea      	lsls	r2, r5, #27
24001270:	d518      	bpl.n	240012a4 <HAL_ADC_IRQHandler+0x1bc>
24001272:	06f3      	lsls	r3, r6, #27
24001274:	d516      	bpl.n	240012a4 <HAL_ADC_IRQHandler+0x1bc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24001276:	6b23      	ldr	r3, [r4, #48]	; 0x30
24001278:	b133      	cbz	r3, 24001288 <HAL_ADC_IRQHandler+0x1a0>
      overrun_error = 1UL;
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
2400127a:	2f00      	cmp	r7, #0
2400127c:	d040      	beq.n	24001300 <HAL_ADC_IRQHandler+0x218>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
2400127e:	f8d8 3008 	ldr.w	r3, [r8, #8]
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24001282:	f413 4f40 	tst.w	r3, #49152	; 0xc000
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24001286:	d00a      	beq.n	2400129e <HAL_ADC_IRQHandler+0x1b6>
    }

    if (overrun_error == 1UL)
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24001288:	6d63      	ldr	r3, [r4, #84]	; 0x54
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
2400128a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
2400128c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24001290:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24001292:	6da3      	ldr	r3, [r4, #88]	; 0x58
24001294:	f043 0302 	orr.w	r3, r3, #2
24001298:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
2400129a:	f7ff ff23 	bl	240010e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
2400129e:	6823      	ldr	r3, [r4, #0]
240012a0:	2210      	movs	r2, #16
240012a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
240012a4:	0568      	lsls	r0, r5, #21
240012a6:	d539      	bpl.n	2400131c <HAL_ADC_IRQHandler+0x234>
240012a8:	0571      	lsls	r1, r6, #21
240012aa:	d537      	bpl.n	2400131c <HAL_ADC_IRQHandler+0x234>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
240012ac:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
240012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
240012b2:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
240012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240012b8:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
240012ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
240012bc:	f043 0308 	orr.w	r3, r3, #8
240012c0:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
240012c2:	6823      	ldr	r3, [r4, #0]
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
240012c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
240012c8:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
240012ca:	f000 bc28 	b.w	24001b1e <HAL_ADCEx_InjectedQueueOverflowCallback>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240012ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
240012d0:	f043 0310 	orr.w	r3, r3, #16
240012d4:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240012d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
240012d8:	f043 0301 	orr.w	r3, r3, #1
240012dc:	65a3      	str	r3, [r4, #88]	; 0x58
240012de:	e753      	b.n	24001188 <HAL_ADC_IRQHandler+0xa0>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
240012e0:	68da      	ldr	r2, [r3, #12]
240012e2:	e776      	b.n	240011d2 <HAL_ADC_IRQHandler+0xea>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240012e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
240012e6:	f043 0310 	orr.w	r3, r3, #16
240012ea:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240012ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
240012ee:	f043 0301 	orr.w	r3, r3, #1
240012f2:	65a3      	str	r3, [r4, #88]	; 0x58
240012f4:	e789      	b.n	2400120a <HAL_ADC_IRQHandler+0x122>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240012f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
240012f8:	f043 0301 	orr.w	r3, r3, #1
240012fc:	6563      	str	r3, [r4, #84]	; 0x54
240012fe:	e784      	b.n	2400120a <HAL_ADC_IRQHandler+0x122>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24001300:	6823      	ldr	r3, [r4, #0]
24001302:	68db      	ldr	r3, [r3, #12]
24001304:	f013 0f03 	tst.w	r3, #3
24001308:	e7bd      	b.n	24001286 <HAL_ADC_IRQHandler+0x19e>
2400130a:	f240 2221 	movw	r2, #545	; 0x221
2400130e:	40fa      	lsrs	r2, r7
24001310:	07d2      	lsls	r2, r2, #31
24001312:	f53f af1e 	bmi.w	24001152 <HAL_ADC_IRQHandler+0x6a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24001316:	4a03      	ldr	r2, [pc, #12]	; (24001324 <HAL_ADC_IRQHandler+0x23c>)
24001318:	68d2      	ldr	r2, [r2, #12]
2400131a:	e71b      	b.n	24001154 <HAL_ADC_IRQHandler+0x6c>
}
2400131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24001320:	40022100 	.word	0x40022100
24001324:	40022000 	.word	0x40022000
24001328:	40022300 	.word	0x40022300

2400132c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
2400132c:	2300      	movs	r3, #0
{
2400132e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
24001330:	9301      	str	r3, [sp, #4]
{
24001332:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24001334:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
24001338:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
2400133a:	2b01      	cmp	r3, #1
2400133c:	f000 8189 	beq.w	24001652 <HAL_ADC_ConfigChannel+0x326>
24001340:	2301      	movs	r3, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24001342:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
24001344:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24001348:	4620      	mov	r0, r4
2400134a:	f7ff fec3 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
2400134e:	2800      	cmp	r0, #0
24001350:	f040 817a 	bne.w	24001648 <HAL_ADC_ConfigChannel+0x31c>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24001354:	680a      	ldr	r2, [r1, #0]
24001356:	f3c2 0013 	ubfx	r0, r2, #0, #20
2400135a:	f3c2 6184 	ubfx	r1, r2, #26, #5
2400135e:	2800      	cmp	r0, #0
24001360:	d16b      	bne.n	2400143a <HAL_ADC_ConfigChannel+0x10e>
24001362:	408b      	lsls	r3, r1
24001364:	69e2      	ldr	r2, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24001366:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
2400136a:	271f      	movs	r7, #31
2400136c:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
2400136e:	6872      	ldr	r2, [r6, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24001370:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
24001372:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24001376:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24001378:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
2400137c:	4097      	lsls	r7, r2
2400137e:	4091      	lsls	r1, r2
24001380:	f85c 3000 	ldr.w	r3, [ip, r0]
24001384:	ea23 0307 	bic.w	r3, r3, r7
24001388:	430b      	orrs	r3, r1
2400138a:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2400138e:	4620      	mov	r0, r4
24001390:	f7ff fea0 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24001394:	68a3      	ldr	r3, [r4, #8]
24001396:	f003 0308 	and.w	r3, r3, #8
2400139a:	4318      	orrs	r0, r3
2400139c:	d141      	bne.n	24001422 <HAL_ADC_ConfigChannel+0xf6>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
2400139e:	68b2      	ldr	r2, [r6, #8]
240013a0:	4620      	mov	r0, r4
240013a2:	6831      	ldr	r1, [r6, #0]
240013a4:	f7ff fe82 	bl	240010ac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
240013a8:	68e3      	ldr	r3, [r4, #12]
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
240013aa:	6937      	ldr	r7, [r6, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
240013ac:	f013 0f10 	tst.w	r3, #16
240013b0:	68e3      	ldr	r3, [r4, #12]
240013b2:	6971      	ldr	r1, [r6, #20]
240013b4:	bf0c      	ite	eq
240013b6:	f3c3 0382 	ubfxeq	r3, r3, #2, #3
240013ba:	085b      	lsrne	r3, r3, #1
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
240013bc:	6832      	ldr	r2, [r6, #0]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
240013be:	bf0c      	ite	eq
240013c0:	005b      	lsleq	r3, r3, #1
240013c2:	f003 0308 	andne.w	r3, r3, #8
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
240013c6:	2f04      	cmp	r7, #4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
240013c8:	fa01 f103 	lsl.w	r1, r1, r3
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
240013cc:	d03e      	beq.n	2400144c <HAL_ADC_ConfigChannel+0x120>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
240013ce:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
240013d2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
240013d6:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
240013da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
240013de:	4313      	orrs	r3, r2
240013e0:	430b      	orrs	r3, r1
240013e2:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
240013e6:	7e72      	ldrb	r2, [r6, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
240013e8:	6931      	ldr	r1, [r6, #16]
240013ea:	1e57      	subs	r7, r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
240013ec:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
240013f0:	427a      	negs	r2, r7
240013f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240013f6:	417a      	adcs	r2, r7
240013f8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
240013fc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
24001400:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24001402:	6931      	ldr	r1, [r6, #16]
24001404:	f103 3cff 	add.w	ip, r3, #4294967295
24001408:	6922      	ldr	r2, [r4, #16]
2400140a:	f001 011f 	and.w	r1, r1, #31
2400140e:	f1dc 0300 	rsbs	r3, ip, #0
24001412:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
24001416:	eb43 030c 	adc.w	r3, r3, ip
2400141a:	02db      	lsls	r3, r3, #11
2400141c:	408b      	lsls	r3, r1
2400141e:	4313      	orrs	r3, r2
24001420:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24001422:	4620      	mov	r0, r4
24001424:	f7ff fe52 	bl	240010cc <LL_ADC_IsEnabled>
24001428:	2800      	cmp	r0, #0
2400142a:	d036      	beq.n	2400149a <HAL_ADC_ConfigChannel+0x16e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2400142c:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
2400142e:	2200      	movs	r2, #0
24001430:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
24001434:	4618      	mov	r0, r3
24001436:	b003      	add	sp, #12
24001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2400143a:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
2400143e:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24001442:	2301      	movs	r3, #1
24001444:	f002 021f 	and.w	r2, r2, #31
24001448:	4093      	lsls	r3, r2
2400144a:	e78b      	b.n	24001364 <HAL_ADC_ConfigChannel+0x38>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
2400144c:	6e23      	ldr	r3, [r4, #96]	; 0x60
2400144e:	0691      	lsls	r1, r2, #26
24001450:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
24001454:	ebb3 6f82 	cmp.w	r3, r2, lsl #26
24001458:	d103      	bne.n	24001462 <HAL_ADC_ConfigChannel+0x136>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
2400145a:	6e23      	ldr	r3, [r4, #96]	; 0x60
2400145c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24001460:	6623      	str	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24001462:	6e63      	ldr	r3, [r4, #100]	; 0x64
24001464:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
24001468:	4299      	cmp	r1, r3
2400146a:	d103      	bne.n	24001474 <HAL_ADC_ConfigChannel+0x148>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
2400146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400146e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24001472:	6663      	str	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24001474:	6ea3      	ldr	r3, [r4, #104]	; 0x68
24001476:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
2400147a:	4299      	cmp	r1, r3
2400147c:	d103      	bne.n	24001486 <HAL_ADC_ConfigChannel+0x15a>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
2400147e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
24001480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24001484:	66a3      	str	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24001486:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24001488:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
2400148c:	4299      	cmp	r1, r3
2400148e:	d1c8      	bne.n	24001422 <HAL_ADC_ConfigChannel+0xf6>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
24001490:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24001492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24001496:	66e3      	str	r3, [r4, #108]	; 0x6c
24001498:	e7c3      	b.n	24001422 <HAL_ADC_ConfigChannel+0xf6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
2400149a:	68f7      	ldr	r7, [r6, #12]
2400149c:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
2400149e:	f007 0c18 	and.w	ip, r7, #24
240014a2:	4a6d      	ldr	r2, [pc, #436]	; (24001658 <HAL_ADC_ConfigChannel+0x32c>)
240014a4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
240014a8:	f3c3 0013 	ubfx	r0, r3, #0, #20
240014ac:	fa22 f20c 	lsr.w	r2, r2, ip
240014b0:	ea21 0100 	bic.w	r1, r1, r0
240014b4:	401a      	ands	r2, r3
240014b6:	430a      	orrs	r2, r1
240014b8:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
240014bc:	4a67      	ldr	r2, [pc, #412]	; (2400165c <HAL_ADC_ConfigChannel+0x330>)
240014be:	4297      	cmp	r7, r2
240014c0:	d11c      	bne.n	240014fc <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
240014c2:	2800      	cmp	r0, #0
240014c4:	d14a      	bne.n	2400155c <HAL_ADC_ConfigChannel+0x230>
240014c6:	0e9a      	lsrs	r2, r3, #26
240014c8:	2101      	movs	r1, #1
240014ca:	3201      	adds	r2, #1
240014cc:	f002 071f 	and.w	r7, r2, #31
240014d0:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240014d2:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
240014d4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
240014d8:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240014dc:	d870      	bhi.n	240015c0 <HAL_ADC_ConfigChannel+0x294>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
240014de:	4311      	orrs	r1, r2
240014e0:	2800      	cmp	r0, #0
240014e2:	d157      	bne.n	24001594 <HAL_ADC_ConfigChannel+0x268>
240014e4:	0e9b      	lsrs	r3, r3, #26
240014e6:	3301      	adds	r3, #1
240014e8:	f003 031f 	and.w	r3, r3, #31
240014ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240014f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240014f2:	4319      	orrs	r1, r3
240014f4:	68b2      	ldr	r2, [r6, #8]
240014f6:	4620      	mov	r0, r4
240014f8:	f7ff fdd8 	bl	240010ac <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
240014fc:	6836      	ldr	r6, [r6, #0]
240014fe:	2e00      	cmp	r6, #0
24001500:	da94      	bge.n	2400142c <HAL_ADC_ConfigChannel+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24001502:	4a57      	ldr	r2, [pc, #348]	; (24001660 <HAL_ADC_ConfigChannel+0x334>)
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24001504:	4857      	ldr	r0, [pc, #348]	; (24001664 <HAL_ADC_ConfigChannel+0x338>)
24001506:	4958      	ldr	r1, [pc, #352]	; (24001668 <HAL_ADC_ConfigChannel+0x33c>)
24001508:	6893      	ldr	r3, [r2, #8]
2400150a:	f7ff fddf 	bl	240010cc <LL_ADC_IsEnabled>
2400150e:	4607      	mov	r7, r0
24001510:	4608      	mov	r0, r1
24001512:	f7ff fddb 	bl	240010cc <LL_ADC_IsEnabled>
24001516:	4338      	orrs	r0, r7
24001518:	f040 8090 	bne.w	2400163c <HAL_ADC_ConfigChannel+0x310>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2400151c:	4f53      	ldr	r7, [pc, #332]	; (2400166c <HAL_ADC_ConfigChannel+0x340>)
2400151e:	f003 70e0 	and.w	r0, r3, #29360128	; 0x1c00000
24001522:	42be      	cmp	r6, r7
24001524:	d166      	bne.n	240015f4 <HAL_ADC_ConfigChannel+0x2c8>
24001526:	021b      	lsls	r3, r3, #8
24001528:	d480      	bmi.n	2400142c <HAL_ADC_ConfigChannel+0x100>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
2400152a:	428c      	cmp	r4, r1
2400152c:	f47f af7e 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24001530:	6893      	ldr	r3, [r2, #8]
24001532:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
24001536:	4303      	orrs	r3, r0
24001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2400153c:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
2400153e:	4b4c      	ldr	r3, [pc, #304]	; (24001670 <HAL_ADC_ConfigChannel+0x344>)
24001540:	4a4c      	ldr	r2, [pc, #304]	; (24001674 <HAL_ADC_ConfigChannel+0x348>)
24001542:	681b      	ldr	r3, [r3, #0]
24001544:	fbb3 f3f2 	udiv	r3, r3, r2
24001548:	3301      	adds	r3, #1
2400154a:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
2400154c:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
2400154e:	9b01      	ldr	r3, [sp, #4]
24001550:	2b00      	cmp	r3, #0
24001552:	f43f af6b 	beq.w	2400142c <HAL_ADC_ConfigChannel+0x100>
                wait_loop_index--;
24001556:	9b01      	ldr	r3, [sp, #4]
24001558:	3b01      	subs	r3, #1
2400155a:	e7f7      	b.n	2400154c <HAL_ADC_ConfigChannel+0x220>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2400155c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
24001560:	b132      	cbz	r2, 24001570 <HAL_ADC_ConfigChannel+0x244>
  return __builtin_clz(value);
24001562:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24001566:	3201      	adds	r2, #1
24001568:	f002 021f 	and.w	r2, r2, #31
2400156c:	2a09      	cmp	r2, #9
2400156e:	d816      	bhi.n	2400159e <HAL_ADC_ConfigChannel+0x272>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24001570:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
24001574:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24001578:	3201      	adds	r2, #1
2400157a:	0692      	lsls	r2, r2, #26
2400157c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24001580:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
24001584:	fab7 f787 	clz	r7, r7
24001588:	2101      	movs	r1, #1
2400158a:	3701      	adds	r7, #1
2400158c:	f007 071f 	and.w	r7, r7, #31
24001590:	40b9      	lsls	r1, r7
24001592:	e7a4      	b.n	240014de <HAL_ADC_ConfigChannel+0x1b2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24001594:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
24001598:	fab3 f383 	clz	r3, r3
2400159c:	e7a3      	b.n	240014e6 <HAL_ADC_ConfigChannel+0x1ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2400159e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
240015a2:	fab2 f282 	clz	r2, r2
240015a6:	3201      	adds	r2, #1
240015a8:	0692      	lsls	r2, r2, #26
240015aa:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240015ae:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
240015b2:	fab7 f787 	clz	r7, r7
240015b6:	2101      	movs	r1, #1
240015b8:	3701      	adds	r7, #1
240015ba:	f007 071f 	and.w	r7, r7, #31
240015be:	40b9      	lsls	r1, r7
240015c0:	4311      	orrs	r1, r2
240015c2:	b950      	cbnz	r0, 240015da <HAL_ADC_ConfigChannel+0x2ae>
240015c4:	0e9b      	lsrs	r3, r3, #26
240015c6:	3301      	adds	r3, #1
240015c8:	f003 031f 	and.w	r3, r3, #31
240015cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240015d0:	3b1e      	subs	r3, #30
240015d2:	051b      	lsls	r3, r3, #20
240015d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240015d8:	e78b      	b.n	240014f2 <HAL_ADC_ConfigChannel+0x1c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240015da:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
240015de:	fab2 f282 	clz	r2, r2
240015e2:	2303      	movs	r3, #3
240015e4:	f06f 001d 	mvn.w	r0, #29
240015e8:	3201      	adds	r2, #1
240015ea:	f002 021f 	and.w	r2, r2, #31
240015ee:	fb13 0302 	smlabb	r3, r3, r2, r0
240015f2:	e7ee      	b.n	240015d2 <HAL_ADC_ConfigChannel+0x2a6>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
240015f4:	4f20      	ldr	r7, [pc, #128]	; (24001678 <HAL_ADC_ConfigChannel+0x34c>)
240015f6:	42be      	cmp	r6, r7
240015f8:	d10e      	bne.n	24001618 <HAL_ADC_ConfigChannel+0x2ec>
240015fa:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
240015fe:	f47f af15 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
24001602:	428c      	cmp	r4, r1
24001604:	f47f af12 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
24001608:	6891      	ldr	r1, [r2, #8]
2400160a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
2400160e:	4301      	orrs	r1, r0
24001610:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
24001614:	6091      	str	r1, [r2, #8]
}
24001616:	e70a      	b.n	2400142e <HAL_ADC_ConfigChannel+0x102>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
24001618:	4f18      	ldr	r7, [pc, #96]	; (2400167c <HAL_ADC_ConfigChannel+0x350>)
2400161a:	42be      	cmp	r6, r7
2400161c:	f47f af06 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
24001620:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
24001624:	f47f af02 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
            if (ADC_VREFINT_INSTANCE(hadc))
24001628:	428c      	cmp	r4, r1
2400162a:	f47f aeff 	bne.w	2400142c <HAL_ADC_ConfigChannel+0x100>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
2400162e:	6891      	ldr	r1, [r2, #8]
24001630:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
24001634:	4301      	orrs	r1, r0
24001636:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
2400163a:	e7eb      	b.n	24001614 <HAL_ADC_ConfigChannel+0x2e8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2400163c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
2400163e:	f043 0320 	orr.w	r3, r3, #32
24001642:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
24001644:	2301      	movs	r3, #1
24001646:	e6f2      	b.n	2400142e <HAL_ADC_ConfigChannel+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24001648:	6d6a      	ldr	r2, [r5, #84]	; 0x54
2400164a:	f042 0220 	orr.w	r2, r2, #32
2400164e:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
24001650:	e6ed      	b.n	2400142e <HAL_ADC_ConfigChannel+0x102>
  __HAL_LOCK(hadc);
24001652:	2302      	movs	r3, #2
24001654:	e6ee      	b.n	24001434 <HAL_ADC_ConfigChannel+0x108>
24001656:	bf00      	nop
24001658:	000fffff 	.word	0x000fffff
2400165c:	47ff0000 	.word	0x47ff0000
24001660:	40022300 	.word	0x40022300
24001664:	40022000 	.word	0x40022000
24001668:	40022100 	.word	0x40022100
2400166c:	cb840000 	.word	0xcb840000
24001670:	2401a5b8 	.word	0x2401a5b8
24001674:	00030d40 	.word	0x00030d40
24001678:	bac04000 	.word	0xbac04000
2400167c:	cfb80000 	.word	0xcfb80000

24001680 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24001680:	6802      	ldr	r2, [r0, #0]
{
24001682:	b570      	push	{r4, r5, r6, lr}
24001684:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24001686:	4610      	mov	r0, r2
24001688:	f7ff fd20 	bl	240010cc <LL_ADC_IsEnabled>
2400168c:	b108      	cbz	r0, 24001692 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
2400168e:	2000      	movs	r0, #0
}
24001690:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
24001692:	6891      	ldr	r1, [r2, #8]
24001694:	4b1c      	ldr	r3, [pc, #112]	; (24001708 <ADC_Enable+0x88>)
24001696:	4219      	tst	r1, r3
24001698:	d009      	beq.n	240016ae <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2400169a:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
2400169c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2400169e:	f043 0310 	orr.w	r3, r3, #16
240016a2:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240016a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
240016a6:	f043 0301 	orr.w	r3, r3, #1
240016aa:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
240016ac:	e7f0      	b.n	24001690 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
240016ae:	6893      	ldr	r3, [r2, #8]
240016b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240016b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
240016b8:	f043 0301 	orr.w	r3, r3, #1
240016bc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
240016be:	f7ff fcdd 	bl	2400107c <HAL_GetTick>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240016c2:	6821      	ldr	r1, [r4, #0]
240016c4:	4a11      	ldr	r2, [pc, #68]	; (2400170c <ADC_Enable+0x8c>)
    tickstart = HAL_GetTick();
240016c6:	4605      	mov	r5, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
240016c8:	4b11      	ldr	r3, [pc, #68]	; (24001710 <ADC_Enable+0x90>)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240016ca:	4291      	cmp	r1, r2
240016cc:	689b      	ldr	r3, [r3, #8]
240016ce:	d101      	bne.n	240016d4 <ADC_Enable+0x54>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240016d0:	06db      	lsls	r3, r3, #27
240016d2:	d1dc      	bne.n	2400168e <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
240016d4:	4e0f      	ldr	r6, [pc, #60]	; (24001714 <ADC_Enable+0x94>)
240016d6:	e011      	b.n	240016fc <ADC_Enable+0x7c>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240016d8:	4610      	mov	r0, r2
240016da:	f7ff fcf7 	bl	240010cc <LL_ADC_IsEnabled>
240016de:	b920      	cbnz	r0, 240016ea <ADC_Enable+0x6a>
240016e0:	6893      	ldr	r3, [r2, #8]
240016e2:	4033      	ands	r3, r6
240016e4:	f043 0301 	orr.w	r3, r3, #1
240016e8:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
240016ea:	f7ff fcc7 	bl	2400107c <HAL_GetTick>
240016ee:	1b40      	subs	r0, r0, r5
240016f0:	2802      	cmp	r0, #2
240016f2:	d903      	bls.n	240016fc <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
240016f4:	6823      	ldr	r3, [r4, #0]
240016f6:	681b      	ldr	r3, [r3, #0]
240016f8:	07d8      	lsls	r0, r3, #31
240016fa:	d5ce      	bpl.n	2400169a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
240016fc:	6822      	ldr	r2, [r4, #0]
240016fe:	6813      	ldr	r3, [r2, #0]
24001700:	07d9      	lsls	r1, r3, #31
24001702:	d5e9      	bpl.n	240016d8 <ADC_Enable+0x58>
24001704:	e7c3      	b.n	2400168e <ADC_Enable+0xe>
24001706:	bf00      	nop
24001708:	8000003f 	.word	0x8000003f
2400170c:	40022100 	.word	0x40022100
24001710:	40022300 	.word	0x40022300
24001714:	7fffffc0 	.word	0x7fffffc0

24001718 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24001718:	4b4e      	ldr	r3, [pc, #312]	; (24001854 <HAL_ADC_Start_IT+0x13c>)
{
2400171a:	b570      	push	{r4, r5, r6, lr}
2400171c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2400171e:	6800      	ldr	r0, [r0, #0]
24001720:	689e      	ldr	r6, [r3, #8]
24001722:	f7ff fcd7 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
24001726:	4605      	mov	r5, r0
24001728:	2800      	cmp	r0, #0
2400172a:	f040 808d 	bne.w	24001848 <HAL_ADC_Start_IT+0x130>
    __HAL_LOCK(hadc);
2400172e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
24001732:	2b01      	cmp	r3, #1
24001734:	f000 8088 	beq.w	24001848 <HAL_ADC_Start_IT+0x130>
24001738:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
2400173a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
2400173c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
24001740:	f7ff ff9e 	bl	24001680 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
24001744:	2800      	cmp	r0, #0
24001746:	d17c      	bne.n	24001842 <HAL_ADC_Start_IT+0x12a>
      ADC_STATE_CLR_SET(hadc->State,
24001748:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400174a:	f006 011f 	and.w	r1, r6, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2400174e:	4a42      	ldr	r2, [pc, #264]	; (24001858 <HAL_ADC_Start_IT+0x140>)
      ADC_STATE_CLR_SET(hadc->State,
24001750:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24001754:	f023 0301 	bic.w	r3, r3, #1
24001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400175c:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2400175e:	6823      	ldr	r3, [r4, #0]
24001760:	4293      	cmp	r3, r2
24001762:	d073      	beq.n	2400184c <HAL_ADC_Start_IT+0x134>
24001764:	461a      	mov	r2, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24001766:	6d65      	ldr	r5, [r4, #84]	; 0x54
24001768:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
2400176c:	6565      	str	r5, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
2400176e:	6d65      	ldr	r5, [r4, #84]	; 0x54
24001770:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
24001774:	d002      	beq.n	2400177c <HAL_ADC_Start_IT+0x64>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
24001776:	6da5      	ldr	r5, [r4, #88]	; 0x58
24001778:	f025 0506 	bic.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
2400177c:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2400177e:	251c      	movs	r5, #28
24001780:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
24001782:	2500      	movs	r5, #0
24001784:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
24001788:	685d      	ldr	r5, [r3, #4]
2400178a:	f025 051c 	bic.w	r5, r5, #28
2400178e:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
24001790:	6925      	ldr	r5, [r4, #16]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
24001792:	685e      	ldr	r6, [r3, #4]
      switch (hadc->Init.EOCSelection)
24001794:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
24001796:	bf0c      	ite	eq
24001798:	f046 0608 	orreq.w	r6, r6, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
2400179c:	f046 0604 	orrne.w	r6, r6, #4
240017a0:	605e      	str	r6, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
240017a2:	6b26      	ldr	r6, [r4, #48]	; 0x30
240017a4:	b91e      	cbnz	r6, 240017ae <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
240017a6:	685e      	ldr	r6, [r3, #4]
240017a8:	f046 0610 	orr.w	r6, r6, #16
240017ac:	605e      	str	r6, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240017ae:	4293      	cmp	r3, r2
240017b0:	d005      	beq.n	240017be <HAL_ADC_Start_IT+0xa6>
240017b2:	f240 2621 	movw	r6, #545	; 0x221
240017b6:	fa26 f101 	lsr.w	r1, r6, r1
240017ba:	07ce      	lsls	r6, r1, #31
240017bc:	d522      	bpl.n	24001804 <HAL_ADC_Start_IT+0xec>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
240017be:	68da      	ldr	r2, [r3, #12]
240017c0:	0191      	lsls	r1, r2, #6
240017c2:	d50f      	bpl.n	240017e4 <HAL_ADC_Start_IT+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
240017c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
240017c6:	2d08      	cmp	r5, #8
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
240017c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
240017cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240017d0:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
240017d2:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
240017d4:	d10f      	bne.n	240017f6 <HAL_ADC_Start_IT+0xde>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
240017d6:	f022 0220 	bic.w	r2, r2, #32
240017da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
240017dc:	685a      	ldr	r2, [r3, #4]
240017de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
240017e2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
240017e4:	689a      	ldr	r2, [r3, #8]
240017e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
240017ea:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
240017ee:	f042 0204 	orr.w	r2, r2, #4
240017f2:	609a      	str	r2, [r3, #8]
}
240017f4:	bd70      	pop	{r4, r5, r6, pc}
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
240017f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
240017fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
240017fc:	685a      	ldr	r2, [r3, #4]
240017fe:	f042 0220 	orr.w	r2, r2, #32
24001802:	e7ee      	b.n	240017e2 <HAL_ADC_Start_IT+0xca>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24001804:	6d61      	ldr	r1, [r4, #84]	; 0x54
24001806:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2400180a:	6561      	str	r1, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
2400180c:	68d2      	ldr	r2, [r2, #12]
2400180e:	0192      	lsls	r2, r2, #6
24001810:	d5f0      	bpl.n	240017f4 <HAL_ADC_Start_IT+0xdc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24001812:	6d62      	ldr	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
24001814:	2d08      	cmp	r5, #8
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24001816:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
2400181a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400181e:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24001820:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
24001822:	d107      	bne.n	24001834 <HAL_ADC_Start_IT+0x11c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
24001824:	f022 0220 	bic.w	r2, r2, #32
24001828:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
2400182a:	685a      	ldr	r2, [r3, #4]
2400182c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24001830:	605a      	str	r2, [r3, #4]
              break;
24001832:	e7df      	b.n	240017f4 <HAL_ADC_Start_IT+0xdc>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24001834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24001838:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
2400183a:	685a      	ldr	r2, [r3, #4]
2400183c:	f042 0220 	orr.w	r2, r2, #32
24001840:	e7f6      	b.n	24001830 <HAL_ADC_Start_IT+0x118>
      __HAL_UNLOCK(hadc);
24001842:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
24001846:	e7d5      	b.n	240017f4 <HAL_ADC_Start_IT+0xdc>
    tmp_hal_status = HAL_BUSY;
24001848:	2002      	movs	r0, #2
2400184a:	e7d3      	b.n	240017f4 <HAL_ADC_Start_IT+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2400184c:	4a03      	ldr	r2, [pc, #12]	; (2400185c <HAL_ADC_Start_IT+0x144>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2400184e:	2900      	cmp	r1, #0
24001850:	d089      	beq.n	24001766 <HAL_ADC_Start_IT+0x4e>
24001852:	e78c      	b.n	2400176e <HAL_ADC_Start_IT+0x56>
24001854:	40022300 	.word	0x40022300
24001858:	40022100 	.word	0x40022100
2400185c:	40022000 	.word	0x40022000

24001860 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
24001860:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
24001862:	4b36      	ldr	r3, [pc, #216]	; (2400193c <ADC_ConfigureBoostMode+0xdc>)
{
24001864:	4604      	mov	r4, r0
24001866:	4d36      	ldr	r5, [pc, #216]	; (24001940 <ADC_ConfigureBoostMode+0xe0>)
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
24001868:	689b      	ldr	r3, [r3, #8]
2400186a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
2400186e:	d021      	beq.n	240018b4 <ADC_ConfigureBoostMode+0x54>
  {
    freq = HAL_RCC_GetHCLKFreq();
24001870:	f002 f828 	bl	240038c4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
24001874:	6863      	ldr	r3, [r4, #4]
24001876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400187a:	d005      	beq.n	24001888 <ADC_ConfigureBoostMode+0x28>
2400187c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24001880:	d006      	beq.n	24001890 <ADC_ConfigureBoostMode+0x30>
24001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24001886:	d104      	bne.n	24001892 <ADC_ConfigureBoostMode+0x32>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
24001888:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
2400188a:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
2400188e:	e000      	b.n	24001892 <ADC_ConfigureBoostMode+0x32>
        freq /= 4UL;
24001890:	0880      	lsrs	r0, r0, #2
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
24001892:	42a8      	cmp	r0, r5
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
24001894:	6822      	ldr	r2, [r4, #0]
  if (freq <= 6250000UL)
24001896:	d94c      	bls.n	24001932 <ADC_ConfigureBoostMode+0xd2>
  else if (freq <= 12500000UL)
24001898:	4b2a      	ldr	r3, [pc, #168]	; (24001944 <ADC_ConfigureBoostMode+0xe4>)
2400189a:	4298      	cmp	r0, r3
2400189c:	d93b      	bls.n	24001916 <ADC_ConfigureBoostMode+0xb6>
  else if (freq <= 25000000UL)
2400189e:	4b2a      	ldr	r3, [pc, #168]	; (24001948 <ADC_ConfigureBoostMode+0xe8>)
240018a0:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
240018a2:	6893      	ldr	r3, [r2, #8]
240018a4:	bf96      	itet	ls
240018a6:	f423 7340 	bicls.w	r3, r3, #768	; 0x300
  }
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
240018aa:	f443 7340 	orrhi.w	r3, r3, #768	; 0x300
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
240018ae:	f443 7300 	orrls.w	r3, r3, #512	; 0x200
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
240018b2:	e036      	b.n	24001922 <ADC_ConfigureBoostMode+0xc2>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
240018b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
240018b8:	2100      	movs	r1, #0
240018ba:	f003 f815 	bl	240048e8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
240018be:	6863      	ldr	r3, [r4, #4]
240018c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
240018c4:	d031      	beq.n	2400192a <ADC_ConfigureBoostMode+0xca>
240018c6:	d81d      	bhi.n	24001904 <ADC_ConfigureBoostMode+0xa4>
240018c8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
240018cc:	d02b      	beq.n	24001926 <ADC_ConfigureBoostMode+0xc6>
240018ce:	d814      	bhi.n	240018fa <ADC_ConfigureBoostMode+0x9a>
240018d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240018d4:	d008      	beq.n	240018e8 <ADC_ConfigureBoostMode+0x88>
240018d6:	d80a      	bhi.n	240018ee <ADC_ConfigureBoostMode+0x8e>
240018d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
240018dc:	d004      	beq.n	240018e8 <ADC_ConfigureBoostMode+0x88>
240018de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
240018e2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
240018e6:	d1d4      	bne.n	24001892 <ADC_ConfigureBoostMode+0x32>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
240018e8:	0c9b      	lsrs	r3, r3, #18
240018ea:	005b      	lsls	r3, r3, #1
240018ec:	e7cd      	b.n	2400188a <ADC_ConfigureBoostMode+0x2a>
    switch (hadc->Init.ClockPrescaler)
240018ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
240018f2:	d0f9      	beq.n	240018e8 <ADC_ConfigureBoostMode+0x88>
240018f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
240018f8:	e7f5      	b.n	240018e6 <ADC_ConfigureBoostMode+0x86>
240018fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240018fe:	d1c8      	bne.n	24001892 <ADC_ConfigureBoostMode+0x32>
        freq /= 32UL;
24001900:	0940      	lsrs	r0, r0, #5
        break;
24001902:	e7c6      	b.n	24001892 <ADC_ConfigureBoostMode+0x32>
    switch (hadc->Init.ClockPrescaler)
24001904:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
24001908:	d011      	beq.n	2400192e <ADC_ConfigureBoostMode+0xce>
2400190a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
2400190e:	d1c0      	bne.n	24001892 <ADC_ConfigureBoostMode+0x32>
  if (freq <= 6250000UL)
24001910:	ebb5 2f10 	cmp.w	r5, r0, lsr #8
24001914:	d20d      	bcs.n	24001932 <ADC_ConfigureBoostMode+0xd2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
24001916:	6822      	ldr	r2, [r4, #0]
24001918:	6893      	ldr	r3, [r2, #8]
2400191a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
24001922:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
24001924:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 16UL;
24001926:	0900      	lsrs	r0, r0, #4
        break;
24001928:	e7b3      	b.n	24001892 <ADC_ConfigureBoostMode+0x32>
        freq /= 64UL;
2400192a:	0980      	lsrs	r0, r0, #6
        break;
2400192c:	e7b1      	b.n	24001892 <ADC_ConfigureBoostMode+0x32>
        freq /= 128UL;
2400192e:	09c0      	lsrs	r0, r0, #7
        break;
24001930:	e7af      	b.n	24001892 <ADC_ConfigureBoostMode+0x32>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
24001932:	6822      	ldr	r2, [r4, #0]
24001934:	6893      	ldr	r3, [r2, #8]
24001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400193a:	e7f2      	b.n	24001922 <ADC_ConfigureBoostMode+0xc2>
2400193c:	40022300 	.word	0x40022300
24001940:	00bebc21 	.word	0x00bebc21
24001944:	017d7841 	.word	0x017d7841
24001948:	02faf081 	.word	0x02faf081

2400194c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
2400194c:	2300      	movs	r3, #0
{
2400194e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
24001950:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
24001952:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
24001954:	2800      	cmp	r0, #0
24001956:	f000 80c9 	beq.w	24001aec <HAL_ADC_Init+0x1a0>
  if (hadc->State == HAL_ADC_STATE_RESET)
2400195a:	6d45      	ldr	r5, [r0, #84]	; 0x54
2400195c:	b925      	cbnz	r5, 24001968 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
2400195e:	f7fe fb99 	bl	24000094 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
24001962:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
24001964:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
24001968:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
2400196a:	689a      	ldr	r2, [r3, #8]
2400196c:	0090      	lsls	r0, r2, #2
2400196e:	d505      	bpl.n	2400197c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
24001970:	689a      	ldr	r2, [r3, #8]
24001972:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
24001976:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
2400197a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
2400197c:	689a      	ldr	r2, [r3, #8]
2400197e:	00d1      	lsls	r1, r2, #3
24001980:	f140 8090 	bpl.w	24001aa4 <HAL_ADC_Init+0x158>
24001984:	689a      	ldr	r2, [r3, #8]
24001986:	00d2      	lsls	r2, r2, #3
24001988:	f100 80a2 	bmi.w	24001ad0 <HAL_ADC_Init+0x184>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2400198c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
2400198e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24001990:	f042 0210 	orr.w	r2, r2, #16
24001994:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24001996:	6da2      	ldr	r2, [r4, #88]	; 0x58
24001998:	f042 0201 	orr.w	r2, r2, #1
2400199c:	65a2      	str	r2, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2400199e:	4618      	mov	r0, r3
240019a0:	f7ff fb98 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240019a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
240019a6:	f002 0210 	and.w	r2, r2, #16
240019aa:	4310      	orrs	r0, r2
240019ac:	f040 809a 	bne.w	24001ae4 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
240019b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240019b2:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
240019b4:	f422 7281 	bic.w	r2, r2, #258	; 0x102
240019b8:	f042 0202 	orr.w	r2, r2, #2
240019bc:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240019be:	f7ff fb85 	bl	240010cc <LL_ADC_IsEnabled>
240019c2:	b978      	cbnz	r0, 240019e4 <HAL_ADC_Init+0x98>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
240019c4:	484a      	ldr	r0, [pc, #296]	; (24001af0 <HAL_ADC_Init+0x1a4>)
240019c6:	f7ff fb81 	bl	240010cc <LL_ADC_IsEnabled>
240019ca:	4602      	mov	r2, r0
240019cc:	4849      	ldr	r0, [pc, #292]	; (24001af4 <HAL_ADC_Init+0x1a8>)
240019ce:	f7ff fb7d 	bl	240010cc <LL_ADC_IsEnabled>
240019d2:	4310      	orrs	r0, r2
240019d4:	d106      	bne.n	240019e4 <HAL_ADC_Init+0x98>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
240019d6:	4948      	ldr	r1, [pc, #288]	; (24001af8 <HAL_ADC_Init+0x1ac>)
240019d8:	6860      	ldr	r0, [r4, #4]
240019da:	688a      	ldr	r2, [r1, #8]
240019dc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
240019e0:	4302      	orrs	r2, r0
240019e2:	608a      	str	r2, [r1, #8]
                hadc->Init.Overrun                                                    |
240019e4:	68a0      	ldr	r0, [r4, #8]
240019e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
240019e8:	7f21      	ldrb	r1, [r4, #28]
                hadc->Init.Overrun                                                    |
240019ea:	4302      	orrs	r2, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240019ec:	7d60      	ldrb	r0, [r4, #21]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
240019ee:	2901      	cmp	r1, #1
                hadc->Init.Overrun                                                    |
240019f0:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240019f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
240019f8:	bf02      	ittt	eq
240019fa:	6a21      	ldreq	r1, [r4, #32]
240019fc:	f101 31ff 	addeq.w	r1, r1, #4294967295
24001a00:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
24001a04:	6a61      	ldr	r1, [r4, #36]	; 0x24
24001a06:	b121      	cbz	r1, 24001a12 <HAL_ADC_Init+0xc6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
24001a08:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
24001a0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
24001a0e:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
24001a10:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
24001a12:	68d8      	ldr	r0, [r3, #12]
24001a14:	4939      	ldr	r1, [pc, #228]	; (24001afc <HAL_ADC_Init+0x1b0>)
24001a16:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24001a18:	4618      	mov	r0, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
24001a1a:	4311      	orrs	r1, r2
24001a1c:	60d9      	str	r1, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24001a1e:	f7ff fb59 	bl	240010d4 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24001a22:	689a      	ldr	r2, [r3, #8]
24001a24:	f002 0208 	and.w	r2, r2, #8
24001a28:	4310      	orrs	r0, r2
24001a2a:	d127      	bne.n	24001a7c <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
24001a2c:	68da      	ldr	r2, [r3, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
24001a2e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
24001a30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24001a34:	f022 0203 	bic.w	r2, r2, #3
24001a38:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
24001a3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24001a3e:	430a      	orrs	r2, r1
24001a40:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
24001a42:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
24001a46:	2a01      	cmp	r2, #1
24001a48:	d144      	bne.n	24001ad4 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24001a4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24001a4c:	6918      	ldr	r0, [r3, #16]
24001a4e:	1e51      	subs	r1, r2, #1
24001a50:	e9d4 2610 	ldrd	r2, r6, [r4, #64]	; 0x40
24001a54:	4332      	orrs	r2, r6
24001a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
24001a5a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24001a5c:	430a      	orrs	r2, r1
24001a5e:	4928      	ldr	r1, [pc, #160]	; (24001b00 <HAL_ADC_Init+0x1b4>)
24001a60:	4001      	ands	r1, r0
24001a62:	430a      	orrs	r2, r1
24001a64:	f042 0201 	orr.w	r2, r2, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
24001a68:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
24001a6a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
24001a6c:	691a      	ldr	r2, [r3, #16]
24001a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
24001a70:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
24001a74:	430a      	orrs	r2, r1
24001a76:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
24001a78:	f7ff fef2 	bl	24001860 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
24001a7c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
24001a7e:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
24001a80:	2b01      	cmp	r3, #1
24001a82:	d12b      	bne.n	24001adc <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
24001a84:	6b11      	ldr	r1, [r2, #48]	; 0x30
24001a86:	69a3      	ldr	r3, [r4, #24]
24001a88:	f021 010f 	bic.w	r1, r1, #15
24001a8c:	3b01      	subs	r3, #1
24001a8e:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
24001a90:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
24001a92:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001a94:	f023 0303 	bic.w	r3, r3, #3
24001a98:	f043 0301 	orr.w	r3, r3, #1
24001a9c:	6563      	str	r3, [r4, #84]	; 0x54
}
24001a9e:	4628      	mov	r0, r5
24001aa0:	b002      	add	sp, #8
24001aa2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
24001aa4:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
24001aa6:	4917      	ldr	r1, [pc, #92]	; (24001b04 <HAL_ADC_Init+0x1b8>)
24001aa8:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
24001aac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
24001ab0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
24001ab4:	609a      	str	r2, [r3, #8]
24001ab6:	4a14      	ldr	r2, [pc, #80]	; (24001b08 <HAL_ADC_Init+0x1bc>)
24001ab8:	6812      	ldr	r2, [r2, #0]
24001aba:	fbb2 f2f1 	udiv	r2, r2, r1
24001abe:	3201      	adds	r2, #1
      wait_loop_index--;
24001ac0:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
24001ac2:	9a01      	ldr	r2, [sp, #4]
24001ac4:	2a00      	cmp	r2, #0
24001ac6:	f43f af5d 	beq.w	24001984 <HAL_ADC_Init+0x38>
      wait_loop_index--;
24001aca:	9a01      	ldr	r2, [sp, #4]
24001acc:	3a01      	subs	r2, #1
24001ace:	e7f7      	b.n	24001ac0 <HAL_ADC_Init+0x174>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24001ad0:	2500      	movs	r5, #0
24001ad2:	e764      	b.n	2400199e <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
24001ad4:	691a      	ldr	r2, [r3, #16]
24001ad6:	f022 0201 	bic.w	r2, r2, #1
24001ada:	e7c5      	b.n	24001a68 <HAL_ADC_Init+0x11c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
24001adc:	6b13      	ldr	r3, [r2, #48]	; 0x30
24001ade:	f023 030f 	bic.w	r3, r3, #15
24001ae2:	e7d5      	b.n	24001a90 <HAL_ADC_Init+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24001ae4:	6d63      	ldr	r3, [r4, #84]	; 0x54
24001ae6:	f043 0310 	orr.w	r3, r3, #16
24001aea:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
24001aec:	2501      	movs	r5, #1
24001aee:	e7d6      	b.n	24001a9e <HAL_ADC_Init+0x152>
24001af0:	40022000 	.word	0x40022000
24001af4:	40022100 	.word	0x40022100
24001af8:	40022300 	.word	0x40022300
24001afc:	fff0c003 	.word	0xfff0c003
24001b00:	fc00f81e 	.word	0xfc00f81e
24001b04:	00030d40 	.word	0x00030d40
24001b08:	2401a5b8 	.word	0x2401a5b8

24001b0c <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24001b0c:	6880      	ldr	r0, [r0, #8]
}
24001b0e:	f000 0001 	and.w	r0, r0, #1
24001b12:	4770      	bx	lr

24001b14 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24001b14:	6880      	ldr	r0, [r0, #8]
}
24001b16:	f3c0 0080 	ubfx	r0, r0, #2, #1
24001b1a:	4770      	bx	lr

24001b1c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24001b1c:	4770      	bx	lr

24001b1e <HAL_ADCEx_InjectedQueueOverflowCallback>:
24001b1e:	4770      	bx	lr

24001b20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
24001b20:	4770      	bx	lr

24001b22 <HAL_ADCEx_LevelOutOfWindow3Callback>:
24001b22:	4770      	bx	lr

24001b24 <HAL_ADCEx_EndOfSamplingCallback>:
24001b24:	4770      	bx	lr
	...

24001b28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
24001b28:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24001b2a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
24001b2e:	b09a      	sub	sp, #104	; 0x68
24001b30:	4602      	mov	r2, r0
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
24001b32:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
24001b34:	2b01      	cmp	r3, #1
24001b36:	d052      	beq.n	24001bde <HAL_ADCEx_MultiModeConfigChannel+0xb6>
24001b38:	2301      	movs	r3, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24001b3a:	4c2a      	ldr	r4, [pc, #168]	; (24001be4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  __HAL_LOCK(hadc);
24001b3c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24001b40:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24001b42:	6816      	ldr	r6, [r2, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24001b44:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24001b46:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
24001b48:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24001b4a:	d10d      	bne.n	24001b68 <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24001b4c:	4826      	ldr	r0, [pc, #152]	; (24001be8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
24001b4e:	f7ff ffe1 	bl	24001b14 <LL_ADC_REG_IsConversionOngoing>
24001b52:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24001b54:	4630      	mov	r0, r6
24001b56:	f7ff ffdd 	bl	24001b14 <LL_ADC_REG_IsConversionOngoing>
24001b5a:	4320      	orrs	r0, r4
24001b5c:	d00d      	beq.n	24001b7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24001b5e:	6d51      	ldr	r1, [r2, #84]	; 0x54
24001b60:	f041 0120 	orr.w	r1, r1, #32
24001b64:	6551      	str	r1, [r2, #84]	; 0x54
24001b66:	e027      	b.n	24001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24001b68:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
24001b6a:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    return HAL_ERROR;
24001b6e:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24001b70:	f041 0120 	orr.w	r1, r1, #32
24001b74:	6551      	str	r1, [r2, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
24001b76:	b01a      	add	sp, #104	; 0x68
24001b78:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24001b7a:	4c1c      	ldr	r4, [pc, #112]	; (24001bec <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24001b7c:	68a3      	ldr	r3, [r4, #8]
24001b7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24001b82:	b1dd      	cbz	r5, 24001bbc <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24001b84:	6848      	ldr	r0, [r1, #4]
24001b86:	4303      	orrs	r3, r0
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24001b88:	4630      	mov	r0, r6
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24001b8a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24001b8c:	f7ff ffbe 	bl	24001b0c <LL_ADC_IsEnabled>
24001b90:	4603      	mov	r3, r0
24001b92:	4815      	ldr	r0, [pc, #84]	; (24001be8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
24001b94:	f7ff ffba 	bl	24001b0c <LL_ADC_IsEnabled>
24001b98:	4303      	orrs	r3, r0
24001b9a:	d004      	beq.n	24001ba6 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24001b9c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
24001b9e:	2300      	movs	r3, #0
24001ba0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
24001ba4:	e7e7      	b.n	24001b76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
24001ba6:	6889      	ldr	r1, [r1, #8]
24001ba8:	68a0      	ldr	r0, [r4, #8]
24001baa:	430d      	orrs	r5, r1
24001bac:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
24001bb0:	f021 010f 	bic.w	r1, r1, #15
24001bb4:	430d      	orrs	r5, r1
24001bb6:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
24001bb8:	4618      	mov	r0, r3
24001bba:	e7f0      	b.n	24001b9e <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
24001bbc:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24001bbe:	4630      	mov	r0, r6
24001bc0:	f7ff ffa4 	bl	24001b0c <LL_ADC_IsEnabled>
24001bc4:	4603      	mov	r3, r0
24001bc6:	4808      	ldr	r0, [pc, #32]	; (24001be8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
24001bc8:	f7ff ffa0 	bl	24001b0c <LL_ADC_IsEnabled>
24001bcc:	4303      	orrs	r3, r0
24001bce:	d1e5      	bne.n	24001b9c <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
24001bd0:	68a1      	ldr	r1, [r4, #8]
24001bd2:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
24001bd6:	f021 010f 	bic.w	r1, r1, #15
24001bda:	60a1      	str	r1, [r4, #8]
24001bdc:	e7ec      	b.n	24001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
24001bde:	2002      	movs	r0, #2
24001be0:	e7c9      	b.n	24001b76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
24001be2:	bf00      	nop
24001be4:	40022000 	.word	0x40022000
24001be8:	40022100 	.word	0x40022100
24001bec:	40022300 	.word	0x40022300

24001bf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24001bf0:	4907      	ldr	r1, [pc, #28]	; (24001c10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24001bf2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24001bf4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24001bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24001bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
24001bfe:	0412      	lsls	r2, r2, #16
24001c00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
24001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
24001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
24001c0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24001c0e:	4770      	bx	lr
24001c10:	e000ed00 	.word	0xe000ed00

24001c14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24001c14:	4b16      	ldr	r3, [pc, #88]	; (24001c70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24001c16:	b530      	push	{r4, r5, lr}
24001c18:	68dc      	ldr	r4, [r3, #12]
24001c1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24001c1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24001c22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24001c24:	2b04      	cmp	r3, #4
24001c26:	bf28      	it	cs
24001c28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24001c2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24001c2c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24001c30:	bf8c      	ite	hi
24001c32:	3c03      	subhi	r4, #3
24001c34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24001c36:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
24001c3a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24001c3c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24001c40:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24001c44:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24001c48:	fa03 f304 	lsl.w	r3, r3, r4
24001c4c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24001c50:	ea4f 1303 	mov.w	r3, r3, lsl #4
24001c54:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
24001c56:	db06      	blt.n	24001c66 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24001c58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
24001c5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
24001c60:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24001c64:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24001c66:	f000 000f 	and.w	r0, r0, #15
24001c6a:	4a02      	ldr	r2, [pc, #8]	; (24001c74 <HAL_NVIC_SetPriority+0x60>)
24001c6c:	5413      	strb	r3, [r2, r0]
24001c6e:	e7f9      	b.n	24001c64 <HAL_NVIC_SetPriority+0x50>
24001c70:	e000ed00 	.word	0xe000ed00
24001c74:	e000ed14 	.word	0xe000ed14

24001c78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24001c78:	2800      	cmp	r0, #0
24001c7a:	db07      	blt.n	24001c8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24001c7c:	2301      	movs	r3, #1
24001c7e:	0941      	lsrs	r1, r0, #5
24001c80:	f000 001f 	and.w	r0, r0, #31
24001c84:	4a02      	ldr	r2, [pc, #8]	; (24001c90 <HAL_NVIC_EnableIRQ+0x18>)
24001c86:	4083      	lsls	r3, r0
24001c88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24001c8c:	4770      	bx	lr
24001c8e:	bf00      	nop
24001c90:	e000e100 	.word	0xe000e100

24001c94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24001c94:	3801      	subs	r0, #1
24001c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
24001c9a:	d20b      	bcs.n	24001cb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24001c9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24001ca0:	4a05      	ldr	r2, [pc, #20]	; (24001cb8 <HAL_SYSTICK_Config+0x24>)
24001ca2:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24001ca4:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24001ca6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24001ca8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24001cac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24001cae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24001cb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24001cb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24001cb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24001cb6:	4770      	bx	lr
24001cb8:	e000ed00 	.word	0xe000ed00

24001cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24001cbc:	b510      	push	{r4, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24001cbe:	b128      	cbz	r0, 24001ccc <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
24001cc0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
24001cc4:	2b02      	cmp	r3, #2
24001cc6:	d003      	beq.n	24001cd0 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24001cc8:	2380      	movs	r3, #128	; 0x80
24001cca:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
24001ccc:	2001      	movs	r0, #1
24001cce:	e05d      	b.n	24001d8c <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24001cd0:	6803      	ldr	r3, [r0, #0]
24001cd2:	4a3f      	ldr	r2, [pc, #252]	; (24001dd0 <HAL_DMA_Abort_IT+0x114>)
24001cd4:	4293      	cmp	r3, r2
24001cd6:	d051      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cd8:	3218      	adds	r2, #24
24001cda:	4293      	cmp	r3, r2
24001cdc:	d04e      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cde:	3218      	adds	r2, #24
24001ce0:	4293      	cmp	r3, r2
24001ce2:	d04b      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001ce4:	3218      	adds	r2, #24
24001ce6:	4293      	cmp	r3, r2
24001ce8:	d048      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cea:	3218      	adds	r2, #24
24001cec:	4293      	cmp	r3, r2
24001cee:	d045      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cf0:	3218      	adds	r2, #24
24001cf2:	4293      	cmp	r3, r2
24001cf4:	d042      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cf6:	3218      	adds	r2, #24
24001cf8:	4293      	cmp	r3, r2
24001cfa:	d03f      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001cfc:	3218      	adds	r2, #24
24001cfe:	4293      	cmp	r3, r2
24001d00:	d03c      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d02:	f502 7256 	add.w	r2, r2, #856	; 0x358
24001d06:	4293      	cmp	r3, r2
24001d08:	d038      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d0a:	3218      	adds	r2, #24
24001d0c:	4293      	cmp	r3, r2
24001d0e:	d035      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d10:	3218      	adds	r2, #24
24001d12:	4293      	cmp	r3, r2
24001d14:	d032      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d16:	3218      	adds	r2, #24
24001d18:	4293      	cmp	r3, r2
24001d1a:	d02f      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d1c:	3218      	adds	r2, #24
24001d1e:	4293      	cmp	r3, r2
24001d20:	d02c      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d22:	3218      	adds	r2, #24
24001d24:	4293      	cmp	r3, r2
24001d26:	d029      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d28:	3218      	adds	r2, #24
24001d2a:	4293      	cmp	r3, r2
24001d2c:	d026      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
24001d2e:	3218      	adds	r2, #24
24001d30:	4293      	cmp	r3, r2
24001d32:	d023      	beq.n	24001d7c <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24001d34:	681a      	ldr	r2, [r3, #0]
24001d36:	f022 020e 	bic.w	r2, r2, #14
24001d3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24001d3c:	681a      	ldr	r2, [r3, #0]
24001d3e:	f022 0201 	bic.w	r2, r2, #1
24001d42:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24001d44:	4a23      	ldr	r2, [pc, #140]	; (24001dd4 <HAL_DMA_Abort_IT+0x118>)
24001d46:	4293      	cmp	r3, r2
24001d48:	d121      	bne.n	24001d8e <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24001d4a:	6e02      	ldr	r2, [r0, #96]	; 0x60
24001d4c:	6813      	ldr	r3, [r2, #0]
24001d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24001d52:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24001d54:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
24001d58:	f003 021f 	and.w	r2, r3, #31
24001d5c:	2301      	movs	r3, #1
24001d5e:	4093      	lsls	r3, r2
24001d60:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24001d62:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24001d66:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24001d68:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
24001d6a:	b32b      	cbz	r3, 24001db8 <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24001d6c:	681a      	ldr	r2, [r3, #0]
24001d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24001d72:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24001d74:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
24001d78:	605a      	str	r2, [r3, #4]
24001d7a:	e01d      	b.n	24001db8 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
24001d7c:	2204      	movs	r2, #4
24001d7e:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
24001d82:	681a      	ldr	r2, [r3, #0]
24001d84:	f022 0201 	bic.w	r2, r2, #1
24001d88:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
24001d8a:	2000      	movs	r0, #0
}
24001d8c:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24001d8e:	4a12      	ldr	r2, [pc, #72]	; (24001dd8 <HAL_DMA_Abort_IT+0x11c>)
24001d90:	4293      	cmp	r3, r2
24001d92:	d0da      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001d94:	3214      	adds	r2, #20
24001d96:	4293      	cmp	r3, r2
24001d98:	d0d7      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001d9a:	3214      	adds	r2, #20
24001d9c:	4293      	cmp	r3, r2
24001d9e:	d0d4      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001da0:	3214      	adds	r2, #20
24001da2:	4293      	cmp	r3, r2
24001da4:	d0d1      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001da6:	3214      	adds	r2, #20
24001da8:	4293      	cmp	r3, r2
24001daa:	d0ce      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001dac:	3214      	adds	r2, #20
24001dae:	4293      	cmp	r3, r2
24001db0:	d0cb      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
24001db2:	3214      	adds	r2, #20
24001db4:	4293      	cmp	r3, r2
24001db6:	d0c8      	beq.n	24001d4a <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
24001db8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
24001dba:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
24001dbc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
24001dc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
24001dc2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24001dc6:	b10b      	cbz	r3, 24001dcc <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
24001dc8:	4798      	blx	r3
24001dca:	e7de      	b.n	24001d8a <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
24001dcc:	4618      	mov	r0, r3
24001dce:	e7dd      	b.n	24001d8c <HAL_DMA_Abort_IT+0xd0>
24001dd0:	40020010 	.word	0x40020010
24001dd4:	58025408 	.word	0x58025408
24001dd8:	5802541c 	.word	0x5802541c

24001ddc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
24001ddc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
24001dde:	6804      	ldr	r4, [r0, #0]
24001de0:	9d04      	ldr	r5, [sp, #16]
24001de2:	6c66      	ldr	r6, [r4, #68]	; 0x44
24001de4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
24001de8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
24001dec:	4333      	orrs	r3, r6
24001dee:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
24001df0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
24001df2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
24001df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24001df8:	d130      	bne.n	24001e5c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
24001dfa:	6885      	ldr	r5, [r0, #8]
24001dfc:	b11d      	cbz	r5, 24001e06 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
24001dfe:	2d01      	cmp	r5, #1
24001e00:	d103      	bne.n	24001e0a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
24001e02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
24001e06:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
24001e08:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
24001e0a:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
24001e0c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
24001e10:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
24001e14:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
24001e16:	d107      	bne.n	24001e28 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
24001e18:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
24001e1a:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
24001e1c:	02c9      	lsls	r1, r1, #11
24001e1e:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
24001e22:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
24001e26:	e7ee      	b.n	24001e06 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
24001e28:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
24001e2a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
24001e2e:	d10a      	bne.n	24001e46 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
24001e30:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
24001e32:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
24001e34:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
24001e36:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
24001e38:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
24001e3c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
24001e40:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
24001e44:	e7df      	b.n	24001e06 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
24001e46:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
24001e48:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
24001e4a:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
24001e4c:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
24001e4e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
24001e52:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
24001e56:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
24001e5a:	e7d4      	b.n	24001e06 <DMA2D_SetConfig+0x2a>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
24001e5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24001e60:	d101      	bne.n	24001e66 <DMA2D_SetConfig+0x8a>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
24001e62:	6161      	str	r1, [r4, #20]
24001e64:	e7d0      	b.n	24001e08 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
24001e66:	60e1      	str	r1, [r4, #12]
}
24001e68:	e7ce      	b.n	24001e08 <DMA2D_SetConfig+0x2c>

24001e6a <HAL_DMA2D_Init>:
{
24001e6a:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
24001e6c:	4604      	mov	r4, r0
24001e6e:	2800      	cmp	r0, #0
24001e70:	d036      	beq.n	24001ee0 <HAL_DMA2D_Init+0x76>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
24001e72:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
24001e76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24001e7a:	b91b      	cbnz	r3, 24001e84 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
24001e7c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
24001e80:	f7fe f986 	bl	24000190 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
24001e84:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24001e86:	69e0      	ldr	r0, [r4, #28]
24001e88:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
24001e8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24001e8e:	6823      	ldr	r3, [r4, #0]
24001e90:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24001e92:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24001e94:	6819      	ldr	r1, [r3, #0]
24001e96:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
24001e9a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
24001e9e:	430a      	orrs	r2, r1
24001ea0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24001ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
24001ea4:	68a2      	ldr	r2, [r4, #8]
24001ea6:	f421 7183 	bic.w	r1, r1, #262	; 0x106
24001eaa:	4302      	orrs	r2, r0
24001eac:	f021 0101 	bic.w	r1, r1, #1
24001eb0:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
24001eb2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24001eb4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
24001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24001eb8:	0c12      	lsrs	r2, r2, #16
24001eba:	0412      	lsls	r2, r2, #16
24001ebc:	430a      	orrs	r2, r1
24001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
24001ec0:	6b59      	ldr	r1, [r3, #52]	; 0x34
24001ec2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
24001ec6:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
24001eca:	0552      	lsls	r2, r2, #21
24001ecc:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
24001ed0:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
24001ed2:	430a      	orrs	r2, r1
24001ed4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
24001ed6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
24001ed8:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
24001eda:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
24001ede:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
24001ee0:	2001      	movs	r0, #1
24001ee2:	e7fc      	b.n	24001ede <HAL_DMA2D_Init+0x74>

24001ee4 <HAL_DMA2D_Start>:
{
24001ee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
24001ee6:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
24001eea:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
24001eec:	2d01      	cmp	r5, #1
24001eee:	f04f 0502 	mov.w	r5, #2
24001ef2:	d00f      	beq.n	24001f14 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
24001ef4:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
24001ef8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
24001efa:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
24001efc:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
24001f00:	9500      	str	r5, [sp, #0]
24001f02:	f7ff ff6b 	bl	24001ddc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
24001f06:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
24001f08:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
24001f0a:	6813      	ldr	r3, [r2, #0]
24001f0c:	4333      	orrs	r3, r6
24001f0e:	6013      	str	r3, [r2, #0]
}
24001f10:	b002      	add	sp, #8
24001f12:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
24001f14:	4628      	mov	r0, r5
24001f16:	e7fb      	b.n	24001f10 <HAL_DMA2D_Start+0x2c>

24001f18 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
24001f18:	2300      	movs	r3, #0
{
24001f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
24001f1c:	9301      	str	r3, [sp, #4]
{
24001f1e:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
24001f20:	6803      	ldr	r3, [r0, #0]
{
24001f22:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
24001f24:	681b      	ldr	r3, [r3, #0]
24001f26:	07db      	lsls	r3, r3, #31
24001f28:	d418      	bmi.n	24001f5c <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
24001f2a:	6822      	ldr	r2, [r4, #0]
24001f2c:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
24001f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
24001f30:	4313      	orrs	r3, r2
  if (layer_start != 0U)
24001f32:	069e      	lsls	r6, r3, #26
24001f34:	d506      	bpl.n	24001f44 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
24001f36:	f7ff f8a1 	bl	2400107c <HAL_GetTick>
24001f3a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
24001f3c:	6823      	ldr	r3, [r4, #0]
24001f3e:	685a      	ldr	r2, [r3, #4]
24001f40:	06d2      	lsls	r2, r2, #27
24001f42:	d53e      	bpl.n	24001fc2 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
24001f44:	6823      	ldr	r3, [r4, #0]
24001f46:	2212      	movs	r2, #18
  return HAL_OK;
24001f48:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
24001f4a:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
24001f4c:	2301      	movs	r3, #1
24001f4e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
24001f52:	2300      	movs	r3, #0
24001f54:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
24001f58:	b002      	add	sp, #8
24001f5a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
24001f5c:	f7ff f88e 	bl	2400107c <HAL_GetTick>
24001f60:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
24001f62:	6823      	ldr	r3, [r4, #0]
24001f64:	685a      	ldr	r2, [r3, #4]
24001f66:	0792      	lsls	r2, r2, #30
24001f68:	d4df      	bmi.n	24001f2a <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
24001f6a:	685a      	ldr	r2, [r3, #4]
24001f6c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
24001f6e:	9a01      	ldr	r2, [sp, #4]
24001f70:	f012 0f21 	tst.w	r2, #33	; 0x21
24001f74:	d014      	beq.n	24001fa0 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
24001f76:	9a01      	ldr	r2, [sp, #4]
24001f78:	0695      	lsls	r5, r2, #26
24001f7a:	d503      	bpl.n	24001f84 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
24001f7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
24001f7e:	f042 0202 	orr.w	r2, r2, #2
24001f82:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
24001f84:	9a01      	ldr	r2, [sp, #4]
24001f86:	07d0      	lsls	r0, r2, #31
24001f88:	d503      	bpl.n	24001f92 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
24001f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
24001f8c:	f042 0201 	orr.w	r2, r2, #1
24001f90:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
24001f92:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
24001f94:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
24001f96:	2304      	movs	r3, #4
        return HAL_ERROR;
24001f98:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
24001f9a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        return HAL_ERROR;
24001f9e:	e7d8      	b.n	24001f52 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
24001fa0:	1c69      	adds	r1, r5, #1
24001fa2:	d0df      	beq.n	24001f64 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24001fa4:	f7ff f86a 	bl	2400107c <HAL_GetTick>
24001fa8:	1b80      	subs	r0, r0, r6
24001faa:	42a8      	cmp	r0, r5
24001fac:	d801      	bhi.n	24001fb2 <HAL_DMA2D_PollForTransfer+0x9a>
24001fae:	2d00      	cmp	r5, #0
24001fb0:	d1d7      	bne.n	24001f62 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
24001fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
24001fb4:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
24001fb6:	f043 0320 	orr.w	r3, r3, #32
24001fba:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
24001fbc:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
24001fc0:	e7c7      	b.n	24001f52 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
24001fc2:	685a      	ldr	r2, [r3, #4]
24001fc4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
24001fc6:	9a01      	ldr	r2, [sp, #4]
24001fc8:	f012 0f29 	tst.w	r2, #41	; 0x29
24001fcc:	d016      	beq.n	24001ffc <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
24001fce:	9a01      	ldr	r2, [sp, #4]
24001fd0:	0716      	lsls	r6, r2, #28
24001fd2:	d503      	bpl.n	24001fdc <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
24001fd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
24001fd6:	f042 0204 	orr.w	r2, r2, #4
24001fda:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
24001fdc:	9a01      	ldr	r2, [sp, #4]
24001fde:	0695      	lsls	r5, r2, #26
24001fe0:	d503      	bpl.n	24001fea <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
24001fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
24001fe4:	f042 0202 	orr.w	r2, r2, #2
24001fe8:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
24001fea:	9a01      	ldr	r2, [sp, #4]
24001fec:	07d0      	lsls	r0, r2, #31
24001fee:	d503      	bpl.n	24001ff8 <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
24001ff0:	6e62      	ldr	r2, [r4, #100]	; 0x64
24001ff2:	f042 0201 	orr.w	r2, r2, #1
24001ff6:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
24001ff8:	2229      	movs	r2, #41	; 0x29
24001ffa:	e7cb      	b.n	24001f94 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
24001ffc:	1c69      	adds	r1, r5, #1
24001ffe:	d09e      	beq.n	24001f3e <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24002000:	f7ff f83c 	bl	2400107c <HAL_GetTick>
24002004:	1b80      	subs	r0, r0, r6
24002006:	42a8      	cmp	r0, r5
24002008:	d8d3      	bhi.n	24001fb2 <HAL_DMA2D_PollForTransfer+0x9a>
2400200a:	2d00      	cmp	r5, #0
2400200c:	d196      	bne.n	24001f3c <HAL_DMA2D_PollForTransfer+0x24>
2400200e:	e7d0      	b.n	24001fb2 <HAL_DMA2D_PollForTransfer+0x9a>

24002010 <HAL_DMA2D_ConfigLayer>:
{
24002010:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
24002012:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
24002016:	2b01      	cmp	r3, #1
24002018:	f04f 0302 	mov.w	r3, #2
2400201c:	d032      	beq.n	24002084 <HAL_DMA2D_ConfigLayer+0x74>
2400201e:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
24002020:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
24002024:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
24002028:	221c      	movs	r2, #28
2400202a:	fb02 0201 	mla	r2, r2, r1, r0
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
2400202e:	6b93      	ldr	r3, [r2, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
24002030:	e9d2 450b 	ldrd	r4, r5, [r2, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
24002034:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
24002036:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
2400203a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
2400203c:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
2400203e:	4323      	orrs	r3, r4
24002040:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
24002044:	f1a4 0509 	sub.w	r5, r4, #9
24002048:	2d01      	cmp	r5, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
2400204a:	bf96      	itet	ls
2400204c:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
24002050:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
24002054:	4313      	orrls	r3, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
24002056:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
24002058:	b9b1      	cbnz	r1, 24002088 <HAL_DMA2D_ConfigLayer+0x78>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
2400205a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
2400205c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
2400205e:	4919      	ldr	r1, [pc, #100]	; (240020c4 <HAL_DMA2D_ConfigLayer+0xb4>)
24002060:	ea01 0104 	and.w	r1, r1, r4
24002064:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
24002068:	6a83      	ldr	r3, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
2400206a:	6251      	str	r1, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
2400206c:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
2400206e:	d803      	bhi.n	24002078 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
24002070:	6b43      	ldr	r3, [r0, #52]	; 0x34
24002072:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
24002076:	6293      	str	r3, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
24002078:	2301      	movs	r3, #1
2400207a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
2400207e:	2300      	movs	r3, #0
24002080:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  __HAL_LOCK(hdma2d);
24002084:	4618      	mov	r0, r3
}
24002086:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
24002088:	2c0b      	cmp	r4, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
2400208a:	bf05      	ittet	eq
2400208c:	241c      	moveq	r4, #28
      regMask  |= DMA2D_FGPFCCR_CSS;
2400208e:	4e0e      	ldreq	r6, [pc, #56]	; (240020c8 <HAL_DMA2D_ConfigLayer+0xb8>)
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
24002090:	4e0e      	ldrne	r6, [pc, #56]	; (240020cc <HAL_DMA2D_ConfigLayer+0xbc>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
24002092:	fb04 0401 	mlaeq	r4, r4, r1, r0
24002096:	bf04      	itt	eq
24002098:	6c24      	ldreq	r4, [r4, #64]	; 0x40
2400209a:	ea43 4384 	orreq.w	r3, r3, r4, lsl #18
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
2400209e:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
240020a0:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
240020a2:	ea24 0406 	bic.w	r4, r4, r6
240020a6:	ea43 0304 	orr.w	r3, r3, r4
240020aa:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
240020ac:	f04f 031c 	mov.w	r3, #28
240020b0:	fb03 0101 	mla	r1, r3, r1, r0
240020b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
240020b6:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
240020b8:	d8de      	bhi.n	24002078 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
240020ba:	6b4b      	ldr	r3, [r1, #52]	; 0x34
240020bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
240020c0:	6213      	str	r3, [r2, #32]
240020c2:	e7d9      	b.n	24002078 <HAL_DMA2D_ConfigLayer+0x68>
240020c4:	00ccfff0 	.word	0x00ccfff0
240020c8:	ff3f000f 	.word	0xff3f000f
240020cc:	ff33000f 	.word	0xff33000f

240020d0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
240020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
240020d2:	e9d1 6700 	ldrd	r6, r7, [r1]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
240020d6:	690c      	ldr	r4, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
240020d8:	688d      	ldr	r5, [r1, #8]
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
240020da:	b9f7      	cbnz	r7, 2400211a <FDCAN_CopyMessageToRAM+0x4a>
                   FDCAN_STANDARD_ID |
240020dc:	432c      	orrs	r4, r5
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
240020de:	ea44 4486 	orr.w	r4, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
240020e2:	e9d1 6506 	ldrd	r6, r5, [r1, #24]
240020e6:	4335      	orrs	r5, r6
240020e8:	694e      	ldr	r6, [r1, #20]
240020ea:	4335      	orrs	r5, r6
240020ec:	68ce      	ldr	r6, [r1, #12]
240020ee:	4335      	orrs	r5, r6
240020f0:	6a0e      	ldr	r6, [r1, #32]
240020f2:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
240020f6:	6e86      	ldr	r6, [r0, #104]	; 0x68
240020f8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
240020fc:	4373      	muls	r3, r6
240020fe:	eb00 0683 	add.w	r6, r0, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
24002102:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
24002106:	2000      	movs	r0, #0
24002108:	4c0f      	ldr	r4, [pc, #60]	; (24002148 <FDCAN_CopyMessageToRAM+0x78>)
  *TxAddress = TxElementW2;
2400210a:	6075      	str	r5, [r6, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
2400210c:	3608      	adds	r6, #8
2400210e:	89cb      	ldrh	r3, [r1, #14]
24002110:	3204      	adds	r2, #4
24002112:	5ce3      	ldrb	r3, [r4, r3]
24002114:	4283      	cmp	r3, r0
24002116:	d805      	bhi.n	24002124 <FDCAN_CopyMessageToRAM+0x54>
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
                  (uint32_t)pTxData[ByteCounter]);
    TxAddress++;
  }
}
24002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
2400211a:	4334      	orrs	r4, r6
2400211c:	432c      	orrs	r4, r5
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
2400211e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
24002122:	e7de      	b.n	240020e2 <FDCAN_CopyMessageToRAM+0x12>
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
24002124:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
24002128:	f812 5c01 	ldrb.w	r5, [r2, #-1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
2400212c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
2400212e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
                  (uint32_t)pTxData[ByteCounter]);
24002132:	f812 5c04 	ldrb.w	r5, [r2, #-4]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
24002136:	432b      	orrs	r3, r5
24002138:	f812 5c03 	ldrb.w	r5, [r2, #-3]
2400213c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
24002140:	5033      	str	r3, [r6, r0]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
24002142:	3004      	adds	r0, #4
24002144:	e7e3      	b.n	2400210e <FDCAN_CopyMessageToRAM+0x3e>
24002146:	bf00      	nop
24002148:	900d64f8 	.word	0x900d64f8

2400214c <HAL_FDCAN_Init>:
{
2400214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24002150:	b099      	sub	sp, #100	; 0x64
24002152:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
24002154:	224c      	movs	r2, #76	; 0x4c
24002156:	49c9      	ldr	r1, [pc, #804]	; (2400247c <HAL_FDCAN_Init+0x330>)
24002158:	a805      	add	r0, sp, #20
2400215a:	f018 fa0f 	bl	2401a57c <memcpy>
  if (hfdcan == NULL)
2400215e:	2c00      	cmp	r4, #0
24002160:	f000 81b5 	beq.w	240024ce <HAL_FDCAN_Init+0x382>
  if (hfdcan->Instance == FDCAN1)
24002164:	4bc6      	ldr	r3, [pc, #792]	; (24002480 <HAL_FDCAN_Init+0x334>)
24002166:	6822      	ldr	r2, [r4, #0]
24002168:	429a      	cmp	r2, r3
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
2400216a:	bf04      	itt	eq
2400216c:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
24002170:	6063      	streq	r3, [r4, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
24002172:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
24002176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400217a:	b923      	cbnz	r3, 24002186 <HAL_FDCAN_Init+0x3a>
    HAL_FDCAN_MspInit(hfdcan);
2400217c:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
2400217e:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
24002182:	f7fe f84f 	bl	24000224 <HAL_FDCAN_MspInit>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
24002186:	6822      	ldr	r2, [r4, #0]
24002188:	6993      	ldr	r3, [r2, #24]
2400218a:	f023 0310 	bic.w	r3, r3, #16
2400218e:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
24002190:	f7fe ff74 	bl	2400107c <HAL_GetTick>
24002194:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
24002196:	6823      	ldr	r3, [r4, #0]
24002198:	699a      	ldr	r2, [r3, #24]
2400219a:	0711      	lsls	r1, r2, #28
2400219c:	f100 8188 	bmi.w	240024b0 <HAL_FDCAN_Init+0x364>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
240021a0:	699a      	ldr	r2, [r3, #24]
240021a2:	f042 0201 	orr.w	r2, r2, #1
240021a6:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
240021a8:	f7fe ff68 	bl	2400107c <HAL_GetTick>
240021ac:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
240021ae:	6823      	ldr	r3, [r4, #0]
240021b0:	699a      	ldr	r2, [r3, #24]
240021b2:	07d2      	lsls	r2, r2, #31
240021b4:	f140 818d 	bpl.w	240024d2 <HAL_FDCAN_Init+0x386>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
240021b8:	699a      	ldr	r2, [r3, #24]
240021ba:	f042 0202 	orr.w	r2, r2, #2
240021be:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
240021c0:	7c22      	ldrb	r2, [r4, #16]
240021c2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
240021c4:	699a      	ldr	r2, [r3, #24]
240021c6:	bf0c      	ite	eq
240021c8:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
240021cc:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
240021d0:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
240021d2:	7c62      	ldrb	r2, [r4, #17]
240021d4:	2a01      	cmp	r2, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
240021d6:	699a      	ldr	r2, [r3, #24]
240021d8:	bf0c      	ite	eq
240021da:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
240021de:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
240021e2:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
240021e4:	7ca2      	ldrb	r2, [r4, #18]
240021e6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
240021e8:	699a      	ldr	r2, [r3, #24]
240021ea:	bf0c      	ite	eq
240021ec:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
240021f0:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
240021f4:	619a      	str	r2, [r3, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
240021f6:	699a      	ldr	r2, [r3, #24]
240021f8:	68a0      	ldr	r0, [r4, #8]
240021fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
240021fe:	4302      	orrs	r2, r0
24002200:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
24002202:	699a      	ldr	r2, [r3, #24]
24002204:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
24002208:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
2400220a:	691a      	ldr	r2, [r3, #16]
2400220c:	f022 0210 	bic.w	r2, r2, #16
24002210:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
24002212:	68e2      	ldr	r2, [r4, #12]
24002214:	2a01      	cmp	r2, #1
24002216:	f040 8163 	bne.w	240024e0 <HAL_FDCAN_Init+0x394>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
2400221a:	699a      	ldr	r2, [r3, #24]
2400221c:	f042 0204 	orr.w	r2, r2, #4
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
24002220:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
24002222:	69a2      	ldr	r2, [r4, #24]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
24002224:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
24002228:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
2400222c:	69e2      	ldr	r2, [r4, #28]
2400222e:	f102 32ff 	add.w	r2, r2, #4294967295
24002232:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
24002236:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
2400223a:	6a21      	ldr	r1, [r4, #32]
2400223c:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
24002240:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
24002244:	6961      	ldr	r1, [r4, #20]
24002246:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
2400224a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
2400224e:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
24002250:	d10e      	bne.n	24002270 <HAL_FDCAN_Init+0x124>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
24002252:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24002254:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
24002256:	6b22      	ldr	r2, [r4, #48]	; 0x30
24002258:	3a01      	subs	r2, #1
2400225a:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
2400225c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
24002260:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24002262:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
24002264:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
24002266:	6a61      	ldr	r1, [r4, #36]	; 0x24
24002268:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
2400226a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
2400226e:	60da      	str	r2, [r3, #12]
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
24002270:	6e25      	ldr	r5, [r4, #96]	; 0x60
24002272:	b12d      	cbz	r5, 24002280 <HAL_FDCAN_Init+0x134>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
24002274:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
24002278:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400227a:	430a      	orrs	r2, r1
2400227c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
24002280:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
24002284:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
24002288:	eb15 0f0a 	cmn.w	r5, sl
2400228c:	d00b      	beq.n	240022a6 <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
2400228e:	a918      	add	r1, sp, #96	; 0x60
24002290:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
24002294:	eb01 018b 	add.w	r1, r1, fp, lsl #2
24002298:	f022 0207 	bic.w	r2, r2, #7
2400229c:	f851 1c4c 	ldr.w	r1, [r1, #-76]
240022a0:	430a      	orrs	r2, r1
240022a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
240022a6:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
240022aa:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
240022ac:	b167      	cbz	r7, 240022c8 <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
240022ae:	a818      	add	r0, sp, #96	; 0x60
240022b0:	9903      	ldr	r1, [sp, #12]
240022b2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
240022b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
240022ba:	f022 0207 	bic.w	r2, r2, #7
240022be:	f851 1c4c 	ldr.w	r1, [r1, #-76]
240022c2:	430a      	orrs	r2, r1
240022c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
240022c8:	e9d4 6912 	ldrd	r6, r9, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
240022cc:	b166      	cbz	r6, 240022e8 <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
240022ce:	a918      	add	r1, sp, #96	; 0x60
240022d0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
240022d4:	eb01 0189 	add.w	r1, r1, r9, lsl #2
240022d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
240022dc:	f851 1c4c 	ldr.w	r1, [r1, #-76]
240022e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
240022e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
240022e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
240022ea:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
240022ee:	9202      	str	r2, [sp, #8]
240022f0:	b162      	cbz	r2, 2400230c <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
240022f2:	a918      	add	r1, sp, #96	; 0x60
240022f4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
240022f8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
240022fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
24002300:	f851 1c4c 	ldr.w	r1, [r1, #-76]
24002304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
24002308:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
2400230c:	4a5c      	ldr	r2, [pc, #368]	; (24002480 <HAL_FDCAN_Init+0x334>)
2400230e:	4293      	cmp	r3, r2
24002310:	d104      	bne.n	2400231c <HAL_FDCAN_Init+0x1d0>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
24002312:	6861      	ldr	r1, [r4, #4]
24002314:	688a      	ldr	r2, [r1, #8]
24002316:	f022 0203 	bic.w	r2, r2, #3
2400231a:	608a      	str	r2, [r1, #8]
  hfdcan->LatestTxFifoQRequest = 0U;
2400231c:	2200      	movs	r2, #0
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
2400231e:	4859      	ldr	r0, [pc, #356]	; (24002484 <HAL_FDCAN_Init+0x338>)
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
24002320:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
24002324:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
24002328:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
2400232c:	f04f 0201 	mov.w	r2, #1
24002330:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
24002334:	6b62      	ldr	r2, [r4, #52]	; 0x34
24002336:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
24002338:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
2400233c:	9900      	ldr	r1, [sp, #0]
2400233e:	4002      	ands	r2, r0
24002340:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
24002344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
24002348:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
2400234c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400234e:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
24002352:	9201      	str	r2, [sp, #4]
24002354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
24002358:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
2400235c:	9900      	ldr	r1, [sp, #0]
2400235e:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
24002362:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
24002366:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
24002368:	4001      	ands	r1, r0
2400236a:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
2400236e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
24002372:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
24002376:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
2400237a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
2400237e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
24002382:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
24002386:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
2400238a:	ea0e 0e00 	and.w	lr, lr, r0
2400238e:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
24002392:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
24002396:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
2400239a:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
2400239e:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
240023a2:	4357      	muls	r7, r2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
240023a4:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
240023a6:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
240023aa:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
240023ac:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
240023b0:	fb02 fc0c 	mul.w	ip, r2, ip
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
240023b4:	ea0e 0e00 	and.w	lr, lr, r0
240023b8:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
240023bc:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
240023c0:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
240023c4:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
240023c8:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
240023cc:	fb09 f606 	mul.w	r6, r9, r6
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
240023d0:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
240023d4:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
240023d6:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
240023da:	ea0e 0e00 	and.w	lr, lr, r0
240023de:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
240023e2:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
240023e4:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
240023e8:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
240023ec:	ea0e 0e00 	and.w	lr, lr, r0
240023f0:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
240023f4:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
240023f8:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
240023fc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
24002400:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
24002404:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
24002406:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
2400240a:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
2400240e:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
24002412:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
24002416:	ea0e 0e00 	and.w	lr, lr, r0
2400241a:	ea4e 0181 	orr.w	r1, lr, r1, lsl #2
2400241e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
24002422:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
24002426:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
2400242a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
2400242e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
24002432:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
24002436:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
2400243a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
2400243e:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
24002442:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
24002446:	9b00      	ldr	r3, [sp, #0]
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
24002448:	fb0b f10a 	mul.w	r1, fp, sl
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
2400244c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
24002450:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
24002454:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
24002456:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
2400245a:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
2400245c:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
2400245e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
24002462:	6762      	str	r2, [r4, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
24002464:	eb02 0287 	add.w	r2, r2, r7, lsl #2
24002468:	67a2      	str	r2, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
2400246a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
2400246e:	67e2      	str	r2, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
24002470:	eb02 028c 	add.w	r2, r2, ip, lsl #2
24002474:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
24002478:	e006      	b.n	24002488 <HAL_FDCAN_Init+0x33c>
2400247a:	bf00      	nop
2400247c:	9001ac70 	.word	0x9001ac70
24002480:	4000a000 	.word	0x4000a000
24002484:	ffff0003 	.word	0xffff0003
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
24002488:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
2400248c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
24002490:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
24002494:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
24002498:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
2400249c:	4a20      	ldr	r2, [pc, #128]	; (24002520 <HAL_FDCAN_Init+0x3d4>)
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
2400249e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
240024a2:	4295      	cmp	r5, r2
240024a4:	d933      	bls.n	2400250e <HAL_FDCAN_Init+0x3c2>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
240024a6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
240024aa:	f043 0320 	orr.w	r3, r3, #32
240024ae:	e009      	b.n	240024c4 <HAL_FDCAN_Init+0x378>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
240024b0:	f7fe fde4 	bl	2400107c <HAL_GetTick>
240024b4:	1b40      	subs	r0, r0, r5
240024b6:	280a      	cmp	r0, #10
240024b8:	f67f ae6d 	bls.w	24002196 <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
240024bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
240024c0:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
240024c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
240024c8:	2303      	movs	r3, #3
240024ca:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
240024ce:	2001      	movs	r0, #1
240024d0:	e022      	b.n	24002518 <HAL_FDCAN_Init+0x3cc>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
240024d2:	f7fe fdd3 	bl	2400107c <HAL_GetTick>
240024d6:	1b40      	subs	r0, r0, r5
240024d8:	280a      	cmp	r0, #10
240024da:	f67f ae68 	bls.w	240021ae <HAL_FDCAN_Init+0x62>
240024de:	e7ed      	b.n	240024bc <HAL_FDCAN_Init+0x370>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
240024e0:	2a00      	cmp	r2, #0
240024e2:	f43f ae9e 	beq.w	24002222 <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
240024e6:	2a02      	cmp	r2, #2
240024e8:	d00a      	beq.n	24002500 <HAL_FDCAN_Init+0x3b4>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
240024ea:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
240024ec:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
240024ee:	f041 0180 	orr.w	r1, r1, #128	; 0x80
240024f2:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
240024f4:	6919      	ldr	r1, [r3, #16]
240024f6:	f041 0110 	orr.w	r1, r1, #16
240024fa:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
240024fc:	f47f ae91 	bne.w	24002222 <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
24002500:	699a      	ldr	r2, [r3, #24]
24002502:	f042 0220 	orr.w	r2, r2, #32
24002506:	e68b      	b.n	24002220 <HAL_FDCAN_Init+0xd4>
      *(uint32_t *)(RAMcounter) = 0x00000000;
24002508:	2200      	movs	r2, #0
2400250a:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
2400250e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
24002512:	4293      	cmp	r3, r2
24002514:	d3f8      	bcc.n	24002508 <HAL_FDCAN_Init+0x3bc>
  return HAL_OK;
24002516:	2000      	movs	r0, #0
}
24002518:	b019      	add	sp, #100	; 0x64
2400251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400251e:	bf00      	nop
24002520:	4000d3fc 	.word	0x4000d3fc

24002524 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
24002524:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
24002528:	2b01      	cmp	r3, #1
2400252a:	d10c      	bne.n	24002546 <HAL_FDCAN_Start+0x22>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
2400252c:	6802      	ldr	r2, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
2400252e:	2302      	movs	r3, #2
24002530:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
24002534:	6993      	ldr	r3, [r2, #24]
24002536:	f023 0301 	bic.w	r3, r3, #1
2400253a:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
2400253c:	2300      	movs	r3, #0
2400253e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_OK;
24002542:	4618      	mov	r0, r3
24002544:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
24002546:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
2400254a:	f043 0304 	orr.w	r3, r3, #4
2400254e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
24002552:	2001      	movs	r0, #1
}
24002554:	4770      	bx	lr

24002556 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
24002556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
24002558:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
{
2400255c:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
2400255e:	2b02      	cmp	r3, #2
24002560:	d126      	bne.n	240025b0 <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
24002562:	6806      	ldr	r6, [r0, #0]
24002564:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
24002568:	f013 5f7c 	tst.w	r3, #1056964608	; 0x3f000000
2400256c:	d107      	bne.n	2400257e <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
2400256e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
24002572:	f043 0320 	orr.w	r3, r3, #32
    return HAL_ERROR;
24002576:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
24002578:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    return HAL_ERROR;
2400257c:	e017      	b.n	240025ae <HAL_FDCAN_AddMessageToTxFifoQ+0x58>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
2400257e:	f8d6 50c4 	ldr.w	r5, [r6, #196]	; 0xc4
24002582:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
24002586:	d004      	beq.n	24002592 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
24002588:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
2400258c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24002590:	e7f1      	b.n	24002576 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
24002592:	f8d6 70c4 	ldr.w	r7, [r6, #196]	; 0xc4
24002596:	f3c7 4704 	ubfx	r7, r7, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
2400259a:	463b      	mov	r3, r7
2400259c:	f7ff fd98 	bl	240020d0 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
240025a0:	2201      	movs	r2, #1
    return HAL_OK;
240025a2:	4628      	mov	r0, r5
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
240025a4:	40ba      	lsls	r2, r7
240025a6:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
240025aa:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
}
240025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
240025b0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
240025b4:	f043 0308 	orr.w	r3, r3, #8
240025b8:	e7dd      	b.n	24002576 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
	...

240025bc <HAL_FDCAN_GetRxMessage>:
{
240025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
240025be:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
  if (state == HAL_FDCAN_STATE_BUSY)
240025c2:	2c02      	cmp	r4, #2
240025c4:	f040 80a5 	bne.w	24002712 <HAL_FDCAN_GetRxMessage+0x156>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
240025c8:	2940      	cmp	r1, #64	; 0x40
240025ca:	d163      	bne.n	24002694 <HAL_FDCAN_GetRxMessage+0xd8>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
240025cc:	6804      	ldr	r4, [r0, #0]
240025ce:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
240025d2:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
240025d6:	d104      	bne.n	240025e2 <HAL_FDCAN_GetRxMessage+0x26>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
240025d8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
240025dc:	f043 0320 	orr.w	r3, r3, #32
240025e0:	e007      	b.n	240025f2 <HAL_FDCAN_GetRxMessage+0x36>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
240025e2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
240025e6:	066d      	lsls	r5, r5, #25
240025e8:	d107      	bne.n	240025fa <HAL_FDCAN_GetRxMessage+0x3e>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
240025ea:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
240025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
240025f2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
240025f6:	2001      	movs	r0, #1
240025f8:	e04b      	b.n	24002692 <HAL_FDCAN_GetRxMessage+0xd6>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
240025fa:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
240025fe:	01ef      	lsls	r7, r5, #7
24002600:	d501      	bpl.n	24002606 <HAL_FDCAN_GetRxMessage+0x4a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
24002602:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
24002606:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
2400260a:	6c44      	ldr	r4, [r0, #68]	; 0x44
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
2400260c:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
24002610:	6f46      	ldr	r6, [r0, #116]	; 0x74
24002612:	436c      	muls	r4, r5
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
24002614:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
24002618:	6827      	ldr	r7, [r4, #0]
2400261a:	f007 4780 	and.w	r7, r7, #1073741824	; 0x40000000
2400261e:	6057      	str	r7, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
24002620:	6826      	ldr	r6, [r4, #0]
24002622:	2f00      	cmp	r7, #0
24002624:	d15a      	bne.n	240026dc <HAL_FDCAN_GetRxMessage+0x120>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
24002626:	f3c6 468a 	ubfx	r6, r6, #18, #11
2400262a:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
2400262c:	3407      	adds	r4, #7
2400262e:	f854 6c07 	ldr.w	r6, [r4, #-7]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
24002632:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 2400271c <HAL_FDCAN_GetRxMessage+0x160>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
24002636:	f006 5600 	and.w	r6, r6, #536870912	; 0x20000000
2400263a:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
2400263c:	f854 6c07 	ldr.w	r6, [r4, #-7]
24002640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
24002644:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
24002646:	f834 6c03 	ldrh.w	r6, [r4, #-3]
2400264a:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
2400264c:	f854 6c03 	ldr.w	r6, [r4, #-3]
24002650:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
24002654:	60d6      	str	r6, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
24002656:	f854 6c03 	ldr.w	r6, [r4, #-3]
2400265a:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
2400265e:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
24002660:	f854 6c03 	ldr.w	r6, [r4, #-3]
24002664:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
24002668:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
2400266a:	7826      	ldrb	r6, [r4, #0]
2400266c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
24002670:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
24002672:	f854 6c03 	ldr.w	r6, [r4, #-3]
24002676:	0ff6      	lsrs	r6, r6, #31
24002678:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
2400267a:	2600      	movs	r6, #0
2400267c:	89d7      	ldrh	r7, [r2, #14]
2400267e:	f81c 7007 	ldrb.w	r7, [ip, r7]
24002682:	42b7      	cmp	r7, r6
24002684:	d82d      	bhi.n	240026e2 <HAL_FDCAN_GetRxMessage+0x126>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
24002686:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
24002688:	6802      	ldr	r2, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
2400268a:	d12f      	bne.n	240026ec <HAL_FDCAN_GetRxMessage+0x130>
      hfdcan->Instance->RXF0A = GetIndex;
2400268c:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8
    return HAL_OK;
24002690:	2000      	movs	r0, #0
}
24002692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
24002694:	2941      	cmp	r1, #65	; 0x41
24002696:	d117      	bne.n	240026c8 <HAL_FDCAN_GetRxMessage+0x10c>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
24002698:	6804      	ldr	r4, [r0, #0]
2400269a:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
2400269e:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
240026a2:	d099      	beq.n	240025d8 <HAL_FDCAN_GetRxMessage+0x1c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
240026a4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
240026a8:	066e      	lsls	r6, r5, #25
240026aa:	d09e      	beq.n	240025ea <HAL_FDCAN_GetRxMessage+0x2e>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
240026ac:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
240026b0:	01ed      	lsls	r5, r5, #7
240026b2:	d501      	bpl.n	240026b8 <HAL_FDCAN_GetRxMessage+0xfc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
240026b4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
240026b8:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
240026bc:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
240026be:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
240026c2:	6f86      	ldr	r6, [r0, #120]	; 0x78
240026c4:	436c      	muls	r4, r5
240026c6:	e7a5      	b.n	24002614 <HAL_FDCAN_GetRxMessage+0x58>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
240026c8:	6d04      	ldr	r4, [r0, #80]	; 0x50
240026ca:	428c      	cmp	r4, r1
240026cc:	d984      	bls.n	240025d8 <HAL_FDCAN_GetRxMessage+0x1c>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
240026ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
240026d0:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
240026d2:	434c      	muls	r4, r1
240026d4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  uint32_t GetIndex = 0;
240026d8:	2500      	movs	r5, #0
240026da:	e79d      	b.n	24002618 <HAL_FDCAN_GetRxMessage+0x5c>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
240026dc:	f026 4660 	bic.w	r6, r6, #3758096384	; 0xe0000000
240026e0:	e7a3      	b.n	2400262a <HAL_FDCAN_GetRxMessage+0x6e>
      pRxData[ByteCounter] = pData[ByteCounter];
240026e2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
240026e6:	559f      	strb	r7, [r3, r6]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
240026e8:	3601      	adds	r6, #1
240026ea:	e7c7      	b.n	2400267c <HAL_FDCAN_GetRxMessage+0xc0>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
240026ec:	2941      	cmp	r1, #65	; 0x41
240026ee:	d102      	bne.n	240026f6 <HAL_FDCAN_GetRxMessage+0x13a>
      hfdcan->Instance->RXF1A = GetIndex;
240026f0:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
240026f4:	e7cc      	b.n	24002690 <HAL_FDCAN_GetRxMessage+0xd4>
      if (RxLocation < FDCAN_RX_BUFFER32)
240026f6:	291f      	cmp	r1, #31
240026f8:	f04f 0301 	mov.w	r3, #1
240026fc:	d803      	bhi.n	24002706 <HAL_FDCAN_GetRxMessage+0x14a>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
240026fe:	408b      	lsls	r3, r1
24002700:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
24002704:	e7c4      	b.n	24002690 <HAL_FDCAN_GetRxMessage+0xd4>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
24002706:	f001 011f 	and.w	r1, r1, #31
2400270a:	408b      	lsls	r3, r1
2400270c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
24002710:	e7be      	b.n	24002690 <HAL_FDCAN_GetRxMessage+0xd4>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
24002712:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
24002716:	f043 0308 	orr.w	r3, r3, #8
2400271a:	e76a      	b.n	240025f2 <HAL_FDCAN_GetRxMessage+0x36>
2400271c:	900d64f8 	.word	0x900d64f8

24002720 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
24002720:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
24002724:	3b01      	subs	r3, #1
24002726:	2b01      	cmp	r3, #1
24002728:	d82d      	bhi.n	24002786 <HAL_FDCAN_ActivateNotification+0x66>
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
2400272a:	6803      	ldr	r3, [r0, #0]
2400272c:	6d98      	ldr	r0, [r3, #88]	; 0x58
2400272e:	4208      	tst	r0, r1
24002730:	d11f      	bne.n	24002772 <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
24002732:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
24002734:	f040 0001 	orr.w	r0, r0, #1
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
24002738:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
2400273a:	0588      	lsls	r0, r1, #22
2400273c:	d504      	bpl.n	24002748 <HAL_FDCAN_ActivateNotification+0x28>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
2400273e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24002742:	4310      	orrs	r0, r2
24002744:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
24002748:	0548      	lsls	r0, r1, #21
2400274a:	d504      	bpl.n	24002756 <HAL_FDCAN_ActivateNotification+0x36>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
2400274c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
24002750:	4302      	orrs	r2, r0
24002752:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
24002756:	f021 4240 	bic.w	r2, r1, #3221225472	; 0xc0000000
2400275a:	6d58      	ldr	r0, [r3, #84]	; 0x54
2400275c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
24002760:	4302      	orrs	r2, r0
    return HAL_OK;
24002762:	2000      	movs	r0, #0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
24002764:	655a      	str	r2, [r3, #84]	; 0x54
24002766:	4a0c      	ldr	r2, [pc, #48]	; (24002798 <HAL_FDCAN_ActivateNotification+0x78>)
24002768:	6953      	ldr	r3, [r2, #20]
2400276a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
2400276e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
24002770:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
24002772:	6d98      	ldr	r0, [r3, #88]	; 0x58
24002774:	ea31 0000 	bics.w	r0, r1, r0
24002778:	d103      	bne.n	24002782 <HAL_FDCAN_ActivateNotification+0x62>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
2400277a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
2400277c:	f040 0002 	orr.w	r0, r0, #2
24002780:	e7da      	b.n	24002738 <HAL_FDCAN_ActivateNotification+0x18>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
24002782:	2003      	movs	r0, #3
24002784:	e7d8      	b.n	24002738 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
24002786:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
2400278a:	f043 0302 	orr.w	r3, r3, #2
2400278e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
24002792:	2001      	movs	r0, #1
}
24002794:	4770      	bx	lr
24002796:	bf00      	nop
24002798:	4000a800 	.word	0x4000a800

2400279c <HAL_FDCAN_ClockCalibrationCallback>:
}
2400279c:	4770      	bx	lr

2400279e <HAL_FDCAN_TxEventFifoCallback>:
2400279e:	4770      	bx	lr

240027a0 <HAL_FDCAN_RxFifo1Callback>:
240027a0:	4770      	bx	lr

240027a2 <HAL_FDCAN_TxFifoEmptyCallback>:
240027a2:	4770      	bx	lr

240027a4 <HAL_FDCAN_TxBufferCompleteCallback>:
240027a4:	4770      	bx	lr

240027a6 <HAL_FDCAN_TxBufferAbortCallback>:
240027a6:	4770      	bx	lr

240027a8 <HAL_FDCAN_RxBufferNewMessageCallback>:
240027a8:	4770      	bx	lr

240027aa <HAL_FDCAN_TimestampWraparoundCallback>:
240027aa:	4770      	bx	lr

240027ac <HAL_FDCAN_TimeoutOccurredCallback>:
240027ac:	4770      	bx	lr

240027ae <HAL_FDCAN_HighPriorityMessageCallback>:
240027ae:	4770      	bx	lr

240027b0 <HAL_FDCAN_ErrorCallback>:
240027b0:	4770      	bx	lr

240027b2 <HAL_FDCAN_ErrorStatusCallback>:
240027b2:	4770      	bx	lr

240027b4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
240027b4:	4770      	bx	lr

240027b6 <HAL_FDCAN_TT_TimeMarkCallback>:
240027b6:	4770      	bx	lr

240027b8 <HAL_FDCAN_TT_StopWatchCallback>:
}
240027b8:	4770      	bx	lr

240027ba <HAL_FDCAN_TT_GlobalTimeCallback>:
240027ba:	4770      	bx	lr

240027bc <HAL_FDCAN_IRQHandler>:
{
240027bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
240027c0:	49a9      	ldr	r1, [pc, #676]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
{
240027c2:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
240027c4:	690b      	ldr	r3, [r1, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
240027c6:	694a      	ldr	r2, [r1, #20]
240027c8:	0792      	lsls	r2, r2, #30
240027ca:	ea02 7283 	and.w	r2, r2, r3, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
240027ce:	6803      	ldr	r3, [r0, #0]
240027d0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
240027d2:	6d5e      	ldr	r6, [r3, #84]	; 0x54
240027d4:	ea05 0b06 	and.w	fp, r5, r6
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
240027d8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
240027da:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  TxEventFifoITs &= hfdcan->Instance->IE;
240027dc:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  RxFifo0ITs &= hfdcan->Instance->IE;
240027e0:	ea05 0a06 	and.w	sl, r5, r6
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
240027e4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
240027e6:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
240027e8:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
240027ea:	f00a 0a0f 	and.w	sl, sl, #15
  RxFifo1ITs &= hfdcan->Instance->IE;
240027ee:	ea05 0906 	and.w	r9, r5, r6
  Errors &= hfdcan->Instance->IE;
240027f2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
240027f4:	402f      	ands	r7, r5
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
240027f6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
240027f8:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  RxFifo1ITs &= hfdcan->Instance->IE;
240027fa:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
  Errors &= hfdcan->Instance->IE;
240027fe:	f007 5771 	and.w	r7, r7, #1010827264	; 0x3c400000
  ErrorStatusITs &= hfdcan->Instance->IE;
24002802:	ea05 0806 	and.w	r8, r5, r6
  itsourceIE = hfdcan->Instance->IE;
24002806:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  itflagIR = hfdcan->Instance->IR;
24002808:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
2400280a:	f416 7f80 	tst.w	r6, #256	; 0x100
  ErrorStatusITs &= hfdcan->Instance->IE;
2400280e:	f008 7860 	and.w	r8, r8, #58720256	; 0x3800000
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
24002812:	d00c      	beq.n	2400282e <HAL_FDCAN_IRQHandler+0x72>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
24002814:	f415 7f80 	tst.w	r5, #256	; 0x100
24002818:	d009      	beq.n	2400282e <HAL_FDCAN_IRQHandler+0x72>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
2400281a:	f44f 7c80 	mov.w	ip, #256	; 0x100
2400281e:	9201      	str	r2, [sp, #4]
24002820:	f8c3 c050 	str.w	ip, [r3, #80]	; 0x50
24002824:	2300      	movs	r3, #0
24002826:	610b      	str	r3, [r1, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
24002828:	f7ff ffc1 	bl	240027ae <HAL_FDCAN_HighPriorityMessageCallback>
2400282c:	9a01      	ldr	r2, [sp, #4]
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
2400282e:	0570      	lsls	r0, r6, #21
24002830:	d515      	bpl.n	2400285e <HAL_FDCAN_IRQHandler+0xa2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
24002832:	0569      	lsls	r1, r5, #21
24002834:	d513      	bpl.n	2400285e <HAL_FDCAN_IRQHandler+0xa2>
      AbortedBuffers = hfdcan->Instance->TXBCF;
24002836:	6823      	ldr	r3, [r4, #0]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
24002838:	f44f 6c80 	mov.w	ip, #1024	; 0x400
2400283c:	9201      	str	r2, [sp, #4]
      AbortedBuffers = hfdcan->Instance->TXBCF;
2400283e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
24002842:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
24002846:	f8c3 c050 	str.w	ip, [r3, #80]	; 0x50
2400284a:	f04f 0c00 	mov.w	ip, #0
2400284e:	4b86      	ldr	r3, [pc, #536]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
24002850:	4001      	ands	r1, r0
24002852:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
24002854:	f8c3 c010 	str.w	ip, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
24002858:	f7ff ffa5 	bl	240027a6 <HAL_FDCAN_TxBufferAbortCallback>
2400285c:	9a01      	ldr	r2, [sp, #4]
  if (ClkCalibrationITs != 0U)
2400285e:	b14a      	cbz	r2, 24002874 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
24002860:	6823      	ldr	r3, [r4, #0]
24002862:	2100      	movs	r1, #0
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
24002864:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
24002866:	6519      	str	r1, [r3, #80]	; 0x50
24002868:	0f91      	lsrs	r1, r2, #30
2400286a:	4b7f      	ldr	r3, [pc, #508]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
2400286c:	6119      	str	r1, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
2400286e:	4611      	mov	r1, r2
24002870:	f7ff ff94 	bl	2400279c <HAL_FDCAN_ClockCalibrationCallback>
  if (TxEventFifoITs != 0U)
24002874:	f1bb 0f00 	cmp.w	fp, #0
24002878:	d009      	beq.n	2400288e <HAL_FDCAN_IRQHandler+0xd2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
2400287a:	6823      	ldr	r3, [r4, #0]
2400287c:	2200      	movs	r2, #0
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
2400287e:	4659      	mov	r1, fp
24002880:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
24002882:	f8c3 b050 	str.w	fp, [r3, #80]	; 0x50
24002886:	4b78      	ldr	r3, [pc, #480]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
24002888:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
2400288a:	f7ff ff88 	bl	2400279e <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
2400288e:	f1ba 0f00 	cmp.w	sl, #0
24002892:	d009      	beq.n	240028a8 <HAL_FDCAN_IRQHandler+0xec>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
24002894:	6823      	ldr	r3, [r4, #0]
24002896:	2200      	movs	r2, #0
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
24002898:	4651      	mov	r1, sl
2400289a:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
2400289c:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
240028a0:	4b71      	ldr	r3, [pc, #452]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
240028a2:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
240028a4:	f7fe f92e 	bl	24000b04 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
240028a8:	f1b9 0f00 	cmp.w	r9, #0
240028ac:	d009      	beq.n	240028c2 <HAL_FDCAN_IRQHandler+0x106>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
240028ae:	6823      	ldr	r3, [r4, #0]
240028b0:	2200      	movs	r2, #0
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
240028b2:	4649      	mov	r1, r9
240028b4:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
240028b6:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
240028ba:	4b6b      	ldr	r3, [pc, #428]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
240028bc:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
240028be:	f7ff ff6f 	bl	240027a0 <HAL_FDCAN_RxFifo1Callback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
240028c2:	0532      	lsls	r2, r6, #20
240028c4:	d50b      	bpl.n	240028de <HAL_FDCAN_IRQHandler+0x122>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
240028c6:	052b      	lsls	r3, r5, #20
240028c8:	d509      	bpl.n	240028de <HAL_FDCAN_IRQHandler+0x122>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
240028ca:	6823      	ldr	r3, [r4, #0]
240028cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
240028d0:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
240028d2:	651a      	str	r2, [r3, #80]	; 0x50
240028d4:	2200      	movs	r2, #0
240028d6:	4b64      	ldr	r3, [pc, #400]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
240028d8:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
240028da:	f7ff ff62 	bl	240027a2 <HAL_FDCAN_TxFifoEmptyCallback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
240028de:	05b0      	lsls	r0, r6, #22
240028e0:	d510      	bpl.n	24002904 <HAL_FDCAN_IRQHandler+0x148>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
240028e2:	05a9      	lsls	r1, r5, #22
240028e4:	d50e      	bpl.n	24002904 <HAL_FDCAN_IRQHandler+0x148>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
240028e6:	6823      	ldr	r3, [r4, #0]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
240028e8:	f44f 7000 	mov.w	r0, #512	; 0x200
      TransmittedBuffers = hfdcan->Instance->TXBTO;
240028ec:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
240028f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
240028f4:	6518      	str	r0, [r3, #80]	; 0x50
240028f6:	2000      	movs	r0, #0
240028f8:	4b5b      	ldr	r3, [pc, #364]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
240028fa:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
240028fc:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
240028fe:	4620      	mov	r0, r4
24002900:	f7ff ff50 	bl	240027a4 <HAL_FDCAN_TxBufferCompleteCallback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
24002904:	0332      	lsls	r2, r6, #12
24002906:	d50b      	bpl.n	24002920 <HAL_FDCAN_IRQHandler+0x164>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
24002908:	032b      	lsls	r3, r5, #12
2400290a:	d509      	bpl.n	24002920 <HAL_FDCAN_IRQHandler+0x164>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
2400290c:	6823      	ldr	r3, [r4, #0]
2400290e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
24002912:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
24002914:	651a      	str	r2, [r3, #80]	; 0x50
24002916:	2200      	movs	r2, #0
24002918:	4b53      	ldr	r3, [pc, #332]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
2400291a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
2400291c:	f7ff ff44 	bl	240027a8 <HAL_FDCAN_RxBufferNewMessageCallback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
24002920:	03f0      	lsls	r0, r6, #15
24002922:	d50b      	bpl.n	2400293c <HAL_FDCAN_IRQHandler+0x180>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
24002924:	03e9      	lsls	r1, r5, #15
24002926:	d509      	bpl.n	2400293c <HAL_FDCAN_IRQHandler+0x180>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
24002928:	6823      	ldr	r3, [r4, #0]
2400292a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
2400292e:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
24002930:	651a      	str	r2, [r3, #80]	; 0x50
24002932:	2200      	movs	r2, #0
24002934:	4b4c      	ldr	r3, [pc, #304]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
24002936:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
24002938:	f7ff ff37 	bl	240027aa <HAL_FDCAN_TimestampWraparoundCallback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
2400293c:	0372      	lsls	r2, r6, #13
2400293e:	d50b      	bpl.n	24002958 <HAL_FDCAN_IRQHandler+0x19c>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
24002940:	036b      	lsls	r3, r5, #13
24002942:	d509      	bpl.n	24002958 <HAL_FDCAN_IRQHandler+0x19c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
24002944:	6823      	ldr	r3, [r4, #0]
24002946:	f44f 2280 	mov.w	r2, #262144	; 0x40000
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
2400294a:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
2400294c:	651a      	str	r2, [r3, #80]	; 0x50
2400294e:	2200      	movs	r2, #0
24002950:	4b45      	ldr	r3, [pc, #276]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
24002952:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
24002954:	f7ff ff2a 	bl	240027ac <HAL_FDCAN_TimeoutOccurredCallback>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
24002958:	03b0      	lsls	r0, r6, #14
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
2400295a:	6822      	ldr	r2, [r4, #0]
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
2400295c:	d50d      	bpl.n	2400297a <HAL_FDCAN_IRQHandler+0x1be>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
2400295e:	03a9      	lsls	r1, r5, #14
24002960:	d50b      	bpl.n	2400297a <HAL_FDCAN_IRQHandler+0x1be>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
24002962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24002966:	2100      	movs	r1, #0
24002968:	6513      	str	r3, [r2, #80]	; 0x50
2400296a:	4b3f      	ldr	r3, [pc, #252]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
2400296c:	6119      	str	r1, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
2400296e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
24002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24002976:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
2400297a:	f1b8 0f00 	cmp.w	r8, #0
2400297e:	d008      	beq.n	24002992 <HAL_FDCAN_IRQHandler+0x1d6>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
24002980:	f8c2 8050 	str.w	r8, [r2, #80]	; 0x50
24002984:	2200      	movs	r2, #0
24002986:	4b38      	ldr	r3, [pc, #224]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
24002988:	4641      	mov	r1, r8
2400298a:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
2400298c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
2400298e:	f7ff ff10 	bl	240027b2 <HAL_FDCAN_ErrorStatusCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
24002992:	6822      	ldr	r2, [r4, #0]
  if (Errors != 0U)
24002994:	b147      	cbz	r7, 240029a8 <HAL_FDCAN_IRQHandler+0x1ec>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
24002996:	4b34      	ldr	r3, [pc, #208]	; (24002a68 <HAL_FDCAN_IRQHandler+0x2ac>)
24002998:	2100      	movs	r1, #0
2400299a:	6517      	str	r7, [r2, #80]	; 0x50
2400299c:	6119      	str	r1, [r3, #16]
    hfdcan->ErrorCode |= Errors;
2400299e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
240029a2:	433b      	orrs	r3, r7
240029a4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
240029a8:	4b30      	ldr	r3, [pc, #192]	; (24002a6c <HAL_FDCAN_IRQHandler+0x2b0>)
240029aa:	429a      	cmp	r2, r3
240029ac:	d160      	bne.n	24002a70 <HAL_FDCAN_IRQHandler+0x2b4>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
240029ae:	6863      	ldr	r3, [r4, #4]
240029b0:	689a      	ldr	r2, [r3, #8]
240029b2:	0792      	lsls	r2, r2, #30
240029b4:	d05c      	beq.n	24002a70 <HAL_FDCAN_IRQHandler+0x2b4>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
240029b6:	6a19      	ldr	r1, [r3, #32]
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
240029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240029ba:	4011      	ands	r1, r2
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
240029bc:	6a1a      	ldr	r2, [r3, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
240029be:	6a58      	ldr	r0, [r3, #36]	; 0x24
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
240029c0:	6a1f      	ldr	r7, [r3, #32]
      if (TTSchedSyncITs != 0U)
240029c2:	f011 010f 	ands.w	r1, r1, #15
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
240029c6:	ea02 0800 	and.w	r8, r2, r0
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
240029ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
240029cc:	6a1e      	ldr	r6, [r3, #32]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
240029ce:	ea07 0702 	and.w	r7, r7, r2
      TTDistErrors &= hfdcan->ttcan->TTIE;
240029d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
240029d4:	6a1d      	ldr	r5, [r3, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
240029d6:	f008 0830 	and.w	r8, r8, #48	; 0x30
      TTDistErrors &= hfdcan->ttcan->TTIE;
240029da:	ea06 0602 	and.w	r6, r6, r2
      TTFatalErrors &= hfdcan->ttcan->TTIE;
240029de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
240029e0:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      itsourceTTIE = hfdcan->ttcan->TTIE;
240029e4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
      TTFatalErrors &= hfdcan->ttcan->TTIE;
240029e8:	ea05 0502 	and.w	r5, r5, r2
      TTDistErrors &= hfdcan->ttcan->TTIE;
240029ec:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      itflagTTIR = hfdcan->ttcan->TTIR;
240029f0:	f8d3 9020 	ldr.w	r9, [r3, #32]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
240029f4:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      if (TTSchedSyncITs != 0U)
240029f8:	d003      	beq.n	24002a02 <HAL_FDCAN_IRQHandler+0x246>
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
240029fa:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
240029fc:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
240029fe:	f7ff fed9 	bl	240027b4 <HAL_FDCAN_TT_ScheduleSyncCallback>
      if (TTTimeMarkITs != 0U)
24002a02:	f1b8 0f00 	cmp.w	r8, #0
24002a06:	d006      	beq.n	24002a16 <HAL_FDCAN_IRQHandler+0x25a>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
24002a08:	6863      	ldr	r3, [r4, #4]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
24002a0a:	4641      	mov	r1, r8
24002a0c:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
24002a0e:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
24002a12:	f7ff fed0 	bl	240027b6 <HAL_FDCAN_TT_TimeMarkCallback>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
24002a16:	f01a 0f40 	tst.w	sl, #64	; 0x40
24002a1a:	d00d      	beq.n	24002a38 <HAL_FDCAN_IRQHandler+0x27c>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
24002a1c:	f019 0f40 	tst.w	r9, #64	; 0x40
24002a20:	d00a      	beq.n	24002a38 <HAL_FDCAN_IRQHandler+0x27c>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
24002a22:	6863      	ldr	r3, [r4, #4]
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
24002a24:	2040      	movs	r0, #64	; 0x40
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
24002a26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
24002a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
24002a2a:	0c09      	lsrs	r1, r1, #16
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
24002a2c:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
24002a2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
24002a32:	4620      	mov	r0, r4
24002a34:	f7ff fec0 	bl	240027b8 <HAL_FDCAN_TT_StopWatchCallback>
      if (TTGlobTimeITs != 0U)
24002a38:	b12f      	cbz	r7, 24002a46 <HAL_FDCAN_IRQHandler+0x28a>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
24002a3a:	6863      	ldr	r3, [r4, #4]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
24002a3c:	4639      	mov	r1, r7
24002a3e:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
24002a40:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
24002a42:	f7ff feba 	bl	240027ba <HAL_FDCAN_TT_GlobalTimeCallback>
      if (TTDistErrors != 0U)
24002a46:	b136      	cbz	r6, 24002a56 <HAL_FDCAN_IRQHandler+0x29a>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
24002a48:	6863      	ldr	r3, [r4, #4]
24002a4a:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
24002a4c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
24002a50:	4333      	orrs	r3, r6
24002a52:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
24002a56:	b15d      	cbz	r5, 24002a70 <HAL_FDCAN_IRQHandler+0x2b4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
24002a58:	6863      	ldr	r3, [r4, #4]
24002a5a:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
24002a5c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
24002a60:	432b      	orrs	r3, r5
24002a62:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
24002a66:	e003      	b.n	24002a70 <HAL_FDCAN_IRQHandler+0x2b4>
24002a68:	4000a800 	.word	0x4000a800
24002a6c:	4000a000 	.word	0x4000a000
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
24002a70:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
24002a74:	b113      	cbz	r3, 24002a7c <HAL_FDCAN_IRQHandler+0x2c0>
    HAL_FDCAN_ErrorCallback(hfdcan);
24002a76:	4620      	mov	r0, r4
24002a78:	f7ff fe9a 	bl	240027b0 <HAL_FDCAN_ErrorCallback>
}
24002a7c:	b003      	add	sp, #12
24002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24002a82:	bf00      	nop

24002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24002a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24002a88:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24002a8a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 24002c54 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24002a8e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24002a92:	680a      	ldr	r2, [r1, #0]
24002a94:	fa32 f503 	lsrs.w	r5, r2, r3
24002a98:	d102      	bne.n	24002aa0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
24002a9a:	b003      	add	sp, #12
24002a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24002aa0:	f04f 0e01 	mov.w	lr, #1
24002aa4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
24002aa8:	ea1e 0202 	ands.w	r2, lr, r2
24002aac:	f000 80bc 	beq.w	24002c28 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24002ab0:	684e      	ldr	r6, [r1, #4]
24002ab2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24002ab6:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24002aba:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24002abe:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24002ac2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24002ac4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24002ac8:	2f01      	cmp	r7, #1
24002aca:	d834      	bhi.n	24002b36 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
24002acc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24002ace:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
24002ad2:	68cf      	ldr	r7, [r1, #12]
24002ad4:	fa07 f708 	lsl.w	r7, r7, r8
24002ad8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
24002adc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
24002ade:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24002ae0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24002ae4:	f3c6 1700 	ubfx	r7, r6, #4, #1
24002ae8:	409f      	lsls	r7, r3
24002aea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
24002aee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
24002af0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24002af2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24002af4:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24002af8:	688f      	ldr	r7, [r1, #8]
24002afa:	fa07 f708 	lsl.w	r7, r7, r8
24002afe:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
24002b02:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24002b04:	d119      	bne.n	24002b3a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
24002b06:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24002b0a:	f003 0b07 	and.w	fp, r3, #7
24002b0e:	f04f 0e0f 	mov.w	lr, #15
24002b12:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
24002b16:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
24002b1a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24002b1e:	fa0e fe0b 	lsl.w	lr, lr, fp
24002b22:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24002b26:	690f      	ldr	r7, [r1, #16]
24002b28:	fa07 f70b 	lsl.w	r7, r7, fp
24002b2c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
24002b30:	f8ca 7020 	str.w	r7, [sl, #32]
24002b34:	e001      	b.n	24002b3a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24002b36:	2d03      	cmp	r5, #3
24002b38:	d1da      	bne.n	24002af0 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
24002b3a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24002b3c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24002b40:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24002b44:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24002b48:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
24002b4c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24002b4e:	d06b      	beq.n	24002c28 <HAL_GPIO_Init+0x1a4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24002b50:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
24002b54:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24002b58:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24002b5c:	f045 0502 	orr.w	r5, r5, #2
24002b60:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24002b64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24002b68:	f8c9 5154 	str.w	r5, [r9, #340]	; 0x154
24002b6c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
24002b70:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
24002b74:	f005 0502 	and.w	r5, r5, #2
24002b78:	9501      	str	r5, [sp, #4]
24002b7a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24002b7c:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2U];
24002b7e:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24002b82:	fa05 f50c 	lsl.w	r5, r5, ip
24002b86:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24002b8a:	4d31      	ldr	r5, [pc, #196]	; (24002c50 <HAL_GPIO_Init+0x1cc>)
24002b8c:	42a8      	cmp	r0, r5
24002b8e:	d04d      	beq.n	24002c2c <HAL_GPIO_Init+0x1a8>
24002b90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002b94:	42a8      	cmp	r0, r5
24002b96:	d04b      	beq.n	24002c30 <HAL_GPIO_Init+0x1ac>
24002b98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002b9c:	42a8      	cmp	r0, r5
24002b9e:	d049      	beq.n	24002c34 <HAL_GPIO_Init+0x1b0>
24002ba0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002ba4:	42a8      	cmp	r0, r5
24002ba6:	d047      	beq.n	24002c38 <HAL_GPIO_Init+0x1b4>
24002ba8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bac:	42a8      	cmp	r0, r5
24002bae:	d045      	beq.n	24002c3c <HAL_GPIO_Init+0x1b8>
24002bb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bb4:	42a8      	cmp	r0, r5
24002bb6:	d043      	beq.n	24002c40 <HAL_GPIO_Init+0x1bc>
24002bb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bbc:	42a8      	cmp	r0, r5
24002bbe:	d041      	beq.n	24002c44 <HAL_GPIO_Init+0x1c0>
24002bc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bc4:	42a8      	cmp	r0, r5
24002bc6:	d03f      	beq.n	24002c48 <HAL_GPIO_Init+0x1c4>
24002bc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bcc:	42a8      	cmp	r0, r5
24002bce:	d03d      	beq.n	24002c4c <HAL_GPIO_Init+0x1c8>
24002bd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24002bd4:	42a8      	cmp	r0, r5
24002bd6:	bf0c      	ite	eq
24002bd8:	2509      	moveq	r5, #9
24002bda:	250a      	movne	r5, #10
24002bdc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24002be0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24002be4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
24002be8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
24002bea:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
24002bee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
24002bf0:	bf0c      	ite	eq
24002bf2:	403d      	andeq	r5, r7
          temp |= iocurrent;
24002bf4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24002bf6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
24002bfa:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
24002bfc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
24002bfe:	bf0c      	ite	eq
24002c00:	403d      	andeq	r5, r7
          temp |= iocurrent;
24002c02:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24002c04:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
24002c08:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
24002c0a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
24002c0e:	bf0c      	ite	eq
24002c10:	403d      	andeq	r5, r7
          temp |= iocurrent;
24002c12:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24002c14:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
24002c16:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
24002c1a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
24002c1e:	bf54      	ite	pl
24002c20:	403d      	andpl	r5, r7
          temp |= iocurrent;
24002c22:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
24002c24:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
24002c28:	3301      	adds	r3, #1
24002c2a:	e732      	b.n	24002a92 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24002c2c:	2500      	movs	r5, #0
24002c2e:	e7d5      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c30:	2501      	movs	r5, #1
24002c32:	e7d3      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c34:	2502      	movs	r5, #2
24002c36:	e7d1      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c38:	2503      	movs	r5, #3
24002c3a:	e7cf      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c3c:	2504      	movs	r5, #4
24002c3e:	e7cd      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c40:	2505      	movs	r5, #5
24002c42:	e7cb      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c44:	2506      	movs	r5, #6
24002c46:	e7c9      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c48:	2507      	movs	r5, #7
24002c4a:	e7c7      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c4c:	2508      	movs	r5, #8
24002c4e:	e7c5      	b.n	24002bdc <HAL_GPIO_Init+0x158>
24002c50:	58020000 	.word	0x58020000
24002c54:	58024400 	.word	0x58024400

24002c58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24002c58:	b10a      	cbz	r2, 24002c5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24002c5a:	6181      	str	r1, [r0, #24]
  }
}
24002c5c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24002c5e:	0409      	lsls	r1, r1, #16
24002c60:	e7fb      	b.n	24002c5a <HAL_GPIO_WritePin+0x2>

24002c62 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
24002c62:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
24002c64:	ea01 0203 	and.w	r2, r1, r3
24002c68:	ea21 0103 	bic.w	r1, r1, r3
24002c6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
24002c70:	6181      	str	r1, [r0, #24]
}
24002c72:	4770      	bx	lr

24002c74 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
24002c74:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
24002c76:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24002c78:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
24002c7c:	3284      	adds	r2, #132	; 0x84
24002c7e:	1883      	adds	r3, r0, r2
{
24002c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
24002c84:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
24002c86:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
24002c8a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
24002c8c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
24002c90:	684c      	ldr	r4, [r1, #4]
24002c92:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
24002c96:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
24002c9a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
24002c9e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
24002ca0:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
24002ca2:	68c5      	ldr	r5, [r0, #12]
24002ca4:	f3c5 450b 	ubfx	r5, r5, #16, #12
24002ca8:	443d      	add	r5, r7
24002caa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24002cae:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
24002cb0:	68c6      	ldr	r6, [r0, #12]
24002cb2:	68cd      	ldr	r5, [r1, #12]
24002cb4:	f3c6 060a 	ubfx	r6, r6, #0, #11
24002cb8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
24002cba:	689d      	ldr	r5, [r3, #8]
24002cbc:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
24002cc0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
24002cc2:	688d      	ldr	r5, [r1, #8]
24002cc4:	68c7      	ldr	r7, [r0, #12]
24002cc6:	3501      	adds	r5, #1
24002cc8:	f3c7 070a 	ubfx	r7, r7, #0, #11
24002ccc:	443d      	add	r5, r7
24002cce:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
24002cd2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
24002cd4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
24002cd6:	691d      	ldr	r5, [r3, #16]
24002cd8:	f025 0507 	bic.w	r5, r5, #7
24002cdc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
24002cde:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
24002ce0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
24002ce2:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
24002ce6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
24002cea:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
24002cee:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
24002cf2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
24002cf6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
24002cfa:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
24002cfe:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
24002d00:	695d      	ldr	r5, [r3, #20]
24002d02:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
24002d06:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
24002d08:	694d      	ldr	r5, [r1, #20]
24002d0a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
24002d0c:	69dd      	ldr	r5, [r3, #28]
24002d0e:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
24002d12:	f025 0507 	bic.w	r5, r5, #7
24002d16:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
24002d18:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
24002d1c:	433d      	orrs	r5, r7
24002d1e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
24002d20:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
24002d22:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
24002d24:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
24002d28:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
24002d2a:	b1fe      	cbz	r6, 24002d6c <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
24002d2c:	3e01      	subs	r6, #1
24002d2e:	2e06      	cmp	r6, #6
24002d30:	d81e      	bhi.n	24002d70 <LTDC_SetConfig+0xfc>
24002d32:	4d10      	ldr	r5, [pc, #64]	; (24002d74 <LTDC_SetConfig+0x100>)
24002d34:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
24002d36:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24002d38:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
24002d3c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24002d40:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
24002d42:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24002d44:	3407      	adds	r4, #7
24002d46:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
24002d48:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24002d4a:	436e      	muls	r6, r5
24002d4c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
24002d50:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
24002d52:	6b1c      	ldr	r4, [r3, #48]	; 0x30
24002d54:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
24002d58:	f024 0407 	bic.w	r4, r4, #7
24002d5c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
24002d5e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
24002d60:	5883      	ldr	r3, [r0, r2]
24002d62:	f043 0301 	orr.w	r3, r3, #1
24002d66:	5083      	str	r3, [r0, r2]
}
24002d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
24002d6c:	2504      	movs	r5, #4
24002d6e:	e7e2      	b.n	24002d36 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
24002d70:	2501      	movs	r5, #1
24002d72:	e7e0      	b.n	24002d36 <LTDC_SetConfig+0xc2>
24002d74:	900d6508 	.word	0x900d6508

24002d78 <HAL_LTDC_Init>:
{
24002d78:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
24002d7a:	4604      	mov	r4, r0
24002d7c:	2800      	cmp	r0, #0
24002d7e:	d063      	beq.n	24002e48 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
24002d80:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
24002d84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24002d88:	b91b      	cbnz	r3, 24002d92 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
24002d8a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
24002d8e:	f7fd fbc7 	bl	24000520 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
24002d92:	2302      	movs	r3, #2
24002d94:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
24002d98:	6823      	ldr	r3, [r4, #0]
24002d9a:	699a      	ldr	r2, [r3, #24]
24002d9c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
24002da0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24002da2:	6999      	ldr	r1, [r3, #24]
24002da4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
24002da8:	4302      	orrs	r2, r0
24002daa:	68e0      	ldr	r0, [r4, #12]
24002dac:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24002dae:	6920      	ldr	r0, [r4, #16]
24002db0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
24002db2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24002db4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
24002db6:	4925      	ldr	r1, [pc, #148]	; (24002e4c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24002db8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
24002dba:	689a      	ldr	r2, [r3, #8]
24002dbc:	400a      	ands	r2, r1
24002dbe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
24002dc0:	689a      	ldr	r2, [r3, #8]
24002dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
24002dc6:	69a0      	ldr	r0, [r4, #24]
24002dc8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
24002dca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
24002dcc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
24002dce:	68da      	ldr	r2, [r3, #12]
24002dd0:	400a      	ands	r2, r1
24002dd2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
24002dd4:	68da      	ldr	r2, [r3, #12]
24002dd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
24002dda:	6a20      	ldr	r0, [r4, #32]
24002ddc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
24002dde:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
24002de0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
24002de2:	691a      	ldr	r2, [r3, #16]
24002de4:	400a      	ands	r2, r1
24002de6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
24002de8:	691a      	ldr	r2, [r3, #16]
24002dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
24002dee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
24002df0:	4302      	orrs	r2, r0
24002df2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
24002df4:	695a      	ldr	r2, [r3, #20]
24002df6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
24002df8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
24002dfa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
24002dfc:	695a      	ldr	r2, [r3, #20]
24002dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
24002e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
24002e04:	430a      	orrs	r2, r1
24002e06:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
24002e0a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24002e0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
24002e12:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24002e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
24002e18:	6add      	ldr	r5, [r3, #44]	; 0x2c
24002e1a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
24002e1e:	432a      	orrs	r2, r5
24002e20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
24002e24:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
24002e26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
24002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
24002e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24002e2e:	f042 0206 	orr.w	r2, r2, #6
24002e32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
24002e34:	699a      	ldr	r2, [r3, #24]
24002e36:	f042 0201 	orr.w	r2, r2, #1
24002e3a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
24002e3c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
24002e3e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
24002e42:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
24002e46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
24002e48:	2001      	movs	r0, #1
24002e4a:	e7fc      	b.n	24002e46 <HAL_LTDC_Init+0xce>
24002e4c:	f000f800 	.word	0xf000f800

24002e50 <HAL_LTDC_ConfigLayer>:
{
24002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
24002e54:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
24002e58:	4606      	mov	r6, r0
24002e5a:	460f      	mov	r7, r1
24002e5c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
24002e5e:	2b01      	cmp	r3, #1
24002e60:	f04f 0002 	mov.w	r0, #2
24002e64:	d01f      	beq.n	24002ea6 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24002e66:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
24002e68:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24002e6c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
24002e6e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24002e72:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
24002e76:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24002e7a:	3438      	adds	r4, #56	; 0x38
24002e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24002e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24002e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24002e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24002e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24002e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24002e88:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002e8a:	4630      	mov	r0, r6
24002e8c:	4662      	mov	r2, ip
24002e8e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24002e90:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002e92:	f7ff feef 	bl	24002c74 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002e96:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
24002e98:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002e9a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
24002e9e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
24002ea2:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
24002ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

24002eaa <HAL_LTDC_SetWindowSize>:
{
24002eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
24002eac:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
24002eb0:	4604      	mov	r4, r0
24002eb2:	469e      	mov	lr, r3
  __HAL_LOCK(hltdc);
24002eb4:	2d01      	cmp	r5, #1
24002eb6:	f04f 0502 	mov.w	r5, #2
24002eba:	d021      	beq.n	24002f00 <HAL_LTDC_SetWindowSize+0x56>
  hltdc->State = HAL_LTDC_STATE_BUSY;
24002ebc:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
24002ec0:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
24002ec2:	2701      	movs	r7, #1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
24002ec4:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
24002ec6:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
24002eca:	1946      	adds	r6, r0, r5
24002ecc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
24002ece:	eb03 0c01 	add.w	ip, r3, r1
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
24002ed2:	6c33      	ldr	r3, [r6, #64]	; 0x40
  pLayerCfg->ImageHeight = YSize;
24002ed4:	e9c6 1218 	strd	r1, r2, [r6, #96]	; 0x60
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
24002ed8:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24002edc:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
24002ee0:	eb03 0c02 	add.w	ip, r3, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002ee4:	4672      	mov	r2, lr
24002ee6:	4401      	add	r1, r0
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
24002ee8:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002eec:	f7ff fec2 	bl	24002c74 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002ef0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
24002ef2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002ef4:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
24002ef6:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
24002efa:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
24002efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
24002f00:	4628      	mov	r0, r5
24002f02:	e7fc      	b.n	24002efe <HAL_LTDC_SetWindowSize+0x54>

24002f04 <HAL_LTDC_SetWindowPosition>:
{
24002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
24002f06:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
24002f0a:	4604      	mov	r4, r0
24002f0c:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
24002f0e:	2d01      	cmp	r5, #1
24002f10:	f04f 0502 	mov.w	r5, #2
24002f14:	d01d      	beq.n	24002f52 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
24002f16:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
24002f1a:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
24002f1c:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
24002f1e:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
24002f20:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
24002f24:	1946      	adds	r6, r0, r5
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
24002f26:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
24002f28:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
24002f2a:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
24002f2c:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
24002f30:	6e71      	ldr	r1, [r6, #100]	; 0x64
24002f32:	4411      	add	r1, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002f34:	4662      	mov	r2, ip
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
24002f36:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24002f38:	f105 0138 	add.w	r1, r5, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002f3c:	4401      	add	r1, r0
24002f3e:	f7ff fe99 	bl	24002c74 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002f42:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
24002f44:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002f46:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
24002f48:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
24002f4c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
24002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
24002f52:	4628      	mov	r0, r5
24002f54:	e7fc      	b.n	24002f50 <HAL_LTDC_SetWindowPosition+0x4c>

24002f56 <HAL_LTDC_SetAddress>:
{
24002f56:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
24002f58:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
24002f5c:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
24002f5e:	2b01      	cmp	r3, #1
24002f60:	f04f 0302 	mov.w	r3, #2
24002f64:	d015      	beq.n	24002f92 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
24002f66:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
24002f6a:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
24002f6c:	2601      	movs	r6, #1
  pLayerCfg->FBStartAdress = Address;
24002f6e:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
24002f70:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
24002f74:	18c5      	adds	r5, r0, r3
24002f76:	65e9      	str	r1, [r5, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24002f78:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24002f7c:	4401      	add	r1, r0
24002f7e:	f7ff fe79 	bl	24002c74 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002f82:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
24002f84:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24002f86:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
24002f88:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
24002f8c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
24002f90:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
24002f92:	4618      	mov	r0, r3
24002f94:	e7fc      	b.n	24002f90 <HAL_LTDC_SetAddress+0x3a>
	...

24002f98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24002f98:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24002f9a:	4c10      	ldr	r4, [pc, #64]	; (24002fdc <HAL_PWREx_ConfigSupply+0x44>)
24002f9c:	68e3      	ldr	r3, [r4, #12]
24002f9e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24002fa2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24002fa4:	d105      	bne.n	24002fb2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24002fa6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24002faa:	1a18      	subs	r0, r3, r0
24002fac:	bf18      	it	ne
24002fae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24002fb0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24002fb2:	f023 0307 	bic.w	r3, r3, #7
24002fb6:	4318      	orrs	r0, r3
24002fb8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
24002fba:	f7fe f85f 	bl	2400107c <HAL_GetTick>
24002fbe:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24002fc0:	6863      	ldr	r3, [r4, #4]
24002fc2:	049b      	lsls	r3, r3, #18
24002fc4:	d501      	bpl.n	24002fca <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
24002fc6:	2000      	movs	r0, #0
24002fc8:	e7f2      	b.n	24002fb0 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24002fca:	f7fe f857 	bl	2400107c <HAL_GetTick>
24002fce:	1b40      	subs	r0, r0, r5
24002fd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24002fd4:	d9f4      	bls.n	24002fc0 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
24002fd6:	2001      	movs	r0, #1
24002fd8:	e7ea      	b.n	24002fb0 <HAL_PWREx_ConfigSupply+0x18>
24002fda:	bf00      	nop
24002fdc:	58024800 	.word	0x58024800

24002fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
24002fe2:	4604      	mov	r4, r0
24002fe4:	b908      	cbnz	r0, 24002fea <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
24002fe6:	2001      	movs	r0, #1
24002fe8:	e080      	b.n	240030ec <HAL_RCC_OscConfig+0x10c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24002fea:	6803      	ldr	r3, [r0, #0]
24002fec:	07d8      	lsls	r0, r3, #31
24002fee:	d453      	bmi.n	24003098 <HAL_RCC_OscConfig+0xb8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24002ff0:	6823      	ldr	r3, [r4, #0]
24002ff2:	0799      	lsls	r1, r3, #30
24002ff4:	f100 80b7 	bmi.w	24003166 <HAL_RCC_OscConfig+0x186>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24002ff8:	6823      	ldr	r3, [r4, #0]
24002ffa:	06da      	lsls	r2, r3, #27
24002ffc:	d51c      	bpl.n	24003038 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24002ffe:	4a97      	ldr	r2, [pc, #604]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
24003000:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24003002:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24003004:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24003008:	2b08      	cmp	r3, #8
2400300a:	d007      	beq.n	2400301c <HAL_RCC_OscConfig+0x3c>
2400300c:	2b18      	cmp	r3, #24
2400300e:	f040 80f8 	bne.w	24003202 <HAL_RCC_OscConfig+0x222>
24003012:	f001 0303 	and.w	r3, r1, #3
24003016:	2b01      	cmp	r3, #1
24003018:	f040 80f3 	bne.w	24003202 <HAL_RCC_OscConfig+0x222>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2400301c:	6813      	ldr	r3, [r2, #0]
2400301e:	05db      	lsls	r3, r3, #23
24003020:	d502      	bpl.n	24003028 <HAL_RCC_OscConfig+0x48>
24003022:	69e3      	ldr	r3, [r4, #28]
24003024:	2b80      	cmp	r3, #128	; 0x80
24003026:	d1de      	bne.n	24002fe6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24003028:	4a8c      	ldr	r2, [pc, #560]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
2400302a:	6a21      	ldr	r1, [r4, #32]
2400302c:	68d3      	ldr	r3, [r2, #12]
2400302e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24003032:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24003036:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24003038:	6823      	ldr	r3, [r4, #0]
2400303a:	0719      	lsls	r1, r3, #28
2400303c:	f100 8112 	bmi.w	24003264 <HAL_RCC_OscConfig+0x284>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24003040:	6823      	ldr	r3, [r4, #0]
24003042:	069a      	lsls	r2, r3, #26
24003044:	f100 8133 	bmi.w	240032ae <HAL_RCC_OscConfig+0x2ce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24003048:	6823      	ldr	r3, [r4, #0]
2400304a:	075d      	lsls	r5, r3, #29
2400304c:	d51e      	bpl.n	2400308c <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
2400304e:	4d84      	ldr	r5, [pc, #528]	; (24003260 <HAL_RCC_OscConfig+0x280>)
24003050:	682b      	ldr	r3, [r5, #0]
24003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003056:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24003058:	f7fe f810 	bl	2400107c <HAL_GetTick>
2400305c:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400305e:	682b      	ldr	r3, [r5, #0]
24003060:	05da      	lsls	r2, r3, #23
24003062:	f140 8149 	bpl.w	240032f8 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24003066:	68a3      	ldr	r3, [r4, #8]
24003068:	4d7c      	ldr	r5, [pc, #496]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
2400306a:	2b01      	cmp	r3, #1
2400306c:	f040 814b 	bne.w	24003306 <HAL_RCC_OscConfig+0x326>
24003070:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003072:	f043 0301 	orr.w	r3, r3, #1
24003076:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24003078:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
2400307c:	f7fd fffe 	bl	2400107c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24003080:	4e76      	ldr	r6, [pc, #472]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
      tickstart = HAL_GetTick();
24003082:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24003084:	6f33      	ldr	r3, [r6, #112]	; 0x70
24003086:	079b      	lsls	r3, r3, #30
24003088:	f140 8179 	bpl.w	2400337e <HAL_RCC_OscConfig+0x39e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2400308c:	6a60      	ldr	r0, [r4, #36]	; 0x24
2400308e:	2800      	cmp	r0, #0
24003090:	f040 817c 	bne.w	2400338c <HAL_RCC_OscConfig+0x3ac>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
24003094:	2000      	movs	r0, #0
24003096:	e029      	b.n	240030ec <HAL_RCC_OscConfig+0x10c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24003098:	4a70      	ldr	r2, [pc, #448]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
2400309a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400309c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400309e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240030a2:	2b10      	cmp	r3, #16
240030a4:	d005      	beq.n	240030b2 <HAL_RCC_OscConfig+0xd2>
240030a6:	2b18      	cmp	r3, #24
240030a8:	d10a      	bne.n	240030c0 <HAL_RCC_OscConfig+0xe0>
240030aa:	f001 0303 	and.w	r3, r1, #3
240030ae:	2b02      	cmp	r3, #2
240030b0:	d106      	bne.n	240030c0 <HAL_RCC_OscConfig+0xe0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240030b2:	6813      	ldr	r3, [r2, #0]
240030b4:	039a      	lsls	r2, r3, #14
240030b6:	d59b      	bpl.n	24002ff0 <HAL_RCC_OscConfig+0x10>
240030b8:	6863      	ldr	r3, [r4, #4]
240030ba:	2b00      	cmp	r3, #0
240030bc:	d198      	bne.n	24002ff0 <HAL_RCC_OscConfig+0x10>
240030be:	e792      	b.n	24002fe6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240030c0:	6863      	ldr	r3, [r4, #4]
240030c2:	4d66      	ldr	r5, [pc, #408]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
240030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240030c8:	d111      	bne.n	240030ee <HAL_RCC_OscConfig+0x10e>
240030ca:	682b      	ldr	r3, [r5, #0]
240030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240030d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240030d2:	f7fd ffd3 	bl	2400107c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240030d6:	4e61      	ldr	r6, [pc, #388]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
240030d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240030da:	6833      	ldr	r3, [r6, #0]
240030dc:	039b      	lsls	r3, r3, #14
240030de:	d487      	bmi.n	24002ff0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240030e0:	f7fd ffcc 	bl	2400107c <HAL_GetTick>
240030e4:	1b40      	subs	r0, r0, r5
240030e6:	2864      	cmp	r0, #100	; 0x64
240030e8:	d9f7      	bls.n	240030da <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
240030ea:	2003      	movs	r0, #3
}
240030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240030ee:	b9c3      	cbnz	r3, 24003122 <HAL_RCC_OscConfig+0x142>
240030f0:	682b      	ldr	r3, [r5, #0]
240030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240030f6:	602b      	str	r3, [r5, #0]
240030f8:	682b      	ldr	r3, [r5, #0]
240030fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
240030fe:	602b      	str	r3, [r5, #0]
24003100:	682b      	ldr	r3, [r5, #0]
24003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24003106:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24003108:	f7fd ffb8 	bl	2400107c <HAL_GetTick>
2400310c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2400310e:	682b      	ldr	r3, [r5, #0]
24003110:	039f      	lsls	r7, r3, #14
24003112:	f57f af6d 	bpl.w	24002ff0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24003116:	f7fd ffb1 	bl	2400107c <HAL_GetTick>
2400311a:	1b80      	subs	r0, r0, r6
2400311c:	2864      	cmp	r0, #100	; 0x64
2400311e:	d9f6      	bls.n	2400310e <HAL_RCC_OscConfig+0x12e>
24003120:	e7e3      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24003122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24003126:	d108      	bne.n	2400313a <HAL_RCC_OscConfig+0x15a>
24003128:	682b      	ldr	r3, [r5, #0]
2400312a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400312e:	602b      	str	r3, [r5, #0]
24003130:	682b      	ldr	r3, [r5, #0]
24003132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24003136:	602b      	str	r3, [r5, #0]
24003138:	e7c7      	b.n	240030ca <HAL_RCC_OscConfig+0xea>
2400313a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
2400313e:	682b      	ldr	r3, [r5, #0]
24003140:	d106      	bne.n	24003150 <HAL_RCC_OscConfig+0x170>
24003142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24003146:	602b      	str	r3, [r5, #0]
24003148:	682b      	ldr	r3, [r5, #0]
2400314a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2400314e:	e7f2      	b.n	24003136 <HAL_RCC_OscConfig+0x156>
24003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24003154:	602b      	str	r3, [r5, #0]
24003156:	682b      	ldr	r3, [r5, #0]
24003158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2400315c:	602b      	str	r3, [r5, #0]
2400315e:	682b      	ldr	r3, [r5, #0]
24003160:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24003164:	e7b4      	b.n	240030d0 <HAL_RCC_OscConfig+0xf0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24003166:	493d      	ldr	r1, [pc, #244]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
24003168:	68e2      	ldr	r2, [r4, #12]
2400316a:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400316c:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400316e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24003172:	d003      	beq.n	2400317c <HAL_RCC_OscConfig+0x19c>
24003174:	2b18      	cmp	r3, #24
24003176:	d121      	bne.n	240031bc <HAL_RCC_OscConfig+0x1dc>
24003178:	0780      	lsls	r0, r0, #30
2400317a:	d11f      	bne.n	240031bc <HAL_RCC_OscConfig+0x1dc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400317c:	680b      	ldr	r3, [r1, #0]
2400317e:	075b      	lsls	r3, r3, #29
24003180:	d502      	bpl.n	24003188 <HAL_RCC_OscConfig+0x1a8>
24003182:	2a00      	cmp	r2, #0
24003184:	f43f af2f 	beq.w	24002fe6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24003188:	4d34      	ldr	r5, [pc, #208]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
2400318a:	682b      	ldr	r3, [r5, #0]
2400318c:	f023 0319 	bic.w	r3, r3, #25
24003190:	4313      	orrs	r3, r2
24003192:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24003194:	f7fd ff72 	bl	2400107c <HAL_GetTick>
24003198:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400319a:	682b      	ldr	r3, [r5, #0]
2400319c:	075f      	lsls	r7, r3, #29
2400319e:	d507      	bpl.n	240031b0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240031a0:	686b      	ldr	r3, [r5, #4]
240031a2:	6922      	ldr	r2, [r4, #16]
240031a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
240031a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240031ac:	606b      	str	r3, [r5, #4]
240031ae:	e723      	b.n	24002ff8 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240031b0:	f7fd ff64 	bl	2400107c <HAL_GetTick>
240031b4:	1b80      	subs	r0, r0, r6
240031b6:	2802      	cmp	r0, #2
240031b8:	d9ef      	bls.n	2400319a <HAL_RCC_OscConfig+0x1ba>
240031ba:	e796      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240031bc:	4d27      	ldr	r5, [pc, #156]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240031be:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240031c0:	b17a      	cbz	r2, 240031e2 <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240031c2:	f023 0319 	bic.w	r3, r3, #25
240031c6:	4313      	orrs	r3, r2
240031c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240031ca:	f7fd ff57 	bl	2400107c <HAL_GetTick>
240031ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240031d0:	682b      	ldr	r3, [r5, #0]
240031d2:	0758      	lsls	r0, r3, #29
240031d4:	d4e4      	bmi.n	240031a0 <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240031d6:	f7fd ff51 	bl	2400107c <HAL_GetTick>
240031da:	1b80      	subs	r0, r0, r6
240031dc:	2802      	cmp	r0, #2
240031de:	d9f7      	bls.n	240031d0 <HAL_RCC_OscConfig+0x1f0>
240031e0:	e783      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_HSI_DISABLE();
240031e2:	f023 0301 	bic.w	r3, r3, #1
240031e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240031e8:	f7fd ff48 	bl	2400107c <HAL_GetTick>
240031ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240031ee:	682b      	ldr	r3, [r5, #0]
240031f0:	0759      	lsls	r1, r3, #29
240031f2:	f57f af01 	bpl.w	24002ff8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240031f6:	f7fd ff41 	bl	2400107c <HAL_GetTick>
240031fa:	1b80      	subs	r0, r0, r6
240031fc:	2802      	cmp	r0, #2
240031fe:	d9f6      	bls.n	240031ee <HAL_RCC_OscConfig+0x20e>
24003200:	e773      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24003202:	69e3      	ldr	r3, [r4, #28]
24003204:	4d15      	ldr	r5, [pc, #84]	; (2400325c <HAL_RCC_OscConfig+0x27c>)
24003206:	b1bb      	cbz	r3, 24003238 <HAL_RCC_OscConfig+0x258>
        __HAL_RCC_CSI_ENABLE();
24003208:	682b      	ldr	r3, [r5, #0]
2400320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400320e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24003210:	f7fd ff34 	bl	2400107c <HAL_GetTick>
24003214:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24003216:	682b      	ldr	r3, [r5, #0]
24003218:	05df      	lsls	r7, r3, #23
2400321a:	d507      	bpl.n	2400322c <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400321c:	68eb      	ldr	r3, [r5, #12]
2400321e:	6a22      	ldr	r2, [r4, #32]
24003220:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24003224:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24003228:	60eb      	str	r3, [r5, #12]
2400322a:	e705      	b.n	24003038 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400322c:	f7fd ff26 	bl	2400107c <HAL_GetTick>
24003230:	1b80      	subs	r0, r0, r6
24003232:	2802      	cmp	r0, #2
24003234:	d9ef      	bls.n	24003216 <HAL_RCC_OscConfig+0x236>
24003236:	e758      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
        __HAL_RCC_CSI_DISABLE();
24003238:	682b      	ldr	r3, [r5, #0]
2400323a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400323e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24003240:	f7fd ff1c 	bl	2400107c <HAL_GetTick>
24003244:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24003246:	682b      	ldr	r3, [r5, #0]
24003248:	05d8      	lsls	r0, r3, #23
2400324a:	f57f aef5 	bpl.w	24003038 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400324e:	f7fd ff15 	bl	2400107c <HAL_GetTick>
24003252:	1b80      	subs	r0, r0, r6
24003254:	2802      	cmp	r0, #2
24003256:	d9f6      	bls.n	24003246 <HAL_RCC_OscConfig+0x266>
24003258:	e747      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
2400325a:	bf00      	nop
2400325c:	58024400 	.word	0x58024400
24003260:	58024800 	.word	0x58024800
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24003264:	6963      	ldr	r3, [r4, #20]
24003266:	4d8a      	ldr	r5, [pc, #552]	; (24003490 <HAL_RCC_OscConfig+0x4b0>)
24003268:	b183      	cbz	r3, 2400328c <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_LSI_ENABLE();
2400326a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400326c:	f043 0301 	orr.w	r3, r3, #1
24003270:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24003272:	f7fd ff03 	bl	2400107c <HAL_GetTick>
24003276:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24003278:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400327a:	079b      	lsls	r3, r3, #30
2400327c:	f53f aee0 	bmi.w	24003040 <HAL_RCC_OscConfig+0x60>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24003280:	f7fd fefc 	bl	2400107c <HAL_GetTick>
24003284:	1b80      	subs	r0, r0, r6
24003286:	2802      	cmp	r0, #2
24003288:	d9f6      	bls.n	24003278 <HAL_RCC_OscConfig+0x298>
2400328a:	e72e      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_LSI_DISABLE();
2400328c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400328e:	f023 0301 	bic.w	r3, r3, #1
24003292:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24003294:	f7fd fef2 	bl	2400107c <HAL_GetTick>
24003298:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400329a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400329c:	079f      	lsls	r7, r3, #30
2400329e:	f57f aecf 	bpl.w	24003040 <HAL_RCC_OscConfig+0x60>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240032a2:	f7fd feeb 	bl	2400107c <HAL_GetTick>
240032a6:	1b80      	subs	r0, r0, r6
240032a8:	2802      	cmp	r0, #2
240032aa:	d9f6      	bls.n	2400329a <HAL_RCC_OscConfig+0x2ba>
240032ac:	e71d      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240032ae:	69a3      	ldr	r3, [r4, #24]
240032b0:	4d77      	ldr	r5, [pc, #476]	; (24003490 <HAL_RCC_OscConfig+0x4b0>)
240032b2:	b183      	cbz	r3, 240032d6 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_ENABLE();
240032b4:	682b      	ldr	r3, [r5, #0]
240032b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240032ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240032bc:	f7fd fede 	bl	2400107c <HAL_GetTick>
240032c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240032c2:	682b      	ldr	r3, [r5, #0]
240032c4:	0498      	lsls	r0, r3, #18
240032c6:	f53f aebf 	bmi.w	24003048 <HAL_RCC_OscConfig+0x68>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240032ca:	f7fd fed7 	bl	2400107c <HAL_GetTick>
240032ce:	1b80      	subs	r0, r0, r6
240032d0:	2802      	cmp	r0, #2
240032d2:	d9f6      	bls.n	240032c2 <HAL_RCC_OscConfig+0x2e2>
240032d4:	e709      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSI48_DISABLE();
240032d6:	682b      	ldr	r3, [r5, #0]
240032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240032dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240032de:	f7fd fecd 	bl	2400107c <HAL_GetTick>
240032e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240032e4:	682b      	ldr	r3, [r5, #0]
240032e6:	0499      	lsls	r1, r3, #18
240032e8:	f57f aeae 	bpl.w	24003048 <HAL_RCC_OscConfig+0x68>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240032ec:	f7fd fec6 	bl	2400107c <HAL_GetTick>
240032f0:	1b80      	subs	r0, r0, r6
240032f2:	2802      	cmp	r0, #2
240032f4:	d9f6      	bls.n	240032e4 <HAL_RCC_OscConfig+0x304>
240032f6:	e6f8      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240032f8:	f7fd fec0 	bl	2400107c <HAL_GetTick>
240032fc:	1b80      	subs	r0, r0, r6
240032fe:	2864      	cmp	r0, #100	; 0x64
24003300:	f67f aead 	bls.w	2400305e <HAL_RCC_OscConfig+0x7e>
24003304:	e6f1      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24003306:	b9d3      	cbnz	r3, 2400333e <HAL_RCC_OscConfig+0x35e>
24003308:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400330a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400330e:	f023 0301 	bic.w	r3, r3, #1
24003312:	672b      	str	r3, [r5, #112]	; 0x70
24003314:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400331a:	672b      	str	r3, [r5, #112]	; 0x70
2400331c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
2400331e:	f023 0304 	bic.w	r3, r3, #4
24003322:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
24003324:	f7fd feaa 	bl	2400107c <HAL_GetTick>
24003328:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400332a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
2400332c:	0798      	lsls	r0, r3, #30
2400332e:	f57f aead 	bpl.w	2400308c <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24003332:	f7fd fea3 	bl	2400107c <HAL_GetTick>
24003336:	1b80      	subs	r0, r0, r6
24003338:	42b8      	cmp	r0, r7
2400333a:	d9f6      	bls.n	2400332a <HAL_RCC_OscConfig+0x34a>
2400333c:	e6d5      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400333e:	2b05      	cmp	r3, #5
24003340:	d108      	bne.n	24003354 <HAL_RCC_OscConfig+0x374>
24003342:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003344:	f043 0304 	orr.w	r3, r3, #4
24003348:	672b      	str	r3, [r5, #112]	; 0x70
2400334a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
2400334c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24003350:	672b      	str	r3, [r5, #112]	; 0x70
24003352:	e68d      	b.n	24003070 <HAL_RCC_OscConfig+0x90>
24003354:	2b85      	cmp	r3, #133	; 0x85
24003356:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003358:	d106      	bne.n	24003368 <HAL_RCC_OscConfig+0x388>
2400335a:	f043 0304 	orr.w	r3, r3, #4
2400335e:	672b      	str	r3, [r5, #112]	; 0x70
24003360:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24003366:	e7f3      	b.n	24003350 <HAL_RCC_OscConfig+0x370>
24003368:	f023 0301 	bic.w	r3, r3, #1
2400336c:	672b      	str	r3, [r5, #112]	; 0x70
2400336e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003370:	f023 0304 	bic.w	r3, r3, #4
24003374:	672b      	str	r3, [r5, #112]	; 0x70
24003376:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24003378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400337c:	e67b      	b.n	24003076 <HAL_RCC_OscConfig+0x96>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400337e:	f7fd fe7d 	bl	2400107c <HAL_GetTick>
24003382:	1b40      	subs	r0, r0, r5
24003384:	42b8      	cmp	r0, r7
24003386:	f67f ae7d 	bls.w	24003084 <HAL_RCC_OscConfig+0xa4>
2400338a:	e6ae      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2400338c:	4d40      	ldr	r5, [pc, #256]	; (24003490 <HAL_RCC_OscConfig+0x4b0>)
2400338e:	692b      	ldr	r3, [r5, #16]
24003390:	f003 0338 	and.w	r3, r3, #56	; 0x38
24003394:	2b18      	cmp	r3, #24
24003396:	d07d      	beq.n	24003494 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
24003398:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400339a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
2400339c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240033a0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240033a2:	d167      	bne.n	24003474 <HAL_RCC_OscConfig+0x494>
        tickstart = HAL_GetTick();
240033a4:	f7fd fe6a 	bl	2400107c <HAL_GetTick>
240033a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240033aa:	682b      	ldr	r3, [r5, #0]
240033ac:	0199      	lsls	r1, r3, #6
240033ae:	d45b      	bmi.n	24003468 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240033b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
240033b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
240033b4:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
240033b8:	f023 0303 	bic.w	r3, r3, #3
240033bc:	4313      	orrs	r3, r2
240033be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240033c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240033c4:	62ab      	str	r3, [r5, #40]	; 0x28
240033c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
240033c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240033ca:	3b01      	subs	r3, #1
240033cc:	3a01      	subs	r2, #1
240033ce:	025b      	lsls	r3, r3, #9
240033d0:	0412      	lsls	r2, r2, #16
240033d2:	b29b      	uxth	r3, r3
240033d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240033d8:	4313      	orrs	r3, r2
240033da:	6b22      	ldr	r2, [r4, #48]	; 0x30
240033dc:	3a01      	subs	r2, #1
240033de:	f3c2 0208 	ubfx	r2, r2, #0, #9
240033e2:	4313      	orrs	r3, r2
240033e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240033e6:	3a01      	subs	r2, #1
240033e8:	0612      	lsls	r2, r2, #24
240033ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240033ee:	4313      	orrs	r3, r2
240033f0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
240033f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240033f4:	f023 0301 	bic.w	r3, r3, #1
240033f8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240033fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
240033fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
240033fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
24003402:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
24003406:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
2400340a:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2400340c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400340e:	6c22      	ldr	r2, [r4, #64]	; 0x40
24003410:	f023 030c 	bic.w	r3, r3, #12
24003414:	4313      	orrs	r3, r2
24003416:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24003418:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400341a:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400341c:	f023 0302 	bic.w	r3, r3, #2
24003420:	4313      	orrs	r3, r2
24003422:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24003424:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400342a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400342c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003432:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24003434:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24003436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400343a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
2400343c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400343e:	f043 0301 	orr.w	r3, r3, #1
24003442:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24003444:	682b      	ldr	r3, [r5, #0]
24003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400344a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400344c:	f7fd fe16 	bl	2400107c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24003450:	4d0f      	ldr	r5, [pc, #60]	; (24003490 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
24003452:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24003454:	682b      	ldr	r3, [r5, #0]
24003456:	019a      	lsls	r2, r3, #6
24003458:	f53f ae1c 	bmi.w	24003094 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400345c:	f7fd fe0e 	bl	2400107c <HAL_GetTick>
24003460:	1b00      	subs	r0, r0, r4
24003462:	2802      	cmp	r0, #2
24003464:	d9f6      	bls.n	24003454 <HAL_RCC_OscConfig+0x474>
24003466:	e640      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24003468:	f7fd fe08 	bl	2400107c <HAL_GetTick>
2400346c:	1b80      	subs	r0, r0, r6
2400346e:	2802      	cmp	r0, #2
24003470:	d99b      	bls.n	240033aa <HAL_RCC_OscConfig+0x3ca>
24003472:	e63a      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
24003474:	f7fd fe02 	bl	2400107c <HAL_GetTick>
24003478:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400347a:	682b      	ldr	r3, [r5, #0]
2400347c:	019b      	lsls	r3, r3, #6
2400347e:	f57f ae09 	bpl.w	24003094 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24003482:	f7fd fdfb 	bl	2400107c <HAL_GetTick>
24003486:	1b00      	subs	r0, r0, r4
24003488:	2802      	cmp	r0, #2
2400348a:	d9f6      	bls.n	2400347a <HAL_RCC_OscConfig+0x49a>
2400348c:	e62d      	b.n	240030ea <HAL_RCC_OscConfig+0x10a>
2400348e:	bf00      	nop
24003490:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24003494:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
24003496:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24003498:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400349a:	f43f ae27 	beq.w	240030ec <HAL_RCC_OscConfig+0x10c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400349e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240034a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
240034a4:	4281      	cmp	r1, r0
240034a6:	f47f ad9e 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240034aa:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240034ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
240034b0:	428a      	cmp	r2, r1
240034b2:	f47f ad98 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240034b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
240034b8:	f3c3 0108 	ubfx	r1, r3, #0, #9
240034bc:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240034be:	4291      	cmp	r1, r2
240034c0:	f47f ad91 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240034c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
240034c6:	f3c3 2146 	ubfx	r1, r3, #9, #7
240034ca:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240034cc:	4291      	cmp	r1, r2
240034ce:	f47f ad8a 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240034d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240034d4:	f3c3 4106 	ubfx	r1, r3, #16, #7
240034d8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240034da:	4291      	cmp	r1, r2
240034dc:	f47f ad83 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240034e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240034e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
240034e6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240034e8:	4293      	cmp	r3, r2
240034ea:	f47f ad7c 	bne.w	24002fe6 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240034ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240034f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240034f2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240034f6:	429a      	cmp	r2, r3
240034f8:	f43f adcc 	beq.w	24003094 <HAL_RCC_OscConfig+0xb4>
          __HAL_RCC_PLLFRACN_DISABLE();
240034fc:	4d0c      	ldr	r5, [pc, #48]	; (24003530 <HAL_RCC_OscConfig+0x550>)
240034fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24003500:	f023 0301 	bic.w	r3, r3, #1
24003504:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
24003506:	f7fd fdb9 	bl	2400107c <HAL_GetTick>
2400350a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2400350c:	f7fd fdb6 	bl	2400107c <HAL_GetTick>
24003510:	42b0      	cmp	r0, r6
24003512:	d0fb      	beq.n	2400350c <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24003514:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24003516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24003518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
2400351c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
24003520:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24003524:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24003526:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24003528:	f043 0301 	orr.w	r3, r3, #1
2400352c:	62eb      	str	r3, [r5, #44]	; 0x2c
2400352e:	e5b1      	b.n	24003094 <HAL_RCC_OscConfig+0xb4>
24003530:	58024400 	.word	0x58024400

24003534 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24003534:	4b49      	ldr	r3, [pc, #292]	; (2400365c <HAL_RCC_GetSysClockFreq+0x128>)
24003536:	691a      	ldr	r2, [r3, #16]
24003538:	f002 0238 	and.w	r2, r2, #56	; 0x38
2400353c:	2a10      	cmp	r2, #16
{
2400353e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24003540:	f000 8088 	beq.w	24003654 <HAL_RCC_GetSysClockFreq+0x120>
24003544:	2a18      	cmp	r2, #24
24003546:	d00c      	beq.n	24003562 <HAL_RCC_GetSysClockFreq+0x2e>
24003548:	2a00      	cmp	r2, #0
2400354a:	f040 8085 	bne.w	24003658 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400354e:	681a      	ldr	r2, [r3, #0]
24003550:	4843      	ldr	r0, [pc, #268]	; (24003660 <HAL_RCC_GetSysClockFreq+0x12c>)
24003552:	f012 0f20 	tst.w	r2, #32
24003556:	d003      	beq.n	24003560 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24003558:	681b      	ldr	r3, [r3, #0]
2400355a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400355e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24003560:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24003562:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24003564:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24003566:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
24003568:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400356c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
24003572:	d0f5      	beq.n	24003560 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24003574:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24003578:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400357c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24003580:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24003584:	4362      	muls	r2, r4
24003586:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400358a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400358c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24003590:	ee06 2a90 	vmov	s13, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24003594:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
24003598:	d04e      	beq.n	24003638 <HAL_RCC_GetSysClockFreq+0x104>
2400359a:	2902      	cmp	r1, #2
2400359c:	d03e      	beq.n	2400361c <HAL_RCC_GetSysClockFreq+0xe8>
2400359e:	2900      	cmp	r1, #0
240035a0:	d14a      	bne.n	24003638 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240035a2:	681a      	ldr	r2, [r3, #0]
240035a4:	0692      	lsls	r2, r2, #26
240035a6:	d527      	bpl.n	240035f8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240035a8:	6819      	ldr	r1, [r3, #0]
240035aa:	4a2d      	ldr	r2, [pc, #180]	; (24003660 <HAL_RCC_GetSysClockFreq+0x12c>)
240035ac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240035b2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240035b8:	ee07 2a90 	vmov	s15, r2
240035bc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
240035c0:	eec5 7a87 	vdiv.f32	s15, s11, s14
240035c4:	ee07 3a10 	vmov	s14, r3
240035c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240035cc:	ee37 7a26 	vadd.f32	s14, s14, s13
240035d0:	ee37 7a06 	vadd.f32	s14, s14, s12
240035d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
240035d8:	4b20      	ldr	r3, [pc, #128]	; (2400365c <HAL_RCC_GetSysClockFreq+0x128>)
240035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240035dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
240035e0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
240035e2:	ee07 3a10 	vmov	s14, r3
240035e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
240035ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
240035ee:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240035f2:	ee17 0a90 	vmov	r0, s15
240035f6:	e7b3      	b.n	24003560 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
240035fe:	ee07 3a90 	vmov	s15, r3
24003602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400360a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400360e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24003664 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24003612:	eec6 6a07 	vdiv.f32	s13, s12, s14
24003616:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
2400361a:	e7dd      	b.n	240035d8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24003622:	ee07 3a90 	vmov	s15, r3
24003626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400362e:	ee77 7a86 	vadd.f32	s15, s15, s12
24003632:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 24003668 <HAL_RCC_GetSysClockFreq+0x134>
24003636:	e7ec      	b.n	24003612 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400363e:	ee07 3a90 	vmov	s15, r3
24003642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24003646:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400364a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400364e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 2400366c <HAL_RCC_GetSysClockFreq+0x138>
24003652:	e7de      	b.n	24003612 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
24003654:	4806      	ldr	r0, [pc, #24]	; (24003670 <HAL_RCC_GetSysClockFreq+0x13c>)
24003656:	e783      	b.n	24003560 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
24003658:	4806      	ldr	r0, [pc, #24]	; (24003674 <HAL_RCC_GetSysClockFreq+0x140>)
2400365a:	e781      	b.n	24003560 <HAL_RCC_GetSysClockFreq+0x2c>
2400365c:	58024400 	.word	0x58024400
24003660:	03d09000 	.word	0x03d09000
24003664:	4c742400 	.word	0x4c742400
24003668:	4b742400 	.word	0x4b742400
2400366c:	4a742400 	.word	0x4a742400
24003670:	00f42400 	.word	0x00f42400
24003674:	003d0900 	.word	0x003d0900

24003678 <HAL_RCC_ClockConfig>:
{
24003678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400367c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
2400367e:	4604      	mov	r4, r0
24003680:	b910      	cbnz	r0, 24003688 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
24003682:	2001      	movs	r0, #1
}
24003684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24003688:	4a88      	ldr	r2, [pc, #544]	; (240038ac <HAL_RCC_ClockConfig+0x234>)
2400368a:	6813      	ldr	r3, [r2, #0]
2400368c:	f003 030f 	and.w	r3, r3, #15
24003690:	428b      	cmp	r3, r1
24003692:	f0c0 8093 	bcc.w	240037bc <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24003696:	6823      	ldr	r3, [r4, #0]
24003698:	075f      	lsls	r7, r3, #29
2400369a:	f100 809b 	bmi.w	240037d4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400369e:	071e      	lsls	r6, r3, #28
240036a0:	d50b      	bpl.n	240036ba <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
240036a2:	4983      	ldr	r1, [pc, #524]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240036a4:	6960      	ldr	r0, [r4, #20]
240036a6:	69ca      	ldr	r2, [r1, #28]
240036a8:	f002 0270 	and.w	r2, r2, #112	; 0x70
240036ac:	4290      	cmp	r0, r2
240036ae:	d904      	bls.n	240036ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240036b0:	69ca      	ldr	r2, [r1, #28]
240036b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
240036b6:	4302      	orrs	r2, r0
240036b8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240036ba:	06d8      	lsls	r0, r3, #27
240036bc:	d50b      	bpl.n	240036d6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
240036be:	497c      	ldr	r1, [pc, #496]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240036c0:	69a0      	ldr	r0, [r4, #24]
240036c2:	69ca      	ldr	r2, [r1, #28]
240036c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
240036c8:	4290      	cmp	r0, r2
240036ca:	d904      	bls.n	240036d6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240036cc:	69ca      	ldr	r2, [r1, #28]
240036ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
240036d2:	4302      	orrs	r2, r0
240036d4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240036d6:	0699      	lsls	r1, r3, #26
240036d8:	d50b      	bpl.n	240036f2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
240036da:	4975      	ldr	r1, [pc, #468]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240036dc:	69e0      	ldr	r0, [r4, #28]
240036de:	6a0a      	ldr	r2, [r1, #32]
240036e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
240036e4:	4290      	cmp	r0, r2
240036e6:	d904      	bls.n	240036f2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240036e8:	6a0a      	ldr	r2, [r1, #32]
240036ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
240036ee:	4302      	orrs	r2, r0
240036f0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240036f2:	079a      	lsls	r2, r3, #30
240036f4:	d50b      	bpl.n	2400370e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
240036f6:	496e      	ldr	r1, [pc, #440]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240036f8:	68e0      	ldr	r0, [r4, #12]
240036fa:	698a      	ldr	r2, [r1, #24]
240036fc:	f002 020f 	and.w	r2, r2, #15
24003700:	4290      	cmp	r0, r2
24003702:	d904      	bls.n	2400370e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24003704:	698a      	ldr	r2, [r1, #24]
24003706:	f022 020f 	bic.w	r2, r2, #15
2400370a:	4302      	orrs	r2, r0
2400370c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400370e:	07df      	lsls	r7, r3, #31
24003710:	d46e      	bmi.n	240037f0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24003712:	6823      	ldr	r3, [r4, #0]
24003714:	079e      	lsls	r6, r3, #30
24003716:	f100 80a1 	bmi.w	2400385c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2400371a:	4964      	ldr	r1, [pc, #400]	; (240038ac <HAL_RCC_ClockConfig+0x234>)
2400371c:	680a      	ldr	r2, [r1, #0]
2400371e:	f002 020f 	and.w	r2, r2, #15
24003722:	42aa      	cmp	r2, r5
24003724:	f200 80a8 	bhi.w	24003878 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24003728:	0758      	lsls	r0, r3, #29
2400372a:	f100 80b1 	bmi.w	24003890 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400372e:	0719      	lsls	r1, r3, #28
24003730:	d50b      	bpl.n	2400374a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
24003732:	495f      	ldr	r1, [pc, #380]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
24003734:	6960      	ldr	r0, [r4, #20]
24003736:	69ca      	ldr	r2, [r1, #28]
24003738:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400373c:	4290      	cmp	r0, r2
2400373e:	d204      	bcs.n	2400374a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24003740:	69ca      	ldr	r2, [r1, #28]
24003742:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24003746:	4302      	orrs	r2, r0
24003748:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400374a:	06da      	lsls	r2, r3, #27
2400374c:	d50b      	bpl.n	24003766 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2400374e:	4958      	ldr	r1, [pc, #352]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
24003750:	69a0      	ldr	r0, [r4, #24]
24003752:	69ca      	ldr	r2, [r1, #28]
24003754:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24003758:	4290      	cmp	r0, r2
2400375a:	d204      	bcs.n	24003766 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400375c:	69ca      	ldr	r2, [r1, #28]
2400375e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
24003762:	4302      	orrs	r2, r0
24003764:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24003766:	069b      	lsls	r3, r3, #26
24003768:	d50b      	bpl.n	24003782 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2400376a:	4a51      	ldr	r2, [pc, #324]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
2400376c:	69e1      	ldr	r1, [r4, #28]
2400376e:	6a13      	ldr	r3, [r2, #32]
24003770:	f003 0370 	and.w	r3, r3, #112	; 0x70
24003774:	4299      	cmp	r1, r3
24003776:	d204      	bcs.n	24003782 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24003778:	6a13      	ldr	r3, [r2, #32]
2400377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400377e:	430b      	orrs	r3, r1
24003780:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24003782:	f7ff fed7 	bl	24003534 <HAL_RCC_GetSysClockFreq>
24003786:	494a      	ldr	r1, [pc, #296]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
24003788:	4a4a      	ldr	r2, [pc, #296]	; (240038b4 <HAL_RCC_ClockConfig+0x23c>)
2400378a:	698b      	ldr	r3, [r1, #24]
2400378c:	f3c3 2303 	ubfx	r3, r3, #8, #4
24003790:	5cd3      	ldrb	r3, [r2, r3]
24003792:	f003 031f 	and.w	r3, r3, #31
24003796:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24003798:	698b      	ldr	r3, [r1, #24]
2400379a:	f003 030f 	and.w	r3, r3, #15
2400379e:	5cd3      	ldrb	r3, [r2, r3]
240037a0:	4a45      	ldr	r2, [pc, #276]	; (240038b8 <HAL_RCC_ClockConfig+0x240>)
240037a2:	f003 031f 	and.w	r3, r3, #31
240037a6:	fa20 f303 	lsr.w	r3, r0, r3
240037aa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
240037ac:	4b43      	ldr	r3, [pc, #268]	; (240038bc <HAL_RCC_ClockConfig+0x244>)
240037ae:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
240037b0:	4b43      	ldr	r3, [pc, #268]	; (240038c0 <HAL_RCC_ClockConfig+0x248>)
}
240037b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240037b6:	6818      	ldr	r0, [r3, #0]
240037b8:	f7fd bc00 	b.w	24000fbc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
240037bc:	6813      	ldr	r3, [r2, #0]
240037be:	f023 030f 	bic.w	r3, r3, #15
240037c2:	430b      	orrs	r3, r1
240037c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
240037c6:	6813      	ldr	r3, [r2, #0]
240037c8:	f003 030f 	and.w	r3, r3, #15
240037cc:	428b      	cmp	r3, r1
240037ce:	f47f af58 	bne.w	24003682 <HAL_RCC_ClockConfig+0xa>
240037d2:	e760      	b.n	24003696 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
240037d4:	4936      	ldr	r1, [pc, #216]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240037d6:	6920      	ldr	r0, [r4, #16]
240037d8:	698a      	ldr	r2, [r1, #24]
240037da:	f002 0270 	and.w	r2, r2, #112	; 0x70
240037de:	4290      	cmp	r0, r2
240037e0:	f67f af5d 	bls.w	2400369e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
240037e4:	698a      	ldr	r2, [r1, #24]
240037e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
240037ea:	4302      	orrs	r2, r0
240037ec:	618a      	str	r2, [r1, #24]
240037ee:	e756      	b.n	2400369e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
240037f0:	4b2f      	ldr	r3, [pc, #188]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
240037f2:	68a1      	ldr	r1, [r4, #8]
240037f4:	699a      	ldr	r2, [r3, #24]
240037f6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
240037fa:	430a      	orrs	r2, r1
240037fc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240037fe:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24003800:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24003802:	2902      	cmp	r1, #2
24003804:	d11d      	bne.n	24003842 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24003806:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400380a:	f43f af3a 	beq.w	24003682 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2400380e:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24003810:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24003814:	4f26      	ldr	r7, [pc, #152]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24003816:	f022 0207 	bic.w	r2, r2, #7
2400381a:	430a      	orrs	r2, r1
2400381c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
2400381e:	f7fd fc2d 	bl	2400107c <HAL_GetTick>
24003822:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24003824:	693b      	ldr	r3, [r7, #16]
24003826:	6862      	ldr	r2, [r4, #4]
24003828:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400382c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24003830:	f43f af6f 	beq.w	24003712 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24003834:	f7fd fc22 	bl	2400107c <HAL_GetTick>
24003838:	1b80      	subs	r0, r0, r6
2400383a:	4540      	cmp	r0, r8
2400383c:	d9f2      	bls.n	24003824 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
2400383e:	2003      	movs	r0, #3
24003840:	e720      	b.n	24003684 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24003842:	2903      	cmp	r1, #3
24003844:	d102      	bne.n	2400384c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24003846:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
2400384a:	e7de      	b.n	2400380a <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2400384c:	2901      	cmp	r1, #1
2400384e:	d102      	bne.n	24003856 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24003850:	f412 7f80 	tst.w	r2, #256	; 0x100
24003854:	e7d9      	b.n	2400380a <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24003856:	f012 0f04 	tst.w	r2, #4
2400385a:	e7d6      	b.n	2400380a <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2400385c:	4914      	ldr	r1, [pc, #80]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
2400385e:	68e0      	ldr	r0, [r4, #12]
24003860:	698a      	ldr	r2, [r1, #24]
24003862:	f002 020f 	and.w	r2, r2, #15
24003866:	4290      	cmp	r0, r2
24003868:	f4bf af57 	bcs.w	2400371a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400386c:	698a      	ldr	r2, [r1, #24]
2400386e:	f022 020f 	bic.w	r2, r2, #15
24003872:	4302      	orrs	r2, r0
24003874:	618a      	str	r2, [r1, #24]
24003876:	e750      	b.n	2400371a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
24003878:	680a      	ldr	r2, [r1, #0]
2400387a:	f022 020f 	bic.w	r2, r2, #15
2400387e:	432a      	orrs	r2, r5
24003880:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24003882:	680a      	ldr	r2, [r1, #0]
24003884:	f002 020f 	and.w	r2, r2, #15
24003888:	42aa      	cmp	r2, r5
2400388a:	f47f aefa 	bne.w	24003682 <HAL_RCC_ClockConfig+0xa>
2400388e:	e74b      	b.n	24003728 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
24003890:	4907      	ldr	r1, [pc, #28]	; (240038b0 <HAL_RCC_ClockConfig+0x238>)
24003892:	6920      	ldr	r0, [r4, #16]
24003894:	698a      	ldr	r2, [r1, #24]
24003896:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400389a:	4290      	cmp	r0, r2
2400389c:	f4bf af47 	bcs.w	2400372e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
240038a0:	698a      	ldr	r2, [r1, #24]
240038a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
240038a6:	4302      	orrs	r2, r0
240038a8:	618a      	str	r2, [r1, #24]
240038aa:	e740      	b.n	2400372e <HAL_RCC_ClockConfig+0xb6>
240038ac:	52002000 	.word	0x52002000
240038b0:	58024400 	.word	0x58024400
240038b4:	900d64e8 	.word	0x900d64e8
240038b8:	2401a5bc 	.word	0x2401a5bc
240038bc:	2401a5b8 	.word	0x2401a5b8
240038c0:	2401a5c4 	.word	0x2401a5c4

240038c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
240038c4:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
240038c6:	4c0c      	ldr	r4, [pc, #48]	; (240038f8 <HAL_RCC_GetHCLKFreq+0x34>)
240038c8:	f7ff fe34 	bl	24003534 <HAL_RCC_GetSysClockFreq>
240038cc:	490b      	ldr	r1, [pc, #44]	; (240038fc <HAL_RCC_GetHCLKFreq+0x38>)
240038ce:	69a3      	ldr	r3, [r4, #24]
240038d0:	f3c3 2303 	ubfx	r3, r3, #8, #4
240038d4:	5ccb      	ldrb	r3, [r1, r3]
240038d6:	f003 031f 	and.w	r3, r3, #31
240038da:	fa20 f203 	lsr.w	r2, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
240038de:	69a3      	ldr	r3, [r4, #24]
240038e0:	f003 030f 	and.w	r3, r3, #15
240038e4:	5ccb      	ldrb	r3, [r1, r3]
240038e6:	f003 031f 	and.w	r3, r3, #31
240038ea:	fa22 f003 	lsr.w	r0, r2, r3
240038ee:	4b04      	ldr	r3, [pc, #16]	; (24003900 <HAL_RCC_GetHCLKFreq+0x3c>)
240038f0:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240038f2:	4b04      	ldr	r3, [pc, #16]	; (24003904 <HAL_RCC_GetHCLKFreq+0x40>)
240038f4:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
240038f6:	bd10      	pop	{r4, pc}
240038f8:	58024400 	.word	0x58024400
240038fc:	900d64e8 	.word	0x900d64e8
24003900:	2401a5bc 	.word	0x2401a5bc
24003904:	2401a5b8 	.word	0x2401a5b8

24003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24003908:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
2400390a:	f7ff ffdb 	bl	240038c4 <HAL_RCC_GetHCLKFreq>
2400390e:	4b05      	ldr	r3, [pc, #20]	; (24003924 <HAL_RCC_GetPCLK1Freq+0x1c>)
24003910:	4a05      	ldr	r2, [pc, #20]	; (24003928 <HAL_RCC_GetPCLK1Freq+0x20>)
24003912:	69db      	ldr	r3, [r3, #28]
24003914:	f3c3 1302 	ubfx	r3, r3, #4, #3
24003918:	5cd3      	ldrb	r3, [r2, r3]
2400391a:	f003 031f 	and.w	r3, r3, #31
#endif
}
2400391e:	40d8      	lsrs	r0, r3
24003920:	bd08      	pop	{r3, pc}
24003922:	bf00      	nop
24003924:	58024400 	.word	0x58024400
24003928:	900d64e8 	.word	0x900d64e8

2400392c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2400392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400392e:	4c3a      	ldr	r4, [pc, #232]	; (24003a18 <RCCEx_PLL2_Config+0xec>)
{
24003930:	4606      	mov	r6, r0
24003932:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24003934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24003936:	f003 0303 	and.w	r3, r3, #3
2400393a:	2b03      	cmp	r3, #3
2400393c:	d069      	beq.n	24003a12 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2400393e:	6823      	ldr	r3, [r4, #0]
24003940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24003944:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24003946:	f7fd fb99 	bl	2400107c <HAL_GetTick>
2400394a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400394c:	6823      	ldr	r3, [r4, #0]
2400394e:	011a      	lsls	r2, r3, #4
24003950:	d44b      	bmi.n	240039ea <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24003952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24003954:	6832      	ldr	r2, [r6, #0]
24003956:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
2400395a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400395e:	62a3      	str	r3, [r4, #40]	; 0x28
24003960:	68b3      	ldr	r3, [r6, #8]
24003962:	68f2      	ldr	r2, [r6, #12]
24003964:	3b01      	subs	r3, #1
24003966:	3a01      	subs	r2, #1
24003968:	025b      	lsls	r3, r3, #9
2400396a:	0412      	lsls	r2, r2, #16
2400396c:	b29b      	uxth	r3, r3
2400396e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24003972:	4313      	orrs	r3, r2
24003974:	6872      	ldr	r2, [r6, #4]
24003976:	3a01      	subs	r2, #1
24003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400397c:	4313      	orrs	r3, r2
2400397e:	6932      	ldr	r2, [r6, #16]
24003980:	3a01      	subs	r2, #1
24003982:	0612      	lsls	r2, r2, #24
24003984:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24003988:	4313      	orrs	r3, r2
2400398a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2400398c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400398e:	6972      	ldr	r2, [r6, #20]
24003990:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24003994:	4313      	orrs	r3, r2
24003996:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24003998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400399a:	69b2      	ldr	r2, [r6, #24]
2400399c:	f023 0320 	bic.w	r3, r3, #32
240039a0:	4313      	orrs	r3, r2
240039a2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
240039a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240039a6:	f023 0310 	bic.w	r3, r3, #16
240039aa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240039ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240039ae:	69f2      	ldr	r2, [r6, #28]
240039b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
240039b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
240039b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240039bc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
240039be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240039c0:	f043 0310 	orr.w	r3, r3, #16
240039c4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240039c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240039c8:	b9b5      	cbnz	r5, 240039f8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240039ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240039ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
240039d0:	4c11      	ldr	r4, [pc, #68]	; (24003a18 <RCCEx_PLL2_Config+0xec>)
240039d2:	6823      	ldr	r3, [r4, #0]
240039d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
240039d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240039da:	f7fd fb4f 	bl	2400107c <HAL_GetTick>
240039de:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240039e0:	6823      	ldr	r3, [r4, #0]
240039e2:	011b      	lsls	r3, r3, #4
240039e4:	d50f      	bpl.n	24003a06 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
240039e6:	2000      	movs	r0, #0
240039e8:	e005      	b.n	240039f6 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240039ea:	f7fd fb47 	bl	2400107c <HAL_GetTick>
240039ee:	1bc0      	subs	r0, r0, r7
240039f0:	2802      	cmp	r0, #2
240039f2:	d9ab      	bls.n	2400394c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
240039f4:	2003      	movs	r0, #3
}
240039f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
240039f8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240039fa:	bf0c      	ite	eq
240039fc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24003a00:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24003a04:	e7e3      	b.n	240039ce <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24003a06:	f7fd fb39 	bl	2400107c <HAL_GetTick>
24003a0a:	1b40      	subs	r0, r0, r5
24003a0c:	2802      	cmp	r0, #2
24003a0e:	d9e7      	bls.n	240039e0 <RCCEx_PLL2_Config+0xb4>
24003a10:	e7f0      	b.n	240039f4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
24003a12:	2001      	movs	r0, #1
24003a14:	e7ef      	b.n	240039f6 <RCCEx_PLL2_Config+0xca>
24003a16:	bf00      	nop
24003a18:	58024400 	.word	0x58024400

24003a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24003a1e:	4c3a      	ldr	r4, [pc, #232]	; (24003b08 <RCCEx_PLL3_Config+0xec>)
{
24003a20:	4606      	mov	r6, r0
24003a22:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24003a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24003a26:	f003 0303 	and.w	r3, r3, #3
24003a2a:	2b03      	cmp	r3, #3
24003a2c:	d069      	beq.n	24003b02 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24003a2e:	6823      	ldr	r3, [r4, #0]
24003a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24003a34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24003a36:	f7fd fb21 	bl	2400107c <HAL_GetTick>
24003a3a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24003a3c:	6823      	ldr	r3, [r4, #0]
24003a3e:	009a      	lsls	r2, r3, #2
24003a40:	d44b      	bmi.n	24003ada <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24003a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24003a44:	6832      	ldr	r2, [r6, #0]
24003a46:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24003a4a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24003a4e:	62a3      	str	r3, [r4, #40]	; 0x28
24003a50:	68b3      	ldr	r3, [r6, #8]
24003a52:	68f2      	ldr	r2, [r6, #12]
24003a54:	3b01      	subs	r3, #1
24003a56:	3a01      	subs	r2, #1
24003a58:	025b      	lsls	r3, r3, #9
24003a5a:	0412      	lsls	r2, r2, #16
24003a5c:	b29b      	uxth	r3, r3
24003a5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24003a62:	4313      	orrs	r3, r2
24003a64:	6872      	ldr	r2, [r6, #4]
24003a66:	3a01      	subs	r2, #1
24003a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
24003a6c:	4313      	orrs	r3, r2
24003a6e:	6932      	ldr	r2, [r6, #16]
24003a70:	3a01      	subs	r2, #1
24003a72:	0612      	lsls	r2, r2, #24
24003a74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24003a78:	4313      	orrs	r3, r2
24003a7a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24003a7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24003a7e:	6972      	ldr	r2, [r6, #20]
24003a80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24003a84:	4313      	orrs	r3, r2
24003a86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24003a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24003a8a:	69b2      	ldr	r2, [r6, #24]
24003a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24003a90:	4313      	orrs	r3, r2
24003a92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24003a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24003a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24003a9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24003a9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
24003a9e:	69f2      	ldr	r2, [r6, #28]
24003aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
24003aa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
24003aa8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24003aac:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24003aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003ab4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24003ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24003ab8:	b9b5      	cbnz	r5, 24003ae8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24003aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24003abe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24003ac0:	4c11      	ldr	r4, [pc, #68]	; (24003b08 <RCCEx_PLL3_Config+0xec>)
24003ac2:	6823      	ldr	r3, [r4, #0]
24003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24003ac8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24003aca:	f7fd fad7 	bl	2400107c <HAL_GetTick>
24003ace:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24003ad0:	6823      	ldr	r3, [r4, #0]
24003ad2:	009b      	lsls	r3, r3, #2
24003ad4:	d50f      	bpl.n	24003af6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
24003ad6:	2000      	movs	r0, #0
24003ad8:	e005      	b.n	24003ae6 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24003ada:	f7fd facf 	bl	2400107c <HAL_GetTick>
24003ade:	1bc0      	subs	r0, r0, r7
24003ae0:	2802      	cmp	r0, #2
24003ae2:	d9ab      	bls.n	24003a3c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
24003ae4:	2003      	movs	r0, #3
}
24003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
24003ae8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24003aea:	bf0c      	ite	eq
24003aec:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24003af0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24003af4:	e7e3      	b.n	24003abe <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24003af6:	f7fd fac1 	bl	2400107c <HAL_GetTick>
24003afa:	1b40      	subs	r0, r0, r5
24003afc:	2802      	cmp	r0, #2
24003afe:	d9e7      	bls.n	24003ad0 <RCCEx_PLL3_Config+0xb4>
24003b00:	e7f0      	b.n	24003ae4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
24003b02:	2001      	movs	r0, #1
24003b04:	e7ef      	b.n	24003ae6 <RCCEx_PLL3_Config+0xca>
24003b06:	bf00      	nop
24003b08:	58024400 	.word	0x58024400

24003b0c <HAL_RCCEx_PeriphCLKConfig>:
{
24003b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24003b10:	6803      	ldr	r3, [r0, #0]
{
24003b12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24003b14:	0119      	lsls	r1, r3, #4
24003b16:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24003b1a:	d509      	bpl.n	24003b30 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
24003b1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
24003b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24003b22:	d02c      	beq.n	24003b7e <HAL_RCCEx_PeriphCLKConfig+0x72>
24003b24:	d811      	bhi.n	24003b4a <HAL_RCCEx_PeriphCLKConfig+0x3e>
24003b26:	b1e3      	cbz	r3, 24003b62 <HAL_RCCEx_PeriphCLKConfig+0x56>
24003b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24003b2c:	d01f      	beq.n	24003b6e <HAL_RCCEx_PeriphCLKConfig+0x62>
24003b2e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24003b30:	682b      	ldr	r3, [r5, #0]
24003b32:	05da      	lsls	r2, r3, #23
24003b34:	f140 80d4 	bpl.w	24003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch (PeriphClkInit->Sai1ClockSelection)
24003b38:	6dab      	ldr	r3, [r5, #88]	; 0x58
24003b3a:	2b04      	cmp	r3, #4
24003b3c:	f200 80cf 	bhi.w	24003cde <HAL_RCCEx_PeriphCLKConfig+0x1d2>
24003b40:	e8df f003 	tbb	[pc, r3]
24003b44:	27c72922 	.word	0x27c72922
24003b48:	27          	.byte	0x27
24003b49:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
24003b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24003b4e:	d1ee      	bne.n	24003b2e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24003b50:	4aa8      	ldr	r2, [pc, #672]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003b52:	2600      	movs	r6, #0
24003b54:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
24003b56:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003b58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24003b5c:	430b      	orrs	r3, r1
24003b5e:	6513      	str	r3, [r2, #80]	; 0x50
24003b60:	e7e6      	b.n	24003b30 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003b62:	4aa4      	ldr	r2, [pc, #656]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003b64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24003b6c:	e7f0      	b.n	24003b50 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24003b6e:	2102      	movs	r1, #2
24003b70:	3008      	adds	r0, #8
24003b72:	f7ff fedb 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003b76:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24003b78:	2800      	cmp	r0, #0
24003b7a:	d1d9      	bne.n	24003b30 <HAL_RCCEx_PeriphCLKConfig+0x24>
24003b7c:	e7e8      	b.n	24003b50 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24003b7e:	2102      	movs	r1, #2
24003b80:	3028      	adds	r0, #40	; 0x28
24003b82:	f7ff ff4b 	bl	24003a1c <RCCEx_PLL3_Config>
24003b86:	e7f6      	b.n	24003b76 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003b88:	4a9a      	ldr	r2, [pc, #616]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003b8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003b90:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
24003b92:	4634      	mov	r4, r6
24003b94:	e005      	b.n	24003ba2 <HAL_RCCEx_PeriphCLKConfig+0x96>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003b96:	2100      	movs	r1, #0
24003b98:	f105 0008 	add.w	r0, r5, #8
24003b9c:	f7ff fec6 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003ba0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
24003ba2:	2c00      	cmp	r4, #0
24003ba4:	f040 809e 	bne.w	24003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24003ba8:	4a92      	ldr	r2, [pc, #584]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003baa:	6da9      	ldr	r1, [r5, #88]	; 0x58
24003bac:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003bae:	f023 0307 	bic.w	r3, r3, #7
24003bb2:	430b      	orrs	r3, r1
24003bb4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
24003bb6:	682b      	ldr	r3, [r5, #0]
24003bb8:	059b      	lsls	r3, r3, #22
24003bba:	d50d      	bpl.n	24003bd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch (PeriphClkInit->Sai2AClockSelection)
24003bbc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
24003bbe:	2b80      	cmp	r3, #128	; 0x80
24003bc0:	f000 80b0 	beq.w	24003d24 <HAL_RCCEx_PeriphCLKConfig+0x218>
24003bc4:	f200 8090 	bhi.w	24003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
24003bc8:	2b00      	cmp	r3, #0
24003bca:	f000 809e 	beq.w	24003d0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
24003bce:	2b40      	cmp	r3, #64	; 0x40
24003bd0:	f000 80a1 	beq.w	24003d16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
24003bd4:	2601      	movs	r6, #1
24003bd6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
24003bd8:	682b      	ldr	r3, [r5, #0]
24003bda:	055f      	lsls	r7, r3, #21
24003bdc:	d50f      	bpl.n	24003bfe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch (PeriphClkInit->Sai2BClockSelection)
24003bde:	6e2b      	ldr	r3, [r5, #96]	; 0x60
24003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24003be4:	f000 80c5 	beq.w	24003d72 <HAL_RCCEx_PeriphCLKConfig+0x266>
24003be8:	f200 80a4 	bhi.w	24003d34 <HAL_RCCEx_PeriphCLKConfig+0x228>
24003bec:	2b00      	cmp	r3, #0
24003bee:	f000 80b3 	beq.w	24003d58 <HAL_RCCEx_PeriphCLKConfig+0x24c>
24003bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24003bf6:	f000 80b5 	beq.w	24003d64 <HAL_RCCEx_PeriphCLKConfig+0x258>
24003bfa:	2601      	movs	r6, #1
24003bfc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
24003bfe:	682b      	ldr	r3, [r5, #0]
24003c00:	0198      	lsls	r0, r3, #6
24003c02:	d50d      	bpl.n	24003c20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch (PeriphClkInit->OspiClockSelection)
24003c04:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
24003c06:	2b20      	cmp	r3, #32
24003c08:	f000 80cd 	beq.w	24003da6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
24003c0c:	f200 80b9 	bhi.w	24003d82 <HAL_RCCEx_PeriphCLKConfig+0x276>
24003c10:	2b00      	cmp	r3, #0
24003c12:	f000 80b9 	beq.w	24003d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
24003c16:	2b10      	cmp	r3, #16
24003c18:	f000 80bf 	beq.w	24003d9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
24003c1c:	2601      	movs	r6, #1
24003c1e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24003c20:	682b      	ldr	r3, [r5, #0]
24003c22:	04d9      	lsls	r1, r3, #19
24003c24:	d50f      	bpl.n	24003c46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch (PeriphClkInit->Spi123ClockSelection)
24003c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24003c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24003c2c:	f000 80e4 	beq.w	24003df8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
24003c30:	f200 80c2 	bhi.w	24003db8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
24003c34:	2b00      	cmp	r3, #0
24003c36:	f000 80cf 	beq.w	24003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
24003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24003c3e:	f000 80d1 	beq.w	24003de4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
24003c42:	2601      	movs	r6, #1
24003c44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24003c46:	682b      	ldr	r3, [r5, #0]
24003c48:	049a      	lsls	r2, r3, #18
24003c4a:	d50f      	bpl.n	24003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch (PeriphClkInit->Spi45ClockSelection)
24003c4c:	6eab      	ldr	r3, [r5, #104]	; 0x68
24003c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24003c52:	f000 80f2 	beq.w	24003e3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
24003c56:	f200 80d7 	bhi.w	24003e08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
24003c5a:	2b00      	cmp	r3, #0
24003c5c:	f000 80dd 	beq.w	24003e1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
24003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24003c64:	f000 80e2 	beq.w	24003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>
24003c68:	2601      	movs	r6, #1
24003c6a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24003c6c:	682b      	ldr	r3, [r5, #0]
24003c6e:	045b      	lsls	r3, r3, #17
24003c70:	d510      	bpl.n	24003c94 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->Spi6ClockSelection)
24003c72:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
24003c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003c7a:	f000 8105 	beq.w	24003e88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
24003c7e:	f200 80e4 	bhi.w	24003e4a <HAL_RCCEx_PeriphCLKConfig+0x33e>
24003c82:	2b00      	cmp	r3, #0
24003c84:	f000 80ec 	beq.w	24003e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
24003c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24003c8c:	f000 80f5 	beq.w	24003e7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
24003c90:	2601      	movs	r6, #1
24003c92:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24003c94:	682b      	ldr	r3, [r5, #0]
24003c96:	041f      	lsls	r7, r3, #16
24003c98:	d50d      	bpl.n	24003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->FdcanClockSelection)
24003c9a:	6fab      	ldr	r3, [r5, #120]	; 0x78
24003c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24003ca0:	f000 80fa 	beq.w	24003e98 <HAL_RCCEx_PeriphCLKConfig+0x38c>
24003ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003ca8:	f000 8104 	beq.w	24003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
24003cac:	2b00      	cmp	r3, #0
24003cae:	f000 80f8 	beq.w	24003ea2 <HAL_RCCEx_PeriphCLKConfig+0x396>
24003cb2:	2601      	movs	r6, #1
24003cb4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24003cb6:	682b      	ldr	r3, [r5, #0]
24003cb8:	01d8      	lsls	r0, r3, #7
24003cba:	f140 8112 	bpl.w	24003ee2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    switch (PeriphClkInit->FmcClockSelection)
24003cbe:	6cab      	ldr	r3, [r5, #72]	; 0x48
24003cc0:	2b03      	cmp	r3, #3
24003cc2:	f200 8153 	bhi.w	24003f6c <HAL_RCCEx_PeriphCLKConfig+0x460>
24003cc6:	e8df f013 	tbh	[pc, r3, lsl #1]
24003cca:	0103      	.short	0x0103
24003ccc:	014a00fe 	.word	0x014a00fe
24003cd0:	0103      	.short	0x0103
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003cd2:	2100      	movs	r1, #0
24003cd4:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003cd8:	f7ff fea0 	bl	24003a1c <RCCEx_PLL3_Config>
24003cdc:	e760      	b.n	24003ba0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
24003cde:	2601      	movs	r6, #1
24003ce0:	4634      	mov	r4, r6
24003ce2:	e768      	b.n	24003bb6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
24003ce4:	4626      	mov	r6, r4
24003ce6:	e766      	b.n	24003bb6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch (PeriphClkInit->Sai2AClockSelection)
24003ce8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
24003cec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24003cf0:	d002      	beq.n	24003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24003cf2:	2bc0      	cmp	r3, #192	; 0xc0
24003cf4:	f47f af6e 	bne.w	24003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if (ret == HAL_OK)
24003cf8:	b9d4      	cbnz	r4, 24003d30 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
24003cfa:	4a3e      	ldr	r2, [pc, #248]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003cfc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
24003cfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003d00:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
24003d04:	430b      	orrs	r3, r1
24003d06:	6513      	str	r3, [r2, #80]	; 0x50
24003d08:	e766      	b.n	24003bd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003d0a:	4a3a      	ldr	r2, [pc, #232]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003d0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003d12:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24003d14:	e7f0      	b.n	24003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003d16:	2100      	movs	r1, #0
24003d18:	f105 0008 	add.w	r0, r5, #8
24003d1c:	f7ff fe06 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003d20:	4604      	mov	r4, r0
        break;
24003d22:	e7e9      	b.n	24003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003d24:	2100      	movs	r1, #0
24003d26:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003d2a:	f7ff fe77 	bl	24003a1c <RCCEx_PLL3_Config>
24003d2e:	e7f7      	b.n	24003d20 <HAL_RCCEx_PeriphCLKConfig+0x214>
24003d30:	4626      	mov	r6, r4
24003d32:	e751      	b.n	24003bd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch (PeriphClkInit->Sai2BClockSelection)
24003d34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24003d38:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
24003d3c:	d003      	beq.n	24003d46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
24003d3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
24003d42:	f47f af5a 	bne.w	24003bfa <HAL_RCCEx_PeriphCLKConfig+0xee>
    if (ret == HAL_OK)
24003d46:	b9d4      	cbnz	r4, 24003d7e <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
24003d48:	4a2a      	ldr	r2, [pc, #168]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003d4a:	6e29      	ldr	r1, [r5, #96]	; 0x60
24003d4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003d4e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
24003d52:	430b      	orrs	r3, r1
24003d54:	6513      	str	r3, [r2, #80]	; 0x50
24003d56:	e752      	b.n	24003bfe <HAL_RCCEx_PeriphCLKConfig+0xf2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003d58:	4a26      	ldr	r2, [pc, #152]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003d5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003d60:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24003d62:	e7f0      	b.n	24003d46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003d64:	2100      	movs	r1, #0
24003d66:	f105 0008 	add.w	r0, r5, #8
24003d6a:	f7ff fddf 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003d6e:	4604      	mov	r4, r0
        break;
24003d70:	e7e9      	b.n	24003d46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003d72:	2100      	movs	r1, #0
24003d74:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003d78:	f7ff fe50 	bl	24003a1c <RCCEx_PLL3_Config>
24003d7c:	e7f7      	b.n	24003d6e <HAL_RCCEx_PeriphCLKConfig+0x262>
24003d7e:	4626      	mov	r6, r4
24003d80:	e73d      	b.n	24003bfe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch (PeriphClkInit->OspiClockSelection)
24003d82:	2b30      	cmp	r3, #48	; 0x30
24003d84:	f47f af4a 	bne.w	24003c1c <HAL_RCCEx_PeriphCLKConfig+0x110>
    if (ret == HAL_OK)
24003d88:	b9a4      	cbnz	r4, 24003db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
24003d8a:	4a1a      	ldr	r2, [pc, #104]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003d8c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
24003d8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24003d90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24003d94:	430b      	orrs	r3, r1
24003d96:	64d3      	str	r3, [r2, #76]	; 0x4c
24003d98:	e742      	b.n	24003c20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003d9a:	4a16      	ldr	r2, [pc, #88]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003d9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24003da4:	e7f0      	b.n	24003d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24003da6:	2102      	movs	r1, #2
24003da8:	f105 0008 	add.w	r0, r5, #8
24003dac:	f7ff fdbe 	bl	2400392c <RCCEx_PLL2_Config>
24003db0:	4604      	mov	r4, r0
        break;
24003db2:	e7e9      	b.n	24003d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
24003db4:	4626      	mov	r6, r4
24003db6:	e733      	b.n	24003c20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch (PeriphClkInit->Spi123ClockSelection)
24003db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24003dbc:	d003      	beq.n	24003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
24003dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24003dc2:	f47f af3e 	bne.w	24003c42 <HAL_RCCEx_PeriphCLKConfig+0x136>
    if (ret == HAL_OK)
24003dc6:	b9ec      	cbnz	r4, 24003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24003dc8:	4a0a      	ldr	r2, [pc, #40]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003dca:	6e69      	ldr	r1, [r5, #100]	; 0x64
24003dcc:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24003dd2:	430b      	orrs	r3, r1
24003dd4:	6513      	str	r3, [r2, #80]	; 0x50
24003dd6:	e736      	b.n	24003c46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003dd8:	4a06      	ldr	r2, [pc, #24]	; (24003df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
24003dda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003de0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24003de2:	e7f0      	b.n	24003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24003de4:	2100      	movs	r1, #0
24003de6:	f105 0008 	add.w	r0, r5, #8
24003dea:	f7ff fd9f 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003dee:	4604      	mov	r4, r0
        break;
24003df0:	e7e9      	b.n	24003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
24003df2:	bf00      	nop
24003df4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24003df8:	2100      	movs	r1, #0
24003dfa:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003dfe:	f7ff fe0d 	bl	24003a1c <RCCEx_PLL3_Config>
24003e02:	e7f4      	b.n	24003dee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
24003e04:	4626      	mov	r6, r4
24003e06:	e71e      	b.n	24003c46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch (PeriphClkInit->Spi45ClockSelection)
24003e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
24003e0c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
24003e10:	d003      	beq.n	24003e1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
24003e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24003e16:	f47f af27 	bne.w	24003c68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    if (ret == HAL_OK)
24003e1a:	b9a4      	cbnz	r4, 24003e46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24003e1c:	4a96      	ldr	r2, [pc, #600]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003e1e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
24003e20:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003e22:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24003e26:	430b      	orrs	r3, r1
24003e28:	6513      	str	r3, [r2, #80]	; 0x50
24003e2a:	e71f      	b.n	24003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003e2c:	2101      	movs	r1, #1
24003e2e:	f105 0008 	add.w	r0, r5, #8
24003e32:	f7ff fd7b 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24003e36:	4604      	mov	r4, r0
        break;
24003e38:	e7ef      	b.n	24003e1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24003e3a:	2101      	movs	r1, #1
24003e3c:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003e40:	f7ff fdec 	bl	24003a1c <RCCEx_PLL3_Config>
24003e44:	e7f7      	b.n	24003e36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
24003e46:	4626      	mov	r6, r4
24003e48:	e710      	b.n	24003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch (PeriphClkInit->Spi6ClockSelection)
24003e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24003e4e:	d007      	beq.n	24003e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
24003e50:	d810      	bhi.n	24003e74 <HAL_RCCEx_PeriphCLKConfig+0x368>
24003e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24003e56:	d003      	beq.n	24003e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
24003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003e5c:	f47f af18 	bne.w	24003c90 <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
24003e60:	b9c4      	cbnz	r4, 24003e94 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24003e62:	4a85      	ldr	r2, [pc, #532]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003e64:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
24003e68:	6d93      	ldr	r3, [r2, #88]	; 0x58
24003e6a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24003e6e:	430b      	orrs	r3, r1
24003e70:	6593      	str	r3, [r2, #88]	; 0x58
24003e72:	e70f      	b.n	24003c94 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->Spi6ClockSelection)
24003e74:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
24003e78:	e7f0      	b.n	24003e5c <HAL_RCCEx_PeriphCLKConfig+0x350>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003e7a:	2101      	movs	r1, #1
24003e7c:	f105 0008 	add.w	r0, r5, #8
24003e80:	f7ff fd54 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24003e84:	4604      	mov	r4, r0
        break;
24003e86:	e7eb      	b.n	24003e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24003e88:	2101      	movs	r1, #1
24003e8a:	f105 0028 	add.w	r0, r5, #40	; 0x28
24003e8e:	f7ff fdc5 	bl	24003a1c <RCCEx_PLL3_Config>
24003e92:	e7f7      	b.n	24003e84 <HAL_RCCEx_PeriphCLKConfig+0x378>
24003e94:	4626      	mov	r6, r4
24003e96:	e6fd      	b.n	24003c94 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003e98:	4a77      	ldr	r2, [pc, #476]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003e9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24003ea2:	b974      	cbnz	r4, 24003ec2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24003ea4:	4a74      	ldr	r2, [pc, #464]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003ea6:	6fa9      	ldr	r1, [r5, #120]	; 0x78
24003ea8:	6d13      	ldr	r3, [r2, #80]	; 0x50
24003eaa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24003eae:	430b      	orrs	r3, r1
24003eb0:	6513      	str	r3, [r2, #80]	; 0x50
24003eb2:	e700      	b.n	24003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24003eb4:	2101      	movs	r1, #1
24003eb6:	f105 0008 	add.w	r0, r5, #8
24003eba:	f7ff fd37 	bl	2400392c <RCCEx_PLL2_Config>
24003ebe:	4604      	mov	r4, r0
        break;
24003ec0:	e7ef      	b.n	24003ea2 <HAL_RCCEx_PeriphCLKConfig+0x396>
24003ec2:	4626      	mov	r6, r4
24003ec4:	e6f7      	b.n	24003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24003ec6:	4a6c      	ldr	r2, [pc, #432]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003ec8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24003eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003ece:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24003ed0:	2c00      	cmp	r4, #0
24003ed2:	d14e      	bne.n	24003f72 <HAL_RCCEx_PeriphCLKConfig+0x466>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24003ed4:	4a68      	ldr	r2, [pc, #416]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003ed6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24003ed8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24003eda:	f023 0303 	bic.w	r3, r3, #3
24003ede:	430b      	orrs	r3, r1
24003ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24003ee2:	682b      	ldr	r3, [r5, #0]
24003ee4:	0259      	lsls	r1, r3, #9
24003ee6:	d54e      	bpl.n	24003f86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24003ee8:	4f64      	ldr	r7, [pc, #400]	; (2400407c <HAL_RCCEx_PeriphCLKConfig+0x570>)
24003eea:	683b      	ldr	r3, [r7, #0]
24003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003ef0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24003ef2:	f7fd f8c3 	bl	2400107c <HAL_GetTick>
24003ef6:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24003ef8:	683b      	ldr	r3, [r7, #0]
24003efa:	05da      	lsls	r2, r3, #23
24003efc:	d53b      	bpl.n	24003f76 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    if (ret == HAL_OK)
24003efe:	2c00      	cmp	r4, #0
24003f00:	d16f      	bne.n	24003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24003f02:	4b5d      	ldr	r3, [pc, #372]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003f04:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
24003f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24003f0a:	4042      	eors	r2, r0
24003f0c:	f412 7f40 	tst.w	r2, #768	; 0x300
24003f10:	d00b      	beq.n	24003f2a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24003f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24003f14:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24003f16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24003f1a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
24003f1e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24003f20:	6f19      	ldr	r1, [r3, #112]	; 0x70
24003f22:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24003f26:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24003f28:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24003f2a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
24003f2e:	d043      	beq.n	24003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24003f30:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
24003f34:	4950      	ldr	r1, [pc, #320]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003f36:	f403 7240 	and.w	r2, r3, #768	; 0x300
24003f3a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
24003f3e:	d14c      	bne.n	24003fda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
24003f40:	6908      	ldr	r0, [r1, #16]
24003f42:	4a4f      	ldr	r2, [pc, #316]	; (24004080 <HAL_RCCEx_PeriphCLKConfig+0x574>)
24003f44:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
24003f48:	ea02 1213 	and.w	r2, r2, r3, lsr #4
24003f4c:	4302      	orrs	r2, r0
24003f4e:	610a      	str	r2, [r1, #16]
24003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
24003f54:	4a48      	ldr	r2, [pc, #288]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003f56:	6f11      	ldr	r1, [r2, #112]	; 0x70
24003f58:	430b      	orrs	r3, r1
24003f5a:	6713      	str	r3, [r2, #112]	; 0x70
24003f5c:	e013      	b.n	24003f86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24003f5e:	2102      	movs	r1, #2
24003f60:	f105 0008 	add.w	r0, r5, #8
24003f64:	f7ff fce2 	bl	2400392c <RCCEx_PLL2_Config>
24003f68:	4604      	mov	r4, r0
        break;
24003f6a:	e7b1      	b.n	24003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FmcClockSelection)
24003f6c:	2601      	movs	r6, #1
24003f6e:	4634      	mov	r4, r6
24003f70:	e7b7      	b.n	24003ee2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
24003f72:	4626      	mov	r6, r4
24003f74:	e7b5      	b.n	24003ee2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24003f76:	f7fd f881 	bl	2400107c <HAL_GetTick>
24003f7a:	eba0 0008 	sub.w	r0, r0, r8
24003f7e:	2864      	cmp	r0, #100	; 0x64
24003f80:	d9ba      	bls.n	24003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
        ret = HAL_TIMEOUT;
24003f82:	2603      	movs	r6, #3
24003f84:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24003f86:	682b      	ldr	r3, [r5, #0]
24003f88:	07d8      	lsls	r0, r3, #31
24003f8a:	d509      	bpl.n	24003fa0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Usart16ClockSelection)
24003f8c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
24003f90:	2b10      	cmp	r3, #16
24003f92:	d03f      	beq.n	24004014 <HAL_RCCEx_PeriphCLKConfig+0x508>
24003f94:	d827      	bhi.n	24003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
24003f96:	b363      	cbz	r3, 24003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
24003f98:	2b08      	cmp	r3, #8
24003f9a:	d034      	beq.n	24004006 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
24003f9c:	2601      	movs	r6, #1
24003f9e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24003fa0:	682b      	ldr	r3, [r5, #0]
24003fa2:	0799      	lsls	r1, r3, #30
24003fa4:	d54d      	bpl.n	24004042 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
24003fa6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
24003faa:	2b05      	cmp	r3, #5
24003fac:	d85f      	bhi.n	2400406e <HAL_RCCEx_PeriphCLKConfig+0x562>
24003fae:	e8df f003 	tbb	[pc, r3]
24003fb2:	393f      	.short	0x393f
24003fb4:	3f3f3f58 	.word	0x3f3f3f58
        tickstart = HAL_GetTick();
24003fb8:	f7fd f860 	bl	2400107c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24003fbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        tickstart = HAL_GetTick();
24003fc0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24003fc2:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24003fc6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24003fca:	079b      	lsls	r3, r3, #30
24003fcc:	d4b0      	bmi.n	24003f30 <HAL_RCCEx_PeriphCLKConfig+0x424>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24003fce:	f7fd f855 	bl	2400107c <HAL_GetTick>
24003fd2:	1bc0      	subs	r0, r0, r7
24003fd4:	4548      	cmp	r0, r9
24003fd6:	d9f6      	bls.n	24003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
24003fd8:	e7d3      	b.n	24003f82 <HAL_RCCEx_PeriphCLKConfig+0x476>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24003fda:	690a      	ldr	r2, [r1, #16]
24003fdc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24003fe0:	e7b5      	b.n	24003f4e <HAL_RCCEx_PeriphCLKConfig+0x442>
24003fe2:	4626      	mov	r6, r4
24003fe4:	e7cf      	b.n	24003f86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    switch (PeriphClkInit->Usart16ClockSelection)
24003fe6:	f023 0208 	bic.w	r2, r3, #8
24003fea:	2a20      	cmp	r2, #32
24003fec:	d001      	beq.n	24003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
24003fee:	2b18      	cmp	r3, #24
24003ff0:	d1d4      	bne.n	24003f9c <HAL_RCCEx_PeriphCLKConfig+0x490>
    if (ret == HAL_OK)
24003ff2:	b9ac      	cbnz	r4, 24004020 <HAL_RCCEx_PeriphCLKConfig+0x514>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24003ff4:	4a20      	ldr	r2, [pc, #128]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24003ff6:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
24003ffa:	6d53      	ldr	r3, [r2, #84]	; 0x54
24003ffc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24004000:	430b      	orrs	r3, r1
24004002:	6553      	str	r3, [r2, #84]	; 0x54
24004004:	e7cc      	b.n	24003fa0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24004006:	2101      	movs	r1, #1
24004008:	f105 0008 	add.w	r0, r5, #8
2400400c:	f7ff fc8e 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24004010:	4604      	mov	r4, r0
        break;
24004012:	e7ee      	b.n	24003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24004014:	2101      	movs	r1, #1
24004016:	f105 0028 	add.w	r0, r5, #40	; 0x28
2400401a:	f7ff fcff 	bl	24003a1c <RCCEx_PLL3_Config>
2400401e:	e7f7      	b.n	24004010 <HAL_RCCEx_PeriphCLKConfig+0x504>
24004020:	4626      	mov	r6, r4
24004022:	e7bd      	b.n	24003fa0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24004024:	2101      	movs	r1, #1
24004026:	f105 0008 	add.w	r0, r5, #8
2400402a:	f7ff fc7f 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400402e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
24004030:	bb04      	cbnz	r4, 24004074 <HAL_RCCEx_PeriphCLKConfig+0x568>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24004032:	4a11      	ldr	r2, [pc, #68]	; (24004078 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
24004034:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
24004038:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400403a:	f023 0307 	bic.w	r3, r3, #7
2400403e:	430b      	orrs	r3, r1
24004040:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24004042:	682b      	ldr	r3, [r5, #0]
24004044:	075a      	lsls	r2, r3, #29
24004046:	d52e      	bpl.n	240040a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24004048:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
2400404c:	2b05      	cmp	r3, #5
2400404e:	f200 817f 	bhi.w	24004350 <HAL_RCCEx_PeriphCLKConfig+0x844>
24004052:	e8df f013 	tbh	[pc, r3, lsl #1]
24004056:	001d      	.short	0x001d
24004058:	01770017 	.word	0x01770017
2400405c:	001d001d 	.word	0x001d001d
24004060:	001d      	.short	0x001d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24004062:	2101      	movs	r1, #1
24004064:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004068:	f7ff fcd8 	bl	24003a1c <RCCEx_PLL3_Config>
2400406c:	e7df      	b.n	2400402e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400406e:	2601      	movs	r6, #1
24004070:	4634      	mov	r4, r6
24004072:	e7e6      	b.n	24004042 <HAL_RCCEx_PeriphCLKConfig+0x536>
24004074:	4626      	mov	r6, r4
24004076:	e7e4      	b.n	24004042 <HAL_RCCEx_PeriphCLKConfig+0x536>
24004078:	58024400 	.word	0x58024400
2400407c:	58024800 	.word	0x58024800
24004080:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24004084:	2101      	movs	r1, #1
24004086:	f105 0008 	add.w	r0, r5, #8
2400408a:	f7ff fc4f 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400408e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
24004090:	2c00      	cmp	r4, #0
24004092:	f040 8160 	bne.w	24004356 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24004096:	4aaa      	ldr	r2, [pc, #680]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004098:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
2400409c:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400409e:	f023 0307 	bic.w	r3, r3, #7
240040a2:	430b      	orrs	r3, r1
240040a4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240040a6:	682b      	ldr	r3, [r5, #0]
240040a8:	069b      	lsls	r3, r3, #26
240040aa:	d510      	bpl.n	240040ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    switch (PeriphClkInit->Lptim1ClockSelection)
240040ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
240040b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240040b4:	f000 816b 	beq.w	2400438e <HAL_RCCEx_PeriphCLKConfig+0x882>
240040b8:	f200 814f 	bhi.w	2400435a <HAL_RCCEx_PeriphCLKConfig+0x84e>
240040bc:	2b00      	cmp	r3, #0
240040be:	f000 8155 	beq.w	2400436c <HAL_RCCEx_PeriphCLKConfig+0x860>
240040c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240040c6:	f000 815b 	beq.w	24004380 <HAL_RCCEx_PeriphCLKConfig+0x874>
240040ca:	2601      	movs	r6, #1
240040cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240040ce:	682b      	ldr	r3, [r5, #0]
240040d0:	065f      	lsls	r7, r3, #25
240040d2:	d510      	bpl.n	240040f6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    switch (PeriphClkInit->Lptim2ClockSelection)
240040d4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
240040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
240040dc:	f000 8179 	beq.w	240043d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
240040e0:	f200 815d 	bhi.w	2400439e <HAL_RCCEx_PeriphCLKConfig+0x892>
240040e4:	2b00      	cmp	r3, #0
240040e6:	f000 8163 	beq.w	240043b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
240040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
240040ee:	f000 8169 	beq.w	240043c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
240040f2:	2601      	movs	r6, #1
240040f4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240040f6:	682b      	ldr	r3, [r5, #0]
240040f8:	0618      	lsls	r0, r3, #24
240040fa:	d510      	bpl.n	2400411e <HAL_RCCEx_PeriphCLKConfig+0x612>
    switch (PeriphClkInit->Lptim345ClockSelection)
240040fc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
24004100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24004104:	f000 8187 	beq.w	24004416 <HAL_RCCEx_PeriphCLKConfig+0x90a>
24004108:	f200 816b 	bhi.w	240043e2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
2400410c:	2b00      	cmp	r3, #0
2400410e:	f000 8171 	beq.w	240043f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
24004112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24004116:	f000 8177 	beq.w	24004408 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
2400411a:	2601      	movs	r6, #1
2400411c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400411e:	682b      	ldr	r3, [r5, #0]
24004120:	0719      	lsls	r1, r3, #28
24004122:	d514      	bpl.n	2400414e <HAL_RCCEx_PeriphCLKConfig+0x642>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24004124:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
24004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400412c:	d107      	bne.n	2400413e <HAL_RCCEx_PeriphCLKConfig+0x632>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400412e:	2102      	movs	r1, #2
24004130:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004134:	f7ff fc72 	bl	24003a1c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
24004138:	2800      	cmp	r0, #0
2400413a:	bf18      	it	ne
2400413c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2400413e:	4a80      	ldr	r2, [pc, #512]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004140:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
24004144:	6d53      	ldr	r3, [r2, #84]	; 0x54
24004146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
2400414a:	430b      	orrs	r3, r1
2400414c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2400414e:	682b      	ldr	r3, [r5, #0]
24004150:	06da      	lsls	r2, r3, #27
24004152:	d514      	bpl.n	2400417e <HAL_RCCEx_PeriphCLKConfig+0x672>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24004154:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
24004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400415c:	d107      	bne.n	2400416e <HAL_RCCEx_PeriphCLKConfig+0x662>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400415e:	2102      	movs	r1, #2
24004160:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004164:	f7ff fc5a 	bl	24003a1c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
24004168:	2800      	cmp	r0, #0
2400416a:	bf18      	it	ne
2400416c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2400416e:	4a74      	ldr	r2, [pc, #464]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004170:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
24004174:	6d93      	ldr	r3, [r2, #88]	; 0x58
24004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400417a:	430b      	orrs	r3, r1
2400417c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2400417e:	682b      	ldr	r3, [r5, #0]
24004180:	031b      	lsls	r3, r3, #12
24004182:	d51b      	bpl.n	240041bc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    switch (PeriphClkInit->AdcClockSelection)
24004184:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
24004188:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400418c:	f000 814b 	beq.w	24004426 <HAL_RCCEx_PeriphCLKConfig+0x91a>
24004190:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24004194:	d007      	beq.n	240041a6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
24004196:	2900      	cmp	r1, #0
24004198:	f040 814b 	bne.w	24004432 <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400419c:	f105 0008 	add.w	r0, r5, #8
240041a0:	f7ff fbc4 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240041a4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
240041a6:	2c00      	cmp	r4, #0
240041a8:	f040 8146 	bne.w	24004438 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
240041ac:	4a64      	ldr	r2, [pc, #400]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240041ae:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
240041b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
240041b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
240041b8:	430b      	orrs	r3, r1
240041ba:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240041bc:	682b      	ldr	r3, [r5, #0]
240041be:	035f      	lsls	r7, r3, #13
240041c0:	d51c      	bpl.n	240041fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
    switch (PeriphClkInit->UsbClockSelection)
240041c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
240041c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240041ca:	f000 8137 	beq.w	2400443c <HAL_RCCEx_PeriphCLKConfig+0x930>
240041ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240041d2:	d008      	beq.n	240041e6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
240041d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240041d8:	f040 8137 	bne.w	2400444a <HAL_RCCEx_PeriphCLKConfig+0x93e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240041dc:	4a58      	ldr	r2, [pc, #352]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240041de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240041e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240041e6:	2c00      	cmp	r4, #0
240041e8:	f040 8132 	bne.w	24004450 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
240041ec:	4a54      	ldr	r2, [pc, #336]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240041ee:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
240041f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
240041f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240041f8:	430b      	orrs	r3, r1
240041fa:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240041fc:	682b      	ldr	r3, [r5, #0]
240041fe:	03d8      	lsls	r0, r3, #15
24004200:	d509      	bpl.n	24004216 <HAL_RCCEx_PeriphCLKConfig+0x70a>
    switch (PeriphClkInit->SdmmcClockSelection)
24004202:	6d2b      	ldr	r3, [r5, #80]	; 0x50
24004204:	2b00      	cmp	r3, #0
24004206:	f000 8125 	beq.w	24004454 <HAL_RCCEx_PeriphCLKConfig+0x948>
2400420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400420e:	f000 812f 	beq.w	24004470 <HAL_RCCEx_PeriphCLKConfig+0x964>
24004212:	2601      	movs	r6, #1
24004214:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24004216:	682b      	ldr	r3, [r5, #0]
24004218:	0099      	lsls	r1, r3, #2
2400421a:	d507      	bpl.n	2400422c <HAL_RCCEx_PeriphCLKConfig+0x720>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400421c:	2102      	movs	r1, #2
2400421e:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004222:	f7ff fbfb 	bl	24003a1c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
24004226:	2800      	cmp	r0, #0
24004228:	bf18      	it	ne
2400422a:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400422c:	e9d5 3100 	ldrd	r3, r1, [r5]
24004230:	039a      	lsls	r2, r3, #14
24004232:	d50b      	bpl.n	2400424c <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->RngClockSelection)
24004234:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
24004238:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
2400423c:	f000 812f 	beq.w	2400449e <HAL_RCCEx_PeriphCLKConfig+0x992>
24004240:	f200 811f 	bhi.w	24004482 <HAL_RCCEx_PeriphCLKConfig+0x976>
24004244:	2800      	cmp	r0, #0
24004246:	f000 8122 	beq.w	2400448e <HAL_RCCEx_PeriphCLKConfig+0x982>
2400424a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400424c:	02df      	lsls	r7, r3, #11
2400424e:	d506      	bpl.n	2400425e <HAL_RCCEx_PeriphCLKConfig+0x752>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24004250:	483b      	ldr	r0, [pc, #236]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004252:	6fec      	ldr	r4, [r5, #124]	; 0x7c
24004254:	6d02      	ldr	r2, [r0, #80]	; 0x50
24004256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2400425a:	4322      	orrs	r2, r4
2400425c:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2400425e:	029c      	lsls	r4, r3, #10
24004260:	d506      	bpl.n	24004270 <HAL_RCCEx_PeriphCLKConfig+0x764>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24004262:	4837      	ldr	r0, [pc, #220]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004264:	6f2c      	ldr	r4, [r5, #112]	; 0x70
24004266:	6d02      	ldr	r2, [r0, #80]	; 0x50
24004268:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
2400426c:	4322      	orrs	r2, r4
2400426e:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
24004270:	0518      	lsls	r0, r3, #20
24004272:	d506      	bpl.n	24004282 <HAL_RCCEx_PeriphCLKConfig+0x776>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
24004274:	4832      	ldr	r0, [pc, #200]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004276:	6f6c      	ldr	r4, [r5, #116]	; 0x74
24004278:	6d82      	ldr	r2, [r0, #88]	; 0x58
2400427a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
2400427e:	4322      	orrs	r2, r4
24004280:	6582      	str	r2, [r0, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24004282:	005a      	lsls	r2, r3, #1
24004284:	d509      	bpl.n	2400429a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24004286:	4a2e      	ldr	r2, [pc, #184]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24004288:	6910      	ldr	r0, [r2, #16]
2400428a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
2400428e:	6110      	str	r0, [r2, #16]
24004290:	6910      	ldr	r0, [r2, #16]
24004292:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
24004296:	4320      	orrs	r0, r4
24004298:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2400429a:	2b00      	cmp	r3, #0
2400429c:	da06      	bge.n	240042ac <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2400429e:	4828      	ldr	r0, [pc, #160]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240042a0:	6d6c      	ldr	r4, [r5, #84]	; 0x54
240042a2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
240042a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
240042a8:	4322      	orrs	r2, r4
240042aa:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
240042ac:	021b      	lsls	r3, r3, #8
240042ae:	d507      	bpl.n	240042c0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
240042b0:	4a23      	ldr	r2, [pc, #140]	; (24004340 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240042b2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
240042b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
240042b8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
240042bc:	4303      	orrs	r3, r0
240042be:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
240042c0:	07cf      	lsls	r7, r1, #31
240042c2:	d507      	bpl.n	240042d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240042c4:	2100      	movs	r1, #0
240042c6:	f105 0008 	add.w	r0, r5, #8
240042ca:	f7ff fb2f 	bl	2400392c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
240042ce:	2800      	cmp	r0, #0
240042d0:	bf18      	it	ne
240042d2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240042d4:	686b      	ldr	r3, [r5, #4]
240042d6:	079c      	lsls	r4, r3, #30
240042d8:	d507      	bpl.n	240042ea <HAL_RCCEx_PeriphCLKConfig+0x7de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240042da:	2101      	movs	r1, #1
240042dc:	f105 0008 	add.w	r0, r5, #8
240042e0:	f7ff fb24 	bl	2400392c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
240042e4:	2800      	cmp	r0, #0
240042e6:	bf18      	it	ne
240042e8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240042ea:	686b      	ldr	r3, [r5, #4]
240042ec:	0758      	lsls	r0, r3, #29
240042ee:	d507      	bpl.n	24004300 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240042f0:	2102      	movs	r1, #2
240042f2:	f105 0008 	add.w	r0, r5, #8
240042f6:	f7ff fb19 	bl	2400392c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
240042fa:	2800      	cmp	r0, #0
240042fc:	bf18      	it	ne
240042fe:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24004300:	686b      	ldr	r3, [r5, #4]
24004302:	0719      	lsls	r1, r3, #28
24004304:	d507      	bpl.n	24004316 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24004306:	2100      	movs	r1, #0
24004308:	f105 0028 	add.w	r0, r5, #40	; 0x28
2400430c:	f7ff fb86 	bl	24003a1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24004310:	2800      	cmp	r0, #0
24004312:	bf18      	it	ne
24004314:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24004316:	686b      	ldr	r3, [r5, #4]
24004318:	06da      	lsls	r2, r3, #27
2400431a:	d507      	bpl.n	2400432c <HAL_RCCEx_PeriphCLKConfig+0x820>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400431c:	2101      	movs	r1, #1
2400431e:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004322:	f7ff fb7b 	bl	24003a1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24004326:	2800      	cmp	r0, #0
24004328:	bf18      	it	ne
2400432a:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400432c:	686b      	ldr	r3, [r5, #4]
2400432e:	069b      	lsls	r3, r3, #26
24004330:	f100 80bd 	bmi.w	240044ae <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    return HAL_OK;
24004334:	1e30      	subs	r0, r6, #0
24004336:	bf18      	it	ne
24004338:	2001      	movne	r0, #1
}
2400433a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400433e:	bf00      	nop
24004340:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24004344:	2101      	movs	r1, #1
24004346:	f105 0028 	add.w	r0, r5, #40	; 0x28
2400434a:	f7ff fb67 	bl	24003a1c <RCCEx_PLL3_Config>
2400434e:	e69e      	b.n	2400408e <HAL_RCCEx_PeriphCLKConfig+0x582>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24004350:	2601      	movs	r6, #1
24004352:	4634      	mov	r4, r6
24004354:	e6a7      	b.n	240040a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
24004356:	4626      	mov	r6, r4
24004358:	e6a5      	b.n	240040a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch (PeriphClkInit->Lptim1ClockSelection)
2400435a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
2400435e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
24004362:	d003      	beq.n	2400436c <HAL_RCCEx_PeriphCLKConfig+0x860>
24004364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24004368:	f47f aeaf 	bne.w	240040ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
    if (ret == HAL_OK)
2400436c:	b9ac      	cbnz	r4, 2400439a <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2400436e:	4a55      	ldr	r2, [pc, #340]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24004370:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
24004374:	6d53      	ldr	r3, [r2, #84]	; 0x54
24004376:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400437a:	430b      	orrs	r3, r1
2400437c:	6553      	str	r3, [r2, #84]	; 0x54
2400437e:	e6a6      	b.n	240040ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24004380:	2100      	movs	r1, #0
24004382:	f105 0008 	add.w	r0, r5, #8
24004386:	f7ff fad1 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400438a:	4604      	mov	r4, r0
        break;
2400438c:	e7ee      	b.n	2400436c <HAL_RCCEx_PeriphCLKConfig+0x860>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400438e:	2102      	movs	r1, #2
24004390:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004394:	f7ff fb42 	bl	24003a1c <RCCEx_PLL3_Config>
24004398:	e7f7      	b.n	2400438a <HAL_RCCEx_PeriphCLKConfig+0x87e>
2400439a:	4626      	mov	r6, r4
2400439c:	e697      	b.n	240040ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    switch (PeriphClkInit->Lptim2ClockSelection)
2400439e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
240043a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
240043a6:	d003      	beq.n	240043b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
240043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
240043ac:	f47f aea1 	bne.w	240040f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    if (ret == HAL_OK)
240043b0:	b9ac      	cbnz	r4, 240043de <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
240043b2:	4a44      	ldr	r2, [pc, #272]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240043b4:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
240043b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
240043ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
240043be:	430b      	orrs	r3, r1
240043c0:	6593      	str	r3, [r2, #88]	; 0x58
240043c2:	e698      	b.n	240040f6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240043c4:	2100      	movs	r1, #0
240043c6:	f105 0008 	add.w	r0, r5, #8
240043ca:	f7ff faaf 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240043ce:	4604      	mov	r4, r0
        break;
240043d0:	e7ee      	b.n	240043b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240043d2:	2102      	movs	r1, #2
240043d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
240043d8:	f7ff fb20 	bl	24003a1c <RCCEx_PLL3_Config>
240043dc:	e7f7      	b.n	240043ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
240043de:	4626      	mov	r6, r4
240043e0:	e689      	b.n	240040f6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
240043e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
240043e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
240043ea:	d003      	beq.n	240043f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
240043ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
240043f0:	f47f ae93 	bne.w	2400411a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    if (ret == HAL_OK)
240043f4:	b9ac      	cbnz	r4, 24004422 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
240043f6:	4a33      	ldr	r2, [pc, #204]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240043f8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
240043fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
240043fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24004402:	430b      	orrs	r3, r1
24004404:	6593      	str	r3, [r2, #88]	; 0x58
24004406:	e68a      	b.n	2400411e <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24004408:	2100      	movs	r1, #0
2400440a:	f105 0008 	add.w	r0, r5, #8
2400440e:	f7ff fa8d 	bl	2400392c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24004412:	4604      	mov	r4, r0
        break;
24004414:	e7ee      	b.n	240043f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24004416:	2102      	movs	r1, #2
24004418:	f105 0028 	add.w	r0, r5, #40	; 0x28
2400441c:	f7ff fafe 	bl	24003a1c <RCCEx_PLL3_Config>
24004420:	e7f7      	b.n	24004412 <HAL_RCCEx_PeriphCLKConfig+0x906>
24004422:	4626      	mov	r6, r4
24004424:	e67b      	b.n	2400411e <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24004426:	2102      	movs	r1, #2
24004428:	f105 0028 	add.w	r0, r5, #40	; 0x28
2400442c:	f7ff faf6 	bl	24003a1c <RCCEx_PLL3_Config>
24004430:	e6b8      	b.n	240041a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    switch (PeriphClkInit->AdcClockSelection)
24004432:	2601      	movs	r6, #1
24004434:	4634      	mov	r4, r6
24004436:	e6c1      	b.n	240041bc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
24004438:	4626      	mov	r6, r4
2400443a:	e6bf      	b.n	240041bc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400443c:	2101      	movs	r1, #1
2400443e:	f105 0028 	add.w	r0, r5, #40	; 0x28
24004442:	f7ff faeb 	bl	24003a1c <RCCEx_PLL3_Config>
24004446:	4604      	mov	r4, r0
        break;
24004448:	e6cd      	b.n	240041e6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    switch (PeriphClkInit->UsbClockSelection)
2400444a:	2601      	movs	r6, #1
2400444c:	4634      	mov	r4, r6
2400444e:	e6d5      	b.n	240041fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
24004450:	4626      	mov	r6, r4
24004452:	e6d3      	b.n	240041fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24004454:	4a1b      	ldr	r2, [pc, #108]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24004456:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400445c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400445e:	b974      	cbnz	r4, 2400447e <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24004460:	4a18      	ldr	r2, [pc, #96]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24004462:	6d29      	ldr	r1, [r5, #80]	; 0x50
24004464:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24004466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400446a:	430b      	orrs	r3, r1
2400446c:	64d3      	str	r3, [r2, #76]	; 0x4c
2400446e:	e6d2      	b.n	24004216 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24004470:	2102      	movs	r1, #2
24004472:	f105 0008 	add.w	r0, r5, #8
24004476:	f7ff fa59 	bl	2400392c <RCCEx_PLL2_Config>
2400447a:	4604      	mov	r4, r0
        break;
2400447c:	e7ef      	b.n	2400445e <HAL_RCCEx_PeriphCLKConfig+0x952>
2400447e:	4626      	mov	r6, r4
24004480:	e6c9      	b.n	24004216 <HAL_RCCEx_PeriphCLKConfig+0x70a>
    switch (PeriphClkInit->RngClockSelection)
24004482:	f420 7280 	bic.w	r2, r0, #256	; 0x100
24004486:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
2400448a:	f47f aede 	bne.w	2400424a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    if (ret == HAL_OK)
2400448e:	b964      	cbnz	r4, 240044aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24004490:	4c0c      	ldr	r4, [pc, #48]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24004492:	6d62      	ldr	r2, [r4, #84]	; 0x54
24004494:	f422 7240 	bic.w	r2, r2, #768	; 0x300
24004498:	4302      	orrs	r2, r0
2400449a:	6562      	str	r2, [r4, #84]	; 0x54
2400449c:	e6d6      	b.n	2400424c <HAL_RCCEx_PeriphCLKConfig+0x740>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400449e:	4f09      	ldr	r7, [pc, #36]	; (240044c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240044a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
240044a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240044a6:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
240044a8:	e7f1      	b.n	2400448e <HAL_RCCEx_PeriphCLKConfig+0x982>
240044aa:	4626      	mov	r6, r4
240044ac:	e6ce      	b.n	2400424c <HAL_RCCEx_PeriphCLKConfig+0x740>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240044ae:	2102      	movs	r1, #2
240044b0:	f105 0028 	add.w	r0, r5, #40	; 0x28
240044b4:	f7ff fab2 	bl	24003a1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240044b8:	2800      	cmp	r0, #0
240044ba:	f43f af3b 	beq.w	24004334 <HAL_RCCEx_PeriphCLKConfig+0x828>
  return HAL_ERROR;
240044be:	2001      	movs	r0, #1
240044c0:	e73b      	b.n	2400433a <HAL_RCCEx_PeriphCLKConfig+0x82e>
240044c2:	bf00      	nop
240044c4:	58024400 	.word	0x58024400

240044c8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
240044c8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
240044ca:	f7ff f9fb 	bl	240038c4 <HAL_RCC_GetHCLKFreq>
240044ce:	4b05      	ldr	r3, [pc, #20]	; (240044e4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
240044d0:	4a05      	ldr	r2, [pc, #20]	; (240044e8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
240044d2:	6a1b      	ldr	r3, [r3, #32]
240044d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
240044d8:	5cd3      	ldrb	r3, [r2, r3]
240044da:	f003 031f 	and.w	r3, r3, #31
}
240044de:	40d8      	lsrs	r0, r3
240044e0:	bd08      	pop	{r3, pc}
240044e2:	bf00      	nop
240044e4:	58024400 	.word	0x58024400
240044e8:	900d64e8 	.word	0x900d64e8

240044ec <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240044ec:	494f      	ldr	r1, [pc, #316]	; (2400462c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
240044ee:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240044f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240044f2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
240044f4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll2m != 0U)
240044f6:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240044fa:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240044fe:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
24004500:	f000 8090 	beq.w	24004624 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004504:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24004508:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2400450c:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004510:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24004518:	4353      	muls	r3, r2
    switch (pllsource)
2400451a:	2c01      	cmp	r4, #1
2400451c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24004520:	ee06 3a90 	vmov	s13, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004524:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
24004528:	d06e      	beq.n	24004608 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
2400452a:	2c02      	cmp	r4, #2
2400452c:	d05e      	beq.n	240045ec <HAL_RCCEx_GetPLL2ClockFreq+0x100>
2400452e:	2c00      	cmp	r4, #0
24004530:	d16a      	bne.n	24004608 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24004532:	680b      	ldr	r3, [r1, #0]
24004534:	069b      	lsls	r3, r3, #26
24004536:	d547      	bpl.n	240045c8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004538:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400453a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400453c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
24004540:	4a3b      	ldr	r2, [pc, #236]	; (24004630 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004546:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004548:	ee07 2a90 	vmov	s15, r2
2400454c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
24004550:	eec5 7a87 	vdiv.f32	s15, s11, s14
24004554:	ee07 3a10 	vmov	s14, r3
24004558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400455c:	ee37 7a26 	vadd.f32	s14, s14, s13
24004560:	ee37 7a06 	vadd.f32	s14, s14, s12
24004564:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24004568:	4a30      	ldr	r2, [pc, #192]	; (2400462c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
2400456a:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400456c:	f3c3 2346 	ubfx	r3, r3, #9, #7
24004570:	ee07 3a10 	vmov	s14, r3
24004574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24004578:	ee37 7a06 	vadd.f32	s14, s14, s12
2400457c:	eec7 6a87 	vdiv.f32	s13, s15, s14
24004580:	eefc 6ae6 	vcvt.u32.f32	s13, s13
24004584:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24004588:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400458a:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400458e:	ee07 3a10 	vmov	s14, r3
24004592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24004596:	ee37 7a06 	vadd.f32	s14, s14, s12
2400459a:	eec7 6a87 	vdiv.f32	s13, s15, s14
2400459e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
240045a2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240045a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
240045a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
240045ac:	ee06 3a90 	vmov	s13, r3
240045b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240045b4:	ee76 6a86 	vadd.f32	s13, s13, s12
240045b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
240045bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240045c0:	ee17 3a90 	vmov	r3, s15
240045c4:	6083      	str	r3, [r0, #8]
}
240045c6:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240045c8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
240045ca:	eddf 5a1a 	vldr	s11, [pc, #104]	; 24004634 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
240045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
240045d2:	ee07 3a90 	vmov	s15, r3
240045d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
240045de:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240045e2:	eec5 6a87 	vdiv.f32	s13, s11, s14
240045e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
240045ea:	e7bd      	b.n	24004568 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240045ec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
240045ee:	eddf 5a12 	vldr	s11, [pc, #72]	; 24004638 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
240045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240045f6:	ee07 3a90 	vmov	s15, r3
240045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
24004602:	ee77 7a86 	vadd.f32	s15, s15, s12
24004606:	e7ec      	b.n	240045e2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24004608:	6b8b      	ldr	r3, [r1, #56]	; 0x38
2400460a:	eddf 5a0c 	vldr	s11, [pc, #48]	; 2400463c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
2400460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24004612:	ee07 3a90 	vmov	s15, r3
24004616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400461e:	ee77 7a86 	vadd.f32	s15, s15, s12
24004622:	e7de      	b.n	240045e2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24004624:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24004628:	e7cc      	b.n	240045c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
2400462a:	bf00      	nop
2400462c:	58024400 	.word	0x58024400
24004630:	03d09000 	.word	0x03d09000
24004634:	4c742400 	.word	0x4c742400
24004638:	4b742400 	.word	0x4b742400
2400463c:	4a742400 	.word	0x4a742400

24004640 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004640:	494f      	ldr	r1, [pc, #316]	; (24004780 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
24004642:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004644:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24004646:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24004648:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll3m != 0U)
2400464a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400464e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24004652:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
24004654:	f000 8090 	beq.w	24004778 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004658:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400465c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24004660:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004664:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400466c:	4353      	muls	r3, r2
    switch (pllsource)
2400466e:	2c01      	cmp	r4, #1
24004670:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24004674:	ee06 3a90 	vmov	s13, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004678:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
2400467c:	d06e      	beq.n	2400475c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
2400467e:	2c02      	cmp	r4, #2
24004680:	d05e      	beq.n	24004740 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
24004682:	2c00      	cmp	r4, #0
24004684:	d16a      	bne.n	2400475c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24004686:	680b      	ldr	r3, [r1, #0]
24004688:	069b      	lsls	r3, r3, #26
2400468a:	d547      	bpl.n	2400471c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400468c:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400468e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004690:	f3c2 01c1 	ubfx	r1, r2, #3, #2
24004694:	4a3b      	ldr	r2, [pc, #236]	; (24004784 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400469a:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400469c:	ee07 2a90 	vmov	s15, r2
240046a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
240046a4:	eec5 7a87 	vdiv.f32	s15, s11, s14
240046a8:	ee07 3a10 	vmov	s14, r3
240046ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240046b0:	ee37 7a26 	vadd.f32	s14, s14, s13
240046b4:	ee37 7a06 	vadd.f32	s14, s14, s12
240046b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
240046bc:	4a30      	ldr	r2, [pc, #192]	; (24004780 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
240046be:	6c13      	ldr	r3, [r2, #64]	; 0x40
240046c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
240046c4:	ee07 3a10 	vmov	s14, r3
240046c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240046cc:	ee37 7a06 	vadd.f32	s14, s14, s12
240046d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
240046d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
240046d8:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
240046dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
240046de:	f3c3 4306 	ubfx	r3, r3, #16, #7
240046e2:	ee07 3a10 	vmov	s14, r3
240046e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240046ea:	ee37 7a06 	vadd.f32	s14, s14, s12
240046ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
240046f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
240046f6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240046fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
240046fc:	f3c3 6306 	ubfx	r3, r3, #24, #7
24004700:	ee06 3a90 	vmov	s13, r3
24004704:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24004708:	ee76 6a86 	vadd.f32	s13, s13, s12
2400470c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
24004710:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24004714:	ee17 3a90 	vmov	r3, s15
24004718:	6083      	str	r3, [r0, #8]
}
2400471a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400471c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2400471e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 24004788 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
24004726:	ee07 3a90 	vmov	s15, r3
2400472a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24004732:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004736:	eec5 6a87 	vdiv.f32	s13, s11, s14
2400473a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
2400473e:	e7bd      	b.n	240046bc <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24004740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
24004742:	eddf 5a12 	vldr	s11, [pc, #72]	; 2400478c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400474a:	ee07 3a90 	vmov	s15, r3
2400474e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
24004756:	ee77 7a86 	vadd.f32	s15, s15, s12
2400475a:	e7ec      	b.n	24004736 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400475c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2400475e:	eddf 5a0c 	vldr	s11, [pc, #48]	; 24004790 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
24004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
24004766:	ee07 3a90 	vmov	s15, r3
2400476a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24004772:	ee77 7a86 	vadd.f32	s15, s15, s12
24004776:	e7de      	b.n	24004736 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24004778:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400477c:	e7cc      	b.n	24004718 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
2400477e:	bf00      	nop
24004780:	58024400 	.word	0x58024400
24004784:	03d09000 	.word	0x03d09000
24004788:	4c742400 	.word	0x4c742400
2400478c:	4b742400 	.word	0x4b742400
24004790:	4a742400 	.word	0x4a742400

24004794 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004794:	494f      	ldr	r1, [pc, #316]	; (240048d4 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
24004796:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004798:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400479a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400479c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll1m != 0U)
2400479e:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240047a2:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240047a6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
240047a8:	f000 8090 	beq.w	240048cc <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047ac:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240047b0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240047b4:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240047b8:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240047c0:	4353      	muls	r3, r2
    switch (pllsource)
240047c2:	2c01      	cmp	r4, #1
240047c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240047c8:	ee06 3a90 	vmov	s13, r3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
240047d0:	d04e      	beq.n	24004870 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
240047d2:	2c02      	cmp	r4, #2
240047d4:	d05e      	beq.n	24004894 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
240047d6:	2c00      	cmp	r4, #0
240047d8:	d16a      	bne.n	240048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240047da:	680b      	ldr	r3, [r1, #0]
240047dc:	069b      	lsls	r3, r3, #26
240047de:	d567      	bpl.n	240048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240047e0:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240047e4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
240047e8:	4a3b      	ldr	r2, [pc, #236]	; (240048d8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240047ee:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240047f0:	ee07 2a90 	vmov	s15, r2
240047f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
240047f8:	eec5 7a87 	vdiv.f32	s15, s11, s14
240047fc:	ee07 3a10 	vmov	s14, r3
24004800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24004804:	ee37 7a26 	vadd.f32	s14, s14, s13
24004808:	ee37 7a06 	vadd.f32	s14, s14, s12
2400480c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24004810:	4a30      	ldr	r2, [pc, #192]	; (240048d4 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
24004812:	6b13      	ldr	r3, [r2, #48]	; 0x30
24004814:	f3c3 2346 	ubfx	r3, r3, #9, #7
24004818:	ee07 3a10 	vmov	s14, r3
2400481c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24004820:	ee37 7a06 	vadd.f32	s14, s14, s12
24004824:	eec7 6a87 	vdiv.f32	s13, s15, s14
24004828:	eefc 6ae6 	vcvt.u32.f32	s13, s13
2400482c:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24004830:	6b13      	ldr	r3, [r2, #48]	; 0x30
24004832:	f3c3 4306 	ubfx	r3, r3, #16, #7
24004836:	ee07 3a10 	vmov	s14, r3
2400483a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400483e:	ee37 7a06 	vadd.f32	s14, s14, s12
24004842:	eec7 6a87 	vdiv.f32	s13, s15, s14
24004846:	eefc 6ae6 	vcvt.u32.f32	s13, s13
2400484a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400484e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24004850:	f3c3 6306 	ubfx	r3, r3, #24, #7
24004854:	ee06 3a90 	vmov	s13, r3
24004858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400485c:	ee76 6a86 	vadd.f32	s13, s13, s12
24004860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
24004864:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24004868:	ee17 3a90 	vmov	r3, s15
2400486c:	6083      	str	r3, [r0, #8]
}
2400486e:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004870:	6b0b      	ldr	r3, [r1, #48]	; 0x30
24004872:	eddf 5a1a 	vldr	s11, [pc, #104]	; 240048dc <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400487a:	ee07 3a90 	vmov	s15, r3
2400487e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
24004886:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400488a:	eec5 6a87 	vdiv.f32	s13, s11, s14
2400488e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
24004892:	e7bd      	b.n	24004810 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004894:	6b0b      	ldr	r3, [r1, #48]	; 0x30
24004896:	eddf 5a12 	vldr	s11, [pc, #72]	; 240048e0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
2400489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400489e:	ee07 3a90 	vmov	s15, r3
240048a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240048aa:	ee77 7a86 	vadd.f32	s15, s15, s12
240048ae:	e7ec      	b.n	2400488a <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240048b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
240048b2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 240048e4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
240048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240048ba:	ee07 3a90 	vmov	s15, r3
240048be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240048c6:	ee77 7a86 	vadd.f32	s15, s15, s12
240048ca:	e7de      	b.n	2400488a <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
240048cc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
240048d0:	e7cc      	b.n	2400486c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
240048d2:	bf00      	nop
240048d4:	58024400 	.word	0x58024400
240048d8:	03d09000 	.word	0x03d09000
240048dc:	4a742400 	.word	0x4a742400
240048e0:	4b742400 	.word	0x4b742400
240048e4:	4c742400 	.word	0x4c742400

240048e8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
240048e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240048ea:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
240048ee:	430b      	orrs	r3, r1
240048f0:	d114      	bne.n	2400491c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240048f2:	4b9d      	ldr	r3, [pc, #628]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
240048f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
240048f6:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
240048fa:	2a04      	cmp	r2, #4
240048fc:	d82f      	bhi.n	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
240048fe:	e8df f012 	tbh	[pc, r2, lsl #1]
24004902:	00ed      	.short	0x00ed
24004904:	0005001d 	.word	0x0005001d
24004908:	00490153 	.word	0x00490153
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400490c:	6818      	ldr	r0, [r3, #0]
2400490e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24004912:	d01b      	beq.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24004914:	a801      	add	r0, sp, #4
24004916:	f7ff fe93 	bl	24004640 <HAL_RCCEx_GetPLL3ClockFreq>
2400491a:	e016      	b.n	2400494a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
2400491c:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24004920:	430b      	orrs	r3, r1
24004922:	d11e      	bne.n	24004962 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
24004924:	4b90      	ldr	r3, [pc, #576]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24004928:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
2400492c:	2a80      	cmp	r2, #128	; 0x80
2400492e:	d0ed      	beq.n	2400490c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
24004930:	d80f      	bhi.n	24004952 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
24004932:	2a00      	cmp	r2, #0
24004934:	f000 80d2 	beq.w	24004adc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
24004938:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
2400493a:	d110      	bne.n	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400493c:	6818      	ldr	r0, [r3, #0]
2400493e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24004942:	d003      	beq.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24004944:	a801      	add	r0, sp, #4
24004946:	f7ff fdd1 	bl	240044ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400494a:	9801      	ldr	r0, [sp, #4]
}
2400494c:	b005      	add	sp, #20
2400494e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24004952:	2ac0      	cmp	r2, #192	; 0xc0
24004954:	f000 8128 	beq.w	24004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
24004958:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
2400495c:	d01a      	beq.n	24004994 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
2400495e:	2000      	movs	r0, #0
  return frequency;
24004960:	e7f4      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
24004962:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24004966:	430b      	orrs	r3, r1
24004968:	d133      	bne.n	240049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
2400496a:	4b7f      	ldr	r3, [pc, #508]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2400496c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400496e:	f402 6260 	and.w	r2, r2, #3584	; 0xe00
    switch (saiclocksource)
24004972:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
24004976:	d0c9      	beq.n	2400490c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
24004978:	d805      	bhi.n	24004986 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
2400497a:	2a00      	cmp	r2, #0
2400497c:	f000 80ae 	beq.w	24004adc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
24004980:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
24004984:	e7d9      	b.n	2400493a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
24004986:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
2400498a:	f000 810d 	beq.w	24004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
2400498e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
24004992:	e7e3      	b.n	2400495c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24004994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24004996:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24004998:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400499c:	0748      	lsls	r0, r1, #29
2400499e:	d506      	bpl.n	240049ae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
240049a0:	b92a      	cbnz	r2, 240049ae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240049a2:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240049a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240049a8:	4870      	ldr	r0, [pc, #448]	; (24004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
240049aa:	40d8      	lsrs	r0, r3
240049ac:	e7ce      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240049ae:	4b6e      	ldr	r3, [pc, #440]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
240049b0:	6819      	ldr	r1, [r3, #0]
240049b2:	05c9      	lsls	r1, r1, #23
240049b4:	d503      	bpl.n	240049be <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
240049b6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
240049ba:	f000 80f3 	beq.w	24004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240049be:	6818      	ldr	r0, [r3, #0]
240049c0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240049c4:	d0c2      	beq.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
240049c6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
240049ca:	4869      	ldr	r0, [pc, #420]	; (24004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240049cc:	bf18      	it	ne
240049ce:	2000      	movne	r0, #0
240049d0:	e7bc      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
240049d2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
240049d6:	430b      	orrs	r3, r1
240049d8:	d124      	bne.n	24004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
240049da:	4b63      	ldr	r3, [pc, #396]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
240049dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
240049de:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
240049e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
240049e6:	d091      	beq.n	2400490c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
240049e8:	d804      	bhi.n	240049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
240049ea:	2a00      	cmp	r2, #0
240049ec:	d076      	beq.n	24004adc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
240049ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
240049f2:	e7a2      	b.n	2400493a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
240049f4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
240049f8:	f000 80d6 	beq.w	24004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
240049fc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
24004a00:	d1ad      	bne.n	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24004a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24004a04:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24004a06:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004a0a:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24004a0c:	0748      	lsls	r0, r1, #29
24004a0e:	d501      	bpl.n	24004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
24004a10:	2a00      	cmp	r2, #0
24004a12:	d0c7      	beq.n	240049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24004a14:	05d9      	lsls	r1, r3, #23
24004a16:	d503      	bpl.n	24004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
24004a18:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
24004a1c:	f000 80c2 	beq.w	24004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24004a20:	4b51      	ldr	r3, [pc, #324]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004a22:	e7cc      	b.n	240049be <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24004a24:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24004a28:	430b      	orrs	r3, r1
24004a2a:	d133      	bne.n	24004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24004a2c:	4a4e      	ldr	r2, [pc, #312]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004a2e:	6d13      	ldr	r3, [r2, #80]	; 0x50
24004a30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
24004a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24004a38:	f000 808e 	beq.w	24004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
24004a3c:	d80c      	bhi.n	24004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
24004a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24004a42:	d015      	beq.n	24004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24004a48:	d01b      	beq.n	24004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
24004a4a:	2b00      	cmp	r3, #0
24004a4c:	d187      	bne.n	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
24004a4e:	b005      	add	sp, #20
24004a50:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24004a54:	f7fe bf58 	b.w	24003908 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
24004a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24004a5c:	d075      	beq.n	24004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
24004a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24004a62:	f47f af7c 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24004a66:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
24004a68:	4b41      	ldr	r3, [pc, #260]	; (24004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24004a6a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24004a6e:	e070      	b.n	24004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24004a70:	6810      	ldr	r0, [r2, #0]
24004a72:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24004a76:	f43f af69 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24004a7a:	a801      	add	r0, sp, #4
24004a7c:	f7ff fd36 	bl	240044ec <HAL_RCCEx_GetPLL2ClockFreq>
24004a80:	e034      	b.n	24004aec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24004a82:	6810      	ldr	r0, [r2, #0]
24004a84:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24004a88:	f43f af60 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24004a8c:	a801      	add	r0, sp, #4
24004a8e:	f7ff fdd7 	bl	24004640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24004a92:	e02b      	b.n	24004aec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24004a94:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24004a98:	430b      	orrs	r3, r1
24004a9a:	d117      	bne.n	24004acc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24004a9c:	4b32      	ldr	r3, [pc, #200]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004a9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
24004aa0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
24004aa4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
24004aa8:	d006      	beq.n	24004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
24004aaa:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
24004aae:	d0a8      	beq.n	24004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
24004ab0:	2a00      	cmp	r2, #0
24004ab2:	f47f af54 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
24004ab6:	e741      	b.n	2400493c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24004ab8:	6818      	ldr	r0, [r3, #0]
24004aba:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24004abe:	f43f af45 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24004ac2:	a801      	add	r0, sp, #4
24004ac4:	f7ff fdbc 	bl	24004640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24004ac8:	9803      	ldr	r0, [sp, #12]
24004aca:	e73f      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24004acc:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24004ad0:	430b      	orrs	r3, r1
24004ad2:	d116      	bne.n	24004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24004ad4:	4b24      	ldr	r3, [pc, #144]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
24004ad8:	03d2      	lsls	r2, r2, #15
24004ada:	d409      	bmi.n	24004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24004adc:	6818      	ldr	r0, [r3, #0]
24004ade:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24004ae2:	f43f af33 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24004ae6:	a801      	add	r0, sp, #4
24004ae8:	f7ff fe54 	bl	24004794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24004aec:	9802      	ldr	r0, [sp, #8]
24004aee:	e72d      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24004af0:	6818      	ldr	r0, [r3, #0]
24004af2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24004af6:	f43f af29 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24004afa:	a801      	add	r0, sp, #4
24004afc:	f7ff fcf6 	bl	240044ec <HAL_RCCEx_GetPLL2ClockFreq>
24004b00:	e7e2      	b.n	24004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24004b02:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24004b06:	430b      	orrs	r3, r1
24004b08:	d136      	bne.n	24004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24004b0a:	4a17      	ldr	r2, [pc, #92]	; (24004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24004b0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
24004b0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
24004b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24004b16:	d01f      	beq.n	24004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
24004b18:	d80d      	bhi.n	24004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
24004b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24004b1e:	d0a7      	beq.n	24004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24004b24:	d0ad      	beq.n	24004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
24004b26:	2b00      	cmp	r3, #0
24004b28:	f47f af19 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
24004b2c:	b005      	add	sp, #20
24004b2e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
24004b32:	f7ff bcc9 	b.w	240044c8 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
24004b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24004b3a:	d094      	beq.n	24004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
24004b3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
24004b40:	d032      	beq.n	24004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
24004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24004b46:	f47f af0a 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24004b4a:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
24004b4c:	4b09      	ldr	r3, [pc, #36]	; (24004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
24004b4e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24004b52:	bf18      	it	ne
24004b54:	4618      	movne	r0, r3
24004b56:	e6f9      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24004b58:	6810      	ldr	r0, [r2, #0]
24004b5a:	f010 0004 	ands.w	r0, r0, #4
24004b5e:	f43f aef5 	beq.w	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004b62:	6813      	ldr	r3, [r2, #0]
24004b64:	e71e      	b.n	240049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
24004b66:	bf00      	nop
24004b68:	58024400 	.word	0x58024400
24004b6c:	03d09000 	.word	0x03d09000
24004b70:	00f42400 	.word	0x00f42400
24004b74:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24004b78:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24004b7c:	4301      	orrs	r1, r0
24004b7e:	f47f aeee 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24004b82:	4a0a      	ldr	r2, [pc, #40]	; (24004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
24004b84:	6d13      	ldr	r3, [r2, #80]	; 0x50
24004b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24004b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24004b8e:	d007      	beq.n	24004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
24004b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24004b94:	f43f af6c 	beq.w	24004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24004b98:	2b00      	cmp	r3, #0
24004b9a:	f47f aee0 	bne.w	2400495e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
24004b9e:	e762      	b.n	24004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24004ba0:	6810      	ldr	r0, [r2, #0]
24004ba2:	e79c      	b.n	24004ade <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = CSI_VALUE;
24004ba4:	4802      	ldr	r0, [pc, #8]	; (24004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
24004ba6:	e6d1      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        frequency = EXTERNAL_CLOCK_VALUE;
24004ba8:	4802      	ldr	r0, [pc, #8]	; (24004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24004baa:	e6cf      	b.n	2400494c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
24004bac:	58024400 	.word	0x58024400
24004bb0:	003d0900 	.word	0x003d0900
24004bb4:	00bb8000 	.word	0x00bb8000

24004bb8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
24004bb8:	6803      	ldr	r3, [r0, #0]
24004bba:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
24004bbc:	699a      	ldr	r2, [r3, #24]
24004bbe:	f042 0208 	orr.w	r2, r2, #8
24004bc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24004bc4:	699a      	ldr	r2, [r3, #24]
24004bc6:	f042 0210 	orr.w	r2, r2, #16
24004bca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
24004bcc:	681a      	ldr	r2, [r3, #0]
24004bce:	f022 0201 	bic.w	r2, r2, #1
24004bd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24004bd4:	691a      	ldr	r2, [r3, #16]
24004bd6:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
24004bda:	f022 0203 	bic.w	r2, r2, #3
24004bde:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24004be0:	689a      	ldr	r2, [r3, #8]
24004be2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
24004be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
24004be8:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
24004bec:	2a04      	cmp	r2, #4
24004bee:	d00b      	beq.n	24004c08 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
24004bf0:	068a      	lsls	r2, r1, #26
24004bf2:	d509      	bpl.n	24004c08 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
24004bf4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24004bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24004bfc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24004c00:	699a      	ldr	r2, [r3, #24]
24004c02:	f042 0220 	orr.w	r2, r2, #32
24004c06:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
24004c08:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
24004c0c:	2a03      	cmp	r2, #3
24004c0e:	d00b      	beq.n	24004c28 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
24004c10:	064a      	lsls	r2, r1, #25
24004c12:	d509      	bpl.n	24004c28 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
24004c14:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24004c18:	f042 0204 	orr.w	r2, r2, #4
24004c1c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
24004c20:	699a      	ldr	r2, [r3, #24]
24004c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24004c26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
24004c28:	058a      	lsls	r2, r1, #22
24004c2a:	d509      	bpl.n	24004c40 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
24004c2c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24004c30:	f042 0201 	orr.w	r2, r2, #1
24004c34:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
24004c38:	699a      	ldr	r2, [r3, #24]
24004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24004c3e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
24004c40:	05ca      	lsls	r2, r1, #23
24004c42:	d509      	bpl.n	24004c58 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24004c44:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24004c48:	f042 0208 	orr.w	r2, r2, #8
24004c4c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
24004c50:	699a      	ldr	r2, [r3, #24]
24004c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24004c56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
24004c58:	2300      	movs	r3, #0
24004c5a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
24004c5e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
24004c62:	4770      	bx	lr

24004c64 <HAL_SPI_Init>:
{
24004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
24004c66:	4604      	mov	r4, r0
24004c68:	b908      	cbnz	r0, 24004c6e <HAL_SPI_Init+0xa>
    return HAL_ERROR;
24004c6a:	2001      	movs	r0, #1
}
24004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24004c6e:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24004c70:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24004c72:	494d      	ldr	r1, [pc, #308]	; (24004da8 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24004c74:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24004c76:	428a      	cmp	r2, r1
24004c78:	68c3      	ldr	r3, [r0, #12]
24004c7a:	d009      	beq.n	24004c90 <HAL_SPI_Init+0x2c>
24004c7c:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
24004c80:	428a      	cmp	r2, r1
24004c82:	d005      	beq.n	24004c90 <HAL_SPI_Init+0x2c>
24004c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
24004c88:	428a      	cmp	r2, r1
24004c8a:	d001      	beq.n	24004c90 <HAL_SPI_Init+0x2c>
24004c8c:	2b0f      	cmp	r3, #15
24004c8e:	d8ec      	bhi.n	24004c6a <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24004c90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
24004c92:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24004c94:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
24004c96:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
24004c98:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24004c9c:	4942      	ldr	r1, [pc, #264]	; (24004da8 <HAL_SPI_Init+0x144>)
24004c9e:	428a      	cmp	r2, r1
24004ca0:	d073      	beq.n	24004d8a <HAL_SPI_Init+0x126>
24004ca2:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
24004ca6:	428a      	cmp	r2, r1
24004ca8:	d06f      	beq.n	24004d8a <HAL_SPI_Init+0x126>
24004caa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
24004cae:	428a      	cmp	r2, r1
24004cb0:	d06b      	beq.n	24004d8a <HAL_SPI_Init+0x126>
24004cb2:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24004cb4:	d8d9      	bhi.n	24004c6a <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
24004cb6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
24004cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24004cbe:	b923      	cbnz	r3, 24004cca <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
24004cc0:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
24004cc2:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
24004cc6:	f7fb ffb7 	bl	24000c38 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
24004cca:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
24004ccc:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24004cce:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
24004cd0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
24004cd4:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24004cd6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
24004cd8:	f023 0301 	bic.w	r3, r3, #1
24004cdc:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
24004cde:	6893      	ldr	r3, [r2, #8]
24004ce0:	f403 1cf8 	and.w	ip, r3, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24004ce4:	69a3      	ldr	r3, [r4, #24]
24004ce6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24004cea:	d104      	bne.n	24004cf6 <HAL_SPI_Init+0x92>
24004cec:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24004cf0:	d14d      	bne.n	24004d8e <HAL_SPI_Init+0x12a>
24004cf2:	2e00      	cmp	r6, #0
24004cf4:	d050      	beq.n	24004d98 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24004cf6:	f411 0080 	ands.w	r0, r1, #4194304	; 0x400000
24004cfa:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
24004cfc:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24004cfe:	d050      	beq.n	24004da2 <HAL_SPI_Init+0x13e>
24004d00:	2d06      	cmp	r5, #6
24004d02:	d94e      	bls.n	24004da2 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
24004d04:	f427 7e80 	bic.w	lr, r7, #256	; 0x100
24004d08:	6d27      	ldr	r7, [r4, #80]	; 0x50
24004d0a:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
24004d0e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24004d10:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24004d12:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24004d14:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24004d16:	433d      	orrs	r5, r7
24004d18:	6aa7      	ldr	r7, [r4, #40]	; 0x28
24004d1a:	433d      	orrs	r5, r7
24004d1c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
24004d1e:	433d      	orrs	r5, r7
24004d20:	ea45 050c 	orr.w	r5, r5, ip
24004d24:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24004d26:	6b65      	ldr	r5, [r4, #52]	; 0x34
24004d28:	432b      	orrs	r3, r5
24004d2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
24004d2c:	432b      	orrs	r3, r5
24004d2e:	6925      	ldr	r5, [r4, #16]
24004d30:	432b      	orrs	r3, r5
24004d32:	6965      	ldr	r5, [r4, #20]
24004d34:	432b      	orrs	r3, r5
24004d36:	6a25      	ldr	r5, [r4, #32]
24004d38:	432b      	orrs	r3, r5
24004d3a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
24004d3c:	432b      	orrs	r3, r5
24004d3e:	68a5      	ldr	r5, [r4, #8]
24004d40:	432b      	orrs	r3, r5
24004d42:	6ca5      	ldr	r5, [r4, #72]	; 0x48
24004d44:	432b      	orrs	r3, r5
24004d46:	6da5      	ldr	r5, [r4, #88]	; 0x58
24004d48:	432b      	orrs	r3, r5
24004d4a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
24004d4c:	b959      	cbnz	r1, 24004d66 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
24004d4e:	6893      	ldr	r3, [r2, #8]
24004d50:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
24004d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
24004d58:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
24004d5a:	6893      	ldr	r3, [r2, #8]
24004d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
24004d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24004d64:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
24004d66:	6d13      	ldr	r3, [r2, #80]	; 0x50
24004d68:	f023 0301 	bic.w	r3, r3, #1
24004d6c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
24004d6e:	b128      	cbz	r0, 24004d7c <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
24004d70:	68d3      	ldr	r3, [r2, #12]
24004d72:	6d61      	ldr	r1, [r4, #84]	; 0x54
24004d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24004d78:	430b      	orrs	r3, r1
24004d7a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24004d7c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
24004d7e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24004d80:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
24004d84:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
24004d88:	e770      	b.n	24004c6c <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24004d8a:	2b10      	cmp	r3, #16
24004d8c:	e792      	b.n	24004cb4 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24004d8e:	2900      	cmp	r1, #0
24004d90:	d1b1      	bne.n	24004cf6 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24004d92:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
24004d96:	d1ae      	bne.n	24004cf6 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
24004d98:	6810      	ldr	r0, [r2, #0]
24004d9a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
24004d9e:	6010      	str	r0, [r2, #0]
24004da0:	e7a9      	b.n	24004cf6 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
24004da2:	f427 7780 	bic.w	r7, r7, #256	; 0x100
24004da6:	e7b2      	b.n	24004d0e <HAL_SPI_Init+0xaa>
24004da8:	40013000 	.word	0x40013000

24004dac <HAL_SPI_Transmit>:
{
24004dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24004db0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
24004db2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
24004db6:	4604      	mov	r4, r0
24004db8:	4689      	mov	r9, r1
  __HAL_LOCK(hspi);
24004dba:	2b01      	cmp	r3, #1
{
24004dbc:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
24004dbe:	d00e      	beq.n	24004dde <HAL_SPI_Transmit+0x32>
24004dc0:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
24004dc2:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hspi);
24004dc4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
24004dc8:	f7fc f958 	bl	2400107c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
24004dcc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
24004dd0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
24004dd2:	2b01      	cmp	r3, #1
24004dd4:	b2d8      	uxtb	r0, r3
24004dd6:	d004      	beq.n	24004de2 <HAL_SPI_Transmit+0x36>
    __HAL_UNLOCK(hspi);
24004dd8:	2300      	movs	r3, #0
24004dda:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
24004dde:	2002      	movs	r0, #2
24004de0:	e008      	b.n	24004df4 <HAL_SPI_Transmit+0x48>
  if ((pData == NULL) || (Size == 0UL))
24004de2:	f1b9 0f00 	cmp.w	r9, #0
24004de6:	d002      	beq.n	24004dee <HAL_SPI_Transmit+0x42>
24004de8:	f1b8 0f00 	cmp.w	r8, #0
24004dec:	d104      	bne.n	24004df8 <HAL_SPI_Transmit+0x4c>
    __HAL_UNLOCK(hspi);
24004dee:	2300      	movs	r3, #0
24004df0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
24004df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
24004df8:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
24004dfa:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
24004dfc:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
24004e00:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
24004e04:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
24004e08:	f04f 0300 	mov.w	r3, #0
  hspi->TxXferSize  = Size;
24004e0c:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
24004e10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
24004e14:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
24004e16:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
24004e1a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
24004e1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
24004e22:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    SPI_1LINE_TX(hspi);
24004e26:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
24004e28:	d13b      	bne.n	24004ea2 <HAL_SPI_Transmit+0xf6>
    SPI_1LINE_TX(hspi);
24004e2a:	681a      	ldr	r2, [r3, #0]
24004e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24004e30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
24004e32:	6859      	ldr	r1, [r3, #4]
24004e34:	0c09      	lsrs	r1, r1, #16
24004e36:	0409      	lsls	r1, r1, #16
24004e38:	ea41 0108 	orr.w	r1, r1, r8
24004e3c:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
24004e3e:	681a      	ldr	r2, [r3, #0]
24004e40:	f042 0201 	orr.w	r2, r2, #1
24004e44:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
24004e46:	6862      	ldr	r2, [r4, #4]
24004e48:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
24004e4c:	d103      	bne.n	24004e56 <HAL_SPI_Transmit+0xaa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
24004e4e:	681a      	ldr	r2, [r3, #0]
24004e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24004e54:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
24004e56:	68e3      	ldr	r3, [r4, #12]
24004e58:	2b0f      	cmp	r3, #15
24004e5a:	d838      	bhi.n	24004ece <HAL_SPI_Transmit+0x122>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
24004e5c:	2b07      	cmp	r3, #7
24004e5e:	d87c      	bhi.n	24004f5a <HAL_SPI_Transmit+0x1ae>
    while (hspi->TxXferCount > 0UL)
24004e60:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004e64:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
24004e66:	b29b      	uxth	r3, r3
24004e68:	2b00      	cmp	r3, #0
24004e6a:	d036      	beq.n	24004eda <HAL_SPI_Transmit+0x12e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004e6c:	694b      	ldr	r3, [r1, #20]
24004e6e:	f013 0802 	ands.w	r8, r3, #2
24004e72:	f000 80a7 	beq.w	24004fc4 <HAL_SPI_Transmit+0x218>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
24004e76:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24004e7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
24004e7c:	b29b      	uxth	r3, r3
24004e7e:	2b03      	cmp	r3, #3
24004e80:	f240 8087 	bls.w	24004f92 <HAL_SPI_Transmit+0x1e6>
24004e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004e86:	2b40      	cmp	r3, #64	; 0x40
24004e88:	f240 8083 	bls.w	24004f92 <HAL_SPI_Transmit+0x1e6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24004e8c:	f852 3b04 	ldr.w	r3, [r2], #4
24004e90:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
24004e92:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
24004e96:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
24004e98:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
24004e9a:	b29b      	uxth	r3, r3
24004e9c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
24004ea0:	e7de      	b.n	24004e60 <HAL_SPI_Transmit+0xb4>
    SPI_2LINES_TX(hspi);
24004ea2:	68da      	ldr	r2, [r3, #12]
24004ea4:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
24004ea8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24004eac:	60da      	str	r2, [r3, #12]
24004eae:	e7c0      	b.n	24004e32 <HAL_SPI_Transmit+0x86>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004eb0:	6957      	ldr	r7, [r2, #20]
24004eb2:	f017 0702 	ands.w	r7, r7, #2
24004eb6:	d023      	beq.n	24004f00 <HAL_SPI_Transmit+0x154>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24004eb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004eba:	f853 1b04 	ldr.w	r1, [r3], #4
24004ebe:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
24004ec0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
24004ec2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24004ec6:	3b01      	subs	r3, #1
24004ec8:	b29b      	uxth	r3, r3
24004eca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
24004ece:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004ed2:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
24004ed4:	b29b      	uxth	r3, r3
24004ed6:	2b00      	cmp	r3, #0
24004ed8:	d1ea      	bne.n	24004eb0 <HAL_SPI_Transmit+0x104>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24004eda:	6823      	ldr	r3, [r4, #0]
24004edc:	695b      	ldr	r3, [r3, #20]
24004ede:	071b      	lsls	r3, r3, #28
24004ee0:	d57a      	bpl.n	24004fd8 <HAL_SPI_Transmit+0x22c>
  SPI_CloseTransfer(hspi);
24004ee2:	4620      	mov	r0, r4
24004ee4:	f7ff fe68 	bl	24004bb8 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
24004ee8:	2300      	movs	r3, #0
24004eea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
24004eee:	2301      	movs	r3, #1
24004ef0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
24004ef4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
24004ef8:	3800      	subs	r0, #0
24004efa:	bf18      	it	ne
24004efc:	2001      	movne	r0, #1
24004efe:	e779      	b.n	24004df4 <HAL_SPI_Transmit+0x48>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24004f00:	f7fc f8bc 	bl	2400107c <HAL_GetTick>
24004f04:	1b80      	subs	r0, r0, r6
24004f06:	42a8      	cmp	r0, r5
24004f08:	d3e1      	bcc.n	24004ece <HAL_SPI_Transmit+0x122>
24004f0a:	1c6b      	adds	r3, r5, #1
24004f0c:	d0df      	beq.n	24004ece <HAL_SPI_Transmit+0x122>
          SPI_CloseTransfer(hspi);
24004f0e:	4620      	mov	r0, r4
24004f10:	f7ff fe52 	bl	24004bb8 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
24004f14:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24004f18:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004f20:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
24004f24:	2301      	movs	r3, #1
24004f26:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
          return HAL_TIMEOUT;
24004f2a:	2003      	movs	r0, #3
24004f2c:	e762      	b.n	24004df4 <HAL_SPI_Transmit+0x48>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004f2e:	694b      	ldr	r3, [r1, #20]
24004f30:	f013 0802 	ands.w	r8, r3, #2
24004f34:	d020      	beq.n	24004f78 <HAL_SPI_Transmit+0x1cc>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24004f36:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24004f3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24004f3c:	b292      	uxth	r2, r2
24004f3e:	2a01      	cmp	r2, #1
24004f40:	d912      	bls.n	24004f68 <HAL_SPI_Transmit+0x1bc>
24004f42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24004f44:	b182      	cbz	r2, 24004f68 <HAL_SPI_Transmit+0x1bc>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24004f46:	f853 2b04 	ldr.w	r2, [r3], #4
24004f4a:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
24004f4c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
24004f4e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24004f52:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
24004f54:	b29b      	uxth	r3, r3
24004f56:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
24004f5a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24004f5e:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
24004f60:	b29b      	uxth	r3, r3
24004f62:	2b00      	cmp	r3, #0
24004f64:	d1e3      	bne.n	24004f2e <HAL_SPI_Transmit+0x182>
24004f66:	e7b8      	b.n	24004eda <HAL_SPI_Transmit+0x12e>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
24004f68:	f833 2b02 	ldrh.w	r2, [r3], #2
24004f6c:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
24004f6e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
24004f70:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24004f74:	3b01      	subs	r3, #1
24004f76:	e7ed      	b.n	24004f54 <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24004f78:	f7fc f880 	bl	2400107c <HAL_GetTick>
24004f7c:	1b80      	subs	r0, r0, r6
24004f7e:	42a8      	cmp	r0, r5
24004f80:	d3eb      	bcc.n	24004f5a <HAL_SPI_Transmit+0x1ae>
24004f82:	1c68      	adds	r0, r5, #1
24004f84:	d0e9      	beq.n	24004f5a <HAL_SPI_Transmit+0x1ae>
          SPI_CloseTransfer(hspi);
24004f86:	4620      	mov	r0, r4
24004f88:	f7ff fe16 	bl	24004bb8 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
24004f8c:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
24004f90:	e7c2      	b.n	24004f18 <HAL_SPI_Transmit+0x16c>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24004f92:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24004f96:	b29b      	uxth	r3, r3
24004f98:	2b01      	cmp	r3, #1
24004f9a:	d909      	bls.n	24004fb0 <HAL_SPI_Transmit+0x204>
24004f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004f9e:	b13b      	cbz	r3, 24004fb0 <HAL_SPI_Transmit+0x204>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
24004fa0:	f832 3b02 	ldrh.w	r3, [r2], #2
24004fa4:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
24004fa6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
24004faa:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
24004fac:	3b02      	subs	r3, #2
24004fae:	e774      	b.n	24004e9a <HAL_SPI_Transmit+0xee>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
24004fb0:	7813      	ldrb	r3, [r2, #0]
24004fb2:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
24004fb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004fb8:	3301      	adds	r3, #1
24004fba:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
24004fbc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24004fc0:	3b01      	subs	r3, #1
24004fc2:	e76a      	b.n	24004e9a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24004fc4:	f7fc f85a 	bl	2400107c <HAL_GetTick>
24004fc8:	1b80      	subs	r0, r0, r6
24004fca:	42a8      	cmp	r0, r5
24004fcc:	f4ff af48 	bcc.w	24004e60 <HAL_SPI_Transmit+0xb4>
24004fd0:	1c69      	adds	r1, r5, #1
24004fd2:	f43f af45 	beq.w	24004e60 <HAL_SPI_Transmit+0xb4>
24004fd6:	e7d6      	b.n	24004f86 <HAL_SPI_Transmit+0x1da>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24004fd8:	f7fc f850 	bl	2400107c <HAL_GetTick>
24004fdc:	1b80      	subs	r0, r0, r6
24004fde:	4285      	cmp	r5, r0
24004fe0:	f63f af7b 	bhi.w	24004eda <HAL_SPI_Transmit+0x12e>
24004fe4:	1c6a      	adds	r2, r5, #1
24004fe6:	f43f af78 	beq.w	24004eda <HAL_SPI_Transmit+0x12e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
24004fea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24004fee:	f043 0320 	orr.w	r3, r3, #32
24004ff2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
24004ff6:	e774      	b.n	24004ee2 <HAL_SPI_Transmit+0x136>

24004ff8 <HAL_SPI_TransmitReceive>:
{
24004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24004ffc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
24004ffe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
24005002:	4604      	mov	r4, r0
24005004:	4689      	mov	r9, r1
  __HAL_LOCK(hspi);
24005006:	2b01      	cmp	r3, #1
{
24005008:	4692      	mov	sl, r2
2400500a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
2400500c:	d00f      	beq.n	2400502e <HAL_SPI_TransmitReceive+0x36>
2400500e:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
24005010:	f8d0 8000 	ldr.w	r8, [r0]
  __HAL_LOCK(hspi);
24005014:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
24005018:	f7fc f830 	bl	2400107c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
2400501c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
24005020:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
24005022:	2b01      	cmp	r3, #1
24005024:	b2d8      	uxtb	r0, r3
24005026:	d004      	beq.n	24005032 <HAL_SPI_TransmitReceive+0x3a>
    __HAL_UNLOCK(hspi);
24005028:	2300      	movs	r3, #0
2400502a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
2400502e:	2002      	movs	r0, #2
24005030:	e009      	b.n	24005046 <HAL_SPI_TransmitReceive+0x4e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
24005032:	f1b9 0f00 	cmp.w	r9, #0
24005036:	d003      	beq.n	24005040 <HAL_SPI_TransmitReceive+0x48>
24005038:	f1ba 0f00 	cmp.w	sl, #0
2400503c:	d000      	beq.n	24005040 <HAL_SPI_TransmitReceive+0x48>
2400503e:	b925      	cbnz	r5, 2400504a <HAL_SPI_TransmitReceive+0x52>
    __HAL_UNLOCK(hspi);
24005040:	2300      	movs	r3, #0
24005042:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
24005046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400504a:	2305      	movs	r3, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400504c:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
24005050:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
24005054:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
24005058:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400505a:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400505e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
24005062:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
24005066:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
2400506a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
2400506e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
24005072:	6823      	ldr	r3, [r4, #0]
24005074:	68da      	ldr	r2, [r3, #12]
24005076:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
2400507a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400507c:	685a      	ldr	r2, [r3, #4]
2400507e:	0c12      	lsrs	r2, r2, #16
24005080:	0412      	lsls	r2, r2, #16
24005082:	432a      	orrs	r2, r5
24005084:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
24005086:	681a      	ldr	r2, [r3, #0]
24005088:	f042 0201 	orr.w	r2, r2, #1
2400508c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400508e:	6862      	ldr	r2, [r4, #4]
24005090:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
24005094:	d103      	bne.n	2400509e <HAL_SPI_TransmitReceive+0xa6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
24005096:	681a      	ldr	r2, [r3, #0]
24005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400509c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400509e:	68e3      	ldr	r3, [r4, #12]
240050a0:	2b0f      	cmp	r3, #15
240050a2:	d95c      	bls.n	2400515e <HAL_SPI_TransmitReceive+0x166>
240050a4:	46a8      	mov	r8, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
240050a6:	f248 0908 	movw	r9, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
240050aa:	6822      	ldr	r2, [r4, #0]
240050ac:	6953      	ldr	r3, [r2, #20]
240050ae:	0799      	lsls	r1, r3, #30
240050b0:	d50e      	bpl.n	240050d0 <HAL_SPI_TransmitReceive+0xd8>
240050b2:	b16d      	cbz	r5, 240050d0 <HAL_SPI_TransmitReceive+0xd8>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240050b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240050b6:	f853 1b04 	ldr.w	r1, [r3], #4
240050ba:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
240050bc:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
240050be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
240050c2:	3b01      	subs	r3, #1
240050c4:	b29b      	uxth	r3, r3
240050c6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
240050ca:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
240050ce:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
240050d0:	6953      	ldr	r3, [r2, #20]
240050d2:	ea13 0f09 	tst.w	r3, r9
240050d6:	d011      	beq.n	240050fc <HAL_SPI_TransmitReceive+0x104>
240050d8:	f1b8 0f00 	cmp.w	r8, #0
240050dc:	d00e      	beq.n	240050fc <HAL_SPI_TransmitReceive+0x104>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
240050de:	6b12      	ldr	r2, [r2, #48]	; 0x30
240050e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
240050e2:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
240050e6:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
240050e8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
240050ec:	3b01      	subs	r3, #1
240050ee:	b29b      	uxth	r3, r3
240050f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
240050f4:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
240050f8:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
240050fc:	f7fb ffbe 	bl	2400107c <HAL_GetTick>
24005100:	1bc0      	subs	r0, r0, r7
24005102:	42b0      	cmp	r0, r6
24005104:	d312      	bcc.n	2400512c <HAL_SPI_TransmitReceive+0x134>
24005106:	1c72      	adds	r2, r6, #1
24005108:	d010      	beq.n	2400512c <HAL_SPI_TransmitReceive+0x134>
        SPI_CloseTransfer(hspi);
2400510a:	4620      	mov	r0, r4
2400510c:	f7ff fd54 	bl	24004bb8 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
24005110:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
24005112:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
24005114:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24005118:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24005120:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
24005124:	2301      	movs	r3, #1
24005126:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
2400512a:	e78c      	b.n	24005046 <HAL_SPI_TransmitReceive+0x4e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
2400512c:	ea45 0308 	orr.w	r3, r5, r8
24005130:	b29b      	uxth	r3, r3
24005132:	2b00      	cmp	r3, #0
24005134:	d1b9      	bne.n	240050aa <HAL_SPI_TransmitReceive+0xb2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24005136:	6823      	ldr	r3, [r4, #0]
24005138:	695b      	ldr	r3, [r3, #20]
2400513a:	071b      	lsls	r3, r3, #28
2400513c:	f140 8085 	bpl.w	2400524a <HAL_SPI_TransmitReceive+0x252>
  SPI_CloseTransfer(hspi);
24005140:	4620      	mov	r0, r4
24005142:	f7ff fd39 	bl	24004bb8 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
24005146:	2300      	movs	r3, #0
24005148:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
2400514c:	2301      	movs	r3, #1
2400514e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
24005152:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
24005156:	3800      	subs	r0, #0
24005158:	bf18      	it	ne
2400515a:	2001      	movne	r0, #1
2400515c:	e773      	b.n	24005046 <HAL_SPI_TransmitReceive+0x4e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400515e:	2b07      	cmp	r3, #7
24005160:	d937      	bls.n	240051d2 <HAL_SPI_TransmitReceive+0x1da>
24005162:	46a9      	mov	r9, r5
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
24005164:	6822      	ldr	r2, [r4, #0]
24005166:	6953      	ldr	r3, [r2, #20]
24005168:	079b      	lsls	r3, r3, #30
2400516a:	d50f      	bpl.n	2400518c <HAL_SPI_TransmitReceive+0x194>
2400516c:	b175      	cbz	r5, 2400518c <HAL_SPI_TransmitReceive+0x194>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2400516e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24005170:	f833 1b02 	ldrh.w	r1, [r3], #2
24005174:	f8a8 1020 	strh.w	r1, [r8, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
24005178:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
2400517a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400517e:	3b01      	subs	r3, #1
24005180:	b29b      	uxth	r3, r3
24005182:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
24005186:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
2400518a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
2400518c:	6953      	ldr	r3, [r2, #20]
2400518e:	07d8      	lsls	r0, r3, #31
24005190:	d512      	bpl.n	240051b8 <HAL_SPI_TransmitReceive+0x1c0>
24005192:	f1b9 0f00 	cmp.w	r9, #0
24005196:	d00f      	beq.n	240051b8 <HAL_SPI_TransmitReceive+0x1c0>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
24005198:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
2400519c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400519e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
240051a2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
240051a4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
240051a8:	3b01      	subs	r3, #1
240051aa:	b29b      	uxth	r3, r3
240051ac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
240051b0:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
240051b4:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
240051b8:	f7fb ff60 	bl	2400107c <HAL_GetTick>
240051bc:	1bc0      	subs	r0, r0, r7
240051be:	42b0      	cmp	r0, r6
240051c0:	d301      	bcc.n	240051c6 <HAL_SPI_TransmitReceive+0x1ce>
240051c2:	1c71      	adds	r1, r6, #1
240051c4:	d1a1      	bne.n	2400510a <HAL_SPI_TransmitReceive+0x112>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
240051c6:	ea45 0309 	orr.w	r3, r5, r9
240051ca:	b29b      	uxth	r3, r3
240051cc:	2b00      	cmp	r3, #0
240051ce:	d1c9      	bne.n	24005164 <HAL_SPI_TransmitReceive+0x16c>
240051d0:	e7b1      	b.n	24005136 <HAL_SPI_TransmitReceive+0x13e>
240051d2:	46a8      	mov	r8, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
240051d4:	6823      	ldr	r3, [r4, #0]
240051d6:	695a      	ldr	r2, [r3, #20]
240051d8:	0792      	lsls	r2, r2, #30
240051da:	d510      	bpl.n	240051fe <HAL_SPI_TransmitReceive+0x206>
240051dc:	b17d      	cbz	r5, 240051fe <HAL_SPI_TransmitReceive+0x206>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
240051de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240051e0:	7812      	ldrb	r2, [r2, #0]
240051e2:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
240051e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240051e8:	3301      	adds	r3, #1
240051ea:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
240051ec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
240051f0:	3b01      	subs	r3, #1
240051f2:	b29b      	uxth	r3, r3
240051f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
240051f8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
240051fc:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
240051fe:	6823      	ldr	r3, [r4, #0]
24005200:	695a      	ldr	r2, [r3, #20]
24005202:	07d0      	lsls	r0, r2, #31
24005204:	d513      	bpl.n	2400522e <HAL_SPI_TransmitReceive+0x236>
24005206:	f1b8 0f00 	cmp.w	r8, #0
2400520a:	d010      	beq.n	2400522e <HAL_SPI_TransmitReceive+0x236>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400520c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
24005210:	6e62      	ldr	r2, [r4, #100]	; 0x64
24005212:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
24005214:	6e63      	ldr	r3, [r4, #100]	; 0x64
24005216:	3301      	adds	r3, #1
24005218:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400521a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400521e:	3b01      	subs	r3, #1
24005220:	b29b      	uxth	r3, r3
24005222:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
24005226:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
2400522a:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2400522e:	f7fb ff25 	bl	2400107c <HAL_GetTick>
24005232:	1bc0      	subs	r0, r0, r7
24005234:	42b0      	cmp	r0, r6
24005236:	d302      	bcc.n	2400523e <HAL_SPI_TransmitReceive+0x246>
24005238:	1c71      	adds	r1, r6, #1
2400523a:	f47f af66 	bne.w	2400510a <HAL_SPI_TransmitReceive+0x112>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
2400523e:	ea45 0308 	orr.w	r3, r5, r8
24005242:	b29b      	uxth	r3, r3
24005244:	2b00      	cmp	r3, #0
24005246:	d1c5      	bne.n	240051d4 <HAL_SPI_TransmitReceive+0x1dc>
24005248:	e775      	b.n	24005136 <HAL_SPI_TransmitReceive+0x13e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2400524a:	f7fb ff17 	bl	2400107c <HAL_GetTick>
2400524e:	1bc0      	subs	r0, r0, r7
24005250:	4286      	cmp	r6, r0
24005252:	f63f af70 	bhi.w	24005136 <HAL_SPI_TransmitReceive+0x13e>
24005256:	1c72      	adds	r2, r6, #1
24005258:	f43f af6d 	beq.w	24005136 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2400525c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24005260:	f043 0320 	orr.w	r3, r3, #32
24005264:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
24005268:	e76a      	b.n	24005140 <HAL_SPI_TransmitReceive+0x148>

2400526a <HAL_SPI_TxCpltCallback>:
2400526a:	4770      	bx	lr

2400526c <HAL_SPI_RxCpltCallback>:
2400526c:	4770      	bx	lr

2400526e <HAL_SPI_TxRxCpltCallback>:
2400526e:	4770      	bx	lr

24005270 <HAL_SPI_ErrorCallback>:
24005270:	4770      	bx	lr

24005272 <SPI_DMAAbortOnError>:
{
24005272:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24005274:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
24005276:	2300      	movs	r3, #0
24005278:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400527c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
24005280:	2301      	movs	r3, #1
24005282:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
24005286:	f7ff fff3 	bl	24005270 <HAL_SPI_ErrorCallback>
}
2400528a:	bd08      	pop	{r3, pc}

2400528c <HAL_SPI_SuspendCallback>:
2400528c:	4770      	bx	lr
	...

24005290 <HAL_SPI_IRQHandler>:
{
24005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t itsource = hspi->Instance->IER;
24005294:	6806      	ldr	r6, [r0, #0]
{
24005296:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
24005298:	6933      	ldr	r3, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400529a:	6972      	ldr	r2, [r6, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400529c:	f8d6 8008 	ldr.w	r8, [r6, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
240052a0:	0511      	lsls	r1, r2, #20
  HAL_SPI_StateTypeDef State = hspi->State;
240052a2:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
240052a6:	ea03 0502 	and.w	r5, r3, r2
  HAL_SPI_StateTypeDef State = hspi->State;
240052aa:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
240052ac:	d509      	bpl.n	240052c2 <HAL_SPI_IRQHandler+0x32>
240052ae:	071a      	lsls	r2, r3, #28
240052b0:	d507      	bpl.n	240052c2 <HAL_SPI_IRQHandler+0x32>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
240052b2:	69b3      	ldr	r3, [r6, #24]
240052b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
240052b8:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
240052ba:	f7ff ffe7 	bl	2400528c <HAL_SPI_SuspendCallback>
}
240052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
240052c2:	f005 0364 	and.w	r3, r5, #100	; 0x64
240052c6:	2b04      	cmp	r3, #4
240052c8:	d118      	bne.n	240052fc <HAL_SPI_IRQHandler+0x6c>
    hspi->TxISR(hspi);
240052ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
240052cc:	4620      	mov	r0, r4
240052ce:	4798      	blx	r3
    hspi->RxISR(hspi);
240052d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
240052d2:	4620      	mov	r0, r4
240052d4:	4798      	blx	r3
    handled = 1UL;
240052d6:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
240052d8:	f005 0945 	and.w	r9, r5, #69	; 0x45
240052dc:	f1b9 0f01 	cmp.w	r9, #1
240052e0:	d103      	bne.n	240052ea <HAL_SPI_IRQHandler+0x5a>
    hspi->RxISR(hspi);
240052e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
240052e4:	4620      	mov	r0, r4
240052e6:	4798      	blx	r3
    handled = 1UL;
240052e8:	464b      	mov	r3, r9
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
240052ea:	f005 0226 	and.w	r2, r5, #38	; 0x26
240052ee:	2a02      	cmp	r2, #2
240052f0:	d106      	bne.n	24005300 <HAL_SPI_IRQHandler+0x70>
    hspi->TxISR(hspi);
240052f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
240052f4:	4620      	mov	r0, r4
}
240052f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hspi->TxISR(hspi);
240052fa:	4718      	bx	r3
  uint32_t handled  = 0UL;
240052fc:	2300      	movs	r3, #0
240052fe:	e7eb      	b.n	240052d8 <HAL_SPI_IRQHandler+0x48>
  if (handled != 0UL)
24005300:	2b00      	cmp	r3, #0
24005302:	d1dc      	bne.n	240052be <HAL_SPI_IRQHandler+0x2e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
24005304:	072b      	lsls	r3, r5, #28
24005306:	d551      	bpl.n	240053ac <HAL_SPI_IRQHandler+0x11c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
24005308:	6823      	ldr	r3, [r4, #0]
2400530a:	699a      	ldr	r2, [r3, #24]
2400530c:	f042 0208 	orr.w	r2, r2, #8
24005310:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24005312:	699a      	ldr	r2, [r3, #24]
24005314:	f042 0210 	orr.w	r2, r2, #16
24005318:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400531a:	699a      	ldr	r2, [r3, #24]
2400531c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24005320:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
24005322:	691a      	ldr	r2, [r3, #16]
24005324:	f022 0208 	bic.w	r2, r2, #8
24005328:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400532a:	689b      	ldr	r3, [r3, #8]
2400532c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
24005330:	d01a      	beq.n	24005368 <HAL_SPI_IRQHandler+0xd8>
    SPI_CloseTransfer(hspi);
24005332:	4620      	mov	r0, r4
24005334:	f7ff fc40 	bl	24004bb8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
24005338:	2301      	movs	r3, #1
2400533a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400533e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24005342:	b323      	cbz	r3, 2400538e <HAL_SPI_IRQHandler+0xfe>
        HAL_SPI_ErrorCallback(hspi);
24005344:	f7ff ff94 	bl	24005270 <HAL_SPI_ErrorCallback>
24005348:	e7b9      	b.n	240052be <HAL_SPI_IRQHandler+0x2e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400534a:	68e2      	ldr	r2, [r4, #12]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400534c:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400534e:	2a0f      	cmp	r2, #15
24005350:	d910      	bls.n	24005374 <HAL_SPI_IRQHandler+0xe4>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
24005352:	6822      	ldr	r2, [r4, #0]
24005354:	6b12      	ldr	r2, [r2, #48]	; 0x30
24005356:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400535a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400535c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24005360:	3b01      	subs	r3, #1
24005362:	b29b      	uxth	r3, r3
24005364:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
24005368:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400536c:	b29b      	uxth	r3, r3
2400536e:	2b00      	cmp	r3, #0
24005370:	d1eb      	bne.n	2400534a <HAL_SPI_IRQHandler+0xba>
24005372:	e7de      	b.n	24005332 <HAL_SPI_IRQHandler+0xa2>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
24005374:	2a07      	cmp	r2, #7
24005376:	d903      	bls.n	24005380 <HAL_SPI_IRQHandler+0xf0>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
24005378:	8e32      	ldrh	r2, [r6, #48]	; 0x30
2400537a:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400537e:	e7ec      	b.n	2400535a <HAL_SPI_IRQHandler+0xca>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
24005380:	6822      	ldr	r2, [r4, #0]
24005382:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
24005386:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
24005388:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400538a:	3301      	adds	r3, #1
2400538c:	e7e5      	b.n	2400535a <HAL_SPI_IRQHandler+0xca>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400538e:	2f05      	cmp	r7, #5
24005390:	d102      	bne.n	24005398 <HAL_SPI_IRQHandler+0x108>
      HAL_SPI_TxRxCpltCallback(hspi);
24005392:	f7ff ff6c 	bl	2400526e <HAL_SPI_TxRxCpltCallback>
24005396:	e792      	b.n	240052be <HAL_SPI_IRQHandler+0x2e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
24005398:	2f04      	cmp	r7, #4
2400539a:	d102      	bne.n	240053a2 <HAL_SPI_IRQHandler+0x112>
      HAL_SPI_RxCpltCallback(hspi);
2400539c:	f7ff ff66 	bl	2400526c <HAL_SPI_RxCpltCallback>
240053a0:	e78d      	b.n	240052be <HAL_SPI_IRQHandler+0x2e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
240053a2:	2f03      	cmp	r7, #3
240053a4:	d18b      	bne.n	240052be <HAL_SPI_IRQHandler+0x2e>
      HAL_SPI_TxCpltCallback(hspi);
240053a6:	f7ff ff60 	bl	2400526a <HAL_SPI_TxCpltCallback>
240053aa:	e788      	b.n	240052be <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
240053ac:	f415 7f58 	tst.w	r5, #864	; 0x360
240053b0:	d085      	beq.n	240052be <HAL_SPI_IRQHandler+0x2e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
240053b2:	0668      	lsls	r0, r5, #25
240053b4:	d50a      	bpl.n	240053cc <HAL_SPI_IRQHandler+0x13c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
240053b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
240053ba:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
240053bc:	f043 0304 	orr.w	r3, r3, #4
240053c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
240053c4:	6993      	ldr	r3, [r2, #24]
240053c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240053ca:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
240053cc:	05a9      	lsls	r1, r5, #22
240053ce:	d50a      	bpl.n	240053e6 <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
240053d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
240053d4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
240053d6:	f043 0301 	orr.w	r3, r3, #1
240053da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
240053de:	6993      	ldr	r3, [r2, #24]
240053e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240053e4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
240053e6:	05ea      	lsls	r2, r5, #23
240053e8:	d50a      	bpl.n	24005400 <HAL_SPI_IRQHandler+0x170>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
240053ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
240053ee:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
240053f0:	f043 0308 	orr.w	r3, r3, #8
240053f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
240053f8:	6993      	ldr	r3, [r2, #24]
240053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240053fe:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
24005400:	06ab      	lsls	r3, r5, #26
24005402:	d50a      	bpl.n	2400541a <HAL_SPI_IRQHandler+0x18a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
24005404:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24005408:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400540e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24005412:	6993      	ldr	r3, [r2, #24]
24005414:	f043 0320 	orr.w	r3, r3, #32
24005418:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400541a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400541e:	2b00      	cmp	r3, #0
24005420:	f43f af4d 	beq.w	240052be <HAL_SPI_IRQHandler+0x2e>
      __HAL_SPI_DISABLE(hspi);
24005424:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
24005426:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400542a:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400542c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
24005430:	f022 0201 	bic.w	r2, r2, #1
24005434:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
24005436:	691a      	ldr	r2, [r3, #16]
24005438:	f422 725a 	bic.w	r2, r2, #872	; 0x368
2400543c:	f022 0203 	bic.w	r2, r2, #3
24005440:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
24005442:	d122      	bne.n	2400548a <HAL_SPI_IRQHandler+0x1fa>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24005444:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
24005446:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24005448:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400544c:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
2400544e:	b150      	cbz	r0, 24005466 <HAL_SPI_IRQHandler+0x1d6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
24005450:	4b10      	ldr	r3, [pc, #64]	; (24005494 <HAL_SPI_IRQHandler+0x204>)
24005452:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
24005454:	f7fc fc32 	bl	24001cbc <HAL_DMA_Abort_IT>
24005458:	b128      	cbz	r0, 24005466 <HAL_SPI_IRQHandler+0x1d6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400545a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24005462:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
24005466:	6fa0      	ldr	r0, [r4, #120]	; 0x78
24005468:	2800      	cmp	r0, #0
2400546a:	f43f af28 	beq.w	240052be <HAL_SPI_IRQHandler+0x2e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400546e:	4b09      	ldr	r3, [pc, #36]	; (24005494 <HAL_SPI_IRQHandler+0x204>)
24005470:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
24005472:	f7fc fc23 	bl	24001cbc <HAL_DMA_Abort_IT>
24005476:	2800      	cmp	r0, #0
24005478:	f43f af21 	beq.w	240052be <HAL_SPI_IRQHandler+0x2e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400547c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24005480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24005484:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
24005488:	e719      	b.n	240052be <HAL_SPI_IRQHandler+0x2e>
        hspi->State = HAL_SPI_STATE_READY;
2400548a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400548c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400548e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
24005492:	e757      	b.n	24005344 <HAL_SPI_IRQHandler+0xb4>
24005494:	24005273 	.word	0x24005273

24005498 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
24005498:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
2400549c:	2b01      	cmp	r3, #1
2400549e:	d133      	bne.n	24005508 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
240054a0:	2302      	movs	r3, #2
240054a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
240054a6:	6803      	ldr	r3, [r0, #0]
240054a8:	68da      	ldr	r2, [r3, #12]
240054aa:	f042 0201 	orr.w	r2, r2, #1
240054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
240054b0:	4a16      	ldr	r2, [pc, #88]	; (2400550c <HAL_TIM_Base_Start_IT+0x74>)
240054b2:	4293      	cmp	r3, r2
240054b4:	d01a      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240054ba:	d017      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
240054c0:	4293      	cmp	r3, r2
240054c2:	d013      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240054c8:	4293      	cmp	r3, r2
240054ca:	d00f      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240054d0:	4293      	cmp	r3, r2
240054d2:	d00b      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
240054d8:	4293      	cmp	r3, r2
240054da:	d007      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054dc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
240054e0:	4293      	cmp	r3, r2
240054e2:	d003      	beq.n	240054ec <HAL_TIM_Base_Start_IT+0x54>
240054e4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
240054e8:	4293      	cmp	r3, r2
240054ea:	d107      	bne.n	240054fc <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
240054ec:	6899      	ldr	r1, [r3, #8]
240054ee:	4a08      	ldr	r2, [pc, #32]	; (24005510 <HAL_TIM_Base_Start_IT+0x78>)
240054f0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
240054f2:	2a06      	cmp	r2, #6
240054f4:	d006      	beq.n	24005504 <HAL_TIM_Base_Start_IT+0x6c>
240054f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
240054fa:	d003      	beq.n	24005504 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
240054fc:	681a      	ldr	r2, [r3, #0]
240054fe:	f042 0201 	orr.w	r2, r2, #1
24005502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
24005504:	2000      	movs	r0, #0
}
24005506:	4770      	bx	lr
    return HAL_ERROR;
24005508:	2001      	movs	r0, #1
2400550a:	4770      	bx	lr
2400550c:	40010000 	.word	0x40010000
24005510:	00010007 	.word	0x00010007

24005514 <HAL_TIM_OC_DelayElapsedCallback>:
24005514:	4770      	bx	lr

24005516 <HAL_TIM_IC_CaptureCallback>:
24005516:	4770      	bx	lr

24005518 <HAL_TIM_PWM_PulseFinishedCallback>:
24005518:	4770      	bx	lr

2400551a <HAL_TIM_TriggerCallback>:
2400551a:	4770      	bx	lr

2400551c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
2400551c:	6803      	ldr	r3, [r0, #0]
2400551e:	691a      	ldr	r2, [r3, #16]
24005520:	0791      	lsls	r1, r2, #30
{
24005522:	b510      	push	{r4, lr}
24005524:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
24005526:	d50f      	bpl.n	24005548 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
24005528:	68da      	ldr	r2, [r3, #12]
2400552a:	0792      	lsls	r2, r2, #30
2400552c:	d50c      	bpl.n	24005548 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
2400552e:	f06f 0202 	mvn.w	r2, #2
24005532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
24005534:	2201      	movs	r2, #1
24005536:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
24005538:	699b      	ldr	r3, [r3, #24]
2400553a:	0799      	lsls	r1, r3, #30
2400553c:	f000 8085 	beq.w	2400564a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
24005540:	f7ff ffe9 	bl	24005516 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24005544:	2300      	movs	r3, #0
24005546:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
24005548:	6823      	ldr	r3, [r4, #0]
2400554a:	691a      	ldr	r2, [r3, #16]
2400554c:	0752      	lsls	r2, r2, #29
2400554e:	d510      	bpl.n	24005572 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
24005550:	68da      	ldr	r2, [r3, #12]
24005552:	0750      	lsls	r0, r2, #29
24005554:	d50d      	bpl.n	24005572 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
24005556:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2400555a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
2400555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
2400555e:	2202      	movs	r2, #2
24005560:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
24005562:	699b      	ldr	r3, [r3, #24]
24005564:	f413 7f40 	tst.w	r3, #768	; 0x300
24005568:	d075      	beq.n	24005656 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
2400556a:	f7ff ffd4 	bl	24005516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
2400556e:	2300      	movs	r3, #0
24005570:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
24005572:	6823      	ldr	r3, [r4, #0]
24005574:	691a      	ldr	r2, [r3, #16]
24005576:	0711      	lsls	r1, r2, #28
24005578:	d50f      	bpl.n	2400559a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
2400557a:	68da      	ldr	r2, [r3, #12]
2400557c:	0712      	lsls	r2, r2, #28
2400557e:	d50c      	bpl.n	2400559a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
24005580:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24005584:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
24005586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
24005588:	2204      	movs	r2, #4
2400558a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
2400558c:	69db      	ldr	r3, [r3, #28]
2400558e:	079b      	lsls	r3, r3, #30
24005590:	d067      	beq.n	24005662 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
24005592:	f7ff ffc0 	bl	24005516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24005596:	2300      	movs	r3, #0
24005598:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
2400559a:	6823      	ldr	r3, [r4, #0]
2400559c:	691a      	ldr	r2, [r3, #16]
2400559e:	06d0      	lsls	r0, r2, #27
240055a0:	d510      	bpl.n	240055c4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
240055a2:	68da      	ldr	r2, [r3, #12]
240055a4:	06d1      	lsls	r1, r2, #27
240055a6:	d50d      	bpl.n	240055c4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
240055a8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
240055ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
240055ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
240055b0:	2208      	movs	r2, #8
240055b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
240055b4:	69db      	ldr	r3, [r3, #28]
240055b6:	f413 7f40 	tst.w	r3, #768	; 0x300
240055ba:	d058      	beq.n	2400566e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
240055bc:	f7ff ffab 	bl	24005516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
240055c0:	2300      	movs	r3, #0
240055c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
240055c4:	6823      	ldr	r3, [r4, #0]
240055c6:	691a      	ldr	r2, [r3, #16]
240055c8:	07d2      	lsls	r2, r2, #31
240055ca:	d508      	bpl.n	240055de <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
240055cc:	68da      	ldr	r2, [r3, #12]
240055ce:	07d0      	lsls	r0, r2, #31
240055d0:	d505      	bpl.n	240055de <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
240055d2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
240055d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
240055d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
240055da:	f7fb fa75 	bl	24000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
240055de:	6823      	ldr	r3, [r4, #0]
240055e0:	691a      	ldr	r2, [r3, #16]
240055e2:	0611      	lsls	r1, r2, #24
240055e4:	d508      	bpl.n	240055f8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
240055e6:	68da      	ldr	r2, [r3, #12]
240055e8:	0612      	lsls	r2, r2, #24
240055ea:	d505      	bpl.n	240055f8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
240055ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
240055f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
240055f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
240055f4:	f000 f9eb 	bl	240059ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
240055f8:	6823      	ldr	r3, [r4, #0]
240055fa:	691a      	ldr	r2, [r3, #16]
240055fc:	05d0      	lsls	r0, r2, #23
240055fe:	d508      	bpl.n	24005612 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
24005600:	68da      	ldr	r2, [r3, #12]
24005602:	0611      	lsls	r1, r2, #24
24005604:	d505      	bpl.n	24005612 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
24005606:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
2400560a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
2400560c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
2400560e:	f000 f9df 	bl	240059d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
24005612:	6823      	ldr	r3, [r4, #0]
24005614:	691a      	ldr	r2, [r3, #16]
24005616:	0652      	lsls	r2, r2, #25
24005618:	d508      	bpl.n	2400562c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
2400561a:	68da      	ldr	r2, [r3, #12]
2400561c:	0650      	lsls	r0, r2, #25
2400561e:	d505      	bpl.n	2400562c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
24005620:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
24005624:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
24005626:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
24005628:	f7ff ff77 	bl	2400551a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
2400562c:	6823      	ldr	r3, [r4, #0]
2400562e:	691a      	ldr	r2, [r3, #16]
24005630:	0691      	lsls	r1, r2, #26
24005632:	d522      	bpl.n	2400567a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
24005634:	68da      	ldr	r2, [r3, #12]
24005636:	0692      	lsls	r2, r2, #26
24005638:	d51f      	bpl.n	2400567a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
2400563a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
2400563e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
24005640:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
24005642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
24005646:	f000 b9c1 	b.w	240059cc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
2400564a:	f7ff ff63 	bl	24005514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
2400564e:	4620      	mov	r0, r4
24005650:	f7ff ff62 	bl	24005518 <HAL_TIM_PWM_PulseFinishedCallback>
24005654:	e776      	b.n	24005544 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
24005656:	f7ff ff5d 	bl	24005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2400565a:	4620      	mov	r0, r4
2400565c:	f7ff ff5c 	bl	24005518 <HAL_TIM_PWM_PulseFinishedCallback>
24005660:	e785      	b.n	2400556e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
24005662:	f7ff ff57 	bl	24005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24005666:	4620      	mov	r0, r4
24005668:	f7ff ff56 	bl	24005518 <HAL_TIM_PWM_PulseFinishedCallback>
2400566c:	e793      	b.n	24005596 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
2400566e:	f7ff ff51 	bl	24005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24005672:	4620      	mov	r0, r4
24005674:	f7ff ff50 	bl	24005518 <HAL_TIM_PWM_PulseFinishedCallback>
24005678:	e7a2      	b.n	240055c0 <HAL_TIM_IRQHandler+0xa4>
}
2400567a:	bd10      	pop	{r4, pc}

2400567c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
2400567c:	4a30      	ldr	r2, [pc, #192]	; (24005740 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
2400567e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
24005680:	4290      	cmp	r0, r2
24005682:	d012      	beq.n	240056aa <TIM_Base_SetConfig+0x2e>
24005684:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24005688:	d00f      	beq.n	240056aa <TIM_Base_SetConfig+0x2e>
2400568a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
2400568e:	4290      	cmp	r0, r2
24005690:	d00b      	beq.n	240056aa <TIM_Base_SetConfig+0x2e>
24005692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
24005696:	4290      	cmp	r0, r2
24005698:	d007      	beq.n	240056aa <TIM_Base_SetConfig+0x2e>
2400569a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400569e:	4290      	cmp	r0, r2
240056a0:	d003      	beq.n	240056aa <TIM_Base_SetConfig+0x2e>
240056a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
240056a6:	4290      	cmp	r0, r2
240056a8:	d119      	bne.n	240056de <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
240056aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
240056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
240056b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
240056b2:	4a23      	ldr	r2, [pc, #140]	; (24005740 <TIM_Base_SetConfig+0xc4>)
240056b4:	4290      	cmp	r0, r2
240056b6:	d01d      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
240056bc:	d01a      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
240056c2:	4290      	cmp	r0, r2
240056c4:	d016      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240056ca:	4290      	cmp	r0, r2
240056cc:	d012      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240056d2:	4290      	cmp	r0, r2
240056d4:	d00e      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
240056da:	4290      	cmp	r0, r2
240056dc:	d00a      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056de:	4a19      	ldr	r2, [pc, #100]	; (24005744 <TIM_Base_SetConfig+0xc8>)
240056e0:	4290      	cmp	r0, r2
240056e2:	d007      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240056e8:	4290      	cmp	r0, r2
240056ea:	d003      	beq.n	240056f4 <TIM_Base_SetConfig+0x78>
240056ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240056f0:	4290      	cmp	r0, r2
240056f2:	d103      	bne.n	240056fc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
240056f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
240056f8:	68ca      	ldr	r2, [r1, #12]
240056fa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
240056fc:	694a      	ldr	r2, [r1, #20]
240056fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005702:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
24005704:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
24005706:	688b      	ldr	r3, [r1, #8]
24005708:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
2400570a:	680b      	ldr	r3, [r1, #0]
2400570c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
2400570e:	4b0c      	ldr	r3, [pc, #48]	; (24005740 <TIM_Base_SetConfig+0xc4>)
24005710:	4298      	cmp	r0, r3
24005712:	d00f      	beq.n	24005734 <TIM_Base_SetConfig+0xb8>
24005714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
24005718:	4298      	cmp	r0, r3
2400571a:	d00b      	beq.n	24005734 <TIM_Base_SetConfig+0xb8>
2400571c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
24005720:	4298      	cmp	r0, r3
24005722:	d007      	beq.n	24005734 <TIM_Base_SetConfig+0xb8>
24005724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
24005728:	4298      	cmp	r0, r3
2400572a:	d003      	beq.n	24005734 <TIM_Base_SetConfig+0xb8>
2400572c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
24005730:	4298      	cmp	r0, r3
24005732:	d101      	bne.n	24005738 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
24005734:	690b      	ldr	r3, [r1, #16]
24005736:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
24005738:	2301      	movs	r3, #1
2400573a:	6143      	str	r3, [r0, #20]
}
2400573c:	4770      	bx	lr
2400573e:	bf00      	nop
24005740:	40010000 	.word	0x40010000
24005744:	40014000 	.word	0x40014000

24005748 <HAL_TIM_Base_Init>:
{
24005748:	b510      	push	{r4, lr}
  if (htim == NULL)
2400574a:	4604      	mov	r4, r0
2400574c:	b350      	cbz	r0, 240057a4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
2400574e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
24005752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24005756:	b91b      	cbnz	r3, 24005760 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
24005758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
2400575c:	f7fb fc00 	bl	24000f60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
24005760:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
24005762:	6820      	ldr	r0, [r4, #0]
24005764:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
24005766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
2400576a:	f7ff ff87 	bl	2400567c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
2400576e:	2301      	movs	r3, #1
  return HAL_OK;
24005770:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
24005772:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
24005776:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
2400577a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
2400577e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
24005782:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
24005786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2400578a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
2400578e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
24005792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
24005796:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
2400579a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
2400579e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
240057a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
240057a4:	2001      	movs	r0, #1
240057a6:	e7fc      	b.n	240057a2 <HAL_TIM_Base_Init+0x5a>

240057a8 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
240057a8:	4311      	orrs	r1, r2
{
240057aa:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
240057ac:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
240057ae:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
240057b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
240057b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
240057b8:	6083      	str	r3, [r0, #8]
}
240057ba:	bd10      	pop	{r4, pc}

240057bc <HAL_TIM_ConfigClockSource>:
{
240057bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
240057be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
240057c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
240057c4:	2b01      	cmp	r3, #1
240057c6:	f04f 0302 	mov.w	r3, #2
240057ca:	f000 80aa 	beq.w	24005922 <HAL_TIM_ConfigClockSource+0x166>
240057ce:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
240057d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
240057d4:	4b54      	ldr	r3, [pc, #336]	; (24005928 <HAL_TIM_ConfigClockSource+0x16c>)
  __HAL_LOCK(htim);
240057d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
240057da:	6800      	ldr	r0, [r0, #0]
240057dc:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
240057de:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
240057e0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
240057e2:	680b      	ldr	r3, [r1, #0]
240057e4:	2b70      	cmp	r3, #112	; 0x70
240057e6:	d056      	beq.n	24005896 <HAL_TIM_ConfigClockSource+0xda>
240057e8:	d83c      	bhi.n	24005864 <HAL_TIM_ConfigClockSource+0xa8>
240057ea:	2b50      	cmp	r3, #80	; 0x50
240057ec:	d067      	beq.n	240058be <HAL_TIM_ConfigClockSource+0x102>
240057ee:	d81d      	bhi.n	2400582c <HAL_TIM_ConfigClockSource+0x70>
240057f0:	2b40      	cmp	r3, #64	; 0x40
240057f2:	d07d      	beq.n	240058f0 <HAL_TIM_ConfigClockSource+0x134>
240057f4:	d806      	bhi.n	24005804 <HAL_TIM_ConfigClockSource+0x48>
240057f6:	2b20      	cmp	r3, #32
240057f8:	d00e      	beq.n	24005818 <HAL_TIM_ConfigClockSource+0x5c>
240057fa:	d80b      	bhi.n	24005814 <HAL_TIM_ConfigClockSource+0x58>
240057fc:	f033 0210 	bics.w	r2, r3, #16
24005800:	d00a      	beq.n	24005818 <HAL_TIM_ConfigClockSource+0x5c>
24005802:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
24005804:	2301      	movs	r3, #1
24005806:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
2400580a:	2300      	movs	r3, #0
2400580c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
24005810:	4610      	mov	r0, r2
24005812:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
24005814:	2b30      	cmp	r3, #48	; 0x30
24005816:	d1f4      	bne.n	24005802 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
24005818:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
2400581a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
2400581e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
24005822:	431a      	orrs	r2, r3
24005824:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
24005828:	6082      	str	r2, [r0, #8]
2400582a:	e03d      	b.n	240058a8 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
2400582c:	2b60      	cmp	r3, #96	; 0x60
2400582e:	d1e9      	bne.n	24005804 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
24005830:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
24005832:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
24005834:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
24005838:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
2400583a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
2400583c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
2400583e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
24005840:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
24005844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
24005848:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
2400584c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
24005850:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
24005852:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
24005854:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
24005856:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
2400585e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
24005862:	e020      	b.n	240058a6 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
24005864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24005868:	d020      	beq.n	240058ac <HAL_TIM_ConfigClockSource+0xf0>
2400586a:	d804      	bhi.n	24005876 <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
2400586c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
24005870:	bf18      	it	ne
24005872:	2201      	movne	r2, #1
24005874:	e7c6      	b.n	24005804 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
24005876:	492d      	ldr	r1, [pc, #180]	; (2400592c <HAL_TIM_ConfigClockSource+0x170>)
24005878:	428b      	cmp	r3, r1
2400587a:	d0cd      	beq.n	24005818 <HAL_TIM_ConfigClockSource+0x5c>
2400587c:	d805      	bhi.n	2400588a <HAL_TIM_ConfigClockSource+0xce>
2400587e:	f023 0110 	bic.w	r1, r3, #16
24005882:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24005886:	d0c7      	beq.n	24005818 <HAL_TIM_ConfigClockSource+0x5c>
24005888:	e7bc      	b.n	24005804 <HAL_TIM_ConfigClockSource+0x48>
2400588a:	4929      	ldr	r1, [pc, #164]	; (24005930 <HAL_TIM_ConfigClockSource+0x174>)
2400588c:	428b      	cmp	r3, r1
2400588e:	d0c3      	beq.n	24005818 <HAL_TIM_ConfigClockSource+0x5c>
24005890:	3110      	adds	r1, #16
24005892:	428b      	cmp	r3, r1
24005894:	e7f7      	b.n	24005886 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
24005896:	68cb      	ldr	r3, [r1, #12]
24005898:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
2400589c:	f7ff ff84 	bl	240057a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
240058a0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
240058a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
240058a6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
240058a8:	2200      	movs	r2, #0
}
240058aa:	e7ab      	b.n	24005804 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
240058ac:	68cb      	ldr	r3, [r1, #12]
240058ae:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
240058b2:	f7ff ff79 	bl	240057a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
240058b6:	6883      	ldr	r3, [r0, #8]
240058b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240058bc:	e7f3      	b.n	240058a6 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
240058be:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
240058c0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
240058c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
240058c4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
240058c6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
240058ca:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
240058ce:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
240058d0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
240058d2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
240058d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
240058d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
240058dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
240058de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
240058e0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
240058e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
240058ea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
240058ee:	e7da      	b.n	240058a6 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
240058f0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
240058f2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
240058f4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
240058f6:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
240058f8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
240058fc:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
24005900:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
24005902:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
24005904:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
24005906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
2400590a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
2400590e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
24005910:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
24005912:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
24005914:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
2400591c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
24005920:	e7c1      	b.n	240058a6 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
24005922:	461a      	mov	r2, r3
24005924:	e774      	b.n	24005810 <HAL_TIM_ConfigClockSource+0x54>
24005926:	bf00      	nop
24005928:	ffce0088 	.word	0xffce0088
2400592c:	00100020 	.word	0x00100020
24005930:	00100030 	.word	0x00100030

24005934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
24005934:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
24005936:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
2400593a:	2b01      	cmp	r3, #1
2400593c:	f04f 0302 	mov.w	r3, #2
24005940:	d03b      	beq.n	240059ba <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
24005942:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
24005946:	4d1e      	ldr	r5, [pc, #120]	; (240059c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
24005948:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
2400594a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
2400594c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
2400594e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
24005950:	d002      	beq.n	24005958 <HAL_TIMEx_MasterConfigSynchronization+0x24>
24005952:	4e1c      	ldr	r6, [pc, #112]	; (240059c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
24005954:	42b3      	cmp	r3, r6
24005956:	d103      	bne.n	24005960 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
24005958:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
2400595c:	684e      	ldr	r6, [r1, #4]
2400595e:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
24005960:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
24005962:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
24005966:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
24005968:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
2400596c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
2400596e:	d019      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
24005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24005974:	d016      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
24005976:	4a14      	ldr	r2, [pc, #80]	; (240059c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
24005978:	4293      	cmp	r3, r2
2400597a:	d013      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
2400597c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
24005980:	4293      	cmp	r3, r2
24005982:	d00f      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
24005984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
24005988:	4293      	cmp	r3, r2
2400598a:	d00b      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
2400598c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
24005990:	4293      	cmp	r3, r2
24005992:	d007      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
24005994:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
24005998:	4293      	cmp	r3, r2
2400599a:	d003      	beq.n	240059a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
2400599c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
240059a0:	4293      	cmp	r3, r2
240059a2:	d104      	bne.n	240059ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
240059a4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
240059a6:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
240059aa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
240059ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
240059ae:	2301      	movs	r3, #1
240059b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
240059b4:	2300      	movs	r3, #0
240059b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
240059ba:	4618      	mov	r0, r3

  return HAL_OK;
}
240059bc:	bd70      	pop	{r4, r5, r6, pc}
240059be:	bf00      	nop
240059c0:	40010000 	.word	0x40010000
240059c4:	40010400 	.word	0x40010400
240059c8:	40000400 	.word	0x40000400

240059cc <HAL_TIMEx_CommutCallback>:
240059cc:	4770      	bx	lr

240059ce <HAL_TIMEx_BreakCallback>:
240059ce:	4770      	bx	lr

240059d0 <HAL_TIMEx_Break2Callback>:
240059d0:	4770      	bx	lr

240059d2 <lv_color_hex>:
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
240059d2:	f3c0 2285 	ubfx	r2, r0, #10, #6
240059d6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
240059da:	f3c0 40c4 	ubfx	r0, r0, #19, #5
240059de:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}

static inline lv_color_t lv_color_hex(uint32_t c)
{
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}
240059e2:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
240059e6:	4770      	bx	lr

240059e8 <startEvent>:

}

static void startEvent(lv_obj_t * obj, lv_event_t event)
{
	switch(event) {
240059e8:	2906      	cmp	r1, #6
	case LV_EVENT_CLICKED:
		analogScreen.testStartBtn = true;
240059ea:	bf02      	ittt	eq
240059ec:	4b02      	ldreq	r3, [pc, #8]	; (240059f8 <startEvent+0x10>)
240059ee:	2201      	moveq	r2, #1
240059f0:	f883 2028 	strbeq.w	r2, [r3, #40]	; 0x28
		break;
	}
}
240059f4:	4770      	bx	lr
240059f6:	bf00      	nop
240059f8:	2402d938 	.word	0x2402d938

240059fc <stopEvent>:

static void stopEvent(lv_obj_t * obj, lv_event_t event)
{
	switch(event) {
240059fc:	2906      	cmp	r1, #6
	case LV_EVENT_CLICKED:
		analogScreen.testStartBtn = false;
240059fe:	bf02      	ittt	eq
24005a00:	4b02      	ldreq	r3, [pc, #8]	; (24005a0c <stopEvent+0x10>)
24005a02:	2200      	moveq	r2, #0
24005a04:	f883 2028 	strbeq.w	r2, [r3, #40]	; 0x28
		break;
	}
}
24005a08:	4770      	bx	lr
24005a0a:	bf00      	nop
24005a0c:	2402d938 	.word	0x2402d938

24005a10 <setPointConfirmEvent>:
	}
}

static void setPointConfirmEvent(lv_obj_t * obj, lv_event_t event)
{
	switch(event) {
24005a10:	2906      	cmp	r1, #6
{
24005a12:	b538      	push	{r3, r4, r5, lr}
	switch(event) {
24005a14:	d114      	bne.n	24005a40 <setPointConfirmEvent+0x30>
	case LV_EVENT_CLICKED:
		lv_label_set_text_fmt(setPointLable, "SET POINT: %02d mA", lv_spinbox_get_value(spinbox));
24005a16:	4b0b      	ldr	r3, [pc, #44]	; (24005a44 <setPointConfirmEvent+0x34>)
24005a18:	4c0b      	ldr	r4, [pc, #44]	; (24005a48 <setPointConfirmEvent+0x38>)
24005a1a:	681d      	ldr	r5, [r3, #0]
24005a1c:	6820      	ldr	r0, [r4, #0]
24005a1e:	f012 fb61 	bl	240180e4 <lv_spinbox_get_value>
24005a22:	490a      	ldr	r1, [pc, #40]	; (24005a4c <setPointConfirmEvent+0x3c>)
24005a24:	4602      	mov	r2, r0
24005a26:	4628      	mov	r0, r5
24005a28:	f011 f86a 	bl	24016b00 <lv_label_set_text_fmt>
		analogScreen.setPoint = lv_spinbox_get_value(spinbox);
24005a2c:	6820      	ldr	r0, [r4, #0]
24005a2e:	f012 fb59 	bl	240180e4 <lv_spinbox_get_value>
24005a32:	ee07 0a90 	vmov	s15, r0
24005a36:	4b06      	ldr	r3, [pc, #24]	; (24005a50 <setPointConfirmEvent+0x40>)
24005a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24005a3c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		break;
	}
}
24005a40:	bd38      	pop	{r3, r4, r5, pc}
24005a42:	bf00      	nop
24005a44:	2402d980 	.word	0x2402d980
24005a48:	2402d98c 	.word	0x2402d98c
24005a4c:	900d650f 	.word	0x900d650f
24005a50:	2402d938 	.word	0x2402d938

24005a54 <spinLeftEvent>:
	switch(event) {
24005a54:	2906      	cmp	r1, #6
24005a56:	d103      	bne.n	24005a60 <spinLeftEvent+0xc>
		lv_spinbox_decrement(spinbox);
24005a58:	4b02      	ldr	r3, [pc, #8]	; (24005a64 <spinLeftEvent+0x10>)
24005a5a:	6818      	ldr	r0, [r3, #0]
24005a5c:	f012 bb68 	b.w	24018130 <lv_spinbox_decrement>
}
24005a60:	4770      	bx	lr
24005a62:	bf00      	nop
24005a64:	2402d98c 	.word	0x2402d98c

24005a68 <spinRightEvent>:
	switch(event) {
24005a68:	2906      	cmp	r1, #6
24005a6a:	d103      	bne.n	24005a74 <spinRightEvent+0xc>
		lv_spinbox_increment(spinbox);
24005a6c:	4b02      	ldr	r3, [pc, #8]	; (24005a78 <spinRightEvent+0x10>)
24005a6e:	6818      	ldr	r0, [r3, #0]
24005a70:	f012 bb3d 	b.w	240180ee <lv_spinbox_increment>
}
24005a74:	4770      	bx	lr
24005a76:	bf00      	nop
24005a78:	2402d98c 	.word	0x2402d98c

24005a7c <IDconfirmEvent>:
	switch(event) {
24005a7c:	2906      	cmp	r1, #6
{
24005a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(event) {
24005a80:	d145      	bne.n	24005b0e <IDconfirmEvent+0x92>
		lv_label_set_text_fmt(ID0Lable, "ID0: %01d", lv_switch_get_state(sw0));
24005a82:	4c23      	ldr	r4, [pc, #140]	; (24005b10 <IDconfirmEvent+0x94>)
24005a84:	4b23      	ldr	r3, [pc, #140]	; (24005b14 <IDconfirmEvent+0x98>)
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_switch_get_state(const lv_obj_t * sw)
{
    return lv_bar_get_value(sw) == 1 ? true : false;
24005a86:	6820      	ldr	r0, [r4, #0]
24005a88:	681d      	ldr	r5, [r3, #0]
24005a8a:	f00d fecd 	bl	24013828 <lv_bar_get_value>
24005a8e:	1e43      	subs	r3, r0, #1
24005a90:	4921      	ldr	r1, [pc, #132]	; (24005b18 <IDconfirmEvent+0x9c>)
24005a92:	4628      	mov	r0, r5
		lv_label_set_text_fmt(ID1Lable, "ID1: %01d", lv_switch_get_state(sw1));
24005a94:	4e21      	ldr	r6, [pc, #132]	; (24005b1c <IDconfirmEvent+0xa0>)
		lv_label_set_text_fmt(ID0Lable, "ID0: %01d", lv_switch_get_state(sw0));
24005a96:	425a      	negs	r2, r3
24005a98:	415a      	adcs	r2, r3
24005a9a:	f011 f831 	bl	24016b00 <lv_label_set_text_fmt>
		lv_label_set_text_fmt(ID1Lable, "ID1: %01d", lv_switch_get_state(sw1));
24005a9e:	4b20      	ldr	r3, [pc, #128]	; (24005b20 <IDconfirmEvent+0xa4>)
24005aa0:	6830      	ldr	r0, [r6, #0]
24005aa2:	681d      	ldr	r5, [r3, #0]
24005aa4:	f00d fec0 	bl	24013828 <lv_bar_get_value>
24005aa8:	1e41      	subs	r1, r0, #1
24005aaa:	4628      	mov	r0, r5
		lv_label_set_text_fmt(ID2Lable, "ID2: %01d", lv_switch_get_state(sw2));
24005aac:	4d1d      	ldr	r5, [pc, #116]	; (24005b24 <IDconfirmEvent+0xa8>)
		lv_label_set_text_fmt(ID1Lable, "ID1: %01d", lv_switch_get_state(sw1));
24005aae:	424a      	negs	r2, r1
24005ab0:	414a      	adcs	r2, r1
24005ab2:	491d      	ldr	r1, [pc, #116]	; (24005b28 <IDconfirmEvent+0xac>)
24005ab4:	f011 f824 	bl	24016b00 <lv_label_set_text_fmt>
		lv_label_set_text_fmt(ID2Lable, "ID2: %01d", lv_switch_get_state(sw2));
24005ab8:	4b1c      	ldr	r3, [pc, #112]	; (24005b2c <IDconfirmEvent+0xb0>)
24005aba:	6828      	ldr	r0, [r5, #0]
24005abc:	681f      	ldr	r7, [r3, #0]
24005abe:	f00d feb3 	bl	24013828 <lv_bar_get_value>
24005ac2:	3801      	subs	r0, #1
24005ac4:	491a      	ldr	r1, [pc, #104]	; (24005b30 <IDconfirmEvent+0xb4>)
24005ac6:	4242      	negs	r2, r0
24005ac8:	4142      	adcs	r2, r0
24005aca:	4638      	mov	r0, r7
24005acc:	f011 f818 	bl	24016b00 <lv_label_set_text_fmt>
24005ad0:	6820      	ldr	r0, [r4, #0]
24005ad2:	f00d fea9 	bl	24013828 <lv_bar_get_value>
24005ad6:	1e47      	subs	r7, r0, #1
		analogScreen.ID0 = lv_switch_get_state(sw0);
24005ad8:	4c16      	ldr	r4, [pc, #88]	; (24005b34 <IDconfirmEvent+0xb8>)
24005ada:	4278      	negs	r0, r7
24005adc:	4178      	adcs	r0, r7
24005ade:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
24005ae2:	6830      	ldr	r0, [r6, #0]
24005ae4:	f00d fea0 	bl	24013828 <lv_bar_get_value>
24005ae8:	f100 3cff 	add.w	ip, r0, #4294967295
24005aec:	f1dc 0000 	rsbs	r0, ip, #0
24005af0:	eb40 000c 	adc.w	r0, r0, ip
24005af4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
24005af8:	6828      	ldr	r0, [r5, #0]
24005afa:	f00d fe95 	bl	24013828 <lv_bar_get_value>
24005afe:	f100 3eff 	add.w	lr, r0, #4294967295
24005b02:	f1de 0000 	rsbs	r0, lr, #0
24005b06:	eb40 000e 	adc.w	r0, r0, lr
24005b0a:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
24005b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24005b10:	2402d990 	.word	0x2402d990
24005b14:	2402d92c 	.word	0x2402d92c
24005b18:	900d6522 	.word	0x900d6522
24005b1c:	2402d994 	.word	0x2402d994
24005b20:	2402d930 	.word	0x2402d930
24005b24:	2402d998 	.word	0x2402d998
24005b28:	900d652c 	.word	0x900d652c
24005b2c:	2402d934 	.word	0x2402d934
24005b30:	900d6536 	.word	0x900d6536
24005b34:	2402d938 	.word	0x2402d938

24005b38 <createAnalogScreen>:
void createAnalogScreen(void){
24005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24005b3c:	ed2d 8b02 	vpush	{d8}
24005b40:	b08b      	sub	sp, #44	; 0x2c
	analogScreen.scale = 1;
24005b42:	f8df b3f4 	ldr.w	fp, [pc, #1012]	; 24005f38 <createAnalogScreen+0x400>
24005b46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005b4a:	4fe6      	ldr	r7, [pc, #920]	; (24005ee4 <createAnalogScreen+0x3ac>)
	analogScreen.window = lv_obj_create(getMainScreen().changeable, NULL);
24005b4c:	a804      	add	r0, sp, #16
24005b4e:	f8df 83ec 	ldr.w	r8, [pc, #1004]	; 24005f3c <createAnalogScreen+0x404>
	analogScreen.scale = 1;
24005b52:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
	analogScreen.window = lv_obj_create(getMainScreen().changeable, NULL);
24005b56:	f001 f937 	bl	24006dc8 <getMainScreen>
24005b5a:	2100      	movs	r1, #0
24005b5c:	9805      	ldr	r0, [sp, #20]
24005b5e:	f002 fbd9 	bl	24008314 <lv_obj_create>
	lv_obj_set_size(analogScreen.window, 680, DISPLAY_HEIGHT);
24005b62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
24005b66:	f44f 712a 	mov.w	r1, #680	; 0x2a8
	analogScreen.window = lv_obj_create(getMainScreen().changeable, NULL);
24005b6a:	f8cb 0000 	str.w	r0, [fp]
	lv_obj_set_size(analogScreen.window, 680, DISPLAY_HEIGHT);
24005b6e:	f002 faff 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_style_local_bg_color(analogScreen.window, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24005b72:	f8db 4000 	ldr.w	r4, [fp]
24005b76:	2000      	movs	r0, #0
24005b78:	2100      	movs	r1, #0
24005b7a:	f7ff ff2a 	bl	240059d2 <lv_color_hex>
24005b7e:	4603      	mov	r3, r0
24005b80:	4620      	mov	r0, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005b82:	4cd9      	ldr	r4, [pc, #868]	; (24005ee8 <createAnalogScreen+0x3b0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005b84:	2229      	movs	r2, #41	; 0x29
	tab4 = lv_tabview_add_tab(analogScreen.tabview, "Result2");
24005b86:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 24005f40 <createAnalogScreen+0x408>
24005b8a:	f003 fa48 	bl	2400901e <_lv_obj_set_style_local_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005b8e:	4620      	mov	r0, r4
24005b90:	2200      	movs	r2, #0
24005b92:	2101      	movs	r1, #1
24005b94:	f004 fde8 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24005b98:	4620      	mov	r0, r4
24005b9a:	2207      	movs	r2, #7
24005b9c:	2130      	movs	r1, #48	; 0x30
24005b9e:	f004 fde3 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24005ba2:	4ad2      	ldr	r2, [pc, #840]	; (24005eec <createAnalogScreen+0x3b4>)
24005ba4:	4620      	mov	r0, r4
24005ba6:	f248 018e 	movw	r1, #32910	; 0x808e
24005baa:	f004 fea5 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_style_set_border_color(&cardtitleStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24005bae:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24005bb2:	f7ff ff0e 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24005bb6:	2139      	movs	r1, #57	; 0x39
24005bb8:	4602      	mov	r2, r0
24005bba:	4620      	mov	r0, r4
24005bbc:	f004 fe16 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&cardtitleStyle, LV_STATE_DEFAULT, lv_color_hex(0x000000ff));
24005bc0:	20ff      	movs	r0, #255	; 0xff
24005bc2:	f7ff ff06 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005bc6:	2129      	movs	r1, #41	; 0x29
24005bc8:	4602      	mov	r2, r0
24005bca:	4620      	mov	r0, r4
24005bcc:	f004 fe0e 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&cardtitleStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ffffffff));
24005bd0:	f04f 30ff 	mov.w	r0, #4294967295
24005bd4:	f7ff fefd 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24005bd8:	f248 0189 	movw	r1, #32905	; 0x8089
24005bdc:	4602      	mov	r2, r0
24005bde:	4620      	mov	r0, r4
24005be0:	f004 fe04 	bl	2400a7ec <_lv_style_set_color>
	cardtitleBtn = lv_btn_create(analogScreen.window, NULL);
24005be4:	2100      	movs	r1, #0
24005be6:	f8db 0000 	ldr.w	r0, [fp]
24005bea:	f00d fe6f 	bl	240138cc <lv_btn_create>
24005bee:	4606      	mov	r6, r0
	lv_obj_set_click(cardtitleBtn, false);
24005bf0:	2100      	movs	r1, #0
	tab5 = lv_tabview_add_tab(analogScreen.tabview, "Result3");
24005bf2:	f8df 9350 	ldr.w	r9, [pc, #848]	; 24005f44 <createAnalogScreen+0x40c>
	lv_obj_set_click(cardtitleBtn, false);
24005bf6:	f002 f860 	bl	24007cba <lv_obj_set_click>
	cardtitleLable = lv_label_create(cardtitleBtn , NULL);
24005bfa:	2100      	movs	r1, #0
24005bfc:	4630      	mov	r0, r6
24005bfe:	f010 fff9 	bl	24016bf4 <lv_label_create>
	lv_obj_add_style(cardtitleBtn, LV_OBJ_PART_MAIN, &cardtitleStyle);
24005c02:	4622      	mov	r2, r4
	cardtitleLable = lv_label_create(cardtitleBtn , NULL);
24005c04:	4605      	mov	r5, r0
	lv_obj_add_style(cardtitleBtn, LV_OBJ_PART_MAIN, &cardtitleStyle);
24005c06:	2100      	movs	r1, #0
24005c08:	4630      	mov	r0, r6
24005c0a:	f003 f9e9 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(cardtitleBtn, 680, 50);
24005c0e:	4630      	mov	r0, r6
24005c10:	2232      	movs	r2, #50	; 0x32
24005c12:	f44f 712a 	mov.w	r1, #680	; 0x2a8
24005c16:	f002 faab 	bl	24008170 <lv_obj_set_size>
	lv_label_set_text_fmt(cardtitleLable,"%5s","Analog Card");
24005c1a:	4628      	mov	r0, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005c1c:	4db4      	ldr	r5, [pc, #720]	; (24005ef0 <createAnalogScreen+0x3b8>)
24005c1e:	4ab5      	ldr	r2, [pc, #724]	; (24005ef4 <createAnalogScreen+0x3bc>)
24005c20:	49b5      	ldr	r1, [pc, #724]	; (24005ef8 <createAnalogScreen+0x3c0>)
24005c22:	f010 ff6d 	bl	24016b00 <lv_label_set_text_fmt>
24005c26:	4628      	mov	r0, r5
24005c28:	2200      	movs	r2, #0
24005c2a:	2101      	movs	r1, #1
24005c2c:	f004 fd9c 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24005c30:	4628      	mov	r0, r5
24005c32:	2207      	movs	r2, #7
24005c34:	2130      	movs	r1, #48	; 0x30
24005c36:	f004 fd97 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24005c3a:	4aac      	ldr	r2, [pc, #688]	; (24005eec <createAnalogScreen+0x3b4>)
24005c3c:	4628      	mov	r0, r5
24005c3e:	f248 018e 	movw	r1, #32910	; 0x808e
24005c42:	f004 fe59 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_style_set_border_color(&tabViewStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24005c46:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24005c4a:	f7ff fec2 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24005c4e:	2139      	movs	r1, #57	; 0x39
24005c50:	4602      	mov	r2, r0
24005c52:	4628      	mov	r0, r5
24005c54:	f004 fdca 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&tabViewStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24005c58:	2000      	movs	r0, #0
24005c5a:	f7ff feba 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005c5e:	2129      	movs	r1, #41	; 0x29
24005c60:	4602      	mov	r2, r0
24005c62:	4628      	mov	r0, r5
24005c64:	f004 fdc2 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&tabViewStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ffffffff));
24005c68:	f04f 30ff 	mov.w	r0, #4294967295
24005c6c:	f7ff feb1 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24005c70:	f248 0189 	movw	r1, #32905	; 0x8089
24005c74:	4602      	mov	r2, r0
24005c76:	4628      	mov	r0, r5
24005c78:	f004 fdb8 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&tabBtnStyle,LV_STATE_DEFAULT, lv_color_hex(0x0000ff00));
24005c7c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
24005c80:	f7ff fea7 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005c84:	2129      	movs	r1, #41	; 0x29
24005c86:	4602      	mov	r2, r0
24005c88:	4638      	mov	r0, r7
24005c8a:	f004 fdaf 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_border_color(&tabBtnStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ffffff));
24005c8e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24005c92:	f7ff fe9e 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24005c96:	2139      	movs	r1, #57	; 0x39
24005c98:	4602      	mov	r2, r0
24005c9a:	4638      	mov	r0, r7
24005c9c:	f004 fda6 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&tabBtnStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24005ca0:	2000      	movs	r0, #0
24005ca2:	f7ff fe96 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24005ca6:	f248 0189 	movw	r1, #32905	; 0x8089
24005caa:	4602      	mov	r2, r0
24005cac:	4638      	mov	r0, r7
24005cae:	f004 fd9d 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005cb2:	4638      	mov	r0, r7
24005cb4:	2200      	movs	r2, #0
24005cb6:	2101      	movs	r1, #1
24005cb8:	f004 fd56 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24005cbc:	2207      	movs	r2, #7
24005cbe:	4638      	mov	r0, r7
24005cc0:	2130      	movs	r1, #48	; 0x30
24005cc2:	f004 fd51 	bl	2400a768 <_lv_style_set_int>
	lv_style_set_bg_color(&tabActiveStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24005cc6:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24005cca:	f7ff fe82 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005cce:	2129      	movs	r1, #41	; 0x29
24005cd0:	4602      	mov	r2, r0
24005cd2:	4640      	mov	r0, r8
24005cd4:	f004 fd8a 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&tabActiveStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24005cd8:	2000      	movs	r0, #0
24005cda:	f7ff fe7a 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24005cde:	f248 0189 	movw	r1, #32905	; 0x8089
24005ce2:	4602      	mov	r2, r0
24005ce4:	4640      	mov	r0, r8
24005ce6:	f004 fd81 	bl	2400a7ec <_lv_style_set_color>
	analogScreen.tabview = lv_tabview_create(analogScreen.window, NULL);
24005cea:	2100      	movs	r1, #0
24005cec:	f8db 0000 	ldr.w	r0, [fp]
24005cf0:	f013 f8d0 	bl	24018e94 <lv_tabview_create>
24005cf4:	4604      	mov	r4, r0
24005cf6:	f8cb 0004 	str.w	r0, [fp, #4]
	lv_obj_set_size(analogScreen.tabview, lv_obj_get_width(cardtitleBtn) , DISPLAY_HEIGHT-lv_obj_get_height(cardtitleBtn));
24005cfa:	4630      	mov	r0, r6
24005cfc:	f002 fc87 	bl	2400860e <lv_obj_get_width>
24005d00:	9003      	str	r0, [sp, #12]
24005d02:	4630      	mov	r0, r6
24005d04:	f002 fc89 	bl	2400861a <lv_obj_get_height>
24005d08:	f5c0 70f0 	rsb	r0, r0, #480	; 0x1e0
24005d0c:	9903      	ldr	r1, [sp, #12]
24005d0e:	b202      	sxth	r2, r0
24005d10:	4620      	mov	r0, r4
	lv_obj_align(analogScreen.tabview, cardtitleBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
24005d12:	2400      	movs	r4, #0
	lv_obj_set_size(analogScreen.tabview, lv_obj_get_width(cardtitleBtn) , DISPLAY_HEIGHT-lv_obj_get_height(cardtitleBtn));
24005d14:	f002 fa2c 	bl	24008170 <lv_obj_set_size>
	lv_obj_align(analogScreen.tabview, cardtitleBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
24005d18:	220c      	movs	r2, #12
24005d1a:	4631      	mov	r1, r6
24005d1c:	4623      	mov	r3, r4
	tab1 = lv_tabview_add_tab(analogScreen.tabview, "Config");
24005d1e:	4e77      	ldr	r6, [pc, #476]	; (24005efc <createAnalogScreen+0x3c4>)
	lv_obj_align(analogScreen.tabview, cardtitleBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
24005d20:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d24:	9400      	str	r4, [sp, #0]
24005d26:	f002 f9e1 	bl	240080ec <lv_obj_align>
	tab1 = lv_tabview_add_tab(analogScreen.tabview, "Config");
24005d2a:	4975      	ldr	r1, [pc, #468]	; (24005f00 <createAnalogScreen+0x3c8>)
24005d2c:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d30:	f012 ff10 	bl	24018b54 <lv_tabview_add_tab>
	tab2 = lv_tabview_add_tab(analogScreen.tabview, "Test");
24005d34:	4973      	ldr	r1, [pc, #460]	; (24005f04 <createAnalogScreen+0x3cc>)
	tab1 = lv_tabview_add_tab(analogScreen.tabview, "Config");
24005d36:	6030      	str	r0, [r6, #0]
	tab2 = lv_tabview_add_tab(analogScreen.tabview, "Test");
24005d38:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d3c:	f012 ff0a 	bl	24018b54 <lv_tabview_add_tab>
24005d40:	4b71      	ldr	r3, [pc, #452]	; (24005f08 <createAnalogScreen+0x3d0>)
	tab3 = lv_tabview_add_tab(analogScreen.tabview, "Result1");
24005d42:	4972      	ldr	r1, [pc, #456]	; (24005f0c <createAnalogScreen+0x3d4>)
	tab2 = lv_tabview_add_tab(analogScreen.tabview, "Test");
24005d44:	6018      	str	r0, [r3, #0]
	tab3 = lv_tabview_add_tab(analogScreen.tabview, "Result1");
24005d46:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d4a:	f012 ff03 	bl	24018b54 <lv_tabview_add_tab>
24005d4e:	4b70      	ldr	r3, [pc, #448]	; (24005f10 <createAnalogScreen+0x3d8>)
	tab4 = lv_tabview_add_tab(analogScreen.tabview, "Result2");
24005d50:	4970      	ldr	r1, [pc, #448]	; (24005f14 <createAnalogScreen+0x3dc>)
	tab3 = lv_tabview_add_tab(analogScreen.tabview, "Result1");
24005d52:	6018      	str	r0, [r3, #0]
	tab4 = lv_tabview_add_tab(analogScreen.tabview, "Result2");
24005d54:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d58:	f012 fefc 	bl	24018b54 <lv_tabview_add_tab>
	tab5 = lv_tabview_add_tab(analogScreen.tabview, "Result3");
24005d5c:	496e      	ldr	r1, [pc, #440]	; (24005f18 <createAnalogScreen+0x3e0>)
	tab4 = lv_tabview_add_tab(analogScreen.tabview, "Result2");
24005d5e:	f8ca 0000 	str.w	r0, [sl]
	tab5 = lv_tabview_add_tab(analogScreen.tabview, "Result3");
24005d62:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d66:	f012 fef5 	bl	24018b54 <lv_tabview_add_tab>
	lv_tabview_set_btns_pos(analogScreen.tabview, LV_TABVIEW_TAB_POS_TOP);
24005d6a:	2101      	movs	r1, #1
	tab5 = lv_tabview_add_tab(analogScreen.tabview, "Result3");
24005d6c:	f8c9 0000 	str.w	r0, [r9]
	lv_tabview_set_btns_pos(analogScreen.tabview, LV_TABVIEW_TAB_POS_TOP);
24005d70:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d74:	f012 ff86 	bl	24018c84 <lv_tabview_set_btns_pos>
	lv_obj_add_style(analogScreen.tabview, LV_TABVIEW_PART_TAB_BG, &tabBtnStyle);
24005d78:	463a      	mov	r2, r7
24005d7a:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d7e:	2141      	movs	r1, #65	; 0x41
24005d80:	f003 f92e 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(analogScreen.tabview, LV_TABVIEW_PART_TAB_BTN, &tabBtnStyle);
24005d84:	463a      	mov	r2, r7
24005d86:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d8a:	2142      	movs	r1, #66	; 0x42
24005d8c:	f003 f928 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(analogScreen.tabview, LV_OBJ_PART_MAIN, &tabViewStyle);
24005d90:	462a      	mov	r2, r5
24005d92:	4621      	mov	r1, r4
24005d94:	f8db 0004 	ldr.w	r0, [fp, #4]
24005d98:	f003 f922 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(analogScreen.tabview, LV_TABVIEW_PART_INDIC, &tabActiveStyle);
24005d9c:	4642      	mov	r2, r8
24005d9e:	f8db 0004 	ldr.w	r0, [fp, #4]
24005da2:	2143      	movs	r1, #67	; 0x43
24005da4:	f003 f91c 	bl	24008fe0 <lv_obj_add_style>
	lv_page_set_scroll_propagation(tab1, false);
24005da8:	4621      	mov	r1, r4
24005daa:	6830      	ldr	r0, [r6, #0]
24005dac:	f011 fb5e 	bl	2401746c <lv_page_set_scroll_propagation>
	lv_page_set_scroll_propagation(tab2, false);
24005db0:	4a55      	ldr	r2, [pc, #340]	; (24005f08 <createAnalogScreen+0x3d0>)
24005db2:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24005db4:	4d59      	ldr	r5, [pc, #356]	; (24005f1c <createAnalogScreen+0x3e4>)
24005db6:	6810      	ldr	r0, [r2, #0]
24005db8:	f011 fb58 	bl	2401746c <lv_page_set_scroll_propagation>
	lv_page_set_scroll_propagation(tab3, false);
24005dbc:	4b54      	ldr	r3, [pc, #336]	; (24005f10 <createAnalogScreen+0x3d8>)
24005dbe:	4621      	mov	r1, r4
24005dc0:	6818      	ldr	r0, [r3, #0]
24005dc2:	f011 fb53 	bl	2401746c <lv_page_set_scroll_propagation>
	lv_page_set_scroll_propagation(tab4, false);
24005dc6:	4621      	mov	r1, r4
24005dc8:	f8da 0000 	ldr.w	r0, [sl]
24005dcc:	f011 fb4e 	bl	2401746c <lv_page_set_scroll_propagation>
	lv_page_set_scroll_propagation(tab5, false);
24005dd0:	4621      	mov	r1, r4
24005dd2:	f8d9 0000 	ldr.w	r0, [r9]
24005dd6:	f011 fb49 	bl	2401746c <lv_page_set_scroll_propagation>
24005dda:	4a51      	ldr	r2, [pc, #324]	; (24005f20 <createAnalogScreen+0x3e8>)
24005ddc:	4628      	mov	r0, r5
24005dde:	f248 018e 	movw	r1, #32910	; 0x808e
24005de2:	f004 fd89 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_obj_t * setPointBtn = lv_btn_create(tab1, NULL);
24005de6:	4621      	mov	r1, r4
24005de8:	6830      	ldr	r0, [r6, #0]
24005dea:	f00d fd6f 	bl	240138cc <lv_btn_create>
	lv_obj_t * btnR = lv_btn_create(tab1, NULL);
24005dee:	4621      	mov	r1, r4
	lv_obj_t * setPointBtn = lv_btn_create(tab1, NULL);
24005df0:	ee08 0a10 	vmov	s16, r0
	lv_obj_t * btnR = lv_btn_create(tab1, NULL);
24005df4:	6830      	ldr	r0, [r6, #0]
24005df6:	f00d fd69 	bl	240138cc <lv_btn_create>
	lv_obj_t * btnL= lv_btn_create(tab1, NULL);
24005dfa:	4621      	mov	r1, r4
	lv_obj_t * btnR = lv_btn_create(tab1, NULL);
24005dfc:	4680      	mov	r8, r0
	lv_obj_t * btnL= lv_btn_create(tab1, NULL);
24005dfe:	6830      	ldr	r0, [r6, #0]
24005e00:	f00d fd64 	bl	240138cc <lv_btn_create>
24005e04:	4607      	mov	r7, r0
	lv_obj_t * lable = lv_label_create(btnR , NULL);
24005e06:	4621      	mov	r1, r4
24005e08:	4640      	mov	r0, r8
24005e0a:	f010 fef3 	bl	24016bf4 <lv_label_create>
	lv_obj_t * lableL = lv_label_create(btnL , NULL);
24005e0e:	4621      	mov	r1, r4
	lv_obj_t * lable = lv_label_create(btnR , NULL);
24005e10:	4682      	mov	sl, r0
	lv_obj_t * lableL = lv_label_create(btnL , NULL);
24005e12:	4638      	mov	r0, r7
24005e14:	f010 feee 	bl	24016bf4 <lv_label_create>
	setPointLable = lv_label_create(setPointBtn , NULL);
24005e18:	4621      	mov	r1, r4
	lv_obj_t * lableL = lv_label_create(btnL , NULL);
24005e1a:	4681      	mov	r9, r0
	setPointLable = lv_label_create(setPointBtn , NULL);
24005e1c:	ee18 0a10 	vmov	r0, s16
24005e20:	f010 fee8 	bl	24016bf4 <lv_label_create>
24005e24:	4b3f      	ldr	r3, [pc, #252]	; (24005f24 <createAnalogScreen+0x3ec>)
	spinbox = lv_spinbox_create(tab1, NULL);
24005e26:	4621      	mov	r1, r4
	setPointLable = lv_label_create(setPointBtn , NULL);
24005e28:	6018      	str	r0, [r3, #0]
	spinbox = lv_spinbox_create(tab1, NULL);
24005e2a:	6830      	ldr	r0, [r6, #0]
24005e2c:	f012 f8cc 	bl	24017fc8 <lv_spinbox_create>
24005e30:	4a3d      	ldr	r2, [pc, #244]	; (24005f28 <createAnalogScreen+0x3f0>)
	lv_obj_add_style(spinbox, LV_OBJ_PART_MAIN, &spinStyle);
24005e32:	4621      	mov	r1, r4
	spinbox = lv_spinbox_create(tab1, NULL);
24005e34:	6010      	str	r0, [r2, #0]
	lv_obj_add_style(spinbox, LV_OBJ_PART_MAIN, &spinStyle);
24005e36:	462a      	mov	r2, r5
24005e38:	f003 f8d2 	bl	24008fe0 <lv_obj_add_style>
	lv_spinbox_set_range(spinbox, 0, 24);
24005e3c:	483a      	ldr	r0, [pc, #232]	; (24005f28 <createAnalogScreen+0x3f0>)
24005e3e:	4621      	mov	r1, r4
24005e40:	2218      	movs	r2, #24
24005e42:	4605      	mov	r5, r0
24005e44:	6800      	ldr	r0, [r0, #0]
24005e46:	f012 f8a0 	bl	24017f8a <lv_spinbox_set_range>
	lv_spinbox_set_digit_format(spinbox, 2, 0);
24005e4a:	4622      	mov	r2, r4
24005e4c:	6828      	ldr	r0, [r5, #0]
24005e4e:	2102      	movs	r1, #2
24005e50:	f012 f850 	bl	24017ef4 <lv_spinbox_set_digit_format>
	lv_spinbox_set_step(spinbox, 1);
24005e54:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005e56:	4d35      	ldr	r5, [pc, #212]	; (24005f2c <createAnalogScreen+0x3f4>)
24005e58:	2101      	movs	r1, #1
24005e5a:	f012 f888 	bl	24017f6e <lv_spinbox_set_step>
24005e5e:	220a      	movs	r2, #10
24005e60:	4628      	mov	r0, r5
24005e62:	2101      	movs	r1, #1
24005e64:	f004 fc80 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24005e68:	4628      	mov	r0, r5
24005e6a:	2202      	movs	r2, #2
24005e6c:	2130      	movs	r1, #48	; 0x30
24005e6e:	f004 fc7b 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24005e72:	4a1e      	ldr	r2, [pc, #120]	; (24005eec <createAnalogScreen+0x3b4>)
24005e74:	4628      	mov	r0, r5
24005e76:	f248 018e 	movw	r1, #32910	; 0x808e
24005e7a:	f004 fd3d 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_style_set_border_color(&spinBtnStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24005e7e:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24005e82:	f7ff fda6 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24005e86:	2139      	movs	r1, #57	; 0x39
24005e88:	4602      	mov	r2, r0
24005e8a:	4628      	mov	r0, r5
24005e8c:	f004 fcae 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&spinBtnStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ffffffff));
24005e90:	f04f 30ff 	mov.w	r0, #4294967295
24005e94:	f7ff fd9d 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24005e98:	f248 0189 	movw	r1, #32905	; 0x8089
24005e9c:	4602      	mov	r2, r0
24005e9e:	4628      	mov	r0, r5
24005ea0:	f004 fca4 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&spinBtnStyle, LV_STATE_DEFAULT, lv_color_hex(0x0029c5f6));
24005ea4:	4822      	ldr	r0, [pc, #136]	; (24005f30 <createAnalogScreen+0x3f8>)
24005ea6:	f7ff fd94 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24005eaa:	2129      	movs	r1, #41	; 0x29
24005eac:	4602      	mov	r2, r0
24005eae:	4628      	mov	r0, r5
24005eb0:	f004 fc9c 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24005eb4:	4628      	mov	r0, r5
24005eb6:	22ff      	movs	r2, #255	; 0xff
24005eb8:	212c      	movs	r1, #44	; 0x2c
24005eba:	f004 fcd9 	bl	2400a870 <_lv_style_set_opa>
	lv_obj_add_style(setPointBtn, LV_OBJ_PART_MAIN, &spinBtnStyle);
24005ebe:	462a      	mov	r2, r5
24005ec0:	4621      	mov	r1, r4
24005ec2:	ee18 0a10 	vmov	r0, s16
24005ec6:	f003 f88b 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text_fmt(setPointLable, "SET POINT: %02d mA",0);
24005eca:	4b16      	ldr	r3, [pc, #88]	; (24005f24 <createAnalogScreen+0x3ec>)
24005ecc:	4622      	mov	r2, r4
24005ece:	4919      	ldr	r1, [pc, #100]	; (24005f34 <createAnalogScreen+0x3fc>)
24005ed0:	6818      	ldr	r0, [r3, #0]
24005ed2:	f010 fe15 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_add_style(btnR, LV_OBJ_PART_MAIN, &spinBtnStyle);
24005ed6:	462a      	mov	r2, r5
24005ed8:	4621      	mov	r1, r4
24005eda:	4640      	mov	r0, r8
24005edc:	f003 f880 	bl	24008fe0 <lv_obj_add_style>
24005ee0:	e032      	b.n	24005f48 <createAnalogScreen+0x410>
24005ee2:	bf00      	nop
24005ee4:	2402d9bc 	.word	0x2402d9bc
24005ee8:	2402d978 	.word	0x2402d978
24005eec:	2401a61c 	.word	0x2401a61c
24005ef0:	2402d9c0 	.word	0x2402d9c0
24005ef4:	900d6540 	.word	0x900d6540
24005ef8:	900d654c 	.word	0x900d654c
24005efc:	2402d9a4 	.word	0x2402d9a4
24005f00:	900d6550 	.word	0x900d6550
24005f04:	900d668d 	.word	0x900d668d
24005f08:	2402d9a8 	.word	0x2402d9a8
24005f0c:	900d6557 	.word	0x900d6557
24005f10:	2402d9ac 	.word	0x2402d9ac
24005f14:	900d655f 	.word	0x900d655f
24005f18:	900d6567 	.word	0x900d6567
24005f1c:	2402d988 	.word	0x2402d988
24005f20:	2401a6b8 	.word	0x2401a6b8
24005f24:	2402d980 	.word	0x2402d980
24005f28:	2402d98c 	.word	0x2402d98c
24005f2c:	2402d984 	.word	0x2402d984
24005f30:	0029c5f6 	.word	0x0029c5f6
24005f34:	900d650f 	.word	0x900d650f
24005f38:	2402d938 	.word	0x2402d938
24005f3c:	2402d9b8 	.word	0x2402d9b8
24005f40:	2402d9b0 	.word	0x2402d9b0
24005f44:	2402d9b4 	.word	0x2402d9b4
	lv_label_set_text(lable, LV_SYMBOL_PLUS);
24005f48:	4650      	mov	r0, sl
24005f4a:	49cb      	ldr	r1, [pc, #812]	; (24006278 <createAnalogScreen+0x740>)
24005f4c:	f010 fd64 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_event_cb(btnR, spinRightEvent);
24005f50:	4640      	mov	r0, r8
24005f52:	49ca      	ldr	r1, [pc, #808]	; (2400627c <createAnalogScreen+0x744>)
24005f54:	f001 fefa 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_add_style(btnL, LV_OBJ_PART_MAIN, &spinBtnStyle);
24005f58:	462a      	mov	r2, r5
24005f5a:	4621      	mov	r1, r4
24005f5c:	4638      	mov	r0, r7
24005f5e:	f003 f83f 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text(lableL, LV_SYMBOL_MINUS);
24005f62:	4648      	mov	r0, r9
24005f64:	49c6      	ldr	r1, [pc, #792]	; (24006280 <createAnalogScreen+0x748>)
24005f66:	f010 fd57 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_event_cb(btnL, spinLeftEvent);
24005f6a:	4638      	mov	r0, r7
24005f6c:	49c5      	ldr	r1, [pc, #788]	; (24006284 <createAnalogScreen+0x74c>)
24005f6e:	f001 feed 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_t * btnSetPointConfirm= lv_btn_create(tab1, NULL);
24005f72:	4621      	mov	r1, r4
24005f74:	6830      	ldr	r0, [r6, #0]
24005f76:	f00d fca9 	bl	240138cc <lv_btn_create>
	lv_obj_t * lableSetPointConfirm = lv_label_create(btnSetPointConfirm , NULL);
24005f7a:	4621      	mov	r1, r4
	lv_obj_t * btnSetPointConfirm= lv_btn_create(tab1, NULL);
24005f7c:	4681      	mov	r9, r0
	lv_obj_t * lableSetPointConfirm = lv_label_create(btnSetPointConfirm , NULL);
24005f7e:	f010 fe39 	bl	24016bf4 <lv_label_create>
24005f82:	4682      	mov	sl, r0
	lv_obj_add_style(btnSetPointConfirm, LV_OBJ_PART_MAIN, &spinBtnStyle);
24005f84:	462a      	mov	r2, r5
24005f86:	4621      	mov	r1, r4
24005f88:	4648      	mov	r0, r9
24005f8a:	f003 f829 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text(lableSetPointConfirm, "Confirm");
24005f8e:	4650      	mov	r0, sl
24005f90:	49bd      	ldr	r1, [pc, #756]	; (24006288 <createAnalogScreen+0x750>)
24005f92:	f010 fd41 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_event_cb(btnSetPointConfirm, setPointConfirmEvent);
24005f96:	4648      	mov	r0, r9
24005f98:	49bc      	ldr	r1, [pc, #752]	; (2400628c <createAnalogScreen+0x754>)
24005f9a:	f001 fed7 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_set_pos(setPointBtn, 50, 70);
24005f9e:	ee18 0a10 	vmov	r0, s16
24005fa2:	2246      	movs	r2, #70	; 0x46
24005fa4:	2132      	movs	r1, #50	; 0x32
24005fa6:	f002 f85e 	bl	24008066 <lv_obj_set_pos>
	lv_obj_set_size(spinbox, 80, h);
24005faa:	48b9      	ldr	r0, [pc, #740]	; (24006290 <createAnalogScreen+0x758>)
24005fac:	2246      	movs	r2, #70	; 0x46
24005fae:	2150      	movs	r1, #80	; 0x50
24005fb0:	6800      	ldr	r0, [r0, #0]
24005fb2:	f002 f8dd 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnR, h, h);
24005fb6:	2246      	movs	r2, #70	; 0x46
24005fb8:	4640      	mov	r0, r8
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24005fba:	f8df a304 	ldr.w	sl, [pc, #772]	; 240062c0 <createAnalogScreen+0x788>
24005fbe:	4611      	mov	r1, r2
24005fc0:	f002 f8d6 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnL, h, h);
24005fc4:	2246      	movs	r2, #70	; 0x46
24005fc6:	4638      	mov	r0, r7
24005fc8:	4611      	mov	r1, r2
24005fca:	f002 f8d1 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(setPointBtn, 230, h);
24005fce:	ee18 0a10 	vmov	r0, s16
24005fd2:	2246      	movs	r2, #70	; 0x46
24005fd4:	21e6      	movs	r1, #230	; 0xe6
24005fd6:	f002 f8cb 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnSetPointConfirm, 2*h, h);
24005fda:	4648      	mov	r0, r9
24005fdc:	2246      	movs	r2, #70	; 0x46
24005fde:	218c      	movs	r1, #140	; 0x8c
24005fe0:	f002 f8c6 	bl	24008170 <lv_obj_set_size>
	lv_obj_align(spinbox, setPointBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 20);
24005fe4:	2114      	movs	r1, #20
24005fe6:	48aa      	ldr	r0, [pc, #680]	; (24006290 <createAnalogScreen+0x758>)
24005fe8:	4623      	mov	r3, r4
24005fea:	9100      	str	r1, [sp, #0]
24005fec:	220d      	movs	r2, #13
24005fee:	ee18 1a10 	vmov	r1, s16
24005ff2:	6800      	ldr	r0, [r0, #0]
24005ff4:	f002 f87a 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnR, spinbox, LV_ALIGN_OUT_RIGHT_MID, 5, 0);
24005ff8:	48a5      	ldr	r0, [pc, #660]	; (24006290 <createAnalogScreen+0x758>)
24005ffa:	9400      	str	r4, [sp, #0]
24005ffc:	2305      	movs	r3, #5
24005ffe:	6801      	ldr	r1, [r0, #0]
24006000:	2213      	movs	r2, #19
24006002:	4640      	mov	r0, r8
24006004:	f002 f872 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnL, spinbox, LV_ALIGN_OUT_LEFT_MID, -5, 0);
24006008:	48a1      	ldr	r0, [pc, #644]	; (24006290 <createAnalogScreen+0x758>)
2400600a:	9400      	str	r4, [sp, #0]
2400600c:	f06f 0304 	mvn.w	r3, #4
24006010:	6801      	ldr	r1, [r0, #0]
24006012:	2210      	movs	r2, #16
24006014:	4638      	mov	r0, r7
24006016:	f002 f869 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnSetPointConfirm, spinbox, LV_ALIGN_OUT_BOTTOM_MID, 0, 20);
2400601a:	2114      	movs	r1, #20
2400601c:	489c      	ldr	r0, [pc, #624]	; (24006290 <createAnalogScreen+0x758>)
2400601e:	4623      	mov	r3, r4
24006020:	220d      	movs	r2, #13
24006022:	9100      	str	r1, [sp, #0]
24006024:	6801      	ldr	r1, [r0, #0]
24006026:	4648      	mov	r0, r9
24006028:	f002 f860 	bl	240080ec <lv_obj_align>
	sw0 = lv_switch_create(tab1, NULL);
2400602c:	4621      	mov	r1, r4
2400602e:	6830      	ldr	r0, [r6, #0]
24006030:	f012 f93e 	bl	240182b0 <lv_switch_create>
24006034:	4a97      	ldr	r2, [pc, #604]	; (24006294 <createAnalogScreen+0x75c>)
	sw1 = lv_switch_create(tab1, NULL);
24006036:	4621      	mov	r1, r4
	sw0 = lv_switch_create(tab1, NULL);
24006038:	6010      	str	r0, [r2, #0]
	sw1 = lv_switch_create(tab1, NULL);
2400603a:	6830      	ldr	r0, [r6, #0]
2400603c:	f012 f938 	bl	240182b0 <lv_switch_create>
24006040:	4995      	ldr	r1, [pc, #596]	; (24006298 <createAnalogScreen+0x760>)
24006042:	6008      	str	r0, [r1, #0]
	sw2 = lv_switch_create(tab1, NULL);
24006044:	4621      	mov	r1, r4
24006046:	6830      	ldr	r0, [r6, #0]
24006048:	f012 f932 	bl	240182b0 <lv_switch_create>
2400604c:	4a93      	ldr	r2, [pc, #588]	; (2400629c <createAnalogScreen+0x764>)
	lv_obj_t * btnID0= lv_btn_create(tab1, NULL);
2400604e:	4621      	mov	r1, r4
	sw2 = lv_switch_create(tab1, NULL);
24006050:	6010      	str	r0, [r2, #0]
	lv_obj_t * btnID0= lv_btn_create(tab1, NULL);
24006052:	6830      	ldr	r0, [r6, #0]
24006054:	f00d fc3a 	bl	240138cc <lv_btn_create>
	lv_obj_t * btnID1= lv_btn_create(tab1, NULL);
24006058:	4621      	mov	r1, r4
	lv_obj_t * btnID0= lv_btn_create(tab1, NULL);
2400605a:	4681      	mov	r9, r0
	lv_obj_t * btnID1= lv_btn_create(tab1, NULL);
2400605c:	6830      	ldr	r0, [r6, #0]
2400605e:	f00d fc35 	bl	240138cc <lv_btn_create>
	lv_obj_t * btnID2= lv_btn_create(tab1, NULL);
24006062:	4621      	mov	r1, r4
	lv_obj_t * btnID1= lv_btn_create(tab1, NULL);
24006064:	4680      	mov	r8, r0
	lv_obj_t * btnID2= lv_btn_create(tab1, NULL);
24006066:	6830      	ldr	r0, [r6, #0]
24006068:	f00d fc30 	bl	240138cc <lv_btn_create>
	lv_obj_t * btnIDconfirm= lv_btn_create(tab1, NULL);
2400606c:	4621      	mov	r1, r4
	lv_obj_t * btnID2= lv_btn_create(tab1, NULL);
2400606e:	4607      	mov	r7, r0
	lv_obj_t * btnIDconfirm= lv_btn_create(tab1, NULL);
24006070:	6830      	ldr	r0, [r6, #0]
24006072:	f00d fc2b 	bl	240138cc <lv_btn_create>
	ID0Lable = lv_label_create(btnID0 , NULL);
24006076:	4621      	mov	r1, r4
	lv_obj_t * btnIDconfirm= lv_btn_create(tab1, NULL);
24006078:	4606      	mov	r6, r0
	ID0Lable = lv_label_create(btnID0 , NULL);
2400607a:	4648      	mov	r0, r9
2400607c:	f010 fdba 	bl	24016bf4 <lv_label_create>
24006080:	4987      	ldr	r1, [pc, #540]	; (240062a0 <createAnalogScreen+0x768>)
24006082:	6008      	str	r0, [r1, #0]
	ID1Lable = lv_label_create(btnID1 , NULL);
24006084:	4621      	mov	r1, r4
24006086:	4640      	mov	r0, r8
24006088:	f010 fdb4 	bl	24016bf4 <lv_label_create>
2400608c:	4985      	ldr	r1, [pc, #532]	; (240062a4 <createAnalogScreen+0x76c>)
2400608e:	6008      	str	r0, [r1, #0]
	ID2Lable = lv_label_create(btnID2 , NULL);
24006090:	4621      	mov	r1, r4
24006092:	4638      	mov	r0, r7
24006094:	f010 fdae 	bl	24016bf4 <lv_label_create>
24006098:	4a83      	ldr	r2, [pc, #524]	; (240062a8 <createAnalogScreen+0x770>)
	lv_obj_t * lableIDconfirm = lv_label_create(btnIDconfirm , NULL);
2400609a:	4621      	mov	r1, r4
	ID2Lable = lv_label_create(btnID2 , NULL);
2400609c:	6010      	str	r0, [r2, #0]
	lv_obj_t * lableIDconfirm = lv_label_create(btnIDconfirm , NULL);
2400609e:	4630      	mov	r0, r6
240060a0:	f010 fda8 	bl	24016bf4 <lv_label_create>
	lv_obj_set_pos(sw0, 400, 40);
240060a4:	4b7b      	ldr	r3, [pc, #492]	; (24006294 <createAnalogScreen+0x75c>)
	lv_obj_t * lableIDconfirm = lv_label_create(btnIDconfirm , NULL);
240060a6:	ee08 0a90 	vmov	s17, r0
	lv_obj_set_pos(sw0, 400, 40);
240060aa:	2228      	movs	r2, #40	; 0x28
240060ac:	6818      	ldr	r0, [r3, #0]
240060ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
240060b2:	f001 ffd8 	bl	24008066 <lv_obj_set_pos>
	lv_obj_set_size(sw0, 110, h-20);
240060b6:	4b77      	ldr	r3, [pc, #476]	; (24006294 <createAnalogScreen+0x75c>)
240060b8:	2232      	movs	r2, #50	; 0x32
240060ba:	216e      	movs	r1, #110	; 0x6e
240060bc:	6818      	ldr	r0, [r3, #0]
240060be:	f002 f857 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(sw1, 110, h-20);
240060c2:	4875      	ldr	r0, [pc, #468]	; (24006298 <createAnalogScreen+0x760>)
240060c4:	2232      	movs	r2, #50	; 0x32
240060c6:	216e      	movs	r1, #110	; 0x6e
240060c8:	6800      	ldr	r0, [r0, #0]
240060ca:	f002 f851 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(sw2, 110, h-20);
240060ce:	4b73      	ldr	r3, [pc, #460]	; (2400629c <createAnalogScreen+0x764>)
240060d0:	2232      	movs	r2, #50	; 0x32
240060d2:	216e      	movs	r1, #110	; 0x6e
240060d4:	6818      	ldr	r0, [r3, #0]
240060d6:	f002 f84b 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnID0, 100, h);
240060da:	4648      	mov	r0, r9
240060dc:	2246      	movs	r2, #70	; 0x46
240060de:	2164      	movs	r1, #100	; 0x64
240060e0:	f002 f846 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnID1, 100, h);
240060e4:	4640      	mov	r0, r8
240060e6:	2246      	movs	r2, #70	; 0x46
240060e8:	2164      	movs	r1, #100	; 0x64
240060ea:	f002 f841 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnID2, 100, h);
240060ee:	4638      	mov	r0, r7
240060f0:	2246      	movs	r2, #70	; 0x46
240060f2:	2164      	movs	r1, #100	; 0x64
240060f4:	f002 f83c 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(btnIDconfirm, 2*h, h);
240060f8:	4630      	mov	r0, r6
240060fa:	2246      	movs	r2, #70	; 0x46
240060fc:	218c      	movs	r1, #140	; 0x8c
240060fe:	f002 f837 	bl	24008170 <lv_obj_set_size>
24006102:	4650      	mov	r0, sl
24006104:	2214      	movs	r2, #20
24006106:	2101      	movs	r1, #1
24006108:	f004 fb2e 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
2400610c:	2202      	movs	r2, #2
2400610e:	4650      	mov	r0, sl
24006110:	2130      	movs	r1, #48	; 0x30
24006112:	f004 fb29 	bl	2400a768 <_lv_style_set_int>
	lv_style_set_border_color(&switchStyle,LV_STATE_DEFAULT, lv_color_hex(0x0000ff00));
24006116:	f44f 407f 	mov.w	r0, #65280	; 0xff00
2400611a:	f7ff fc5a 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2400611e:	2139      	movs	r1, #57	; 0x39
24006120:	4602      	mov	r2, r0
24006122:	4650      	mov	r0, sl
24006124:	f004 fb62 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&switchStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24006128:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
2400612c:	f7ff fc51 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006130:	2129      	movs	r1, #41	; 0x29
24006132:	4602      	mov	r2, r0
24006134:	4650      	mov	r0, sl
24006136:	f004 fb59 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&switchKnobStyle, LV_STATE_DEFAULT, lv_color_hex(0x00FFFF00));
2400613a:	485c      	ldr	r0, [pc, #368]	; (240062ac <createAnalogScreen+0x774>)
2400613c:	f7ff fc49 	bl	240059d2 <lv_color_hex>
24006140:	4b5b      	ldr	r3, [pc, #364]	; (240062b0 <createAnalogScreen+0x778>)
24006142:	4602      	mov	r2, r0
24006144:	2129      	movs	r1, #41	; 0x29
24006146:	4618      	mov	r0, r3
24006148:	f004 fb50 	bl	2400a7ec <_lv_style_set_color>
	lv_obj_add_style(sw0, LV_OBJ_PART_MAIN, &switchStyle);
2400614c:	4b51      	ldr	r3, [pc, #324]	; (24006294 <createAnalogScreen+0x75c>)
2400614e:	4652      	mov	r2, sl
24006150:	4621      	mov	r1, r4
24006152:	6818      	ldr	r0, [r3, #0]
24006154:	f002 ff44 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(sw0, LV_SWITCH_PART_KNOB, &switchKnobStyle);
24006158:	4b55      	ldr	r3, [pc, #340]	; (240062b0 <createAnalogScreen+0x778>)
2400615a:	2102      	movs	r1, #2
2400615c:	461a      	mov	r2, r3
2400615e:	4b4d      	ldr	r3, [pc, #308]	; (24006294 <createAnalogScreen+0x75c>)
24006160:	6818      	ldr	r0, [r3, #0]
24006162:	f002 ff3d 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(sw1, LV_OBJ_PART_MAIN, &switchStyle);
24006166:	484c      	ldr	r0, [pc, #304]	; (24006298 <createAnalogScreen+0x760>)
24006168:	4652      	mov	r2, sl
2400616a:	4621      	mov	r1, r4
2400616c:	6800      	ldr	r0, [r0, #0]
2400616e:	f002 ff37 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(sw1, LV_SWITCH_PART_KNOB, &switchKnobStyle);
24006172:	4b4f      	ldr	r3, [pc, #316]	; (240062b0 <createAnalogScreen+0x778>)
24006174:	4848      	ldr	r0, [pc, #288]	; (24006298 <createAnalogScreen+0x760>)
24006176:	2102      	movs	r1, #2
24006178:	461a      	mov	r2, r3
2400617a:	6800      	ldr	r0, [r0, #0]
2400617c:	f002 ff30 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(sw2, LV_OBJ_PART_MAIN, &switchStyle);
24006180:	4b46      	ldr	r3, [pc, #280]	; (2400629c <createAnalogScreen+0x764>)
24006182:	4652      	mov	r2, sl
24006184:	4621      	mov	r1, r4
24006186:	6818      	ldr	r0, [r3, #0]
24006188:	f002 ff2a 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(sw2, LV_SWITCH_PART_KNOB, &switchKnobStyle);
2400618c:	4b48      	ldr	r3, [pc, #288]	; (240062b0 <createAnalogScreen+0x778>)
2400618e:	2102      	movs	r1, #2
24006190:	461a      	mov	r2, r3
24006192:	4b42      	ldr	r3, [pc, #264]	; (2400629c <createAnalogScreen+0x764>)
24006194:	6818      	ldr	r0, [r3, #0]
24006196:	f002 ff23 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(btnID0, LV_OBJ_PART_MAIN, &spinBtnStyle);
2400619a:	462a      	mov	r2, r5
2400619c:	4621      	mov	r1, r4
2400619e:	4648      	mov	r0, r9
240061a0:	f002 ff1e 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(btnID1, LV_OBJ_PART_MAIN, &spinBtnStyle);
240061a4:	462a      	mov	r2, r5
240061a6:	4621      	mov	r1, r4
240061a8:	4640      	mov	r0, r8
240061aa:	f002 ff19 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(btnID2, LV_OBJ_PART_MAIN, &spinBtnStyle);
240061ae:	462a      	mov	r2, r5
240061b0:	4621      	mov	r1, r4
240061b2:	4638      	mov	r0, r7
240061b4:	f002 ff14 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(btnIDconfirm, LV_OBJ_PART_MAIN, &spinBtnStyle);
240061b8:	462a      	mov	r2, r5
	lv_label_set_text_fmt(ID0Lable, "ID0: %01d", 0);
240061ba:	4d39      	ldr	r5, [pc, #228]	; (240062a0 <createAnalogScreen+0x768>)
	lv_obj_add_style(btnIDconfirm, LV_OBJ_PART_MAIN, &spinBtnStyle);
240061bc:	4621      	mov	r1, r4
240061be:	4630      	mov	r0, r6
240061c0:	f002 ff0e 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text_fmt(ID0Lable, "ID0: %01d", 0);
240061c4:	6828      	ldr	r0, [r5, #0]
	lv_label_set_text_fmt(ID1Lable, "ID1: %01d", 0);
240061c6:	4d37      	ldr	r5, [pc, #220]	; (240062a4 <createAnalogScreen+0x76c>)
	lv_label_set_text_fmt(ID0Lable, "ID0: %01d", 0);
240061c8:	4622      	mov	r2, r4
240061ca:	493a      	ldr	r1, [pc, #232]	; (240062b4 <createAnalogScreen+0x77c>)
240061cc:	f010 fc98 	bl	24016b00 <lv_label_set_text_fmt>
	lv_label_set_text_fmt(ID1Lable, "ID1: %01d", 0);
240061d0:	6828      	ldr	r0, [r5, #0]
	lv_label_set_text_fmt(ID2Lable, "ID2: %01d", 0);
240061d2:	4d35      	ldr	r5, [pc, #212]	; (240062a8 <createAnalogScreen+0x770>)
	lv_label_set_text_fmt(ID1Lable, "ID1: %01d", 0);
240061d4:	4622      	mov	r2, r4
240061d6:	4938      	ldr	r1, [pc, #224]	; (240062b8 <createAnalogScreen+0x780>)
240061d8:	f010 fc92 	bl	24016b00 <lv_label_set_text_fmt>
	lv_label_set_text_fmt(ID2Lable, "ID2: %01d", 0);
240061dc:	4622      	mov	r2, r4
240061de:	6828      	ldr	r0, [r5, #0]
240061e0:	4936      	ldr	r1, [pc, #216]	; (240062bc <createAnalogScreen+0x784>)
240061e2:	f010 fc8d 	bl	24016b00 <lv_label_set_text_fmt>
	lv_label_set_text(lableIDconfirm, "Confirm");
240061e6:	ee18 0a90 	vmov	r0, s17
240061ea:	4927      	ldr	r1, [pc, #156]	; (24006288 <createAnalogScreen+0x750>)
240061ec:	f010 fc14 	bl	24016a18 <lv_label_set_text>
	lv_obj_align(sw1, sw0, LV_ALIGN_OUT_BOTTOM_MID, 0, 20);
240061f0:	4d28      	ldr	r5, [pc, #160]	; (24006294 <createAnalogScreen+0x75c>)
240061f2:	2114      	movs	r1, #20
240061f4:	4828      	ldr	r0, [pc, #160]	; (24006298 <createAnalogScreen+0x760>)
240061f6:	4623      	mov	r3, r4
240061f8:	220d      	movs	r2, #13
240061fa:	9100      	str	r1, [sp, #0]
240061fc:	6829      	ldr	r1, [r5, #0]
240061fe:	6800      	ldr	r0, [r0, #0]
24006200:	f001 ff74 	bl	240080ec <lv_obj_align>
	lv_obj_align(sw2, sw1, LV_ALIGN_OUT_BOTTOM_MID, 0, 20);
24006204:	2214      	movs	r2, #20
24006206:	4924      	ldr	r1, [pc, #144]	; (24006298 <createAnalogScreen+0x760>)
24006208:	4623      	mov	r3, r4
2400620a:	4824      	ldr	r0, [pc, #144]	; (2400629c <createAnalogScreen+0x764>)
2400620c:	9200      	str	r2, [sp, #0]
2400620e:	220d      	movs	r2, #13
24006210:	6809      	ldr	r1, [r1, #0]
24006212:	6800      	ldr	r0, [r0, #0]
24006214:	f001 ff6a 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnID0, sw0, LV_ALIGN_OUT_RIGHT_MID, 20, 0);
24006218:	4648      	mov	r0, r9
2400621a:	9400      	str	r4, [sp, #0]
2400621c:	2314      	movs	r3, #20
2400621e:	6829      	ldr	r1, [r5, #0]
24006220:	2213      	movs	r2, #19
24006222:	f001 ff63 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnID1, sw1, LV_ALIGN_OUT_RIGHT_MID, 20, 0);
24006226:	491c      	ldr	r1, [pc, #112]	; (24006298 <createAnalogScreen+0x760>)
24006228:	4640      	mov	r0, r8
2400622a:	9400      	str	r4, [sp, #0]
2400622c:	2314      	movs	r3, #20
2400622e:	2213      	movs	r2, #19
24006230:	6809      	ldr	r1, [r1, #0]
24006232:	f001 ff5b 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnID2, sw2, LV_ALIGN_OUT_RIGHT_MID, 20, 0);
24006236:	4919      	ldr	r1, [pc, #100]	; (2400629c <createAnalogScreen+0x764>)
24006238:	4638      	mov	r0, r7
2400623a:	9400      	str	r4, [sp, #0]
2400623c:	2314      	movs	r3, #20
2400623e:	2213      	movs	r2, #19
24006240:	6809      	ldr	r1, [r1, #0]
24006242:	f001 ff53 	bl	240080ec <lv_obj_align>
	lv_obj_align(btnIDconfirm, sw2, LV_ALIGN_OUT_BOTTOM_LEFT, 50, 30);
24006246:	231e      	movs	r3, #30
24006248:	4914      	ldr	r1, [pc, #80]	; (2400629c <createAnalogScreen+0x764>)
2400624a:	4630      	mov	r0, r6
2400624c:	9300      	str	r3, [sp, #0]
2400624e:	220c      	movs	r2, #12
24006250:	2332      	movs	r3, #50	; 0x32
24006252:	6809      	ldr	r1, [r1, #0]
24006254:	f001 ff4a 	bl	240080ec <lv_obj_align>
	lv_obj_set_ext_click_area(sw0, 0, 50, 0 ,0);
24006258:	9400      	str	r4, [sp, #0]
2400625a:	6828      	ldr	r0, [r5, #0]
2400625c:	4623      	mov	r3, r4
	lv_obj_set_ext_click_area(sw1, 0, 50, 0 ,0);
2400625e:	4d0e      	ldr	r5, [pc, #56]	; (24006298 <createAnalogScreen+0x760>)
	lv_obj_set_ext_click_area(sw0, 0, 50, 0 ,0);
24006260:	4621      	mov	r1, r4
24006262:	2232      	movs	r2, #50	; 0x32
24006264:	f001 fd15 	bl	24007c92 <lv_obj_set_ext_click_area>
	lv_obj_set_ext_click_area(sw1, 0, 50, 0 ,0);
24006268:	9400      	str	r4, [sp, #0]
2400626a:	6828      	ldr	r0, [r5, #0]
2400626c:	4623      	mov	r3, r4
	lv_obj_set_ext_click_area(sw2, 0, 50, 0 ,0);
2400626e:	4d0b      	ldr	r5, [pc, #44]	; (2400629c <createAnalogScreen+0x764>)
	lv_obj_set_ext_click_area(sw1, 0, 50, 0 ,0);
24006270:	4621      	mov	r1, r4
24006272:	2232      	movs	r2, #50	; 0x32
24006274:	e026      	b.n	240062c4 <createAnalogScreen+0x78c>
24006276:	bf00      	nop
24006278:	900d656f 	.word	0x900d656f
2400627c:	24005a69 	.word	0x24005a69
24006280:	900d6573 	.word	0x900d6573
24006284:	24005a55 	.word	0x24005a55
24006288:	900d6577 	.word	0x900d6577
2400628c:	24005a11 	.word	0x24005a11
24006290:	2402d98c 	.word	0x2402d98c
24006294:	2402d990 	.word	0x2402d990
24006298:	2402d994 	.word	0x2402d994
2400629c:	2402d998 	.word	0x2402d998
240062a0:	2402d92c 	.word	0x2402d92c
240062a4:	2402d930 	.word	0x2402d930
240062a8:	2402d934 	.word	0x2402d934
240062ac:	00ffff00 	.word	0x00ffff00
240062b0:	2402d99c 	.word	0x2402d99c
240062b4:	900d6522 	.word	0x900d6522
240062b8:	900d652c 	.word	0x900d652c
240062bc:	900d6536 	.word	0x900d6536
240062c0:	2402d9a0 	.word	0x2402d9a0
240062c4:	f001 fce5 	bl	24007c92 <lv_obj_set_ext_click_area>
	lv_obj_set_ext_click_area(sw2, 0, 50, 0 ,0);
240062c8:	4623      	mov	r3, r4
240062ca:	2232      	movs	r2, #50	; 0x32
240062cc:	4621      	mov	r1, r4
240062ce:	9400      	str	r4, [sp, #0]
240062d0:	6828      	ldr	r0, [r5, #0]
240062d2:	f001 fcde 	bl	24007c92 <lv_obj_set_ext_click_area>
	lv_obj_set_click(setPointBtn, false);
240062d6:	4621      	mov	r1, r4
240062d8:	ee18 0a10 	vmov	r0, s16
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240062dc:	4de8      	ldr	r5, [pc, #928]	; (24006680 <createAnalogScreen+0xb48>)
240062de:	f001 fcec 	bl	24007cba <lv_obj_set_click>
	lv_obj_set_click(spinbox, false);
240062e2:	48e8      	ldr	r0, [pc, #928]	; (24006684 <createAnalogScreen+0xb4c>)
240062e4:	4621      	mov	r1, r4
240062e6:	6800      	ldr	r0, [r0, #0]
240062e8:	f001 fce7 	bl	24007cba <lv_obj_set_click>
	lv_obj_set_click(btnID0, false);
240062ec:	4621      	mov	r1, r4
240062ee:	4648      	mov	r0, r9
240062f0:	f001 fce3 	bl	24007cba <lv_obj_set_click>
	lv_obj_set_click(btnID1, false);
240062f4:	4621      	mov	r1, r4
240062f6:	4640      	mov	r0, r8
240062f8:	f001 fcdf 	bl	24007cba <lv_obj_set_click>
	lv_obj_set_click(btnID2, false);
240062fc:	4621      	mov	r1, r4
240062fe:	4638      	mov	r0, r7
24006300:	f001 fcdb 	bl	24007cba <lv_obj_set_click>
	lv_obj_set_event_cb(btnIDconfirm, IDconfirmEvent);
24006304:	4630      	mov	r0, r6
24006306:	49e0      	ldr	r1, [pc, #896]	; (24006688 <createAnalogScreen+0xb50>)
24006308:	f001 fd20 	bl	24007d4c <lv_obj_set_event_cb>
2400630c:	4628      	mov	r0, r5
2400630e:	4adf      	ldr	r2, [pc, #892]	; (2400668c <createAnalogScreen+0xb54>)
24006310:	f248 018e 	movw	r1, #32910	; 0x808e
24006314:	f004 faf0 	bl	2400a8f8 <_lv_style_set_ptr>
	btnStart = lv_btn_create(tab2, NULL);
24006318:	4edd      	ldr	r6, [pc, #884]	; (24006690 <createAnalogScreen+0xb58>)
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
2400631a:	4628      	mov	r0, r5
2400631c:	2264      	movs	r2, #100	; 0x64
2400631e:	2101      	movs	r1, #1
24006320:	f004 fa22 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24006324:	2207      	movs	r2, #7
24006326:	4628      	mov	r0, r5
24006328:	2130      	movs	r1, #48	; 0x30
2400632a:	f004 fa1d 	bl	2400a768 <_lv_style_set_int>
2400632e:	4621      	mov	r1, r4
24006330:	6830      	ldr	r0, [r6, #0]
24006332:	f00d facb 	bl	240138cc <lv_btn_create>
	lv_obj_add_style(btnStart, LV_OBJ_PART_MAIN, &btnStyle);
24006336:	462a      	mov	r2, r5
	btnStart = lv_btn_create(tab2, NULL);
24006338:	4607      	mov	r7, r0
	lv_obj_add_style(btnStart, LV_OBJ_PART_MAIN, &btnStyle);
2400633a:	4621      	mov	r1, r4
2400633c:	f002 fe50 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_style_local_bg_color(btnStart, LV_BTN_PART_MAIN , LV_STATE_DEFAULT, lv_color_hex(0x0000ff00));
24006340:	f44f 407f 	mov.w	r0, #65280	; 0xff00
24006344:	f7ff fb45 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006348:	4621      	mov	r1, r4
2400634a:	4603      	mov	r3, r0
2400634c:	2229      	movs	r2, #41	; 0x29
2400634e:	4638      	mov	r0, r7
24006350:	f002 fe65 	bl	2400901e <_lv_obj_set_style_local_color>
	lv_obj_set_pos(btnStart, 15, 15);
24006354:	220f      	movs	r2, #15
24006356:	4638      	mov	r0, r7
24006358:	4611      	mov	r1, r2
2400635a:	f001 fe84 	bl	24008066 <lv_obj_set_pos>
	lv_obj_set_size(btnStart, 50*scale, 50*scale);
2400635e:	2264      	movs	r2, #100	; 0x64
24006360:	4638      	mov	r0, r7
24006362:	4611      	mov	r1, r2
24006364:	f001 ff04 	bl	24008170 <lv_obj_set_size>
	lv_obj_t* btnStartLabel = lv_label_create(btnStart, NULL);
24006368:	4621      	mov	r1, r4
2400636a:	4638      	mov	r0, r7
2400636c:	f010 fc42 	bl	24016bf4 <lv_label_create>
	lv_label_set_text(btnStartLabel, "Test \nStart");
24006370:	49c8      	ldr	r1, [pc, #800]	; (24006694 <createAnalogScreen+0xb5c>)
24006372:	f010 fb51 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_event_cb(btnStart, startEvent);
24006376:	4638      	mov	r0, r7
24006378:	49c7      	ldr	r1, [pc, #796]	; (24006698 <createAnalogScreen+0xb60>)
2400637a:	f001 fce7 	bl	24007d4c <lv_obj_set_event_cb>
	btnStop = lv_btn_create(tab2, NULL);
2400637e:	4621      	mov	r1, r4
24006380:	6830      	ldr	r0, [r6, #0]
24006382:	f00d faa3 	bl	240138cc <lv_btn_create>
	lv_obj_add_style(btnStop, LV_OBJ_PART_MAIN, &btnStyle);
24006386:	462a      	mov	r2, r5
	btnStop = lv_btn_create(tab2, NULL);
24006388:	4606      	mov	r6, r0
	lv_obj_add_style(btnStop, LV_OBJ_PART_MAIN, &btnStyle);
2400638a:	4621      	mov	r1, r4
2400638c:	f002 fe28 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_style_local_bg_color(btnStop, LV_BTN_PART_MAIN , LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24006390:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24006394:	f7ff fb1d 	bl	240059d2 <lv_color_hex>
24006398:	4621      	mov	r1, r4
2400639a:	4603      	mov	r3, r0
2400639c:	2229      	movs	r2, #41	; 0x29
2400639e:	4630      	mov	r0, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240063a0:	4dbe      	ldr	r5, [pc, #760]	; (2400669c <createAnalogScreen+0xb64>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
240063a2:	f002 fe3c 	bl	2400901e <_lv_obj_set_style_local_color>
	lv_obj_align(btnStop, btnStart, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
240063a6:	4623      	mov	r3, r4
240063a8:	4639      	mov	r1, r7
240063aa:	4630      	mov	r0, r6
240063ac:	2212      	movs	r2, #18
240063ae:	9400      	str	r4, [sp, #0]
240063b0:	f001 fe9c 	bl	240080ec <lv_obj_align>
	lv_obj_set_size(btnStop, 50*scale, 50*scale);
240063b4:	2264      	movs	r2, #100	; 0x64
240063b6:	4630      	mov	r0, r6
240063b8:	4611      	mov	r1, r2
240063ba:	f001 fed9 	bl	24008170 <lv_obj_set_size>
	lv_obj_t* btnStopLabel = lv_label_create(btnStop, NULL);
240063be:	4621      	mov	r1, r4
240063c0:	4630      	mov	r0, r6
240063c2:	f010 fc17 	bl	24016bf4 <lv_label_create>
	lv_label_set_text(btnStopLabel, "Test \nStop");
240063c6:	49b6      	ldr	r1, [pc, #728]	; (240066a0 <createAnalogScreen+0xb68>)
240063c8:	f010 fb26 	bl	24016a18 <lv_label_set_text>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240063cc:	4628      	mov	r0, r5
240063ce:	220a      	movs	r2, #10
240063d0:	2101      	movs	r1, #1
240063d2:	f004 f9c9 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240063d6:	2202      	movs	r2, #2
240063d8:	4628      	mov	r0, r5
240063da:	2130      	movs	r1, #48	; 0x30
240063dc:	f004 f9c4 	bl	2400a768 <_lv_style_set_int>
	lv_style_set_border_color(&btn1Style,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
240063e0:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
240063e4:	f7ff faf5 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
240063e8:	2139      	movs	r1, #57	; 0x39
240063ea:	4602      	mov	r2, r0
240063ec:	4628      	mov	r0, r5
240063ee:	f004 f9fd 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&btn1Style, LV_STATE_DEFAULT, lv_color_hex(0x00ffffffff));
240063f2:	f04f 30ff 	mov.w	r0, #4294967295
240063f6:	f7ff faec 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240063fa:	f248 0189 	movw	r1, #32905	; 0x8089
240063fe:	4602      	mov	r2, r0
24006400:	4628      	mov	r0, r5
24006402:	f004 f9f3 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&btn1Style, LV_STATE_DEFAULT, lv_color_hex(0x0029c5f6));
24006406:	48a7      	ldr	r0, [pc, #668]	; (240066a4 <createAnalogScreen+0xb6c>)
24006408:	f7ff fae3 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2400640c:	2129      	movs	r1, #41	; 0x29
2400640e:	4602      	mov	r2, r0
24006410:	4628      	mov	r0, r5
24006412:	f004 f9eb 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24006416:	4628      	mov	r0, r5
24006418:	4aa3      	ldr	r2, [pc, #652]	; (240066a8 <createAnalogScreen+0xb70>)
2400641a:	f248 018e 	movw	r1, #32910	; 0x808e
2400641e:	f004 fa6b 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_obj_t * voltageTestBtn = lv_btn_create(tab2, NULL);
24006422:	4a9b      	ldr	r2, [pc, #620]	; (24006690 <createAnalogScreen+0xb58>)
24006424:	4621      	mov	r1, r4
24006426:	4617      	mov	r7, r2
24006428:	6810      	ldr	r0, [r2, #0]
2400642a:	f00d fa4f 	bl	240138cc <lv_btn_create>
	lv_obj_t * canTestBtn = lv_btn_create(tab2, NULL);
2400642e:	4621      	mov	r1, r4
	lv_obj_t * voltageTestBtn = lv_btn_create(tab2, NULL);
24006430:	4680      	mov	r8, r0
	lv_obj_t * canTestBtn = lv_btn_create(tab2, NULL);
24006432:	6838      	ldr	r0, [r7, #0]
24006434:	f00d fa4a 	bl	240138cc <lv_btn_create>
	lv_obj_t * funcTestBtn = lv_btn_create(tab2, NULL);
24006438:	4a95      	ldr	r2, [pc, #596]	; (24006690 <createAnalogScreen+0xb58>)
	lv_obj_t * canTestBtn = lv_btn_create(tab2, NULL);
2400643a:	4607      	mov	r7, r0
	lv_obj_t * funcTestBtn = lv_btn_create(tab2, NULL);
2400643c:	4621      	mov	r1, r4
2400643e:	6810      	ldr	r0, [r2, #0]
24006440:	f00d fa44 	bl	240138cc <lv_btn_create>
	lv_obj_t * voltageTestLable = lv_label_create(voltageTestBtn , NULL);
24006444:	4621      	mov	r1, r4
	lv_obj_t * funcTestBtn = lv_btn_create(tab2, NULL);
24006446:	4681      	mov	r9, r0
	lv_obj_t * voltageTestLable = lv_label_create(voltageTestBtn , NULL);
24006448:	4640      	mov	r0, r8
2400644a:	f010 fbd3 	bl	24016bf4 <lv_label_create>
	lv_obj_t * canTestTestLable = lv_label_create(canTestBtn , NULL);
2400644e:	4621      	mov	r1, r4
	lv_obj_t * voltageTestLable = lv_label_create(voltageTestBtn , NULL);
24006450:	9003      	str	r0, [sp, #12]
	lv_obj_t * canTestTestLable = lv_label_create(canTestBtn , NULL);
24006452:	4638      	mov	r0, r7
24006454:	f010 fbce 	bl	24016bf4 <lv_label_create>
	lv_obj_t * funcTestLable = lv_label_create(funcTestBtn , NULL);
24006458:	4621      	mov	r1, r4
	lv_obj_t * canTestTestLable = lv_label_create(canTestBtn , NULL);
2400645a:	ee08 0a10 	vmov	s16, r0
	lv_obj_t * funcTestLable = lv_label_create(funcTestBtn , NULL);
2400645e:	4648      	mov	r0, r9
24006460:	f010 fbc8 	bl	24016bf4 <lv_label_create>
	lv_obj_add_style(voltageTestBtn, LV_OBJ_PART_MAIN, &btn1Style);
24006464:	462a      	mov	r2, r5
	lv_obj_t * funcTestLable = lv_label_create(funcTestBtn , NULL);
24006466:	4682      	mov	sl, r0
	lv_obj_add_style(voltageTestBtn, LV_OBJ_PART_MAIN, &btn1Style);
24006468:	4621      	mov	r1, r4
2400646a:	4640      	mov	r0, r8
2400646c:	f002 fdb8 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(canTestBtn, LV_OBJ_PART_MAIN, &btn1Style);
24006470:	462a      	mov	r2, r5
24006472:	4621      	mov	r1, r4
24006474:	4638      	mov	r0, r7
24006476:	f002 fdb3 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(funcTestBtn, LV_OBJ_PART_MAIN, &btn1Style);
2400647a:	462a      	mov	r2, r5
2400647c:	4621      	mov	r1, r4
2400647e:	4648      	mov	r0, r9
24006480:	f002 fdae 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text(voltageTestLable, "Voltage Test");
24006484:	9b03      	ldr	r3, [sp, #12]
24006486:	4989      	ldr	r1, [pc, #548]	; (240066ac <createAnalogScreen+0xb74>)
    lv_obj_align(canTestBtn, voltageTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
24006488:	250a      	movs	r5, #10
	lv_label_set_text(voltageTestLable, "Voltage Test");
2400648a:	4618      	mov	r0, r3
2400648c:	f010 fac4 	bl	24016a18 <lv_label_set_text>
	lv_label_set_text(canTestTestLable, "Can Bus Test");
24006490:	ee18 0a10 	vmov	r0, s16
24006494:	4986      	ldr	r1, [pc, #536]	; (240066b0 <createAnalogScreen+0xb78>)
24006496:	f010 fabf 	bl	24016a18 <lv_label_set_text>
	lv_label_set_text(funcTestLable, "Functionality Test");
2400649a:	4650      	mov	r0, sl
2400649c:	4985      	ldr	r1, [pc, #532]	; (240066b4 <createAnalogScreen+0xb7c>)
2400649e:	f010 fabb 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_size(voltageTestBtn, 300, 60);
240064a2:	4640      	mov	r0, r8
240064a4:	223c      	movs	r2, #60	; 0x3c
240064a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
240064aa:	f001 fe61 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(canTestBtn, 300, 60);
240064ae:	4638      	mov	r0, r7
240064b0:	223c      	movs	r2, #60	; 0x3c
240064b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
240064b6:	f001 fe5b 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(funcTestBtn, 300, 60);
240064ba:	4648      	mov	r0, r9
240064bc:	223c      	movs	r2, #60	; 0x3c
240064be:	f44f 7196 	mov.w	r1, #300	; 0x12c
240064c2:	f001 fe55 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_pos(voltageTestBtn, 220, 100);
240064c6:	4640      	mov	r0, r8
240064c8:	2264      	movs	r2, #100	; 0x64
240064ca:	21dc      	movs	r1, #220	; 0xdc
240064cc:	f001 fdcb 	bl	24008066 <lv_obj_set_pos>
    lv_obj_align(canTestBtn, voltageTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
240064d0:	4623      	mov	r3, r4
240064d2:	4641      	mov	r1, r8
240064d4:	4638      	mov	r0, r7
240064d6:	9500      	str	r5, [sp, #0]
240064d8:	220d      	movs	r2, #13
240064da:	f001 fe07 	bl	240080ec <lv_obj_align>
    lv_obj_align(funcTestBtn, canTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
240064de:	4623      	mov	r3, r4
240064e0:	220d      	movs	r2, #13
240064e2:	4639      	mov	r1, r7
240064e4:	4648      	mov	r0, r9
240064e6:	9500      	str	r5, [sp, #0]
	lv_style_init(&s);
240064e8:	4d73      	ldr	r5, [pc, #460]	; (240066b8 <createAnalogScreen+0xb80>)
    lv_obj_align(funcTestBtn, canTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
240064ea:	f001 fdff 	bl	240080ec <lv_obj_align>
	lv_obj_set_event_cb(btnStop, stopEvent);
240064ee:	4973      	ldr	r1, [pc, #460]	; (240066bc <createAnalogScreen+0xb84>)
240064f0:	4630      	mov	r0, r6
240064f2:	f001 fc2b 	bl	24007d4c <lv_obj_set_event_cb>
	lv_style_init(&s);
240064f6:	4628      	mov	r0, r5
240064f8:	f004 f861 	bl	2400a5be <lv_style_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240064fc:	4622      	mov	r2, r4
240064fe:	4628      	mov	r0, r5
24006500:	2101      	movs	r1, #1
24006502:	f004 f931 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24006506:	4628      	mov	r0, r5
24006508:	2202      	movs	r2, #2
2400650a:	2130      	movs	r1, #48	; 0x30
2400650c:	f004 f92c 	bl	2400a768 <_lv_style_set_int>
24006510:	4628      	mov	r0, r5
24006512:	2202      	movs	r2, #2
24006514:	f44f 7198 	mov.w	r1, #304	; 0x130
24006518:	f004 f926 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
2400651c:	4a68      	ldr	r2, [pc, #416]	; (240066c0 <createAnalogScreen+0xb88>)
2400651e:	4628      	mov	r0, r5
24006520:	f248 018e 	movw	r1, #32910	; 0x808e
24006524:	f004 f9e8 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_style_set_border_color(&s,LV_STATE_DEFAULT, lv_color_hex(0x00FFA500));
24006528:	4866      	ldr	r0, [pc, #408]	; (240066c4 <createAnalogScreen+0xb8c>)
2400652a:	f7ff fa52 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2400652e:	2139      	movs	r1, #57	; 0x39
24006530:	4602      	mov	r2, r0
24006532:	4628      	mov	r0, r5
24006534:	f004 f95a 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_border_color(&s,LV_STATE_CHECKED, lv_color_hex(0x00ff0000));
24006538:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
2400653c:	f7ff fa49 	bl	240059d2 <lv_color_hex>
24006540:	f240 1139 	movw	r1, #313	; 0x139
24006544:	4602      	mov	r2, r0
24006546:	4628      	mov	r0, r5
24006548:	f004 f950 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&s, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
2400654c:	4620      	mov	r0, r4
2400654e:	f7ff fa40 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24006552:	f248 0189 	movw	r1, #32905	; 0x8089
24006556:	4602      	mov	r2, r0
24006558:	4628      	mov	r0, r5
2400655a:	f004 f947 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&s, LV_STATE_CHECKED, lv_color_hex(0x00000000));
2400655e:	4620      	mov	r0, r4
24006560:	f7ff fa37 	bl	240059d2 <lv_color_hex>
24006564:	f248 1189 	movw	r1, #33161	; 0x8189
24006568:	4602      	mov	r2, r0
2400656a:	4628      	mov	r0, r5
2400656c:	f004 f93e 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&s, LV_STATE_DEFAULT, lv_color_hex(0x00ADD8E6));
24006570:	4855      	ldr	r0, [pc, #340]	; (240066c8 <createAnalogScreen+0xb90>)
24006572:	f7ff fa2e 	bl	240059d2 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006576:	2129      	movs	r1, #41	; 0x29
24006578:	4602      	mov	r2, r0
2400657a:	4628      	mov	r0, r5
2400657c:	f004 f936 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&s, LV_STATE_CHECKED, lv_color_hex(0x0000ff00));
24006580:	f44f 407f 	mov.w	r0, #65280	; 0xff00
24006584:	f7ff fa25 	bl	240059d2 <lv_color_hex>
24006588:	f240 1129 	movw	r1, #297	; 0x129
2400658c:	4602      	mov	r2, r0
2400658e:	4628      	mov	r0, r5
24006590:	f004 f92c 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&s, LV_STATE_FOCUSED, lv_color_hex(0x00ff0000));
24006594:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
24006598:	f7ff fa1b 	bl	240059d2 <lv_color_hex>
	lv_obj_t* analogueBtn1 = lv_btn_create(tab3, NULL);
2400659c:	4f4b      	ldr	r7, [pc, #300]	; (240066cc <createAnalogScreen+0xb94>)
	lv_style_set_bg_color(&s, LV_STATE_FOCUSED, lv_color_hex(0x00ff0000));
2400659e:	4602      	mov	r2, r0
240065a0:	f240 2129 	movw	r1, #553	; 0x229
240065a4:	4628      	mov	r0, r5
240065a6:	f004 f921 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
240065aa:	22ff      	movs	r2, #255	; 0xff
240065ac:	4628      	mov	r0, r5
240065ae:	212c      	movs	r1, #44	; 0x2c
240065b0:	f004 f95e 	bl	2400a870 <_lv_style_set_opa>
	lv_obj_t* analogueBtn1 = lv_btn_create(tab3, NULL);
240065b4:	4621      	mov	r1, r4
240065b6:	6838      	ldr	r0, [r7, #0]
240065b8:	f00d f988 	bl	240138cc <lv_btn_create>
240065bc:	4606      	mov	r6, r0
	lv_obj_add_style(analogueBtn1, LV_OBJ_PART_MAIN, &s);
240065be:	462a      	mov	r2, r5
240065c0:	4621      	mov	r1, r4
240065c2:	f002 fd0d 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn1, xSize*scale, ySize*scale);
240065c6:	4630      	mov	r0, r6
240065c8:	2236      	movs	r2, #54	; 0x36
240065ca:	21fc      	movs	r1, #252	; 0xfc
240065cc:	f001 fdd0 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_pos(analogueBtn1, 50*scale, 30*scale);
240065d0:	2236      	movs	r2, #54	; 0x36
240065d2:	4630      	mov	r0, r6
240065d4:	215a      	movs	r1, #90	; 0x5a
240065d6:	f001 fd46 	bl	24008066 <lv_obj_set_pos>
	analogScreen.analogData1 = lv_label_create(analogueBtn1, NULL);
240065da:	4621      	mov	r1, r4
240065dc:	4630      	mov	r0, r6
240065de:	f010 fb09 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData1, "Analog_1:    %03d",0);
240065e2:	4622      	mov	r2, r4
240065e4:	493a      	ldr	r1, [pc, #232]	; (240066d0 <createAnalogScreen+0xb98>)
	analogScreen.analogData1 = lv_label_create(analogueBtn1, NULL);
240065e6:	f8cb 0008 	str.w	r0, [fp, #8]
	lv_label_set_text_fmt(analogScreen.analogData1, "Analog_1:    %03d",0);
240065ea:	f010 fa89 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_t* analogueBtn2 = lv_btn_create(tab3, NULL);
240065ee:	4621      	mov	r1, r4
240065f0:	6838      	ldr	r0, [r7, #0]
240065f2:	f00d f96b 	bl	240138cc <lv_btn_create>
240065f6:	4680      	mov	r8, r0
	lv_obj_add_style(analogueBtn2 , LV_OBJ_PART_MAIN, &s);
240065f8:	462a      	mov	r2, r5
240065fa:	4621      	mov	r1, r4
240065fc:	f002 fcf0 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn2 , xSize*scale, ySize*scale);
24006600:	2236      	movs	r2, #54	; 0x36
24006602:	4640      	mov	r0, r8
24006604:	21fc      	movs	r1, #252	; 0xfc
24006606:	f001 fdb3 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData2 = lv_label_create(analogueBtn2 , NULL);
2400660a:	4621      	mov	r1, r4
2400660c:	4640      	mov	r0, r8
2400660e:	f010 faf1 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData2, "Analog_2:    %03d",0);
24006612:	4622      	mov	r2, r4
24006614:	492f      	ldr	r1, [pc, #188]	; (240066d4 <createAnalogScreen+0xb9c>)
	analogScreen.analogData2 = lv_label_create(analogueBtn2 , NULL);
24006616:	f8cb 000c 	str.w	r0, [fp, #12]
	lv_label_set_text_fmt(analogScreen.analogData2, "Analog_2:    %03d",0);
2400661a:	f010 fa71 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn2, analogueBtn1, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
2400661e:	4623      	mov	r3, r4
24006620:	220c      	movs	r2, #12
24006622:	4631      	mov	r1, r6
24006624:	4640      	mov	r0, r8
24006626:	9400      	str	r4, [sp, #0]
24006628:	f001 fd60 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn3 = lv_btn_create(tab3, NULL);
2400662c:	4621      	mov	r1, r4
2400662e:	6838      	ldr	r0, [r7, #0]
24006630:	f00d f94c 	bl	240138cc <lv_btn_create>
24006634:	4607      	mov	r7, r0
	lv_obj_add_style(analogueBtn3, LV_OBJ_PART_MAIN, &s);
24006636:	462a      	mov	r2, r5
24006638:	4621      	mov	r1, r4
2400663a:	f002 fcd1 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn3, xSize*scale, ySize*scale);
2400663e:	2236      	movs	r2, #54	; 0x36
24006640:	4638      	mov	r0, r7
24006642:	21fc      	movs	r1, #252	; 0xfc
24006644:	f001 fd94 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData3 = lv_label_create(analogueBtn3, NULL);
24006648:	4621      	mov	r1, r4
2400664a:	4638      	mov	r0, r7
2400664c:	f010 fad2 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData3, "Analog_3:    %03d",0);
24006650:	4622      	mov	r2, r4
24006652:	4921      	ldr	r1, [pc, #132]	; (240066d8 <createAnalogScreen+0xba0>)
	analogScreen.analogData3 = lv_label_create(analogueBtn3, NULL);
24006654:	f8cb 0010 	str.w	r0, [fp, #16]
	lv_label_set_text_fmt(analogScreen.analogData3, "Analog_3:    %03d",0);
24006658:	f010 fa52 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn3, analogueBtn2, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
2400665c:	4623      	mov	r3, r4
2400665e:	220c      	movs	r2, #12
24006660:	4641      	mov	r1, r8
24006662:	4638      	mov	r0, r7
24006664:	9400      	str	r4, [sp, #0]
24006666:	f001 fd41 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn4 = lv_btn_create(tab3, NULL);
2400666a:	4b18      	ldr	r3, [pc, #96]	; (240066cc <createAnalogScreen+0xb94>)
2400666c:	4621      	mov	r1, r4
2400666e:	6818      	ldr	r0, [r3, #0]
24006670:	f00d f92c 	bl	240138cc <lv_btn_create>
24006674:	4680      	mov	r8, r0
	lv_obj_add_style(analogueBtn4, LV_OBJ_PART_MAIN, &s);
24006676:	462a      	mov	r2, r5
24006678:	4621      	mov	r1, r4
2400667a:	f002 fcb1 	bl	24008fe0 <lv_obj_add_style>
2400667e:	e02d      	b.n	240066dc <createAnalogScreen+0xba4>
24006680:	2402d974 	.word	0x2402d974
24006684:	2402d98c 	.word	0x2402d98c
24006688:	24005a7d 	.word	0x24005a7d
2400668c:	2401a61c 	.word	0x2401a61c
24006690:	2402d9a8 	.word	0x2402d9a8
24006694:	900d657f 	.word	0x900d657f
24006698:	240059e9 	.word	0x240059e9
2400669c:	2402d970 	.word	0x2402d970
240066a0:	900d658b 	.word	0x900d658b
240066a4:	0029c5f6 	.word	0x0029c5f6
240066a8:	2401a684 	.word	0x2401a684
240066ac:	900d6596 	.word	0x900d6596
240066b0:	900d65a3 	.word	0x900d65a3
240066b4:	900d65b0 	.word	0x900d65b0
240066b8:	2402d97c 	.word	0x2402d97c
240066bc:	240059fd 	.word	0x240059fd
240066c0:	2401a650 	.word	0x2401a650
240066c4:	00ffa500 	.word	0x00ffa500
240066c8:	00add8e6 	.word	0x00add8e6
240066cc:	2402d9ac 	.word	0x2402d9ac
240066d0:	900d65c3 	.word	0x900d65c3
240066d4:	900d65d5 	.word	0x900d65d5
240066d8:	900d65e7 	.word	0x900d65e7
	lv_obj_set_size(analogueBtn4, xSize*scale, ySize*scale);
240066dc:	2236      	movs	r2, #54	; 0x36
240066de:	4640      	mov	r0, r8
240066e0:	21fc      	movs	r1, #252	; 0xfc
240066e2:	f001 fd45 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData4 = lv_label_create(analogueBtn4, NULL);
240066e6:	4621      	mov	r1, r4
240066e8:	4640      	mov	r0, r8
240066ea:	f010 fa83 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData4, "Analog_4:    %03d",0);
240066ee:	4622      	mov	r2, r4
240066f0:	4947      	ldr	r1, [pc, #284]	; (24006810 <createAnalogScreen+0xcd8>)
	analogScreen.analogData4 = lv_label_create(analogueBtn4, NULL);
240066f2:	f8cb 0014 	str.w	r0, [fp, #20]
	lv_label_set_text_fmt(analogScreen.analogData4, "Analog_4:    %03d",0);
240066f6:	f010 fa03 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn4, analogueBtn3, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
240066fa:	4639      	mov	r1, r7
	lv_obj_t* analogueBtn5 = lv_btn_create(tab3, NULL);
240066fc:	4f45      	ldr	r7, [pc, #276]	; (24006814 <createAnalogScreen+0xcdc>)
	lv_obj_align(analogueBtn4, analogueBtn3, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
240066fe:	4623      	mov	r3, r4
24006700:	220c      	movs	r2, #12
24006702:	4640      	mov	r0, r8
24006704:	9400      	str	r4, [sp, #0]
24006706:	f001 fcf1 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn5 = lv_btn_create(tab3, NULL);
2400670a:	4621      	mov	r1, r4
2400670c:	6838      	ldr	r0, [r7, #0]
2400670e:	f00d f8dd 	bl	240138cc <lv_btn_create>
24006712:	4680      	mov	r8, r0
	lv_obj_add_style(analogueBtn5, LV_OBJ_PART_MAIN, &s);
24006714:	462a      	mov	r2, r5
24006716:	4621      	mov	r1, r4
24006718:	f002 fc62 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn5, xSize*scale, ySize*scale);
2400671c:	2236      	movs	r2, #54	; 0x36
2400671e:	4640      	mov	r0, r8
24006720:	21fc      	movs	r1, #252	; 0xfc
24006722:	f001 fd25 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData5 = lv_label_create(analogueBtn5, NULL);
24006726:	4621      	mov	r1, r4
24006728:	4640      	mov	r0, r8
2400672a:	f010 fa63 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData5, "Analog_5:    %03d",0);
2400672e:	4622      	mov	r2, r4
24006730:	4939      	ldr	r1, [pc, #228]	; (24006818 <createAnalogScreen+0xce0>)
	analogScreen.analogData5 = lv_label_create(analogueBtn5, NULL);
24006732:	f8cb 0018 	str.w	r0, [fp, #24]
	lv_label_set_text_fmt(analogScreen.analogData5, "Analog_5:    %03d",0);
24006736:	f010 f9e3 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn5, analogueBtn1, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
2400673a:	4623      	mov	r3, r4
2400673c:	2212      	movs	r2, #18
2400673e:	4631      	mov	r1, r6
24006740:	4640      	mov	r0, r8
24006742:	9400      	str	r4, [sp, #0]
	lv_obj_t* analogueBtn6 = lv_btn_create(tab3, NULL);
24006744:	463e      	mov	r6, r7
	lv_obj_align(analogueBtn5, analogueBtn1, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
24006746:	f001 fcd1 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn6 = lv_btn_create(tab3, NULL);
2400674a:	4621      	mov	r1, r4
2400674c:	6838      	ldr	r0, [r7, #0]
2400674e:	f00d f8bd 	bl	240138cc <lv_btn_create>
24006752:	4607      	mov	r7, r0
	lv_obj_add_style(analogueBtn6, LV_OBJ_PART_MAIN, &s);
24006754:	462a      	mov	r2, r5
24006756:	4621      	mov	r1, r4
24006758:	f002 fc42 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn6, xSize*scale, ySize*scale);
2400675c:	2236      	movs	r2, #54	; 0x36
2400675e:	4638      	mov	r0, r7
24006760:	21fc      	movs	r1, #252	; 0xfc
24006762:	f001 fd05 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData6 = lv_label_create(analogueBtn6, NULL);
24006766:	4621      	mov	r1, r4
24006768:	4638      	mov	r0, r7
2400676a:	f010 fa43 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData6, "Analog_6:    %03d",0);
2400676e:	4622      	mov	r2, r4
24006770:	492a      	ldr	r1, [pc, #168]	; (2400681c <createAnalogScreen+0xce4>)
	analogScreen.analogData6 = lv_label_create(analogueBtn6, NULL);
24006772:	f8cb 001c 	str.w	r0, [fp, #28]
	lv_label_set_text_fmt(analogScreen.analogData6, "Analog_6:    %03d",0);
24006776:	f010 f9c3 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn6, analogueBtn5, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
2400677a:	4623      	mov	r3, r4
2400677c:	220c      	movs	r2, #12
2400677e:	4641      	mov	r1, r8
24006780:	4638      	mov	r0, r7
24006782:	9400      	str	r4, [sp, #0]
24006784:	f001 fcb2 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn7 = lv_btn_create(tab3, NULL);
24006788:	4621      	mov	r1, r4
2400678a:	6830      	ldr	r0, [r6, #0]
2400678c:	f00d f89e 	bl	240138cc <lv_btn_create>
24006790:	4606      	mov	r6, r0
	lv_obj_add_style(analogueBtn7, LV_OBJ_PART_MAIN, &s);
24006792:	462a      	mov	r2, r5
24006794:	4621      	mov	r1, r4
24006796:	f002 fc23 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn7, xSize*scale, ySize*scale);
2400679a:	2236      	movs	r2, #54	; 0x36
2400679c:	4630      	mov	r0, r6
2400679e:	21fc      	movs	r1, #252	; 0xfc
240067a0:	f001 fce6 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData7 = lv_label_create(analogueBtn7, NULL);
240067a4:	4621      	mov	r1, r4
240067a6:	4630      	mov	r0, r6
240067a8:	f010 fa24 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData7, "Analog_7:    %03d",0);
240067ac:	4622      	mov	r2, r4
240067ae:	491c      	ldr	r1, [pc, #112]	; (24006820 <createAnalogScreen+0xce8>)
	analogScreen.analogData7 = lv_label_create(analogueBtn7, NULL);
240067b0:	f8cb 0020 	str.w	r0, [fp, #32]
	lv_label_set_text_fmt(analogScreen.analogData7, "Analog_7:    %03d",0);
240067b4:	f010 f9a4 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn7, analogueBtn6, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
240067b8:	4623      	mov	r3, r4
240067ba:	220c      	movs	r2, #12
240067bc:	4639      	mov	r1, r7
240067be:	4630      	mov	r0, r6
240067c0:	9400      	str	r4, [sp, #0]
240067c2:	f001 fc93 	bl	240080ec <lv_obj_align>
	lv_obj_t* analogueBtn8 = lv_btn_create(tab3, NULL);
240067c6:	4b13      	ldr	r3, [pc, #76]	; (24006814 <createAnalogScreen+0xcdc>)
240067c8:	4621      	mov	r1, r4
240067ca:	6818      	ldr	r0, [r3, #0]
240067cc:	f00d f87e 	bl	240138cc <lv_btn_create>
240067d0:	4607      	mov	r7, r0
	lv_obj_add_style(analogueBtn8, LV_OBJ_PART_MAIN, &s);
240067d2:	462a      	mov	r2, r5
240067d4:	4621      	mov	r1, r4
240067d6:	f002 fc03 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(analogueBtn8, xSize*scale, ySize*scale);
240067da:	2236      	movs	r2, #54	; 0x36
240067dc:	4638      	mov	r0, r7
240067de:	21fc      	movs	r1, #252	; 0xfc
240067e0:	f001 fcc6 	bl	24008170 <lv_obj_set_size>
	analogScreen.analogData8 = lv_label_create(analogueBtn8, NULL);
240067e4:	4621      	mov	r1, r4
240067e6:	4638      	mov	r0, r7
240067e8:	f010 fa04 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(analogScreen.analogData8, "Analog_8:    %03d",0);
240067ec:	4622      	mov	r2, r4
240067ee:	490d      	ldr	r1, [pc, #52]	; (24006824 <createAnalogScreen+0xcec>)
	analogScreen.analogData8 = lv_label_create(analogueBtn8, NULL);
240067f0:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
	lv_label_set_text_fmt(analogScreen.analogData8, "Analog_8:    %03d",0);
240067f4:	f010 f984 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(analogueBtn8, analogueBtn7, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
240067f8:	4623      	mov	r3, r4
240067fa:	220c      	movs	r2, #12
240067fc:	4631      	mov	r1, r6
240067fe:	4638      	mov	r0, r7
24006800:	9400      	str	r4, [sp, #0]
24006802:	f001 fc73 	bl	240080ec <lv_obj_align>
}
24006806:	b00b      	add	sp, #44	; 0x2c
24006808:	ecbd 8b02 	vpop	{d8}
2400680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24006810:	900d65f9 	.word	0x900d65f9
24006814:	2402d9ac 	.word	0x2402d9ac
24006818:	900d660b 	.word	0x900d660b
2400681c:	900d661d 	.word	0x900d661d
24006820:	900d662f 	.word	0x900d662f
24006824:	900d6641 	.word	0x900d6641

24006828 <getAnalogScreen>:

analogScreen_t getAnalogScreen(void){
24006828:	b570      	push	{r4, r5, r6, lr}

	return analogScreen;
2400682a:	4d07      	ldr	r5, [pc, #28]	; (24006848 <getAnalogScreen+0x20>)
analogScreen_t getAnalogScreen(void){
2400682c:	4606      	mov	r6, r0
	return analogScreen;
2400682e:	4604      	mov	r4, r0
24006830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24006832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24006834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24006836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24006838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2400683a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2400683c:	e895 0003 	ldmia.w	r5, {r0, r1}
24006840:	e884 0003 	stmia.w	r4, {r0, r1}
}
24006844:	4630      	mov	r0, r6
24006846:	bd70      	pop	{r4, r5, r6, pc}
24006848:	2402d938 	.word	0x2402d938

2400684c <lv_color_hex>:
    return LV_COLOR_MAKE(r, g, b);
2400684c:	f3c0 2285 	ubfx	r2, r0, #10, #6
24006850:	f3c0 03c4 	ubfx	r3, r0, #3, #5
24006854:	f3c0 40c4 	ubfx	r0, r0, #19, #5
24006858:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}
2400685c:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
24006860:	4770      	bx	lr

24006862 <selectDigitalInTestEvent>:
{
	switch(event) {
	case LV_EVENT_CLICKED:
		break;
	}
}
24006862:	4770      	bx	lr

24006864 <selectAnalogTestEvent>:
	switch(event) {
24006864:	2906      	cmp	r1, #6
{
24006866:	b500      	push	{lr}
24006868:	b08f      	sub	sp, #60	; 0x3c
	switch(event) {
2400686a:	d108      	bne.n	2400687e <selectAnalogTestEvent+0x1a>
		lv_obj_move_foreground(getAnalogScreen().window);
2400686c:	4668      	mov	r0, sp
2400686e:	f7ff ffdb 	bl	24006828 <getAnalogScreen>
24006872:	9800      	ldr	r0, [sp, #0]
}
24006874:	b00f      	add	sp, #60	; 0x3c
24006876:	f85d eb04 	ldr.w	lr, [sp], #4
		lv_obj_move_foreground(getAnalogScreen().window);
2400687a:	f001 bbd7 	b.w	2400802c <lv_obj_move_foreground>
}
2400687e:	b00f      	add	sp, #60	; 0x3c
24006880:	f85d fb04 	ldr.w	pc, [sp], #4

24006884 <selectDigitalOutTestEvent>:
24006884:	4770      	bx	lr
	...

24006888 <createHomeScreen>:
void createHomeScreen(void){
24006888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400688c:	b088      	sub	sp, #32
	homeScreen.window = lv_obj_create(getMainScreen().changeable, NULL);
2400688e:	4f86      	ldr	r7, [pc, #536]	; (24006aa8 <createHomeScreen+0x220>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24006890:	4c86      	ldr	r4, [pc, #536]	; (24006aac <createHomeScreen+0x224>)
24006892:	a802      	add	r0, sp, #8
24006894:	f000 fa98 	bl	24006dc8 <getMainScreen>
24006898:	2100      	movs	r1, #0
2400689a:	9803      	ldr	r0, [sp, #12]
2400689c:	f001 fd3a 	bl	24008314 <lv_obj_create>
	lv_obj_set_size(homeScreen.window, 680, DISPLAY_HEIGHT);
240068a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
240068a4:	f44f 712a 	mov.w	r1, #680	; 0x2a8
	homeScreen.window = lv_obj_create(getMainScreen().changeable, NULL);
240068a8:	6038      	str	r0, [r7, #0]
	lv_obj_set_size(homeScreen.window, 680, DISPLAY_HEIGHT);
240068aa:	f001 fc61 	bl	24008170 <lv_obj_set_size>
	lv_style_set_border_color(&windowStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
240068ae:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
240068b2:	f7ff ffcb 	bl	2400684c <lv_color_hex>
240068b6:	2139      	movs	r1, #57	; 0x39
240068b8:	4602      	mov	r2, r0
240068ba:	4620      	mov	r0, r4
240068bc:	f003 ff96 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&windowStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
240068c0:	2000      	movs	r0, #0
240068c2:	f7ff ffc3 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
240068c6:	2129      	movs	r1, #41	; 0x29
240068c8:	4602      	mov	r2, r0
240068ca:	4620      	mov	r0, r4
240068cc:	f003 ff8e 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240068d0:	4620      	mov	r0, r4
240068d2:	2207      	movs	r2, #7
240068d4:	2130      	movs	r1, #48	; 0x30
240068d6:	f003 ff47 	bl	2400a768 <_lv_style_set_int>
	lv_obj_add_style(homeScreen.window, LV_OBJ_PART_MAIN, &windowStyle);
240068da:	4622      	mov	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240068dc:	4c74      	ldr	r4, [pc, #464]	; (24006ab0 <createHomeScreen+0x228>)
240068de:	2100      	movs	r1, #0
240068e0:	6838      	ldr	r0, [r7, #0]
240068e2:	f002 fb7d 	bl	24008fe0 <lv_obj_add_style>
240068e6:	4620      	mov	r0, r4
240068e8:	2200      	movs	r2, #0
240068ea:	2101      	movs	r1, #1
240068ec:	f003 ff3c 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240068f0:	4620      	mov	r0, r4
240068f2:	2207      	movs	r2, #7
240068f4:	2130      	movs	r1, #48	; 0x30
240068f6:	f003 ff37 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240068fa:	4a6e      	ldr	r2, [pc, #440]	; (24006ab4 <createHomeScreen+0x22c>)
240068fc:	4620      	mov	r0, r4
240068fe:	f248 018e 	movw	r1, #32910	; 0x808e
24006902:	f003 fff9 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_style_set_border_color(&cardtitleStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ff0000));
24006906:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
2400690a:	f7ff ff9f 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2400690e:	2139      	movs	r1, #57	; 0x39
24006910:	4602      	mov	r2, r0
24006912:	4620      	mov	r0, r4
24006914:	f003 ff6a 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&cardtitleStyle, LV_STATE_DEFAULT, lv_color_hex(0x000000ff));
24006918:	20ff      	movs	r0, #255	; 0xff
2400691a:	f7ff ff97 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2400691e:	2129      	movs	r1, #41	; 0x29
24006920:	4602      	mov	r2, r0
24006922:	4620      	mov	r0, r4
24006924:	f003 ff62 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_text_color(&cardtitleStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ffffffff));
24006928:	f04f 30ff 	mov.w	r0, #4294967295
2400692c:	f7ff ff8e 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24006930:	f248 0189 	movw	r1, #32905	; 0x8089
24006934:	4602      	mov	r2, r0
24006936:	4620      	mov	r0, r4
24006938:	f003 ff58 	bl	2400a7ec <_lv_style_set_color>
	cardtitleBtn = lv_btn_create(homeScreen.window, NULL);
2400693c:	2100      	movs	r1, #0
2400693e:	6838      	ldr	r0, [r7, #0]
24006940:	f00c ffc4 	bl	240138cc <lv_btn_create>
24006944:	4605      	mov	r5, r0
	lv_obj_set_click(cardtitleBtn, false);
24006946:	2100      	movs	r1, #0
24006948:	f001 f9b7 	bl	24007cba <lv_obj_set_click>
	cardtitleLable = lv_label_create(cardtitleBtn , NULL);
2400694c:	2100      	movs	r1, #0
2400694e:	4628      	mov	r0, r5
24006950:	f010 f950 	bl	24016bf4 <lv_label_create>
	lv_obj_add_style(cardtitleBtn, LV_OBJ_PART_MAIN, &cardtitleStyle);
24006954:	4622      	mov	r2, r4
	cardtitleLable = lv_label_create(cardtitleBtn , NULL);
24006956:	4606      	mov	r6, r0
	lv_obj_add_style(cardtitleBtn, LV_OBJ_PART_MAIN, &cardtitleStyle);
24006958:	2100      	movs	r1, #0
2400695a:	4628      	mov	r0, r5
2400695c:	4c56      	ldr	r4, [pc, #344]	; (24006ab8 <createHomeScreen+0x230>)
2400695e:	f002 fb3f 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_set_size(cardtitleBtn, 680, 50);
24006962:	4628      	mov	r0, r5
24006964:	2232      	movs	r2, #50	; 0x32
24006966:	f44f 712a 	mov.w	r1, #680	; 0x2a8
2400696a:	f001 fc01 	bl	24008170 <lv_obj_set_size>
	lv_label_set_text_fmt(cardtitleLable,"%5s","Home");
2400696e:	4a53      	ldr	r2, [pc, #332]	; (24006abc <createHomeScreen+0x234>)
24006970:	4630      	mov	r0, r6
24006972:	4953      	ldr	r1, [pc, #332]	; (24006ac0 <createHomeScreen+0x238>)
24006974:	f010 f8c4 	bl	24016b00 <lv_label_set_text_fmt>
	lv_style_set_text_color(&btnStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24006978:	2000      	movs	r0, #0
2400697a:	f7ff ff67 	bl	2400684c <lv_color_hex>
2400697e:	f248 0189 	movw	r1, #32905	; 0x8089
24006982:	4602      	mov	r2, r0
24006984:	4620      	mov	r0, r4
24006986:	f003 ff31 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&btnStyle, LV_STATE_DEFAULT, lv_color_hex(0x00FFFF00));
2400698a:	484e      	ldr	r0, [pc, #312]	; (24006ac4 <createHomeScreen+0x23c>)
2400698c:	f7ff ff5e 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006990:	2129      	movs	r1, #41	; 0x29
24006992:	4602      	mov	r2, r0
24006994:	4620      	mov	r0, r4
24006996:	f003 ff29 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_border_color(&btnStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ffffff));
2400699a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
2400699e:	f7ff ff55 	bl	2400684c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
240069a2:	2139      	movs	r1, #57	; 0x39
240069a4:	4602      	mov	r2, r0
240069a6:	4620      	mov	r0, r4
240069a8:	f003 ff20 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240069ac:	4620      	mov	r0, r4
240069ae:	2214      	movs	r2, #20
240069b0:	2101      	movs	r1, #1
240069b2:	f003 fed9 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240069b6:	4620      	mov	r0, r4
240069b8:	2205      	movs	r2, #5
240069ba:	2130      	movs	r1, #48	; 0x30
240069bc:	f003 fed4 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240069c0:	4a41      	ldr	r2, [pc, #260]	; (24006ac8 <createHomeScreen+0x240>)
240069c2:	4620      	mov	r0, r4
240069c4:	f248 018e 	movw	r1, #32910	; 0x808e
240069c8:	f003 ff96 	bl	2400a8f8 <_lv_style_set_ptr>
	lv_obj_t * selectAnalogTestBtn = lv_btn_create(homeScreen.window, NULL);
240069cc:	2100      	movs	r1, #0
240069ce:	6838      	ldr	r0, [r7, #0]
240069d0:	f00c ff7c 	bl	240138cc <lv_btn_create>
	lv_obj_t * selectDigitalInTestBtn = lv_btn_create(homeScreen.window, NULL);
240069d4:	2100      	movs	r1, #0
	lv_obj_t * selectAnalogTestBtn = lv_btn_create(homeScreen.window, NULL);
240069d6:	4606      	mov	r6, r0
	lv_obj_t * selectDigitalInTestBtn = lv_btn_create(homeScreen.window, NULL);
240069d8:	6838      	ldr	r0, [r7, #0]
240069da:	f00c ff77 	bl	240138cc <lv_btn_create>
	lv_obj_t * selectDigitalOutTestBtn = lv_btn_create(homeScreen.window, NULL);
240069de:	2100      	movs	r1, #0
	lv_obj_t * selectDigitalInTestBtn = lv_btn_create(homeScreen.window, NULL);
240069e0:	4605      	mov	r5, r0
	lv_obj_t * selectDigitalOutTestBtn = lv_btn_create(homeScreen.window, NULL);
240069e2:	6838      	ldr	r0, [r7, #0]
240069e4:	f00c ff72 	bl	240138cc <lv_btn_create>
	lv_obj_t * selectAnalogTestLable = lv_label_create(selectAnalogTestBtn , NULL);
240069e8:	2100      	movs	r1, #0
	lv_obj_t * selectDigitalOutTestBtn = lv_btn_create(homeScreen.window, NULL);
240069ea:	4607      	mov	r7, r0
	lv_obj_t * selectAnalogTestLable = lv_label_create(selectAnalogTestBtn , NULL);
240069ec:	4630      	mov	r0, r6
240069ee:	f010 f901 	bl	24016bf4 <lv_label_create>
	lv_obj_t * selectDigitalInTestLable = lv_label_create(selectDigitalInTestBtn , NULL);
240069f2:	2100      	movs	r1, #0
	lv_obj_t * selectAnalogTestLable = lv_label_create(selectAnalogTestBtn , NULL);
240069f4:	4682      	mov	sl, r0
	lv_obj_t * selectDigitalInTestLable = lv_label_create(selectDigitalInTestBtn , NULL);
240069f6:	4628      	mov	r0, r5
240069f8:	f010 f8fc 	bl	24016bf4 <lv_label_create>
	lv_obj_t * selectDigitalOutTestLable = lv_label_create(selectDigitalOutTestBtn , NULL);
240069fc:	2100      	movs	r1, #0
	lv_obj_t * selectDigitalInTestLable = lv_label_create(selectDigitalInTestBtn , NULL);
240069fe:	4681      	mov	r9, r0
	lv_obj_t * selectDigitalOutTestLable = lv_label_create(selectDigitalOutTestBtn , NULL);
24006a00:	4638      	mov	r0, r7
24006a02:	f010 f8f7 	bl	24016bf4 <lv_label_create>
	lv_obj_add_style(selectAnalogTestBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006a06:	4622      	mov	r2, r4
	lv_obj_t * selectDigitalOutTestLable = lv_label_create(selectDigitalOutTestBtn , NULL);
24006a08:	4680      	mov	r8, r0
	lv_obj_add_style(selectAnalogTestBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006a0a:	2100      	movs	r1, #0
24006a0c:	4630      	mov	r0, r6
24006a0e:	f002 fae7 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(selectDigitalInTestBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006a12:	4622      	mov	r2, r4
24006a14:	4628      	mov	r0, r5
24006a16:	2100      	movs	r1, #0
24006a18:	f002 fae2 	bl	24008fe0 <lv_obj_add_style>
	lv_obj_add_style(selectDigitalOutTestBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006a1c:	4622      	mov	r2, r4
24006a1e:	4638      	mov	r0, r7
24006a20:	2100      	movs	r1, #0
24006a22:	f002 fadd 	bl	24008fe0 <lv_obj_add_style>
	lv_label_set_text(selectAnalogTestLable, "Analog Input (AI) Card Test");
24006a26:	4650      	mov	r0, sl
24006a28:	4928      	ldr	r1, [pc, #160]	; (24006acc <createHomeScreen+0x244>)
    lv_obj_align(selectDigitalInTestBtn, selectAnalogTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 30);
24006a2a:	241e      	movs	r4, #30
	lv_label_set_text(selectAnalogTestLable, "Analog Input (AI) Card Test");
24006a2c:	f00f fff4 	bl	24016a18 <lv_label_set_text>
	lv_label_set_text(selectDigitalInTestLable, "Digital Input (DI) Card  Test");
24006a30:	4648      	mov	r0, r9
24006a32:	4927      	ldr	r1, [pc, #156]	; (24006ad0 <createHomeScreen+0x248>)
24006a34:	f00f fff0 	bl	24016a18 <lv_label_set_text>
	lv_label_set_text(selectDigitalOutTestLable, "Digital Output (DO) Card Test");
24006a38:	4640      	mov	r0, r8
24006a3a:	4926      	ldr	r1, [pc, #152]	; (24006ad4 <createHomeScreen+0x24c>)
24006a3c:	f00f ffec 	bl	24016a18 <lv_label_set_text>
	lv_obj_set_size(selectAnalogTestBtn, 420, 70);
24006a40:	4630      	mov	r0, r6
24006a42:	2246      	movs	r2, #70	; 0x46
24006a44:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
24006a48:	f001 fb92 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(selectDigitalInTestBtn, 420, 70);
24006a4c:	4628      	mov	r0, r5
24006a4e:	2246      	movs	r2, #70	; 0x46
24006a50:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
24006a54:	f001 fb8c 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_size(selectDigitalOutTestBtn, 420, 70);
24006a58:	4638      	mov	r0, r7
24006a5a:	2246      	movs	r2, #70	; 0x46
24006a5c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
24006a60:	f001 fb86 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_pos(selectAnalogTestBtn, (680-400)/2, 120);
24006a64:	4630      	mov	r0, r6
24006a66:	2278      	movs	r2, #120	; 0x78
24006a68:	218c      	movs	r1, #140	; 0x8c
24006a6a:	f001 fafc 	bl	24008066 <lv_obj_set_pos>
    lv_obj_align(selectDigitalInTestBtn, selectAnalogTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 30);
24006a6e:	4631      	mov	r1, r6
24006a70:	4628      	mov	r0, r5
24006a72:	2300      	movs	r3, #0
24006a74:	220d      	movs	r2, #13
24006a76:	9400      	str	r4, [sp, #0]
24006a78:	f001 fb38 	bl	240080ec <lv_obj_align>
    lv_obj_align(selectDigitalOutTestBtn, selectDigitalInTestBtn, LV_ALIGN_OUT_BOTTOM_MID, 0, 30);
24006a7c:	2300      	movs	r3, #0
24006a7e:	220d      	movs	r2, #13
24006a80:	4629      	mov	r1, r5
24006a82:	4638      	mov	r0, r7
24006a84:	9400      	str	r4, [sp, #0]
24006a86:	f001 fb31 	bl	240080ec <lv_obj_align>
	lv_obj_set_event_cb(selectAnalogTestBtn, selectAnalogTestEvent);
24006a8a:	4630      	mov	r0, r6
24006a8c:	4912      	ldr	r1, [pc, #72]	; (24006ad8 <createHomeScreen+0x250>)
24006a8e:	f001 f95d 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_set_event_cb(selectDigitalInTestBtn, selectDigitalInTestEvent);
24006a92:	4628      	mov	r0, r5
24006a94:	4911      	ldr	r1, [pc, #68]	; (24006adc <createHomeScreen+0x254>)
24006a96:	f001 f959 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_set_event_cb(selectDigitalOutTestBtn, selectDigitalOutTestEvent);
24006a9a:	4911      	ldr	r1, [pc, #68]	; (24006ae0 <createHomeScreen+0x258>)
24006a9c:	4638      	mov	r0, r7
}
24006a9e:	b008      	add	sp, #32
24006aa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	lv_obj_set_event_cb(selectDigitalOutTestBtn, selectDigitalOutTestEvent);
24006aa4:	f001 b952 	b.w	24007d4c <lv_obj_set_event_cb>
24006aa8:	2402d9cc 	.word	0x2402d9cc
24006aac:	2402d9d0 	.word	0x2402d9d0
24006ab0:	2402d9c8 	.word	0x2402d9c8
24006ab4:	2401a61c 	.word	0x2401a61c
24006ab8:	2402d9c4 	.word	0x2402d9c4
24006abc:	900d6653 	.word	0x900d6653
24006ac0:	900d654c 	.word	0x900d654c
24006ac4:	00ffff00 	.word	0x00ffff00
24006ac8:	2401a684 	.word	0x2401a684
24006acc:	900d6658 	.word	0x900d6658
24006ad0:	900d6674 	.word	0x900d6674
24006ad4:	900d6692 	.word	0x900d6692
24006ad8:	24006865 	.word	0x24006865
24006adc:	24006863 	.word	0x24006863
24006ae0:	24006885 	.word	0x24006885

24006ae4 <getHomeScreen>:
}

homeScreen_t getHomeScreen(void){

	return homeScreen;
}
24006ae4:	4b01      	ldr	r3, [pc, #4]	; (24006aec <getHomeScreen+0x8>)
24006ae6:	6818      	ldr	r0, [r3, #0]
24006ae8:	4770      	bx	lr
24006aea:	bf00      	nop
24006aec:	2402d9cc 	.word	0x2402d9cc

24006af0 <lv_color_hex>:
    return LV_COLOR_MAKE(r, g, b);
24006af0:	f3c0 2285 	ubfx	r2, r0, #10, #6
24006af4:	f3c0 03c4 	ubfx	r3, r0, #3, #5
24006af8:	f3c0 40c4 	ubfx	r0, r0, #19, #5
24006afc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}
24006b00:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
24006b04:	4770      	bx	lr

24006b06 <settingBtnEvent>:
	switch(event) {
	case LV_EVENT_CLICKED:

		break;
	}
}
24006b06:	4770      	bx	lr

24006b08 <homeBtnEvent>:
	switch(event) {
24006b08:	2906      	cmp	r1, #6
{
24006b0a:	b508      	push	{r3, lr}
	switch(event) {
24006b0c:	d105      	bne.n	24006b1a <homeBtnEvent+0x12>
		lv_obj_move_foreground(getHomeScreen().window);
24006b0e:	f7ff ffe9 	bl	24006ae4 <getHomeScreen>
}
24006b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lv_obj_move_foreground(getHomeScreen().window);
24006b16:	f001 ba89 	b.w	2400802c <lv_obj_move_foreground>
}
24006b1a:	bd08      	pop	{r3, pc}

24006b1c <usbBtnEvent>:
24006b1c:	4770      	bx	lr
	...

24006b20 <createMainScreen>:
	mainScreen.window = lv_obj_create(NULL, NULL);
24006b20:	2100      	movs	r1, #0
	mainScreen.scale = 1;
24006b22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
void createMainScreen(void){
24006b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mainScreen.scale = 1;
24006b2a:	4c98      	ldr	r4, [pc, #608]	; (24006d8c <createMainScreen+0x26c>)
	mainScreen.window = lv_obj_create(NULL, NULL);
24006b2c:	4608      	mov	r0, r1
	lv_obj_align(settingBtn, homeBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 5);
24006b2e:	f04f 0905 	mov.w	r9, #5
void createMainScreen(void){
24006b32:	ed2d 8b02 	vpush	{d8}
24006b36:	b083      	sub	sp, #12
	mainScreen.scale = 1;
24006b38:	6163      	str	r3, [r4, #20]
	mainScreen.window = lv_obj_create(NULL, NULL);
24006b3a:	f001 fbeb 	bl	24008314 <lv_obj_create>
24006b3e:	4605      	mov	r5, r0
24006b40:	6020      	str	r0, [r4, #0]
	lv_obj_set_style_local_bg_color(mainScreen.window, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24006b42:	2000      	movs	r0, #0
24006b44:	f7ff ffd4 	bl	24006af0 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006b48:	2100      	movs	r1, #0
24006b4a:	4603      	mov	r3, r0
24006b4c:	2229      	movs	r2, #41	; 0x29
24006b4e:	4628      	mov	r0, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24006b50:	4d8f      	ldr	r5, [pc, #572]	; (24006d90 <createMainScreen+0x270>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006b52:	f002 fa64 	bl	2400901e <_lv_obj_set_style_local_color>
	lv_style_set_text_color(&btnStyle, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24006b56:	2000      	movs	r0, #0
24006b58:	f7ff ffca 	bl	24006af0 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24006b5c:	f248 0189 	movw	r1, #32905	; 0x8089
24006b60:	4602      	mov	r2, r0
24006b62:	4628      	mov	r0, r5
24006b64:	f003 fe42 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_bg_color(&btnStyle, LV_STATE_DEFAULT, lv_color_hex(0x0000ff00));
24006b68:	f44f 407f 	mov.w	r0, #65280	; 0xff00
24006b6c:	f7ff ffc0 	bl	24006af0 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006b70:	2129      	movs	r1, #41	; 0x29
24006b72:	4602      	mov	r2, r0
24006b74:	4628      	mov	r0, r5
24006b76:	f003 fe39 	bl	2400a7ec <_lv_style_set_color>
	lv_style_set_border_color(&btnStyle,LV_STATE_DEFAULT, lv_color_hex(0x00ffffff));
24006b7a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24006b7e:	f7ff ffb7 	bl	24006af0 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24006b82:	2139      	movs	r1, #57	; 0x39
24006b84:	4602      	mov	r2, r0
24006b86:	4628      	mov	r0, r5
24006b88:	f003 fe30 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24006b8c:	4628      	mov	r0, r5
24006b8e:	220a      	movs	r2, #10
24006b90:	2101      	movs	r1, #1
24006b92:	f003 fde9 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24006b96:	4628      	mov	r0, r5
24006b98:	2205      	movs	r2, #5
24006b9a:	2130      	movs	r1, #48	; 0x30
24006b9c:	f003 fde4 	bl	2400a768 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24006ba0:	4a7c      	ldr	r2, [pc, #496]	; (24006d94 <createMainScreen+0x274>)
24006ba2:	4628      	mov	r0, r5
24006ba4:	f248 018e 	movw	r1, #32910	; 0x808e
24006ba8:	f003 fea6 	bl	2400a8f8 <_lv_style_set_ptr>
	homeBtn = lv_btn_create(mainScreen.window, NULL);
24006bac:	2100      	movs	r1, #0
24006bae:	6820      	ldr	r0, [r4, #0]
24006bb0:	f00c fe8c 	bl	240138cc <lv_btn_create>
	lv_obj_set_size(homeBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006bb4:	ed9f 8a78 	vldr	s16, [pc, #480]	; 24006d98 <createMainScreen+0x278>
24006bb8:	edd4 7a05 	vldr	s15, [r4, #20]
	homeBtn = lv_btn_create(mainScreen.window, NULL);
24006bbc:	4607      	mov	r7, r0
	lv_obj_set_size(homeBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006bbe:	ee67 7a88 	vmul.f32	s15, s15, s16
24006bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24006bc6:	ee17 3a90 	vmov	r3, s15
24006bca:	b21a      	sxth	r2, r3
24006bcc:	4611      	mov	r1, r2
24006bce:	f001 facf 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_pos(homeBtn, 0, 0);
24006bd2:	2200      	movs	r2, #0
24006bd4:	4638      	mov	r0, r7
24006bd6:	4611      	mov	r1, r2
24006bd8:	f001 fa45 	bl	24008066 <lv_obj_set_pos>
	lv_obj_add_style(homeBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006bdc:	462a      	mov	r2, r5
24006bde:	4638      	mov	r0, r7
24006be0:	2100      	movs	r1, #0
24006be2:	f002 f9fd 	bl	24008fe0 <lv_obj_add_style>
	homeLabel = lv_label_create(homeBtn, NULL);
24006be6:	2100      	movs	r1, #0
24006be8:	4638      	mov	r0, r7
24006bea:	f010 f803 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(homeLabel, LV_SYMBOL_HOME);
24006bee:	496b      	ldr	r1, [pc, #428]	; (24006d9c <createMainScreen+0x27c>)
24006bf0:	f00f ff86 	bl	24016b00 <lv_label_set_text_fmt>
	settingBtn = lv_btn_create(mainScreen.window, NULL);
24006bf4:	2100      	movs	r1, #0
24006bf6:	6820      	ldr	r0, [r4, #0]
24006bf8:	f00c fe68 	bl	240138cc <lv_btn_create>
	lv_obj_set_size(settingBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006bfc:	edd4 7a05 	vldr	s15, [r4, #20]
	settingBtn = lv_btn_create(mainScreen.window, NULL);
24006c00:	4606      	mov	r6, r0
	lv_obj_set_size(settingBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006c02:	ee67 7a88 	vmul.f32	s15, s15, s16
24006c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24006c0a:	ee17 3a90 	vmov	r3, s15
24006c0e:	b21a      	sxth	r2, r3
24006c10:	4611      	mov	r1, r2
24006c12:	f001 faad 	bl	24008170 <lv_obj_set_size>
	lv_obj_add_style(settingBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006c16:	462a      	mov	r2, r5
24006c18:	4630      	mov	r0, r6
24006c1a:	2100      	movs	r1, #0
24006c1c:	f002 f9e0 	bl	24008fe0 <lv_obj_add_style>
	settingLabel = lv_label_create(settingBtn, NULL);
24006c20:	2100      	movs	r1, #0
24006c22:	4630      	mov	r0, r6
24006c24:	f00f ffe6 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(settingLabel, LV_SYMBOL_SETTINGS);
24006c28:	495d      	ldr	r1, [pc, #372]	; (24006da0 <createMainScreen+0x280>)
24006c2a:	f00f ff69 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(settingBtn, homeBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 5);
24006c2e:	2300      	movs	r3, #0
24006c30:	220c      	movs	r2, #12
24006c32:	4639      	mov	r1, r7
24006c34:	4630      	mov	r0, r6
24006c36:	f8cd 9000 	str.w	r9, [sp]
24006c3a:	f001 fa57 	bl	240080ec <lv_obj_align>
	usbBtn = lv_btn_create(mainScreen.window, NULL);
24006c3e:	2100      	movs	r1, #0
24006c40:	6820      	ldr	r0, [r4, #0]
24006c42:	f00c fe43 	bl	240138cc <lv_btn_create>
	lv_obj_set_size(usbBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006c46:	edd4 7a05 	vldr	s15, [r4, #20]
	usbBtn = lv_btn_create(mainScreen.window, NULL);
24006c4a:	4680      	mov	r8, r0
	lv_obj_set_size(usbBtn, 110*mainScreen.scale, 110*mainScreen.scale);
24006c4c:	ee67 7a88 	vmul.f32	s15, s15, s16
24006c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24006c54:	ee17 3a90 	vmov	r3, s15
24006c58:	b21a      	sxth	r2, r3
24006c5a:	4611      	mov	r1, r2
24006c5c:	f001 fa88 	bl	24008170 <lv_obj_set_size>
	lv_obj_add_style(usbBtn, LV_OBJ_PART_MAIN, &btnStyle);
24006c60:	462a      	mov	r2, r5
24006c62:	4640      	mov	r0, r8
24006c64:	2100      	movs	r1, #0
24006c66:	f002 f9bb 	bl	24008fe0 <lv_obj_add_style>
	usbLabel = lv_label_create(usbBtn, NULL);
24006c6a:	2100      	movs	r1, #0
24006c6c:	4640      	mov	r0, r8
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24006c6e:	f104 0508 	add.w	r5, r4, #8
24006c72:	f00f ffbf 	bl	24016bf4 <lv_label_create>
	lv_label_set_text_fmt(usbLabel, LV_SYMBOL_USB);
24006c76:	494b      	ldr	r1, [pc, #300]	; (24006da4 <createMainScreen+0x284>)
24006c78:	f00f ff42 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_align(usbBtn, settingBtn, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 5);
24006c7c:	2300      	movs	r3, #0
24006c7e:	220c      	movs	r2, #12
24006c80:	4631      	mov	r1, r6
24006c82:	4640      	mov	r0, r8
24006c84:	f8cd 9000 	str.w	r9, [sp]
24006c88:	f001 fa30 	bl	240080ec <lv_obj_align>
	lv_style_set_text_color(&mainScreen.timeDateStyle, LV_STATE_DEFAULT, lv_color_hex(0x00ffffff));
24006c8c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24006c90:	f7ff ff2e 	bl	24006af0 <lv_color_hex>
24006c94:	f248 0189 	movw	r1, #32905	; 0x8089
24006c98:	4602      	mov	r2, r0
24006c9a:	4628      	mov	r0, r5
24006c9c:	f003 fda6 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24006ca0:	4a41      	ldr	r2, [pc, #260]	; (24006da8 <createMainScreen+0x288>)
24006ca2:	4628      	mov	r0, r5
24006ca4:	f248 018e 	movw	r1, #32910	; 0x808e
24006ca8:	f003 fe26 	bl	2400a8f8 <_lv_style_set_ptr>
	mainScreen.timeLabel = lv_label_create(mainScreen.window, NULL);
24006cac:	2100      	movs	r1, #0
24006cae:	6820      	ldr	r0, [r4, #0]
24006cb0:	f00f ffa0 	bl	24016bf4 <lv_label_create>
    lv_obj_add_style(mainScreen.timeLabel, LV_OBJ_PART_MAIN, &mainScreen.timeDateStyle);
24006cb4:	462a      	mov	r2, r5
24006cb6:	2100      	movs	r1, #0
	mainScreen.timeLabel = lv_label_create(mainScreen.window, NULL);
24006cb8:	60e0      	str	r0, [r4, #12]
    lv_obj_add_style(mainScreen.timeLabel, LV_OBJ_PART_MAIN, &mainScreen.timeDateStyle);
24006cba:	f002 f991 	bl	24008fe0 <lv_obj_add_style>
    lv_label_set_text_fmt(mainScreen.timeLabel,"%02d:%02d %2s",0,0,"AM");
24006cbe:	4b3b      	ldr	r3, [pc, #236]	; (24006dac <createMainScreen+0x28c>)
24006cc0:	493b      	ldr	r1, [pc, #236]	; (24006db0 <createMainScreen+0x290>)
24006cc2:	9300      	str	r3, [sp, #0]
24006cc4:	2300      	movs	r3, #0
24006cc6:	68e0      	ldr	r0, [r4, #12]
24006cc8:	461a      	mov	r2, r3
24006cca:	f00f ff19 	bl	24016b00 <lv_label_set_text_fmt>
	lv_obj_set_pos(mainScreen.timeLabel, 0, 400);
24006cce:	f44f 72c8 	mov.w	r2, #400	; 0x190
24006cd2:	68e0      	ldr	r0, [r4, #12]
24006cd4:	2100      	movs	r1, #0
24006cd6:	f001 f9c6 	bl	24008066 <lv_obj_set_pos>
	mainScreen.dateLabel = lv_label_create(mainScreen.window, NULL);
24006cda:	2100      	movs	r1, #0
24006cdc:	6820      	ldr	r0, [r4, #0]
24006cde:	f00f ff89 	bl	24016bf4 <lv_label_create>
    lv_obj_add_style(mainScreen.dateLabel, LV_OBJ_PART_MAIN, &mainScreen.timeDateStyle);
24006ce2:	462a      	mov	r2, r5
24006ce4:	2100      	movs	r1, #0
	mainScreen.dateLabel = lv_label_create(mainScreen.window, NULL);
24006ce6:	6120      	str	r0, [r4, #16]
    lv_obj_add_style(mainScreen.dateLabel, LV_OBJ_PART_MAIN, &mainScreen.timeDateStyle);
24006ce8:	f002 f97a 	bl	24008fe0 <lv_obj_add_style>
    lv_label_set_text_fmt(mainScreen.dateLabel,"%02d/%02d/%2d",9,10,24);
24006cec:	2318      	movs	r3, #24
    lv_obj_align(mainScreen.dateLabel, mainScreen.timeLabel, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
24006cee:	2500      	movs	r5, #0
    lv_label_set_text_fmt(mainScreen.dateLabel,"%02d/%02d/%2d",9,10,24);
24006cf0:	2209      	movs	r2, #9
24006cf2:	9300      	str	r3, [sp, #0]
24006cf4:	230a      	movs	r3, #10
24006cf6:	6920      	ldr	r0, [r4, #16]
24006cf8:	492e      	ldr	r1, [pc, #184]	; (24006db4 <createMainScreen+0x294>)
24006cfa:	f00f ff01 	bl	24016b00 <lv_label_set_text_fmt>
    lv_obj_align(mainScreen.dateLabel, mainScreen.timeLabel, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
24006cfe:	462b      	mov	r3, r5
24006d00:	220d      	movs	r2, #13
24006d02:	9500      	str	r5, [sp, #0]
24006d04:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
24006d08:	f001 f9f0 	bl	240080ec <lv_obj_align>
	mainScreen.changeable = lv_obj_create(mainScreen.window, NULL);
24006d0c:	4629      	mov	r1, r5
24006d0e:	6820      	ldr	r0, [r4, #0]
24006d10:	f001 fb00 	bl	24008314 <lv_obj_create>
	lv_obj_set_pos(mainScreen.changeable, (110+10)*mainScreen.scale, 0);
24006d14:	ed9f 7a28 	vldr	s14, [pc, #160]	; 24006db8 <createMainScreen+0x298>
24006d18:	edd4 7a05 	vldr	s15, [r4, #20]
24006d1c:	462a      	mov	r2, r5
	mainScreen.changeable = lv_obj_create(mainScreen.window, NULL);
24006d1e:	6060      	str	r0, [r4, #4]
	lv_obj_set_pos(mainScreen.changeable, (110+10)*mainScreen.scale, 0);
24006d20:	ee67 7a87 	vmul.f32	s15, s15, s14
24006d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24006d28:	ee17 3a90 	vmov	r3, s15
24006d2c:	b219      	sxth	r1, r3
24006d2e:	f001 f99a 	bl	24008066 <lv_obj_set_pos>
	lv_obj_set_size(mainScreen.changeable, 680, 480);
24006d32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
24006d36:	6860      	ldr	r0, [r4, #4]
24006d38:	f44f 712a 	mov.w	r1, #680	; 0x2a8
24006d3c:	f001 fa18 	bl	24008170 <lv_obj_set_size>
	lv_obj_set_style_local_border_color(mainScreen.changeable, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24006d40:	f8d4 9004 	ldr.w	r9, [r4, #4]
24006d44:	4628      	mov	r0, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24006d46:	4629      	mov	r1, r5
24006d48:	f7ff fed2 	bl	24006af0 <lv_color_hex>
24006d4c:	2239      	movs	r2, #57	; 0x39
24006d4e:	4603      	mov	r3, r0
24006d50:	4648      	mov	r0, r9
24006d52:	f002 f964 	bl	2400901e <_lv_obj_set_style_local_color>
	lv_obj_set_style_local_bg_color(mainScreen.changeable, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, lv_color_hex(0x00000000));
24006d56:	6864      	ldr	r4, [r4, #4]
24006d58:	4628      	mov	r0, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24006d5a:	4629      	mov	r1, r5
24006d5c:	f7ff fec8 	bl	24006af0 <lv_color_hex>
24006d60:	2229      	movs	r2, #41	; 0x29
24006d62:	4603      	mov	r3, r0
24006d64:	4620      	mov	r0, r4
24006d66:	f002 f95a 	bl	2400901e <_lv_obj_set_style_local_color>
	lv_obj_set_event_cb(homeBtn, homeBtnEvent);
24006d6a:	4638      	mov	r0, r7
24006d6c:	4913      	ldr	r1, [pc, #76]	; (24006dbc <createMainScreen+0x29c>)
24006d6e:	f000 ffed 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_set_event_cb(settingBtn, settingBtnEvent);
24006d72:	4630      	mov	r0, r6
24006d74:	4912      	ldr	r1, [pc, #72]	; (24006dc0 <createMainScreen+0x2a0>)
24006d76:	f000 ffe9 	bl	24007d4c <lv_obj_set_event_cb>
	lv_obj_set_event_cb(usbBtn, usbBtnEvent);
24006d7a:	4912      	ldr	r1, [pc, #72]	; (24006dc4 <createMainScreen+0x2a4>)
24006d7c:	4640      	mov	r0, r8
}
24006d7e:	b003      	add	sp, #12
24006d80:	ecbd 8b02 	vpop	{d8}
24006d84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lv_obj_set_event_cb(usbBtn, usbBtnEvent);
24006d88:	f000 bfe0 	b.w	24007d4c <lv_obj_set_event_cb>
24006d8c:	2402d9d8 	.word	0x2402d9d8
24006d90:	2402d9d4 	.word	0x2402d9d4
24006d94:	2401a6b8 	.word	0x2401a6b8
24006d98:	42dc0000 	.word	0x42dc0000
24006d9c:	900d66b0 	.word	0x900d66b0
24006da0:	900d66b4 	.word	0x900d66b4
24006da4:	900d66b8 	.word	0x900d66b8
24006da8:	2401a61c 	.word	0x2401a61c
24006dac:	900d66ca 	.word	0x900d66ca
24006db0:	900d66bc 	.word	0x900d66bc
24006db4:	900d66cd 	.word	0x900d66cd
24006db8:	42f00000 	.word	0x42f00000
24006dbc:	24006b09 	.word	0x24006b09
24006dc0:	24006b07 	.word	0x24006b07
24006dc4:	24006b1d 	.word	0x24006b1d

24006dc8 <getMainScreen>:

		break;
	}
}

mainScreen_t getMainScreen(void){
24006dc8:	b570      	push	{r4, r5, r6, lr}

	return mainScreen;
24006dca:	4d05      	ldr	r5, [pc, #20]	; (24006de0 <getMainScreen+0x18>)
mainScreen_t getMainScreen(void){
24006dcc:	4606      	mov	r6, r0
	return mainScreen;
24006dce:	4604      	mov	r4, r0
24006dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24006dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24006dd4:	e895 0003 	ldmia.w	r5, {r0, r1}
24006dd8:	e884 0003 	stmia.w	r4, {r0, r1}
}
24006ddc:	4630      	mov	r0, r6
24006dde:	bd70      	pop	{r4, r5, r6, pc}
24006de0:	2402d9d8 	.word	0x2402d9d8

24006de4 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
24006de4:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
24006de6:	b910      	cbnz	r0, 24006dee <lv_disp_get_scr_act+0xa>
24006de8:	f007 ffda 	bl	2400eda0 <lv_disp_get_default>
    if(!disp) {
24006dec:	b100      	cbz	r0, 24006df0 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
24006dee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
24006df0:	bd08      	pop	{r3, pc}

24006df2 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
24006df2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
24006df4:	b910      	cbnz	r0, 24006dfc <lv_disp_get_scr_prev+0xa>
24006df6:	f007 ffd3 	bl	2400eda0 <lv_disp_get_default>
    if(!disp) {
24006dfa:	b100      	cbz	r0, 24006dfe <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
24006dfc:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
24006dfe:	bd08      	pop	{r3, pc}

24006e00 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
24006e00:	b510      	push	{r4, lr}
24006e02:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
24006e04:	f001 f810 	bl	24007e28 <lv_obj_get_disp>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
24006e08:	b128      	cbz	r0, 24006e16 <lv_disp_load_scr+0x16>
    d->act_scr = scr;
24006e0a:	63c4      	str	r4, [r0, #60]	; 0x3c

    lv_obj_invalidate(scr);
24006e0c:	4620      	mov	r0, r4
}
24006e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
24006e12:	f001 b8e7 	b.w	24007fe4 <lv_obj_invalidate>
}
24006e16:	bd10      	pop	{r4, pc}

24006e18 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
24006e18:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
24006e1a:	b910      	cbnz	r0, 24006e22 <lv_disp_get_layer_top+0xa>
24006e1c:	f007 ffc0 	bl	2400eda0 <lv_disp_get_default>
    if(!disp) {
24006e20:	b100      	cbz	r0, 24006e24 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
24006e22:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
24006e24:	bd08      	pop	{r3, pc}

24006e26 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
24006e26:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
24006e28:	b910      	cbnz	r0, 24006e30 <lv_disp_get_layer_sys+0xa>
24006e2a:	f007 ffb9 	bl	2400eda0 <lv_disp_get_default>
    if(!disp) {
24006e2e:	b100      	cbz	r0, 24006e32 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
24006e30:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
24006e32:	bd08      	pop	{r3, pc}

24006e34 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
24006e34:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24006e38:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    }

    return proc->reset_query ? true : false;
}
24006e3a:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
24006e3e:	bf42      	ittt	mi
24006e40:	4b01      	ldrmi	r3, [pc, #4]	; (24006e48 <indev_reset_check+0x14>)
24006e42:	2200      	movmi	r2, #0
24006e44:	601a      	strmi	r2, [r3, #0]
}
24006e46:	4770      	bx	lr
24006e48:	2402d9f4 	.word	0x2402d9f4

24006e4c <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
24006e4c:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
24006e50:	078b      	lsls	r3, r1, #30
24006e52:	d518      	bpl.n	24006e86 <indev_proc_reset_query_handler+0x3a>
        indev->proc.types.pointer.drag_limit_out    = 0;
24006e54:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_sum.x        = 0;
24006e58:	2300      	movs	r3, #0
        indev->proc.long_pr_sent                    = 0;
24006e5a:	f021 0103 	bic.w	r1, r1, #3
        indev->proc.types.pointer.drag_limit_out    = 0;
24006e5e:	f022 021f 	bic.w	r2, r2, #31
        indev->proc.types.pointer.gesture_sum.x     = 0;
24006e62:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
24006e66:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.drag_limit_out    = 0;
24006e6a:	f042 020c 	orr.w	r2, r2, #12
        indev->proc.long_pr_sent                    = 0;
24006e6e:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
        indev->proc.types.pointer.drag_limit_out    = 0;
24006e72:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
        indev_obj_act                               = NULL;
24006e76:	4a04      	ldr	r2, [pc, #16]	; (24006e88 <indev_proc_reset_query_handler+0x3c>)
        indev->proc.types.pointer.drag_throw_vect.x = 0;
24006e78:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.last_obj          = NULL;
24006e7c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
        indev->proc.longpr_rep_timestamp            = 0;
24006e80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
        indev_obj_act                               = NULL;
24006e84:	6013      	str	r3, [r2, #0]
}
24006e86:	4770      	bx	lr
24006e88:	2402d9f4 	.word	0x2402d9f4

24006e8c <get_dragged_obj>:
{
24006e8c:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
24006e8e:	4604      	mov	r4, r0
24006e90:	b930      	cbnz	r0, 24006ea0 <get_dragged_obj+0x14>
24006e92:	2400      	movs	r4, #0
}
24006e94:	4620      	mov	r0, r4
24006e96:	bd10      	pop	{r4, pc}
        drag_obj = lv_obj_get_parent(drag_obj);
24006e98:	4620      	mov	r0, r4
24006e9a:	f001 f9e7 	bl	2400826c <lv_obj_get_parent>
24006e9e:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
24006ea0:	4620      	mov	r0, r4
24006ea2:	f001 fc16 	bl	240086d2 <lv_obj_get_drag_parent>
24006ea6:	2800      	cmp	r0, #0
24006ea8:	d0f4      	beq.n	24006e94 <get_dragged_obj+0x8>
24006eaa:	2c00      	cmp	r4, #0
24006eac:	d1f4      	bne.n	24006e98 <get_dragged_obj+0xc>
24006eae:	e7f0      	b.n	24006e92 <get_dragged_obj+0x6>

24006eb0 <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
24006eb0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
24006eb4:	079b      	lsls	r3, r3, #30
{
24006eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
24006eb8:	4604      	mov	r4, r0
24006eba:	b087      	sub	sp, #28
    if(proc->types.pointer.drag_in_prog == 0) return;
24006ebc:	f140 8082 	bpl.w	24006fc4 <indev_drag_throw+0x114>
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
24006ec0:	69c0      	ldr	r0, [r0, #28]
24006ec2:	f7ff ffe3 	bl	24006e8c <get_dragged_obj>
    if(drag_obj == NULL) return;
24006ec6:	4605      	mov	r5, r0
24006ec8:	2800      	cmp	r0, #0
24006eca:	d07b      	beq.n	24006fc4 <indev_drag_throw+0x114>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
24006ecc:	4e55      	ldr	r6, [pc, #340]	; (24007024 <indev_drag_throw+0x174>)
24006ece:	f001 fbfb 	bl	240086c8 <lv_obj_get_drag_throw>
24006ed2:	b9b8      	cbnz	r0, 24006f04 <indev_drag_throw+0x54>
        proc->types.pointer.drag_in_prog = 0;
24006ed4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006ed8:	2113      	movs	r1, #19
24006eda:	6832      	ldr	r2, [r6, #0]
        proc->types.pointer.drag_in_prog = 0;
24006edc:	f360 0341 	bfi	r3, r0, #1, #1
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006ee0:	4628      	mov	r0, r5
        proc->types.pointer.drag_in_prog = 0;
24006ee2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006ee6:	69eb      	ldr	r3, [r5, #28]
24006ee8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
24006eea:	4620      	mov	r0, r4
24006eec:	f7ff ffa2 	bl	24006e34 <indev_reset_check>
24006ef0:	4602      	mov	r2, r0
24006ef2:	2800      	cmp	r0, #0
24006ef4:	d166      	bne.n	24006fc4 <indev_drag_throw+0x114>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
24006ef6:	2109      	movs	r1, #9
24006ef8:	4628      	mov	r0, r5
}
24006efa:	b007      	add	sp, #28
24006efc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
24006f00:	f000 bf6a 	b.w	24007dd8 <lv_event_send>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
24006f04:	4628      	mov	r0, r5
24006f06:	f001 fbda 	bl	240086be <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
24006f0a:	6832      	ldr	r2, [r6, #0]
24006f0c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
24006f10:	4607      	mov	r7, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
24006f12:	7d51      	ldrb	r1, [r2, #21]
24006f14:	2064      	movs	r0, #100	; 0x64
24006f16:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
24006f1a:	434b      	muls	r3, r1
24006f1c:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.x =
24006f20:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
24006f22:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
24006f26:	434b      	muls	r3, r1
24006f28:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
24006f2c:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
24006f2e:	6961      	ldr	r1, [r4, #20]
24006f30:	2900      	cmp	r1, #0
24006f32:	d05d      	beq.n	24006ff0 <indev_drag_throw+0x140>
        lv_obj_get_coords(drag_obj, &coords_ori);
24006f34:	a902      	add	r1, sp, #8
24006f36:	4628      	mov	r0, r5
24006f38:	f001 f9c1 	bl	240082be <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
24006f3c:	4628      	mov	r0, r5
24006f3e:	f001 f9c4 	bl	240082ca <lv_obj_get_x>
24006f42:	8aa3      	ldrh	r3, [r4, #20]
24006f44:	18c1      	adds	r1, r0, r3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
24006f46:	4628      	mov	r0, r5
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
24006f48:	b209      	sxth	r1, r1
24006f4a:	9101      	str	r1, [sp, #4]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
24006f4c:	f001 f9d0 	bl	240082f0 <lv_obj_get_y>
24006f50:	8ae3      	ldrh	r3, [r4, #22]
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
24006f52:	2f03      	cmp	r7, #3
24006f54:	9901      	ldr	r1, [sp, #4]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
24006f56:	eb00 0203 	add.w	r2, r0, r3
24006f5a:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
24006f5c:	d134      	bne.n	24006fc8 <indev_drag_throw+0x118>
24006f5e:	4628      	mov	r0, r5
24006f60:	f001 f881 	bl	24008066 <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
24006f64:	a904      	add	r1, sp, #16
24006f66:	4628      	mov	r0, r5
24006f68:	f001 f9a9 	bl	240082be <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
24006f6c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
24006f70:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
24006f74:	429a      	cmp	r2, r3
24006f76:	d002      	beq.n	24006f7e <indev_drag_throw+0xce>
24006f78:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
24006f7c:	bb13      	cbnz	r3, 24006fc4 <indev_drag_throw+0x114>
24006f7e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
24006f82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
24006f86:	429a      	cmp	r2, r3
24006f88:	d002      	beq.n	24006f90 <indev_drag_throw+0xe0>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
24006f8a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
24006f8e:	b9cb      	cbnz	r3, 24006fc4 <indev_drag_throw+0x114>
            proc->types.pointer.drag_in_prog      = 0;
24006f90:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006f94:	2113      	movs	r1, #19
24006f96:	6832      	ldr	r2, [r6, #0]
24006f98:	4628      	mov	r0, r5
            proc->types.pointer.drag_in_prog      = 0;
24006f9a:	f36f 0341 	bfc	r3, #1, #1
24006f9e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
24006fa2:	2300      	movs	r3, #0
24006fa4:	60e3      	str	r3, [r4, #12]
            proc->types.pointer.drag_throw_vect.x = 0;
24006fa6:	6163      	str	r3, [r4, #20]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006fa8:	69eb      	ldr	r3, [r5, #28]
24006faa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
24006fac:	4620      	mov	r0, r4
24006fae:	f7ff ff41 	bl	24006e34 <indev_reset_check>
24006fb2:	4602      	mov	r2, r0
24006fb4:	b930      	cbnz	r0, 24006fc4 <indev_drag_throw+0x114>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
24006fb6:	2109      	movs	r1, #9
24006fb8:	4628      	mov	r0, r5
24006fba:	f000 ff0d 	bl	24007dd8 <lv_event_send>
            if(indev_reset_check(proc)) return;
24006fbe:	4620      	mov	r0, r4
24006fc0:	f7ff ff38 	bl	24006e34 <indev_reset_check>
}
24006fc4:	b007      	add	sp, #28
24006fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
24006fc8:	2f01      	cmp	r7, #1
24006fca:	d103      	bne.n	24006fd4 <indev_drag_throw+0x124>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
24006fcc:	4628      	mov	r0, r5
24006fce:	f001 f997 	bl	24008300 <lv_obj_set_x>
24006fd2:	e7c7      	b.n	24006f64 <indev_drag_throw+0xb4>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
24006fd4:	2f02      	cmp	r7, #2
24006fd6:	d104      	bne.n	24006fe2 <indev_drag_throw+0x132>
            else lv_obj_set_y(drag_obj, act_y);
24006fd8:	4611      	mov	r1, r2
24006fda:	4628      	mov	r0, r5
24006fdc:	f001 f97d 	bl	240082da <lv_obj_set_y>
24006fe0:	e7c0      	b.n	24006f64 <indev_drag_throw+0xb4>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
24006fe2:	2f04      	cmp	r7, #4
24006fe4:	d1be      	bne.n	24006f64 <indev_drag_throw+0xb4>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
24006fe6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
24006fea:	2b00      	cmp	r3, #0
24006fec:	d0f4      	beq.n	24006fd8 <indev_drag_throw+0x128>
24006fee:	e7ed      	b.n	24006fcc <indev_drag_throw+0x11c>
        proc->types.pointer.drag_in_prog = 0;
24006ff0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006ff4:	4628      	mov	r0, r5
        proc->types.pointer.drag_in_prog = 0;
24006ff6:	f361 0341 	bfi	r3, r1, #1, #1
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24006ffa:	2113      	movs	r1, #19
        proc->types.pointer.drag_in_prog = 0;
24006ffc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
24007000:	69eb      	ldr	r3, [r5, #28]
24007002:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
24007004:	4620      	mov	r0, r4
24007006:	f7ff ff15 	bl	24006e34 <indev_reset_check>
2400700a:	4602      	mov	r2, r0
2400700c:	2800      	cmp	r0, #0
2400700e:	d1d9      	bne.n	24006fc4 <indev_drag_throw+0x114>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
24007010:	2109      	movs	r1, #9
24007012:	4628      	mov	r0, r5
24007014:	f000 fee0 	bl	24007dd8 <lv_event_send>
        if(indev_reset_check(proc)) return;
24007018:	4620      	mov	r0, r4
}
2400701a:	b007      	add	sp, #28
2400701c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if(indev_reset_check(proc)) return;
24007020:	f7ff bf08 	b.w	24006e34 <indev_reset_check>
24007024:	2402d9f0 	.word	0x2402d9f0

24007028 <indev_proc_release>:
    if(proc->wait_until_release != 0) {
24007028:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
2400702c:	b570      	push	{r4, r5, r6, lr}
    if(proc->wait_until_release != 0) {
2400702e:	071d      	lsls	r5, r3, #28
{
24007030:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
24007032:	d508      	bpl.n	24007046 <indev_proc_release+0x1e>
        proc->types.pointer.act_obj  = NULL;
24007034:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
24007036:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.last_obj = NULL;
2400703a:	e9c0 2206 	strd	r2, r2, [r0, #24]
        proc->longpr_rep_timestamp   = 0;
2400703e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
        proc->wait_until_release     = 0;
24007042:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
24007046:	69a0      	ldr	r0, [r4, #24]
24007048:	4d4a      	ldr	r5, [pc, #296]	; (24007174 <indev_proc_release+0x14c>)
2400704a:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
2400704c:	b330      	cbz	r0, 2400709c <indev_proc_release+0x74>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
2400704e:	2110      	movs	r1, #16
24007050:	f001 fb4b 	bl	240086ea <lv_obj_is_protected>
24007054:	4b48      	ldr	r3, [pc, #288]	; (24007178 <indev_proc_release+0x150>)
24007056:	2800      	cmp	r0, #0
24007058:	d048      	beq.n	240070ec <indev_proc_release+0xc4>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
2400705a:	6828      	ldr	r0, [r5, #0]
2400705c:	210e      	movs	r1, #14
2400705e:	681a      	ldr	r2, [r3, #0]
24007060:	69c6      	ldr	r6, [r0, #28]
24007062:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
24007064:	4620      	mov	r0, r4
24007066:	f7ff fee5 	bl	24006e34 <indev_reset_check>
2400706a:	2800      	cmp	r0, #0
2400706c:	d13d      	bne.n	240070ea <indev_proc_release+0xc2>
            if(proc->types.pointer.drag_in_prog == 0) {
2400706e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24007072:	0798      	lsls	r0, r3, #30
24007074:	d520      	bpl.n	240070b8 <indev_proc_release+0x90>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
24007076:	2200      	movs	r2, #0
24007078:	2107      	movs	r1, #7
2400707a:	6828      	ldr	r0, [r5, #0]
2400707c:	f000 feac 	bl	24007dd8 <lv_event_send>
            if(indev_reset_check(proc)) return;
24007080:	4620      	mov	r0, r4
24007082:	f7ff fed7 	bl	24006e34 <indev_reset_check>
24007086:	bb80      	cbnz	r0, 240070ea <indev_proc_release+0xc2>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
24007088:	6828      	ldr	r0, [r5, #0]
2400708a:	f7ff feff 	bl	24006e8c <get_dragged_obj>
        if(drag_obj) {
2400708e:	4605      	mov	r5, r0
24007090:	2800      	cmp	r0, #0
24007092:	d150      	bne.n	24007136 <indev_proc_release+0x10e>
        proc->types.pointer.act_obj = NULL;
24007094:	2300      	movs	r3, #0
24007096:	61a3      	str	r3, [r4, #24]
        proc->longpr_rep_timestamp  = 0;
24007098:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
2400709c:	69e3      	ldr	r3, [r4, #28]
2400709e:	b323      	cbz	r3, 240070ea <indev_proc_release+0xc2>
240070a0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
240070a4:	079b      	lsls	r3, r3, #30
240070a6:	d420      	bmi.n	240070ea <indev_proc_release+0xc2>
        indev_drag_throw(proc);
240070a8:	4620      	mov	r0, r4
240070aa:	f7ff ff01 	bl	24006eb0 <indev_drag_throw>
        if(indev_reset_check(proc)) return;
240070ae:	4620      	mov	r0, r4
}
240070b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(indev_reset_check(proc)) return;
240070b4:	f7ff bebe 	b.w	24006e34 <indev_reset_check>
                if(proc->long_pr_sent == 0) {
240070b8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
240070bc:	f012 0201 	ands.w	r2, r2, #1
240070c0:	d00a      	beq.n	240070d8 <indev_proc_release+0xb0>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
240070c2:	2200      	movs	r2, #0
240070c4:	2106      	movs	r1, #6
240070c6:	6828      	ldr	r0, [r5, #0]
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
240070c8:	f000 fe86 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
240070cc:	4620      	mov	r0, r4
240070ce:	f7ff feb1 	bl	24006e34 <indev_reset_check>
240070d2:	2800      	cmp	r0, #0
240070d4:	d0cf      	beq.n	24007076 <indev_proc_release+0x4e>
240070d6:	e008      	b.n	240070ea <indev_proc_release+0xc2>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
240070d8:	2103      	movs	r1, #3
240070da:	6828      	ldr	r0, [r5, #0]
240070dc:	f000 fe7c 	bl	24007dd8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
240070e0:	4620      	mov	r0, r4
240070e2:	f7ff fea7 	bl	24006e34 <indev_reset_check>
240070e6:	2800      	cmp	r0, #0
240070e8:	d0eb      	beq.n	240070c2 <indev_proc_release+0x9a>
}
240070ea:	bd70      	pop	{r4, r5, r6, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
240070ec:	6828      	ldr	r0, [r5, #0]
240070ee:	210e      	movs	r1, #14
240070f0:	681a      	ldr	r2, [r3, #0]
240070f2:	69c6      	ldr	r6, [r0, #28]
240070f4:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
240070f6:	4620      	mov	r0, r4
240070f8:	f7ff fe9c 	bl	24006e34 <indev_reset_check>
240070fc:	2800      	cmp	r0, #0
240070fe:	d1f4      	bne.n	240070ea <indev_proc_release+0xc2>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
24007100:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            if(proc->types.pointer.drag_in_prog == 0) {
24007104:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
24007108:	07d9      	lsls	r1, r3, #31
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
2400710a:	6828      	ldr	r0, [r5, #0]
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
2400710c:	d507      	bpl.n	2400711e <indev_proc_release+0xf6>
            if(proc->types.pointer.drag_in_prog == 0) {
2400710e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
24007112:	6828      	ldr	r0, [r5, #0]
            if(proc->types.pointer.drag_in_prog == 0) {
24007114:	f012 0202 	ands.w	r2, r2, #2
24007118:	d1ad      	bne.n	24007076 <indev_proc_release+0x4e>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
2400711a:	2106      	movs	r1, #6
2400711c:	e7d4      	b.n	240070c8 <indev_proc_release+0xa0>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
2400711e:	f012 0202 	ands.w	r2, r2, #2
24007122:	d1a8      	bne.n	24007076 <indev_proc_release+0x4e>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
24007124:	2103      	movs	r1, #3
24007126:	f000 fe57 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
2400712a:	4620      	mov	r0, r4
2400712c:	f7ff fe82 	bl	24006e34 <indev_reset_check>
24007130:	2800      	cmp	r0, #0
24007132:	d0ec      	beq.n	2400710e <indev_proc_release+0xe6>
24007134:	e7d9      	b.n	240070ea <indev_proc_release+0xc2>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
24007136:	f001 fac7 	bl	240086c8 <lv_obj_get_drag_throw>
2400713a:	2800      	cmp	r0, #0
2400713c:	d0aa      	beq.n	24007094 <indev_proc_release+0x6c>
2400713e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24007142:	079a      	lsls	r2, r3, #30
24007144:	d5a6      	bpl.n	24007094 <indev_proc_release+0x6c>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
24007146:	69eb      	ldr	r3, [r5, #28]
24007148:	b11b      	cbz	r3, 24007152 <indev_proc_release+0x12a>
2400714a:	2200      	movs	r2, #0
2400714c:	2112      	movs	r1, #18
2400714e:	4628      	mov	r0, r5
24007150:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
24007152:	4620      	mov	r0, r4
24007154:	f7ff fe6e 	bl	24006e34 <indev_reset_check>
24007158:	4602      	mov	r2, r0
2400715a:	2800      	cmp	r0, #0
2400715c:	d1c5      	bne.n	240070ea <indev_proc_release+0xc2>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
2400715e:	210a      	movs	r1, #10
24007160:	4628      	mov	r0, r5
24007162:	f000 fe39 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
24007166:	4620      	mov	r0, r4
24007168:	f7ff fe64 	bl	24006e34 <indev_reset_check>
2400716c:	2800      	cmp	r0, #0
2400716e:	d091      	beq.n	24007094 <indev_proc_release+0x6c>
24007170:	e7bb      	b.n	240070ea <indev_proc_release+0xc2>
24007172:	bf00      	nop
24007174:	2402d9f4 	.word	0x2402d9f4
24007178:	2402d9f0 	.word	0x2402d9f0

2400717c <lv_indev_reset.part.0>:
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
2400717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if(indev_act == i) indev_obj_act = NULL;
2400717e:	4e0d      	ldr	r6, [pc, #52]	; (240071b4 <lv_indev_reset.part.0+0x38>)
24007180:	2500      	movs	r5, #0
24007182:	4f0d      	ldr	r7, [pc, #52]	; (240071b8 <lv_indev_reset.part.0+0x3c>)
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
24007184:	4604      	mov	r4, r0
        lv_indev_t * i = lv_indev_get_next(NULL);
24007186:	2000      	movs	r0, #0
24007188:	f007 ff4e 	bl	2400f028 <lv_indev_get_next>
        while(i) {
2400718c:	b900      	cbnz	r0, 24007190 <lv_indev_reset.part.0+0x14>
}
2400718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
24007190:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
24007194:	f043 0302 	orr.w	r3, r3, #2
24007198:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
2400719c:	6833      	ldr	r3, [r6, #0]
2400719e:	4298      	cmp	r0, r3
240071a0:	bf08      	it	eq
240071a2:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
240071a4:	b114      	cbz	r4, 240071ac <lv_indev_reset.part.0+0x30>
240071a6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
240071a8:	429c      	cmp	r4, r3
240071aa:	d100      	bne.n	240071ae <lv_indev_reset.part.0+0x32>
                i->proc.types.pointer.last_pressed = NULL;
240071ac:	63c5      	str	r5, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
240071ae:	f007 ff3b 	bl	2400f028 <lv_indev_get_next>
240071b2:	e7eb      	b.n	2400718c <lv_indev_reset.part.0+0x10>
240071b4:	2402d9f0 	.word	0x2402d9f0
240071b8:	2402d9f4 	.word	0x2402d9f4

240071bc <_lv_indev_init>:
    if(indev) {
240071bc:	2000      	movs	r0, #0
240071be:	f7ff bfdd 	b.w	2400717c <lv_indev_reset.part.0>
	...

240071c4 <lv_indev_get_act>:
}
240071c4:	4b01      	ldr	r3, [pc, #4]	; (240071cc <lv_indev_get_act+0x8>)
240071c6:	6818      	ldr	r0, [r3, #0]
240071c8:	4770      	bx	lr
240071ca:	bf00      	nop
240071cc:	2402d9f0 	.word	0x2402d9f0

240071d0 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
240071d0:	b100      	cbz	r0, 240071d4 <lv_indev_get_type+0x4>
    return indev->driver.type;
240071d2:	7800      	ldrb	r0, [r0, #0]
}
240071d4:	4770      	bx	lr
	...

240071d8 <lv_indev_reset>:
    if(indev) {
240071d8:	4603      	mov	r3, r0
240071da:	b198      	cbz	r0, 24007204 <lv_indev_reset+0x2c>
        indev->proc.reset_query = 1;
240071dc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
240071e0:	f042 0202 	orr.w	r2, r2, #2
240071e4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
240071e8:	4a08      	ldr	r2, [pc, #32]	; (2400720c <lv_indev_reset+0x34>)
240071ea:	6812      	ldr	r2, [r2, #0]
240071ec:	4282      	cmp	r2, r0
240071ee:	bf02      	ittt	eq
240071f0:	4a07      	ldreq	r2, [pc, #28]	; (24007210 <lv_indev_reset+0x38>)
240071f2:	2000      	moveq	r0, #0
240071f4:	6010      	streq	r0, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
240071f6:	b111      	cbz	r1, 240071fe <lv_indev_reset+0x26>
240071f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
240071fa:	428a      	cmp	r2, r1
240071fc:	d105      	bne.n	2400720a <lv_indev_reset+0x32>
            indev->proc.types.pointer.last_pressed = NULL;
240071fe:	2200      	movs	r2, #0
24007200:	63da      	str	r2, [r3, #60]	; 0x3c
24007202:	4770      	bx	lr
24007204:	4608      	mov	r0, r1
24007206:	f7ff bfb9 	b.w	2400717c <lv_indev_reset.part.0>
}
2400720a:	4770      	bx	lr
2400720c:	2402d9f0 	.word	0x2402d9f0
24007210:	2402d9f4 	.word	0x2402d9f4

24007214 <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
24007214:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
24007218:	f36f 0300 	bfc	r3, #0, #1
{
2400721c:	b510      	push	{r4, lr}
2400721e:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
24007220:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
24007224:	f007 ff3a 	bl	2400f09c <lv_tick_get>
24007228:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
2400722a:	f007 ff37 	bl	2400f09c <lv_tick_get>
2400722e:	64a0      	str	r0, [r4, #72]	; 0x48
}
24007230:	bd10      	pop	{r4, pc}

24007232 <lv_indev_get_point>:
    if(indev == NULL) {
24007232:	b910      	cbnz	r0, 2400723a <lv_indev_get_point+0x8>
        point->x = 0;
24007234:	8008      	strh	r0, [r1, #0]
        point->y = 0;
24007236:	8048      	strh	r0, [r1, #2]
}
24007238:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
2400723a:	7803      	ldrb	r3, [r0, #0]
2400723c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
24007240:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
24007242:	bf0d      	iteet	eq
24007244:	f9b0 3020 	ldrsheq.w	r3, [r0, #32]
        point->x = -1;
24007248:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = -1;
2400724c:	f04f 30ff 	movne.w	r0, #4294967295
        point->x = indev->proc.types.pointer.act_point.x;
24007250:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
24007252:	bf14      	ite	ne
24007254:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
24007256:	f9b0 0022 	ldrsheq.w	r0, [r0, #34]	; 0x22
2400725a:	e7ec      	b.n	24007236 <lv_indev_get_point+0x4>

2400725c <lv_indev_is_dragging>:
    if(indev == NULL) return false;
2400725c:	b150      	cbz	r0, 24007274 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
2400725e:	7803      	ldrb	r3, [r0, #0]
24007260:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
24007264:	2b01      	cmp	r3, #1
24007266:	d104      	bne.n	24007272 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
24007268:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
2400726c:	f3c0 0040 	ubfx	r0, r0, #1, #1
24007270:	4770      	bx	lr
    if(indev == NULL) return false;
24007272:	2000      	movs	r0, #0
}
24007274:	4770      	bx	lr

24007276 <lv_indev_get_vect>:
    if(indev == NULL) {
24007276:	b918      	cbnz	r0, 24007280 <lv_indev_get_vect+0xa>
        point->x = 0;
24007278:	2300      	movs	r3, #0
2400727a:	800b      	strh	r3, [r1, #0]
        point->y = 0;
2400727c:	804b      	strh	r3, [r1, #2]
}
2400727e:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
24007280:	7803      	ldrb	r3, [r0, #0]
24007282:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
24007286:	2b01      	cmp	r3, #1
24007288:	d1f6      	bne.n	24007278 <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
2400728a:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
2400728e:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
24007290:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
24007294:	e7f2      	b.n	2400727c <lv_indev_get_vect+0x6>

24007296 <lv_indev_finish_drag>:
{
24007296:	b510      	push	{r4, lr}
    if(indev == NULL) return LV_RES_OK;
24007298:	b908      	cbnz	r0, 2400729e <lv_indev_finish_drag+0x8>
2400729a:	2001      	movs	r0, #1
}
2400729c:	bd10      	pop	{r4, pc}
    if(indev->driver.type != LV_INDEV_TYPE_POINTER) return LV_RES_OK;
2400729e:	7803      	ldrb	r3, [r0, #0]
240072a0:	2b01      	cmp	r3, #1
240072a2:	d1fa      	bne.n	2400729a <lv_indev_finish_drag+0x4>
    if(indev->proc.types.pointer.drag_in_prog == 0) return LV_RES_OK;
240072a4:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
240072a8:	079a      	lsls	r2, r3, #30
240072aa:	d5f6      	bpl.n	2400729a <lv_indev_finish_drag+0x4>
    indev->proc.types.pointer.drag_in_prog = 0;
240072ac:	f36f 0341 	bfc	r3, #1, #1
    indev->proc.types.pointer.drag_throw_vect.x = 0;
240072b0:	2200      	movs	r2, #0
    indev->proc.types.pointer.drag_in_prog = 0;
240072b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    indev->proc.types.pointer.drag_throw_vect.x = 0;
240072b6:	6302      	str	r2, [r0, #48]	; 0x30
    drag_obj = get_dragged_obj(indev->proc.types.pointer.act_obj);
240072b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
240072ba:	f7ff fde7 	bl	24006e8c <get_dragged_obj>
    if(drag_obj == NULL) return LV_RES_OK;
240072be:	4604      	mov	r4, r0
240072c0:	2800      	cmp	r0, #0
240072c2:	d0ea      	beq.n	2400729a <lv_indev_finish_drag+0x4>
    res = drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, NULL);
240072c4:	2200      	movs	r2, #0
240072c6:	69c3      	ldr	r3, [r0, #28]
240072c8:	2113      	movs	r1, #19
240072ca:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
240072cc:	2801      	cmp	r0, #1
240072ce:	f04f 0200 	mov.w	r2, #0
240072d2:	d1e3      	bne.n	2400729c <lv_indev_finish_drag+0x6>
    res = lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
240072d4:	4620      	mov	r0, r4
240072d6:	2109      	movs	r1, #9
}
240072d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    res = lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
240072dc:	f000 bd7c 	b.w	24007dd8 <lv_event_send>

240072e0 <lv_indev_search_obj>:
{
240072e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
240072e2:	4605      	mov	r5, r0
240072e4:	460e      	mov	r6, r1
    if(lv_obj_hittest(obj, point)) {
240072e6:	f001 ff56 	bl	24009196 <lv_obj_hittest>
240072ea:	b910      	cbnz	r0, 240072f2 <lv_indev_search_obj+0x12>
    lv_obj_t * found_p = NULL;
240072ec:	2000      	movs	r0, #0
}
240072ee:	b003      	add	sp, #12
240072f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _LV_LL_READ(obj->child_ll, i) {
240072f2:	1d2f      	adds	r7, r5, #4
240072f4:	4638      	mov	r0, r7
240072f6:	f008 f9ff 	bl	2400f6f8 <_lv_ll_get_head>
240072fa:	4604      	mov	r4, r0
240072fc:	b930      	cbnz	r0, 2400730c <lv_indev_search_obj+0x2c>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
240072fe:	4628      	mov	r0, r5
24007300:	f001 f9d3 	bl	240086aa <lv_obj_get_click>
24007304:	2800      	cmp	r0, #0
24007306:	d0f1      	beq.n	240072ec <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
24007308:	4629      	mov	r1, r5
2400730a:	e015      	b.n	24007338 <lv_indev_search_obj+0x58>
            found_p = lv_indev_search_obj(i, point);
2400730c:	4631      	mov	r1, r6
2400730e:	4620      	mov	r0, r4
24007310:	f7ff ffe6 	bl	240072e0 <lv_indev_search_obj>
            if(found_p != NULL) {
24007314:	2800      	cmp	r0, #0
24007316:	d1ea      	bne.n	240072ee <lv_indev_search_obj+0xe>
        _LV_LL_READ(obj->child_ll, i) {
24007318:	4621      	mov	r1, r4
2400731a:	4638      	mov	r0, r7
2400731c:	f008 f9f2 	bl	2400f704 <_lv_ll_get_next>
24007320:	e7eb      	b.n	240072fa <lv_indev_search_obj+0x1a>
                if(lv_obj_get_hidden(hidden_i) == true) break;
24007322:	4608      	mov	r0, r1
24007324:	9101      	str	r1, [sp, #4]
24007326:	f001 f9bb 	bl	240086a0 <lv_obj_get_hidden>
2400732a:	2800      	cmp	r0, #0
2400732c:	d1de      	bne.n	240072ec <lv_indev_search_obj+0xc>
                hidden_i = lv_obj_get_parent(hidden_i);
2400732e:	9901      	ldr	r1, [sp, #4]
24007330:	4608      	mov	r0, r1
24007332:	f000 ff9b 	bl	2400826c <lv_obj_get_parent>
24007336:	4601      	mov	r1, r0
            while(hidden_i != NULL) {
24007338:	2900      	cmp	r1, #0
2400733a:	d1f2      	bne.n	24007322 <lv_indev_search_obj+0x42>
            if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
2400733c:	4628      	mov	r0, r5
2400733e:	f001 f9db 	bl	240086f8 <lv_obj_get_state>
24007342:	0683      	lsls	r3, r0, #26
24007344:	d4d2      	bmi.n	240072ec <lv_indev_search_obj+0xc>
24007346:	4628      	mov	r0, r5
    return found_p;
24007348:	e7d1      	b.n	240072ee <lv_indev_search_obj+0xe>
	...

2400734c <indev_proc_press>:
{
2400734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24007350:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
24007352:	4d8a      	ldr	r5, [pc, #552]	; (2400757c <indev_proc_press+0x230>)
24007354:	6980      	ldr	r0, [r0, #24]
{
24007356:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
24007358:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
2400735c:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
2400735e:	071b      	lsls	r3, r3, #28
24007360:	f100 818b 	bmi.w	2400767a <indev_proc_press+0x32e>
    lv_disp_t * disp = indev_act->driver.disp;
24007364:	f8df 8218 	ldr.w	r8, [pc, #536]	; 24007580 <indev_proc_press+0x234>
24007368:	f8d8 3000 	ldr.w	r3, [r8]
2400736c:	68de      	ldr	r6, [r3, #12]
    if(indev_obj_act == NULL) {
2400736e:	b9f8      	cbnz	r0, 240073b0 <indev_proc_press+0x64>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
24007370:	1d27      	adds	r7, r4, #4
24007372:	4630      	mov	r0, r6
24007374:	f7ff fd57 	bl	24006e26 <lv_disp_get_layer_sys>
24007378:	4639      	mov	r1, r7
2400737a:	f7ff ffb1 	bl	240072e0 <lv_indev_search_obj>
2400737e:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
24007380:	b970      	cbnz	r0, 240073a0 <indev_proc_press+0x54>
24007382:	4630      	mov	r0, r6
24007384:	f7ff fd48 	bl	24006e18 <lv_disp_get_layer_top>
24007388:	4639      	mov	r1, r7
2400738a:	f7ff ffa9 	bl	240072e0 <lv_indev_search_obj>
2400738e:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
24007390:	b930      	cbnz	r0, 240073a0 <indev_proc_press+0x54>
24007392:	4630      	mov	r0, r6
24007394:	f7ff fd26 	bl	24006de4 <lv_disp_get_scr_act>
24007398:	4639      	mov	r1, r7
2400739a:	f7ff ffa1 	bl	240072e0 <lv_indev_search_obj>
2400739e:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
240073a0:	69e3      	ldr	r3, [r4, #28]
240073a2:	b173      	cbz	r3, 240073c2 <indev_proc_press+0x76>
        proc->types.pointer.drag_throw_vect.x = 0;
240073a4:	2300      	movs	r3, #0
        indev_drag_throw(proc);
240073a6:	4620      	mov	r0, r4
        proc->types.pointer.drag_throw_vect.x = 0;
240073a8:	6163      	str	r3, [r4, #20]
        indev_drag_throw(proc);
240073aa:	f7ff fd81 	bl	24006eb0 <indev_drag_throw>
240073ae:	e008      	b.n	240073c2 <indev_proc_press+0x76>
    else if(proc->types.pointer.drag_in_prog == 0 &&
240073b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
240073b4:	079f      	lsls	r7, r3, #30
240073b6:	d404      	bmi.n	240073c2 <indev_proc_press+0x76>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
240073b8:	2110      	movs	r1, #16
240073ba:	f001 f996 	bl	240086ea <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
240073be:	2800      	cmp	r0, #0
240073c0:	d0d6      	beq.n	24007370 <indev_proc_press+0x24>
    if(indev_obj_act != proc->types.pointer.act_obj) {
240073c2:	69a6      	ldr	r6, [r4, #24]
240073c4:	682a      	ldr	r2, [r5, #0]
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
240073c6:	6863      	ldr	r3, [r4, #4]
    if(indev_obj_act != proc->types.pointer.act_obj) {
240073c8:	4296      	cmp	r6, r2
240073ca:	f040 80db 	bne.w	24007584 <indev_proc_press+0x238>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
240073ce:	8923      	ldrh	r3, [r4, #8]
240073d0:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
240073d2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
240073d6:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
240073d8:	88e1      	ldrh	r1, [r4, #6]
240073da:	8963      	ldrh	r3, [r4, #10]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
240073dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
240073e0:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
240073e2:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
240073e4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
240073e8:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
240073ea:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
240073ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
240073f0:	b209      	sxth	r1, r1
    if(proc->types.pointer.drag_throw_vect.x < 0)
240073f2:	2a00      	cmp	r2, #0
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
240073f4:	ea4f 03e3 	mov.w	r3, r3, asr #3
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
240073f8:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
240073fa:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
240073fc:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
240073fe:	f280 8160 	bge.w	240076c2 <indev_proc_press+0x376>
        proc->types.pointer.drag_throw_vect.x++;
24007402:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
24007404:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
24007406:	2b00      	cmp	r3, #0
24007408:	f280 815f 	bge.w	240076ca <indev_proc_press+0x37e>
        proc->types.pointer.drag_throw_vect.y++;
2400740c:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
2400740e:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
24007410:	8aa3      	ldrh	r3, [r4, #20]
24007412:	eb03 0360 	add.w	r3, r3, r0, asr #1
    if(indev_obj_act != NULL) {
24007416:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
24007418:	82a3      	strh	r3, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
2400741a:	8ae3      	ldrh	r3, [r4, #22]
2400741c:	eb03 0361 	add.w	r3, r3, r1, asr #1
24007420:	82e3      	strh	r3, [r4, #22]
    if(indev_obj_act != NULL) {
24007422:	2800      	cmp	r0, #0
24007424:	f000 8129 	beq.w	2400767a <indev_proc_press+0x32e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
24007428:	f8d8 2000 	ldr.w	r2, [r8]
2400742c:	210c      	movs	r1, #12
2400742e:	69c3      	ldr	r3, [r0, #28]
24007430:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
24007432:	4620      	mov	r0, r4
24007434:	f7ff fcfe 	bl	24006e34 <indev_reset_check>
24007438:	4602      	mov	r2, r0
2400743a:	2800      	cmp	r0, #0
2400743c:	f040 811d 	bne.w	2400767a <indev_proc_press+0x32e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
24007440:	2101      	movs	r1, #1
24007442:	6828      	ldr	r0, [r5, #0]
24007444:	f000 fcc8 	bl	24007dd8 <lv_event_send>
        if(indev_reset_check(proc)) return;
24007448:	4620      	mov	r0, r4
2400744a:	f7ff fcf3 	bl	24006e34 <indev_reset_check>
2400744e:	4681      	mov	r9, r0
24007450:	2800      	cmp	r0, #0
24007452:	f040 8112 	bne.w	2400767a <indev_proc_press+0x32e>
        if(indev_act->proc.wait_until_release) return;
24007456:	f8d8 3000 	ldr.w	r3, [r8]
2400745a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2400745e:	0719      	lsls	r1, r3, #28
24007460:	f100 810b 	bmi.w	2400767a <indev_proc_press+0x32e>
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
24007464:	69a0      	ldr	r0, [r4, #24]
24007466:	f7ff fd11 	bl	24006e8c <get_dragged_obj>
    if(drag_obj == NULL) return;
2400746a:	4606      	mov	r6, r0
2400746c:	2800      	cmp	r0, #0
2400746e:	f000 81b8 	beq.w	240077e2 <indev_proc_press+0x496>
    if(lv_obj_get_drag(drag_obj) == false) return;
24007472:	f001 f91f 	bl	240086b4 <lv_obj_get_drag>
24007476:	4682      	mov	sl, r0
24007478:	2800      	cmp	r0, #0
2400747a:	f000 81b2 	beq.w	240077e2 <indev_proc_press+0x496>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
2400747e:	4630      	mov	r0, r6
24007480:	f001 f91d 	bl	240086be <lv_obj_get_drag_dir>
    if(proc->types.pointer.drag_limit_out == 0) {
24007484:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
24007488:	4607      	mov	r7, r0
    if(proc->types.pointer.drag_limit_out == 0) {
2400748a:	07da      	lsls	r2, r3, #31
2400748c:	d440      	bmi.n	24007510 <indev_proc_press+0x1c4>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
2400748e:	8a22      	ldrh	r2, [r4, #16]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
24007490:	2801      	cmp	r0, #1
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
24007492:	89a3      	ldrh	r3, [r4, #12]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
24007494:	89e1      	ldrh	r1, [r4, #14]
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
24007496:	441a      	add	r2, r3
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
24007498:	8a63      	ldrh	r3, [r4, #18]
2400749a:	440b      	add	r3, r1
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
2400749c:	b212      	sxth	r2, r2
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
2400749e:	b21b      	sxth	r3, r3
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
240074a0:	8222      	strh	r2, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
240074a2:	8263      	strh	r3, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
240074a4:	d013      	beq.n	240074ce <indev_proc_press+0x182>
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
240074a6:	1e81      	subs	r1, r0, #2
240074a8:	b2c9      	uxtb	r1, r1
240074aa:	2901      	cmp	r1, #1
240074ac:	f240 82a0 	bls.w	240079f0 <indev_proc_press+0x6a4>
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
240074b0:	2804      	cmp	r0, #4
240074b2:	f040 8196 	bne.w	240077e2 <indev_proc_press+0x496>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
240074b6:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
240074ba:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
240074be:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
240074c2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
240074c6:	b280      	uxth	r0, r0
240074c8:	b289      	uxth	r1, r1
240074ca:	4288      	cmp	r0, r1
240074cc:	d90c      	bls.n	240074e8 <indev_proc_press+0x19c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
240074ce:	2a00      	cmp	r2, #0
240074d0:	f8d8 1000 	ldr.w	r1, [r8]
240074d4:	bfb8      	it	lt
240074d6:	4252      	neglt	r2, r2
240074d8:	7d09      	ldrb	r1, [r1, #20]
240074da:	b292      	uxth	r2, r2
240074dc:	4291      	cmp	r1, r2
240074de:	d90d      	bls.n	240074fc <indev_proc_press+0x1b0>
240074e0:	f1b9 0f00 	cmp.w	r9, #0
240074e4:	f000 817d 	beq.w	240077e2 <indev_proc_press+0x496>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
240074e8:	2b00      	cmp	r3, #0
240074ea:	f8d8 2000 	ldr.w	r2, [r8]
240074ee:	bfb8      	it	lt
240074f0:	425b      	neglt	r3, r3
240074f2:	7d12      	ldrb	r2, [r2, #20]
240074f4:	b29b      	uxth	r3, r3
240074f6:	429a      	cmp	r2, r3
240074f8:	f200 8173 	bhi.w	240077e2 <indev_proc_press+0x496>
            proc->types.pointer.drag_limit_out = 1;
240074fc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24007500:	f043 0301 	orr.w	r3, r3, #1
24007504:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    if(proc->types.pointer.drag_limit_out != 0) {
24007508:	07db      	lsls	r3, r3, #31
2400750a:	f140 816a 	bpl.w	240077e2 <indev_proc_press+0x496>
            drag_just_started                   = true;
2400750e:	46d1      	mov	r9, sl
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
24007510:	68e3      	ldr	r3, [r4, #12]
24007512:	2b00      	cmp	r3, #0
24007514:	f000 8165 	beq.w	240077e2 <indev_proc_press+0x496>
            lv_coord_t prev_x     = drag_obj->coords.x1;
24007518:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
2400751c:	4630      	mov	r0, r6
            lv_coord_t prev_x     = drag_obj->coords.x1;
2400751e:	9300      	str	r3, [sp, #0]
            lv_coord_t prev_y     = drag_obj->coords.y1;
24007520:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
24007524:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
24007526:	f000 fea1 	bl	2400826c <lv_obj_get_parent>
2400752a:	f001 f870 	bl	2400860e <lv_obj_get_width>
2400752e:	9002      	str	r0, [sp, #8]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
24007530:	4630      	mov	r0, r6
24007532:	f000 fe9b 	bl	2400826c <lv_obj_get_parent>
24007536:	f001 f870 	bl	2400861a <lv_obj_get_height>
2400753a:	4683      	mov	fp, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
2400753c:	4630      	mov	r0, r6
2400753e:	f000 fec4 	bl	240082ca <lv_obj_get_x>
24007542:	4682      	mov	sl, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
24007544:	4630      	mov	r0, r6
24007546:	f000 fed3 	bl	240082f0 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
2400754a:	2f03      	cmp	r7, #3
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
2400754c:	4602      	mov	r2, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
2400754e:	f040 80c0 	bne.w	240076d2 <indev_proc_press+0x386>
                if(drag_just_started) {
24007552:	f1b9 0f00 	cmp.w	r9, #0
24007556:	d00c      	beq.n	24007572 <indev_proc_press+0x226>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
24007558:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400755c:	f367 0384 	bfi	r3, r7, #2, #3
24007560:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
24007564:	8a23      	ldrh	r3, [r4, #16]
24007566:	4453      	add	r3, sl
24007568:	fa0f fa83 	sxth.w	sl, r3
                    act_y += proc->types.pointer.drag_sum.y;
2400756c:	8a63      	ldrh	r3, [r4, #18]
2400756e:	4403      	add	r3, r0
24007570:	b21a      	sxth	r2, r3
                act_x += proc->types.pointer.vect.x;
24007572:	89a3      	ldrh	r3, [r4, #12]
24007574:	4453      	add	r3, sl
24007576:	fa0f fa83 	sxth.w	sl, r3
2400757a:	e0ce      	b.n	2400771a <indev_proc_press+0x3ce>
2400757c:	2402d9f4 	.word	0x2402d9f4
24007580:	2402d9f0 	.word	0x2402d9f0
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
24007584:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
24007586:	2e00      	cmp	r6, #0
24007588:	d163      	bne.n	24007652 <indev_proc_press+0x306>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
2400758a:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
2400758c:	e9c4 3306 	strd	r3, r3, [r4, #24]
        if(indev_obj_act != NULL) {
24007590:	2b00      	cmp	r3, #0
24007592:	f43f af1c 	beq.w	240073ce <indev_proc_press+0x82>
            proc->pr_timestamp                 = lv_tick_get();
24007596:	f007 fd81 	bl	2400f09c <lv_tick_get>
            proc->types.pointer.drag_limit_out = 0;
2400759a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->long_pr_sent                 = 0;
2400759e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.gesture_sum.x  = 0;
240075a2:	2600      	movs	r6, #0
            proc->types.pointer.drag_limit_out = 0;
240075a4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
            proc->pr_timestamp                 = lv_tick_get();
240075a8:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
240075aa:	f36f 0300 	bfc	r3, #0, #1
            lv_obj_t * i        = indev_obj_act;
240075ae:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.drag_limit_out = 0;
240075b0:	f042 020c 	orr.w	r2, r2, #12
            proc->types.pointer.gesture_sum.x  = 0;
240075b4:	84e6      	strh	r6, [r4, #38]	; 0x26
            proc->long_pr_sent                 = 0;
240075b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.gesture_sum.y  = 0;
240075ba:	8526      	strh	r6, [r4, #40]	; 0x28
            proc->types.pointer.drag_limit_out = 0;
240075bc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
240075c0:	e9c4 6603 	strd	r6, r6, [r4, #12]
            while(i != NULL) {
240075c4:	2800      	cmp	r0, #0
240075c6:	d15b      	bne.n	24007680 <indev_proc_press+0x334>
            if(last_top != NULL) {
240075c8:	b116      	cbz	r6, 240075d0 <indev_proc_press+0x284>
                lv_obj_move_foreground(last_top);
240075ca:	4630      	mov	r0, r6
240075cc:	f000 fd2e 	bl	2400802c <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
240075d0:	6828      	ldr	r0, [r5, #0]
240075d2:	210b      	movs	r1, #11
240075d4:	f8d8 2000 	ldr.w	r2, [r8]
240075d8:	69c3      	ldr	r3, [r0, #28]
240075da:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
240075dc:	4620      	mov	r0, r4
240075de:	f7ff fc29 	bl	24006e34 <indev_reset_check>
240075e2:	4602      	mov	r2, r0
240075e4:	2800      	cmp	r0, #0
240075e6:	d148      	bne.n	2400767a <indev_proc_press+0x32e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
240075e8:	4601      	mov	r1, r0
240075ea:	6828      	ldr	r0, [r5, #0]
240075ec:	f000 fbf4 	bl	24007dd8 <lv_event_send>
            if(indev_reset_check(proc)) return;
240075f0:	4620      	mov	r0, r4
240075f2:	f7ff fc1f 	bl	24006e34 <indev_reset_check>
240075f6:	2800      	cmp	r0, #0
240075f8:	d13f      	bne.n	2400767a <indev_proc_press+0x32e>
            if(indev_act->proc.wait_until_release) return;
240075fa:	f8d8 7000 	ldr.w	r7, [r8]
240075fe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
24007602:	0718      	lsls	r0, r3, #28
24007604:	d439      	bmi.n	2400767a <indev_proc_press+0x32e>
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
24007606:	6828      	ldr	r0, [r5, #0]
24007608:	f002 fada 	bl	24009bc0 <lv_obj_get_focused_obj>
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
2400760c:	2120      	movs	r1, #32
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
2400760e:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
24007610:	6828      	ldr	r0, [r5, #0]
24007612:	f001 f86a 	bl	240086ea <lv_obj_is_protected>
24007616:	4602      	mov	r2, r0
24007618:	2800      	cmp	r0, #0
2400761a:	d14b      	bne.n	240076b4 <indev_proc_press+0x368>
       proc->types.pointer.last_pressed != obj_to_focus) {
2400761c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
2400761e:	4286      	cmp	r6, r0
24007620:	d048      	beq.n	240076b4 <indev_proc_press+0x368>
            indev_click_focus(&indev_act->proc);
24007622:	f107 091c 	add.w	r9, r7, #28
        if(proc->types.pointer.last_pressed) {
24007626:	bba0      	cbnz	r0, 24007692 <indev_proc_press+0x346>
        lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
24007628:	2200      	movs	r2, #0
2400762a:	2116      	movs	r1, #22
2400762c:	4630      	mov	r0, r6
2400762e:	f000 fbe5 	bl	24007dfc <lv_signal_send>
        if(indev_reset_check(proc)) return;
24007632:	4648      	mov	r0, r9
24007634:	f7ff fbfe 	bl	24006e34 <indev_reset_check>
24007638:	4602      	mov	r2, r0
2400763a:	2800      	cmp	r0, #0
2400763c:	d13a      	bne.n	240076b4 <indev_proc_press+0x368>
        lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
2400763e:	210d      	movs	r1, #13
24007640:	4630      	mov	r0, r6
24007642:	f000 fbc9 	bl	24007dd8 <lv_event_send>
        if(indev_reset_check(proc)) return;
24007646:	4648      	mov	r0, r9
24007648:	f7ff fbf4 	bl	24006e34 <indev_reset_check>
2400764c:	bb90      	cbnz	r0, 240076b4 <indev_proc_press+0x368>
        proc->types.pointer.last_pressed = obj_to_focus;
2400764e:	63fe      	str	r6, [r7, #60]	; 0x3c
24007650:	e030      	b.n	240076b4 <indev_proc_press+0x368>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
24007652:	f8d8 2000 	ldr.w	r2, [r8]
24007656:	210d      	movs	r1, #13
24007658:	69f3      	ldr	r3, [r6, #28]
2400765a:	4630      	mov	r0, r6
2400765c:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
2400765e:	4620      	mov	r0, r4
24007660:	f7ff fbe8 	bl	24006e34 <indev_reset_check>
24007664:	4602      	mov	r2, r0
24007666:	b940      	cbnz	r0, 2400767a <indev_proc_press+0x32e>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
24007668:	2102      	movs	r1, #2
2400766a:	4630      	mov	r0, r6
2400766c:	f000 fbb4 	bl	24007dd8 <lv_event_send>
            if(indev_reset_check(proc)) return;
24007670:	4620      	mov	r0, r4
24007672:	f7ff fbdf 	bl	24006e34 <indev_reset_check>
24007676:	2800      	cmp	r0, #0
24007678:	d087      	beq.n	2400758a <indev_proc_press+0x23e>
}
2400767a:	b005      	add	sp, #20
2400767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
24007680:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007684:	f013 0f20 	tst.w	r3, #32
24007688:	bf18      	it	ne
2400768a:	4606      	movne	r6, r0
                i = lv_obj_get_parent(i);
2400768c:	f000 fdee 	bl	2400826c <lv_obj_get_parent>
24007690:	e798      	b.n	240075c4 <indev_proc_press+0x278>
            lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
24007692:	2117      	movs	r1, #23
24007694:	f000 fbb2 	bl	24007dfc <lv_signal_send>
            if(indev_reset_check(proc)) return;
24007698:	4648      	mov	r0, r9
2400769a:	f7ff fbcb 	bl	24006e34 <indev_reset_check>
2400769e:	4602      	mov	r2, r0
240076a0:	b940      	cbnz	r0, 240076b4 <indev_proc_press+0x368>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
240076a2:	210e      	movs	r1, #14
240076a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
240076a6:	f000 fb97 	bl	24007dd8 <lv_event_send>
            if(indev_reset_check(proc)) return;
240076aa:	4648      	mov	r0, r9
240076ac:	f7ff fbc2 	bl	24006e34 <indev_reset_check>
240076b0:	2800      	cmp	r0, #0
240076b2:	d0b9      	beq.n	24007628 <indev_proc_press+0x2dc>
            if(indev_reset_check(proc)) return;
240076b4:	4620      	mov	r0, r4
240076b6:	f7ff fbbd 	bl	24006e34 <indev_reset_check>
240076ba:	2800      	cmp	r0, #0
240076bc:	f43f ae87 	beq.w	240073ce <indev_proc_press+0x82>
240076c0:	e7db      	b.n	2400767a <indev_proc_press+0x32e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
240076c2:	f43f aea0 	beq.w	24007406 <indev_proc_press+0xba>
        proc->types.pointer.drag_throw_vect.x--;
240076c6:	3a01      	subs	r2, #1
240076c8:	e69c      	b.n	24007404 <indev_proc_press+0xb8>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
240076ca:	f43f aea1 	beq.w	24007410 <indev_proc_press+0xc4>
        proc->types.pointer.drag_throw_vect.y--;
240076ce:	3b01      	subs	r3, #1
240076d0:	e69d      	b.n	2400740e <indev_proc_press+0xc2>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
240076d2:	2f01      	cmp	r7, #1
240076d4:	d110      	bne.n	240076f8 <indev_proc_press+0x3ac>
                if(drag_just_started) {
240076d6:	f1b9 0f00 	cmp.w	r9, #0
240076da:	f43f af4a 	beq.w	24007572 <indev_proc_press+0x226>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
240076de:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
240076e2:	f367 0384 	bfi	r3, r7, #2, #3
240076e6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
240076ea:	2300      	movs	r3, #0
240076ec:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
240076ee:	8a23      	ldrh	r3, [r4, #16]
240076f0:	4453      	add	r3, sl
240076f2:	fa0f fa83 	sxth.w	sl, r3
240076f6:	e73c      	b.n	24007572 <indev_proc_press+0x226>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
240076f8:	2f02      	cmp	r7, #2
240076fa:	f040 812f 	bne.w	2400795c <indev_proc_press+0x610>
                if(drag_just_started) {
240076fe:	f1b9 0f00 	cmp.w	r9, #0
24007702:	d00a      	beq.n	2400771a <indev_proc_press+0x3ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
24007704:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24007708:	f367 0384 	bfi	r3, r7, #2, #3
2400770c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
24007710:	2300      	movs	r3, #0
24007712:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
24007714:	8a63      	ldrh	r3, [r4, #18]
24007716:	4403      	add	r3, r0
24007718:	b21a      	sxth	r2, r3
            if(allowed_dirs == LV_DRAG_DIR_VER ||
2400771a:	1ebb      	subs	r3, r7, #2
2400771c:	b2db      	uxtb	r3, r3
2400771e:	2b01      	cmp	r3, #1
24007720:	d90f      	bls.n	24007742 <indev_proc_press+0x3f6>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
24007722:	2f04      	cmp	r7, #4
24007724:	d110      	bne.n	24007748 <indev_proc_press+0x3fc>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
24007726:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
2400772a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
2400772e:	2800      	cmp	r0, #0
24007730:	bfb8      	it	lt
24007732:	4240      	neglt	r0, r0
24007734:	2b00      	cmp	r3, #0
24007736:	bfb8      	it	lt
24007738:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
2400773a:	b280      	uxth	r0, r0
2400773c:	b29b      	uxth	r3, r3
2400773e:	4298      	cmp	r0, r3
24007740:	d202      	bcs.n	24007748 <indev_proc_press+0x3fc>
                act_y += proc->types.pointer.vect.y;
24007742:	89e3      	ldrh	r3, [r4, #14]
24007744:	4413      	add	r3, r2
24007746:	b21a      	sxth	r2, r3
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
24007748:	f8d8 3000 	ldr.w	r3, [r8]
2400774c:	9203      	str	r2, [sp, #12]
2400774e:	68d8      	ldr	r0, [r3, #12]
24007750:	f007 fb92 	bl	2400ee78 <lv_disp_get_inv_buf_size>
            lv_obj_set_pos(drag_obj, act_x, act_y);
24007754:	9a03      	ldr	r2, [sp, #12]
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
24007756:	4607      	mov	r7, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
24007758:	4651      	mov	r1, sl
2400775a:	4630      	mov	r0, r6
2400775c:	f000 fc83 	bl	24008066 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
24007760:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
24007764:	9a00      	ldr	r2, [sp, #0]
            proc->types.pointer.drag_in_prog = 1;
24007766:	f043 0302 	orr.w	r3, r3, #2
2400776a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
2400776e:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
24007772:	4293      	cmp	r3, r2
24007774:	d120      	bne.n	240077b8 <indev_proc_press+0x46c>
24007776:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
2400777a:	9a01      	ldr	r2, [sp, #4]
2400777c:	4293      	cmp	r3, r2
2400777e:	d11b      	bne.n	240077b8 <indev_proc_press+0x46c>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
24007780:	4630      	mov	r0, r6
24007782:	f000 fd73 	bl	2400826c <lv_obj_get_parent>
24007786:	f000 ff42 	bl	2400860e <lv_obj_get_width>
2400778a:	4682      	mov	sl, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
2400778c:	4630      	mov	r0, r6
2400778e:	f000 fd6d 	bl	2400826c <lv_obj_get_parent>
24007792:	f000 ff42 	bl	2400861a <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
24007796:	9b02      	ldr	r3, [sp, #8]
24007798:	4553      	cmp	r3, sl
2400779a:	d10d      	bne.n	240077b8 <indev_proc_press+0x46c>
2400779c:	4583      	cmp	fp, r0
2400779e:	d10b      	bne.n	240077b8 <indev_proc_press+0x46c>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
240077a0:	f8d8 3000 	ldr.w	r3, [r8]
240077a4:	68d8      	ldr	r0, [r3, #12]
240077a6:	f007 fb67 	bl	2400ee78 <lv_disp_get_inv_buf_size>
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
240077aa:	f8d8 3000 	ldr.w	r3, [r8]
240077ae:	1bc0      	subs	r0, r0, r7
240077b0:	b281      	uxth	r1, r0
240077b2:	68d8      	ldr	r0, [r3, #12]
240077b4:	f007 fb65 	bl	2400ee82 <_lv_disp_pop_from_inv_buf>
            if(drag_just_started) {
240077b8:	f1b9 0f00 	cmp.w	r9, #0
240077bc:	d011      	beq.n	240077e2 <indev_proc_press+0x496>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
240077be:	f8d8 2000 	ldr.w	r2, [r8]
240077c2:	2111      	movs	r1, #17
240077c4:	69f3      	ldr	r3, [r6, #28]
240077c6:	4630      	mov	r0, r6
240077c8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
240077ca:	4620      	mov	r0, r4
240077cc:	f7ff fb32 	bl	24006e34 <indev_reset_check>
240077d0:	4602      	mov	r2, r0
240077d2:	b930      	cbnz	r0, 240077e2 <indev_proc_press+0x496>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
240077d4:	2108      	movs	r1, #8
240077d6:	4630      	mov	r0, r6
240077d8:	f000 fafe 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
240077dc:	4620      	mov	r0, r4
240077de:	f7ff fb29 	bl	24006e34 <indev_reset_check>
    if(proc->types.pointer.gesture_sent) return;
240077e2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
240077e6:	0698      	lsls	r0, r3, #26
240077e8:	d457      	bmi.n	2400789a <indev_proc_press+0x54e>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
240077ea:	69a6      	ldr	r6, [r4, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
240077ec:	2e00      	cmp	r6, #0
240077ee:	d054      	beq.n	2400789a <indev_proc_press+0x54e>
240077f0:	4630      	mov	r0, r6
240077f2:	f000 ff73 	bl	240086dc <lv_obj_get_gesture_parent>
240077f6:	2800      	cmp	r0, #0
240077f8:	f040 80f0 	bne.w	240079dc <indev_proc_press+0x690>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
240077fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
24007800:	4b7e      	ldr	r3, [pc, #504]	; (240079fc <indev_proc_press+0x6b0>)
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
24007802:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
24007806:	681a      	ldr	r2, [r3, #0]
24007808:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
2400780c:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
24007810:	f892 c016 	ldrb.w	ip, [r2, #22]
24007814:	b29b      	uxth	r3, r3
24007816:	4563      	cmp	r3, ip
24007818:	d208      	bcs.n	2400782c <indev_proc_press+0x4e0>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
2400781a:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
2400781e:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
24007822:	b29b      	uxth	r3, r3
24007824:	459c      	cmp	ip, r3
        proc->types.pointer.gesture_sum.x = 0;
24007826:	bf84      	itt	hi
24007828:	84e0      	strhhi	r0, [r4, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
2400782a:	8520      	strhhi	r0, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
2400782c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
2400782e:	4419      	add	r1, r3
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
24007830:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
24007832:	b209      	sxth	r1, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
24007834:	443b      	add	r3, r7
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
24007836:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
2400783a:	84e1      	strh	r1, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
2400783c:	b21b      	sxth	r3, r3
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
2400783e:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
24007842:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
24007846:	8523      	strh	r3, [r4, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
24007848:	b2bf      	uxth	r7, r7
2400784a:	f892 c017 	ldrb.w	ip, [r2, #23]
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
2400784e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
24007852:	4567      	cmp	r7, ip
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
24007854:	b280      	uxth	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
24007856:	d801      	bhi.n	2400785c <indev_proc_press+0x510>
24007858:	4584      	cmp	ip, r0
2400785a:	d21e      	bcs.n	2400789a <indev_proc_press+0x54e>
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
2400785c:	4287      	cmp	r7, r0
2400785e:	f240 80c2 	bls.w	240079e6 <indev_proc_press+0x69a>
            if(proc->types.pointer.gesture_sum.x > 0)
24007862:	2900      	cmp	r1, #0
24007864:	bfd4      	ite	le
24007866:	2302      	movle	r3, #2
24007868:	2303      	movgt	r3, #3
        proc->types.pointer.gesture_sent = 1;
2400786a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
2400786e:	4630      	mov	r0, r6
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
24007870:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        proc->types.pointer.gesture_sent = 1;
24007874:	f041 0120 	orr.w	r1, r1, #32
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
24007878:	69f3      	ldr	r3, [r6, #28]
        proc->types.pointer.gesture_sent = 1;
2400787a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
2400787e:	2114      	movs	r1, #20
24007880:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
24007882:	4620      	mov	r0, r4
24007884:	f7ff fad6 	bl	24006e34 <indev_reset_check>
24007888:	4602      	mov	r2, r0
2400788a:	b930      	cbnz	r0, 2400789a <indev_proc_press+0x54e>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
2400788c:	210b      	movs	r1, #11
2400788e:	4630      	mov	r0, r6
24007890:	f000 faa2 	bl	24007dd8 <lv_event_send>
        if(indev_reset_check(proc)) return;
24007894:	4620      	mov	r0, r4
24007896:	f7ff facd 	bl	24006e34 <indev_reset_check>
        if(indev_reset_check(proc)) return;
2400789a:	4620      	mov	r0, r4
2400789c:	f7ff faca 	bl	24006e34 <indev_reset_check>
240078a0:	2800      	cmp	r0, #0
240078a2:	f47f aeea 	bne.w	2400767a <indev_proc_press+0x32e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
240078a6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
240078aa:	0799      	lsls	r1, r3, #30
240078ac:	f53f aee5 	bmi.w	2400767a <indev_proc_press+0x32e>
240078b0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
240078b4:	4e51      	ldr	r6, [pc, #324]	; (240079fc <indev_proc_press+0x6b0>)
240078b6:	f013 0f01 	tst.w	r3, #1
240078ba:	d12e      	bne.n	2400791a <indev_proc_press+0x5ce>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
240078bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
240078be:	f007 fbfb 	bl	2400f0b8 <lv_tick_elaps>
240078c2:	6832      	ldr	r2, [r6, #0]
240078c4:	8b13      	ldrh	r3, [r2, #24]
240078c6:	4298      	cmp	r0, r3
240078c8:	d91d      	bls.n	24007906 <indev_proc_press+0x5ba>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
240078ca:	6828      	ldr	r0, [r5, #0]
240078cc:	210f      	movs	r1, #15
240078ce:	69c3      	ldr	r3, [r0, #28]
240078d0:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
240078d2:	4620      	mov	r0, r4
240078d4:	f7ff faae 	bl	24006e34 <indev_reset_check>
240078d8:	4602      	mov	r2, r0
240078da:	2800      	cmp	r0, #0
240078dc:	f47f aecd 	bne.w	2400767a <indev_proc_press+0x32e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
240078e0:	2104      	movs	r1, #4
240078e2:	6828      	ldr	r0, [r5, #0]
240078e4:	f000 fa78 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
240078e8:	4620      	mov	r0, r4
240078ea:	f7ff faa3 	bl	24006e34 <indev_reset_check>
240078ee:	2800      	cmp	r0, #0
240078f0:	f47f aec3 	bne.w	2400767a <indev_proc_press+0x32e>
                proc->long_pr_sent = 1;
240078f4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
240078f8:	f043 0301 	orr.w	r3, r3, #1
240078fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
24007900:	f007 fbcc 	bl	2400f09c <lv_tick_get>
24007904:	6320      	str	r0, [r4, #48]	; 0x30
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
24007906:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400790a:	079b      	lsls	r3, r3, #30
2400790c:	f53f aeb5 	bmi.w	2400767a <indev_proc_press+0x32e>
24007910:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
24007914:	07da      	lsls	r2, r3, #31
24007916:	f57f aeb0 	bpl.w	2400767a <indev_proc_press+0x32e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
2400791a:	6b20      	ldr	r0, [r4, #48]	; 0x30
2400791c:	f007 fbcc 	bl	2400f0b8 <lv_tick_elaps>
24007920:	6832      	ldr	r2, [r6, #0]
24007922:	8b53      	ldrh	r3, [r2, #26]
24007924:	4298      	cmp	r0, r3
24007926:	f67f aea8 	bls.w	2400767a <indev_proc_press+0x32e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
2400792a:	6828      	ldr	r0, [r5, #0]
2400792c:	2110      	movs	r1, #16
2400792e:	69c3      	ldr	r3, [r0, #28]
24007930:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
24007932:	4620      	mov	r0, r4
24007934:	f7ff fa7e 	bl	24006e34 <indev_reset_check>
24007938:	4602      	mov	r2, r0
2400793a:	2800      	cmp	r0, #0
2400793c:	f47f ae9d 	bne.w	2400767a <indev_proc_press+0x32e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
24007940:	2105      	movs	r1, #5
24007942:	6828      	ldr	r0, [r5, #0]
24007944:	f000 fa48 	bl	24007dd8 <lv_event_send>
                if(indev_reset_check(proc)) return;
24007948:	4620      	mov	r0, r4
2400794a:	f7ff fa73 	bl	24006e34 <indev_reset_check>
2400794e:	2800      	cmp	r0, #0
24007950:	f47f ae93 	bne.w	2400767a <indev_proc_press+0x32e>
                proc->longpr_rep_timestamp = lv_tick_get();
24007954:	f007 fba2 	bl	2400f09c <lv_tick_get>
24007958:	6320      	str	r0, [r4, #48]	; 0x30
2400795a:	e68e      	b.n	2400767a <indev_proc_press+0x32e>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
2400795c:	2f04      	cmp	r7, #4
2400795e:	f47f aedc 	bne.w	2400771a <indev_proc_press+0x3ce>
                if(drag_just_started) {
24007962:	f1b9 0f00 	cmp.w	r9, #0
24007966:	d01d      	beq.n	240079a4 <indev_proc_press+0x658>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
24007968:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
2400796c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
24007970:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
24007974:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
24007978:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
2400797c:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
24007980:	fa1f fe8e 	uxth.w	lr, lr
24007984:	fa1f fc8c 	uxth.w	ip, ip
24007988:	45e6      	cmp	lr, ip
2400798a:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
2400798e:	d919      	bls.n	240079c4 <indev_proc_press+0x678>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
24007990:	2301      	movs	r3, #1
                        act_x += proc->types.pointer.drag_sum.x;
24007992:	4450      	add	r0, sl
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
24007994:	f363 0c84 	bfi	ip, r3, #2, #3
                        act_x += proc->types.pointer.drag_sum.x;
24007998:	fa0f fa80 	sxth.w	sl, r0
                        proc->types.pointer.drag_sum.y = 0;
2400799c:	2300      	movs	r3, #0
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
2400799e:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
240079a2:	8263      	strh	r3, [r4, #18]
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
240079a4:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
240079a8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
240079ac:	2800      	cmp	r0, #0
240079ae:	bfb8      	it	lt
240079b0:	4240      	neglt	r0, r0
240079b2:	2b00      	cmp	r3, #0
240079b4:	bfb8      	it	lt
240079b6:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
240079b8:	b280      	uxth	r0, r0
240079ba:	b29b      	uxth	r3, r3
240079bc:	4298      	cmp	r0, r3
240079be:	f63f add8 	bhi.w	24007572 <indev_proc_press+0x226>
240079c2:	e6aa      	b.n	2400771a <indev_proc_press+0x3ce>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
240079c4:	4660      	mov	r0, ip
240079c6:	f04f 0c02 	mov.w	ip, #2
                        act_y += proc->types.pointer.drag_sum.y;
240079ca:	4413      	add	r3, r2
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
240079cc:	f36c 0084 	bfi	r0, ip, #2, #3
                        act_y += proc->types.pointer.drag_sum.y;
240079d0:	b21a      	sxth	r2, r3
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
240079d2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
240079d6:	2000      	movs	r0, #0
240079d8:	8220      	strh	r0, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
240079da:	e7e3      	b.n	240079a4 <indev_proc_press+0x658>
        gesture_obj = lv_obj_get_parent(gesture_obj);
240079dc:	4630      	mov	r0, r6
240079de:	f000 fc45 	bl	2400826c <lv_obj_get_parent>
240079e2:	4606      	mov	r6, r0
240079e4:	e702      	b.n	240077ec <indev_proc_press+0x4a0>
            if(proc->types.pointer.gesture_sum.y > 0)
240079e6:	2b00      	cmp	r3, #0
240079e8:	bfd4      	ite	le
240079ea:	2300      	movle	r3, #0
240079ec:	2301      	movgt	r3, #1
240079ee:	e73c      	b.n	2400786a <indev_proc_press+0x51e>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
240079f0:	2803      	cmp	r0, #3
240079f2:	f47f ad79 	bne.w	240074e8 <indev_proc_press+0x19c>
                ver_en = true;
240079f6:	46d1      	mov	r9, sl
240079f8:	e569      	b.n	240074ce <indev_proc_press+0x182>
240079fa:	bf00      	nop
240079fc:	2402d9f0 	.word	0x2402d9f0

24007a00 <_lv_indev_read_task>:
{
24007a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    indev_act = task->user_data;
24007a04:	68c0      	ldr	r0, [r0, #12]
24007a06:	4d43      	ldr	r5, [pc, #268]	; (24007b14 <_lv_indev_read_task+0x114>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
24007a08:	68c3      	ldr	r3, [r0, #12]
    indev_act = task->user_data;
24007a0a:	6028      	str	r0, [r5, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
24007a0c:	2b00      	cmp	r3, #0
24007a0e:	d07b      	beq.n	24007b08 <_lv_indev_read_task+0x108>
    indev_proc_reset_query_handler(indev_act);
24007a10:	f7ff fa1c 	bl	24006e4c <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
24007a14:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
24007a18:	075b      	lsls	r3, r3, #29
24007a1a:	d475      	bmi.n	24007b08 <_lv_indev_read_task+0x108>
        indev_obj_act = NULL;
24007a1c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 24007b18 <_lv_indev_read_task+0x118>
        more_to_read = _lv_indev_read(indev_act, &data);
24007a20:	4669      	mov	r1, sp
24007a22:	6828      	ldr	r0, [r5, #0]
24007a24:	f007 fb0a 	bl	2400f03c <_lv_indev_read>
24007a28:	4606      	mov	r6, r0
        indev_proc_reset_query_handler(indev_act);
24007a2a:	6828      	ldr	r0, [r5, #0]
24007a2c:	f7ff fa0e 	bl	24006e4c <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
24007a30:	2300      	movs	r3, #0
24007a32:	f8c8 3000 	str.w	r3, [r8]
        indev_act->proc.state = data.state;
24007a36:	f89d 300e 	ldrb.w	r3, [sp, #14]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
24007a3a:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
24007a3c:	7703      	strb	r3, [r0, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
24007a3e:	d105      	bne.n	24007a4c <_lv_indev_read_task+0x4c>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
24007a40:	68c4      	ldr	r4, [r0, #12]
24007a42:	f007 fb2b 	bl	2400f09c <lv_tick_get>
24007a46:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
24007a4a:	e006      	b.n	24007a5a <_lv_indev_read_task+0x5a>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
24007a4c:	7803      	ldrb	r3, [r0, #0]
24007a4e:	2b04      	cmp	r3, #4
24007a50:	d103      	bne.n	24007a5a <_lv_indev_read_task+0x5a>
24007a52:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
24007a56:	2b00      	cmp	r3, #0
24007a58:	d1f2      	bne.n	24007a40 <_lv_indev_read_task+0x40>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
24007a5a:	682c      	ldr	r4, [r5, #0]
24007a5c:	7823      	ldrb	r3, [r4, #0]
24007a5e:	2b01      	cmp	r3, #1
24007a60:	d11a      	bne.n	24007a98 <_lv_indev_read_task+0x98>
    if(i->cursor != NULL &&
24007a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
24007a64:	b148      	cbz	r0, 24007a7a <_lv_indev_read_task+0x7a>
24007a66:	6a62      	ldr	r2, [r4, #36]	; 0x24
24007a68:	9b00      	ldr	r3, [sp, #0]
24007a6a:	429a      	cmp	r2, r3
24007a6c:	d005      	beq.n	24007a7a <_lv_indev_read_task+0x7a>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
24007a6e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
24007a72:	f9bd 1000 	ldrsh.w	r1, [sp]
24007a76:	f000 faf6 	bl	24008066 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
24007a7a:	9b00      	ldr	r3, [sp, #0]
        indev_proc_press(&i->proc);
24007a7c:	f104 001c 	add.w	r0, r4, #28
    i->proc.types.pointer.act_point.x = data->point.x;
24007a80:	6223      	str	r3, [r4, #32]
    if(i->proc.state == LV_INDEV_STATE_PR) {
24007a82:	7f23      	ldrb	r3, [r4, #28]
24007a84:	2b01      	cmp	r3, #1
24007a86:	d104      	bne.n	24007a92 <_lv_indev_read_task+0x92>
        indev_proc_press(&i->proc);
24007a88:	f7ff fc60 	bl	2400734c <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
24007a8c:	6a23      	ldr	r3, [r4, #32]
24007a8e:	6263      	str	r3, [r4, #36]	; 0x24
24007a90:	e032      	b.n	24007af8 <_lv_indev_read_task+0xf8>
        indev_proc_release(&i->proc);
24007a92:	f7ff fac9 	bl	24007028 <indev_proc_release>
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
24007a96:	e7f9      	b.n	24007a8c <_lv_indev_read_task+0x8c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
24007a98:	2b03      	cmp	r3, #3
24007a9a:	d12d      	bne.n	24007af8 <_lv_indev_read_task+0xf8>
    if(i->btn_points == NULL) {
24007a9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24007a9e:	b35b      	cbz	r3, 24007af8 <_lv_indev_read_task+0xf8>
    lv_coord_t x = i->btn_points[data->btn_id].x;
24007aa0:	9a02      	ldr	r2, [sp, #8]
24007aa2:	f104 071c 	add.w	r7, r4, #28
24007aa6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
24007aaa:	f933 a022 	ldrsh.w	sl, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PR) {
24007aae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
24007ab2:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
24007ab6:	2b01      	cmp	r3, #1
24007ab8:	d10a      	bne.n	24007ad0 <_lv_indev_read_task+0xd0>
        if(i->proc.types.pointer.last_point.x != x ||
24007aba:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
24007abe:	4553      	cmp	r3, sl
24007ac0:	d103      	bne.n	24007aca <_lv_indev_read_task+0xca>
24007ac2:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
24007ac6:	454b      	cmp	r3, r9
24007ac8:	d002      	beq.n	24007ad0 <_lv_indev_read_task+0xd0>
            indev_proc_release(&i->proc);
24007aca:	4638      	mov	r0, r7
24007acc:	f7ff faac 	bl	24007028 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
24007ad0:	4638      	mov	r0, r7
24007ad2:	f7ff f9af 	bl	24006e34 <indev_reset_check>
24007ad6:	b978      	cbnz	r0, 24007af8 <_lv_indev_read_task+0xf8>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
24007ad8:	f89d 300e 	ldrb.w	r3, [sp, #14]
24007adc:	4638      	mov	r0, r7
    i->proc.types.pointer.act_point.x = x;
24007ade:	f8a4 a020 	strh.w	sl, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
24007ae2:	2b01      	cmp	r3, #1
    i->proc.types.pointer.act_point.y = y;
24007ae4:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
24007ae8:	d111      	bne.n	24007b0e <_lv_indev_read_task+0x10e>
24007aea:	f7ff fc2f 	bl	2400734c <indev_proc_press>
    if(indev_reset_check(&i->proc)) return;
24007aee:	4638      	mov	r0, r7
24007af0:	f7ff f9a0 	bl	24006e34 <indev_reset_check>
24007af4:	2800      	cmp	r0, #0
24007af6:	d0c9      	beq.n	24007a8c <_lv_indev_read_task+0x8c>
        indev_proc_reset_query_handler(indev_act);
24007af8:	6828      	ldr	r0, [r5, #0]
24007afa:	f7ff f9a7 	bl	24006e4c <indev_proc_reset_query_handler>
    } while(more_to_read);
24007afe:	2e00      	cmp	r6, #0
24007b00:	d18e      	bne.n	24007a20 <_lv_indev_read_task+0x20>
    indev_act     = NULL;
24007b02:	602e      	str	r6, [r5, #0]
    indev_obj_act = NULL;
24007b04:	f8c8 6000 	str.w	r6, [r8]
}
24007b08:	b004      	add	sp, #16
24007b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else indev_proc_release(&i->proc);
24007b0e:	f7ff fa8b 	bl	24007028 <indev_proc_release>
24007b12:	e7ec      	b.n	24007aee <_lv_indev_read_task+0xee>
24007b14:	2402d9f0 	.word	0x2402d9f0
24007b18:	2402d9f4 	.word	0x2402d9f4

24007b1c <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
24007b1c:	2872      	cmp	r0, #114	; 0x72
24007b1e:	d823      	bhi.n	24007b68 <style_prop_is_cacheble+0x4c>
24007b20:	2853      	cmp	r0, #83	; 0x53
24007b22:	d811      	bhi.n	24007b48 <style_prop_is_cacheble+0x2c>
24007b24:	2833      	cmp	r0, #51	; 0x33
24007b26:	d819      	bhi.n	24007b5c <style_prop_is_cacheble+0x40>
24007b28:	2814      	cmp	r0, #20
24007b2a:	d811      	bhi.n	24007b50 <style_prop_is_cacheble+0x34>
24007b2c:	1e43      	subs	r3, r0, #1
24007b2e:	2b12      	cmp	r3, #18
24007b30:	d912      	bls.n	24007b58 <style_prop_is_cacheble+0x3c>
24007b32:	2000      	movs	r0, #0
24007b34:	4770      	bx	lr
24007b36:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
24007b3a:	f244 030b 	movw	r3, #16395	; 0x400b
24007b3e:	b280      	uxth	r0, r0
24007b40:	40c3      	lsrs	r3, r0
24007b42:	f003 0001 	and.w	r0, r3, #1
24007b46:	4770      	bx	lr
24007b48:	3854      	subs	r0, #84	; 0x54
24007b4a:	4b17      	ldr	r3, [pc, #92]	; (24007ba8 <style_prop_is_cacheble+0x8c>)
24007b4c:	b280      	uxth	r0, r0
24007b4e:	e7f7      	b.n	24007b40 <style_prop_is_cacheble+0x24>
24007b50:	3815      	subs	r0, #21
24007b52:	4b16      	ldr	r3, [pc, #88]	; (24007bac <style_prop_is_cacheble+0x90>)
24007b54:	b280      	uxth	r0, r0
24007b56:	e7f3      	b.n	24007b40 <style_prop_is_cacheble+0x24>
24007b58:	4b15      	ldr	r3, [pc, #84]	; (24007bb0 <style_prop_is_cacheble+0x94>)
24007b5a:	e7f1      	b.n	24007b40 <style_prop_is_cacheble+0x24>
24007b5c:	3840      	subs	r0, #64	; 0x40
24007b5e:	b280      	uxth	r0, r0
24007b60:	2810      	cmp	r0, #16
24007b62:	d8e6      	bhi.n	24007b32 <style_prop_is_cacheble+0x16>
24007b64:	4b13      	ldr	r3, [pc, #76]	; (24007bb4 <style_prop_is_cacheble+0x98>)
24007b66:	e7eb      	b.n	24007b40 <style_prop_is_cacheble+0x24>
24007b68:	f248 038e 	movw	r3, #32910	; 0x808e
24007b6c:	4298      	cmp	r0, r3
24007b6e:	d811      	bhi.n	24007b94 <style_prop_is_cacheble+0x78>
24007b70:	f248 037f 	movw	r3, #32895	; 0x807f
24007b74:	4298      	cmp	r0, r3
24007b76:	d8de      	bhi.n	24007b36 <style_prop_is_cacheble+0x1a>
24007b78:	28ff      	cmp	r0, #255	; 0xff
24007b7a:	d012      	beq.n	24007ba2 <style_prop_is_cacheble+0x86>
24007b7c:	d806      	bhi.n	24007b8c <style_prop_is_cacheble+0x70>
24007b7e:	287f      	cmp	r0, #127	; 0x7f
24007b80:	d00f      	beq.n	24007ba2 <style_prop_is_cacheble+0x86>
24007b82:	2891      	cmp	r0, #145	; 0x91
24007b84:	bf14      	ite	ne
24007b86:	2000      	movne	r0, #0
24007b88:	2001      	moveq	r0, #1
24007b8a:	4770      	bx	lr
24007b8c:	f248 030c 	movw	r3, #32780	; 0x800c
24007b90:	4298      	cmp	r0, r3
24007b92:	e7f7      	b.n	24007b84 <style_prop_is_cacheble+0x68>
24007b94:	f248 03a0 	movw	r3, #32928	; 0x80a0
24007b98:	4298      	cmp	r0, r3
24007b9a:	d002      	beq.n	24007ba2 <style_prop_is_cacheble+0x86>
24007b9c:	f248 03ad 	movw	r3, #32941	; 0x80ad
24007ba0:	e7f6      	b.n	24007b90 <style_prop_is_cacheble+0x74>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
24007ba2:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
24007ba4:	4770      	bx	lr
24007ba6:	bf00      	nop
24007ba8:	44001001 	.word	0x44001001
24007bac:	7880080f 	.word	0x7880080f
24007bb0:	000f00f6 	.word	0x000f00f6
24007bb4:	00010005 	.word	0x00010005

24007bb8 <refresh_children_position>:
{
24007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _LV_LL_READ(obj->child_ll, i) {
24007bbc:	1d05      	adds	r5, r0, #4
{
24007bbe:	460e      	mov	r6, r1
24007bc0:	4617      	mov	r7, r2
    _LV_LL_READ(obj->child_ll, i) {
24007bc2:	4628      	mov	r0, r5
        i->coords.x1 += x_diff;
24007bc4:	fa1f f886 	uxth.w	r8, r6
    _LV_LL_READ(obj->child_ll, i) {
24007bc8:	f007 fd96 	bl	2400f6f8 <_lv_ll_get_head>
24007bcc:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
24007bce:	fa1f f987 	uxth.w	r9, r7
    _LV_LL_READ(obj->child_ll, i) {
24007bd2:	b90c      	cbnz	r4, 24007bd8 <refresh_children_position+0x20>
}
24007bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
24007bd8:	8a23      	ldrh	r3, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
24007bda:	4620      	mov	r0, r4
24007bdc:	463a      	mov	r2, r7
24007bde:	4631      	mov	r1, r6
        i->coords.x1 += x_diff;
24007be0:	4443      	add	r3, r8
24007be2:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
24007be4:	8a63      	ldrh	r3, [r4, #18]
24007be6:	444b      	add	r3, r9
24007be8:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
24007bea:	8aa3      	ldrh	r3, [r4, #20]
24007bec:	4443      	add	r3, r8
24007bee:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
24007bf0:	8ae3      	ldrh	r3, [r4, #22]
24007bf2:	444b      	add	r3, r9
24007bf4:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
24007bf6:	f7ff ffdf 	bl	24007bb8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
24007bfa:	4621      	mov	r1, r4
24007bfc:	4628      	mov	r0, r5
24007bfe:	f007 fd81 	bl	2400f704 <_lv_ll_get_next>
24007c02:	4604      	mov	r4, r0
24007c04:	e7e5      	b.n	24007bd2 <refresh_children_position+0x1a>

24007c06 <lv_area_copy>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
24007c06:	3901      	subs	r1, #1
24007c08:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24007c0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24007c10:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
24007c14:	4298      	cmp	r0, r3
24007c16:	d1f9      	bne.n	24007c0c <lv_area_copy+0x6>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
24007c18:	4770      	bx	lr
	...

24007c1c <lv_init>:
{
24007c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(lv_initialized) {
24007c1e:	4c17      	ldr	r4, [pc, #92]	; (24007c7c <lv_init+0x60>)
24007c20:	7823      	ldrb	r3, [r4, #0]
24007c22:	bb43      	cbnz	r3, 24007c76 <lv_init+0x5a>
    _lv_mem_init();
24007c24:	f007 fe9a 	bl	2400f95c <_lv_mem_init>
    _lv_task_core_init();
24007c28:	f008 fcd8 	bl	240105dc <_lv_task_core_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
24007c2c:	2110      	movs	r1, #16
24007c2e:	4814      	ldr	r0, [pc, #80]	; (24007c80 <lv_init+0x64>)
24007c30:	f007 fd23 	bl	2400f67a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
24007c34:	f44f 71be 	mov.w	r1, #380	; 0x17c
24007c38:	4812      	ldr	r0, [pc, #72]	; (24007c84 <lv_init+0x68>)
24007c3a:	f007 fd1e 	bl	2400f67a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
24007c3e:	2160      	movs	r1, #96	; 0x60
24007c40:	4811      	ldr	r0, [pc, #68]	; (24007c88 <lv_init+0x6c>)
24007c42:	f007 fd1a 	bl	2400f67a <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
24007c46:	4b11      	ldr	r3, [pc, #68]	; (24007c8c <lv_init+0x70>)
24007c48:	2202      	movs	r2, #2
24007c4a:	f244 6196 	movw	r1, #18070	; 0x4696
24007c4e:	9300      	str	r3, [sp, #0]
24007c50:	f240 5016 	movw	r0, #1302	; 0x516
24007c54:	e9cd 3301 	strd	r3, r3, [sp, #4]
24007c58:	f009 fb5e 	bl	24011318 <lv_theme_material_init>
    lv_theme_set_act(th);
24007c5c:	f009 f92c 	bl	24010eb8 <lv_theme_set_act>
    _lv_refr_init();
24007c60:	f002 f9aa 	bl	24009fb8 <_lv_refr_init>
    _lv_indev_init();
24007c64:	f7ff faaa 	bl	240071bc <_lv_indev_init>
    _lv_img_decoder_init();
24007c68:	f006 ff00 	bl	2400ea6c <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
24007c6c:	2001      	movs	r0, #1
24007c6e:	f006 fdcd 	bl	2400e80c <lv_img_cache_set_size>
    lv_initialized = true;
24007c72:	2301      	movs	r3, #1
24007c74:	7023      	strb	r3, [r4, #0]
}
24007c76:	b004      	add	sp, #16
24007c78:	bd10      	pop	{r4, pc}
24007c7a:	bf00      	nop
24007c7c:	2402da00 	.word	0x2402da00
24007c80:	2402dc4c 	.word	0x2402dc4c
24007c84:	2402db20 	.word	0x2402db20
24007c88:	2402dbc0 	.word	0x2402dbc0
24007c8c:	2401a5e8 	.word	0x2401a5e8

24007c90 <lv_obj_realign>:
}
24007c90:	4770      	bx	lr

24007c92 <lv_obj_set_ext_click_area>:
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
24007c92:	4291      	cmp	r1, r2
24007c94:	bfb8      	it	lt
24007c96:	4611      	movlt	r1, r2
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
24007c98:	f9bd 2000 	ldrsh.w	r2, [sp]
24007c9c:	4293      	cmp	r3, r2
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
24007c9e:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
24007ca2:	bfb8      	it	lt
24007ca4:	4613      	movlt	r3, r2
24007ca6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
}
24007caa:	4770      	bx	lr

24007cac <lv_obj_set_adv_hittest>:
    obj->adv_hittest = en == false ? 0 : 1;
24007cac:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007cb0:	f361 13c7 	bfi	r3, r1, #7, #1
24007cb4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007cb8:	4770      	bx	lr

24007cba <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
24007cba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007cbe:	f361 0300 	bfi	r3, r1, #0, #1
24007cc2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007cc6:	4770      	bx	lr

24007cc8 <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
24007cc8:	b129      	cbz	r1, 24007cd6 <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
24007cca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007cce:	f043 0301 	orr.w	r3, r3, #1
24007cd2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    obj->drag = (en == true ? 1 : 0);
24007cd6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007cda:	f361 0341 	bfi	r3, r1, #1, #1
24007cde:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007ce2:	4770      	bx	lr

24007ce4 <lv_obj_set_drag_dir>:
    obj->drag_dir = drag_dir;
24007ce4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
24007ce8:	f361 0384 	bfi	r3, r1, #2, #3
24007cec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    if(obj->drag_dir != 0) lv_obj_set_drag(obj, true); /*Drag direction requires drag*/
24007cf0:	f003 031c 	and.w	r3, r3, #28
24007cf4:	b13b      	cbz	r3, 24007d06 <lv_obj_set_drag_dir+0x22>
    obj->click = (en == true ? 1 : 0);
24007cf6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007cfa:	f023 0303 	bic.w	r3, r3, #3
24007cfe:	f043 0303 	orr.w	r3, r3, #3
24007d02:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007d06:	4770      	bx	lr

24007d08 <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
24007d08:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007d0c:	f361 0382 	bfi	r3, r1, #2, #1
24007d10:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007d14:	4770      	bx	lr

24007d16 <lv_obj_set_drag_parent>:
    obj->drag_parent = (en == true ? 1 : 0);
24007d16:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24007d1a:	f361 03c3 	bfi	r3, r1, #3, #1
24007d1e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
24007d22:	4770      	bx	lr

24007d24 <lv_obj_set_focus_parent>:
        obj->focus_parent = (en == true ? 1 : 0);
24007d24:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
24007d28:	f361 0341 	bfi	r3, r1, #1, #1
24007d2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
24007d30:	4770      	bx	lr

24007d32 <lv_obj_add_protect>:
    obj->protect |= prot;
24007d32:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
24007d36:	4319      	orrs	r1, r3
24007d38:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
}
24007d3c:	4770      	bx	lr

24007d3e <lv_obj_clear_protect>:
    obj->protect &= prot;
24007d3e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
24007d42:	ea23 0101 	bic.w	r1, r3, r1
24007d46:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
}
24007d4a:	4770      	bx	lr

24007d4c <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
24007d4c:	6181      	str	r1, [r0, #24]
}
24007d4e:	4770      	bx	lr

24007d50 <lv_event_send_func>:
{
24007d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24007d54:	461d      	mov	r5, r3
24007d56:	b087      	sub	sp, #28
    event_temp_data.deleted = false;
24007d58:	2300      	movs	r3, #0
    if(event_temp_data_head) {
24007d5a:	4e1d      	ldr	r6, [pc, #116]	; (24007dd0 <lv_event_send_func+0x80>)
    const void * event_act_data_save = event_act_data;
24007d5c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 24007dd4 <lv_event_send_func+0x84>
{
24007d60:	460c      	mov	r4, r1
    event_temp_data.deleted = false;
24007d62:	f88d 3010 	strb.w	r3, [sp, #16]
{
24007d66:	4607      	mov	r7, r0
24007d68:	6833      	ldr	r3, [r6, #0]
    const void * event_act_data_save = event_act_data;
24007d6a:	f8d8 9000 	ldr.w	r9, [r8]
24007d6e:	9305      	str	r3, [sp, #20]
    event_temp_data_head = &event_temp_data;
24007d70:	ab03      	add	r3, sp, #12
    event_temp_data.obj     = obj;
24007d72:	9103      	str	r1, [sp, #12]
{
24007d74:	9201      	str	r2, [sp, #4]
    event_temp_data_head = &event_temp_data;
24007d76:	6033      	str	r3, [r6, #0]
    event_act_data                   = data;
24007d78:	f8c8 5000 	str.w	r5, [r8]
    lv_indev_t * indev_act = lv_indev_get_act();
24007d7c:	f7ff fa22 	bl	240071c4 <lv_indev_get_act>
    if(indev_act) {
24007d80:	9901      	ldr	r1, [sp, #4]
24007d82:	b118      	cbz	r0, 24007d8c <lv_event_send_func+0x3c>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
24007d84:	6883      	ldr	r3, [r0, #8]
24007d86:	b10b      	cbz	r3, 24007d8c <lv_event_send_func+0x3c>
24007d88:	4798      	blx	r3
24007d8a:	9901      	ldr	r1, [sp, #4]
    if(event_xcb) event_xcb(obj, event);
24007d8c:	b11f      	cbz	r7, 24007d96 <lv_event_send_func+0x46>
24007d8e:	4620      	mov	r0, r4
24007d90:	9101      	str	r1, [sp, #4]
24007d92:	47b8      	blx	r7
24007d94:	9901      	ldr	r1, [sp, #4]
    event_temp_data_head = event_temp_data_head->prev;
24007d96:	6833      	ldr	r3, [r6, #0]
    event_act_data = event_act_data_save;
24007d98:	f8c8 9000 	str.w	r9, [r8]
    event_temp_data_head = event_temp_data_head->prev;
24007d9c:	689b      	ldr	r3, [r3, #8]
24007d9e:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
24007da0:	f89d 3010 	ldrb.w	r3, [sp, #16]
24007da4:	b97b      	cbnz	r3, 24007dc6 <lv_event_send_func+0x76>
    if(obj) {
24007da6:	b184      	cbz	r4, 24007dca <lv_event_send_func+0x7a>
        if(obj->parent_event && obj->parent) {
24007da8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
24007dac:	065a      	lsls	r2, r3, #25
24007dae:	d50c      	bpl.n	24007dca <lv_event_send_func+0x7a>
24007db0:	6820      	ldr	r0, [r4, #0]
24007db2:	b150      	cbz	r0, 24007dca <lv_event_send_func+0x7a>
            lv_res_t res = lv_event_send(obj->parent, event, data);
24007db4:	462a      	mov	r2, r5
24007db6:	f000 f80f 	bl	24007dd8 <lv_event_send>
        return LV_RES_INV;
24007dba:	1e43      	subs	r3, r0, #1
24007dbc:	4258      	negs	r0, r3
24007dbe:	4158      	adcs	r0, r3
}
24007dc0:	b007      	add	sp, #28
24007dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LV_RES_INV;
24007dc6:	2000      	movs	r0, #0
24007dc8:	e7fa      	b.n	24007dc0 <lv_event_send_func+0x70>
    return LV_RES_OK;
24007dca:	2001      	movs	r0, #1
24007dcc:	e7f8      	b.n	24007dc0 <lv_event_send_func+0x70>
24007dce:	bf00      	nop
24007dd0:	2402d9fc 	.word	0x2402d9fc
24007dd4:	2402d9f8 	.word	0x2402d9f8

24007dd8 <lv_event_send>:
{
24007dd8:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
24007dda:	b120      	cbz	r0, 24007de6 <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
24007ddc:	460a      	mov	r2, r1
24007dde:	4601      	mov	r1, r0
24007de0:	6980      	ldr	r0, [r0, #24]
24007de2:	f7ff bfb5 	b.w	24007d50 <lv_event_send_func>
}
24007de6:	2001      	movs	r0, #1
24007de8:	4770      	bx	lr
	...

24007dec <lv_event_get_data>:
}
24007dec:	4b01      	ldr	r3, [pc, #4]	; (24007df4 <lv_event_get_data+0x8>)
24007dee:	6818      	ldr	r0, [r3, #0]
24007df0:	4770      	bx	lr
24007df2:	bf00      	nop
24007df4:	2402d9f8 	.word	0x2402d9f8

24007df8 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
24007df8:	61c1      	str	r1, [r0, #28]
}
24007dfa:	4770      	bx	lr

24007dfc <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
24007dfc:	b110      	cbz	r0, 24007e04 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
24007dfe:	69c3      	ldr	r3, [r0, #28]
24007e00:	b103      	cbz	r3, 24007e04 <lv_signal_send+0x8>
24007e02:	4718      	bx	r3
}
24007e04:	2001      	movs	r0, #1
24007e06:	4770      	bx	lr

24007e08 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
24007e08:	6201      	str	r1, [r0, #32]
}
24007e0a:	4770      	bx	lr

24007e0c <lv_obj_allocate_ext_attr>:
{
24007e0c:	b510      	push	{r4, lr}
24007e0e:	4604      	mov	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
24007e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
24007e12:	f007 ff3b 	bl	2400fc8c <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
24007e16:	b100      	cbz	r0, 24007e1a <lv_obj_allocate_ext_attr+0xe>
    obj->ext_attr = new_ext;
24007e18:	6260      	str	r0, [r4, #36]	; 0x24
}
24007e1a:	bd10      	pop	{r4, pc}

24007e1c <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
24007e1c:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
24007e1e:	69c3      	ldr	r3, [r0, #28]
24007e20:	2106      	movs	r1, #6
    obj->ext_draw_pad = 0;
24007e22:	8642      	strh	r2, [r0, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
24007e24:	4718      	bx	r3
	...

24007e28 <lv_obj_get_disp>:
{
24007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL)
24007e2a:	6803      	ldr	r3, [r0, #0]
{
24007e2c:	4605      	mov	r5, r0
    if(obj->parent == NULL)
24007e2e:	b123      	cbz	r3, 24007e3a <lv_obj_get_disp+0x12>
    return obj->parent;
24007e30:	462b      	mov	r3, r5
24007e32:	682d      	ldr	r5, [r5, #0]
    } while(par != NULL);
24007e34:	2d00      	cmp	r5, #0
24007e36:	d1fb      	bne.n	24007e30 <lv_obj_get_disp+0x8>
24007e38:	461d      	mov	r5, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
24007e3a:	480d      	ldr	r0, [pc, #52]	; (24007e70 <lv_obj_get_disp+0x48>)
24007e3c:	f007 fc5c 	bl	2400f6f8 <_lv_ll_get_head>
24007e40:	4f0b      	ldr	r7, [pc, #44]	; (24007e70 <lv_obj_get_disp+0x48>)
24007e42:	4604      	mov	r4, r0
24007e44:	b90c      	cbnz	r4, 24007e4a <lv_obj_get_disp+0x22>
}
24007e46:	4620      	mov	r0, r4
24007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
24007e4a:	f104 0630 	add.w	r6, r4, #48	; 0x30
24007e4e:	4630      	mov	r0, r6
24007e50:	f007 fc52 	bl	2400f6f8 <_lv_ll_get_head>
24007e54:	b928      	cbnz	r0, 24007e62 <lv_obj_get_disp+0x3a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
24007e56:	4621      	mov	r1, r4
24007e58:	4638      	mov	r0, r7
24007e5a:	f007 fc53 	bl	2400f704 <_lv_ll_get_next>
24007e5e:	4604      	mov	r4, r0
24007e60:	e7f0      	b.n	24007e44 <lv_obj_get_disp+0x1c>
            if(s == scr) return d;
24007e62:	4285      	cmp	r5, r0
24007e64:	d0ef      	beq.n	24007e46 <lv_obj_get_disp+0x1e>
        _LV_LL_READ(d->scr_ll, s) {
24007e66:	4601      	mov	r1, r0
24007e68:	4630      	mov	r0, r6
24007e6a:	f007 fc4b 	bl	2400f704 <_lv_ll_get_next>
24007e6e:	e7f1      	b.n	24007e54 <lv_obj_get_disp+0x2c>
24007e70:	2402db20 	.word	0x2402db20

24007e74 <obj_del_core>:
{
24007e74:	b570      	push	{r4, r5, r6, lr}
24007e76:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
24007e78:	2200      	movs	r2, #0
24007e7a:	2115      	movs	r1, #21
    i = _lv_ll_get_head(&(obj->child_ll));
24007e7c:	1d25      	adds	r5, r4, #4
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
24007e7e:	f7ff ffab 	bl	24007dd8 <lv_event_send>
        i = _lv_ll_get_head(&(obj->child_ll));
24007e82:	4628      	mov	r0, r5
24007e84:	f007 fc38 	bl	2400f6f8 <_lv_ll_get_head>
    while(i != NULL) {
24007e88:	b9f8      	cbnz	r0, 24007eca <obj_del_core+0x56>
    lv_event_temp_data_t * t = event_temp_data_head;
24007e8a:	4b1e      	ldr	r3, [pc, #120]	; (24007f04 <obj_del_core+0x90>)
24007e8c:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
24007e8e:	2301      	movs	r3, #1
    while(t) {
24007e90:	b9f6      	cbnz	r6, 24007ed0 <obj_del_core+0x5c>
    lv_indev_t * indev = lv_indev_get_next(NULL);
24007e92:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
24007e94:	f007 f8c8 	bl	2400f028 <lv_indev_get_next>
24007e98:	4605      	mov	r5, r0
    while(indev) {
24007e9a:	b9f8      	cbnz	r0, 24007edc <obj_del_core+0x68>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
24007e9c:	4602      	mov	r2, r0
24007e9e:	4601      	mov	r1, r0
24007ea0:	69e3      	ldr	r3, [r4, #28]
24007ea2:	4620      	mov	r0, r4
24007ea4:	4798      	blx	r3
    return obj->parent;
24007ea6:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
24007ea8:	bb40      	cbnz	r0, 24007efc <obj_del_core+0x88>
        lv_disp_t * d = lv_obj_get_disp(obj);
24007eaa:	4620      	mov	r0, r4
24007eac:	f7ff ffbc 	bl	24007e28 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
24007eb0:	4621      	mov	r1, r4
24007eb2:	3030      	adds	r0, #48	; 0x30
        _lv_ll_remove(&(par->child_ll), obj);
24007eb4:	f007 fc5d 	bl	2400f772 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
24007eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007eba:	b108      	cbz	r0, 24007ec0 <obj_del_core+0x4c>
24007ebc:	f007 fd8e 	bl	2400f9dc <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
24007ec0:	4620      	mov	r0, r4
}
24007ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(obj); /*Free the object itself*/
24007ec6:	f007 bd89 	b.w	2400f9dc <lv_mem_free>
        obj_del_core(i);
24007eca:	f7ff ffd3 	bl	24007e74 <obj_del_core>
24007ece:	e7d8      	b.n	24007e82 <obj_del_core+0xe>
        if(t->obj == obj) t->deleted = true;
24007ed0:	6832      	ldr	r2, [r6, #0]
24007ed2:	4294      	cmp	r4, r2
24007ed4:	bf08      	it	eq
24007ed6:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
24007ed8:	68b6      	ldr	r6, [r6, #8]
24007eda:	e7d9      	b.n	24007e90 <obj_del_core+0x1c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
24007edc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24007ede:	42a3      	cmp	r3, r4
24007ee0:	d002      	beq.n	24007ee8 <obj_del_core+0x74>
24007ee2:	6bab      	ldr	r3, [r5, #56]	; 0x38
24007ee4:	42a3      	cmp	r3, r4
24007ee6:	d103      	bne.n	24007ef0 <obj_del_core+0x7c>
            lv_indev_reset(indev, obj);
24007ee8:	4621      	mov	r1, r4
24007eea:	4628      	mov	r0, r5
24007eec:	f7ff f974 	bl	240071d8 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
24007ef0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        indev = lv_indev_get_next(indev);
24007ef2:	4628      	mov	r0, r5
        if(indev->proc.types.pointer.last_pressed == obj) {
24007ef4:	42a3      	cmp	r3, r4
            indev->proc.types.pointer.last_pressed = NULL;
24007ef6:	bf08      	it	eq
24007ef8:	63ee      	streq	r6, [r5, #60]	; 0x3c
        indev = lv_indev_get_next(indev);
24007efa:	e7cb      	b.n	24007e94 <obj_del_core+0x20>
        _lv_ll_remove(&(par->child_ll), obj);
24007efc:	4621      	mov	r1, r4
24007efe:	3004      	adds	r0, #4
24007f00:	e7d8      	b.n	24007eb4 <obj_del_core+0x40>
24007f02:	bf00      	nop
24007f04:	2402d9fc 	.word	0x2402d9fc

24007f08 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
24007f08:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
24007f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return false;
24007f0e:	06da      	lsls	r2, r3, #27
{
24007f10:	4605      	mov	r5, r0
24007f12:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
24007f14:	d42f      	bmi.n	24007f76 <lv_obj_area_is_visible+0x6e>
24007f16:	4603      	mov	r3, r0
    return obj->parent;
24007f18:	461c      	mov	r4, r3
24007f1a:	681b      	ldr	r3, [r3, #0]
    } while(par != NULL);
24007f1c:	2b00      	cmp	r3, #0
24007f1e:	d1fb      	bne.n	24007f18 <lv_obj_area_is_visible+0x10>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
24007f20:	4620      	mov	r0, r4
24007f22:	f7ff ff81 	bl	24007e28 <lv_obj_get_disp>
24007f26:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
24007f28:	f7fe ff5c 	bl	24006de4 <lv_disp_get_scr_act>
24007f2c:	4284      	cmp	r4, r0
24007f2e:	d124      	bne.n	24007f7a <lv_obj_area_is_visible+0x72>
        lv_coord_t ext_size = obj->ext_draw_pad;
24007f30:	f9b5 4032 	ldrsh.w	r4, [r5, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
24007f34:	f105 0110 	add.w	r1, r5, #16
24007f38:	4668      	mov	r0, sp
24007f3a:	f7ff fe64 	bl	24007c06 <lv_area_copy>
        obj_coords.x1 -= ext_size;
24007f3e:	f8bd 2000 	ldrh.w	r2, [sp]
24007f42:	b2a3      	uxth	r3, r4
        is_common = _lv_area_intersect(area, area, &obj_coords);
24007f44:	4631      	mov	r1, r6
24007f46:	4630      	mov	r0, r6
        obj_coords.x1 -= ext_size;
24007f48:	1ad2      	subs	r2, r2, r3
24007f4a:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
24007f4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
24007f52:	1ad2      	subs	r2, r2, r3
24007f54:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
24007f58:	f8bd 2004 	ldrh.w	r2, [sp, #4]
24007f5c:	441a      	add	r2, r3
24007f5e:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
24007f62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24007f66:	4413      	add	r3, r2
        is_common = _lv_area_intersect(area, area, &obj_coords);
24007f68:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
24007f6a:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
24007f6e:	f007 f8f0 	bl	2400f152 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
24007f72:	4604      	mov	r4, r0
24007f74:	bb00      	cbnz	r0, 24007fb8 <lv_obj_area_is_visible+0xb0>
    if(lv_obj_get_hidden(obj)) return false;
24007f76:	2400      	movs	r4, #0
24007f78:	e00f      	b.n	24007f9a <lv_obj_area_is_visible+0x92>
       obj_scr == lv_disp_get_scr_prev(disp) ||
24007f7a:	4638      	mov	r0, r7
24007f7c:	f7fe ff39 	bl	24006df2 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
24007f80:	4284      	cmp	r4, r0
24007f82:	d0d5      	beq.n	24007f30 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
24007f84:	4638      	mov	r0, r7
24007f86:	f7fe ff47 	bl	24006e18 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
24007f8a:	4284      	cmp	r4, r0
24007f8c:	d0d0      	beq.n	24007f30 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
24007f8e:	4638      	mov	r0, r7
24007f90:	f7fe ff49 	bl	24006e26 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
24007f94:	4284      	cmp	r4, r0
24007f96:	d0cb      	beq.n	24007f30 <lv_obj_area_is_visible+0x28>
    return true;
24007f98:	2401      	movs	r4, #1
}
24007f9a:	4620      	mov	r0, r4
24007f9c:	b003      	add	sp, #12
24007f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
24007fa0:	f105 0210 	add.w	r2, r5, #16
24007fa4:	4631      	mov	r1, r6
24007fa6:	4630      	mov	r0, r6
24007fa8:	f007 f8d3 	bl	2400f152 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
24007fac:	2800      	cmp	r0, #0
24007fae:	d0e2      	beq.n	24007f76 <lv_obj_area_is_visible+0x6e>
    return obj->hidden == 0 ? false : true;
24007fb0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
24007fb4:	06db      	lsls	r3, r3, #27
24007fb6:	d4de      	bmi.n	24007f76 <lv_obj_area_is_visible+0x6e>
    return obj->parent;
24007fb8:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
24007fba:	2d00      	cmp	r5, #0
24007fbc:	d1f0      	bne.n	24007fa0 <lv_obj_area_is_visible+0x98>
24007fbe:	e7ec      	b.n	24007f9a <lv_obj_area_is_visible+0x92>

24007fc0 <lv_obj_invalidate_area>:
{
24007fc0:	b513      	push	{r0, r1, r4, lr}
24007fc2:	4604      	mov	r4, r0
    lv_area_copy(&area_tmp, area);
24007fc4:	4668      	mov	r0, sp
24007fc6:	f7ff fe1e 	bl	24007c06 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
24007fca:	4669      	mov	r1, sp
24007fcc:	4620      	mov	r0, r4
24007fce:	f7ff ff9b 	bl	24007f08 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
24007fd2:	b128      	cbz	r0, 24007fe0 <lv_obj_invalidate_area+0x20>
24007fd4:	4620      	mov	r0, r4
24007fd6:	f7ff ff27 	bl	24007e28 <lv_obj_get_disp>
24007fda:	4669      	mov	r1, sp
24007fdc:	f001 ffed 	bl	24009fba <_lv_inv_area>
}
24007fe0:	b002      	add	sp, #8
24007fe2:	bd10      	pop	{r4, pc}

24007fe4 <lv_obj_invalidate>:
{
24007fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_coord_t ext_size = obj->ext_draw_pad;
24007fe6:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
{
24007fea:	4605      	mov	r5, r0
    lv_area_copy(&obj_coords, &obj->coords);
24007fec:	f100 0110 	add.w	r1, r0, #16
24007ff0:	4668      	mov	r0, sp
24007ff2:	f7ff fe08 	bl	24007c06 <lv_area_copy>
    obj_coords.x1 -= ext_size;
24007ff6:	f8bd 2000 	ldrh.w	r2, [sp]
24007ffa:	b2a3      	uxth	r3, r4
    lv_obj_invalidate_area(obj, &obj_coords);
24007ffc:	4669      	mov	r1, sp
24007ffe:	4628      	mov	r0, r5
    obj_coords.x1 -= ext_size;
24008000:	1ad2      	subs	r2, r2, r3
24008002:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
24008006:	f8bd 2002 	ldrh.w	r2, [sp, #2]
2400800a:	1ad2      	subs	r2, r2, r3
2400800c:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
24008010:	f8bd 2004 	ldrh.w	r2, [sp, #4]
24008014:	441a      	add	r2, r3
24008016:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
2400801a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
2400801e:	4413      	add	r3, r2
24008020:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
24008024:	f7ff ffcc 	bl	24007fc0 <lv_obj_invalidate_area>
}
24008028:	b003      	add	sp, #12
2400802a:	bd30      	pop	{r4, r5, pc}

2400802c <lv_obj_move_foreground>:
{
2400802c:	b570      	push	{r4, r5, r6, lr}
    return obj->parent;
2400802e:	6805      	ldr	r5, [r0, #0]
{
24008030:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
24008032:	1d2e      	adds	r6, r5, #4
24008034:	4630      	mov	r0, r6
24008036:	f007 fb5f 	bl	2400f6f8 <_lv_ll_get_head>
2400803a:	4284      	cmp	r4, r0
2400803c:	d012      	beq.n	24008064 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
2400803e:	4628      	mov	r0, r5
24008040:	f7ff ffd0 	bl	24007fe4 <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
24008044:	4622      	mov	r2, r4
24008046:	4631      	mov	r1, r6
24008048:	4630      	mov	r0, r6
2400804a:	2301      	movs	r3, #1
2400804c:	f007 fbca 	bl	2400f7e4 <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
24008050:	69eb      	ldr	r3, [r5, #28]
24008052:	4622      	mov	r2, r4
24008054:	4628      	mov	r0, r5
24008056:	2101      	movs	r1, #1
24008058:	4798      	blx	r3
    lv_obj_invalidate(parent);
2400805a:	4628      	mov	r0, r5
}
2400805c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
24008060:	f7ff bfc0 	b.w	24007fe4 <lv_obj_invalidate>
}
24008064:	bd70      	pop	{r4, r5, r6, pc}

24008066 <lv_obj_set_pos>:
{
24008066:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    lv_obj_t * par = obj->parent;
2400806a:	6806      	ldr	r6, [r0, #0]
{
2400806c:	4604      	mov	r4, r0
    if(par) {
2400806e:	b12e      	cbz	r6, 2400807c <lv_obj_set_pos+0x16>
        x = x + par->coords.x1;
24008070:	8a33      	ldrh	r3, [r6, #16]
24008072:	4419      	add	r1, r3
        y = y + par->coords.y1;
24008074:	8a73      	ldrh	r3, [r6, #18]
24008076:	441a      	add	r2, r3
        x = x + par->coords.x1;
24008078:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
2400807a:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
2400807c:	8a23      	ldrh	r3, [r4, #16]
2400807e:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
24008080:	8a63      	ldrh	r3, [r4, #18]
24008082:	1ad2      	subs	r2, r2, r3
    diff.x = x - obj->coords.x1;
24008084:	fa1f f881 	uxth.w	r8, r1
24008088:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
2400808a:	b297      	uxth	r7, r2
2400808c:	b212      	sxth	r2, r2
    if(diff.x == 0 && diff.y == 0) return;
2400808e:	ea58 0307 	orrs.w	r3, r8, r7
    diff.y = y - obj->coords.y1;
24008092:	9201      	str	r2, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
24008094:	d027      	beq.n	240080e6 <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
24008096:	4620      	mov	r0, r4
24008098:	f7ff ffa4 	bl	24007fe4 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
2400809c:	f104 0110 	add.w	r1, r4, #16
240080a0:	a802      	add	r0, sp, #8
240080a2:	f7ff fdb0 	bl	24007c06 <lv_area_copy>
    obj->coords.x1 += diff.x;
240080a6:	8a23      	ldrh	r3, [r4, #16]
    refresh_children_position(obj, diff.x, diff.y);
240080a8:	9a01      	ldr	r2, [sp, #4]
240080aa:	4629      	mov	r1, r5
    obj->coords.x1 += diff.x;
240080ac:	4443      	add	r3, r8
    refresh_children_position(obj, diff.x, diff.y);
240080ae:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
240080b0:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
240080b2:	8a63      	ldrh	r3, [r4, #18]
240080b4:	443b      	add	r3, r7
240080b6:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
240080b8:	8aa3      	ldrh	r3, [r4, #20]
240080ba:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
240080bc:	8ae3      	ldrh	r3, [r4, #22]
240080be:	441f      	add	r7, r3
    obj->coords.x2 += diff.x;
240080c0:	f8a4 8014 	strh.w	r8, [r4, #20]
    obj->coords.y2 += diff.y;
240080c4:	82e7      	strh	r7, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
240080c6:	f7ff fd77 	bl	24007bb8 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
240080ca:	69e3      	ldr	r3, [r4, #28]
240080cc:	aa02      	add	r2, sp, #8
240080ce:	2102      	movs	r1, #2
240080d0:	4620      	mov	r0, r4
240080d2:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
240080d4:	b126      	cbz	r6, 240080e0 <lv_obj_set_pos+0x7a>
240080d6:	69f3      	ldr	r3, [r6, #28]
240080d8:	4622      	mov	r2, r4
240080da:	2101      	movs	r1, #1
240080dc:	4630      	mov	r0, r6
240080de:	4798      	blx	r3
    lv_obj_invalidate(obj);
240080e0:	4620      	mov	r0, r4
240080e2:	f7ff ff7f 	bl	24007fe4 <lv_obj_invalidate>
}
240080e6:	b004      	add	sp, #16
240080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

240080ec <lv_obj_align>:
{
240080ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
240080ee:	4605      	mov	r5, r0
240080f0:	461c      	mov	r4, r3
    if(base == NULL) base = lv_obj_get_parent(obj);
240080f2:	4608      	mov	r0, r1
240080f4:	b901      	cbnz	r1, 240080f8 <lv_obj_align+0xc>
    return obj->parent;
240080f6:	6828      	ldr	r0, [r5, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
240080f8:	ab01      	add	r3, sp, #4
240080fa:	f105 0110 	add.w	r1, r5, #16
240080fe:	3010      	adds	r0, #16
24008100:	f007 f974 	bl	2400f3ec <_lv_area_align>
    new_pos.y += y_ofs;
24008104:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24008108:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    return obj->parent;
2400810c:	682b      	ldr	r3, [r5, #0]
    new_pos.y += y_ofs;
2400810e:	440a      	add	r2, r1
    new_pos.x += x_ofs;
24008110:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    lv_coord_t par_abs_y  = par->coords.y1;
24008114:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
    new_pos.x += x_ofs;
24008118:	4421      	add	r1, r4
    new_pos.x -= par_abs_x;
2400811a:	8a1b      	ldrh	r3, [r3, #16]
    new_pos.y -= par_abs_y;
2400811c:	1a12      	subs	r2, r2, r0
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
2400811e:	4628      	mov	r0, r5
    new_pos.x -= par_abs_x;
24008120:	1ac9      	subs	r1, r1, r3
    new_pos.y -= par_abs_y;
24008122:	b212      	sxth	r2, r2
    new_pos.x -= par_abs_x;
24008124:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
24008126:	f8ad 2006 	strh.w	r2, [sp, #6]
    new_pos.x -= par_abs_x;
2400812a:	f8ad 1004 	strh.w	r1, [sp, #4]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
2400812e:	f7ff ff9a 	bl	24008066 <lv_obj_set_pos>
}
24008132:	b003      	add	sp, #12
24008134:	bd30      	pop	{r4, r5, pc}

24008136 <lv_obj_set_hidden>:
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
24008136:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
2400813a:	06da      	lsls	r2, r3, #27
{
2400813c:	b570      	push	{r4, r5, r6, lr}
2400813e:	4604      	mov	r4, r0
24008140:	460d      	mov	r5, r1
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
24008142:	d401      	bmi.n	24008148 <lv_obj_set_hidden+0x12>
24008144:	f7ff ff4e 	bl	24007fe4 <lv_obj_invalidate>
    obj->hidden = en == false ? 0 : 1;
24008148:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400814c:	f365 1304 	bfi	r3, r5, #4, #1
24008150:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
24008154:	06db      	lsls	r3, r3, #27
24008156:	d402      	bmi.n	2400815e <lv_obj_set_hidden+0x28>
24008158:	4620      	mov	r0, r4
2400815a:	f7ff ff43 	bl	24007fe4 <lv_obj_invalidate>
    return obj->parent;
2400815e:	6820      	ldr	r0, [r4, #0]
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
24008160:	b128      	cbz	r0, 2400816e <lv_obj_set_hidden+0x38>
24008162:	4622      	mov	r2, r4
24008164:	69c3      	ldr	r3, [r0, #28]
24008166:	2101      	movs	r1, #1
}
24008168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
2400816c:	4718      	bx	r3
}
2400816e:	bd70      	pop	{r4, r5, r6, pc}

24008170 <lv_obj_set_size>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24008170:	8a83      	ldrh	r3, [r0, #20]
{
24008172:	b573      	push	{r0, r1, r4, r5, r6, lr}
24008174:	3301      	adds	r3, #1
24008176:	4616      	mov	r6, r2
24008178:	8a02      	ldrh	r2, [r0, #16]
2400817a:	4604      	mov	r4, r0
2400817c:	460d      	mov	r5, r1
2400817e:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
24008180:	b21b      	sxth	r3, r3
24008182:	4299      	cmp	r1, r3
24008184:	d106      	bne.n	24008194 <lv_obj_set_size+0x24>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24008186:	8ac3      	ldrh	r3, [r0, #22]
24008188:	8a42      	ldrh	r2, [r0, #18]
2400818a:	3301      	adds	r3, #1
2400818c:	1a9b      	subs	r3, r3, r2
2400818e:	b21b      	sxth	r3, r3
24008190:	429e      	cmp	r6, r3
24008192:	d023      	beq.n	240081dc <lv_obj_set_size+0x6c>
    lv_obj_invalidate(obj);
24008194:	4620      	mov	r0, r4
    obj->coords.y2 = obj->coords.y1 + h - 1;
24008196:	3e01      	subs	r6, #1
    lv_obj_invalidate(obj);
24008198:	f7ff ff24 	bl	24007fe4 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
2400819c:	f104 0110 	add.w	r1, r4, #16
240081a0:	4668      	mov	r0, sp
        obj->coords.x2 = obj->coords.x1 + w - 1;
240081a2:	3d01      	subs	r5, #1
    lv_area_copy(cords_p, &obj->coords);
240081a4:	f7ff fd2f 	bl	24007c06 <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
240081a8:	8a63      	ldrh	r3, [r4, #18]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
240081aa:	466a      	mov	r2, sp
240081ac:	2102      	movs	r1, #2
    obj->coords.y2 = obj->coords.y1 + h - 1;
240081ae:	441e      	add	r6, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
240081b0:	8a23      	ldrh	r3, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
240081b2:	4620      	mov	r0, r4
        obj->coords.x2 = obj->coords.x1 + w - 1;
240081b4:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
240081b6:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
240081b8:	69e3      	ldr	r3, [r4, #28]
        obj->coords.x2 = obj->coords.x1 + w - 1;
240081ba:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
240081bc:	4798      	blx	r3
    return obj->parent;
240081be:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
240081c0:	b118      	cbz	r0, 240081ca <lv_obj_set_size+0x5a>
240081c2:	69c3      	ldr	r3, [r0, #28]
240081c4:	4622      	mov	r2, r4
240081c6:	2101      	movs	r1, #1
240081c8:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
240081ca:	1d26      	adds	r6, r4, #4
240081cc:	4630      	mov	r0, r6
240081ce:	f007 fa93 	bl	2400f6f8 <_lv_ll_get_head>
240081d2:	4605      	mov	r5, r0
240081d4:	b920      	cbnz	r0, 240081e0 <lv_obj_set_size+0x70>
    lv_obj_invalidate(obj);
240081d6:	4620      	mov	r0, r4
240081d8:	f7ff ff04 	bl	24007fe4 <lv_obj_invalidate>
}
240081dc:	b002      	add	sp, #8
240081de:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
240081e0:	69eb      	ldr	r3, [r5, #28]
240081e2:	466a      	mov	r2, sp
240081e4:	2103      	movs	r1, #3
240081e6:	4628      	mov	r0, r5
240081e8:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
240081ea:	4629      	mov	r1, r5
240081ec:	4630      	mov	r0, r6
240081ee:	f007 fa89 	bl	2400f704 <_lv_ll_get_next>
240081f2:	e7ee      	b.n	240081d2 <lv_obj_set_size+0x62>

240081f4 <lv_obj_set_width>:
240081f4:	8ac2      	ldrh	r2, [r0, #22]
240081f6:	8a43      	ldrh	r3, [r0, #18]
240081f8:	3201      	adds	r2, #1
240081fa:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
240081fc:	b212      	sxth	r2, r2
240081fe:	f7ff bfb7 	b.w	24008170 <lv_obj_set_size>

24008202 <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24008202:	8a83      	ldrh	r3, [r0, #20]
{
24008204:	460a      	mov	r2, r1
24008206:	8a01      	ldrh	r1, [r0, #16]
24008208:	3301      	adds	r3, #1
2400820a:	1a59      	subs	r1, r3, r1
2400820c:	b410      	push	{r4}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
2400820e:	b209      	sxth	r1, r1
}
24008210:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
24008214:	f7ff bfac 	b.w	24008170 <lv_obj_set_size>

24008218 <lv_obj_del>:
{
24008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400821a:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
2400821c:	f7ff fee2 	bl	24007fe4 <lv_obj_invalidate>
    return obj->parent;
24008220:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
24008222:	b9b7      	cbnz	r7, 24008252 <lv_obj_del+0x3a>
        disp = lv_obj_get_disp(obj);
24008224:	4628      	mov	r0, r5
24008226:	f7ff fdff 	bl	24007e28 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
2400822a:	4604      	mov	r4, r0
2400822c:	b178      	cbz	r0, 2400824e <lv_obj_del+0x36>
        if(disp->act_scr == obj) act_scr_del = true;
2400822e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
24008230:	1b73      	subs	r3, r6, r5
24008232:	425e      	negs	r6, r3
24008234:	415e      	adcs	r6, r3
    obj_del_core(obj);
24008236:	4628      	mov	r0, r5
24008238:	f7ff fe1c 	bl	24007e74 <obj_del_core>
    if(par) {
2400823c:	b127      	cbz	r7, 24008248 <lv_obj_del+0x30>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
2400823e:	69fb      	ldr	r3, [r7, #28]
24008240:	2200      	movs	r2, #0
24008242:	2101      	movs	r1, #1
24008244:	4638      	mov	r0, r7
24008246:	4798      	blx	r3
    if(act_scr_del)  {
24008248:	b10e      	cbz	r6, 2400824e <lv_obj_del+0x36>
        disp->act_scr = NULL;
2400824a:	2300      	movs	r3, #0
2400824c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
2400824e:	2000      	movs	r0, #0
24008250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
24008252:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
24008254:	4634      	mov	r4, r6
24008256:	e7ee      	b.n	24008236 <lv_obj_del+0x1e>

24008258 <lv_obj_clean>:
{
24008258:	b510      	push	{r4, lr}
        result = _lv_ll_get_head(&obj->child_ll);
2400825a:	1d04      	adds	r4, r0, #4
2400825c:	4620      	mov	r0, r4
2400825e:	f007 fa4b 	bl	2400f6f8 <_lv_ll_get_head>
    while(child) {
24008262:	b900      	cbnz	r0, 24008266 <lv_obj_clean+0xe>
}
24008264:	bd10      	pop	{r4, pc}
        lv_obj_del(child);
24008266:	f7ff ffd7 	bl	24008218 <lv_obj_del>
2400826a:	e7f7      	b.n	2400825c <lv_obj_clean+0x4>

2400826c <lv_obj_get_parent>:
}
2400826c:	6800      	ldr	r0, [r0, #0]
2400826e:	4770      	bx	lr

24008270 <lv_obj_get_child>:
        result = _lv_ll_get_head(&obj->child_ll);
24008270:	3004      	adds	r0, #4
    if(child == NULL) {
24008272:	b909      	cbnz	r1, 24008278 <lv_obj_get_child+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
24008274:	f007 ba40 	b.w	2400f6f8 <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
24008278:	f007 ba44 	b.w	2400f704 <_lv_ll_get_next>

2400827c <refresh_children_style>:
{
2400827c:	b538      	push	{r3, r4, r5, lr}
2400827e:	4605      	mov	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
24008280:	3004      	adds	r0, #4
24008282:	f007 fa39 	bl	2400f6f8 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
24008286:	4604      	mov	r4, r0
    while(child != NULL) {
24008288:	b900      	cbnz	r0, 2400828c <refresh_children_style+0x10>
}
2400828a:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
2400828c:	4620      	mov	r0, r4
2400828e:	f7ff fea9 	bl	24007fe4 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
24008292:	69e3      	ldr	r3, [r4, #28]
24008294:	2200      	movs	r2, #0
24008296:	2104      	movs	r1, #4
24008298:	4620      	mov	r0, r4
2400829a:	4798      	blx	r3
        lv_obj_invalidate(child);
2400829c:	4620      	mov	r0, r4
2400829e:	f7ff fea1 	bl	24007fe4 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
240082a2:	4620      	mov	r0, r4
240082a4:	f7ff ffea 	bl	2400827c <refresh_children_style>
        child = lv_obj_get_child(obj, child);
240082a8:	4621      	mov	r1, r4
240082aa:	4628      	mov	r0, r5
240082ac:	f7ff ffe0 	bl	24008270 <lv_obj_get_child>
240082b0:	e7e9      	b.n	24008286 <refresh_children_style+0xa>

240082b2 <lv_obj_get_child_back>:
        result = _lv_ll_get_tail(&obj->child_ll);
240082b2:	3004      	adds	r0, #4
    if(child == NULL) {
240082b4:	b909      	cbnz	r1, 240082ba <lv_obj_get_child_back+0x8>
        result = _lv_ll_get_tail(&obj->child_ll);
240082b6:	f007 ba22 	b.w	2400f6fe <_lv_ll_get_tail>
        result = _lv_ll_get_prev(&obj->child_ll, child);
240082ba:	f007 ba28 	b.w	2400f70e <_lv_ll_get_prev>

240082be <lv_obj_get_coords>:
{
240082be:	460b      	mov	r3, r1
    lv_area_copy(cords_p, &obj->coords);
240082c0:	f100 0110 	add.w	r1, r0, #16
240082c4:	4618      	mov	r0, r3
240082c6:	f7ff bc9e 	b.w	24007c06 <lv_area_copy>

240082ca <lv_obj_get_x>:
    return obj->parent;
240082ca:	6803      	ldr	r3, [r0, #0]
        rel_x             = obj->coords.x1 - parent->coords.x1;
240082cc:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
    if(parent) {
240082d0:	b113      	cbz	r3, 240082d8 <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
240082d2:	8a1b      	ldrh	r3, [r3, #16]
240082d4:	1ac0      	subs	r0, r0, r3
240082d6:	b200      	sxth	r0, r0
}
240082d8:	4770      	bx	lr

240082da <lv_obj_set_y>:
{
240082da:	b510      	push	{r4, lr}
240082dc:	4604      	mov	r4, r0
240082de:	460a      	mov	r2, r1
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
240082e0:	f7ff fff3 	bl	240082ca <lv_obj_get_x>
240082e4:	4601      	mov	r1, r0
240082e6:	4620      	mov	r0, r4
}
240082e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
240082ec:	f7ff bebb 	b.w	24008066 <lv_obj_set_pos>

240082f0 <lv_obj_get_y>:
    return obj->parent;
240082f0:	6803      	ldr	r3, [r0, #0]
        rel_y             = obj->coords.y1 - parent->coords.y1;
240082f2:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    if(parent) {
240082f6:	b113      	cbz	r3, 240082fe <lv_obj_get_y+0xe>
        rel_y             = obj->coords.y1 - parent->coords.y1;
240082f8:	8a5b      	ldrh	r3, [r3, #18]
240082fa:	1ac0      	subs	r0, r0, r3
240082fc:	b200      	sxth	r0, r0
}
240082fe:	4770      	bx	lr

24008300 <lv_obj_set_x>:
{
24008300:	b510      	push	{r4, lr}
24008302:	4604      	mov	r4, r0
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
24008304:	f7ff fff4 	bl	240082f0 <lv_obj_get_y>
24008308:	4602      	mov	r2, r0
2400830a:	4620      	mov	r0, r4
}
2400830c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
24008310:	f7ff bea9 	b.w	24008066 <lv_obj_set_pos>

24008314 <lv_obj_create>:
{
24008314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24008318:	460d      	mov	r5, r1
    if(parent == NULL) {
2400831a:	4606      	mov	r6, r0
2400831c:	2800      	cmp	r0, #0
2400831e:	d150      	bne.n	240083c2 <lv_obj_create+0xae>
        lv_disp_t * disp = lv_disp_get_default();
24008320:	f006 fd3e 	bl	2400eda0 <lv_disp_get_default>
        if(!disp) {
24008324:	b920      	cbnz	r0, 24008330 <lv_obj_create+0x1c>
            return NULL;
24008326:	2400      	movs	r4, #0
}
24008328:	4620      	mov	r0, r4
2400832a:	b003      	add	sp, #12
2400832c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
24008330:	3030      	adds	r0, #48	; 0x30
24008332:	f007 f9aa 	bl	2400f68a <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
24008336:	4604      	mov	r4, r0
24008338:	2800      	cmp	r0, #0
2400833a:	d0f4      	beq.n	24008326 <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
2400833c:	2138      	movs	r1, #56	; 0x38
2400833e:	f007 fd5f 	bl	2400fe00 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
24008342:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
24008346:	4630      	mov	r0, r6
        new_obj->event_cb = NULL;
24008348:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
2400834a:	f366 1346 	bfi	r3, r6, #5, #2
        new_obj->coords.x1    = 0;
2400834e:	6126      	str	r6, [r4, #16]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
24008350:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
24008354:	4b94      	ldr	r3, [pc, #592]	; (240085a8 <lv_obj_create+0x294>)
24008356:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
24008358:	4b94      	ldr	r3, [pc, #592]	; (240085ac <lv_obj_create+0x298>)
2400835a:	6223      	str	r3, [r4, #32]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
2400835c:	f006 fd26 	bl	2400edac <lv_disp_get_hor_res>
24008360:	3801      	subs	r0, #1
24008362:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
24008364:	4630      	mov	r0, r6
24008366:	f006 fd33 	bl	2400edd0 <lv_disp_get_ver_res>
2400836a:	3801      	subs	r0, #1
2400836c:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
2400836e:	2138      	movs	r1, #56	; 0x38
24008370:	1d20      	adds	r0, r4, #4
24008372:	f007 f982 	bl	2400f67a <_lv_ll_init>
    new_obj->ext_click_pad_hor = 0;
24008376:	2100      	movs	r1, #0
    new_obj->click        = 1;
24008378:	f640 4301 	movw	r3, #3073	; 0xc01
    lv_style_list_init(&new_obj->style_list);
2400837c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    new_obj->gesture_parent = parent ? 1 : 0;
24008380:	1a72      	subs	r2, r6, r1
    new_obj->ext_click_pad_hor = 0;
24008382:	6321      	str	r1, [r4, #48]	; 0x30
    new_obj->ext_attr = NULL;
24008384:	6261      	str	r1, [r4, #36]	; 0x24
    new_obj->gesture_parent = parent ? 1 : 0;
24008386:	bf18      	it	ne
24008388:	2201      	movne	r2, #1
    lv_style_list_init(&new_obj->style_list);
2400838a:	9001      	str	r0, [sp, #4]
    new_obj->click        = 1;
2400838c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
24008390:	6b62      	ldr	r2, [r4, #52]	; 0x34
24008392:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
24008396:	4313      	orrs	r3, r2
24008398:	6363      	str	r3, [r4, #52]	; 0x34
    lv_style_list_init(&new_obj->style_list);
2400839a:	f002 f913 	bl	2400a5c4 <lv_style_list_init>
    if(copy == NULL) {
2400839e:	9801      	ldr	r0, [sp, #4]
240083a0:	2d00      	cmp	r5, #0
240083a2:	d162      	bne.n	2400846a <lv_obj_create+0x156>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
240083a4:	2e00      	cmp	r6, #0
240083a6:	d05b      	beq.n	24008460 <lv_obj_create+0x14c>
240083a8:	2102      	movs	r1, #2
240083aa:	4620      	mov	r0, r4
240083ac:	f008 fd8a 	bl	24010ec4 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
240083b0:	69f3      	ldr	r3, [r6, #28]
240083b2:	4622      	mov	r2, r4
240083b4:	2101      	movs	r1, #1
240083b6:	4630      	mov	r0, r6
240083b8:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
240083ba:	4620      	mov	r0, r4
240083bc:	f7ff fe12 	bl	24007fe4 <lv_obj_invalidate>
240083c0:	e7b2      	b.n	24008328 <lv_obj_create+0x14>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
240083c2:	3004      	adds	r0, #4
240083c4:	f007 f961 	bl	2400f68a <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
240083c8:	4604      	mov	r4, r0
240083ca:	2800      	cmp	r0, #0
240083cc:	d0ab      	beq.n	24008326 <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
240083ce:	2138      	movs	r1, #56	; 0x38
        new_obj->event_cb = NULL;
240083d0:	f04f 0800 	mov.w	r8, #0
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
240083d4:	f007 fd14 	bl	2400fe00 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
240083d8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
240083dc:	f04f 0932 	mov.w	r9, #50	; 0x32
240083e0:	4640      	mov	r0, r8
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
240083e2:	f36f 1346 	bfc	r3, #5, #2
        new_obj->parent = parent;
240083e6:	6026      	str	r6, [r4, #0]
        new_obj->event_cb = NULL;
240083e8:	f8c4 8018 	str.w	r8, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
240083ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
240083f0:	4b6d      	ldr	r3, [pc, #436]	; (240085a8 <lv_obj_create+0x294>)
240083f2:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
240083f4:	4b6d      	ldr	r3, [pc, #436]	; (240085ac <lv_obj_create+0x298>)
240083f6:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
240083f8:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
240083fc:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
240083fe:	8a77      	ldrh	r7, [r6, #18]
24008400:	f006 fcf8 	bl	2400edf4 <lv_disp_get_dpi>
24008404:	fb00 f009 	mul.w	r0, r0, r9
24008408:	28ef      	cmp	r0, #239	; 0xef
2400840a:	dd25      	ble.n	24008458 <lv_obj_create+0x144>
2400840c:	4640      	mov	r0, r8
2400840e:	f006 fcf1 	bl	2400edf4 <lv_disp_get_dpi>
24008412:	2350      	movs	r3, #80	; 0x50
24008414:	fb00 3009 	mla	r0, r0, r9, r3
24008418:	23a0      	movs	r3, #160	; 0xa0
2400841a:	fb90 f0f3 	sdiv	r0, r0, r3
2400841e:	b280      	uxth	r0, r0
24008420:	4407      	add	r7, r0
            new_obj->coords.x1    = parent->coords.x1;
24008422:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
24008426:	f04f 0864 	mov.w	r8, #100	; 0x64
2400842a:	2000      	movs	r0, #0
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
2400842c:	82e7      	strh	r7, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
2400842e:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
24008430:	8a37      	ldrh	r7, [r6, #16]
24008432:	f006 fcdf 	bl	2400edf4 <lv_disp_get_dpi>
24008436:	fb00 f008 	mul.w	r0, r0, r8
2400843a:	28ef      	cmp	r0, #239	; 0xef
2400843c:	dd0e      	ble.n	2400845c <lv_obj_create+0x148>
2400843e:	2000      	movs	r0, #0
24008440:	f006 fcd8 	bl	2400edf4 <lv_disp_get_dpi>
24008444:	2350      	movs	r3, #80	; 0x50
24008446:	fb00 3008 	mla	r0, r0, r8, r3
2400844a:	23a0      	movs	r3, #160	; 0xa0
2400844c:	fb90 f0f3 	sdiv	r0, r0, r3
24008450:	b280      	uxth	r0, r0
24008452:	4407      	add	r7, r0
24008454:	82a7      	strh	r7, [r4, #20]
24008456:	e78a      	b.n	2400836e <lv_obj_create+0x5a>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
24008458:	2001      	movs	r0, #1
2400845a:	e7e1      	b.n	24008420 <lv_obj_create+0x10c>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
2400845c:	2001      	movs	r0, #1
2400845e:	e7f8      	b.n	24008452 <lv_obj_create+0x13e>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
24008460:	2101      	movs	r1, #1
24008462:	4620      	mov	r0, r4
24008464:	f008 fd2e 	bl	24010ec4 <lv_theme_apply>
    if(parent != NULL) {
24008468:	e75e      	b.n	24008328 <lv_obj_create+0x14>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
2400846a:	f105 0128 	add.w	r1, r5, #40	; 0x28
2400846e:	f002 fb2b 	bl	2400aac8 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
24008472:	f105 0110 	add.w	r1, r5, #16
24008476:	f104 0010 	add.w	r0, r4, #16
2400847a:	f7ff fbc4 	bl	24007c06 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
2400847e:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
        new_obj->base_dir = copy->base_dir;
24008482:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
        new_obj->ext_draw_pad = copy->ext_draw_pad;
24008486:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
24008488:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
2400848c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
24008490:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
24008494:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
24008498:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
2400849c:	f3c3 1341 	ubfx	r3, r3, #5, #2
240084a0:	f363 1246 	bfi	r2, r3, #5, #2
240084a4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->event_cb = copy->event_cb;
240084a8:	69ab      	ldr	r3, [r5, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
240084aa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
        new_obj->event_cb = copy->event_cb;
240084ae:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
240084b0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
240084b4:	09db      	lsrs	r3, r3, #7
240084b6:	f363 12c7 	bfi	r2, r3, #7, #1
240084ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
240084be:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
240084c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
240084c6:	f362 0300 	bfi	r3, r2, #0, #1
240084ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
240084ce:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
240084d2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
240084d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
240084da:	f363 0241 	bfi	r2, r3, #1, #1
240084de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
240084e2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
240084e6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
240084ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
240084ee:	f363 0284 	bfi	r2, r3, #2, #3
240084f2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
240084f6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
240084fa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
240084fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
24008502:	f363 0282 	bfi	r2, r3, #2, #1
24008506:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
2400850a:	b2d2      	uxtb	r2, r2
2400850c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
24008510:	f3c3 03c0 	ubfx	r3, r3, #3, #1
24008514:	f363 02c3 	bfi	r2, r3, #3, #1
24008518:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
2400851c:	b2d2      	uxtb	r2, r2
2400851e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
24008522:	f3c3 1300 	ubfx	r3, r3, #4, #1
24008526:	f363 1204 	bfi	r2, r3, #4, #1
2400852a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
2400852e:	b2d2      	uxtb	r2, r2
24008530:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
24008534:	f3c3 1340 	ubfx	r3, r3, #5, #1
24008538:	f363 1245 	bfi	r2, r3, #5, #1
2400853c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
24008540:	b2d2      	uxtb	r2, r2
24008542:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
24008546:	f3c3 1380 	ubfx	r3, r3, #6, #1
2400854a:	f363 1286 	bfi	r2, r3, #6, #1
2400854e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
24008552:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
24008556:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        new_obj->gesture_parent = copy->gesture_parent;
2400855a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
2400855e:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
24008562:	f362 0300 	bfi	r3, r2, #0, #1
24008566:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
2400856a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
2400856e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
24008572:	f3c3 0340 	ubfx	r3, r3, #1, #1
24008576:	f363 0241 	bfi	r2, r3, #1, #1
2400857a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
2400857e:	682b      	ldr	r3, [r5, #0]
24008580:	b173      	cbz	r3, 240085a0 <lv_obj_create+0x28c>
24008582:	2e00      	cmp	r6, #0
24008584:	f43f aed0 	beq.w	24008328 <lv_obj_create+0x14>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
24008588:	4628      	mov	r0, r5
2400858a:	f7ff fe9e 	bl	240082ca <lv_obj_get_x>
2400858e:	4601      	mov	r1, r0
24008590:	4628      	mov	r0, r5
24008592:	f7ff fead 	bl	240082f0 <lv_obj_get_y>
24008596:	4602      	mov	r2, r0
24008598:	4620      	mov	r0, r4
2400859a:	f7ff fd64 	bl	24008066 <lv_obj_set_pos>
    if(parent != NULL) {
2400859e:	e707      	b.n	240083b0 <lv_obj_create+0x9c>
240085a0:	2e00      	cmp	r6, #0
240085a2:	f47f af05 	bne.w	240083b0 <lv_obj_create+0x9c>
240085a6:	e6bf      	b.n	24008328 <lv_obj_create+0x14>
240085a8:	24009bd1 	.word	0x24009bd1
240085ac:	24009281 	.word	0x24009281

240085b0 <lv_obj_set_parent>:
    if(obj->parent == NULL) {
240085b0:	6803      	ldr	r3, [r0, #0]
{
240085b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240085b6:	4604      	mov	r4, r0
240085b8:	460d      	mov	r5, r1
    if(obj->parent == NULL) {
240085ba:	b333      	cbz	r3, 2400860a <lv_obj_set_parent+0x5a>
    if(parent == NULL) {
240085bc:	b329      	cbz	r1, 2400860a <lv_obj_set_parent+0x5a>
    lv_obj_invalidate(obj);
240085be:	f7ff fd11 	bl	24007fe4 <lv_obj_invalidate>
    old_pos.y = lv_obj_get_y(obj);
240085c2:	4620      	mov	r0, r4
240085c4:	f7ff fe94 	bl	240082f0 <lv_obj_get_y>
    lv_obj_t * old_par = obj->parent;
240085c8:	6826      	ldr	r6, [r4, #0]
    old_pos.y = lv_obj_get_y(obj);
240085ca:	4680      	mov	r8, r0
        old_pos.x = lv_obj_get_x(obj);
240085cc:	4620      	mov	r0, r4
240085ce:	f7ff fe7c 	bl	240082ca <lv_obj_get_x>
240085d2:	4607      	mov	r7, r0
    _lv_ll_chg_list(&obj->parent->child_ll, &parent->child_ll, obj, true);
240085d4:	2301      	movs	r3, #1
240085d6:	4622      	mov	r2, r4
240085d8:	1d29      	adds	r1, r5, #4
240085da:	1d30      	adds	r0, r6, #4
240085dc:	f007 f902 	bl	2400f7e4 <_lv_ll_chg_list>
        lv_obj_set_pos(obj, old_pos.x, old_pos.y);
240085e0:	4642      	mov	r2, r8
240085e2:	4639      	mov	r1, r7
240085e4:	4620      	mov	r0, r4
    obj->parent = parent;
240085e6:	6025      	str	r5, [r4, #0]
        lv_obj_set_pos(obj, old_pos.x, old_pos.y);
240085e8:	f7ff fd3d 	bl	24008066 <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
240085ec:	69f3      	ldr	r3, [r6, #28]
240085ee:	2200      	movs	r2, #0
240085f0:	2101      	movs	r1, #1
240085f2:	4630      	mov	r0, r6
240085f4:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
240085f6:	69eb      	ldr	r3, [r5, #28]
240085f8:	4622      	mov	r2, r4
240085fa:	4628      	mov	r0, r5
240085fc:	2101      	movs	r1, #1
240085fe:	4798      	blx	r3
    lv_obj_invalidate(obj);
24008600:	4620      	mov	r0, r4
}
24008602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
24008606:	f7ff bced 	b.w	24007fe4 <lv_obj_invalidate>
}
2400860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

2400860e <lv_obj_get_width>:
2400860e:	8a83      	ldrh	r3, [r0, #20]
24008610:	8a02      	ldrh	r2, [r0, #16]
24008612:	3301      	adds	r3, #1
24008614:	1a98      	subs	r0, r3, r2
}
24008616:	b200      	sxth	r0, r0
24008618:	4770      	bx	lr

2400861a <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400861a:	8ac3      	ldrh	r3, [r0, #22]
2400861c:	8a42      	ldrh	r2, [r0, #18]
2400861e:	3301      	adds	r3, #1
24008620:	1a98      	subs	r0, r3, r2
}
24008622:	b200      	sxth	r0, r0
24008624:	4770      	bx	lr

24008626 <lv_obj_get_auto_realign>:
}
24008626:	2000      	movs	r0, #0
24008628:	4770      	bx	lr

2400862a <lv_obj_get_style_list>:
{
2400862a:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
2400862c:	b911      	cbnz	r1, 24008634 <lv_obj_get_style_list+0xa>
2400862e:	3028      	adds	r0, #40	; 0x28
}
24008630:	b002      	add	sp, #8
24008632:	bd10      	pop	{r4, pc}
    info.result = NULL;
24008634:	2400      	movs	r4, #0
    info.part = part;
24008636:	f88d 1000 	strb.w	r1, [sp]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
2400863a:	466a      	mov	r2, sp
2400863c:	2108      	movs	r1, #8
    info.result = NULL;
2400863e:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
24008640:	f7ff fbdc 	bl	24007dfc <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
24008644:	2801      	cmp	r0, #1
    return info.result;
24008646:	bf0c      	ite	eq
24008648:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
2400864a:	4620      	movne	r0, r4
2400864c:	e7f0      	b.n	24008630 <lv_obj_get_style_list+0x6>

2400864e <lv_obj_clean_style_list>:
{
2400864e:	b508      	push	{r3, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
24008650:	f7ff ffeb 	bl	2400862a <lv_obj_get_style_list>
    if(style_dsc == NULL) {
24008654:	b118      	cbz	r0, 2400865e <lv_obj_clean_style_list+0x10>
}
24008656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_style_list_reset(style_dsc);
2400865a:	f002 ba09 	b.w	2400aa70 <_lv_style_list_reset>
}
2400865e:	bd08      	pop	{r3, pc}

24008660 <_lv_obj_disable_style_caching>:
{
24008660:	b570      	push	{r4, r5, r6, lr}
24008662:	4606      	mov	r6, r0
24008664:	460d      	mov	r5, r1
24008666:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24008668:	b2e1      	uxtb	r1, r4
2400866a:	4630      	mov	r0, r6
2400866c:	f7ff ffdd 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
24008670:	b970      	cbnz	r0, 24008690 <_lv_obj_disable_style_caching+0x30>
{
24008672:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24008674:	4621      	mov	r1, r4
24008676:	4630      	mov	r0, r6
24008678:	f7ff ffd7 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
2400867c:	b138      	cbz	r0, 2400868e <_lv_obj_disable_style_caching+0x2e>
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
2400867e:	3401      	adds	r4, #1
        list->ignore_cache = dis;
24008680:	7942      	ldrb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008682:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
24008684:	f365 02c3 	bfi	r2, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008688:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
2400868a:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
2400868c:	d1f2      	bne.n	24008674 <_lv_obj_disable_style_caching+0x14>
}
2400868e:	bd70      	pop	{r4, r5, r6, pc}
        list->ignore_cache = dis;
24008690:	7942      	ldrb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
24008692:	3401      	adds	r4, #1
        list->ignore_cache = dis;
24008694:	f365 02c3 	bfi	r2, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
24008698:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
2400869a:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
2400869c:	d1e4      	bne.n	24008668 <_lv_obj_disable_style_caching+0x8>
2400869e:	e7e8      	b.n	24008672 <_lv_obj_disable_style_caching+0x12>

240086a0 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
240086a0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
240086a4:	f3c0 1000 	ubfx	r0, r0, #4, #1
240086a8:	4770      	bx	lr

240086aa <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
240086aa:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
240086ae:	f000 0001 	and.w	r0, r0, #1
240086b2:	4770      	bx	lr

240086b4 <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
240086b4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
240086b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
240086bc:	4770      	bx	lr

240086be <lv_obj_get_drag_dir>:
    return obj->drag_dir;
240086be:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
240086c2:	f3c0 0082 	ubfx	r0, r0, #2, #3
240086c6:	4770      	bx	lr

240086c8 <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
240086c8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
240086cc:	f3c0 0080 	ubfx	r0, r0, #2, #1
240086d0:	4770      	bx	lr

240086d2 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
240086d2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
240086d6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
240086da:	4770      	bx	lr

240086dc <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
240086dc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
240086e0:	f000 0001 	and.w	r0, r0, #1
240086e4:	4770      	bx	lr

240086e6 <lv_obj_get_base_dir>:
}
240086e6:	2000      	movs	r0, #0
240086e8:	4770      	bx	lr

240086ea <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
240086ea:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
240086ee:	4219      	tst	r1, r3
}
240086f0:	bf14      	ite	ne
240086f2:	2001      	movne	r0, #1
240086f4:	2000      	moveq	r0, #0
240086f6:	4770      	bx	lr

240086f8 <lv_obj_get_state>:
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
240086f8:	293f      	cmp	r1, #63	; 0x3f
{
240086fa:	b507      	push	{r0, r1, r2, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
240086fc:	d804      	bhi.n	24008708 <lv_obj_get_state+0x10>
240086fe:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
}
24008702:	b003      	add	sp, #12
24008704:	f85d fb04 	ldr.w	pc, [sp], #4
    info.result = LV_STATE_DEFAULT;
24008708:	2300      	movs	r3, #0
    info.part = part;
2400870a:	f88d 1004 	strb.w	r1, [sp, #4]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
2400870e:	aa01      	add	r2, sp, #4
24008710:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
24008712:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
24008716:	f7ff fb71 	bl	24007dfc <lv_signal_send>
    return info.result;
2400871a:	f89d 0005 	ldrb.w	r0, [sp, #5]
2400871e:	e7f0      	b.n	24008702 <lv_obj_get_state+0xa>

24008720 <_lv_obj_get_style_color>:
{
24008720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24008724:	4605      	mov	r5, r0
24008726:	460e      	mov	r6, r1
24008728:	4617      	mov	r7, r2
    while(parent) {
2400872a:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
2400872c:	f342 2907 	sbfx	r9, r2, #8, #8
    while(parent) {
24008730:	b945      	cbnz	r5, 24008744 <_lv_obj_get_style_color+0x24>
    prop = prop & (~LV_STYLE_STATE_MASK);
24008732:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
24008736:	3c29      	subs	r4, #41	; 0x29
24008738:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
2400873a:	bf96      	itet	ls
2400873c:	4b11      	ldrls	r3, [pc, #68]	; (24008784 <_lv_obj_get_style_color+0x64>)
    return LV_COLOR_BLACK;
2400873e:	2000      	movhi	r0, #0
            return LV_COLOR_WHITE;
24008740:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
24008742:	e014      	b.n	2400876e <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
24008744:	4631      	mov	r1, r6
24008746:	4628      	mov	r0, r5
24008748:	f7ff ff6f 	bl	2400862a <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
2400874c:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
2400874e:	4680      	mov	r8, r0
        lv_state_t state = lv_obj_get_state(parent, part);
24008750:	4628      	mov	r0, r5
24008752:	f7ff ffd1 	bl	240086f8 <lv_obj_get_state>
        res = _lv_style_list_get_color(list, prop, &value_act);
24008756:	aa01      	add	r2, sp, #4
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
24008758:	eb07 2400 	add.w	r4, r7, r0, lsl #8
        res = _lv_style_list_get_color(list, prop, &value_act);
2400875c:	4640      	mov	r0, r8
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
2400875e:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
24008760:	4621      	mov	r1, r4
24008762:	f002 fa6d 	bl	2400ac40 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
24008766:	2801      	cmp	r0, #1
24008768:	d104      	bne.n	24008774 <_lv_obj_get_style_color+0x54>
2400876a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
2400876e:	b003      	add	sp, #12
24008770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
24008774:	f1b9 0f00 	cmp.w	r9, #0
24008778:	dadb      	bge.n	24008732 <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
2400877a:	b906      	cbnz	r6, 2400877e <_lv_obj_get_style_color+0x5e>
    return obj->parent;
2400877c:	682d      	ldr	r5, [r5, #0]
{
2400877e:	2600      	movs	r6, #0
24008780:	e7d6      	b.n	24008730 <_lv_obj_get_style_color+0x10>
24008782:	bf00      	nop
24008784:	9001acbc 	.word	0x9001acbc

24008788 <_lv_obj_get_style_int>:
{
24008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400878c:	4606      	mov	r6, r0
2400878e:	b085      	sub	sp, #20
24008790:	468b      	mov	fp, r1
24008792:	4617      	mov	r7, r2
    attr = prop_ori >> 8;
24008794:	ea4f 2812 	mov.w	r8, r2, lsr #8
    while(parent) {
24008798:	4615      	mov	r5, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
2400879a:	f248 0982 	movw	r9, #32898	; 0x8082
2400879e:	f248 0a83 	movw	sl, #32899	; 0x8083
    while(parent) {
240087a2:	2e00      	cmp	r6, #0
240087a4:	f000 80ab 	beq.w	240088fe <_lv_obj_get_style_int+0x176>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
240087a8:	4659      	mov	r1, fp
240087aa:	4630      	mov	r0, r6
240087ac:	f7ff ff3d 	bl	2400862a <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
240087b0:	7942      	ldrb	r2, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
240087b2:	4604      	mov	r4, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
240087b4:	0713      	lsls	r3, r2, #28
240087b6:	d414      	bmi.n	240087e2 <_lv_obj_get_style_int+0x5a>
240087b8:	7901      	ldrb	r1, [r0, #4]
240087ba:	0688      	lsls	r0, r1, #26
240087bc:	d011      	beq.n	240087e2 <_lv_obj_get_style_int+0x5a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
240087be:	f012 0f04 	tst.w	r2, #4
240087c2:	f425 42fe 	bic.w	r2, r5, #32512	; 0x7f00
240087c6:	d105      	bne.n	240087d4 <_lv_obj_get_style_int+0x4c>
240087c8:	4659      	mov	r1, fp
240087ca:	4630      	mov	r0, r6
240087cc:	9201      	str	r2, [sp, #4]
240087ce:	f000 f8dd 	bl	2400898c <update_style_cache>
240087d2:	9a01      	ldr	r2, [sp, #4]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
240087d4:	2a33      	cmp	r2, #51	; 0x33
240087d6:	dc66      	bgt.n	240088a6 <_lv_obj_get_style_int+0x11e>
240087d8:	2a2f      	cmp	r2, #47	; 0x2f
240087da:	dc1f      	bgt.n	2400881c <_lv_obj_get_style_int+0x94>
240087dc:	2a18      	cmp	r2, #24
240087de:	dc5f      	bgt.n	240088a0 <_lv_obj_get_style_int+0x118>
240087e0:	bb42      	cbnz	r2, 24008834 <_lv_obj_get_style_int+0xac>
        lv_state_t state = lv_obj_get_state(parent, part);
240087e2:	4659      	mov	r1, fp
240087e4:	4630      	mov	r0, r6
240087e6:	f7ff ff87 	bl	240086f8 <lv_obj_get_state>
        res = _lv_style_list_get_int(list, prop, &value_act);
240087ea:	f10d 020e 	add.w	r2, sp, #14
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
240087ee:	eb07 2000 	add.w	r0, r7, r0, lsl #8
240087f2:	b285      	uxth	r5, r0
        res = _lv_style_list_get_int(list, prop, &value_act);
240087f4:	4620      	mov	r0, r4
240087f6:	4629      	mov	r1, r5
240087f8:	f002 f9df 	bl	2400abba <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
240087fc:	2801      	cmp	r0, #1
240087fe:	f040 80a2 	bne.w	24008946 <_lv_obj_get_style_int+0x1be>
24008802:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
24008806:	b005      	add	sp, #20
24008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
2400880c:	3a54      	subs	r2, #84	; 0x54
2400880e:	4b5a      	ldr	r3, [pc, #360]	; (24008978 <_lv_obj_get_style_int+0x1f0>)
24008810:	fa23 f202 	lsr.w	r2, r3, r2
24008814:	07d1      	lsls	r1, r2, #31
24008816:	d5e4      	bpl.n	240087e2 <_lv_obj_get_style_int+0x5a>
                    if(list->blend_mode_all_normal) def = true;
24008818:	79a2      	ldrb	r2, [r4, #6]
2400881a:	e089      	b.n	24008930 <_lv_obj_get_style_int+0x1a8>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
2400881c:	3a31      	subs	r2, #49	; 0x31
2400881e:	2a02      	cmp	r2, #2
24008820:	d87a      	bhi.n	24008918 <_lv_obj_get_style_int+0x190>
24008822:	a101      	add	r1, pc, #4	; (adr r1, 24008828 <_lv_obj_get_style_int+0xa0>)
24008824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
24008828:	2400891d 	.word	0x2400891d
2400882c:	24008819 	.word	0x24008819
24008830:	24008921 	.word	0x24008921
24008834:	3a01      	subs	r2, #1
24008836:	2a17      	cmp	r2, #23
24008838:	d8d3      	bhi.n	240087e2 <_lv_obj_get_style_int+0x5a>
2400883a:	a101      	add	r1, pc, #4	; (adr r1, 24008840 <_lv_obj_get_style_int+0xb8>)
2400883c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
24008840:	24008927 	.word	0x24008927
24008844:	240088ed 	.word	0x240088ed
24008848:	240087e3 	.word	0x240087e3
2400884c:	240088f5 	.word	0x240088f5
24008850:	240088f5 	.word	0x240088f5
24008854:	240088f5 	.word	0x240088f5
24008858:	240088f5 	.word	0x240088f5
2400885c:	240087e3 	.word	0x240087e3
24008860:	240087e3 	.word	0x240087e3
24008864:	240087e3 	.word	0x240087e3
24008868:	240087e3 	.word	0x240087e3
2400886c:	240087e3 	.word	0x240087e3
24008870:	240087e3 	.word	0x240087e3
24008874:	240087e3 	.word	0x240087e3
24008878:	240087e3 	.word	0x240087e3
2400887c:	24008937 	.word	0x24008937
24008880:	24008937 	.word	0x24008937
24008884:	24008937 	.word	0x24008937
24008888:	24008937 	.word	0x24008937
2400888c:	240087e3 	.word	0x240087e3
24008890:	2400893b 	.word	0x2400893b
24008894:	2400893b 	.word	0x2400893b
24008898:	2400893b 	.word	0x2400893b
2400889c:	2400893b 	.word	0x2400893b
240088a0:	2a20      	cmp	r2, #32
240088a2:	d0b9      	beq.n	24008818 <_lv_obj_get_style_int+0x90>
240088a4:	e79d      	b.n	240087e2 <_lv_obj_get_style_int+0x5a>
240088a6:	2a72      	cmp	r2, #114	; 0x72
240088a8:	dc0b      	bgt.n	240088c2 <_lv_obj_get_style_int+0x13a>
240088aa:	2a53      	cmp	r2, #83	; 0x53
240088ac:	dcae      	bgt.n	2400880c <_lv_obj_get_style_int+0x84>
240088ae:	2a42      	cmp	r2, #66	; 0x42
240088b0:	d0b2      	beq.n	24008818 <_lv_obj_get_style_int+0x90>
240088b2:	2a50      	cmp	r2, #80	; 0x50
240088b4:	d03b      	beq.n	2400892e <_lv_obj_get_style_int+0x1a6>
240088b6:	2a40      	cmp	r2, #64	; 0x40
240088b8:	d193      	bne.n	240087e2 <_lv_obj_get_style_int+0x5a>
                    if(list->outline_width_zero) def = true;
240088ba:	79e2      	ldrb	r2, [r4, #7]
                    if(list->pad_all_zero) def = true;
240088bc:	f012 0f01 	tst.w	r2, #1
240088c0:	e00c      	b.n	240088dc <_lv_obj_get_style_int+0x154>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
240088c2:	454a      	cmp	r2, r9
240088c4:	d03d      	beq.n	24008942 <_lv_obj_get_style_int+0x1ba>
240088c6:	dc0b      	bgt.n	240088e0 <_lv_obj_get_style_int+0x158>
240088c8:	2a91      	cmp	r2, #145	; 0x91
240088ca:	d0a5      	beq.n	24008818 <_lv_obj_get_style_int+0x90>
240088cc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
240088d0:	3a80      	subs	r2, #128	; 0x80
240088d2:	2a01      	cmp	r2, #1
240088d4:	d885      	bhi.n	240087e2 <_lv_obj_get_style_int+0x5a>
                    if(list->text_space_zero) def = true;
240088d6:	79e2      	ldrb	r2, [r4, #7]
                    if(list->border_width_zero) def = true;
240088d8:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
240088dc:	d081      	beq.n	240087e2 <_lv_obj_get_style_int+0x5a>
240088de:	e00e      	b.n	240088fe <_lv_obj_get_style_int+0x176>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
240088e0:	4552      	cmp	r2, sl
240088e2:	d099      	beq.n	24008818 <_lv_obj_get_style_int+0x90>
240088e4:	f248 01a0 	movw	r1, #32928	; 0x80a0
240088e8:	428a      	cmp	r2, r1
240088ea:	e7da      	b.n	240088a2 <_lv_obj_get_style_int+0x11a>
                    if(list->clip_corner_off) def = true;
240088ec:	7962      	ldrb	r2, [r4, #5]
                    if(list->text_decor_none) def = true;
240088ee:	f012 0f40 	tst.w	r2, #64	; 0x40
240088f2:	e7f3      	b.n	240088dc <_lv_obj_get_style_int+0x154>
                    if(list->transform_all_zero) def = true;
240088f4:	f994 2005 	ldrsb.w	r2, [r4, #5]
                    if(list->border_post_off) def = true;
240088f8:	2a00      	cmp	r2, #0
240088fa:	f6bf af72 	bge.w	240087e2 <_lv_obj_get_style_int+0x5a>
    prop = prop & (~LV_STYLE_STATE_MASK);
240088fe:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
24008902:	2d22      	cmp	r5, #34	; 0x22
    prop = prop & (~LV_STYLE_STATE_MASK);
24008904:	b2a8      	uxth	r0, r5
    switch(prop) {
24008906:	d030      	beq.n	2400896a <_lv_obj_get_style_int+0x1e2>
24008908:	d827      	bhi.n	2400895a <_lv_obj_get_style_int+0x1d2>
2400890a:	2803      	cmp	r0, #3
2400890c:	d02f      	beq.n	2400896e <_lv_obj_get_style_int+0x1e6>
2400890e:	1fc2      	subs	r2, r0, #7
24008910:	4250      	negs	r0, r2
24008912:	4150      	adcs	r0, r2
24008914:	0200      	lsls	r0, r0, #8
24008916:	e776      	b.n	24008806 <_lv_obj_get_style_int+0x7e>
                    if(list->border_width_zero) def = true;
24008918:	79a2      	ldrb	r2, [r4, #6]
2400891a:	e7dd      	b.n	240088d8 <_lv_obj_get_style_int+0x150>
                    if(list->border_side_full) def = true;
2400891c:	79a2      	ldrb	r2, [r4, #6]
2400891e:	e7e6      	b.n	240088ee <_lv_obj_get_style_int+0x166>
                    if(list->border_post_off) def = true;
24008920:	f994 2006 	ldrsb.w	r2, [r4, #6]
24008924:	e7e8      	b.n	240088f8 <_lv_obj_get_style_int+0x170>
                    if(list->radius_zero) def = true;
24008926:	7962      	ldrb	r2, [r4, #5]
24008928:	f012 0f10 	tst.w	r2, #16
2400892c:	e7d6      	b.n	240088dc <_lv_obj_get_style_int+0x154>
                    if(list->shadow_width_zero) def = true;
2400892e:	79e2      	ldrb	r2, [r4, #7]
                    if(list->blend_mode_all_normal) def = true;
24008930:	f012 0f04 	tst.w	r2, #4
24008934:	e7d2      	b.n	240088dc <_lv_obj_get_style_int+0x154>
                    if(list->pad_all_zero) def = true;
24008936:	79a2      	ldrb	r2, [r4, #6]
24008938:	e7c0      	b.n	240088bc <_lv_obj_get_style_int+0x134>
                    if(list->margin_all_zero) def = true;
2400893a:	79a2      	ldrb	r2, [r4, #6]
2400893c:	f012 0f02 	tst.w	r2, #2
24008940:	e7cc      	b.n	240088dc <_lv_obj_get_style_int+0x154>
                    if(list->text_decor_none) def = true;
24008942:	79e2      	ldrb	r2, [r4, #7]
24008944:	e7d3      	b.n	240088ee <_lv_obj_get_style_int+0x166>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
24008946:	f018 0f80 	tst.w	r8, #128	; 0x80
2400894a:	d0d8      	beq.n	240088fe <_lv_obj_get_style_int+0x176>
        if(part != LV_OBJ_PART_MAIN) {
2400894c:	f1bb 0f00 	cmp.w	fp, #0
24008950:	d100      	bne.n	24008954 <_lv_obj_get_style_int+0x1cc>
    return obj->parent;
24008952:	6836      	ldr	r6, [r6, #0]
{
24008954:	f04f 0b00 	mov.w	fp, #0
24008958:	e723      	b.n	240087a2 <_lv_obj_get_style_int+0x1a>
    switch(prop) {
2400895a:	2831      	cmp	r0, #49	; 0x31
2400895c:	d009      	beq.n	24008972 <_lv_obj_get_style_int+0x1ea>
2400895e:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
24008962:	4258      	negs	r0, r3
24008964:	4158      	adcs	r0, r3
24008966:	0100      	lsls	r0, r0, #4
24008968:	e74d      	b.n	24008806 <_lv_obj_get_style_int+0x7e>
            return 255;
2400896a:	20ff      	movs	r0, #255	; 0xff
2400896c:	e74b      	b.n	24008806 <_lv_obj_get_style_int+0x7e>
    switch(prop) {
2400896e:	2006      	movs	r0, #6
24008970:	e749      	b.n	24008806 <_lv_obj_get_style_int+0x7e>
            return LV_BORDER_SIDE_FULL;
24008972:	200f      	movs	r0, #15
24008974:	e747      	b.n	24008806 <_lv_obj_get_style_int+0x7e>
24008976:	bf00      	nop
24008978:	40001001 	.word	0x40001001

2400897c <lv_obj_get_style_clip_corner>:
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
2400897c:	2202      	movs	r2, #2
2400897e:	b508      	push	{r3, lr}
24008980:	f7ff ff02 	bl	24008788 <_lv_obj_get_style_int>
24008984:	3800      	subs	r0, #0
24008986:	bf18      	it	ne
24008988:	2001      	movne	r0, #1
2400898a:	bd08      	pop	{r3, pc}

2400898c <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
2400898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400898e:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
24008990:	4610      	mov	r0, r2
{
24008992:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
24008994:	f7ff f8c2 	bl	24007b1c <style_prop_is_cacheble>
24008998:	2800      	cmp	r0, #0
2400899a:	f000 8100 	beq.w	24008b9e <update_style_cache+0x212>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
2400899e:	4628      	mov	r0, r5
240089a0:	f7ff fe43 	bl	2400862a <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
240089a4:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
240089a6:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
240089a8:	f248 0282 	movw	r2, #32898	; 0x8082
    bool ignore_cache_ori = list->ignore_cache;
240089ac:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
240089b0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
240089b4:	4631      	mov	r1, r6
240089b6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
240089ba:	7143      	strb	r3, [r0, #5]
240089bc:	4628      	mov	r0, r5
240089be:	f7ff fee3 	bl	24008788 <_lv_obj_get_style_int>
#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
240089c2:	79e3      	ldrb	r3, [r4, #7]
240089c4:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240089c6:	f248 028e 	movw	r2, #32910	; 0x808e
240089ca:	4631      	mov	r1, r6
240089cc:	fab0 f080 	clz	r0, r0
240089d0:	0940      	lsrs	r0, r0, #5
240089d2:	f360 1386 	bfi	r3, r0, #6, #1
240089d6:	4628      	mov	r0, r5
240089d8:	71e3      	strb	r3, [r4, #7]
240089da:	f000 f999 	bl	24008d10 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
240089de:	4b97      	ldr	r3, [pc, #604]	; (24008c3c <update_style_cache+0x2b0>)

    list->text_space_zero = 1;
240089e0:	79e2      	ldrb	r2, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
240089e2:	4631      	mov	r1, r6
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
240089e4:	1a18      	subs	r0, r3, r0
    list->text_space_zero = 1;
240089e6:	f002 025f 	and.w	r2, r2, #95	; 0x5f
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
240089ea:	4243      	negs	r3, r0
240089ec:	4143      	adcs	r3, r0
240089ee:	4628      	mov	r0, r5
    list->text_space_zero = 1;
240089f0:	01db      	lsls	r3, r3, #7
240089f2:	f043 0320 	orr.w	r3, r3, #32
240089f6:	4313      	orrs	r3, r2
240089f8:	f248 0280 	movw	r2, #32896	; 0x8080
240089fc:	71e3      	strb	r3, [r4, #7]
240089fe:	f7ff fec3 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
24008a02:	2800      	cmp	r0, #0
24008a04:	f000 80cc 	beq.w	24008ba0 <update_style_cache+0x214>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
24008a08:	79e3      	ldrb	r3, [r4, #7]
24008a0a:	f36f 1345 	bfc	r3, #5, #1
24008a0e:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24008a10:	222c      	movs	r2, #44	; 0x2c
24008a12:	4631      	mov	r1, r6
24008a14:	4628      	mov	r0, r5
24008a16:	f000 f915 	bl	24008c44 <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
24008a1a:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
24008a1e:	fab0 f080 	clz	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24008a22:	4631      	mov	r1, r6
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
24008a24:	4253      	negs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
24008a26:	ea4f 1050 	mov.w	r0, r0, lsr #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
24008a2a:	4153      	adcs	r3, r2
24008a2c:	2230      	movs	r2, #48	; 0x30
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
24008a2e:	00c0      	lsls	r0, r0, #3
24008a30:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
24008a34:	79a3      	ldrb	r3, [r4, #6]
24008a36:	f023 0318 	bic.w	r3, r3, #24
24008a3a:	4318      	orrs	r0, r3
24008a3c:	71a0      	strb	r0, [r4, #6]
24008a3e:	4628      	mov	r0, r5
24008a40:	f7ff fea2 	bl	24008788 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
24008a44:	fab0 f080 	clz	r0, r0
24008a48:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
24008a4a:	2231      	movs	r2, #49	; 0x31
24008a4c:	0940      	lsrs	r0, r0, #5
24008a4e:	4631      	mov	r1, r6
24008a50:	f360 1345 	bfi	r3, r0, #5, #1
24008a54:	4628      	mov	r0, r5
24008a56:	71a3      	strb	r3, [r4, #6]
24008a58:	f7ff fe96 	bl	24008788 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
24008a5c:	79a3      	ldrb	r3, [r4, #6]
24008a5e:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
24008a60:	2233      	movs	r2, #51	; 0x33
24008a62:	f1a0 010f 	sub.w	r1, r0, #15
24008a66:	4248      	negs	r0, r1
24008a68:	4148      	adcs	r0, r1
24008a6a:	4631      	mov	r1, r6
24008a6c:	f360 1386 	bfi	r3, r0, #6, #1
24008a70:	4628      	mov	r0, r5
24008a72:	71a3      	strb	r3, [r4, #6]
24008a74:	f7ff fe88 	bl	24008788 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
24008a78:	fab0 f080 	clz	r0, r0
24008a7c:	79a3      	ldrb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
24008a7e:	4631      	mov	r1, r6
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
24008a80:	0940      	lsrs	r0, r0, #5
24008a82:	f360 13c7 	bfi	r3, r0, #7, #1
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
24008a86:	4628      	mov	r0, r5
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
24008a88:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
24008a8a:	f7ff ff77 	bl	2400897c <lv_obj_get_style_clip_corner>
24008a8e:	7963      	ldrb	r3, [r4, #5]
24008a90:	f080 0001 	eor.w	r0, r0, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
24008a94:	f248 02ad 	movw	r2, #32941	; 0x80ad
24008a98:	4631      	mov	r1, r6
24008a9a:	f360 1386 	bfi	r3, r0, #6, #1
24008a9e:	4628      	mov	r0, r5
24008aa0:	7163      	strb	r3, [r4, #5]
24008aa2:	f000 f8cf 	bl	24008c44 <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
24008aa6:	fab0 f080 	clz	r0, r0
24008aaa:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
24008aac:	2240      	movs	r2, #64	; 0x40
24008aae:	0940      	lsrs	r0, r0, #5
24008ab0:	4631      	mov	r1, r6
24008ab2:	f360 1304 	bfi	r3, r0, #4, #1
24008ab6:	4628      	mov	r0, r5
24008ab8:	71e3      	strb	r3, [r4, #7]
24008aba:	f7ff fe65 	bl	24008788 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
24008abe:	fab0 f080 	clz	r0, r0
24008ac2:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
24008ac4:	226e      	movs	r2, #110	; 0x6e
24008ac6:	0940      	lsrs	r0, r0, #5
24008ac8:	4631      	mov	r1, r6
24008aca:	f360 0300 	bfi	r3, r0, #0, #1
24008ace:	4628      	mov	r0, r5
24008ad0:	71e3      	strb	r3, [r4, #7]
24008ad2:	f000 f91d 	bl	24008d10 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
24008ad6:	fab0 f080 	clz	r0, r0
24008ada:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24008adc:	2201      	movs	r2, #1
24008ade:	0940      	lsrs	r0, r0, #5
24008ae0:	4631      	mov	r1, r6
24008ae2:	f360 0341 	bfi	r3, r0, #1, #1
24008ae6:	4628      	mov	r0, r5
24008ae8:	71e3      	strb	r3, [r4, #7]
24008aea:	f7ff fe4d 	bl	24008788 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
24008aee:	fab0 f080 	clz	r0, r0
24008af2:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
24008af4:	2250      	movs	r2, #80	; 0x50
24008af6:	0940      	lsrs	r0, r0, #5
24008af8:	4631      	mov	r1, r6
24008afa:	f360 1304 	bfi	r3, r0, #4, #1
24008afe:	4628      	mov	r0, r5
24008b00:	7163      	strb	r3, [r4, #5]
24008b02:	f7ff fe41 	bl	24008788 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
24008b06:	fab0 f080 	clz	r0, r0
24008b0a:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
24008b0c:	227f      	movs	r2, #127	; 0x7f
24008b0e:	0940      	lsrs	r0, r0, #5
24008b10:	4631      	mov	r1, r6
24008b12:	f360 0382 	bfi	r3, r0, #2, #1
24008b16:	4628      	mov	r0, r5
24008b18:	71e3      	strb	r3, [r4, #7]
24008b1a:	f000 f8f9 	bl	24008d10 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
24008b1e:	fab0 f080 	clz	r0, r0


    list->transform_all_zero  = 1;
24008b22:	6863      	ldr	r3, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24008b24:	2206      	movs	r2, #6
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
24008b26:	0940      	lsrs	r0, r0, #5
24008b28:	4631      	mov	r1, r6
    list->transform_all_zero  = 1;
24008b2a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
24008b2e:	06c0      	lsls	r0, r0, #27
24008b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24008b34:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
24008b38:	4318      	orrs	r0, r3
24008b3a:	6060      	str	r0, [r4, #4]
24008b3c:	4628      	mov	r0, r5
24008b3e:	f7ff fe23 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
24008b42:	2800      	cmp	r0, #0
24008b44:	d036      	beq.n	24008bb4 <update_style_cache+0x228>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
24008b46:	7963      	ldrb	r3, [r4, #5]
24008b48:	f36f 13c7 	bfc	r3, #7, #1
24008b4c:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
24008b4e:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24008b50:	2210      	movs	r2, #16
24008b52:	4631      	mov	r1, r6
24008b54:	4628      	mov	r0, r5
24008b56:	f043 0301 	orr.w	r3, r3, #1
24008b5a:	71a3      	strb	r3, [r4, #6]
24008b5c:	f7ff fe14 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
24008b60:	2800      	cmp	r0, #0
24008b62:	d03e      	beq.n	24008be2 <update_style_cache+0x256>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
24008b64:	79a3      	ldrb	r3, [r4, #6]
24008b66:	f36f 0300 	bfc	r3, #0, #1
24008b6a:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
24008b6c:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
24008b6e:	2215      	movs	r2, #21
24008b70:	4631      	mov	r1, r6
24008b72:	4628      	mov	r0, r5
24008b74:	f043 0302 	orr.w	r3, r3, #2
24008b78:	71a3      	strb	r3, [r4, #6]
24008b7a:	f7ff fe05 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
24008b7e:	2800      	cmp	r0, #0
24008b80:	d045      	beq.n	24008c0e <update_style_cache+0x282>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
24008b82:	79a3      	ldrb	r3, [r4, #6]
24008b84:	f36f 0341 	bfc	r3, #1, #1
24008b88:	71a3      	strb	r3, [r4, #6]
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
24008b8a:	6862      	ldr	r2, [r4, #4]
24008b8c:	4b2c      	ldr	r3, [pc, #176]	; (24008c40 <update_style_cache+0x2b4>)
24008b8e:	f422 2281 	bic.w	r2, r2, #264192	; 0x40800
24008b92:	ea43 23c7 	orr.w	r3, r3, r7, lsl #11
24008b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
24008b9a:	4313      	orrs	r3, r2
24008b9c:	6063      	str	r3, [r4, #4]
}
24008b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24008ba0:	f248 0281 	movw	r2, #32897	; 0x8081
24008ba4:	4631      	mov	r1, r6
24008ba6:	4628      	mov	r0, r5
24008ba8:	f7ff fdee 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
24008bac:	2800      	cmp	r0, #0
24008bae:	f47f af2b 	bne.w	24008a08 <update_style_cache+0x7c>
24008bb2:	e72d      	b.n	24008a10 <update_style_cache+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
24008bb4:	2204      	movs	r2, #4
24008bb6:	4631      	mov	r1, r6
24008bb8:	4628      	mov	r0, r5
24008bba:	f7ff fde5 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
24008bbe:	2800      	cmp	r0, #0
24008bc0:	d1c1      	bne.n	24008b46 <update_style_cache+0x1ba>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
24008bc2:	2205      	movs	r2, #5
24008bc4:	4631      	mov	r1, r6
24008bc6:	4628      	mov	r0, r5
24008bc8:	f7ff fdde 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
24008bcc:	2800      	cmp	r0, #0
24008bce:	d1ba      	bne.n	24008b46 <update_style_cache+0x1ba>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24008bd0:	2207      	movs	r2, #7
24008bd2:	4631      	mov	r1, r6
24008bd4:	4628      	mov	r0, r5
24008bd6:	f7ff fdd7 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
24008bda:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
24008bde:	d1b2      	bne.n	24008b46 <update_style_cache+0x1ba>
24008be0:	e7b5      	b.n	24008b4e <update_style_cache+0x1c2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24008be2:	2211      	movs	r2, #17
24008be4:	4631      	mov	r1, r6
24008be6:	4628      	mov	r0, r5
24008be8:	f7ff fdce 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
24008bec:	2800      	cmp	r0, #0
24008bee:	d1b9      	bne.n	24008b64 <update_style_cache+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24008bf0:	2212      	movs	r2, #18
24008bf2:	4631      	mov	r1, r6
24008bf4:	4628      	mov	r0, r5
24008bf6:	f7ff fdc7 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
24008bfa:	2800      	cmp	r0, #0
24008bfc:	d1b2      	bne.n	24008b64 <update_style_cache+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24008bfe:	2213      	movs	r2, #19
24008c00:	4631      	mov	r1, r6
24008c02:	4628      	mov	r0, r5
24008c04:	f7ff fdc0 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
24008c08:	2800      	cmp	r0, #0
24008c0a:	d1ab      	bne.n	24008b64 <update_style_cache+0x1d8>
24008c0c:	e7ae      	b.n	24008b6c <update_style_cache+0x1e0>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24008c0e:	2216      	movs	r2, #22
24008c10:	4631      	mov	r1, r6
24008c12:	4628      	mov	r0, r5
24008c14:	f7ff fdb8 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
24008c18:	2800      	cmp	r0, #0
24008c1a:	d1b2      	bne.n	24008b82 <update_style_cache+0x1f6>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24008c1c:	2217      	movs	r2, #23
24008c1e:	4631      	mov	r1, r6
24008c20:	4628      	mov	r0, r5
24008c22:	f7ff fdb1 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
24008c26:	2800      	cmp	r0, #0
24008c28:	d1ab      	bne.n	24008b82 <update_style_cache+0x1f6>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24008c2a:	2218      	movs	r2, #24
24008c2c:	4631      	mov	r1, r6
24008c2e:	4628      	mov	r0, r5
24008c30:	f7ff fdaa 	bl	24008788 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
24008c34:	2800      	cmp	r0, #0
24008c36:	d1a4      	bne.n	24008b82 <update_style_cache+0x1f6>
24008c38:	e7a7      	b.n	24008b8a <update_style_cache+0x1fe>
24008c3a:	bf00      	nop
24008c3c:	2401a5e8 	.word	0x2401a5e8
24008c40:	00040400 	.word	0x00040400

24008c44 <_lv_obj_get_style_opa>:
{
24008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24008c48:	4605      	mov	r5, r0
24008c4a:	b085      	sub	sp, #20
24008c4c:	460f      	mov	r7, r1
24008c4e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
24008c50:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
24008c54:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
24008c56:	f248 0a0c 	movw	sl, #32780	; 0x800c
24008c5a:	f248 0bad 	movw	fp, #32941	; 0x80ad
    while(parent) {
24008c5e:	b975      	cbnz	r5, 24008c7e <_lv_obj_get_style_opa+0x3a>
    prop = prop & (~LV_STYLE_STATE_MASK);
24008c60:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
24008c64:	2c6d      	cmp	r4, #109	; 0x6d
    prop = prop & (~LV_STYLE_STATE_MASK);
24008c66:	b2a0      	uxth	r0, r4
    switch(prop) {
24008c68:	d050      	beq.n	24008d0c <_lv_obj_get_style_opa+0xc8>
24008c6a:	f248 03ad 	movw	r3, #32941	; 0x80ad
24008c6e:	4298      	cmp	r0, r3
24008c70:	d04c      	beq.n	24008d0c <_lv_obj_get_style_opa+0xc8>
24008c72:	382c      	subs	r0, #44	; 0x2c
24008c74:	bf18      	it	ne
24008c76:	f04f 30ff 	movne.w	r0, #4294967295
24008c7a:	b2c0      	uxtb	r0, r0
24008c7c:	e036      	b.n	24008cec <_lv_obj_get_style_opa+0xa8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
24008c7e:	4639      	mov	r1, r7
24008c80:	4628      	mov	r0, r5
24008c82:	f7ff fcd2 	bl	2400862a <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
24008c86:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
24008c88:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
24008c8a:	0718      	lsls	r0, r3, #28
24008c8c:	d41d      	bmi.n	24008cca <_lv_obj_get_style_opa+0x86>
24008c8e:	7932      	ldrb	r2, [r6, #4]
24008c90:	0691      	lsls	r1, r2, #26
24008c92:	d01a      	beq.n	24008cca <_lv_obj_get_style_opa+0x86>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
24008c94:	f013 0f04 	tst.w	r3, #4
24008c98:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
24008c9c:	d105      	bne.n	24008caa <_lv_obj_get_style_opa+0x66>
24008c9e:	4639      	mov	r1, r7
24008ca0:	4628      	mov	r0, r5
24008ca2:	9201      	str	r2, [sp, #4]
24008ca4:	f7ff fe72 	bl	2400898c <update_style_cache>
24008ca8:	9a01      	ldr	r2, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
24008caa:	4552      	cmp	r2, sl
24008cac:	d009      	beq.n	24008cc2 <_lv_obj_get_style_opa+0x7e>
24008cae:	455a      	cmp	r2, fp
24008cb0:	d01f      	beq.n	24008cf2 <_lv_obj_get_style_opa+0xae>
24008cb2:	2a2c      	cmp	r2, #44	; 0x2c
24008cb4:	d109      	bne.n	24008cca <_lv_obj_get_style_opa+0x86>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
24008cb6:	79b3      	ldrb	r3, [r6, #6]
24008cb8:	06da      	lsls	r2, r3, #27
24008cba:	d425      	bmi.n	24008d08 <_lv_obj_get_style_opa+0xc4>
                    if(list->bg_opa_transp) def = true;
24008cbc:	f013 0f08 	tst.w	r3, #8
24008cc0:	e002      	b.n	24008cc8 <_lv_obj_get_style_opa+0x84>
                    if(list->opa_scale_cover) def = true;
24008cc2:	7973      	ldrb	r3, [r6, #5]
24008cc4:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
24008cc8:	d1ca      	bne.n	24008c60 <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
24008cca:	4639      	mov	r1, r7
24008ccc:	4628      	mov	r0, r5
24008cce:	f7ff fd13 	bl	240086f8 <lv_obj_get_state>
        res = _lv_style_list_get_opa(list, prop, &value_act);
24008cd2:	f10d 020f 	add.w	r2, sp, #15
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
24008cd6:	eb08 2000 	add.w	r0, r8, r0, lsl #8
24008cda:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(list, prop, &value_act);
24008cdc:	4630      	mov	r0, r6
24008cde:	4621      	mov	r1, r4
24008ce0:	f001 fff0 	bl	2400acc4 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
24008ce4:	2801      	cmp	r0, #1
24008ce6:	d108      	bne.n	24008cfa <_lv_obj_get_style_opa+0xb6>
24008ce8:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
24008cec:	b005      	add	sp, #20
24008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
24008cf2:	79f3      	ldrb	r3, [r6, #7]
24008cf4:	f013 0f10 	tst.w	r3, #16
24008cf8:	e7e6      	b.n	24008cc8 <_lv_obj_get_style_opa+0x84>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
24008cfa:	f019 0f80 	tst.w	r9, #128	; 0x80
24008cfe:	d0af      	beq.n	24008c60 <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
24008d00:	b907      	cbnz	r7, 24008d04 <_lv_obj_get_style_opa+0xc0>
    return obj->parent;
24008d02:	682d      	ldr	r5, [r5, #0]
{
24008d04:	2700      	movs	r7, #0
24008d06:	e7aa      	b.n	24008c5e <_lv_obj_get_style_opa+0x1a>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
24008d08:	20ff      	movs	r0, #255	; 0xff
24008d0a:	e7ef      	b.n	24008cec <_lv_obj_get_style_opa+0xa8>
            return LV_OPA_TRANSP;
24008d0c:	2000      	movs	r0, #0
24008d0e:	e7ed      	b.n	24008cec <_lv_obj_get_style_opa+0xa8>

24008d10 <_lv_obj_get_style_ptr>:
{
24008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24008d14:	4606      	mov	r6, r0
24008d16:	468b      	mov	fp, r1
24008d18:	4690      	mov	r8, r2
    while(parent) {
24008d1a:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
24008d1c:	f248 098e 	movw	r9, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
24008d20:	f342 2a07 	sbfx	sl, r2, #8, #8
    while(parent) {
24008d24:	b316      	cbz	r6, 24008d6c <_lv_obj_get_style_ptr+0x5c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
24008d26:	4659      	mov	r1, fp
24008d28:	4630      	mov	r0, r6
24008d2a:	f7ff fc7e 	bl	2400862a <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
24008d2e:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
24008d30:	4607      	mov	r7, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
24008d32:	0719      	lsls	r1, r3, #28
24008d34:	d42a      	bmi.n	24008d8c <_lv_obj_get_style_ptr+0x7c>
24008d36:	7902      	ldrb	r2, [r0, #4]
24008d38:	0692      	lsls	r2, r2, #26
24008d3a:	d027      	beq.n	24008d8c <_lv_obj_get_style_ptr+0x7c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
24008d3c:	f013 0f04 	tst.w	r3, #4
24008d40:	f424 45fe 	bic.w	r5, r4, #32512	; 0x7f00
24008d44:	d104      	bne.n	24008d50 <_lv_obj_get_style_ptr+0x40>
24008d46:	462a      	mov	r2, r5
24008d48:	4659      	mov	r1, fp
24008d4a:	4630      	mov	r0, r6
24008d4c:	f7ff fe1e 	bl	2400898c <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
24008d50:	2d7f      	cmp	r5, #127	; 0x7f
24008d52:	d007      	beq.n	24008d64 <_lv_obj_get_style_ptr+0x54>
24008d54:	454d      	cmp	r5, r9
24008d56:	d015      	beq.n	24008d84 <_lv_obj_get_style_ptr+0x74>
24008d58:	2d6e      	cmp	r5, #110	; 0x6e
24008d5a:	d117      	bne.n	24008d8c <_lv_obj_get_style_ptr+0x7c>
                    if(list->pattern_img_null) def = true;
24008d5c:	79fb      	ldrb	r3, [r7, #7]
24008d5e:	f013 0f02 	tst.w	r3, #2
24008d62:	e002      	b.n	24008d6a <_lv_obj_get_style_ptr+0x5a>
                    if(list->value_txt_str) def = true;
24008d64:	79fb      	ldrb	r3, [r7, #7]
24008d66:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
24008d6a:	d00f      	beq.n	24008d8c <_lv_obj_get_style_ptr+0x7c>
    prop = prop & (~LV_STYLE_STATE_MASK);
24008d6c:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
24008d70:	2c7e      	cmp	r4, #126	; 0x7e
    prop = prop & (~LV_STYLE_STATE_MASK);
24008d72:	b2a2      	uxth	r2, r4
    switch(prop) {
24008d74:	d003      	beq.n	24008d7e <_lv_obj_get_style_ptr+0x6e>
24008d76:	f248 038e 	movw	r3, #32910	; 0x808e
24008d7a:	429a      	cmp	r2, r3
24008d7c:	d122      	bne.n	24008dc4 <_lv_obj_get_style_ptr+0xb4>
            return lv_theme_get_font_normal();
24008d7e:	f008 f91f 	bl	24010fc0 <lv_theme_get_font_normal>
24008d82:	e012      	b.n	24008daa <_lv_obj_get_style_ptr+0x9a>
                    if(list->text_font_normal) def = true;
24008d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
24008d88:	2b00      	cmp	r3, #0
24008d8a:	dbef      	blt.n	24008d6c <_lv_obj_get_style_ptr+0x5c>
        lv_state_t state = lv_obj_get_state(parent, part);
24008d8c:	4659      	mov	r1, fp
24008d8e:	4630      	mov	r0, r6
24008d90:	f7ff fcb2 	bl	240086f8 <lv_obj_get_state>
        res = _lv_style_list_get_ptr(list, prop, &value_act);
24008d94:	aa01      	add	r2, sp, #4
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
24008d96:	eb08 2400 	add.w	r4, r8, r0, lsl #8
        res = _lv_style_list_get_ptr(list, prop, &value_act);
24008d9a:	4638      	mov	r0, r7
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
24008d9c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
24008d9e:	4621      	mov	r1, r4
24008da0:	f001 ffd3 	bl	2400ad4a <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
24008da4:	2801      	cmp	r0, #1
24008da6:	d103      	bne.n	24008db0 <_lv_obj_get_style_ptr+0xa0>
24008da8:	9801      	ldr	r0, [sp, #4]
}
24008daa:	b003      	add	sp, #12
24008dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
24008db0:	f1ba 0f00 	cmp.w	sl, #0
24008db4:	dada      	bge.n	24008d6c <_lv_obj_get_style_ptr+0x5c>
        if(part != LV_OBJ_PART_MAIN) {
24008db6:	f1bb 0f00 	cmp.w	fp, #0
24008dba:	d100      	bne.n	24008dbe <_lv_obj_get_style_ptr+0xae>
    return obj->parent;
24008dbc:	6836      	ldr	r6, [r6, #0]
{
24008dbe:	f04f 0b00 	mov.w	fp, #0
24008dc2:	e7af      	b.n	24008d24 <_lv_obj_get_style_ptr+0x14>
    switch(prop) {
24008dc4:	2000      	movs	r0, #0
24008dc6:	e7f0      	b.n	24008daa <_lv_obj_get_style_ptr+0x9a>

24008dc8 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
24008dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
24008dcc:	4605      	mov	r5, r0
24008dce:	2600      	movs	r6, #0
24008dd0:	b2f1      	uxtb	r1, r6
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24008dd2:	4628      	mov	r0, r5
24008dd4:	9101      	str	r1, [sp, #4]
24008dd6:	f7ff fc28 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
24008dda:	4604      	mov	r4, r0
24008ddc:	2800      	cmp	r0, #0
24008dde:	d056      	beq.n	24008e8e <update_style_cache_children+0xc6>

        bool ignore_cache_ori = list->ignore_cache;
24008de0:	7943      	ldrb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
24008de2:	f248 020c 	movw	r2, #32780	; 0x800c
24008de6:	f3c3 07c0 	ubfx	r7, r3, #3, #1
        list->ignore_cache = 1;
24008dea:	f043 0308 	orr.w	r3, r3, #8
24008dee:	7143      	strb	r3, [r0, #5]
24008df0:	4628      	mov	r0, r5
24008df2:	9901      	ldr	r1, [sp, #4]
24008df4:	f7ff ff26 	bl	24008c44 <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
24008df8:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
24008dfc:	f248 0282 	movw	r2, #32898	; 0x8082
24008e00:	4258      	negs	r0, r3
24008e02:	4158      	adcs	r0, r3
24008e04:	7963      	ldrb	r3, [r4, #5]
24008e06:	f360 1345 	bfi	r3, r0, #5, #1
24008e0a:	4628      	mov	r0, r5
24008e0c:	7163      	strb	r3, [r4, #5]
24008e0e:	9901      	ldr	r1, [sp, #4]
24008e10:	f7ff fcba 	bl	24008788 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
24008e14:	79e3      	ldrb	r3, [r4, #7]
24008e16:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24008e18:	f248 028e 	movw	r2, #32910	; 0x808e
24008e1c:	fab0 f080 	clz	r0, r0
24008e20:	0940      	lsrs	r0, r0, #5
24008e22:	f360 1386 	bfi	r3, r0, #6, #1
24008e26:	4628      	mov	r0, r5
24008e28:	71e3      	strb	r3, [r4, #7]
24008e2a:	9901      	ldr	r1, [sp, #4]
24008e2c:	f7ff ff70 	bl	24008d10 <_lv_obj_get_style_ptr>
24008e30:	4680      	mov	r8, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
24008e32:	f008 f8c5 	bl	24010fc0 <lv_theme_get_font_normal>
24008e36:	79e3      	ldrb	r3, [r4, #7]
24008e38:	eba8 0200 	sub.w	r2, r8, r0
24008e3c:	4250      	negs	r0, r2
24008e3e:	4150      	adcs	r0, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
24008e40:	f248 02ad 	movw	r2, #32941	; 0x80ad
24008e44:	f360 13c7 	bfi	r3, r0, #7, #1
24008e48:	4628      	mov	r0, r5
24008e4a:	71e3      	strb	r3, [r4, #7]
24008e4c:	9901      	ldr	r1, [sp, #4]
24008e4e:	f7ff fef9 	bl	24008c44 <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
24008e52:	fab0 f080 	clz	r0, r0
24008e56:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24008e58:	f248 0280 	movw	r2, #32896	; 0x8080
24008e5c:	0940      	lsrs	r0, r0, #5
24008e5e:	9901      	ldr	r1, [sp, #4]
24008e60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008e64:	0100      	lsls	r0, r0, #4
24008e66:	f040 0020 	orr.w	r0, r0, #32
24008e6a:	4318      	orrs	r0, r3
24008e6c:	71e0      	strb	r0, [r4, #7]
24008e6e:	4628      	mov	r0, r5
24008e70:	f7ff fc8a 	bl	24008788 <_lv_obj_get_style_int>

        list->text_space_zero = 1;
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
24008e74:	9901      	ldr	r1, [sp, #4]
24008e76:	b190      	cbz	r0, 24008e9e <update_style_cache_children+0xd6>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
24008e78:	79e3      	ldrb	r3, [r4, #7]
24008e7a:	f36f 1345 	bfc	r3, #5, #1
24008e7e:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
24008e80:	7963      	ldrb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
24008e82:	3601      	adds	r6, #1
        list->ignore_cache = ignore_cache_ori;
24008e84:	f367 03c3 	bfi	r3, r7, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
24008e88:	2e40      	cmp	r6, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
24008e8a:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
24008e8c:	d1a0      	bne.n	24008dd0 <update_style_cache_children+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
24008e8e:	1d28      	adds	r0, r5, #4
24008e90:	f006 fc32 	bl	2400f6f8 <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
24008e94:	4604      	mov	r4, r0
    while(child) {
24008e96:	b950      	cbnz	r0, 24008eae <update_style_cache_children+0xe6>
    }

}
24008e98:	b002      	add	sp, #8
24008e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24008e9e:	f248 0281 	movw	r2, #32897	; 0x8081
24008ea2:	4628      	mov	r0, r5
24008ea4:	f7ff fc70 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
24008ea8:	2800      	cmp	r0, #0
24008eaa:	d1e5      	bne.n	24008e78 <update_style_cache_children+0xb0>
24008eac:	e7e8      	b.n	24008e80 <update_style_cache_children+0xb8>
        update_style_cache_children(child);
24008eae:	4620      	mov	r0, r4
24008eb0:	f7ff ff8a 	bl	24008dc8 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
24008eb4:	4621      	mov	r1, r4
24008eb6:	4628      	mov	r0, r5
24008eb8:	f7ff f9da 	bl	24008270 <lv_obj_get_child>
24008ebc:	e7ea      	b.n	24008e94 <update_style_cache_children+0xcc>
	...

24008ec0 <lv_obj_refresh_style>:
{
24008ec0:	b570      	push	{r4, r5, r6, lr}
24008ec2:	4605      	mov	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
24008ec4:	4610      	mov	r0, r2
{
24008ec6:	4614      	mov	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
24008ec8:	f7fe fe28 	bl	24007b1c <style_prop_is_cacheble>
24008ecc:	2800      	cmp	r0, #0
24008ece:	d14a      	bne.n	24008f66 <lv_obj_refresh_style+0xa6>
    switch(prop) {
24008ed0:	2c90      	cmp	r4, #144	; 0x90
24008ed2:	d839      	bhi.n	24008f48 <lv_obj_refresh_style+0x88>
24008ed4:	2c72      	cmp	r4, #114	; 0x72
24008ed6:	d81b      	bhi.n	24008f10 <lv_obj_refresh_style+0x50>
24008ed8:	2c53      	cmp	r4, #83	; 0x53
24008eda:	d82f      	bhi.n	24008f3c <lv_obj_refresh_style+0x7c>
24008edc:	2c3f      	cmp	r4, #63	; 0x3f
24008ede:	d823      	bhi.n	24008f28 <lv_obj_refresh_style+0x68>
24008ee0:	2c07      	cmp	r4, #7
24008ee2:	d826      	bhi.n	24008f32 <lv_obj_refresh_style+0x72>
24008ee4:	2c01      	cmp	r4, #1
24008ee6:	d91a      	bls.n	24008f1e <lv_obj_refresh_style+0x5e>
        lv_obj_invalidate(obj);
24008ee8:	4628      	mov	r0, r5
24008eea:	f7ff f87b 	bl	24007fe4 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
24008eee:	69eb      	ldr	r3, [r5, #28]
24008ef0:	2200      	movs	r2, #0
24008ef2:	2104      	movs	r1, #4
24008ef4:	4628      	mov	r0, r5
24008ef6:	4798      	blx	r3
        switch(prop) {
24008ef8:	2c18      	cmp	r4, #24
24008efa:	d85d      	bhi.n	24008fb8 <lv_obj_refresh_style+0xf8>
24008efc:	2c14      	cmp	r4, #20
24008efe:	d95d      	bls.n	24008fbc <lv_obj_refresh_style+0xfc>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
24008f00:	6828      	ldr	r0, [r5, #0]
24008f02:	2800      	cmp	r0, #0
24008f04:	d05a      	beq.n	24008fbc <lv_obj_refresh_style+0xfc>
24008f06:	69c3      	ldr	r3, [r0, #28]
24008f08:	2200      	movs	r2, #0
24008f0a:	2101      	movs	r1, #1
24008f0c:	4798      	blx	r3
24008f0e:	e055      	b.n	24008fbc <lv_obj_refresh_style+0xfc>
    switch(prop) {
24008f10:	f1a4 0273 	sub.w	r2, r4, #115	; 0x73
24008f14:	4b30      	ldr	r3, [pc, #192]	; (24008fd8 <lv_obj_refresh_style+0x118>)
24008f16:	b292      	uxth	r2, r2
24008f18:	40d3      	lsrs	r3, r2
24008f1a:	07da      	lsls	r2, r3, #31
24008f1c:	d4e4      	bmi.n	24008ee8 <lv_obj_refresh_style+0x28>
        lv_obj_invalidate(obj);
24008f1e:	4628      	mov	r0, r5
}
24008f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_invalidate(obj);
24008f24:	f7ff b85e 	b.w	24007fe4 <lv_obj_invalidate>
    switch(prop) {
24008f28:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
24008f2c:	4b2b      	ldr	r3, [pc, #172]	; (24008fdc <lv_obj_refresh_style+0x11c>)
24008f2e:	b292      	uxth	r2, r2
24008f30:	e7f2      	b.n	24008f18 <lv_obj_refresh_style+0x58>
24008f32:	f1a4 0310 	sub.w	r3, r4, #16
24008f36:	2b08      	cmp	r3, #8
24008f38:	d8f1      	bhi.n	24008f1e <lv_obj_refresh_style+0x5e>
24008f3a:	e7d5      	b.n	24008ee8 <lv_obj_refresh_style+0x28>
24008f3c:	2c5c      	cmp	r4, #92	; 0x5c
24008f3e:	d0d3      	beq.n	24008ee8 <lv_obj_refresh_style+0x28>
24008f40:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
24008f44:	2b01      	cmp	r3, #1
24008f46:	e7f7      	b.n	24008f38 <lv_obj_refresh_style+0x78>
24008f48:	f248 0381 	movw	r3, #32897	; 0x8081
24008f4c:	429c      	cmp	r4, r3
24008f4e:	d806      	bhi.n	24008f5e <lv_obj_refresh_style+0x9e>
24008f50:	f248 037f 	movw	r3, #32895	; 0x807f
24008f54:	429c      	cmp	r4, r3
24008f56:	d8c7      	bhi.n	24008ee8 <lv_obj_refresh_style+0x28>
24008f58:	2cff      	cmp	r4, #255	; 0xff
24008f5a:	d1e0      	bne.n	24008f1e <lv_obj_refresh_style+0x5e>
24008f5c:	e7c4      	b.n	24008ee8 <lv_obj_refresh_style+0x28>
24008f5e:	f248 038e 	movw	r3, #32910	; 0x808e
24008f62:	429c      	cmp	r4, r3
24008f64:	e7f9      	b.n	24008f5a <lv_obj_refresh_style+0x9a>
24008f66:	2600      	movs	r6, #0

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24008f68:	b2f1      	uxtb	r1, r6
24008f6a:	4628      	mov	r0, r5
24008f6c:	f7ff fb5d 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
24008f70:	b130      	cbz	r0, 24008f80 <lv_obj_refresh_style+0xc0>
        list->valid_cache = 0;
24008f72:	7943      	ldrb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
24008f74:	3601      	adds	r6, #1
        list->valid_cache = 0;
24008f76:	f36f 0382 	bfc	r3, #2, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
24008f7a:	2e40      	cmp	r6, #64	; 0x40
        list->valid_cache = 0;
24008f7c:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
24008f7e:	d1f3      	bne.n	24008f68 <lv_obj_refresh_style+0xa8>
24008f80:	2640      	movs	r6, #64	; 0x40
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24008f82:	4631      	mov	r1, r6
24008f84:	4628      	mov	r0, r5
24008f86:	f7ff fb50 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
24008f8a:	b138      	cbz	r0, 24008f9c <lv_obj_refresh_style+0xdc>
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008f8c:	3601      	adds	r6, #1
        list->valid_cache = 0;
24008f8e:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008f90:	b2f6      	uxtb	r6, r6
        list->valid_cache = 0;
24008f92:	f36f 0382 	bfc	r3, #2, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008f96:	2eff      	cmp	r6, #255	; 0xff
        list->valid_cache = 0;
24008f98:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
24008f9a:	d1f2      	bne.n	24008f82 <lv_obj_refresh_style+0xc2>
        result = _lv_ll_get_head(&obj->child_ll);
24008f9c:	1d28      	adds	r0, r5, #4
24008f9e:	f006 fbab 	bl	2400f6f8 <_lv_ll_get_head>


    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
24008fa2:	4606      	mov	r6, r0
    while(child) {
24008fa4:	2800      	cmp	r0, #0
24008fa6:	d093      	beq.n	24008ed0 <lv_obj_refresh_style+0x10>
        update_style_cache_children(child);
24008fa8:	4630      	mov	r0, r6
24008faa:	f7ff ff0d 	bl	24008dc8 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
24008fae:	4631      	mov	r1, r6
24008fb0:	4628      	mov	r0, r5
24008fb2:	f7ff f95d 	bl	24008270 <lv_obj_get_child>
24008fb6:	e7f4      	b.n	24008fa2 <lv_obj_refresh_style+0xe2>
        switch(prop) {
24008fb8:	2cff      	cmp	r4, #255	; 0xff
24008fba:	d0a1      	beq.n	24008f00 <lv_obj_refresh_style+0x40>
        lv_obj_invalidate(obj);
24008fbc:	4628      	mov	r0, r5
24008fbe:	f7ff f811 	bl	24007fe4 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
24008fc2:	2cff      	cmp	r4, #255	; 0xff
24008fc4:	d001      	beq.n	24008fca <lv_obj_refresh_style+0x10a>
24008fc6:	0423      	lsls	r3, r4, #16
24008fc8:	d504      	bpl.n	24008fd4 <lv_obj_refresh_style+0x114>
24008fca:	4628      	mov	r0, r5
}
24008fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
24008fd0:	f7ff b954 	b.w	2400827c <refresh_children_style>
}
24008fd4:	bd70      	pop	{r4, r5, r6, pc}
24008fd6:	bf00      	nop
24008fd8:	20001a07 	.word	0x20001a07
24008fdc:	000f1003 	.word	0x000f1003

24008fe0 <lv_obj_add_style>:
{
24008fe0:	b570      	push	{r4, r5, r6, lr}
24008fe2:	4605      	mov	r5, r0
24008fe4:	460e      	mov	r6, r1
    if(style == NULL) return;
24008fe6:	4614      	mov	r4, r2
24008fe8:	b162      	cbz	r2, 24009004 <lv_obj_add_style+0x24>
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
24008fea:	f7ff fb1e 	bl	2400862a <lv_obj_get_style_list>
    if(style_dsc == NULL) {
24008fee:	b148      	cbz	r0, 24009004 <lv_obj_add_style+0x24>
    _lv_style_list_add_style(style_dsc, style);
24008ff0:	4621      	mov	r1, r4
24008ff2:	f001 fb2c 	bl	2400a64e <_lv_style_list_add_style>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
24008ff6:	4631      	mov	r1, r6
24008ff8:	4628      	mov	r0, r5
24008ffa:	22ff      	movs	r2, #255	; 0xff
}
24008ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
24009000:	f7ff bf5e 	b.w	24008ec0 <lv_obj_refresh_style>
}
24009004:	bd70      	pop	{r4, r5, r6, pc}

24009006 <lv_obj_reset_style_list>:
{
24009006:	b538      	push	{r3, r4, r5, lr}
24009008:	4604      	mov	r4, r0
2400900a:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
2400900c:	f7ff fb1f 	bl	2400864e <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
24009010:	22ff      	movs	r2, #255	; 0xff
24009012:	4629      	mov	r1, r5
24009014:	4620      	mov	r0, r4
}
24009016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
2400901a:	f7ff bf51 	b.w	24008ec0 <lv_obj_refresh_style>

2400901e <_lv_obj_set_style_local_color>:
{
2400901e:	b573      	push	{r0, r1, r4, r5, r6, lr}
24009020:	4614      	mov	r4, r2
24009022:	461a      	mov	r2, r3
24009024:	460e      	mov	r6, r1
24009026:	4605      	mov	r5, r0
24009028:	9201      	str	r2, [sp, #4]
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
2400902a:	f7ff fafe 	bl	2400862a <lv_obj_get_style_list>
    _lv_style_list_set_local_color(style_dsc, prop, color);
2400902e:	9a01      	ldr	r2, [sp, #4]
24009030:	4621      	mov	r1, r4
24009032:	f001 fdb6 	bl	2400aba2 <_lv_style_list_set_local_color>
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
24009036:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
2400903a:	4631      	mov	r1, r6
2400903c:	4628      	mov	r0, r5
}
2400903e:	b002      	add	sp, #8
24009040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
24009044:	f7ff bf3c 	b.w	24008ec0 <lv_obj_refresh_style>

24009048 <report_style_mod_core>:
{
24009048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
2400904a:	4606      	mov	r6, r0
2400904c:	460d      	mov	r5, r1
2400904e:	2400      	movs	r4, #0
24009050:	b2e1      	uxtb	r1, r4
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24009052:	4628      	mov	r0, r5
24009054:	9101      	str	r1, [sp, #4]
24009056:	f7ff fae8 	bl	2400862a <lv_obj_get_style_list>
        if(list == NULL) break;
2400905a:	4602      	mov	r2, r0
2400905c:	b328      	cbz	r0, 240090aa <report_style_mod_core+0x62>
        for(ci = 0; ci < list->style_cnt; ci++) {
2400905e:	7900      	ldrb	r0, [r0, #4]
24009060:	f04f 0c00 	mov.w	ip, #0
24009064:	9901      	ldr	r1, [sp, #4]
24009066:	f000 0e3f 	and.w	lr, r0, #63	; 0x3f
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
2400906a:	4670      	mov	r0, lr
2400906c:	fa5f f38c 	uxtb.w	r3, ip
24009070:	459e      	cmp	lr, r3
24009072:	d917      	bls.n	240090a4 <report_style_mod_core+0x5c>
    if(list->has_trans && list->skip_trans) id++;
24009074:	8897      	ldrh	r7, [r2, #4]
24009076:	f407 77c0 	and.w	r7, r7, #384	; 0x180
2400907a:	f5b7 7fc0 	cmp.w	r7, #384	; 0x180
2400907e:	bf04      	itt	eq
24009080:	3301      	addeq	r3, #1
24009082:	b2db      	uxtbeq	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
24009084:	b1c0      	cbz	r0, 240090b8 <report_style_mod_core+0x70>
24009086:	459e      	cmp	lr, r3
24009088:	d916      	bls.n	240090b8 <report_style_mod_core+0x70>
    return list->style_list[id];
2400908a:	6817      	ldr	r7, [r2, #0]
2400908c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
            if(_class == style || style == NULL) {
24009090:	429e      	cmp	r6, r3
24009092:	d003      	beq.n	2400909c <report_style_mod_core+0x54>
24009094:	f10c 0c01 	add.w	ip, ip, #1
24009098:	2e00      	cmp	r6, #0
2400909a:	d1e7      	bne.n	2400906c <report_style_mod_core+0x24>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
2400909c:	22ff      	movs	r2, #255	; 0xff
2400909e:	4628      	mov	r0, r5
240090a0:	f7ff ff0e 	bl	24008ec0 <lv_obj_refresh_style>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
240090a4:	3401      	adds	r4, #1
240090a6:	2c40      	cmp	r4, #64	; 0x40
240090a8:	d1d2      	bne.n	24009050 <report_style_mod_core+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
240090aa:	1d28      	adds	r0, r5, #4
240090ac:	f006 fb24 	bl	2400f6f8 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
240090b0:	4604      	mov	r4, r0
    while(child) {
240090b2:	b918      	cbnz	r0, 240090bc <report_style_mod_core+0x74>
}
240090b4:	b003      	add	sp, #12
240090b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
240090b8:	2300      	movs	r3, #0
240090ba:	e7e9      	b.n	24009090 <report_style_mod_core+0x48>
        report_style_mod_core(style, child);
240090bc:	4621      	mov	r1, r4
240090be:	4630      	mov	r0, r6
240090c0:	f7ff ffc2 	bl	24009048 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
240090c4:	4621      	mov	r1, r4
240090c6:	4628      	mov	r0, r5
240090c8:	f7ff f8d2 	bl	24008270 <lv_obj_get_child>
240090cc:	e7f0      	b.n	240090b0 <report_style_mod_core+0x68>

240090ce <lv_obj_report_style_mod>:
{
240090ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240090d0:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
240090d2:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
240090d4:	f005 fec4 	bl	2400ee60 <lv_disp_get_next>
240090d8:	4604      	mov	r4, r0
    while(d) {
240090da:	b900      	cbnz	r0, 240090de <lv_obj_report_style_mod+0x10>
}
240090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, i) {
240090de:	f104 0730 	add.w	r7, r4, #48	; 0x30
240090e2:	4638      	mov	r0, r7
240090e4:	f006 fb08 	bl	2400f6f8 <_lv_ll_get_head>
240090e8:	4605      	mov	r5, r0
240090ea:	b908      	cbnz	r0, 240090f0 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
240090ec:	4620      	mov	r0, r4
240090ee:	e7f1      	b.n	240090d4 <lv_obj_report_style_mod+0x6>
            report_style_mod_core(style, i);
240090f0:	4629      	mov	r1, r5
240090f2:	4630      	mov	r0, r6
240090f4:	f7ff ffa8 	bl	24009048 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
240090f8:	4629      	mov	r1, r5
240090fa:	4638      	mov	r0, r7
240090fc:	f006 fb02 	bl	2400f704 <_lv_ll_get_next>
24009100:	e7f2      	b.n	240090e8 <lv_obj_report_style_mod+0x1a>

24009102 <lv_obj_get_width_fit>:
{
24009102:	b538      	push	{r3, r4, r5, lr}
24009104:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24009106:	2212      	movs	r2, #18
24009108:	2100      	movs	r1, #0
2400910a:	f7ff fb3d 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2400910e:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24009110:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24009112:	2100      	movs	r1, #0
24009114:	4620      	mov	r0, r4
24009116:	f7ff fb37 	bl	24008788 <_lv_obj_get_style_int>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400911a:	8aa3      	ldrh	r3, [r4, #20]
2400911c:	8a22      	ldrh	r2, [r4, #16]
2400911e:	3301      	adds	r3, #1
24009120:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - left - right;
24009122:	1b5b      	subs	r3, r3, r5
24009124:	1a18      	subs	r0, r3, r0
}
24009126:	b200      	sxth	r0, r0
24009128:	bd38      	pop	{r3, r4, r5, pc}

2400912a <lv_obj_get_height_fit>:
{
2400912a:	b538      	push	{r3, r4, r5, lr}
2400912c:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2400912e:	2210      	movs	r2, #16
24009130:	2100      	movs	r1, #0
24009132:	f7ff fb29 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24009136:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24009138:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2400913a:	2100      	movs	r1, #0
2400913c:	4620      	mov	r0, r4
2400913e:	f7ff fb23 	bl	24008788 <_lv_obj_get_style_int>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24009142:	8ae3      	ldrh	r3, [r4, #22]
24009144:	8a62      	ldrh	r2, [r4, #18]
24009146:	3301      	adds	r3, #1
24009148:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_height(obj) - top - bottom;
2400914a:	1b5b      	subs	r3, r3, r5
2400914c:	1a18      	subs	r0, r3, r0
}
2400914e:	b200      	sxth	r0, r0
24009150:	bd38      	pop	{r3, r4, r5, pc}

24009152 <lv_obj_get_signal_cb>:
}
24009152:	69c0      	ldr	r0, [r0, #28]
24009154:	4770      	bx	lr

24009156 <lv_obj_get_design_cb>:
}
24009156:	6a00      	ldr	r0, [r0, #32]
24009158:	4770      	bx	lr

2400915a <lv_obj_get_ext_attr>:
}
2400915a:	6a40      	ldr	r0, [r0, #36]	; 0x24
2400915c:	4770      	bx	lr

2400915e <lv_obj_is_point_on_coords>:
{
2400915e:	b507      	push	{r0, r1, r2, lr}
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
24009160:	8a02      	ldrh	r2, [r0, #16]
24009162:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
24009166:	1ad2      	subs	r2, r2, r3
24009168:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
2400916c:	8a82      	ldrh	r2, [r0, #20]
2400916e:	4413      	add	r3, r2
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
24009170:	8a42      	ldrh	r2, [r0, #18]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
24009172:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
24009176:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
2400917a:	1ad2      	subs	r2, r2, r3
2400917c:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
24009180:	8ac2      	ldrh	r2, [r0, #22]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
24009182:	4668      	mov	r0, sp
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
24009184:	4413      	add	r3, r2
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
24009186:	2200      	movs	r2, #0
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
24009188:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
2400918c:	f006 f82d 	bl	2400f1ea <_lv_area_is_point_on>
}
24009190:	b003      	add	sp, #12
24009192:	f85d fb04 	ldr.w	pc, [sp], #4

24009196 <lv_obj_hittest>:
{
24009196:	b513      	push	{r0, r1, r4, lr}
    if(obj->adv_hittest) {
24009198:	f990 4034 	ldrsb.w	r4, [r0, #52]	; 0x34
2400919c:	2c00      	cmp	r4, #0
2400919e:	db04      	blt.n	240091aa <lv_obj_hittest+0x14>
}
240091a0:	b002      	add	sp, #8
240091a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return lv_obj_is_point_on_coords(obj, point);
240091a6:	f7ff bfda 	b.w	2400915e <lv_obj_is_point_on_coords>
        hit_info.result = true;
240091aa:	2201      	movs	r2, #1
        hit_info.point = point;
240091ac:	9100      	str	r1, [sp, #0]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
240091ae:	69c3      	ldr	r3, [r0, #28]
240091b0:	210a      	movs	r1, #10
        hit_info.result = true;
240091b2:	f88d 2004 	strb.w	r2, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
240091b6:	466a      	mov	r2, sp
240091b8:	4798      	blx	r3
        return hit_info.result;
240091ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
240091be:	b002      	add	sp, #8
240091c0:	bd10      	pop	{r4, pc}

240091c2 <lv_obj_handle_get_type_signal>:
{
240091c2:	2300      	movs	r3, #0
240091c4:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
240091c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
240091ca:	b2da      	uxtb	r2, r3
240091cc:	b11c      	cbz	r4, 240091d6 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
240091ce:	3301      	adds	r3, #1
240091d0:	2b07      	cmp	r3, #7
240091d2:	d1f8      	bne.n	240091c6 <lv_obj_handle_get_type_signal+0x4>
240091d4:	461a      	mov	r2, r3
    buf->type[i] = name;
240091d6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
240091da:	2001      	movs	r0, #1
240091dc:	bd10      	pop	{r4, pc}

240091de <lv_obj_init_draw_rect_dsc>:
{
240091de:	b570      	push	{r4, r5, r6, lr}
240091e0:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240091e2:	2201      	movs	r2, #1
240091e4:	4605      	mov	r5, r0
240091e6:	460e      	mov	r6, r1
240091e8:	f7ff face 	bl	24008788 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
240091ec:	7b23      	ldrb	r3, [r4, #12]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
240091ee:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
240091f0:	b33b      	cbz	r3, 24009242 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
240091f2:	222c      	movs	r2, #44	; 0x2c
240091f4:	4631      	mov	r1, r6
240091f6:	4628      	mov	r0, r5
240091f8:	f7ff fd24 	bl	24008c44 <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
240091fc:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
240091fe:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
24009200:	d91f      	bls.n	24009242 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24009202:	2229      	movs	r2, #41	; 0x29
24009204:	4631      	mov	r1, r6
24009206:	4628      	mov	r0, r5
24009208:	f7ff fa8a 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
2400920c:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
2400920e:	8060      	strh	r0, [r4, #2]
24009210:	4631      	mov	r1, r6
24009212:	4628      	mov	r0, r5
24009214:	f7ff fab8 	bl	24008788 <_lv_obj_get_style_int>
24009218:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
2400921a:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
2400921c:	b188      	cbz	r0, 24009242 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
2400921e:	222a      	movs	r2, #42	; 0x2a
24009220:	4631      	mov	r1, r6
24009222:	4628      	mov	r0, r5
24009224:	f7ff fa7c 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
24009228:	2221      	movs	r2, #33	; 0x21
2400922a:	4631      	mov	r1, r6
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
2400922c:	80a0      	strh	r0, [r4, #4]
2400922e:	4628      	mov	r0, r5
24009230:	f7ff faaa 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
24009234:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
24009236:	8120      	strh	r0, [r4, #8]
24009238:	4631      	mov	r1, r6
2400923a:	4628      	mov	r0, r5
2400923c:	f7ff faa4 	bl	24008788 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
24009240:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24009242:	2230      	movs	r2, #48	; 0x30
24009244:	4631      	mov	r1, r6
24009246:	4628      	mov	r0, r5
24009248:	f7ff fa9e 	bl	24008788 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
2400924c:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
2400924e:	b1b0      	cbz	r0, 2400927e <lv_obj_init_draw_rect_dsc+0xa0>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
24009250:	7d23      	ldrb	r3, [r4, #20]
24009252:	b1a3      	cbz	r3, 2400927e <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
24009254:	223c      	movs	r2, #60	; 0x3c
24009256:	4631      	mov	r1, r6
24009258:	4628      	mov	r0, r5
2400925a:	f7ff fcf3 	bl	24008c44 <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
2400925e:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
24009260:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
24009262:	d90c      	bls.n	2400927e <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
24009264:	2231      	movs	r2, #49	; 0x31
24009266:	4631      	mov	r1, r6
24009268:	4628      	mov	r0, r5
2400926a:	f7ff fa8d 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2400926e:	2239      	movs	r2, #57	; 0x39
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
24009270:	b2c0      	uxtb	r0, r0
24009272:	4631      	mov	r1, r6
24009274:	8260      	strh	r0, [r4, #18]
24009276:	4628      	mov	r0, r5
24009278:	f7ff fa52 	bl	24008720 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
2400927c:	81e0      	strh	r0, [r4, #14]
}
2400927e:	bd70      	pop	{r4, r5, r6, pc}

24009280 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
24009280:	2a02      	cmp	r2, #2
{
24009282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24009286:	4604      	mov	r4, r0
24009288:	b09a      	sub	sp, #104	; 0x68
2400928a:	460f      	mov	r7, r1
2400928c:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
2400928e:	d15d      	bne.n	2400934c <lv_obj_design+0xcc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
24009290:	2100      	movs	r1, #0
24009292:	f7ff fb73 	bl	2400897c <lv_obj_get_style_clip_corner>
24009296:	4680      	mov	r8, r0
24009298:	2800      	cmp	r0, #0
2400929a:	d155      	bne.n	24009348 <lv_obj_design+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
2400929c:	4601      	mov	r1, r0
2400929e:	2201      	movs	r2, #1
240092a0:	4620      	mov	r0, r4
240092a2:	f7ff fa71 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
240092a6:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240092a8:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
240092aa:	4641      	mov	r1, r8
240092ac:	4620      	mov	r0, r4
240092ae:	f7ff fa6b 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
240092b2:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
240092b4:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
240092b6:	4641      	mov	r1, r8
240092b8:	4620      	mov	r0, r4
240092ba:	f7ff fa65 	bl	24008788 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
240092be:	f104 0110 	add.w	r1, r4, #16
240092c2:	4682      	mov	sl, r0
240092c4:	a805      	add	r0, sp, #20
240092c6:	f7fe fc9e 	bl	24007c06 <lv_area_copy>
        coords.x1 -= w;
240092ca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
240092ce:	b2b3      	uxth	r3, r6
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
240092d0:	a905      	add	r1, sp, #20
        coords.y1 -= h;
240092d2:	fa1f f08a 	uxth.w	r0, sl
        coords.x1 -= w;
240092d6:	1ad2      	subs	r2, r2, r3
240092d8:	f8ad 2014 	strh.w	r2, [sp, #20]
        coords.x2 += w;
240092dc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
240092e0:	4413      	add	r3, r2
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
240092e2:	464a      	mov	r2, r9
        coords.x2 += w;
240092e4:	f8ad 3018 	strh.w	r3, [sp, #24]
        coords.y1 -= h;
240092e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
240092ec:	1a1b      	subs	r3, r3, r0
240092ee:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
240092f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
240092f6:	4418      	add	r0, r3
240092f8:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
240092fc:	4638      	mov	r0, r7
240092fe:	f006 f826 	bl	2400f34e <_lv_area_is_in>
24009302:	b1e8      	cbz	r0, 24009340 <lv_obj_design+0xc0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24009304:	222c      	movs	r2, #44	; 0x2c
24009306:	4641      	mov	r1, r8
24009308:	4620      	mov	r0, r4
2400930a:	f7ff fc9b 	bl	24008c44 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
2400930e:	28fc      	cmp	r0, #252	; 0xfc
24009310:	d916      	bls.n	24009340 <lv_obj_design+0xc0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
24009312:	4641      	mov	r1, r8
24009314:	2220      	movs	r2, #32
24009316:	4620      	mov	r0, r4
24009318:	f7ff fa36 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
2400931c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
24009320:	d10e      	bne.n	24009340 <lv_obj_design+0xc0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
24009322:	2232      	movs	r2, #50	; 0x32
24009324:	4620      	mov	r0, r4
24009326:	f7ff fa2f 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
2400932a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
2400932e:	d107      	bne.n	24009340 <lv_obj_design+0xc0>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
24009330:	f248 020c 	movw	r2, #32780	; 0x800c
24009334:	4620      	mov	r0, r4
24009336:	f7ff fc85 	bl	24008c44 <_lv_obj_get_style_opa>
        return  LV_DESIGN_RES_COVER;
2400933a:	28fc      	cmp	r0, #252	; 0xfc
2400933c:	bf88      	it	hi
2400933e:	2501      	movhi	r5, #1
}
24009340:	4628      	mov	r0, r5
24009342:	b01a      	add	sp, #104	; 0x68
24009344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
24009348:	2503      	movs	r5, #3
2400934a:	e7f9      	b.n	24009340 <lv_obj_design+0xc0>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
2400934c:	2a00      	cmp	r2, #0
2400934e:	d17b      	bne.n	24009448 <lv_obj_design+0x1c8>
        lv_draw_rect_dsc_init(&draw_dsc);
24009350:	a805      	add	r0, sp, #20
24009352:	f004 fb87 	bl	2400da64 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
24009356:	2233      	movs	r2, #51	; 0x33
24009358:	4629      	mov	r1, r5
2400935a:	4620      	mov	r0, r4
2400935c:	f7ff fa14 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
24009360:	b128      	cbz	r0, 2400936e <lv_obj_design+0xee>
            draw_dsc.border_post = 1;
24009362:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
24009366:	f043 0301 	orr.w	r3, r3, #1
2400936a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
2400936e:	aa05      	add	r2, sp, #20
24009370:	2100      	movs	r1, #0
24009372:	4620      	mov	r0, r4
        lv_area_copy(&coords, &obj->coords);
24009374:	f104 0810 	add.w	r8, r4, #16
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
24009378:	f7ff ff31 	bl	240091de <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
2400937c:	2204      	movs	r2, #4
2400937e:	2100      	movs	r1, #0
24009380:	4620      	mov	r0, r4
24009382:	f7ff fa01 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
24009386:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
24009388:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
2400938a:	2100      	movs	r1, #0
2400938c:	4620      	mov	r0, r4
2400938e:	f7ff f9fb 	bl	24008788 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
24009392:	4641      	mov	r1, r8
24009394:	4681      	mov	r9, r0
24009396:	a801      	add	r0, sp, #4
24009398:	f7fe fc35 	bl	24007c06 <lv_area_copy>
        coords.x1 -= w;
2400939c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
240093a0:	b2b3      	uxth	r3, r6
        lv_draw_rect(&coords, clip_area, &draw_dsc);
240093a2:	4639      	mov	r1, r7
        coords.y1 -= h;
240093a4:	fa1f f089 	uxth.w	r0, r9
        coords.x1 -= w;
240093a8:	1ad2      	subs	r2, r2, r3
240093aa:	f8ad 2004 	strh.w	r2, [sp, #4]
        coords.x2 += w;
240093ae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
240093b2:	4413      	add	r3, r2
        lv_draw_rect(&coords, clip_area, &draw_dsc);
240093b4:	aa05      	add	r2, sp, #20
        coords.x2 += w;
240093b6:	f8ad 3008 	strh.w	r3, [sp, #8]
        coords.y1 -= h;
240093ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240093be:	1a1b      	subs	r3, r3, r0
240093c0:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
240093c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
240093c8:	4418      	add	r0, r3
240093ca:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
240093ce:	a801      	add	r0, sp, #4
240093d0:	f004 fb6c 	bl	2400daac <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
240093d4:	2100      	movs	r1, #0
240093d6:	4620      	mov	r0, r4
240093d8:	f7ff fad0 	bl	2400897c <lv_obj_get_style_clip_corner>
240093dc:	2800      	cmp	r0, #0
240093de:	d0af      	beq.n	24009340 <lv_obj_design+0xc0>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
240093e0:	201c      	movs	r0, #28
240093e2:	f006 fc7f 	bl	2400fce4 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240093e6:	2201      	movs	r2, #1
240093e8:	4606      	mov	r6, r0
240093ea:	2100      	movs	r1, #0
240093ec:	4620      	mov	r0, r4
240093ee:	f7ff f9cb 	bl	24008788 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
240093f2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
240093f6:	4602      	mov	r2, r0
240093f8:	07db      	lsls	r3, r3, #31
240093fa:	d522      	bpl.n	24009442 <lv_obj_design+0x1c2>
240093fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
24009400:	2b01      	cmp	r3, #1
24009402:	d91e      	bls.n	24009442 <lv_obj_design+0x1c2>
24009404:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
24009408:	2b00      	cmp	r3, #0
2400940a:	dd1a      	ble.n	24009442 <lv_obj_design+0x1c2>
                cc_area.x1 = obj->coords.x1 + 1;
2400940c:	8a23      	ldrh	r3, [r4, #16]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
2400940e:	a903      	add	r1, sp, #12
                cc_area.x1 = obj->coords.x1 + 1;
24009410:	3301      	adds	r3, #1
24009412:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
24009416:	8a63      	ldrh	r3, [r4, #18]
24009418:	3301      	adds	r3, #1
2400941a:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
2400941e:	8aa3      	ldrh	r3, [r4, #20]
24009420:	3b01      	subs	r3, #1
24009422:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
24009426:	8ae3      	ldrh	r3, [r4, #22]
24009428:	3b01      	subs	r3, #1
2400942a:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
2400942e:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
24009430:	4630      	mov	r0, r6
24009432:	f004 fa9f 	bl	2400d974 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
24009436:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
2400943a:	4630      	mov	r0, r6
2400943c:	f004 f9ac 	bl	2400d798 <lv_draw_mask_add>
24009440:	e77e      	b.n	24009340 <lv_obj_design+0xc0>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
24009442:	2300      	movs	r3, #0
24009444:	4641      	mov	r1, r8
24009446:	e7f3      	b.n	24009430 <lv_obj_design+0x1b0>
    else if(mode == LV_DESIGN_DRAW_POST) {
24009448:	2a01      	cmp	r2, #1
2400944a:	d001      	beq.n	24009450 <lv_obj_design+0x1d0>
    return LV_DESIGN_RES_OK;
2400944c:	2500      	movs	r5, #0
2400944e:	e777      	b.n	24009340 <lv_obj_design+0xc0>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
24009450:	2100      	movs	r1, #0
24009452:	f7ff fa93 	bl	2400897c <lv_obj_get_style_clip_corner>
24009456:	b128      	cbz	r0, 24009464 <lv_obj_design+0x1e4>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
24009458:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
2400945c:	f004 f9e6 	bl	2400d82c <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
24009460:	f006 fad8 	bl	2400fa14 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
24009464:	2233      	movs	r2, #51	; 0x33
24009466:	2100      	movs	r1, #0
24009468:	4620      	mov	r0, r4
2400946a:	f7ff f98d 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
2400946e:	2800      	cmp	r0, #0
24009470:	d0ec      	beq.n	2400944c <lv_obj_design+0x1cc>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
24009472:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
24009474:	a805      	add	r0, sp, #20
24009476:	f004 faf5 	bl	2400da64 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
2400947a:	aa05      	add	r2, sp, #20
2400947c:	4629      	mov	r1, r5
2400947e:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
24009480:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
24009484:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
24009488:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
2400948c:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
24009490:	f7ff fea5 	bl	240091de <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
24009494:	4629      	mov	r1, r5
24009496:	2204      	movs	r2, #4
24009498:	4620      	mov	r0, r4
2400949a:	f7ff f975 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
2400949e:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
240094a0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
240094a2:	4629      	mov	r1, r5
240094a4:	4620      	mov	r0, r4
240094a6:	f7ff f96f 	bl	24008788 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
240094aa:	f104 0110 	add.w	r1, r4, #16
240094ae:	4606      	mov	r6, r0
240094b0:	a803      	add	r0, sp, #12
240094b2:	f7fe fba8 	bl	24007c06 <lv_area_copy>
            coords.x1 -= w;
240094b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
240094ba:	fa1f f088 	uxth.w	r0, r8
            lv_draw_rect(&coords, clip_area, &draw_dsc);
240094be:	aa05      	add	r2, sp, #20
240094c0:	4639      	mov	r1, r7
            coords.x1 -= w;
240094c2:	1a1b      	subs	r3, r3, r0
240094c4:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
240094c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
240094cc:	4418      	add	r0, r3
            coords.y1 -= h;
240094ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.x2 += w;
240094d2:	f8ad 0010 	strh.w	r0, [sp, #16]
            coords.y1 -= h;
240094d6:	b2b0      	uxth	r0, r6
240094d8:	1a1b      	subs	r3, r3, r0
240094da:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
240094de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
240094e2:	4403      	add	r3, r0
            lv_draw_rect(&coords, clip_area, &draw_dsc);
240094e4:	a803      	add	r0, sp, #12
            coords.y2 += h;
240094e6:	f8ad 3012 	strh.w	r3, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
240094ea:	f004 fadf 	bl	2400daac <lv_draw_rect>
240094ee:	e727      	b.n	24009340 <lv_obj_design+0xc0>

240094f0 <lv_obj_init_draw_label_dsc>:
{
240094f0:	b570      	push	{r4, r5, r6, lr}
240094f2:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
240094f4:	f248 028c 	movw	r2, #32908	; 0x808c
240094f8:	4605      	mov	r5, r0
240094fa:	460e      	mov	r6, r1
240094fc:	f7ff fba2 	bl	24008c44 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
24009500:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
24009502:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
24009504:	d939      	bls.n	2400957a <lv_obj_init_draw_label_dsc+0x8a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24009506:	f248 0289 	movw	r2, #32905	; 0x8089
2400950a:	4631      	mov	r1, r6
2400950c:	4628      	mov	r0, r5
2400950e:	f7ff f907 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24009512:	f248 0280 	movw	r2, #32896	; 0x8080
24009516:	4631      	mov	r1, r6
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
24009518:	8020      	strh	r0, [r4, #0]
2400951a:	4628      	mov	r0, r5
2400951c:	f7ff f934 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24009520:	f248 0281 	movw	r2, #32897	; 0x8081
24009524:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
24009526:	8220      	strh	r0, [r4, #16]
24009528:	4628      	mov	r0, r5
2400952a:	f7ff f92d 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
2400952e:	f248 0282 	movw	r2, #32898	; 0x8082
24009532:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
24009534:	81e0      	strh	r0, [r4, #14]
24009536:	4628      	mov	r0, r5
24009538:	f7ff f926 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
2400953c:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
24009540:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24009544:	4631      	mov	r1, r6
24009546:	4628      	mov	r0, r5
24009548:	f7ff fbe2 	bl	24008d10 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
2400954c:	6962      	ldr	r2, [r4, #20]
2400954e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
24009552:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
24009554:	429a      	cmp	r2, r3
24009556:	d010      	beq.n	2400957a <lv_obj_init_draw_label_dsc+0x8a>
24009558:	69a2      	ldr	r2, [r4, #24]
2400955a:	429a      	cmp	r2, r3
2400955c:	d00d      	beq.n	2400957a <lv_obj_init_draw_label_dsc+0x8a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
2400955e:	f248 028a 	movw	r2, #32906	; 0x808a
24009562:	4631      	mov	r1, r6
24009564:	4628      	mov	r0, r5
24009566:	f7ff f8db 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
2400956a:	f248 028b 	movw	r2, #32907	; 0x808b
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
2400956e:	8060      	strh	r0, [r4, #2]
24009570:	4631      	mov	r1, r6
24009572:	4628      	mov	r0, r5
24009574:	f7ff f8d4 	bl	24008720 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
24009578:	80a0      	strh	r0, [r4, #4]
}
2400957a:	bd70      	pop	{r4, r5, r6, pc}

2400957c <lv_obj_init_draw_img_dsc>:
{
2400957c:	b570      	push	{r4, r5, r6, lr}
2400957e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
24009580:	f248 02ac 	movw	r2, #32940	; 0x80ac
24009584:	4605      	mov	r5, r0
24009586:	460e      	mov	r6, r1
24009588:	f7ff fb5c 	bl	24008c44 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
2400958c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
2400958e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
24009590:	d927      	bls.n	240095e2 <lv_obj_init_draw_img_dsc+0x66>
    draw_dsc->angle = 0;
24009592:	2300      	movs	r3, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24009594:	8a2a      	ldrh	r2, [r5, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
24009596:	4631      	mov	r1, r6
24009598:	4628      	mov	r0, r5
2400959a:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
2400959c:	f44f 7380 	mov.w	r3, #256	; 0x100
240095a0:	8123      	strh	r3, [r4, #8]
240095a2:	8aab      	ldrh	r3, [r5, #20]
240095a4:	3301      	adds	r3, #1
240095a6:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
240095a8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
240095ac:	fa02 f383 	sxtah	r3, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240095b0:	8a6a      	ldrh	r2, [r5, #18]
240095b2:	105b      	asrs	r3, r3, #1
240095b4:	80a3      	strh	r3, [r4, #4]
240095b6:	8aeb      	ldrh	r3, [r5, #22]
240095b8:	3301      	adds	r3, #1
240095ba:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
240095bc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
240095c0:	fa02 f383 	sxtah	r3, r2, r3
240095c4:	f248 02ad 	movw	r2, #32941	; 0x80ad
240095c8:	105b      	asrs	r3, r3, #1
240095ca:	80e3      	strh	r3, [r4, #6]
240095cc:	f7ff fb3a 	bl	24008c44 <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
240095d0:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
240095d2:	b130      	cbz	r0, 240095e2 <lv_obj_init_draw_img_dsc+0x66>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
240095d4:	f248 02a9 	movw	r2, #32937	; 0x80a9
240095d8:	4631      	mov	r1, r6
240095da:	4628      	mov	r0, r5
240095dc:	f7ff f8a0 	bl	24008720 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
240095e0:	81a0      	strh	r0, [r4, #12]
}
240095e2:	bd70      	pop	{r4, r5, r6, pc}

240095e4 <lv_obj_init_draw_line_dsc>:
{
240095e4:	b570      	push	{r4, r5, r6, lr}
240095e6:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
240095e8:	2290      	movs	r2, #144	; 0x90
240095ea:	4605      	mov	r5, r0
240095ec:	460e      	mov	r6, r1
240095ee:	f7ff f8cb 	bl	24008788 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
240095f2:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
240095f4:	b340      	cbz	r0, 24009648 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
240095f6:	229c      	movs	r2, #156	; 0x9c
240095f8:	4631      	mov	r1, r6
240095fa:	4628      	mov	r0, r5
240095fc:	f7ff fb22 	bl	24008c44 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
24009600:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
24009602:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
24009604:	d920      	bls.n	24009648 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
24009606:	2299      	movs	r2, #153	; 0x99
24009608:	4631      	mov	r1, r6
2400960a:	4628      	mov	r0, r5
2400960c:	f7ff f888 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
24009610:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
24009612:	8020      	strh	r0, [r4, #0]
24009614:	4631      	mov	r1, r6
24009616:	4628      	mov	r0, r5
24009618:	f7ff f8b6 	bl	24008788 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
2400961c:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
2400961e:	b128      	cbz	r0, 2400962c <lv_obj_init_draw_line_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
24009620:	2293      	movs	r2, #147	; 0x93
24009622:	4631      	mov	r1, r6
24009624:	4628      	mov	r0, r5
24009626:	f7ff f8af 	bl	24008788 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
2400962a:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
2400962c:	2294      	movs	r2, #148	; 0x94
2400962e:	4631      	mov	r1, r6
24009630:	4628      	mov	r0, r5
24009632:	f7ff f8a9 	bl	24008788 <_lv_obj_get_style_int>
24009636:	3800      	subs	r0, #0
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
24009638:	7a63      	ldrb	r3, [r4, #9]
2400963a:	bf18      	it	ne
2400963c:	2001      	movne	r0, #1
2400963e:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
24009642:	f360 03c3 	bfi	r3, r0, #3, #1
24009646:	7263      	strb	r3, [r4, #9]
}
24009648:	bd70      	pop	{r4, r5, r6, pc}

2400964a <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
2400964a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400964e:	4614      	mov	r4, r2
24009650:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
24009652:	2101      	movs	r1, #1
{
24009654:	4605      	mov	r5, r0
    _lv_memset_00(shot, sizeof(style_snapshot_t));
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
24009656:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    _lv_obj_disable_style_caching(obj, true);
2400965a:	f7ff f801 	bl	24008660 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
2400965e:	21bc      	movs	r1, #188	; 0xbc
24009660:	4620      	mov	r0, r4
24009662:	f006 fbcd 	bl	2400fe00 <_lv_memset_00>
    lv_draw_img_dsc_init(&shot->img);
24009666:	f104 0982 	add.w	r9, r4, #130	; 0x82
    lv_draw_rect_dsc_init(&shot->rect);
2400966a:	4620      	mov	r0, r4
    lv_draw_line_dsc_init(&shot->line);
2400966c:	f104 0878 	add.w	r8, r4, #120	; 0x78
    lv_draw_rect_dsc_init(&shot->rect);
24009670:	f004 f9f8 	bl	2400da64 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
24009674:	4650      	mov	r0, sl
24009676:	f002 fbe5 	bl	2400be44 <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
2400967a:	4648      	mov	r0, r9
2400967c:	f002 fac2 	bl	2400bc04 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
24009680:	4640      	mov	r0, r8
24009682:	f003 f855 	bl	2400c730 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24009686:	4631      	mov	r1, r6
24009688:	4628      	mov	r0, r5
2400968a:	f7fe ffce 	bl	2400862a <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
2400968e:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
24009690:	4607      	mov	r7, r0
    list->skip_trans = 1;

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
24009692:	4622      	mov	r2, r4
    bool trans_ori = list->skip_trans;
24009694:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
24009698:	f043 0301 	orr.w	r3, r3, #1
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
2400969c:	4631      	mov	r1, r6
    list->skip_trans = 1;
2400969e:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
240096a0:	4628      	mov	r0, r5
240096a2:	f7ff fd9c 	bl	240091de <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
240096a6:	4652      	mov	r2, sl
240096a8:	4631      	mov	r1, r6
240096aa:	4628      	mov	r0, r5
240096ac:	f7ff ff20 	bl	240094f0 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
240096b0:	464a      	mov	r2, r9
240096b2:	4631      	mov	r1, r6
240096b4:	4628      	mov	r0, r5
240096b6:	f7ff ff61 	bl	2400957c <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
240096ba:	4642      	mov	r2, r8
240096bc:	4631      	mov	r1, r6
240096be:	4628      	mov	r0, r5
240096c0:	f7ff ff90 	bl	240095e4 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240096c4:	2210      	movs	r2, #16
240096c6:	4631      	mov	r1, r6
240096c8:	4628      	mov	r0, r5
240096ca:	f7ff f85d 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240096ce:	2211      	movs	r2, #17
240096d0:	4631      	mov	r1, r6


    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
240096d2:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
240096d6:	4628      	mov	r0, r5
240096d8:	f7ff f856 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240096dc:	2213      	movs	r2, #19
240096de:	4631      	mov	r1, r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
240096e0:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
240096e4:	4628      	mov	r0, r5
240096e6:	f7ff f84f 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240096ea:	2212      	movs	r2, #18
240096ec:	4631      	mov	r1, r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
240096ee:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
240096f2:	4628      	mov	r0, r5
240096f4:	f7ff f848 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
240096f8:	2214      	movs	r2, #20
240096fa:	4631      	mov	r1, r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
240096fc:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
24009700:	4628      	mov	r0, r5
24009702:	f7ff f841 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
24009706:	2215      	movs	r2, #21
24009708:	4631      	mov	r1, r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
2400970a:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
2400970e:	4628      	mov	r0, r5
24009710:	f7ff f83a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24009714:	2216      	movs	r2, #22
24009716:	4631      	mov	r1, r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
24009718:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
2400971c:	4628      	mov	r0, r5
2400971e:	f7ff f833 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24009722:	2217      	movs	r2, #23
24009724:	4631      	mov	r1, r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
24009726:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
2400972a:	4628      	mov	r0, r5
2400972c:	f7ff f82c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24009730:	2218      	movs	r2, #24
24009732:	4631      	mov	r1, r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
24009734:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
24009738:	4628      	mov	r0, r5
2400973a:	f7ff f825 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
2400973e:	2203      	movs	r2, #3
24009740:	4631      	mov	r1, r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
24009742:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
24009746:	4628      	mov	r0, r5
24009748:	f7ff f81e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
2400974c:	2204      	movs	r2, #4
2400974e:	4631      	mov	r1, r6
    shot->size = lv_obj_get_style_size(obj, part);
24009750:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
24009754:	4628      	mov	r0, r5
24009756:	f7ff f817 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
2400975a:	2205      	movs	r2, #5
2400975c:	4631      	mov	r1, r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
2400975e:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
24009762:	4628      	mov	r0, r5
24009764:	f7ff f810 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24009768:	2206      	movs	r2, #6
2400976a:	4631      	mov	r1, r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
2400976c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
24009770:	4628      	mov	r0, r5
24009772:	f7ff f809 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24009776:	2207      	movs	r2, #7
24009778:	4631      	mov	r1, r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
2400977a:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
2400977e:	4628      	mov	r0, r5
24009780:	f7ff f802 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
24009784:	22c0      	movs	r2, #192	; 0xc0
24009786:	4631      	mov	r1, r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
24009788:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
2400978c:	4628      	mov	r0, r5
2400978e:	f7fe fffb 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
24009792:	22c1      	movs	r2, #193	; 0xc1
24009794:	4631      	mov	r1, r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
24009796:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
2400979a:	4628      	mov	r0, r5
2400979c:	f7fe fff4 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
240097a0:	22c2      	movs	r2, #194	; 0xc2
240097a2:	4631      	mov	r1, r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
240097a4:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
240097a8:	4628      	mov	r0, r5
240097aa:	f7fe ffed 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
240097ae:	22c3      	movs	r2, #195	; 0xc3
240097b0:	4631      	mov	r1, r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
240097b2:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
240097b6:	4628      	mov	r0, r5
240097b8:	f7fe ffe6 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
240097bc:	22c9      	movs	r2, #201	; 0xc9
240097be:	4631      	mov	r1, r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
240097c0:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
240097c4:	4628      	mov	r0, r5
240097c6:	f7fe ffab 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
240097ca:	22ca      	movs	r2, #202	; 0xca
240097cc:	4631      	mov	r1, r6
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
240097ce:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
240097d2:	4628      	mov	r0, r5
240097d4:	f7fe ffa4 	bl	24008720 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
240097d8:	f248 020c 	movw	r2, #32780	; 0x800c
240097dc:	4631      	mov	r1, r6
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
240097de:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
240097e2:	4628      	mov	r0, r5
240097e4:	f7ff fa2e 	bl	24008c44 <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
240097e8:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
240097ea:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
240097ee:	4628      	mov	r0, r5
240097f0:	f7ff f8c4 	bl	2400897c <lv_obj_get_style_clip_corner>
240097f4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
240097f8:	2233      	movs	r2, #51	; 0x33
240097fa:	4631      	mov	r1, r6
240097fc:	f360 0300 	bfi	r3, r0, #0, #1
24009800:	4628      	mov	r0, r5
24009802:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
24009806:	f7fe ffbf 	bl	24008788 <_lv_obj_get_style_int>
2400980a:	3800      	subs	r0, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
2400980c:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb

    _lv_obj_disable_style_caching(obj, false);
24009810:	f04f 0100 	mov.w	r1, #0
24009814:	bf18      	it	ne
24009816:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
24009818:	f360 0341 	bfi	r3, r0, #1, #1
    _lv_obj_disable_style_caching(obj, false);
2400981c:	4628      	mov	r0, r5
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
2400981e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
24009822:	f7fe ff1d 	bl	24008660 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
24009826:	797b      	ldrb	r3, [r7, #5]
24009828:	f36b 0300 	bfi	r3, fp, #0, #1
2400982c:	717b      	strb	r3, [r7, #5]
}
2400982e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

24009832 <lv_obj_set_state>:
{
24009832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(obj->state == new_state) return;
24009836:	f890 9037 	ldrb.w	r9, [r0, #55]	; 0x37
{
2400983a:	b0df      	sub	sp, #380	; 0x17c
2400983c:	4605      	mov	r5, r0
2400983e:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
24009840:	4589      	cmp	r9, r1
24009842:	f000 80b1 	beq.w	240099a8 <lv_obj_set_state+0x176>
24009846:	2600      	movs	r6, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
24009848:	4634      	mov	r4, r6
2400984a:	b2f7      	uxtb	r7, r6
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
2400984c:	4628      	mov	r0, r5
2400984e:	4639      	mov	r1, r7
24009850:	f7fe feeb 	bl	2400862a <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
24009854:	2800      	cmp	r0, #0
24009856:	f000 8096 	beq.w	24009986 <lv_obj_set_state+0x154>
        style_snapshot(obj, part, &shot_pre);
2400985a:	466a      	mov	r2, sp
2400985c:	4639      	mov	r1, r7
2400985e:	4628      	mov	r0, r5
        obj->state = prev_state;
24009860:	f885 9037 	strb.w	r9, [r5, #55]	; 0x37
        style_snapshot(obj, part, &shot_pre);
24009864:	f7ff fef1 	bl	2400964a <style_snapshot>
        style_snapshot(obj, part, &shot_post);
24009868:	aa2f      	add	r2, sp, #188	; 0xbc
2400986a:	4639      	mov	r1, r7
2400986c:	4628      	mov	r0, r5
        obj->state = new_state;
2400986e:	f885 8037 	strb.w	r8, [r5, #55]	; 0x37
        style_snapshot(obj, part, &shot_post);
24009872:	f7ff feea 	bl	2400964a <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
24009876:	22bc      	movs	r2, #188	; 0xbc
24009878:	4668      	mov	r0, sp
2400987a:	eb0d 0102 	add.w	r1, sp, r2
2400987e:	f010 fe07 	bl	2401a490 <memcmp>
24009882:	2800      	cmp	r0, #0
24009884:	d07a      	beq.n	2400997c <lv_obj_set_state+0x14a>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
24009886:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
2400988a:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
2400988e:	429a      	cmp	r2, r3
24009890:	f040 8088 	bne.w	240099a4 <lv_obj_set_state+0x172>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
24009894:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
24009898:	f9bd 3150 	ldrsh.w	r3, [sp, #336]	; 0x150
2400989c:	429a      	cmp	r2, r3
2400989e:	f040 8081 	bne.w	240099a4 <lv_obj_set_state+0x172>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
240098a2:	f9bd 2152 	ldrsh.w	r2, [sp, #338]	; 0x152
240098a6:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
240098aa:	4293      	cmp	r3, r2
240098ac:	d17a      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
240098ae:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
240098b2:	429a      	cmp	r2, r3
240098b4:	d176      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
240098b6:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
240098ba:	f9bd 3156 	ldrsh.w	r3, [sp, #342]	; 0x156
240098be:	429a      	cmp	r2, r3
240098c0:	d170      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
240098c2:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
240098c6:	f9bd 3158 	ldrsh.w	r3, [sp, #344]	; 0x158
240098ca:	429a      	cmp	r2, r3
240098cc:	d16a      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
240098ce:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
240098d2:	f9bd 315a 	ldrsh.w	r3, [sp, #346]	; 0x15a
240098d6:	429a      	cmp	r2, r3
240098d8:	d164      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
240098da:	f9bd 315e 	ldrsh.w	r3, [sp, #350]	; 0x15e
240098de:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
240098e2:	429a      	cmp	r2, r3
240098e4:	d15e      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
240098e6:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
240098ea:	429a      	cmp	r2, r3
240098ec:	d15a      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
240098ee:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
240098f2:	f9bd 3162 	ldrsh.w	r3, [sp, #354]	; 0x162
240098f6:	429a      	cmp	r2, r3
240098f8:	d154      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
240098fa:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
240098fe:	f9bd 3164 	ldrsh.w	r3, [sp, #356]	; 0x164
24009902:	429a      	cmp	r2, r3
24009904:	d14e      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
24009906:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
2400990a:	f9bd 3166 	ldrsh.w	r3, [sp, #358]	; 0x166
2400990e:	429a      	cmp	r2, r3
24009910:	d148      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
24009912:	f9bd 20ac 	ldrsh.w	r2, [sp, #172]	; 0xac
24009916:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	; 0x168
2400991a:	429a      	cmp	r2, r3
2400991c:	d142      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
2400991e:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
24009922:	f9bd 30d6 	ldrsh.w	r3, [sp, #214]	; 0xd6
24009926:	429a      	cmp	r2, r3
24009928:	d13c      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
2400992a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
2400992e:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
24009932:	429a      	cmp	r2, r3
24009934:	d136      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
24009936:	9a10      	ldr	r2, [sp, #64]	; 0x40
24009938:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
2400993a:	429a      	cmp	r2, r3
2400993c:	d132      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
2400993e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
24009942:	f89d 310c 	ldrb.w	r3, [sp, #268]	; 0x10c
24009946:	429a      	cmp	r2, r3
24009948:	d12c      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
2400994a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
2400994e:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
24009952:	429a      	cmp	r2, r3
24009954:	d126      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
24009956:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
2400995a:	f9bd 30de 	ldrsh.w	r3, [sp, #222]	; 0xde
2400995e:	429a      	cmp	r2, r3
24009960:	d120      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
24009962:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
24009966:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
2400996a:	429a      	cmp	r2, r3
2400996c:	d11a      	bne.n	240099a4 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
2400996e:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
24009972:	f9bd 30e2 	ldrsh.w	r3, [sp, #226]	; 0xe2
24009976:	429a      	cmp	r2, r3
24009978:	d114      	bne.n	240099a4 <lv_obj_set_state+0x172>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
2400997a:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
2400997c:	3601      	adds	r6, #1
2400997e:	2e40      	cmp	r6, #64	; 0x40
24009980:	f47f af63 	bne.w	2400984a <lv_obj_set_state+0x18>
24009984:	4637      	mov	r7, r6
    obj->state = new_state;
24009986:	f885 8037 	strb.w	r8, [r5, #55]	; 0x37
    if(cmp_res == STYLE_COMPARE_SAME) {
2400998a:	b16c      	cbz	r4, 240099a8 <lv_obj_set_state+0x176>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
2400998c:	2c02      	cmp	r4, #2
2400998e:	f04f 02ff 	mov.w	r2, #255	; 0xff
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24009992:	4628      	mov	r0, r5
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
24009994:	bf0c      	ite	eq
24009996:	4639      	moveq	r1, r7
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24009998:	4611      	movne	r1, r2
}
2400999a:	b05f      	add	sp, #380	; 0x17c
2400999c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
240099a0:	f7ff ba8e 	b.w	24008ec0 <lv_obj_refresh_style>
            cmp_res = STYLE_COMPARE_DIFF;
240099a4:	2402      	movs	r4, #2
240099a6:	e7ee      	b.n	24009986 <lv_obj_set_state+0x154>
}
240099a8:	b05f      	add	sp, #380	; 0x17c
240099aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

240099ae <lv_obj_add_state>:
{
240099ae:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
240099b0:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    if(obj->state != new_state) {
240099b4:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
240099b6:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
240099ba:	d001      	beq.n	240099c0 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
240099bc:	f7ff bf39 	b.w	24009832 <lv_obj_set_state>
}
240099c0:	4770      	bx	lr

240099c2 <lv_obj_clear_state>:
{
240099c2:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
240099c4:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
    if(obj->state != new_state) {
240099c8:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
240099ca:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
240099ce:	d001      	beq.n	240099d4 <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
240099d0:	f7ff bf2f 	b.w	24009832 <lv_obj_set_state>
}
240099d4:	4770      	bx	lr

240099d6 <lv_obj_get_draw_rect_ext_pad_size>:
{
240099d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
240099da:	2250      	movs	r2, #80	; 0x50
240099dc:	b08b      	sub	sp, #44	; 0x2c
240099de:	4604      	mov	r4, r0
240099e0:	460e      	mov	r6, r1
240099e2:	f7fe fed1 	bl	24008788 <_lv_obj_get_style_int>
    if(sh_width) {
240099e6:	4607      	mov	r7, r0
240099e8:	2800      	cmp	r0, #0
240099ea:	f040 80bb 	bne.w	24009b64 <lv_obj_get_draw_rect_ext_pad_size+0x18e>
    lv_coord_t s = 0;
240099ee:	2500      	movs	r5, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
240099f0:	227f      	movs	r2, #127	; 0x7f
240099f2:	4631      	mov	r1, r6
240099f4:	4620      	mov	r0, r4
240099f6:	f7ff f98b 	bl	24008d10 <_lv_obj_get_style_ptr>
    if(value_str) {
240099fa:	4607      	mov	r7, r0
240099fc:	2800      	cmp	r0, #0
240099fe:	f000 8082 	beq.w	24009b06 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
24009a02:	227c      	movs	r2, #124	; 0x7c
24009a04:	4631      	mov	r1, r6
24009a06:	4620      	mov	r0, r4
24009a08:	f7ff f91c 	bl	24008c44 <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
24009a0c:	2802      	cmp	r0, #2
24009a0e:	d97a      	bls.n	24009b06 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
24009a10:	2270      	movs	r2, #112	; 0x70
24009a12:	4631      	mov	r1, r6
24009a14:	4620      	mov	r0, r4
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
24009a16:	f04f 0900 	mov.w	r9, #0
24009a1a:	f7fe feb5 	bl	24008788 <_lv_obj_get_style_int>
24009a1e:	2270      	movs	r2, #112	; 0x70
24009a20:	4631      	mov	r1, r6
24009a22:	9005      	str	r0, [sp, #20]
24009a24:	4620      	mov	r0, r4
24009a26:	f7fe feaf 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
24009a2a:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
24009a2c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
24009a2e:	4631      	mov	r1, r6
24009a30:	4620      	mov	r0, r4
24009a32:	f7ff f96d 	bl	24008d10 <_lv_obj_get_style_ptr>
24009a36:	f647 4118 	movw	r1, #31768	; 0x7c18
24009a3a:	4602      	mov	r2, r0
24009a3c:	9b05      	ldr	r3, [sp, #20]
24009a3e:	a806      	add	r0, sp, #24
24009a40:	f8cd 8000 	str.w	r8, [sp]
24009a44:	e9cd 1901 	strd	r1, r9, [sp, #4]
24009a48:	4639      	mov	r1, r7
24009a4a:	f007 f92d 	bl	24010ca8 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
24009a4e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
24009a52:	2275      	movs	r2, #117	; 0x75
24009a54:	4631      	mov	r1, r6
24009a56:	3b01      	subs	r3, #1
24009a58:	4620      	mov	r0, r4
            value_area.x1 = 0;
24009a5a:	f8cd 9020 	str.w	r9, [sp, #32]
            value_area.x2 = txt_size.x - 1;
24009a5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            value_area.y2 = txt_size.y - 1;
24009a62:	f8bd 301a 	ldrh.w	r3, [sp, #26]
24009a66:	3b01      	subs	r3, #1
24009a68:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
24009a6c:	f7fe fe8c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
24009a70:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
24009a72:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
24009a74:	4631      	mov	r1, r6
24009a76:	4620      	mov	r0, r4
24009a78:	f7fe fe86 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
24009a7c:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
24009a7e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
24009a80:	4631      	mov	r1, r6
24009a82:	4620      	mov	r0, r4
24009a84:	f7fe fe80 	bl	24008788 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
24009a88:	ab07      	add	r3, sp, #28
24009a8a:	4607      	mov	r7, r0
24009a8c:	fa5f f289 	uxtb.w	r2, r9
24009a90:	a908      	add	r1, sp, #32
24009a92:	f104 0010 	add.w	r0, r4, #16
24009a96:	f005 fca9 	bl	2400f3ec <_lv_area_align>
            value_area.y1 += p_align.y + yofs;
24009a9a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            value_area.x1 += p_align.x + xofs;
24009a9e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            value_area.y1 += p_align.y + yofs;
24009aa2:	18b8      	adds	r0, r7, r2
            value_area.x1 += p_align.x + xofs;
24009aa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
24009aa8:	4443      	add	r3, r8
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
24009aaa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
            value_area.x1 += p_align.x + xofs;
24009aae:	fa12 f283 	uxtah	r2, r2, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
24009ab2:	b212      	sxth	r2, r2
24009ab4:	1a89      	subs	r1, r1, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
24009ab6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
24009aba:	42a9      	cmp	r1, r5
24009abc:	bfb8      	it	lt
24009abe:	4629      	movlt	r1, r5
            value_area.y1 += p_align.y + yofs;
24009ac0:	f8bd 5022 	ldrh.w	r5, [sp, #34]	; 0x22
24009ac4:	fa15 f580 	uxtah	r5, r5, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
24009ac8:	b209      	sxth	r1, r1
24009aca:	b22d      	sxth	r5, r5
24009acc:	1b52      	subs	r2, r2, r5
24009ace:	428a      	cmp	r2, r1
24009ad0:	bfb8      	it	lt
24009ad2:	460a      	movlt	r2, r1
            value_area.x2 += p_align.x + xofs;
24009ad4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
24009ad8:	fa11 f383 	uxtah	r3, r1, r3
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
24009adc:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
24009ae0:	b212      	sxth	r2, r2
24009ae2:	b21b      	sxth	r3, r3
24009ae4:	1a5b      	subs	r3, r3, r1
24009ae6:	4293      	cmp	r3, r2
24009ae8:	bfb8      	it	lt
24009aea:	4613      	movlt	r3, r2
            value_area.y2 += p_align.y + yofs;
24009aec:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
24009af0:	fa12 f080 	uxtah	r0, r2, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
24009af4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
24009af8:	b21b      	sxth	r3, r3
24009afa:	b200      	sxth	r0, r0
24009afc:	1a80      	subs	r0, r0, r2
24009afe:	4298      	cmp	r0, r3
24009b00:	bfb8      	it	lt
24009b02:	4618      	movlt	r0, r3
24009b04:	b205      	sxth	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
24009b06:	2240      	movs	r2, #64	; 0x40
24009b08:	4631      	mov	r1, r6
24009b0a:	4620      	mov	r0, r4
24009b0c:	f7fe fe3c 	bl	24008788 <_lv_obj_get_style_int>
    if(outline_width) {
24009b10:	4607      	mov	r7, r0
24009b12:	b180      	cbz	r0, 24009b36 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
24009b14:	224c      	movs	r2, #76	; 0x4c
24009b16:	4631      	mov	r1, r6
24009b18:	4620      	mov	r0, r4
24009b1a:	f7ff f893 	bl	24008c44 <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
24009b1e:	2802      	cmp	r0, #2
24009b20:	d909      	bls.n	24009b36 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
24009b22:	2241      	movs	r2, #65	; 0x41
24009b24:	4631      	mov	r1, r6
24009b26:	4620      	mov	r0, r4
24009b28:	f7fe fe2e 	bl	24008788 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
24009b2c:	4438      	add	r0, r7
24009b2e:	42a8      	cmp	r0, r5
24009b30:	bfb8      	it	lt
24009b32:	4628      	movlt	r0, r5
24009b34:	b205      	sxth	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
24009b36:	4631      	mov	r1, r6
24009b38:	2204      	movs	r2, #4
24009b3a:	4620      	mov	r0, r4
24009b3c:	f7fe fe24 	bl	24008788 <_lv_obj_get_style_int>
24009b40:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
24009b42:	2205      	movs	r2, #5
24009b44:	4631      	mov	r1, r6
24009b46:	4620      	mov	r0, r4
24009b48:	f7fe fe1e 	bl	24008788 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
24009b4c:	42b8      	cmp	r0, r7
24009b4e:	bfb8      	it	lt
24009b50:	4638      	movlt	r0, r7
24009b52:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
24009b54:	2800      	cmp	r0, #0
24009b56:	bfc4      	itt	gt
24009b58:	1940      	addgt	r0, r0, r5
24009b5a:	b205      	sxthgt	r5, r0
}
24009b5c:	4628      	mov	r0, r5
24009b5e:	b00b      	add	sp, #44	; 0x2c
24009b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
24009b64:	225c      	movs	r2, #92	; 0x5c
24009b66:	4631      	mov	r1, r6
24009b68:	4620      	mov	r0, r4
24009b6a:	f7ff f86b 	bl	24008c44 <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
24009b6e:	2802      	cmp	r0, #2
24009b70:	f67f af3d 	bls.w	240099ee <lv_obj_get_draw_rect_ext_pad_size+0x18>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
24009b74:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
24009b78:	2253      	movs	r2, #83	; 0x53
24009b7a:	4631      	mov	r1, r6
24009b7c:	4620      	mov	r0, r4
24009b7e:	f7fe fe03 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
24009b82:	2251      	movs	r2, #81	; 0x51
            sh_width++;
24009b84:	eb00 0567 	add.w	r5, r0, r7, asr #1
24009b88:	4631      	mov	r1, r6
24009b8a:	4620      	mov	r0, r4
24009b8c:	f7fe fdfc 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
24009b90:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
24009b92:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
24009b94:	4631      	mov	r1, r6
24009b96:	4620      	mov	r0, r4
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
24009b98:	3501      	adds	r5, #1
24009b9a:	f7fe fdf5 	bl	24008788 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
24009b9e:	2800      	cmp	r0, #0
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
24009ba0:	b2ad      	uxth	r5, r5
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
24009ba2:	bfb8      	it	lt
24009ba4:	4240      	neglt	r0, r0
24009ba6:	2f00      	cmp	r7, #0
24009ba8:	bfb8      	it	lt
24009baa:	427f      	neglt	r7, r7
24009bac:	b280      	uxth	r0, r0
24009bae:	b2bf      	uxth	r7, r7
24009bb0:	42b8      	cmp	r0, r7
24009bb2:	bf2c      	ite	cs
24009bb4:	182d      	addcs	r5, r5, r0
24009bb6:	19ed      	addcc	r5, r5, r7
            s = LV_MATH_MAX(s, sh_width);
24009bb8:	b22d      	sxth	r5, r5
24009bba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
24009bbe:	e717      	b.n	240099f0 <lv_obj_get_draw_rect_ext_pad_size+0x1a>

24009bc0 <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
24009bc0:	b908      	cbnz	r0, 24009bc6 <lv_obj_get_focused_obj+0x6>
24009bc2:	4770      	bx	lr
    return obj->parent;
24009bc4:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
24009bc6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
24009bca:	079b      	lsls	r3, r3, #30
24009bcc:	d4fa      	bmi.n	24009bc4 <lv_obj_get_focused_obj+0x4>
}
24009bce:	4770      	bx	lr

24009bd0 <lv_obj_signal>:
{
24009bd0:	b510      	push	{r4, lr}
24009bd2:	4604      	mov	r4, r0
24009bd4:	4610      	mov	r0, r2
24009bd6:	2917      	cmp	r1, #23
24009bd8:	d811      	bhi.n	24009bfe <lv_obj_signal+0x2e>
24009bda:	e8df f001 	tbb	[pc, r1]
24009bde:	1a47      	.short	0x1a47
24009be0:	102b1010 	.word	0x102b1010
24009be4:	100c1520 	.word	0x100c1520
24009be8:	34102f10 	.word	0x34102f10
24009bec:	10101034 	.word	0x10101034
24009bf0:	10101010 	.word	0x10101010
24009bf4:	4239      	.short	0x4239
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
24009bf6:	7813      	ldrb	r3, [r2, #0]
24009bf8:	b91b      	cbnz	r3, 24009c02 <lv_obj_signal+0x32>
24009bfa:	3428      	adds	r4, #40	; 0x28
24009bfc:	6054      	str	r4, [r2, #4]
    lv_res_t res = LV_RES_OK;
24009bfe:	2001      	movs	r0, #1
24009c00:	e00c      	b.n	24009c1c <lv_obj_signal+0x4c>
        else info->result = NULL;
24009c02:	2300      	movs	r3, #0
24009c04:	6053      	str	r3, [r2, #4]
24009c06:	e7fa      	b.n	24009bfe <lv_obj_signal+0x2e>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24009c08:	491b      	ldr	r1, [pc, #108]	; (24009c78 <lv_obj_signal+0xa8>)
}
24009c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24009c0e:	f7ff bad8 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    return (obj->protect & prot) == 0 ? false : true;
24009c12:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
24009c16:	43c0      	mvns	r0, r0
24009c18:	f000 0001 	and.w	r0, r0, #1
}
24009c1c:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
24009c1e:	2100      	movs	r1, #0
24009c20:	4620      	mov	r0, r4
24009c22:	f7ff fed8 	bl	240099d6 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
24009c26:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
24009c2a:	4298      	cmp	r0, r3
24009c2c:	bfb8      	it	lt
24009c2e:	4618      	movlt	r0, r3
24009c30:	8660      	strh	r0, [r4, #50]	; 0x32
24009c32:	e7e4      	b.n	24009bfe <lv_obj_signal+0x2e>
        lv_obj_refresh_ext_draw_pad(obj);
24009c34:	4620      	mov	r0, r4
24009c36:	f7fe f8f1 	bl	24007e1c <lv_obj_refresh_ext_draw_pad>
24009c3a:	e7e0      	b.n	24009bfe <lv_obj_signal+0x2e>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
24009c3c:	2110      	movs	r1, #16
24009c3e:	4620      	mov	r0, r4
24009c40:	f7ff feb5 	bl	240099ae <lv_obj_add_state>
24009c44:	e7db      	b.n	24009bfe <lv_obj_signal+0x2e>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
24009c46:	2110      	movs	r1, #16
            lv_obj_clear_state(obj, LV_STATE_EDITED);
24009c48:	4620      	mov	r0, r4
24009c4a:	f7ff feba 	bl	240099c2 <lv_obj_clear_state>
24009c4e:	e7d6      	b.n	24009bfe <lv_obj_signal+0x2e>
            obj = lv_obj_get_focused_obj(obj);
24009c50:	4620      	mov	r0, r4
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
24009c52:	2102      	movs	r1, #2
            obj = lv_obj_get_focused_obj(obj);
24009c54:	f7ff ffb4 	bl	24009bc0 <lv_obj_get_focused_obj>
24009c58:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
24009c5a:	f7ff fea8 	bl	240099ae <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
24009c5e:	2104      	movs	r1, #4
24009c60:	e7f2      	b.n	24009c48 <lv_obj_signal+0x78>
        obj = lv_obj_get_focused_obj(obj);
24009c62:	4620      	mov	r0, r4
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
24009c64:	2106      	movs	r1, #6
        obj = lv_obj_get_focused_obj(obj);
24009c66:	f7ff ffab 	bl	24009bc0 <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
24009c6a:	e7ee      	b.n	24009c4a <lv_obj_signal+0x7a>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
24009c6c:	2100      	movs	r1, #0
24009c6e:	4620      	mov	r0, r4
24009c70:	f7fe fced 	bl	2400864e <lv_obj_clean_style_list>
24009c74:	e7c3      	b.n	24009bfe <lv_obj_signal+0x2e>
24009c76:	bf00      	nop
24009c78:	900d66db 	.word	0x900d66db

24009c7c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
24009c7c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
24009c7e:	4d19      	ldr	r5, [pc, #100]	; (24009ce4 <lv_refr_vdb_flush+0x68>)
24009c80:	6828      	ldr	r0, [r5, #0]
24009c82:	f005 f8f7 	bl	2400ee74 <lv_disp_get_buf>
24009c86:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
24009c88:	6828      	ldr	r0, [r5, #0]
24009c8a:	f005 f90c 	bl	2400eea6 <lv_disp_is_double_buf>
24009c8e:	b958      	cbnz	r0, 24009ca8 <lv_refr_vdb_flush+0x2c>
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
24009c90:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
24009c92:	2301      	movs	r3, #1
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
24009c94:	686a      	ldr	r2, [r5, #4]
    vdb->flushing = 1;
24009c96:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
24009c98:	6a11      	ldr	r1, [r2, #32]
24009c9a:	07c9      	lsls	r1, r1, #31
24009c9c:	d409      	bmi.n	24009cb2 <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
24009c9e:	2300      	movs	r3, #0
24009ca0:	e00a      	b.n	24009cb8 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
24009ca2:	69c3      	ldr	r3, [r0, #28]
24009ca4:	b10b      	cbz	r3, 24009caa <lv_refr_vdb_flush+0x2e>
24009ca6:	4798      	blx	r3
24009ca8:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
24009caa:	69a3      	ldr	r3, [r4, #24]
24009cac:	2b00      	cmp	r3, #0
24009cae:	d1f8      	bne.n	24009ca2 <lv_refr_vdb_flush+0x26>
24009cb0:	e7ee      	b.n	24009c90 <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
24009cb2:	6a12      	ldr	r2, [r2, #32]
24009cb4:	0792      	lsls	r2, r2, #30
24009cb6:	d5f2      	bpl.n	24009c9e <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
24009cb8:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
24009cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
24009cbc:	b10b      	cbz	r3, 24009cc2 <lv_refr_vdb_flush+0x46>
24009cbe:	4628      	mov	r0, r5
24009cc0:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
24009cc2:	68eb      	ldr	r3, [r5, #12]
24009cc4:	b123      	cbz	r3, 24009cd0 <lv_refr_vdb_flush+0x54>
24009cc6:	68a2      	ldr	r2, [r4, #8]
24009cc8:	f104 0110 	add.w	r1, r4, #16
24009ccc:	4628      	mov	r0, r5
24009cce:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
24009cd0:	6822      	ldr	r2, [r4, #0]
24009cd2:	b132      	cbz	r2, 24009ce2 <lv_refr_vdb_flush+0x66>
24009cd4:	6863      	ldr	r3, [r4, #4]
24009cd6:	b123      	cbz	r3, 24009ce2 <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
24009cd8:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
24009cda:	428a      	cmp	r2, r1
24009cdc:	bf18      	it	ne
24009cde:	4613      	movne	r3, r2
24009ce0:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
24009ce2:	bd38      	pop	{r3, r4, r5, pc}
24009ce4:	2402da04 	.word	0x2402da04

24009ce8 <lv_refr_get_top_obj>:
{
24009ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
24009cec:	2200      	movs	r2, #0
{
24009cee:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
24009cf0:	3110      	adds	r1, #16
{
24009cf2:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
24009cf4:	f005 fb2b 	bl	2400f34e <_lv_area_is_in>
24009cf8:	b910      	cbnz	r0, 24009d00 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
24009cfa:	2000      	movs	r0, #0
}
24009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
24009d00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
24009d04:	06db      	lsls	r3, r3, #27
24009d06:	d4f8      	bmi.n	24009cfa <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
24009d08:	6a23      	ldr	r3, [r4, #32]
24009d0a:	2202      	movs	r2, #2
24009d0c:	4639      	mov	r1, r7
24009d0e:	4620      	mov	r0, r4
24009d10:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
24009d12:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
24009d14:	4606      	mov	r6, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
24009d16:	d0f0      	beq.n	24009cfa <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
24009d18:	f104 0804 	add.w	r8, r4, #4
24009d1c:	4640      	mov	r0, r8
24009d1e:	f005 fceb 	bl	2400f6f8 <_lv_ll_get_head>
24009d22:	4605      	mov	r5, r0
24009d24:	b918      	cbnz	r0, 24009d2e <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
24009d26:	2e01      	cmp	r6, #1
24009d28:	d1e7      	bne.n	24009cfa <lv_refr_get_top_obj+0x12>
24009d2a:	4620      	mov	r0, r4
24009d2c:	e7e6      	b.n	24009cfc <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
24009d2e:	4629      	mov	r1, r5
24009d30:	4638      	mov	r0, r7
24009d32:	f7ff ffd9 	bl	24009ce8 <lv_refr_get_top_obj>
            if(found_p != NULL) {
24009d36:	2800      	cmp	r0, #0
24009d38:	d1e0      	bne.n	24009cfc <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
24009d3a:	4629      	mov	r1, r5
24009d3c:	4640      	mov	r0, r8
24009d3e:	f005 fce1 	bl	2400f704 <_lv_ll_get_next>
24009d42:	e7ee      	b.n	24009d22 <lv_refr_get_top_obj+0x3a>

24009d44 <lv_refr_obj>:
{
24009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
24009d46:	f890 7034 	ldrb.w	r7, [r0, #52]	; 0x34
{
24009d4a:	b08b      	sub	sp, #44	; 0x2c
24009d4c:	4604      	mov	r4, r0
24009d4e:	460e      	mov	r6, r1
    if(obj->hidden != 0) return;
24009d50:	f017 0710 	ands.w	r7, r7, #16
24009d54:	d13b      	bne.n	24009dce <lv_refr_obj+0x8a>
    lv_coord_t ext_size = obj->ext_draw_pad;
24009d56:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
24009d5a:	a904      	add	r1, sp, #16
24009d5c:	f7fe faaf 	bl	240082be <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
24009d60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
24009d64:	b2ab      	uxth	r3, r5
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
24009d66:	4631      	mov	r1, r6
24009d68:	a802      	add	r0, sp, #8
    obj_area.x1 -= ext_size;
24009d6a:	1ad2      	subs	r2, r2, r3
24009d6c:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
24009d70:	f8bd 2012 	ldrh.w	r2, [sp, #18]
24009d74:	1ad2      	subs	r2, r2, r3
24009d76:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
24009d7a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
24009d7e:	441a      	add	r2, r3
24009d80:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
24009d84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
24009d88:	4413      	add	r3, r2
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
24009d8a:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
24009d8c:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
24009d90:	f005 f9df 	bl	2400f152 <_lv_area_intersect>
    if(union_ok != false) {
24009d94:	b1d8      	cbz	r0, 24009dce <lv_refr_obj+0x8a>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
24009d96:	6a23      	ldr	r3, [r4, #32]
24009d98:	b11b      	cbz	r3, 24009da2 <lv_refr_obj+0x5e>
24009d9a:	463a      	mov	r2, r7
24009d9c:	a902      	add	r1, sp, #8
24009d9e:	4620      	mov	r0, r4
24009da0:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
24009da2:	a904      	add	r1, sp, #16
24009da4:	4620      	mov	r0, r4
24009da6:	f7fe fa8a 	bl	240082be <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
24009daa:	aa04      	add	r2, sp, #16
24009dac:	4631      	mov	r1, r6
24009dae:	4668      	mov	r0, sp
24009db0:	f005 f9cf 	bl	2400f152 <_lv_area_intersect>
        if(union_ok != false) {
24009db4:	b128      	cbz	r0, 24009dc2 <lv_refr_obj+0x7e>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
24009db6:	1d26      	adds	r6, r4, #4
24009db8:	4630      	mov	r0, r6
24009dba:	f005 fca0 	bl	2400f6fe <_lv_ll_get_tail>
24009dbe:	4605      	mov	r5, r0
24009dc0:	b938      	cbnz	r0, 24009dd2 <lv_refr_obj+0x8e>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
24009dc2:	6a23      	ldr	r3, [r4, #32]
24009dc4:	b11b      	cbz	r3, 24009dce <lv_refr_obj+0x8a>
24009dc6:	2201      	movs	r2, #1
24009dc8:	a902      	add	r1, sp, #8
24009dca:	4620      	mov	r0, r4
24009dcc:	4798      	blx	r3
}
24009dce:	b00b      	add	sp, #44	; 0x2c
24009dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
24009dd2:	a908      	add	r1, sp, #32
24009dd4:	4628      	mov	r0, r5
24009dd6:	f7fe fa72 	bl	240082be <lv_obj_get_coords>
                child_area.x1 -= ext_size;
24009dda:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
24009ddc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
24009de0:	4669      	mov	r1, sp
24009de2:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
24009de4:	1ad2      	subs	r2, r2, r3
24009de6:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
24009dea:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
24009dee:	1ad2      	subs	r2, r2, r3
24009df0:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
24009df4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
24009df8:	441a      	add	r2, r3
24009dfa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
24009dfe:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
24009e02:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
24009e04:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
24009e06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
24009e0a:	f005 f9a2 	bl	2400f152 <_lv_area_intersect>
                if(union_ok) {
24009e0e:	b118      	cbz	r0, 24009e18 <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
24009e10:	a906      	add	r1, sp, #24
24009e12:	4628      	mov	r0, r5
24009e14:	f7ff ff96 	bl	24009d44 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
24009e18:	4629      	mov	r1, r5
24009e1a:	4630      	mov	r0, r6
24009e1c:	f005 fc77 	bl	2400f70e <_lv_ll_get_prev>
24009e20:	e7cd      	b.n	24009dbe <lv_refr_obj+0x7a>
	...

24009e24 <lv_refr_obj_and_children>:
{
24009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24009e26:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
24009e28:	4604      	mov	r4, r0
24009e2a:	b928      	cbnz	r0, 24009e38 <lv_refr_obj_and_children+0x14>
24009e2c:	4b13      	ldr	r3, [pc, #76]	; (24009e7c <lv_refr_obj_and_children+0x58>)
24009e2e:	6818      	ldr	r0, [r3, #0]
24009e30:	f7fc ffd8 	bl	24006de4 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
24009e34:	4604      	mov	r4, r0
24009e36:	b140      	cbz	r0, 24009e4a <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
24009e38:	4620      	mov	r0, r4
24009e3a:	4631      	mov	r1, r6
24009e3c:	f7ff ff82 	bl	24009d44 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
24009e40:	4620      	mov	r0, r4
24009e42:	f7fe fa13 	bl	2400826c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
24009e46:	4605      	mov	r5, r0
    while(par != NULL) {
24009e48:	b900      	cbnz	r0, 24009e4c <lv_refr_obj_and_children+0x28>
}
24009e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
24009e4c:	1d2f      	adds	r7, r5, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
24009e4e:	4621      	mov	r1, r4
24009e50:	4638      	mov	r0, r7
24009e52:	f005 fc5c 	bl	2400f70e <_lv_ll_get_prev>
24009e56:	4604      	mov	r4, r0
        while(i != NULL) {
24009e58:	b950      	cbnz	r0, 24009e70 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
24009e5a:	6a2b      	ldr	r3, [r5, #32]
24009e5c:	b11b      	cbz	r3, 24009e66 <lv_refr_obj_and_children+0x42>
24009e5e:	2201      	movs	r2, #1
24009e60:	4631      	mov	r1, r6
24009e62:	4628      	mov	r0, r5
24009e64:	4798      	blx	r3
        par = lv_obj_get_parent(par);
24009e66:	4628      	mov	r0, r5
24009e68:	462c      	mov	r4, r5
24009e6a:	f7fe f9ff 	bl	2400826c <lv_obj_get_parent>
24009e6e:	e7ea      	b.n	24009e46 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
24009e70:	4631      	mov	r1, r6
24009e72:	4620      	mov	r0, r4
24009e74:	f7ff ff66 	bl	24009d44 <lv_refr_obj>
24009e78:	e7e9      	b.n	24009e4e <lv_refr_obj_and_children+0x2a>
24009e7a:	bf00      	nop
24009e7c:	2402da04 	.word	0x2402da04

24009e80 <lv_refr_area_part>:
{
24009e80:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
24009e82:	4c47      	ldr	r4, [pc, #284]	; (24009fa0 <lv_refr_area_part+0x120>)
{
24009e84:	b09c      	sub	sp, #112	; 0x70
24009e86:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
24009e88:	6820      	ldr	r0, [r4, #0]
24009e8a:	f004 fff3 	bl	2400ee74 <lv_disp_get_buf>
24009e8e:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
24009e90:	6820      	ldr	r0, [r4, #0]
24009e92:	f005 f808 	bl	2400eea6 <lv_disp_is_double_buf>
24009e96:	b1b0      	cbz	r0, 24009ec6 <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
24009e98:	f105 0210 	add.w	r2, r5, #16
24009e9c:	4631      	mov	r1, r6
24009e9e:	a803      	add	r0, sp, #12
24009ea0:	f005 f957 	bl	2400f152 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
24009ea4:	6820      	ldr	r0, [r4, #0]
24009ea6:	f7fc ff9d 	bl	24006de4 <lv_disp_get_scr_act>
24009eaa:	4601      	mov	r1, r0
24009eac:	a803      	add	r0, sp, #12
24009eae:	f7ff ff1b 	bl	24009ce8 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
24009eb2:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
24009eb4:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
24009eb6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
24009eb8:	b955      	cbnz	r5, 24009ed0 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
24009eba:	2800      	cmp	r0, #0
24009ebc:	d13a      	bne.n	24009f34 <lv_refr_area_part+0xb4>
24009ebe:	e00e      	b.n	24009ede <lv_refr_area_part+0x5e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
24009ec0:	69c3      	ldr	r3, [r0, #28]
24009ec2:	b10b      	cbz	r3, 24009ec8 <lv_refr_area_part+0x48>
24009ec4:	4798      	blx	r3
24009ec6:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
24009ec8:	69ab      	ldr	r3, [r5, #24]
24009eca:	2b00      	cmp	r3, #0
24009ecc:	d1f8      	bne.n	24009ec0 <lv_refr_area_part+0x40>
24009ece:	e7e3      	b.n	24009e98 <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
24009ed0:	4629      	mov	r1, r5
24009ed2:	a803      	add	r0, sp, #12
24009ed4:	f7ff ff08 	bl	24009ce8 <lv_refr_get_top_obj>
24009ed8:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
24009eda:	bb5e      	cbnz	r6, 24009f34 <lv_refr_area_part+0xb4>
24009edc:	bb50      	cbnz	r0, 24009f34 <lv_refr_area_part+0xb4>
        if(disp_refr->bg_img) {
24009ede:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
24009ee0:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
24009ee2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
24009ee4:	2d00      	cmp	r5, #0
24009ee6:	d049      	beq.n	24009f7c <lv_refr_area_part+0xfc>
            lv_draw_img_dsc_init(&dsc);
24009ee8:	f001 fe8c 	bl	2400bc04 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
24009eec:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
24009eee:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
24009ef0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
24009ef4:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
24009ef8:	6d18      	ldr	r0, [r3, #80]	; 0x50
24009efa:	f004 fd1d 	bl	2400e938 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
24009efe:	2801      	cmp	r0, #1
24009f00:	d117      	bne.n	24009f32 <lv_refr_area_part+0xb2>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
24009f02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
24009f06:	a805      	add	r0, sp, #20
24009f08:	9b02      	ldr	r3, [sp, #8]
24009f0a:	f3c2 124a 	ubfx	r2, r2, #5, #11
24009f0e:	f3c3 238a 	ubfx	r3, r3, #10, #11
24009f12:	3a01      	subs	r2, #1
24009f14:	3b01      	subs	r3, #1
24009f16:	b212      	sxth	r2, r2
24009f18:	b21b      	sxth	r3, r3
24009f1a:	9200      	str	r2, [sp, #0]
24009f1c:	2200      	movs	r2, #0
24009f1e:	4611      	mov	r1, r2
24009f20:	f005 f8ea 	bl	2400f0f8 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
24009f24:	6822      	ldr	r2, [r4, #0]
24009f26:	ab07      	add	r3, sp, #28
24009f28:	a903      	add	r1, sp, #12
24009f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
24009f2c:	a805      	add	r0, sp, #20
24009f2e:	f001 fe8f 	bl	2400bc50 <lv_draw_img>
            }
24009f32:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
24009f34:	6823      	ldr	r3, [r4, #0]
24009f36:	6c18      	ldr	r0, [r3, #64]	; 0x40
24009f38:	b128      	cbz	r0, 24009f46 <lv_refr_area_part+0xc6>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
24009f3a:	a903      	add	r1, sp, #12
24009f3c:	2d00      	cmp	r5, #0
24009f3e:	bf18      	it	ne
24009f40:	4628      	movne	r0, r5
24009f42:	f7ff ff6f 	bl	24009e24 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
24009f46:	b90e      	cbnz	r6, 24009f4c <lv_refr_area_part+0xcc>
        top_act_scr = disp_refr->act_scr;
24009f48:	6823      	ldr	r3, [r4, #0]
24009f4a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    lv_refr_obj_and_children(top_act_scr, &start_mask);
24009f4c:	a903      	add	r1, sp, #12
24009f4e:	4630      	mov	r0, r6
24009f50:	f7ff ff68 	bl	24009e24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
24009f54:	6820      	ldr	r0, [r4, #0]
24009f56:	f7fc ff5f 	bl	24006e18 <lv_disp_get_layer_top>
24009f5a:	a903      	add	r1, sp, #12
24009f5c:	f7ff ff62 	bl	24009e24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
24009f60:	6820      	ldr	r0, [r4, #0]
24009f62:	f7fc ff60 	bl	24006e26 <lv_disp_get_layer_sys>
24009f66:	a903      	add	r1, sp, #12
24009f68:	f7ff ff5c 	bl	24009e24 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
24009f6c:	6820      	ldr	r0, [r4, #0]
24009f6e:	f004 ffa2 	bl	2400eeb6 <lv_disp_is_true_double_buf>
24009f72:	b908      	cbnz	r0, 24009f78 <lv_refr_area_part+0xf8>
        lv_refr_vdb_flush();
24009f74:	f7ff fe82 	bl	24009c7c <lv_refr_vdb_flush>
}
24009f78:	b01c      	add	sp, #112	; 0x70
24009f7a:	bd70      	pop	{r4, r5, r6, pc}
            lv_draw_rect_dsc_init(&dsc);
24009f7c:	f003 fd72 	bl	2400da64 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
24009f80:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
24009f82:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
24009f84:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
            lv_draw_rect(&start_mask, &start_mask, &dsc);
24009f88:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
24009f8a:	f8ad 201e 	strh.w	r2, [sp, #30]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
24009f8e:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
24009f90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
24009f94:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&start_mask, &start_mask, &dsc);
24009f98:	f003 fd88 	bl	2400daac <lv_draw_rect>
24009f9c:	e7ca      	b.n	24009f34 <lv_refr_area_part+0xb4>
24009f9e:	bf00      	nop
24009fa0:	2402da04 	.word	0x2402da04

24009fa4 <lv_area_copy>:
24009fa4:	3901      	subs	r1, #1
24009fa6:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24009faa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24009fae:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
24009fb2:	4298      	cmp	r0, r3
24009fb4:	d1f9      	bne.n	24009faa <lv_area_copy+0x6>
}
24009fb6:	4770      	bx	lr

24009fb8 <_lv_refr_init>:
}
24009fb8:	4770      	bx	lr

24009fba <_lv_inv_area>:
{
24009fba:	b5f0      	push	{r4, r5, r6, r7, lr}
24009fbc:	460d      	mov	r5, r1
24009fbe:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
24009fc0:	4604      	mov	r4, r0
24009fc2:	b918      	cbnz	r0, 24009fcc <_lv_inv_area+0x12>
24009fc4:	f004 feec 	bl	2400eda0 <lv_disp_get_default>
    if(!disp) return;
24009fc8:	4604      	mov	r4, r0
24009fca:	b130      	cbz	r0, 24009fda <_lv_inv_area+0x20>
    if(area_p == NULL) {
24009fcc:	b93d      	cbnz	r5, 24009fde <_lv_inv_area+0x24>
        disp->inv_p = 0;
24009fce:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
24009fd2:	f365 0309 	bfi	r3, r5, #0, #10
24009fd6:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
}
24009fda:	b005      	add	sp, #20
24009fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
24009fde:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
24009fe0:	4620      	mov	r0, r4
    scr_area.x1 = 0;
24009fe2:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
24009fe4:	f004 fee2 	bl	2400edac <lv_disp_get_hor_res>
24009fe8:	3801      	subs	r0, #1
24009fea:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
24009fee:	4620      	mov	r0, r4
24009ff0:	f004 feee 	bl	2400edd0 <lv_disp_get_ver_res>
24009ff4:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
24009ff6:	466a      	mov	r2, sp
24009ff8:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
24009ffa:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
24009ffe:	a802      	add	r0, sp, #8
2400a000:	f005 f8a7 	bl	2400f152 <_lv_area_intersect>
    if(suc != false) {
2400a004:	2800      	cmp	r0, #0
2400a006:	d0e8      	beq.n	24009fda <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
2400a008:	6923      	ldr	r3, [r4, #16]
2400a00a:	b113      	cbz	r3, 2400a012 <_lv_inv_area+0x58>
2400a00c:	a902      	add	r1, sp, #8
2400a00e:	4620      	mov	r0, r4
2400a010:	4798      	blx	r3
2400a012:	f104 0556 	add.w	r5, r4, #86	; 0x56
{
2400a016:	2600      	movs	r6, #0
2400a018:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
2400a01a:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
2400a01e:	b2b2      	uxth	r2, r6
2400a020:	f3c3 0009 	ubfx	r0, r3, #0, #10
2400a024:	4290      	cmp	r0, r2
2400a026:	d816      	bhi.n	2400a056 <_lv_inv_area+0x9c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
2400a028:	281f      	cmp	r0, #31
2400a02a:	d81e      	bhi.n	2400a06a <_lv_inv_area+0xb0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
2400a02c:	300a      	adds	r0, #10
2400a02e:	a902      	add	r1, sp, #8
2400a030:	f3c0 0009 	ubfx	r0, r0, #0, #10
2400a034:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
2400a038:	3006      	adds	r0, #6
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
2400a03a:	f7ff ffb3 	bl	24009fa4 <lv_area_copy>
        disp->inv_p++;
2400a03e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
2400a042:	2103      	movs	r1, #3
2400a044:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        disp->inv_p++;
2400a046:	1c5a      	adds	r2, r3, #1
2400a048:	f362 0309 	bfi	r3, r2, #0, #10
2400a04c:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
2400a050:	f006 fb5e 	bl	24010710 <lv_task_set_prio>
2400a054:	e7c1      	b.n	24009fda <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
2400a056:	4629      	mov	r1, r5
2400a058:	2200      	movs	r2, #0
2400a05a:	a802      	add	r0, sp, #8
2400a05c:	3601      	adds	r6, #1
2400a05e:	3508      	adds	r5, #8
2400a060:	f005 f975 	bl	2400f34e <_lv_area_is_in>
2400a064:	2800      	cmp	r0, #0
2400a066:	d0d8      	beq.n	2400a01a <_lv_inv_area+0x60>
2400a068:	e7b7      	b.n	24009fda <_lv_inv_area+0x20>
            disp->inv_p = 0;
2400a06a:	f36f 0309 	bfc	r3, #0, #10
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
2400a06e:	4669      	mov	r1, sp
2400a070:	4638      	mov	r0, r7
            disp->inv_p = 0;
2400a072:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
2400a076:	e7e0      	b.n	2400a03a <_lv_inv_area+0x80>

2400a078 <_lv_refr_get_disp_refreshing>:
}
2400a078:	4b01      	ldr	r3, [pc, #4]	; (2400a080 <_lv_refr_get_disp_refreshing+0x8>)
2400a07a:	6818      	ldr	r0, [r3, #0]
2400a07c:	4770      	bx	lr
2400a07e:	bf00      	nop
2400a080:	2402da04 	.word	0x2402da04

2400a084 <_lv_disp_refr_task>:
{
2400a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a088:	4605      	mov	r5, r0
    disp_refr = task->user_data;
2400a08a:	4c9d      	ldr	r4, [pc, #628]	; (2400a300 <_lv_disp_refr_task+0x27c>)
{
2400a08c:	ed2d 8b02 	vpush	{d8}
2400a090:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
2400a092:	f005 f803 	bl	2400f09c <lv_tick_get>
    disp_refr = task->user_data;
2400a096:	68eb      	ldr	r3, [r5, #12]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
2400a098:	2100      	movs	r1, #0
    uint32_t start = lv_tick_get();
2400a09a:	ee08 0a90 	vmov	s17, r0
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
2400a09e:	4628      	mov	r0, r5
    disp_refr = task->user_data;
2400a0a0:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
2400a0a2:	f006 fb35 	bl	24010710 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
2400a0a6:	6823      	ldr	r3, [r4, #0]
2400a0a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
2400a0aa:	2900      	cmp	r1, #0
2400a0ac:	f040 80be 	bne.w	2400a22c <_lv_disp_refr_task+0x1a8>
        disp_refr->inv_p = 0;
2400a0b0:	f8b3 2176 	ldrh.w	r2, [r3, #374]	; 0x176
2400a0b4:	f361 0209 	bfi	r2, r1, #0, #10
2400a0b8:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
}
2400a0bc:	b009      	add	sp, #36	; 0x24
2400a0be:	ecbd 8b02 	vpop	{d8}
2400a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
2400a0c6:	4443      	add	r3, r8
2400a0c8:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
2400a0cc:	2b00      	cmp	r3, #0
2400a0ce:	d06f      	beq.n	2400a1b0 <_lv_disp_refr_task+0x12c>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
2400a0d0:	f108 0801 	add.w	r8, r8, #1
2400a0d4:	6823      	ldr	r3, [r4, #0]
2400a0d6:	f8b3 2176 	ldrh.w	r2, [r3, #374]	; 0x176
2400a0da:	f3c2 0709 	ubfx	r7, r2, #0, #10
2400a0de:	45b8      	cmp	r8, r7
2400a0e0:	d3f1      	bcc.n	2400a0c6 <_lv_disp_refr_task+0x42>
    px_num = 0;
2400a0e2:	4988      	ldr	r1, [pc, #544]	; (2400a304 <_lv_disp_refr_task+0x280>)
2400a0e4:	2000      	movs	r0, #0
2400a0e6:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
2400a0e8:	2f00      	cmp	r7, #0
2400a0ea:	f040 80a3 	bne.w	2400a234 <_lv_disp_refr_task+0x1b0>
    if(disp_refr->inv_p != 0) {
2400a0ee:	4f84      	ldr	r7, [pc, #528]	; (2400a300 <_lv_disp_refr_task+0x27c>)
2400a0f0:	6838      	ldr	r0, [r7, #0]
2400a0f2:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
2400a0f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400a0fa:	2b00      	cmp	r3, #0
2400a0fc:	d04f      	beq.n	2400a19e <_lv_disp_refr_task+0x11a>
        if(lv_disp_is_true_double_buf(disp_refr)) {
2400a0fe:	f004 feda 	bl	2400eeb6 <lv_disp_is_true_double_buf>
2400a102:	b370      	cbz	r0, 2400a162 <_lv_disp_refr_task+0xde>
            if(disp_refr->driver.set_px_cb) {
2400a104:	6838      	ldr	r0, [r7, #0]
2400a106:	6943      	ldr	r3, [r0, #20]
2400a108:	bb5b      	cbnz	r3, 2400a162 <_lv_disp_refr_task+0xde>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
2400a10a:	f004 feb3 	bl	2400ee74 <lv_disp_get_buf>
2400a10e:	4606      	mov	r6, r0
                lv_refr_vdb_flush();
2400a110:	f7ff fdb4 	bl	24009c7c <lv_refr_vdb_flush>
                while(vdb->flushing);
2400a114:	69b3      	ldr	r3, [r6, #24]
2400a116:	2b00      	cmp	r3, #0
2400a118:	d1fc      	bne.n	2400a114 <_lv_disp_refr_task+0x90>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
2400a11a:	6823      	ldr	r3, [r4, #0]
2400a11c:	f9b3 0000 	ldrsh.w	r0, [r3]
2400a120:	0040      	lsls	r0, r0, #1
2400a122:	f005 fddf 	bl	2400fce4 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
2400a126:	68b3      	ldr	r3, [r6, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
2400a128:	f8d6 a000 	ldr.w	sl, [r6]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
2400a12c:	4605      	mov	r5, r0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
2400a12e:	6838      	ldr	r0, [r7, #0]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
2400a130:	459a      	cmp	sl, r3
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
2400a132:	9302      	str	r3, [sp, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
2400a134:	bf08      	it	eq
2400a136:	f8d6 a004 	ldreq.w	sl, [r6, #4]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
2400a13a:	f004 fe37 	bl	2400edac <lv_disp_get_hor_res>
                            start_offs += hres * sizeof(lv_color_t);
2400a13e:	0043      	lsls	r3, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
2400a140:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
2400a142:	2600      	movs	r6, #0
                            start_offs += hres * sizeof(lv_color_t);
2400a144:	9301      	str	r3, [sp, #4]
                for(a = 0; a < disp_refr->inv_p; a++) {
2400a146:	4b6e      	ldr	r3, [pc, #440]	; (2400a300 <_lv_disp_refr_task+0x27c>)
2400a148:	681a      	ldr	r2, [r3, #0]
2400a14a:	b2b0      	uxth	r0, r6
2400a14c:	f8b2 1176 	ldrh.w	r1, [r2, #374]	; 0x176
2400a150:	f3c1 0109 	ubfx	r1, r1, #0, #10
2400a154:	4281      	cmp	r1, r0
2400a156:	f200 8185 	bhi.w	2400a464 <_lv_disp_refr_task+0x3e0>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
2400a15a:	b115      	cbz	r5, 2400a162 <_lv_disp_refr_task+0xde>
2400a15c:	4628      	mov	r0, r5
2400a15e:	f005 fc59 	bl	2400fa14 <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
2400a162:	6820      	ldr	r0, [r4, #0]
2400a164:	f44f 7180 	mov.w	r1, #256	; 0x100
2400a168:	3056      	adds	r0, #86	; 0x56
2400a16a:	f005 fe49 	bl	2400fe00 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
2400a16e:	6820      	ldr	r0, [r4, #0]
2400a170:	2120      	movs	r1, #32
2400a172:	f500 70ab 	add.w	r0, r0, #342	; 0x156
2400a176:	f005 fe43 	bl	2400fe00 <_lv_memset_00>
        disp_refr->inv_p = 0;
2400a17a:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
2400a17c:	ee18 0a90 	vmov	r0, s17
        disp_refr->inv_p = 0;
2400a180:	f8b3 2176 	ldrh.w	r2, [r3, #374]	; 0x176
2400a184:	f36f 0209 	bfc	r2, #0, #10
2400a188:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
        elaps = lv_tick_elaps(start);
2400a18c:	f004 ff94 	bl	2400f0b8 <lv_tick_elaps>
2400a190:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
2400a192:	6820      	ldr	r0, [r4, #0]
2400a194:	6983      	ldr	r3, [r0, #24]
2400a196:	b113      	cbz	r3, 2400a19e <_lv_disp_refr_task+0x11a>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
2400a198:	4a5a      	ldr	r2, [pc, #360]	; (2400a304 <_lv_disp_refr_task+0x280>)
2400a19a:	6812      	ldr	r2, [r2, #0]
2400a19c:	4798      	blx	r3
    _lv_mem_buf_free_all();
2400a19e:	f005 fc61 	bl	2400fa64 <_lv_mem_buf_free_all>
}
2400a1a2:	b009      	add	sp, #36	; 0x24
2400a1a4:	ecbd 8b02 	vpop	{d8}
2400a1a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_font_clean_up_fmt_txt();
2400a1ac:	f004 bdc4 	b.w	2400ed38 <_lv_font_clean_up_fmt_txt>
2400a1b0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
2400a1b4:	4699      	mov	r9, r3
2400a1b6:	3756      	adds	r7, #86	; 0x56
2400a1b8:	6820      	ldr	r0, [r4, #0]
2400a1ba:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
2400a1be:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400a1c2:	4599      	cmp	r9, r3
2400a1c4:	d284      	bcs.n	2400a0d0 <_lv_disp_refr_task+0x4c>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
2400a1c6:	eb00 0309 	add.w	r3, r0, r9
2400a1ca:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
2400a1ce:	bb53      	cbnz	r3, 2400a226 <_lv_disp_refr_task+0x1a2>
2400a1d0:	45c8      	cmp	r8, r9
2400a1d2:	d028      	beq.n	2400a226 <_lv_disp_refr_task+0x1a2>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
2400a1d4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
2400a1d8:	f10a 0a56 	add.w	sl, sl, #86	; 0x56
2400a1dc:	eb00 010a 	add.w	r1, r0, sl
2400a1e0:	4438      	add	r0, r7
2400a1e2:	f005 f897 	bl	2400f314 <_lv_area_is_on>
2400a1e6:	b1f0      	cbz	r0, 2400a226 <_lv_disp_refr_task+0x1a2>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
2400a1e8:	6821      	ldr	r1, [r4, #0]
2400a1ea:	a806      	add	r0, sp, #24
2400a1ec:	eb01 020a 	add.w	r2, r1, sl
2400a1f0:	4439      	add	r1, r7
2400a1f2:	f004 ffd8 	bl	2400f1a6 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
2400a1f6:	a806      	add	r0, sp, #24
2400a1f8:	f004 ff9d 	bl	2400f136 <lv_area_get_size>
2400a1fc:	4683      	mov	fp, r0
2400a1fe:	6820      	ldr	r0, [r4, #0]
2400a200:	4438      	add	r0, r7
2400a202:	f004 ff98 	bl	2400f136 <lv_area_get_size>
2400a206:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
2400a208:	6820      	ldr	r0, [r4, #0]
2400a20a:	4450      	add	r0, sl
2400a20c:	f004 ff93 	bl	2400f136 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
2400a210:	4405      	add	r5, r0
2400a212:	45ab      	cmp	fp, r5
2400a214:	d207      	bcs.n	2400a226 <_lv_disp_refr_task+0x1a2>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
2400a216:	6825      	ldr	r5, [r4, #0]
2400a218:	a906      	add	r1, sp, #24
2400a21a:	19e8      	adds	r0, r5, r7
                disp_refr->inv_area_joined[join_from] = 1;
2400a21c:	444d      	add	r5, r9
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
2400a21e:	f7ff fec1 	bl	24009fa4 <lv_area_copy>
                disp_refr->inv_area_joined[join_from] = 1;
2400a222:	f885 6156 	strb.w	r6, [r5, #342]	; 0x156
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
2400a226:	f109 0901 	add.w	r9, r9, #1
2400a22a:	e7c5      	b.n	2400a1b8 <_lv_disp_refr_task+0x134>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
2400a22c:	f04f 0800 	mov.w	r8, #0
                disp_refr->inv_area_joined[join_from] = 1;
2400a230:	2601      	movs	r6, #1
2400a232:	e74f      	b.n	2400a0d4 <_lv_disp_refr_task+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
2400a234:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
2400a236:	f503 72ab 	add.w	r2, r3, #342	; 0x156
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
2400a23a:	1c79      	adds	r1, r7, #1
2400a23c:	d15a      	bne.n	2400a2f4 <_lv_disp_refr_task+0x270>
    int32_t last_i = 0;
2400a23e:	2700      	movs	r7, #0
    disp_refr->driver.buffer->last_area = 0;
2400a240:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
2400a242:	f04f 0b00 	mov.w	fp, #0
2400a246:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2400a300 <_lv_disp_refr_task+0x27c>
    disp_refr->driver.buffer->last_area = 0;
2400a24a:	f893 2020 	ldrb.w	r2, [r3, #32]
2400a24e:	f36f 0200 	bfc	r2, #0, #1
2400a252:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
2400a256:	f893 2020 	ldrb.w	r2, [r3, #32]
2400a25a:	f36f 0241 	bfc	r2, #1, #1
2400a25e:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
2400a262:	f8d9 5000 	ldr.w	r5, [r9]
2400a266:	f8b5 3176 	ldrh.w	r3, [r5, #374]	; 0x176
2400a26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400a26e:	459b      	cmp	fp, r3
2400a270:	f6bf af3d 	bge.w	2400a0ee <_lv_disp_refr_task+0x6a>
        if(disp_refr->inv_area_joined[i] == 0) {
2400a274:	eb05 030b 	add.w	r3, r5, fp
2400a278:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
2400a27c:	2b00      	cmp	r3, #0
2400a27e:	f040 809f 	bne.w	2400a3c0 <_lv_disp_refr_task+0x33c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
2400a282:	45bb      	cmp	fp, r7
2400a284:	686b      	ldr	r3, [r5, #4]
2400a286:	d105      	bne.n	2400a294 <_lv_disp_refr_task+0x210>
2400a288:	f893 2020 	ldrb.w	r2, [r3, #32]
2400a28c:	f042 0201 	orr.w	r2, r2, #1
2400a290:	f883 2020 	strb.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
2400a294:	f893 2020 	ldrb.w	r2, [r3, #32]
2400a298:	ea4f 08cb 	mov.w	r8, fp, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
2400a29c:	4628      	mov	r0, r5
            disp_refr->driver.buffer->last_part = 0;
2400a29e:	f36f 0241 	bfc	r2, #1, #1
2400a2a2:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
2400a2a6:	f108 0356 	add.w	r3, r8, #86	; 0x56
2400a2aa:	9302      	str	r3, [sp, #8]
2400a2ac:	18eb      	adds	r3, r5, r3
2400a2ae:	ee08 3a10 	vmov	s16, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
2400a2b2:	f004 fe00 	bl	2400eeb6 <lv_disp_is_true_double_buf>
2400a2b6:	b338      	cbz	r0, 2400a308 <_lv_disp_refr_task+0x284>
        vdb->area.x1        = 0;
2400a2b8:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
2400a2ba:	6820      	ldr	r0, [r4, #0]
2400a2bc:	f004 fdda 	bl	2400ee74 <lv_disp_get_buf>
2400a2c0:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
2400a2c2:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
2400a2c4:	6820      	ldr	r0, [r4, #0]
2400a2c6:	f004 fd71 	bl	2400edac <lv_disp_get_hor_res>
2400a2ca:	3801      	subs	r0, #1
        vdb->area.y1        = 0;
2400a2cc:	826e      	strh	r6, [r5, #18]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
2400a2ce:	82a8      	strh	r0, [r5, #20]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
2400a2d0:	6820      	ldr	r0, [r4, #0]
2400a2d2:	f004 fd7d 	bl	2400edd0 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
2400a2d6:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
2400a2d8:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
2400a2da:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
2400a2dc:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
2400a2de:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
2400a2e2:	ee18 0a10 	vmov	r0, s16
            disp_refr->driver.buffer->last_part = 1;
2400a2e6:	f043 0302 	orr.w	r3, r3, #2
2400a2ea:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
2400a2ee:	f7ff fdc7 	bl	24009e80 <lv_refr_area_part>
2400a2f2:	e05b      	b.n	2400a3ac <_lv_disp_refr_task+0x328>
        if(disp_refr->inv_area_joined[i] == 0) {
2400a2f4:	5dd1      	ldrb	r1, [r2, r7]
2400a2f6:	2900      	cmp	r1, #0
2400a2f8:	d0a2      	beq.n	2400a240 <_lv_disp_refr_task+0x1bc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
2400a2fa:	3f01      	subs	r7, #1
2400a2fc:	e79d      	b.n	2400a23a <_lv_disp_refr_task+0x1b6>
2400a2fe:	bf00      	nop
2400a300:	2402da04 	.word	0x2402da04
2400a304:	2402da08 	.word	0x2402da08
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
2400a308:	4445      	add	r5, r8
2400a30a:	6820      	ldr	r0, [r4, #0]
2400a30c:	f004 fdb2 	bl	2400ee74 <lv_disp_get_buf>
2400a310:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400a312:	f8b5 805a 	ldrh.w	r8, [r5, #90]	; 0x5a
2400a316:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
2400a31a:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400a31e:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
2400a322:	6820      	ldr	r0, [r4, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400a324:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400a328:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
2400a32c:	f103 0a01 	add.w	sl, r3, #1
2400a330:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400a332:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400a336:	ebaa 0a02 	sub.w	sl, sl, r2
2400a33a:	f004 fd49 	bl	2400edd0 <lv_disp_get_ver_res>
        lv_coord_t y2 =
2400a33e:	9b01      	ldr	r3, [sp, #4]
2400a340:	fa0f fa8a 	sxth.w	sl, sl
2400a344:	4283      	cmp	r3, r0
2400a346:	db3e      	blt.n	2400a3c6 <_lv_disp_refr_task+0x342>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
2400a348:	6820      	ldr	r0, [r4, #0]
2400a34a:	f004 fd41 	bl	2400edd0 <lv_disp_get_ver_res>
2400a34e:	3801      	subs	r0, #1
        lv_coord_t y2 =
2400a350:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
2400a352:	68f2      	ldr	r2, [r6, #12]
2400a354:	fbb2 f2f8 	udiv	r2, r2, r8
2400a358:	4552      	cmp	r2, sl
2400a35a:	bfa8      	it	ge
2400a35c:	4652      	movge	r2, sl
2400a35e:	9201      	str	r2, [sp, #4]
        if(disp_refr->driver.rounder_cb) {
2400a360:	f8d9 2000 	ldr.w	r2, [r9]
2400a364:	6912      	ldr	r2, [r2, #16]
2400a366:	2a00      	cmp	r2, #0
2400a368:	d034      	beq.n	2400a3d4 <_lv_disp_refr_task+0x350>
            tmp.x1 = 0;
2400a36a:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
2400a36c:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
            tmp.x1 = 0;
2400a370:	9206      	str	r2, [sp, #24]
            tmp.x2 = 0;
2400a372:	f8ad 201c 	strh.w	r2, [sp, #28]
            lv_coord_t h_tmp = max_row;
2400a376:	46c2      	mov	sl, r8
2400a378:	f108 38ff 	add.w	r8, r8, #4294967295
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
2400a37c:	f8d9 0000 	ldr.w	r0, [r9]
2400a380:	a906      	add	r1, sp, #24
2400a382:	fa0f f888 	sxth.w	r8, r8
2400a386:	9303      	str	r3, [sp, #12]
2400a388:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
2400a38a:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
2400a38e:	4790      	blx	r2
2400a390:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
2400a394:	f8bd 201a 	ldrh.w	r2, [sp, #26]
2400a398:	3101      	adds	r1, #1
                if(lv_area_get_height(&tmp) <= max_row) break;
2400a39a:	9b01      	ldr	r3, [sp, #4]
2400a39c:	1a8a      	subs	r2, r1, r2
2400a39e:	b212      	sxth	r2, r2
2400a3a0:	4293      	cmp	r3, r2
2400a3a2:	9b03      	ldr	r3, [sp, #12]
2400a3a4:	da12      	bge.n	2400a3cc <_lv_disp_refr_task+0x348>
            } while(h_tmp > 0);
2400a3a6:	f1b8 0f00 	cmp.w	r8, #0
2400a3aa:	dce4      	bgt.n	2400a376 <_lv_disp_refr_task+0x2f2>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
2400a3ac:	9b02      	ldr	r3, [sp, #8]
2400a3ae:	f8d9 0000 	ldr.w	r0, [r9]
2400a3b2:	4418      	add	r0, r3
2400a3b4:	f004 febf 	bl	2400f136 <lv_area_get_size>
2400a3b8:	4a45      	ldr	r2, [pc, #276]	; (2400a4d0 <_lv_disp_refr_task+0x44c>)
2400a3ba:	6813      	ldr	r3, [r2, #0]
2400a3bc:	4418      	add	r0, r3
2400a3be:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
2400a3c0:	f10b 0b01 	add.w	fp, fp, #1
2400a3c4:	e74d      	b.n	2400a262 <_lv_disp_refr_task+0x1de>
        lv_coord_t y2 =
2400a3c6:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
2400a3ca:	e7c2      	b.n	2400a352 <_lv_disp_refr_task+0x2ce>
            if(h_tmp <= 0) {
2400a3cc:	f1ba 0f00 	cmp.w	sl, #0
2400a3d0:	ddec      	ble.n	2400a3ac <_lv_disp_refr_task+0x328>
                max_row = tmp.y2 + 1;
2400a3d2:	9101      	str	r1, [sp, #4]
            vdb->area.y2 = row + max_row - 1;
2400a3d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        lv_coord_t row_last = 0;
2400a3d8:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
2400a3dc:	f9b5 0058 	ldrsh.w	r0, [r5, #88]	; 0x58
2400a3e0:	1e51      	subs	r1, r2, #1
2400a3e2:	9103      	str	r1, [sp, #12]
2400a3e4:	9901      	ldr	r1, [sp, #4]
2400a3e6:	eb00 0c01 	add.w	ip, r0, r1
2400a3ea:	f10c 3cff 	add.w	ip, ip, #4294967295
2400a3ee:	459c      	cmp	ip, r3
2400a3f0:	dd0c      	ble.n	2400a40c <_lv_disp_refr_task+0x388>
        if(y2 != row_last) {
2400a3f2:	4543      	cmp	r3, r8
2400a3f4:	d0da      	beq.n	2400a3ac <_lv_disp_refr_task+0x328>
            vdb->area.x1 = area_p->x1;
2400a3f6:	f9b5 1056 	ldrsh.w	r1, [r5, #86]	; 0x56
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
2400a3fa:	6822      	ldr	r2, [r4, #0]
            vdb->area.x1 = area_p->x1;
2400a3fc:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
2400a3fe:	f9b5 105a 	ldrsh.w	r1, [r5, #90]	; 0x5a
            disp_refr->driver.buffer->last_part = 1;
2400a402:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
2400a404:	82b1      	strh	r1, [r6, #20]
            vdb->area.y1 = row;
2400a406:	8270      	strh	r0, [r6, #18]
            vdb->area.y2 = y2;
2400a408:	82f3      	strh	r3, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
2400a40a:	e768      	b.n	2400a2de <_lv_disp_refr_task+0x25a>
            vdb->area.x1 = area_p->x1;
2400a40c:	f9b5 c056 	ldrsh.w	ip, [r5, #86]	; 0x56
2400a410:	fa1f fa80 	uxth.w	sl, r0
2400a414:	9903      	ldr	r1, [sp, #12]
2400a416:	4698      	mov	r8, r3
2400a418:	f8a6 c010 	strh.w	ip, [r6, #16]
            vdb->area.x2 = area_p->x2;
2400a41c:	f9b5 c05a 	ldrsh.w	ip, [r5, #90]	; 0x5a
            vdb->area.y1 = row;
2400a420:	8270      	strh	r0, [r6, #18]
2400a422:	fa11 f080 	uxtah	r0, r1, r0
            vdb->area.x2 = area_p->x2;
2400a426:	f8a6 c014 	strh.w	ip, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
2400a42a:	b200      	sxth	r0, r0
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
2400a42c:	4283      	cmp	r3, r0
2400a42e:	bfa8      	it	ge
2400a430:	4680      	movge	r8, r0
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
2400a432:	4283      	cmp	r3, r0
2400a434:	f8a6 8016 	strh.w	r8, [r6, #22]
2400a438:	dc08      	bgt.n	2400a44c <_lv_disp_refr_task+0x3c8>
2400a43a:	f8d9 0000 	ldr.w	r0, [r9]
2400a43e:	6841      	ldr	r1, [r0, #4]
2400a440:	f891 0020 	ldrb.w	r0, [r1, #32]
2400a444:	f040 0002 	orr.w	r0, r0, #2
2400a448:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
2400a44c:	ee18 0a10 	vmov	r0, s16
2400a450:	e9cd 3204 	strd	r3, r2, [sp, #16]
2400a454:	f7ff fd14 	bl	24009e80 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
2400a458:	9a05      	ldr	r2, [sp, #20]
2400a45a:	9b04      	ldr	r3, [sp, #16]
2400a45c:	4492      	add	sl, r2
2400a45e:	fa0f f08a 	sxth.w	r0, sl
2400a462:	e7bf      	b.n	2400a3e4 <_lv_disp_refr_task+0x360>
                    if(disp_refr->inv_area_joined[a] == 0) {
2400a464:	1991      	adds	r1, r2, r6
2400a466:	f891 1156 	ldrb.w	r1, [r1, #342]	; 0x156
2400a46a:	b109      	cbz	r1, 2400a470 <_lv_disp_refr_task+0x3ec>
                for(a = 0; a < disp_refr->inv_p; a++) {
2400a46c:	3601      	adds	r6, #1
2400a46e:	e66b      	b.n	2400a148 <_lv_disp_refr_task+0xc4>
                        uint32_t start_offs =
2400a470:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
2400a474:	f9b2 1056 	ldrsh.w	r1, [r2, #86]	; 0x56
2400a478:	f9b2 7058 	ldrsh.w	r7, [r2, #88]	; 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400a47c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
2400a480:	fb09 1807 	mla	r8, r9, r7, r1
2400a484:	3201      	adds	r2, #1
2400a486:	eb0a 0b48 	add.w	fp, sl, r8, lsl #1
2400a48a:	1a52      	subs	r2, r2, r1
2400a48c:	9902      	ldr	r1, [sp, #8]
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
2400a48e:	b212      	sxth	r2, r2
2400a490:	eb01 0848 	add.w	r8, r1, r8, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
2400a494:	f106 010a 	add.w	r1, r6, #10
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
2400a498:	0052      	lsls	r2, r2, #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
2400a49a:	00c9      	lsls	r1, r1, #3
2400a49c:	9103      	str	r1, [sp, #12]
2400a49e:	6819      	ldr	r1, [r3, #0]
2400a4a0:	9803      	ldr	r0, [sp, #12]
2400a4a2:	4401      	add	r1, r0
2400a4a4:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
2400a4a8:	42b9      	cmp	r1, r7
2400a4aa:	dbdf      	blt.n	2400a46c <_lv_disp_refr_task+0x3e8>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
2400a4ac:	4659      	mov	r1, fp
2400a4ae:	4628      	mov	r0, r5
2400a4b0:	9204      	str	r2, [sp, #16]
2400a4b2:	f005 fafb 	bl	2400faac <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
2400a4b6:	9a04      	ldr	r2, [sp, #16]
2400a4b8:	4640      	mov	r0, r8
2400a4ba:	4629      	mov	r1, r5
2400a4bc:	3701      	adds	r7, #1
2400a4be:	f005 faf5 	bl	2400faac <_lv_memcpy>
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
2400a4c2:	9b01      	ldr	r3, [sp, #4]
2400a4c4:	b23f      	sxth	r7, r7
2400a4c6:	9a04      	ldr	r2, [sp, #16]
2400a4c8:	449b      	add	fp, r3
2400a4ca:	4498      	add	r8, r3
2400a4cc:	4b01      	ldr	r3, [pc, #4]	; (2400a4d4 <_lv_disp_refr_task+0x450>)
2400a4ce:	e7e6      	b.n	2400a49e <_lv_disp_refr_task+0x41a>
2400a4d0:	2402da08 	.word	0x2402da08
2400a4d4:	2402da04 	.word	0x2402da04

2400a4d8 <lv_style_list_get_style>:
    if(list->has_trans && list->skip_trans) id++;
2400a4d8:	8883      	ldrh	r3, [r0, #4]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
2400a4da:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
2400a4dc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
2400a4e0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
2400a4e4:	bf04      	itt	eq
2400a4e6:	3101      	addeq	r1, #1
2400a4e8:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
2400a4ea:	f012 033f 	ands.w	r3, r2, #63	; 0x3f
2400a4ee:	d005      	beq.n	2400a4fc <lv_style_list_get_style+0x24>
2400a4f0:	428b      	cmp	r3, r1
2400a4f2:	d903      	bls.n	2400a4fc <lv_style_list_get_style+0x24>
    return list->style_list[id];
2400a4f4:	6803      	ldr	r3, [r0, #0]
2400a4f6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
2400a4fa:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
2400a4fc:	2000      	movs	r0, #0
}
2400a4fe:	4770      	bx	lr

2400a500 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
2400a500:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
2400a504:	280b      	cmp	r0, #11
2400a506:	d904      	bls.n	2400a512 <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
2400a508:	280e      	cmp	r0, #14
2400a50a:	bf34      	ite	cc
2400a50c:	2003      	movcc	r0, #3
2400a50e:	2006      	movcs	r0, #6
2400a510:	4770      	bx	lr
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
2400a512:	2004      	movs	r0, #4
    return size;
}
2400a514:	4770      	bx	lr

2400a516 <style_resize>:
{
2400a516:	b510      	push	{r4, lr}
2400a518:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
2400a51a:	6800      	ldr	r0, [r0, #0]
2400a51c:	f005 fbb6 	bl	2400fc8c <lv_mem_realloc>
2400a520:	6020      	str	r0, [r4, #0]
}
2400a522:	bd10      	pop	{r4, pc}

2400a524 <get_style_prop.isra.0>:
    prop_p[1] = style->map[idx + 1];
2400a524:	1843      	adds	r3, r0, r1
2400a526:	5c40      	ldrb	r0, [r0, r1]
2400a528:	785a      	ldrb	r2, [r3, #1]
}
2400a52a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
2400a52e:	4770      	bx	lr

2400a530 <get_style_prop_attr.isra.0>:
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
2400a530:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
2400a532:	f7ff fff7 	bl	2400a524 <get_style_prop.isra.0>
}
2400a536:	f3c0 2007 	ubfx	r0, r0, #8, #8
2400a53a:	bd08      	pop	{r3, pc}

2400a53c <get_property_index>:
{
2400a53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(style->map == NULL) return -1;
2400a540:	6806      	ldr	r6, [r0, #0]
2400a542:	b386      	cbz	r6, 2400a5a6 <get_property_index+0x6a>
    uint8_t id_to_find = prop & 0xFF;
2400a544:	fa5f f881 	uxtb.w	r8, r1
    int16_t id_guess = -1;
2400a548:	f04f 35ff 	mov.w	r5, #4294967295
    attr = (prop >> 8) & 0xFF;
2400a54c:	ea4f 2911 	mov.w	r9, r1, lsr #8
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
2400a550:	f3c1 2106 	ubfx	r1, r1, #8, #7
    size_t i = 0;
2400a554:	f04f 0b00 	mov.w	fp, #0
    int16_t weight = -1;
2400a558:	462f      	mov	r7, r5
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
2400a55a:	43cc      	mvns	r4, r1
    return get_style_prop(style, idx) & 0xFF;
2400a55c:	4659      	mov	r1, fp
2400a55e:	4630      	mov	r0, r6
2400a560:	f7ff ffe0 	bl	2400a524 <get_style_prop.isra.0>
2400a564:	fa5f fa80 	uxtb.w	sl, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
2400a568:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
2400a56c:	d101      	bne.n	2400a572 <get_property_index+0x36>
    return id_guess;
2400a56e:	4628      	mov	r0, r5
2400a570:	e009      	b.n	2400a586 <get_property_index+0x4a>
        if(prop_id == id_to_find) {
2400a572:	45d0      	cmp	r8, sl
2400a574:	d112      	bne.n	2400a59c <get_property_index+0x60>
            attr_i = get_style_prop_attr(style, i);
2400a576:	4630      	mov	r0, r6
2400a578:	f7ff ffda 	bl	2400a530 <get_style_prop_attr.isra.0>
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
2400a57c:	ea89 0300 	eor.w	r3, r9, r0
2400a580:	065b      	lsls	r3, r3, #25
2400a582:	d102      	bne.n	2400a58a <get_property_index+0x4e>
                return i;
2400a584:	4658      	mov	r0, fp
}
2400a586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
2400a58a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2400a58e:	4204      	tst	r4, r0
2400a590:	d104      	bne.n	2400a59c <get_property_index+0x60>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
2400a592:	42b8      	cmp	r0, r7
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
2400a594:	bfc4      	itt	gt
2400a596:	b207      	sxthgt	r7, r0
                    id_guess = i;
2400a598:	fa0f f58b 	sxthgt.w	r5, fp
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
2400a59c:	4650      	mov	r0, sl
2400a59e:	f7ff ffaf 	bl	2400a500 <get_prop_size>
2400a5a2:	4483      	add	fp, r0
2400a5a4:	e7da      	b.n	2400a55c <get_property_index+0x20>
    if(style->map == NULL) return -1;
2400a5a6:	f04f 30ff 	mov.w	r0, #4294967295
2400a5aa:	e7ec      	b.n	2400a586 <get_property_index+0x4a>

2400a5ac <_lv_memcpy_small.isra.0>:
2400a5ac:	3901      	subs	r1, #1
2400a5ae:	4402      	add	r2, r0
        *d8 = *s8;
2400a5b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400a5b4:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
2400a5b8:	4290      	cmp	r0, r2
2400a5ba:	d1f9      	bne.n	2400a5b0 <_lv_memcpy_small.isra.0+0x4>
        s8++;
        len--;
    }

    return dst;
}
2400a5bc:	4770      	bx	lr

2400a5be <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
2400a5be:	2104      	movs	r1, #4
2400a5c0:	f005 bc1e 	b.w	2400fe00 <_lv_memset_00>

2400a5c4 <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
2400a5c4:	2108      	movs	r1, #8
2400a5c6:	f005 bc1b 	b.w	2400fe00 <_lv_memset_00>

2400a5ca <_lv_style_list_remove_style>:
{
2400a5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400a5cc:	4604      	mov	r4, r0
    if(list->style_cnt == 0) return;
2400a5ce:	7900      	ldrb	r0, [r0, #4]
{
2400a5d0:	460e      	mov	r6, r1
    if(list->style_cnt == 0) return;
2400a5d2:	f010 013f 	ands.w	r1, r0, #63	; 0x3f
2400a5d6:	d004      	beq.n	2400a5e2 <_lv_style_list_remove_style+0x18>
    for(i = 0; i < list->style_cnt; i++) {
2400a5d8:	460b      	mov	r3, r1
2400a5da:	2200      	movs	r2, #0
2400a5dc:	b2d0      	uxtb	r0, r2
2400a5de:	4283      	cmp	r3, r0
2400a5e0:	d800      	bhi.n	2400a5e4 <_lv_style_list_remove_style+0x1a>
}
2400a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
2400a5e4:	6820      	ldr	r0, [r4, #0]
2400a5e6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
2400a5ea:	3201      	adds	r2, #1
2400a5ec:	42b5      	cmp	r5, r6
2400a5ee:	d1f5      	bne.n	2400a5dc <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
2400a5f0:	2901      	cmp	r1, #1
2400a5f2:	d108      	bne.n	2400a606 <_lv_style_list_remove_style+0x3c>
        lv_mem_free(list->style_list);
2400a5f4:	f005 f9f2 	bl	2400f9dc <lv_mem_free>
        list->style_list = NULL;
2400a5f8:	2300      	movs	r3, #0
2400a5fa:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
2400a5fc:	7923      	ldrb	r3, [r4, #4]
2400a5fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
2400a602:	7123      	strb	r3, [r4, #4]
        return;
2400a604:	e7ed      	b.n	2400a5e2 <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
2400a606:	1e58      	subs	r0, r3, #1
2400a608:	0080      	lsls	r0, r0, #2
2400a60a:	f005 f9b7 	bl	2400f97c <lv_mem_alloc>
    if(new_classes == NULL) {
2400a60e:	4605      	mov	r5, r0
2400a610:	2800      	cmp	r0, #0
2400a612:	d0e6      	beq.n	2400a5e2 <_lv_style_list_remove_style+0x18>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
2400a614:	7921      	ldrb	r1, [r4, #4]
        if(list->style_list[i] == style) continue;
2400a616:	2300      	movs	r3, #0
2400a618:	6820      	ldr	r0, [r4, #0]
    for(i = 0, j = 0; i < list->style_cnt; i++) {
2400a61a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2400a61e:	461a      	mov	r2, r3
2400a620:	b2df      	uxtb	r7, r3
2400a622:	42b9      	cmp	r1, r7
2400a624:	d809      	bhi.n	2400a63a <_lv_style_list_remove_style+0x70>
    lv_mem_free(list->style_list);
2400a626:	f005 f9d9 	bl	2400f9dc <lv_mem_free>
    list->style_cnt--;
2400a62a:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
2400a62c:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
2400a62e:	f103 023f 	add.w	r2, r3, #63	; 0x3f
2400a632:	f362 0305 	bfi	r3, r2, #0, #6
2400a636:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
2400a638:	e7d3      	b.n	2400a5e2 <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
2400a63a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
2400a63e:	3301      	adds	r3, #1
2400a640:	42b7      	cmp	r7, r6
        new_classes[j] = list->style_list[i];
2400a642:	bf1e      	ittt	ne
2400a644:	f845 7022 	strne.w	r7, [r5, r2, lsl #2]
        j++;
2400a648:	3201      	addne	r2, #1
2400a64a:	b2d2      	uxtbne	r2, r2
    for(i = 0, j = 0; i < list->style_cnt; i++) {
2400a64c:	e7e8      	b.n	2400a620 <_lv_style_list_remove_style+0x56>

2400a64e <_lv_style_list_add_style>:
{
2400a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a652:	4688      	mov	r8, r1
    if(list == NULL) return;
2400a654:	4604      	mov	r4, r0
2400a656:	b388      	cbz	r0, 2400a6bc <_lv_style_list_add_style+0x6e>
    _lv_style_list_remove_style(list, style);
2400a658:	f7ff ffb7 	bl	2400a5ca <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
2400a65c:	7921      	ldrb	r1, [r4, #4]
2400a65e:	068a      	lsls	r2, r1, #26
2400a660:	d12e      	bne.n	2400a6c0 <_lv_style_list_add_style+0x72>
2400a662:	2004      	movs	r0, #4
2400a664:	f005 f98a 	bl	2400f97c <lv_mem_alloc>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
2400a668:	4605      	mov	r5, r0
    if(new_classes == NULL) {
2400a66a:	b338      	cbz	r0, 2400a6bc <_lv_style_list_add_style+0x6e>
    if(list->has_trans) first_style++;
2400a66c:	7926      	ldrb	r6, [r4, #4]
    uint8_t first_style = 0;
2400a66e:	09f7      	lsrs	r7, r6, #7
    if(list->has_local) first_style++;
2400a670:	0673      	lsls	r3, r6, #25
    for(i = list->style_cnt; i > first_style; i--) {
2400a672:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    if(list->has_local) first_style++;
2400a676:	bf48      	it	mi
2400a678:	3701      	addmi	r7, #1
        new_classes[i] = new_classes[i - 1];
2400a67a:	f106 4180 	add.w	r1, r6, #1073741824	; 0x40000000
2400a67e:	1bf2      	subs	r2, r6, r7
2400a680:	42be      	cmp	r6, r7
2400a682:	f101 31ff 	add.w	r1, r1, #4294967295
2400a686:	b2d2      	uxtb	r2, r2
2400a688:	f1c2 0001 	rsb	r0, r2, #1
2400a68c:	ea4f 0282 	mov.w	r2, r2, lsl #2
2400a690:	bf38      	it	cc
2400a692:	2200      	movcc	r2, #0
2400a694:	ea4f 0080 	mov.w	r0, r0, lsl #2
2400a698:	bf38      	it	cc
2400a69a:	2004      	movcc	r0, #4
2400a69c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2400a6a0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    list->style_cnt++;
2400a6a4:	3601      	adds	r6, #1
        new_classes[i] = new_classes[i - 1];
2400a6a6:	4429      	add	r1, r5
2400a6a8:	4428      	add	r0, r5
2400a6aa:	f00f ff01 	bl	2401a4b0 <memmove>
    list->style_cnt++;
2400a6ae:	7923      	ldrb	r3, [r4, #4]
    new_classes[first_style] = style;
2400a6b0:	f845 8027 	str.w	r8, [r5, r7, lsl #2]
    list->style_cnt++;
2400a6b4:	f366 0305 	bfi	r3, r6, #0, #6
    list->style_list = new_classes;
2400a6b8:	6025      	str	r5, [r4, #0]
    list->style_cnt++;
2400a6ba:	7123      	strb	r3, [r4, #4]
}
2400a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
2400a6c0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2400a6c4:	6820      	ldr	r0, [r4, #0]
2400a6c6:	3101      	adds	r1, #1
2400a6c8:	0089      	lsls	r1, r1, #2
2400a6ca:	f005 fadf 	bl	2400fc8c <lv_mem_realloc>
2400a6ce:	e7cb      	b.n	2400a668 <_lv_style_list_add_style+0x1a>

2400a6d0 <get_alloc_local_style>:
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
2400a6d0:	7901      	ldrb	r1, [r0, #4]
{
2400a6d2:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
2400a6d4:	064b      	lsls	r3, r1, #25
{
2400a6d6:	4604      	mov	r4, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
2400a6d8:	d504      	bpl.n	2400a6e4 <get_alloc_local_style+0x14>
2400a6da:	09c9      	lsrs	r1, r1, #7
}
2400a6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
2400a6e0:	f7ff befa 	b.w	2400a4d8 <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
2400a6e4:	2004      	movs	r0, #4
2400a6e6:	f005 f949 	bl	2400f97c <lv_mem_alloc>
    if(local_style == NULL) {
2400a6ea:	4605      	mov	r5, r0
2400a6ec:	b148      	cbz	r0, 2400a702 <get_alloc_local_style+0x32>
    lv_style_init(local_style);
2400a6ee:	f7ff ff66 	bl	2400a5be <lv_style_init>
    _lv_style_list_add_style(list, local_style);
2400a6f2:	4629      	mov	r1, r5
2400a6f4:	4620      	mov	r0, r4
2400a6f6:	f7ff ffaa 	bl	2400a64e <_lv_style_list_add_style>
    list->has_local = 1;
2400a6fa:	7923      	ldrb	r3, [r4, #4]
2400a6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a700:	7123      	strb	r3, [r4, #4]
}
2400a702:	4628      	mov	r0, r5
2400a704:	bd38      	pop	{r3, r4, r5, pc}

2400a706 <lv_style_reset>:
{
2400a706:	b510      	push	{r4, lr}
2400a708:	4604      	mov	r4, r0
    lv_mem_free(style->map);
2400a70a:	6800      	ldr	r0, [r0, #0]
2400a70c:	f005 f966 	bl	2400f9dc <lv_mem_free>
    style->map = NULL;
2400a710:	2300      	movs	r3, #0
2400a712:	6023      	str	r3, [r4, #0]
}
2400a714:	bd10      	pop	{r4, pc}

2400a716 <_lv_style_get_mem_size>:
{
2400a716:	b510      	push	{r4, lr}
    if(style->map == NULL) return 0;
2400a718:	6804      	ldr	r4, [r0, #0]
2400a71a:	b16c      	cbz	r4, 2400a738 <_lv_style_get_mem_size+0x22>
    size_t i = 0;
2400a71c:	2100      	movs	r1, #0
    return get_style_prop(style, idx) & 0xFF;
2400a71e:	4620      	mov	r0, r4
2400a720:	f7ff ff00 	bl	2400a524 <get_style_prop.isra.0>
2400a724:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
2400a726:	28ff      	cmp	r0, #255	; 0xff
2400a728:	d102      	bne.n	2400a730 <_lv_style_get_mem_size+0x1a>
    return i + sizeof(lv_style_property_t);
2400a72a:	3102      	adds	r1, #2
2400a72c:	b288      	uxth	r0, r1
}
2400a72e:	bd10      	pop	{r4, pc}
    return idx + get_prop_size(prop_id);
2400a730:	f7ff fee6 	bl	2400a500 <get_prop_size>
2400a734:	4401      	add	r1, r0
2400a736:	e7f2      	b.n	2400a71e <_lv_style_get_mem_size+0x8>
    if(style->map == NULL) return 0;
2400a738:	4620      	mov	r0, r4
2400a73a:	e7f8      	b.n	2400a72e <_lv_style_get_mem_size+0x18>

2400a73c <lv_style_copy>:
{
2400a73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
2400a73e:	4605      	mov	r5, r0
    if(style_src == NULL) return;
2400a740:	460c      	mov	r4, r1
2400a742:	b179      	cbz	r1, 2400a764 <lv_style_copy+0x28>
    if(style_src->map == NULL) return;
2400a744:	680b      	ldr	r3, [r1, #0]
2400a746:	b16b      	cbz	r3, 2400a764 <lv_style_copy+0x28>
    uint16_t size = _lv_style_get_mem_size(style_src);
2400a748:	4608      	mov	r0, r1
2400a74a:	f7ff ffe4 	bl	2400a716 <_lv_style_get_mem_size>
2400a74e:	9001      	str	r0, [sp, #4]
    style_dest->map = lv_mem_alloc(size);
2400a750:	f005 f914 	bl	2400f97c <lv_mem_alloc>
    _lv_memcpy(style_dest->map, style_src->map, size);
2400a754:	9a01      	ldr	r2, [sp, #4]
    style_dest->map = lv_mem_alloc(size);
2400a756:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
2400a758:	6821      	ldr	r1, [r4, #0]
}
2400a75a:	b003      	add	sp, #12
2400a75c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
2400a760:	f005 b9a4 	b.w	2400faac <_lv_memcpy>
}
2400a764:	b003      	add	sp, #12
2400a766:	bd30      	pop	{r4, r5, pc}

2400a768 <_lv_style_set_int>:
{
2400a768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t id = get_property_index(style, prop);
2400a76a:	460c      	mov	r4, r1
{
2400a76c:	f8ad 1006 	strh.w	r1, [sp, #6]
2400a770:	4605      	mov	r5, r0
2400a772:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
2400a776:	f7ff fee1 	bl	2400a53c <get_property_index>
    if(id >= 0) {
2400a77a:	1e01      	subs	r1, r0, #0
2400a77c:	db0f      	blt.n	2400a79e <_lv_style_set_int+0x36>
        attr_found = get_style_prop_attr(style, id);
2400a77e:	682e      	ldr	r6, [r5, #0]
2400a780:	4630      	mov	r0, r6
2400a782:	f7ff fed5 	bl	2400a530 <get_style_prop_attr.isra.0>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
2400a786:	ea80 2014 	eor.w	r0, r0, r4, lsr #8
2400a78a:	0643      	lsls	r3, r0, #25
2400a78c:	d107      	bne.n	2400a79e <_lv_style_set_int+0x36>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
2400a78e:	1c88      	adds	r0, r1, #2
2400a790:	2202      	movs	r2, #2
2400a792:	a901      	add	r1, sp, #4
2400a794:	4430      	add	r0, r6
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a796:	f7ff ff09 	bl	2400a5ac <_lv_memcpy_small.isra.0>
}
2400a79a:	b004      	add	sp, #16
2400a79c:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a79e:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
2400a7a0:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a7a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
2400a7a6:	f7ff ffb6 	bl	2400a716 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
2400a7aa:	1e04      	subs	r4, r0, #0
    style_resize(style, size);
2400a7ac:	4628      	mov	r0, r5
    if(size == 0) size += end_mark_size;
2400a7ae:	bf08      	it	eq
2400a7b0:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
2400a7b2:	3404      	adds	r4, #4
    style_resize(style, size);
2400a7b4:	b2a4      	uxth	r4, r4
2400a7b6:	4621      	mov	r1, r4
2400a7b8:	f7ff fead 	bl	2400a516 <style_resize>
    if(style == NULL) return;
2400a7bc:	2d00      	cmp	r5, #0
2400a7be:	d0ec      	beq.n	2400a79a <_lv_style_set_int+0x32>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
2400a7c0:	1fa3      	subs	r3, r4, #6
2400a7c2:	6828      	ldr	r0, [r5, #0]
2400a7c4:	2202      	movs	r2, #2
2400a7c6:	f10d 0106 	add.w	r1, sp, #6
2400a7ca:	4418      	add	r0, r3
2400a7cc:	f7ff feee 	bl	2400a5ac <_lv_memcpy_small.isra.0>
2400a7d0:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
2400a7d2:	6828      	ldr	r0, [r5, #0]
2400a7d4:	2202      	movs	r2, #2
2400a7d6:	a901      	add	r1, sp, #4
2400a7d8:	3c02      	subs	r4, #2
2400a7da:	4418      	add	r0, r3
2400a7dc:	f7ff fee6 	bl	2400a5ac <_lv_memcpy_small.isra.0>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a7e0:	6828      	ldr	r0, [r5, #0]
2400a7e2:	2202      	movs	r2, #2
2400a7e4:	f10d 010e 	add.w	r1, sp, #14
2400a7e8:	4420      	add	r0, r4
2400a7ea:	e7d4      	b.n	2400a796 <_lv_style_set_int+0x2e>

2400a7ec <_lv_style_set_color>:
{
2400a7ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t id = get_property_index(style, prop);
2400a7ee:	460c      	mov	r4, r1
{
2400a7f0:	f8ad 1006 	strh.w	r1, [sp, #6]
2400a7f4:	4605      	mov	r5, r0
2400a7f6:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
2400a7fa:	f7ff fe9f 	bl	2400a53c <get_property_index>
    if(id >= 0) {
2400a7fe:	1e01      	subs	r1, r0, #0
2400a800:	db0f      	blt.n	2400a822 <_lv_style_set_color+0x36>
        attr_found = get_style_prop_attr(style, id);
2400a802:	682e      	ldr	r6, [r5, #0]
2400a804:	4630      	mov	r0, r6
2400a806:	f7ff fe93 	bl	2400a530 <get_style_prop_attr.isra.0>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
2400a80a:	ea80 2014 	eor.w	r0, r0, r4, lsr #8
2400a80e:	0643      	lsls	r3, r0, #25
2400a810:	d107      	bne.n	2400a822 <_lv_style_set_color+0x36>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
2400a812:	1c88      	adds	r0, r1, #2
2400a814:	2202      	movs	r2, #2
2400a816:	a901      	add	r1, sp, #4
2400a818:	4430      	add	r0, r6
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a81a:	f7ff fec7 	bl	2400a5ac <_lv_memcpy_small.isra.0>
}
2400a81e:	b004      	add	sp, #16
2400a820:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a822:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
2400a824:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a826:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
2400a82a:	f7ff ff74 	bl	2400a716 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
2400a82e:	1e04      	subs	r4, r0, #0
    style_resize(style, size);
2400a830:	4628      	mov	r0, r5
    if(size == 0) size += end_mark_size;
2400a832:	bf08      	it	eq
2400a834:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
2400a836:	3404      	adds	r4, #4
    style_resize(style, size);
2400a838:	b2a4      	uxth	r4, r4
2400a83a:	4621      	mov	r1, r4
2400a83c:	f7ff fe6b 	bl	2400a516 <style_resize>
    if(style == NULL) return;
2400a840:	2d00      	cmp	r5, #0
2400a842:	d0ec      	beq.n	2400a81e <_lv_style_set_color+0x32>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
2400a844:	1fa3      	subs	r3, r4, #6
2400a846:	6828      	ldr	r0, [r5, #0]
2400a848:	2202      	movs	r2, #2
2400a84a:	f10d 0106 	add.w	r1, sp, #6
2400a84e:	4418      	add	r0, r3
2400a850:	f7ff feac 	bl	2400a5ac <_lv_memcpy_small.isra.0>
2400a854:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
2400a856:	6828      	ldr	r0, [r5, #0]
2400a858:	2202      	movs	r2, #2
2400a85a:	a901      	add	r1, sp, #4
2400a85c:	3c02      	subs	r4, #2
2400a85e:	4418      	add	r0, r3
2400a860:	f7ff fea4 	bl	2400a5ac <_lv_memcpy_small.isra.0>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a864:	6828      	ldr	r0, [r5, #0]
2400a866:	2202      	movs	r2, #2
2400a868:	f10d 010e 	add.w	r1, sp, #14
2400a86c:	4420      	add	r0, r4
2400a86e:	e7d4      	b.n	2400a81a <_lv_style_set_color+0x2e>

2400a870 <_lv_style_set_opa>:
{
2400a870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t id = get_property_index(style, prop);
2400a872:	460c      	mov	r4, r1
{
2400a874:	f8ad 1006 	strh.w	r1, [sp, #6]
2400a878:	4605      	mov	r5, r0
2400a87a:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
2400a87e:	f7ff fe5d 	bl	2400a53c <get_property_index>
    if(id >= 0) {
2400a882:	1e01      	subs	r1, r0, #0
2400a884:	db10      	blt.n	2400a8a8 <_lv_style_set_opa+0x38>
        attr_found = get_style_prop_attr(style, id);
2400a886:	682e      	ldr	r6, [r5, #0]
2400a888:	4630      	mov	r0, r6
2400a88a:	f7ff fe51 	bl	2400a530 <get_style_prop_attr.isra.0>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
2400a88e:	ea80 2014 	eor.w	r0, r0, r4, lsr #8
2400a892:	0643      	lsls	r3, r0, #25
2400a894:	d108      	bne.n	2400a8a8 <_lv_style_set_opa+0x38>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
2400a896:	1c88      	adds	r0, r1, #2
2400a898:	2201      	movs	r2, #1
2400a89a:	f10d 0105 	add.w	r1, sp, #5
2400a89e:	4430      	add	r0, r6
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a8a0:	f7ff fe84 	bl	2400a5ac <_lv_memcpy_small.isra.0>
}
2400a8a4:	b004      	add	sp, #16
2400a8a6:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a8a8:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
2400a8aa:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a8ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
2400a8b0:	f7ff ff31 	bl	2400a716 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
2400a8b4:	1e04      	subs	r4, r0, #0
    style_resize(style, size);
2400a8b6:	4628      	mov	r0, r5
    if(size == 0) size += end_mark_size;
2400a8b8:	bf08      	it	eq
2400a8ba:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
2400a8bc:	3403      	adds	r4, #3
    style_resize(style, size);
2400a8be:	b2a4      	uxth	r4, r4
2400a8c0:	4621      	mov	r1, r4
2400a8c2:	f7ff fe28 	bl	2400a516 <style_resize>
    if(style == NULL) return;
2400a8c6:	2d00      	cmp	r5, #0
2400a8c8:	d0ec      	beq.n	2400a8a4 <_lv_style_set_opa+0x34>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
2400a8ca:	1f63      	subs	r3, r4, #5
2400a8cc:	6828      	ldr	r0, [r5, #0]
2400a8ce:	2202      	movs	r2, #2
2400a8d0:	f10d 0106 	add.w	r1, sp, #6
2400a8d4:	4418      	add	r0, r3
2400a8d6:	f7ff fe69 	bl	2400a5ac <_lv_memcpy_small.isra.0>
2400a8da:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
2400a8dc:	6828      	ldr	r0, [r5, #0]
2400a8de:	2201      	movs	r2, #1
2400a8e0:	f10d 0105 	add.w	r1, sp, #5
2400a8e4:	3c02      	subs	r4, #2
2400a8e6:	4418      	add	r0, r3
2400a8e8:	f7ff fe60 	bl	2400a5ac <_lv_memcpy_small.isra.0>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a8ec:	6828      	ldr	r0, [r5, #0]
2400a8ee:	2202      	movs	r2, #2
2400a8f0:	f10d 010e 	add.w	r1, sp, #14
2400a8f4:	4420      	add	r0, r4
2400a8f6:	e7d3      	b.n	2400a8a0 <_lv_style_set_opa+0x30>

2400a8f8 <_lv_style_set_ptr>:
{
2400a8f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t id = get_property_index(style, prop);
2400a8fa:	460c      	mov	r4, r1
{
2400a8fc:	f8ad 1006 	strh.w	r1, [sp, #6]
2400a900:	4605      	mov	r5, r0
2400a902:	9200      	str	r2, [sp, #0]
    int32_t id = get_property_index(style, prop);
2400a904:	f7ff fe1a 	bl	2400a53c <get_property_index>
    if(id >= 0) {
2400a908:	1e01      	subs	r1, r0, #0
2400a90a:	db0f      	blt.n	2400a92c <_lv_style_set_ptr+0x34>
        attr_found = get_style_prop_attr(style, id);
2400a90c:	682e      	ldr	r6, [r5, #0]
2400a90e:	4630      	mov	r0, r6
2400a910:	f7ff fe0e 	bl	2400a530 <get_style_prop_attr.isra.0>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
2400a914:	ea80 2014 	eor.w	r0, r0, r4, lsr #8
2400a918:	0643      	lsls	r3, r0, #25
2400a91a:	d107      	bne.n	2400a92c <_lv_style_set_ptr+0x34>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
2400a91c:	1c88      	adds	r0, r1, #2
2400a91e:	2204      	movs	r2, #4
2400a920:	4669      	mov	r1, sp
2400a922:	4430      	add	r0, r6
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a924:	f7ff fe42 	bl	2400a5ac <_lv_memcpy_small.isra.0>
}
2400a928:	b004      	add	sp, #16
2400a92a:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a92c:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
2400a92e:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
2400a930:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
2400a934:	f7ff feef 	bl	2400a716 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
2400a938:	1e04      	subs	r4, r0, #0
    style_resize(style, size);
2400a93a:	4628      	mov	r0, r5
    if(size == 0) size += end_mark_size;
2400a93c:	bf08      	it	eq
2400a93e:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
2400a940:	3406      	adds	r4, #6
    style_resize(style, size);
2400a942:	b2a4      	uxth	r4, r4
2400a944:	4621      	mov	r1, r4
2400a946:	f7ff fde6 	bl	2400a516 <style_resize>
    if(style == NULL) return;
2400a94a:	2d00      	cmp	r5, #0
2400a94c:	d0ec      	beq.n	2400a928 <_lv_style_set_ptr+0x30>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
2400a94e:	f1a4 0308 	sub.w	r3, r4, #8
2400a952:	6828      	ldr	r0, [r5, #0]
2400a954:	2202      	movs	r2, #2
2400a956:	f10d 0106 	add.w	r1, sp, #6
2400a95a:	4418      	add	r0, r3
2400a95c:	f7ff fe26 	bl	2400a5ac <_lv_memcpy_small.isra.0>
2400a960:	1fa3      	subs	r3, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
2400a962:	6828      	ldr	r0, [r5, #0]
2400a964:	2204      	movs	r2, #4
2400a966:	4669      	mov	r1, sp
2400a968:	3c02      	subs	r4, #2
2400a96a:	4418      	add	r0, r3
2400a96c:	f7ff fe1e 	bl	2400a5ac <_lv_memcpy_small.isra.0>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
2400a970:	6828      	ldr	r0, [r5, #0]
2400a972:	2202      	movs	r2, #2
2400a974:	f10d 010e 	add.w	r1, sp, #14
2400a978:	4420      	add	r0, r4
2400a97a:	e7d3      	b.n	2400a924 <_lv_style_set_ptr+0x2c>

2400a97c <_lv_style_get_int>:
{
2400a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a980:	460e      	mov	r6, r1
2400a982:	4617      	mov	r7, r2
    if(style == NULL) return -1;
2400a984:	4604      	mov	r4, r0
2400a986:	b1c0      	cbz	r0, 2400a9ba <_lv_style_get_int+0x3e>
    if(style->map == NULL) return -1;
2400a988:	f8d0 8000 	ldr.w	r8, [r0]
2400a98c:	f1b8 0f00 	cmp.w	r8, #0
2400a990:	d013      	beq.n	2400a9ba <_lv_style_get_int+0x3e>
    int32_t id = get_property_index(style, prop);
2400a992:	f7ff fdd3 	bl	2400a53c <get_property_index>
    if(id < 0) {
2400a996:	1e05      	subs	r5, r0, #0
2400a998:	db0f      	blt.n	2400a9ba <_lv_style_get_int+0x3e>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
2400a99a:	1ca9      	adds	r1, r5, #2
2400a99c:	2202      	movs	r2, #2
2400a99e:	4638      	mov	r0, r7
2400a9a0:	4441      	add	r1, r8
2400a9a2:	f7ff fe03 	bl	2400a5ac <_lv_memcpy_small.isra.0>
        attr_act = get_style_prop_attr(style, id);
2400a9a6:	4629      	mov	r1, r5
2400a9a8:	6820      	ldr	r0, [r4, #0]
2400a9aa:	f7ff fdc1 	bl	2400a530 <get_style_prop_attr.isra.0>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
2400a9ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2400a9b2:	ea00 2016 	and.w	r0, r0, r6, lsr #8
}
2400a9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(style == NULL) return -1;
2400a9ba:	f04f 30ff 	mov.w	r0, #4294967295
2400a9be:	e7fa      	b.n	2400a9b6 <_lv_style_get_int+0x3a>

2400a9c0 <_lv_style_get_opa>:
{
2400a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a9c4:	460e      	mov	r6, r1
2400a9c6:	4617      	mov	r7, r2
    if(style == NULL) return -1;
2400a9c8:	4604      	mov	r4, r0
2400a9ca:	b1c0      	cbz	r0, 2400a9fe <_lv_style_get_opa+0x3e>
    if(style->map == NULL) return -1;
2400a9cc:	f8d0 8000 	ldr.w	r8, [r0]
2400a9d0:	f1b8 0f00 	cmp.w	r8, #0
2400a9d4:	d013      	beq.n	2400a9fe <_lv_style_get_opa+0x3e>
    int32_t id = get_property_index(style, prop);
2400a9d6:	f7ff fdb1 	bl	2400a53c <get_property_index>
    if(id < 0) {
2400a9da:	1e05      	subs	r5, r0, #0
2400a9dc:	db0f      	blt.n	2400a9fe <_lv_style_get_opa+0x3e>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
2400a9de:	1ca9      	adds	r1, r5, #2
2400a9e0:	2201      	movs	r2, #1
2400a9e2:	4638      	mov	r0, r7
2400a9e4:	4441      	add	r1, r8
2400a9e6:	f7ff fde1 	bl	2400a5ac <_lv_memcpy_small.isra.0>
        attr_act = get_style_prop_attr(style, id);
2400a9ea:	4629      	mov	r1, r5
2400a9ec:	6820      	ldr	r0, [r4, #0]
2400a9ee:	f7ff fd9f 	bl	2400a530 <get_style_prop_attr.isra.0>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
2400a9f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2400a9f6:	ea00 2016 	and.w	r0, r0, r6, lsr #8
}
2400a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(style == NULL) return -1;
2400a9fe:	f04f 30ff 	mov.w	r0, #4294967295
2400aa02:	e7fa      	b.n	2400a9fa <_lv_style_get_opa+0x3a>

2400aa04 <_lv_style_get_ptr>:
{
2400aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400aa08:	460e      	mov	r6, r1
2400aa0a:	4617      	mov	r7, r2
    if(style == NULL) return -1;
2400aa0c:	4604      	mov	r4, r0
2400aa0e:	b1c0      	cbz	r0, 2400aa42 <_lv_style_get_ptr+0x3e>
    if(style->map == NULL) return -1;
2400aa10:	f8d0 8000 	ldr.w	r8, [r0]
2400aa14:	f1b8 0f00 	cmp.w	r8, #0
2400aa18:	d013      	beq.n	2400aa42 <_lv_style_get_ptr+0x3e>
    int32_t id = get_property_index(style, prop);
2400aa1a:	f7ff fd8f 	bl	2400a53c <get_property_index>
    if(id < 0) {
2400aa1e:	1e05      	subs	r5, r0, #0
2400aa20:	db0f      	blt.n	2400aa42 <_lv_style_get_ptr+0x3e>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
2400aa22:	1ca9      	adds	r1, r5, #2
2400aa24:	2204      	movs	r2, #4
2400aa26:	4638      	mov	r0, r7
2400aa28:	4441      	add	r1, r8
2400aa2a:	f7ff fdbf 	bl	2400a5ac <_lv_memcpy_small.isra.0>
        attr_act = get_style_prop_attr(style, id);
2400aa2e:	4629      	mov	r1, r5
2400aa30:	6820      	ldr	r0, [r4, #0]
2400aa32:	f7ff fd7d 	bl	2400a530 <get_style_prop_attr.isra.0>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
2400aa36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2400aa3a:	ea00 2016 	and.w	r0, r0, r6, lsr #8
}
2400aa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(style == NULL) return -1;
2400aa42:	f04f 30ff 	mov.w	r0, #4294967295
2400aa46:	e7fa      	b.n	2400aa3e <_lv_style_get_ptr+0x3a>

2400aa48 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
2400aa48:	7902      	ldrb	r2, [r0, #4]
2400aa4a:	f012 0340 	ands.w	r3, r2, #64	; 0x40
2400aa4e:	d005      	beq.n	2400aa5c <lv_style_list_get_local_style+0x14>
    if(list->has_trans) return list->style_list[1];
2400aa50:	6803      	ldr	r3, [r0, #0]
2400aa52:	0612      	lsls	r2, r2, #24
2400aa54:	bf4c      	ite	mi
2400aa56:	6858      	ldrmi	r0, [r3, #4]
    else return list->style_list[0];
2400aa58:	6818      	ldrpl	r0, [r3, #0]
2400aa5a:	4770      	bx	lr
    if(!list->has_local) return NULL;
2400aa5c:	4618      	mov	r0, r3
}
2400aa5e:	4770      	bx	lr

2400aa60 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
2400aa60:	f990 3004 	ldrsb.w	r3, [r0, #4]
2400aa64:	2b00      	cmp	r3, #0
    return list->style_list[0];
2400aa66:	bfba      	itte	lt
2400aa68:	6803      	ldrlt	r3, [r0, #0]
2400aa6a:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
2400aa6c:	2000      	movge	r0, #0
}
2400aa6e:	4770      	bx	lr

2400aa70 <_lv_style_list_reset>:
{
2400aa70:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
2400aa72:	4604      	mov	r4, r0
2400aa74:	b338      	cbz	r0, 2400aac6 <_lv_style_list_reset+0x56>
    if(list->has_local) {
2400aa76:	7903      	ldrb	r3, [r0, #4]
2400aa78:	065a      	lsls	r2, r3, #25
2400aa7a:	d508      	bpl.n	2400aa8e <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
2400aa7c:	f7ff ffe4 	bl	2400aa48 <lv_style_list_get_local_style>
        if(local) {
2400aa80:	4605      	mov	r5, r0
2400aa82:	b120      	cbz	r0, 2400aa8e <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
2400aa84:	f7ff fe3f 	bl	2400a706 <lv_style_reset>
            lv_mem_free(local);
2400aa88:	4628      	mov	r0, r5
2400aa8a:	f004 ffa7 	bl	2400f9dc <lv_mem_free>
    if(list->has_trans) {
2400aa8e:	f994 3004 	ldrsb.w	r3, [r4, #4]
2400aa92:	2b00      	cmp	r3, #0
2400aa94:	da09      	bge.n	2400aaaa <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
2400aa96:	4620      	mov	r0, r4
2400aa98:	f7ff ffe2 	bl	2400aa60 <_lv_style_list_get_transition_style>
        if(trans) {
2400aa9c:	4605      	mov	r5, r0
2400aa9e:	b120      	cbz	r0, 2400aaaa <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
2400aaa0:	f7ff fe31 	bl	2400a706 <lv_style_reset>
            lv_mem_free(trans);
2400aaa4:	4628      	mov	r0, r5
2400aaa6:	f004 ff99 	bl	2400f9dc <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
2400aaaa:	7923      	ldrb	r3, [r4, #4]
2400aaac:	069b      	lsls	r3, r3, #26
2400aaae:	d002      	beq.n	2400aab6 <_lv_style_list_reset+0x46>
2400aab0:	6820      	ldr	r0, [r4, #0]
2400aab2:	f004 ff93 	bl	2400f9dc <lv_mem_free>
    list->style_list = NULL;
2400aab6:	2300      	movs	r3, #0
2400aab8:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
2400aaba:	88a3      	ldrh	r3, [r4, #4]
2400aabc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
2400aac0:	f023 0301 	bic.w	r3, r3, #1
2400aac4:	80a3      	strh	r3, [r4, #4]
}
2400aac6:	bd38      	pop	{r3, r4, r5, pc}

2400aac8 <lv_style_list_copy>:
{
2400aac8:	b538      	push	{r3, r4, r5, lr}
2400aaca:	460c      	mov	r4, r1
2400aacc:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
2400aace:	f7ff ffcf 	bl	2400aa70 <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
2400aad2:	6823      	ldr	r3, [r4, #0]
2400aad4:	b1eb      	cbz	r3, 2400ab12 <lv_style_list_copy+0x4a>
    if(list_src->has_local == 0) {
2400aad6:	7923      	ldrb	r3, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400aad8:	f003 003f 	and.w	r0, r3, #63	; 0x3f
2400aadc:	b25a      	sxtb	r2, r3
    if(list_src->has_local == 0) {
2400aade:	065b      	lsls	r3, r3, #25
2400aae0:	d429      	bmi.n	2400ab36 <lv_style_list_copy+0x6e>
        if(list_src->has_trans) {
2400aae2:	2a00      	cmp	r2, #0
2400aae4:	da16      	bge.n	2400ab14 <lv_style_list_copy+0x4c>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400aae6:	3801      	subs	r0, #1
2400aae8:	0080      	lsls	r0, r0, #2
2400aaea:	f004 ff47 	bl	2400f97c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400aaee:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400aaf0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400aaf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
2400aaf6:	6821      	ldr	r1, [r4, #0]
2400aaf8:	3a01      	subs	r2, #1
2400aafa:	3104      	adds	r1, #4
2400aafc:	0092      	lsls	r2, r2, #2
2400aafe:	f004 ffd5 	bl	2400faac <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
2400ab02:	7923      	ldrb	r3, [r4, #4]
2400ab04:	792a      	ldrb	r2, [r5, #4]
2400ab06:	f3c3 0305 	ubfx	r3, r3, #0, #6
2400ab0a:	3b01      	subs	r3, #1
2400ab0c:	f363 0205 	bfi	r2, r3, #0, #6
2400ab10:	712a      	strb	r2, [r5, #4]
}
2400ab12:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
2400ab14:	0080      	lsls	r0, r0, #2
2400ab16:	f004 ff31 	bl	2400f97c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
2400ab1a:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
2400ab1c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
2400ab1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
2400ab22:	6821      	ldr	r1, [r4, #0]
2400ab24:	0092      	lsls	r2, r2, #2
2400ab26:	f004 ffc1 	bl	2400faac <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
2400ab2a:	7922      	ldrb	r2, [r4, #4]
2400ab2c:	792b      	ldrb	r3, [r5, #4]
2400ab2e:	f362 0305 	bfi	r3, r2, #0, #6
2400ab32:	712b      	strb	r3, [r5, #4]
2400ab34:	e7ed      	b.n	2400ab12 <lv_style_list_copy+0x4a>
        if(list_src->has_trans) {
2400ab36:	2a00      	cmp	r2, #0
2400ab38:	da22      	bge.n	2400ab80 <lv_style_list_copy+0xb8>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
2400ab3a:	3802      	subs	r0, #2
2400ab3c:	0080      	lsls	r0, r0, #2
2400ab3e:	f004 ff1d 	bl	2400f97c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
2400ab42:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
2400ab44:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
2400ab46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
2400ab4a:	6821      	ldr	r1, [r4, #0]
2400ab4c:	3a02      	subs	r2, #2
2400ab4e:	3108      	adds	r1, #8
2400ab50:	0092      	lsls	r2, r2, #2
2400ab52:	f004 ffab 	bl	2400faac <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
2400ab56:	7923      	ldrb	r3, [r4, #4]
2400ab58:	333e      	adds	r3, #62	; 0x3e
            list_dest->style_cnt = list_src->style_cnt - 1;
2400ab5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            list_dest->style_cnt = list_src->style_cnt - 2;
2400ab5e:	792a      	ldrb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
2400ab60:	4628      	mov	r0, r5
            list_dest->style_cnt = list_src->style_cnt - 2;
2400ab62:	f363 0205 	bfi	r2, r3, #0, #6
2400ab66:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
2400ab68:	f7ff fdb2 	bl	2400a6d0 <get_alloc_local_style>
2400ab6c:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
2400ab6e:	4620      	mov	r0, r4
2400ab70:	f7ff fdae 	bl	2400a6d0 <get_alloc_local_style>
2400ab74:	4601      	mov	r1, r0
2400ab76:	4628      	mov	r0, r5
}
2400ab78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
2400ab7c:	f7ff bdde 	b.w	2400a73c <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400ab80:	3801      	subs	r0, #1
2400ab82:	0080      	lsls	r0, r0, #2
2400ab84:	f004 fefa 	bl	2400f97c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400ab88:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400ab8a:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
2400ab8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
2400ab90:	6821      	ldr	r1, [r4, #0]
2400ab92:	3a01      	subs	r2, #1
2400ab94:	3104      	adds	r1, #4
2400ab96:	0092      	lsls	r2, r2, #2
2400ab98:	f004 ff88 	bl	2400faac <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
2400ab9c:	7923      	ldrb	r3, [r4, #4]
2400ab9e:	333f      	adds	r3, #63	; 0x3f
2400aba0:	e7db      	b.n	2400ab5a <lv_style_list_copy+0x92>

2400aba2 <_lv_style_list_set_local_color>:
{
2400aba2:	b507      	push	{r0, r1, r2, lr}
2400aba4:	e9cd 2100 	strd	r2, r1, [sp]
    lv_style_t * local = get_alloc_local_style(list);
2400aba8:	f7ff fd92 	bl	2400a6d0 <get_alloc_local_style>
    _lv_style_set_color(local, prop, value);
2400abac:	e9dd 2100 	ldrd	r2, r1, [sp]
}
2400abb0:	b003      	add	sp, #12
2400abb2:	f85d eb04 	ldr.w	lr, [sp], #4
    _lv_style_set_color(local, prop, value);
2400abb6:	f7ff be19 	b.w	2400a7ec <_lv_style_set_color>

2400abba <_lv_style_list_get_int>:
{
2400abba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
2400abbe:	460f      	mov	r7, r1
2400abc0:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
2400abc2:	4605      	mov	r5, r0
2400abc4:	b318      	cbz	r0, 2400ac0e <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
2400abc6:	6800      	ldr	r0, [r0, #0]
2400abc8:	b308      	cbz	r0, 2400ac0e <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
2400abca:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
2400abcc:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    int16_t weight = -1;
2400abd0:	f04f 34ff 	mov.w	r4, #4294967295
    lv_style_int_t value_act = 0;
2400abd4:	f8ad 6006 	strh.w	r6, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
2400abd8:	792b      	ldrb	r3, [r5, #4]
2400abda:	fa0f f986 	sxth.w	r9, r6
2400abde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400abe2:	4599      	cmp	r9, r3
2400abe4:	db03      	blt.n	2400abee <_lv_style_list_get_int+0x34>
    if(weight >= 0) return LV_RES_OK;
2400abe6:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
2400abe8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
2400abec:	e00f      	b.n	2400ac0e <_lv_style_list_get_int+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
2400abee:	b2f1      	uxtb	r1, r6
2400abf0:	4628      	mov	r0, r5
2400abf2:	f7ff fc71 	bl	2400a4d8 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
2400abf6:	f10d 0206 	add.w	r2, sp, #6
2400abfa:	4639      	mov	r1, r7
2400abfc:	f7ff febe 	bl	2400a97c <_lv_style_get_int>
        if(weight_act == weight_goal) {
2400ac00:	4582      	cmp	sl, r0
2400ac02:	d107      	bne.n	2400ac14 <_lv_style_list_get_int+0x5a>
            *res = value_act;
2400ac04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            return LV_RES_OK;
2400ac08:	2001      	movs	r0, #1
            *res = value_act;
2400ac0a:	f8a8 3000 	strh.w	r3, [r8]
}
2400ac0e:	b002      	add	sp, #8
2400ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
2400ac14:	f995 3004 	ldrsb.w	r3, [r5, #4]
2400ac18:	2b00      	cmp	r3, #0
2400ac1a:	da07      	bge.n	2400ac2c <_lv_style_list_get_int+0x72>
2400ac1c:	2800      	cmp	r0, #0
2400ac1e:	db05      	blt.n	2400ac2c <_lv_style_list_get_int+0x72>
2400ac20:	f1b9 0f00 	cmp.w	r9, #0
2400ac24:	d102      	bne.n	2400ac2c <_lv_style_list_get_int+0x72>
2400ac26:	796b      	ldrb	r3, [r5, #5]
2400ac28:	07db      	lsls	r3, r3, #31
2400ac2a:	d5eb      	bpl.n	2400ac04 <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
2400ac2c:	4284      	cmp	r4, r0
            *res = value_act;
2400ac2e:	f106 0601 	add.w	r6, r6, #1
2400ac32:	bfbe      	ittt	lt
2400ac34:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
2400ac38:	4604      	movlt	r4, r0
2400ac3a:	f8a8 3000 	strhlt.w	r3, [r8]
2400ac3e:	e7cb      	b.n	2400abd8 <_lv_style_list_get_int+0x1e>

2400ac40 <_lv_style_list_get_color>:
{
2400ac40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
2400ac44:	460f      	mov	r7, r1
2400ac46:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
2400ac48:	4605      	mov	r5, r0
2400ac4a:	b310      	cbz	r0, 2400ac92 <_lv_style_list_get_color+0x52>
    if(list->style_list == NULL) return LV_RES_INV;
2400ac4c:	6800      	ldr	r0, [r0, #0]
2400ac4e:	b300      	cbz	r0, 2400ac92 <_lv_style_list_get_color+0x52>
    value_act.full = 0;
2400ac50:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
2400ac52:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    int16_t weight = -1;
2400ac56:	f04f 34ff 	mov.w	r4, #4294967295
    value_act.full = 0;
2400ac5a:	f8ad 6004 	strh.w	r6, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
2400ac5e:	792b      	ldrb	r3, [r5, #4]
2400ac60:	fa0f f986 	sxth.w	r9, r6
2400ac64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400ac68:	4599      	cmp	r9, r3
2400ac6a:	db03      	blt.n	2400ac74 <_lv_style_list_get_color+0x34>
    if(weight >= 0)  return LV_RES_OK;
2400ac6c:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
2400ac6e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
2400ac72:	e00e      	b.n	2400ac92 <_lv_style_list_get_color+0x52>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
2400ac74:	b2f1      	uxtb	r1, r6
2400ac76:	4628      	mov	r0, r5
2400ac78:	f7ff fc2e 	bl	2400a4d8 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
2400ac7c:	aa01      	add	r2, sp, #4
2400ac7e:	4639      	mov	r1, r7
2400ac80:	f7ff fe7c 	bl	2400a97c <_lv_style_get_int>
        if(weight_act == weight_goal) {
2400ac84:	4582      	cmp	sl, r0
2400ac86:	d107      	bne.n	2400ac98 <_lv_style_list_get_color+0x58>
            *res = value_act;
2400ac88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            return LV_RES_OK;
2400ac8c:	2001      	movs	r0, #1
            *res = value_act;
2400ac8e:	f8a8 3000 	strh.w	r3, [r8]
}
2400ac92:	b002      	add	sp, #8
2400ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
2400ac98:	f995 3004 	ldrsb.w	r3, [r5, #4]
2400ac9c:	2b00      	cmp	r3, #0
2400ac9e:	da07      	bge.n	2400acb0 <_lv_style_list_get_color+0x70>
2400aca0:	2800      	cmp	r0, #0
2400aca2:	db05      	blt.n	2400acb0 <_lv_style_list_get_color+0x70>
2400aca4:	f1b9 0f00 	cmp.w	r9, #0
2400aca8:	d102      	bne.n	2400acb0 <_lv_style_list_get_color+0x70>
2400acaa:	796b      	ldrb	r3, [r5, #5]
2400acac:	07db      	lsls	r3, r3, #31
2400acae:	d5eb      	bpl.n	2400ac88 <_lv_style_list_get_color+0x48>
        else if(weight_act > weight) {
2400acb0:	4284      	cmp	r4, r0
            *res = value_act;
2400acb2:	f106 0601 	add.w	r6, r6, #1
2400acb6:	bfbe      	ittt	lt
2400acb8:	f8bd 3004 	ldrhlt.w	r3, [sp, #4]
2400acbc:	4604      	movlt	r4, r0
2400acbe:	f8a8 3000 	strhlt.w	r3, [r8]
2400acc2:	e7cc      	b.n	2400ac5e <_lv_style_list_get_color+0x1e>

2400acc4 <_lv_style_list_get_opa>:
{
2400acc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
2400acc8:	460f      	mov	r7, r1
2400acca:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
2400accc:	4605      	mov	r5, r0
2400acce:	b318      	cbz	r0, 2400ad18 <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
2400acd0:	6800      	ldr	r0, [r0, #0]
2400acd2:	b308      	cbz	r0, 2400ad18 <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
2400acd4:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
2400acd6:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    int16_t weight = -1;
2400acda:	f04f 34ff 	mov.w	r4, #4294967295
    lv_opa_t value_act = LV_OPA_TRANSP;
2400acde:	f88d 6007 	strb.w	r6, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
2400ace2:	792b      	ldrb	r3, [r5, #4]
2400ace4:	fa0f f986 	sxth.w	r9, r6
2400ace8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400acec:	4599      	cmp	r9, r3
2400acee:	db03      	blt.n	2400acf8 <_lv_style_list_get_opa+0x34>
    if(weight >= 0)  return LV_RES_OK;
2400acf0:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
2400acf2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
2400acf6:	e00f      	b.n	2400ad18 <_lv_style_list_get_opa+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
2400acf8:	b2f1      	uxtb	r1, r6
2400acfa:	4628      	mov	r0, r5
2400acfc:	f7ff fbec 	bl	2400a4d8 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
2400ad00:	f10d 0207 	add.w	r2, sp, #7
2400ad04:	4639      	mov	r1, r7
2400ad06:	f7ff fe5b 	bl	2400a9c0 <_lv_style_get_opa>
        if(weight_act == weight_goal) {
2400ad0a:	4582      	cmp	sl, r0
2400ad0c:	d107      	bne.n	2400ad1e <_lv_style_list_get_opa+0x5a>
            *res = value_act;
2400ad0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
            return LV_RES_OK;
2400ad12:	2001      	movs	r0, #1
            *res = value_act;
2400ad14:	f888 3000 	strb.w	r3, [r8]
}
2400ad18:	b002      	add	sp, #8
2400ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
2400ad1e:	f995 3004 	ldrsb.w	r3, [r5, #4]
2400ad22:	2b00      	cmp	r3, #0
2400ad24:	da07      	bge.n	2400ad36 <_lv_style_list_get_opa+0x72>
2400ad26:	2800      	cmp	r0, #0
2400ad28:	db05      	blt.n	2400ad36 <_lv_style_list_get_opa+0x72>
2400ad2a:	f1b9 0f00 	cmp.w	r9, #0
2400ad2e:	d102      	bne.n	2400ad36 <_lv_style_list_get_opa+0x72>
2400ad30:	796b      	ldrb	r3, [r5, #5]
2400ad32:	07db      	lsls	r3, r3, #31
2400ad34:	d5eb      	bpl.n	2400ad0e <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
2400ad36:	4284      	cmp	r4, r0
            *res = value_act;
2400ad38:	f106 0601 	add.w	r6, r6, #1
2400ad3c:	bfbe      	ittt	lt
2400ad3e:	f89d 3007 	ldrblt.w	r3, [sp, #7]
2400ad42:	4604      	movlt	r4, r0
2400ad44:	f888 3000 	strblt.w	r3, [r8]
2400ad48:	e7cb      	b.n	2400ace2 <_lv_style_list_get_opa+0x1e>

2400ad4a <_lv_style_list_get_ptr>:
{
2400ad4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
2400ad4e:	460f      	mov	r7, r1
2400ad50:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
2400ad52:	4605      	mov	r5, r0
2400ad54:	b1f8      	cbz	r0, 2400ad96 <_lv_style_list_get_ptr+0x4c>
    if(list->style_list == NULL) return LV_RES_INV;
2400ad56:	6800      	ldr	r0, [r0, #0]
2400ad58:	b1e8      	cbz	r0, 2400ad96 <_lv_style_list_get_ptr+0x4c>
    int16_t weight_goal = attr;
2400ad5a:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
2400ad5e:	2600      	movs	r6, #0
    int16_t weight = -1;
2400ad60:	f04f 34ff 	mov.w	r4, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
2400ad64:	792b      	ldrb	r3, [r5, #4]
2400ad66:	fa0f f986 	sxth.w	r9, r6
2400ad6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400ad6e:	4599      	cmp	r9, r3
2400ad70:	db03      	blt.n	2400ad7a <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
2400ad72:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
2400ad74:	f3c0 30c0 	ubfx	r0, r0, #15, #1
2400ad78:	e00d      	b.n	2400ad96 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
2400ad7a:	b2f1      	uxtb	r1, r6
2400ad7c:	4628      	mov	r0, r5
2400ad7e:	f7ff fbab 	bl	2400a4d8 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
2400ad82:	aa01      	add	r2, sp, #4
2400ad84:	4639      	mov	r1, r7
2400ad86:	f7ff fe3d 	bl	2400aa04 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
2400ad8a:	4582      	cmp	sl, r0
2400ad8c:	d106      	bne.n	2400ad9c <_lv_style_list_get_ptr+0x52>
            *res = value_act;
2400ad8e:	9b01      	ldr	r3, [sp, #4]
            return LV_RES_OK;
2400ad90:	2001      	movs	r0, #1
            *res = value_act;
2400ad92:	f8c8 3000 	str.w	r3, [r8]
}
2400ad96:	b002      	add	sp, #8
2400ad98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
2400ad9c:	f995 3004 	ldrsb.w	r3, [r5, #4]
2400ada0:	2b00      	cmp	r3, #0
2400ada2:	da07      	bge.n	2400adb4 <_lv_style_list_get_ptr+0x6a>
2400ada4:	2800      	cmp	r0, #0
2400ada6:	db05      	blt.n	2400adb4 <_lv_style_list_get_ptr+0x6a>
2400ada8:	f1b9 0f00 	cmp.w	r9, #0
2400adac:	d102      	bne.n	2400adb4 <_lv_style_list_get_ptr+0x6a>
2400adae:	796b      	ldrb	r3, [r5, #5]
2400adb0:	07db      	lsls	r3, r3, #31
2400adb2:	d5ec      	bpl.n	2400ad8e <_lv_style_list_get_ptr+0x44>
        else if(weight_act > weight) {
2400adb4:	4284      	cmp	r4, r0
            *res = value_act;
2400adb6:	f106 0601 	add.w	r6, r6, #1
2400adba:	bfbe      	ittt	lt
2400adbc:	9b01      	ldrlt	r3, [sp, #4]
2400adbe:	4604      	movlt	r4, r0
2400adc0:	f8c8 3000 	strlt.w	r3, [r8]
2400adc4:	e7ce      	b.n	2400ad64 <_lv_style_list_get_ptr+0x1a>

2400adc6 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
2400adc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400adc8:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400adcc:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400add0:	f3c0 1445 	ubfx	r4, r0, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400add4:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400add8:	4373      	muls	r3, r6
2400adda:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400adde:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400ade2:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400ade6:	f001 041f 	and.w	r4, r1, #31
2400adea:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400adec:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400adee:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400adf2:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400adf4:	3480      	adds	r4, #128	; 0x80
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
2400adf6:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400adfa:	436c      	muls	r4, r5
    return ret;
2400adfc:	f3c4 54c4 	ubfx	r4, r4, #23, #5
2400ae00:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400ae04:	f3c1 23c4 	ubfx	r3, r1, #11, #5
2400ae08:	4373      	muls	r3, r6
2400ae0a:	fb00 3202 	mla	r2, r0, r2, r3
2400ae0e:	f102 0380 	add.w	r3, r2, #128	; 0x80
2400ae12:	436b      	muls	r3, r5
2400ae14:	0ddb      	lsrs	r3, r3, #23
}
2400ae16:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
2400ae1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400ae1c <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
2400ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ae20:	b091      	sub	sp, #68	; 0x44
2400ae22:	461d      	mov	r5, r3
2400ae24:	4680      	mov	r8, r0
2400ae26:	4689      	mov	r9, r1
2400ae28:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
2400ae2c:	4693      	mov	fp, r2
2400ae2e:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
2400ae32:	930a      	str	r3, [sp, #40]	; 0x28
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
2400ae34:	2c01      	cmp	r4, #1
{
2400ae36:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
2400ae3a:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
2400ae3c:	f240 80b9 	bls.w	2400afb2 <_lv_blend_fill+0x196>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
2400ae40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400ae42:	2b00      	cmp	r3, #0
2400ae44:	f000 80b5 	beq.w	2400afb2 <_lv_blend_fill+0x196>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
2400ae48:	f7ff f916 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400ae4c:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400ae4e:	f004 f811 	bl	2400ee74 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
2400ae52:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400ae54:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
2400ae56:	9307      	str	r3, [sp, #28]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
2400ae58:	6a73      	ldr	r3, [r6, #36]	; 0x24
2400ae5a:	b10b      	cbz	r3, 2400ae60 <_lv_blend_fill+0x44>
2400ae5c:	4630      	mov	r0, r6
2400ae5e:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
2400ae60:	464a      	mov	r2, r9
2400ae62:	4641      	mov	r1, r8
2400ae64:	a80e      	add	r0, sp, #56	; 0x38
2400ae66:	f004 f974 	bl	2400f152 <_lv_area_intersect>
    if(!is_common) return;
2400ae6a:	2800      	cmp	r0, #0
2400ae6c:	f000 80a1 	beq.w	2400afb2 <_lv_blend_fill+0x196>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
2400ae70:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
2400ae74:	8a38      	ldrh	r0, [r7, #16]
    draw_area.y1 -= disp_area->y1;
2400ae76:	f8bd 903a 	ldrh.w	r9, [sp, #58]	; 0x3a
    draw_area.x1 -= disp_area->x1;
2400ae7a:	1a0b      	subs	r3, r1, r0
    draw_area.x2 -= disp_area->x1;
    draw_area.y2 -= disp_area->y1;
2400ae7c:	f8bd a03e 	ldrh.w	sl, [sp, #62]	; 0x3e
    draw_area.x1 -= disp_area->x1;
2400ae80:	fa0f fe83 	sxth.w	lr, r3
    draw_area.y1 -= disp_area->y1;
2400ae84:	8a7b      	ldrh	r3, [r7, #18]
2400ae86:	eba9 0203 	sub.w	r2, r9, r3
    draw_area.y2 -= disp_area->y1;
2400ae8a:	ebaa 0303 	sub.w	r3, sl, r3
    draw_area.x1 -= disp_area->x1;
2400ae8e:	f8ad e038 	strh.w	lr, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
2400ae92:	fa0f f882 	sxth.w	r8, r2
    draw_area.x2 -= disp_area->x1;
2400ae96:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
2400ae9a:	b21b      	sxth	r3, r3
    draw_area.x2 -= disp_area->x1;
2400ae9c:	1a10      	subs	r0, r2, r0
    draw_area.y1 -= disp_area->y1;
2400ae9e:	f8ad 803a 	strh.w	r8, [sp, #58]	; 0x3a
    draw_area.y2 -= disp_area->y1;
2400aea2:	930b      	str	r3, [sp, #44]	; 0x2c
    draw_area.x2 -= disp_area->x1;
2400aea4:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
2400aea8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
#else
    if(mask)
2400aeac:	2d00      	cmp	r5, #0
2400aeae:	d152      	bne.n	2400af56 <_lv_blend_fill+0x13a>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
2400aeb0:	6973      	ldr	r3, [r6, #20]
2400aeb2:	2b00      	cmp	r3, #0
2400aeb4:	d169      	bne.n	2400af8a <_lv_blend_fill+0x16e>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
2400aeb6:	9b05      	ldr	r3, [sp, #20]
2400aeb8:	2b00      	cmp	r3, #0
2400aeba:	d17a      	bne.n	2400afb2 <_lv_blend_fill+0x196>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
2400aebc:	f3cb 1045 	ubfx	r0, fp, #5, #6
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400aec0:	f1c1 0101 	rsb	r1, r1, #1
2400aec4:	f00b 031f 	and.w	r3, fp, #31
2400aec8:	fa1f f68b 	uxth.w	r6, fp
2400aecc:	440a      	add	r2, r1
2400aece:	900d      	str	r0, [sp, #52]	; 0x34
2400aed0:	f3cb 20c4 	ubfx	r0, fp, #11, #5

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400aed4:	9907      	ldr	r1, [sp, #28]
2400aed6:	b212      	sxth	r2, r2
2400aed8:	900c      	str	r0, [sp, #48]	; 0x30
2400aeda:	8ab8      	ldrh	r0, [r7, #20]
2400aedc:	9206      	str	r2, [sp, #24]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400aede:	f1c9 0201 	rsb	r2, r9, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400aee2:	8a3f      	ldrh	r7, [r7, #16]
2400aee4:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400aee6:	4492      	add	sl, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400aee8:	1bc0      	subs	r0, r0, r7
    int32_t draw_area_h = lv_area_get_height(draw_area);
2400aeea:	fa0f f28a 	sxth.w	r2, sl
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400aeee:	46c2      	mov	sl, r8
2400aef0:	b200      	sxth	r0, r0
    int32_t draw_area_h = lv_area_get_height(draw_area);
2400aef2:	9209      	str	r2, [sp, #36]	; 0x24
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400aef4:	fb00 e208 	mla	r2, r0, r8, lr
2400aef8:	eb01 0742 	add.w	r7, r1, r2, lsl #1
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
                }
                disp_buf_first += disp_w;
2400aefc:	0041      	lsls	r1, r0, #1
2400aefe:	9108      	str	r1, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400af00:	990a      	ldr	r1, [sp, #40]	; 0x28
2400af02:	2901      	cmp	r1, #1
2400af04:	f040 80ec 	bne.w	2400b0e0 <_lv_blend_fill+0x2c4>
        if(opa > LV_OPA_MAX) {
2400af08:	2cfd      	cmp	r4, #253	; 0xfd
2400af0a:	f200 80a9 	bhi.w	2400b060 <_lv_blend_fill+0x244>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
2400af0e:	f8bd a014 	ldrh.w	sl, [sp, #20]
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
2400af12:	4622      	mov	r2, r4
2400af14:	4658      	mov	r0, fp
2400af16:	930b      	str	r3, [sp, #44]	; 0x2c
2400af18:	4651      	mov	r1, sl
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400af1a:	f248 0881 	movw	r8, #32897	; 0x8081
2400af1e:	f7ff ff52 	bl	2400adc6 <lv_color_mix>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
2400af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400af24:	f000 021f 	and.w	r2, r0, #31
2400af28:	f3c0 1545 	ubfx	r5, r0, #5, #6
2400af2c:	4363      	muls	r3, r4
2400af2e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
            for(y = 0; y < draw_area_h; y++) {
2400af32:	f8dd e014 	ldr.w	lr, [sp, #20]
2400af36:	9307      	str	r3, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
2400af38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2400af3a:	4363      	muls	r3, r4
2400af3c:	930a      	str	r3, [sp, #40]	; 0x28
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
2400af3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2400af40:	fb03 fb04 	mul.w	fp, r3, r4
            lv_opa_t opa_inv = 255 - opa;
2400af44:	43e4      	mvns	r4, r4
2400af46:	b2e4      	uxtb	r4, r4
            for(y = 0; y < draw_area_h; y++) {
2400af48:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400af4a:	4573      	cmp	r3, lr
2400af4c:	dd31      	ble.n	2400afb2 <_lv_blend_fill+0x196>
2400af4e:	463e      	mov	r6, r7
                for(x = 0; x < draw_area_w; x++) {
2400af50:	f04f 0c00 	mov.w	ip, #0
2400af54:	e0bc      	b.n	2400b0d0 <_lv_blend_fill+0x2b4>
2400af56:	1c53      	adds	r3, r2, #1
2400af58:	1e68      	subs	r0, r5, #1
2400af5a:	1a5b      	subs	r3, r3, r1
        int32_t mask_w = lv_area_get_width(&draw_area);
2400af5c:	b21b      	sxth	r3, r3
2400af5e:	9306      	str	r3, [sp, #24]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
2400af60:	f1c5 0301 	rsb	r3, r5, #1
2400af64:	9308      	str	r3, [sp, #32]
2400af66:	9b08      	ldr	r3, [sp, #32]
2400af68:	eb03 0c00 	add.w	ip, r3, r0
2400af6c:	9b06      	ldr	r3, [sp, #24]
2400af6e:	4563      	cmp	r3, ip
2400af70:	dd9e      	ble.n	2400aeb0 <_lv_blend_fill+0x94>
2400af72:	f810 cf01 	ldrb.w	ip, [r0, #1]!
2400af76:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
2400af7a:	f04f 3cff 	mov.w	ip, #4294967295
2400af7e:	bf98      	it	ls
2400af80:	f04f 0c00 	movls.w	ip, #0
2400af84:	f880 c000 	strb.w	ip, [r0]
2400af88:	e7ed      	b.n	2400af66 <_lv_blend_fill+0x14a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
2400af8a:	f7ff f875 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400af8e:	f8b7 8014 	ldrh.w	r8, [r7, #20]
2400af92:	8a3b      	ldrh	r3, [r7, #16]
2400af94:	f108 0801 	add.w	r8, r8, #1
2400af98:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
2400af9c:	eba8 0803 	sub.w	r8, r8, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400afa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400afa2:	2b01      	cmp	r3, #1
2400afa4:	fa0f f888 	sxth.w	r8, r8
2400afa8:	d11e      	bne.n	2400afe8 <_lv_blend_fill+0x1cc>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400afaa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
2400afae:	429e      	cmp	r6, r3
2400afb0:	dd02      	ble.n	2400afb8 <_lv_blend_fill+0x19c>
}
2400afb2:	b011      	add	sp, #68	; 0x44
2400afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400afb8:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
2400afbc:	fa0f f986 	sxth.w	r9, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400afc0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
2400afc4:	429f      	cmp	r7, r3
2400afc6:	dd01      	ble.n	2400afcc <_lv_blend_fill+0x1b0>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400afc8:	3601      	adds	r6, #1
2400afca:	e7ee      	b.n	2400afaa <_lv_blend_fill+0x18e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
2400afcc:	b23b      	sxth	r3, r7
2400afce:	9402      	str	r4, [sp, #8]
2400afd0:	f8ad b004 	strh.w	fp, [sp, #4]
2400afd4:	4642      	mov	r2, r8
2400afd6:	f8cd 9000 	str.w	r9, [sp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400afda:	3701      	adds	r7, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
2400afdc:	6945      	ldr	r5, [r0, #20]
2400afde:	9907      	ldr	r1, [sp, #28]
2400afe0:	9005      	str	r0, [sp, #20]
2400afe2:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400afe4:	9805      	ldr	r0, [sp, #20]
2400afe6:	e7eb      	b.n	2400afc0 <_lv_blend_fill+0x1a4>
2400afe8:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
2400afec:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
2400aff0:	f109 0901 	add.w	r9, r9, #1
2400aff4:	1aed      	subs	r5, r5, r3
2400aff6:	eba9 0903 	sub.w	r9, r9, r3
2400affa:	fa0f f989 	sxth.w	r9, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400affe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
2400b002:	429e      	cmp	r6, r3
2400b004:	dcd5      	bgt.n	2400afb2 <_lv_blend_fill+0x196>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
2400b006:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b008:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
2400b00c:	9305      	str	r3, [sp, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b00e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
2400b012:	459a      	cmp	sl, r3
2400b014:	dd02      	ble.n	2400b01c <_lv_blend_fill+0x200>
            mask_tmp += draw_area_w;
2400b016:	444d      	add	r5, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b018:	3601      	adds	r6, #1
2400b01a:	e7f0      	b.n	2400affe <_lv_blend_fill+0x1e2>
                if(mask_tmp[x]) {
2400b01c:	f815 300a 	ldrb.w	r3, [r5, sl]
2400b020:	b17b      	cbz	r3, 2400b042 <_lv_blend_fill+0x226>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
2400b022:	fb14 f303 	smulbb	r3, r4, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
2400b026:	f8ad b004 	strh.w	fp, [sp, #4]
2400b02a:	4642      	mov	r2, r8
2400b02c:	9907      	ldr	r1, [sp, #28]
2400b02e:	0a1b      	lsrs	r3, r3, #8
2400b030:	9006      	str	r0, [sp, #24]
2400b032:	9302      	str	r3, [sp, #8]
2400b034:	9b05      	ldr	r3, [sp, #20]
2400b036:	9300      	str	r3, [sp, #0]
2400b038:	fa0f f38a 	sxth.w	r3, sl
2400b03c:	6947      	ldr	r7, [r0, #20]
2400b03e:	47b8      	blx	r7
2400b040:	9806      	ldr	r0, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b042:	f10a 0a01 	add.w	sl, sl, #1
2400b046:	e7e2      	b.n	2400b00e <_lv_blend_fill+0x1f2>
                lv_color_fill(disp_buf_first, color, draw_area_w);
2400b048:	4638      	mov	r0, r7
2400b04a:	9a06      	ldr	r2, [sp, #24]
2400b04c:	4631      	mov	r1, r6
            for(y = 0; y < draw_area_h; y++) {
2400b04e:	3401      	adds	r4, #1
                lv_color_fill(disp_buf_first, color, draw_area_w);
2400b050:	f004 fae3 	bl	2400f61a <lv_color_fill>
                disp_buf_first += disp_w;
2400b054:	9b08      	ldr	r3, [sp, #32]
2400b056:	441f      	add	r7, r3
            for(y = 0; y < draw_area_h; y++) {
2400b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400b05a:	42a3      	cmp	r3, r4
2400b05c:	dcf4      	bgt.n	2400b048 <_lv_blend_fill+0x22c>
2400b05e:	e7a8      	b.n	2400afb2 <_lv_blend_fill+0x196>
2400b060:	9c05      	ldr	r4, [sp, #20]
2400b062:	e7f9      	b.n	2400b058 <_lv_blend_fill+0x23c>
                    if(last_dest_color.full != disp_buf_first[x].full) {
2400b064:	4631      	mov	r1, r6
2400b066:	fa1f f98a 	uxth.w	r9, sl
2400b06a:	3602      	adds	r6, #2
2400b06c:	880b      	ldrh	r3, [r1, #0]
2400b06e:	4599      	cmp	r9, r3
2400b070:	d01f      	beq.n	2400b0b2 <_lv_blend_fill+0x296>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b072:	7848      	ldrb	r0, [r1, #1]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b074:	f3c3 1345 	ubfx	r3, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b078:	9a07      	ldr	r2, [sp, #28]
2400b07a:	08c0      	lsrs	r0, r0, #3
                        last_dest_color = disp_buf_first[x];
2400b07c:	f836 ac02 	ldrh.w	sl, [r6, #-2]
2400b080:	fb00 2004 	mla	r0, r0, r4, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2400b086:	fb03 2304 	mla	r3, r3, r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b08a:	780a      	ldrb	r2, [r1, #0]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b08c:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b08e:	f002 021f 	and.w	r2, r2, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b092:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b094:	fb08 f000 	mul.w	r0, r8, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b098:	fb02 b204 	mla	r2, r2, r4, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b09c:	fb08 f303 	mul.w	r3, r8, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b0a0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b0a4:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b0a6:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400b0aa:	fb08 f202 	mul.w	r2, r8, r2
2400b0ae:	f3c2 52c4 	ubfx	r2, r2, #23, #5
                    disp_buf_first[x] = last_res_color;
2400b0b2:	780b      	ldrb	r3, [r1, #0]
                for(x = 0; x < draw_area_w; x++) {
2400b0b4:	f10c 0c01 	add.w	ip, ip, #1
                    disp_buf_first[x] = last_res_color;
2400b0b8:	f362 0304 	bfi	r3, r2, #0, #5
2400b0bc:	700b      	strb	r3, [r1, #0]
2400b0be:	880b      	ldrh	r3, [r1, #0]
2400b0c0:	f365 134a 	bfi	r3, r5, #5, #6
2400b0c4:	800b      	strh	r3, [r1, #0]
2400b0c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
2400b0ca:	f360 03c7 	bfi	r3, r0, #3, #5
2400b0ce:	704b      	strb	r3, [r1, #1]
                for(x = 0; x < draw_area_w; x++) {
2400b0d0:	9b06      	ldr	r3, [sp, #24]
2400b0d2:	4563      	cmp	r3, ip
2400b0d4:	dcc6      	bgt.n	2400b064 <_lv_blend_fill+0x248>
                disp_buf_first += disp_w;
2400b0d6:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
2400b0d8:	f10e 0e01 	add.w	lr, lr, #1
                disp_buf_first += disp_w;
2400b0dc:	441f      	add	r7, r3
            for(y = 0; y < draw_area_h; y++) {
2400b0de:	e733      	b.n	2400af48 <_lv_blend_fill+0x12c>

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
        last_dest_color.full = disp_buf_first[0].full;
2400b0e0:	9b07      	ldr	r3, [sp, #28]
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
2400b0e2:	2cfd      	cmp	r4, #253	; 0xfd
        last_dest_color.full = disp_buf_first[0].full;
2400b0e4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
        if(opa > LV_OPA_MAX) {
2400b0e8:	f240 80be 	bls.w	2400b268 <_lv_blend_fill+0x44c>
        int32_t x_end4 = draw_area_w - 4;
2400b0ec:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
2400b0ee:	f8dd a014 	ldr.w	sl, [sp, #20]
        int32_t x_end4 = draw_area_w - 4;
2400b0f2:	f1a3 0904 	sub.w	r9, r3, #4
            for(y = 0; y < draw_area_h; y++) {
2400b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400b0f8:	4553      	cmp	r3, sl
2400b0fa:	f77f af5a 	ble.w	2400afb2 <_lv_blend_fill+0x196>
2400b0fe:	462c      	mov	r4, r5
#else
                    FILL_NORMAL_MASK_PX(x, color)
#endif
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b100:	f04f 0800 	mov.w	r8, #0
2400b104:	e012      	b.n	2400b12c <_lv_blend_fill+0x310>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
2400b106:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
2400b10a:	4630      	mov	r0, r6
2400b10c:	f7ff fe5b 	bl	2400adc6 <lv_color_mix>
2400b110:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
2400b114:	e008      	b.n	2400b128 <_lv_blend_fill+0x30c>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b116:	07a3      	lsls	r3, r4, #30
2400b118:	d00c      	beq.n	2400b134 <_lv_blend_fill+0x318>
                    FILL_NORMAL_MASK_PX(x, color)
2400b11a:	f814 2b01 	ldrb.w	r2, [r4], #1
2400b11e:	b11a      	cbz	r2, 2400b128 <_lv_blend_fill+0x30c>
2400b120:	2aff      	cmp	r2, #255	; 0xff
2400b122:	d1f0      	bne.n	2400b106 <_lv_blend_fill+0x2ea>
2400b124:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b128:	f108 0801 	add.w	r8, r8, #1
2400b12c:	9b06      	ldr	r3, [sp, #24]
2400b12e:	46a3      	mov	fp, r4
2400b130:	4543      	cmp	r3, r8
2400b132:	dcf0      	bgt.n	2400b116 <_lv_blend_fill+0x2fa>
2400b134:	eb07 0448 	add.w	r4, r7, r8, lsl #1
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x <= x_end4; x += 4) {
2400b138:	45c1      	cmp	r9, r8
2400b13a:	da0b      	bge.n	2400b154 <_lv_blend_fill+0x338>
2400b13c:	f10b 3bff 	add.w	fp, fp, #4294967295
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
2400b140:	9b06      	ldr	r3, [sp, #24]
2400b142:	4543      	cmp	r3, r8
2400b144:	dc45      	bgt.n	2400b1d2 <_lv_blend_fill+0x3b6>
#else
                    FILL_NORMAL_MASK_PX(x, color)
#endif
                }
#endif
                disp_buf_first += disp_w;
2400b146:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
2400b148:	f10a 0a01 	add.w	sl, sl, #1
                disp_buf_first += disp_w;
2400b14c:	441f      	add	r7, r3
                mask += draw_area_w;
2400b14e:	9b06      	ldr	r3, [sp, #24]
2400b150:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
2400b152:	e7d0      	b.n	2400b0f6 <_lv_blend_fill+0x2da>
                    if(*mask32) {
2400b154:	f8db 3000 	ldr.w	r3, [fp]
2400b158:	b12b      	cbz	r3, 2400b166 <_lv_blend_fill+0x34a>
                        if((*mask32) == 0xFFFFFFFF) {
2400b15a:	3301      	adds	r3, #1
2400b15c:	d109      	bne.n	2400b172 <_lv_blend_fill+0x356>
                            disp_buf_first[x] = color;
2400b15e:	8026      	strh	r6, [r4, #0]
                            disp_buf_first[x + 1] = color;
2400b160:	8066      	strh	r6, [r4, #2]
                            disp_buf_first[x + 2] = color;
2400b162:	80a6      	strh	r6, [r4, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
2400b164:	80e6      	strh	r6, [r4, #6]
                    mask32++;
2400b166:	f10b 0b04 	add.w	fp, fp, #4
                for(; x <= x_end4; x += 4) {
2400b16a:	f108 0804 	add.w	r8, r8, #4
2400b16e:	3408      	adds	r4, #8
2400b170:	e7e2      	b.n	2400b138 <_lv_blend_fill+0x31c>
                            FILL_NORMAL_MASK_PX(x, color)
2400b172:	f89b 2000 	ldrb.w	r2, [fp]
2400b176:	b112      	cbz	r2, 2400b17e <_lv_blend_fill+0x362>
2400b178:	2aff      	cmp	r2, #255	; 0xff
2400b17a:	d118      	bne.n	2400b1ae <_lv_blend_fill+0x392>
2400b17c:	8026      	strh	r6, [r4, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
2400b17e:	f89b 2001 	ldrb.w	r2, [fp, #1]
2400b182:	b112      	cbz	r2, 2400b18a <_lv_blend_fill+0x36e>
2400b184:	2aff      	cmp	r2, #255	; 0xff
2400b186:	d118      	bne.n	2400b1ba <_lv_blend_fill+0x39e>
2400b188:	8066      	strh	r6, [r4, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
2400b18a:	f89b 2002 	ldrb.w	r2, [fp, #2]
2400b18e:	b112      	cbz	r2, 2400b196 <_lv_blend_fill+0x37a>
2400b190:	2aff      	cmp	r2, #255	; 0xff
2400b192:	d118      	bne.n	2400b1c6 <_lv_blend_fill+0x3aa>
2400b194:	80a6      	strh	r6, [r4, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
2400b196:	f89b 2003 	ldrb.w	r2, [fp, #3]
2400b19a:	2a00      	cmp	r2, #0
2400b19c:	d0e3      	beq.n	2400b166 <_lv_blend_fill+0x34a>
2400b19e:	2aff      	cmp	r2, #255	; 0xff
2400b1a0:	d0e0      	beq.n	2400b164 <_lv_blend_fill+0x348>
2400b1a2:	88e1      	ldrh	r1, [r4, #6]
2400b1a4:	4630      	mov	r0, r6
2400b1a6:	f7ff fe0e 	bl	2400adc6 <lv_color_mix>
2400b1aa:	80e0      	strh	r0, [r4, #6]
2400b1ac:	e7db      	b.n	2400b166 <_lv_blend_fill+0x34a>
                            FILL_NORMAL_MASK_PX(x, color)
2400b1ae:	8821      	ldrh	r1, [r4, #0]
2400b1b0:	4630      	mov	r0, r6
2400b1b2:	f7ff fe08 	bl	2400adc6 <lv_color_mix>
2400b1b6:	8020      	strh	r0, [r4, #0]
2400b1b8:	e7e1      	b.n	2400b17e <_lv_blend_fill+0x362>
                            FILL_NORMAL_MASK_PX(x + 1, color)
2400b1ba:	8861      	ldrh	r1, [r4, #2]
2400b1bc:	4630      	mov	r0, r6
2400b1be:	f7ff fe02 	bl	2400adc6 <lv_color_mix>
2400b1c2:	8060      	strh	r0, [r4, #2]
2400b1c4:	e7e1      	b.n	2400b18a <_lv_blend_fill+0x36e>
                            FILL_NORMAL_MASK_PX(x + 2, color)
2400b1c6:	88a1      	ldrh	r1, [r4, #4]
2400b1c8:	4630      	mov	r0, r6
2400b1ca:	f7ff fdfc 	bl	2400adc6 <lv_color_mix>
2400b1ce:	80a0      	strh	r0, [r4, #4]
2400b1d0:	e7e1      	b.n	2400b196 <_lv_blend_fill+0x37a>
                    FILL_NORMAL_MASK_PX(x, color)
2400b1d2:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
2400b1d6:	b11a      	cbz	r2, 2400b1e0 <_lv_blend_fill+0x3c4>
2400b1d8:	2aff      	cmp	r2, #255	; 0xff
2400b1da:	d104      	bne.n	2400b1e6 <_lv_blend_fill+0x3ca>
2400b1dc:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
2400b1e0:	f108 0801 	add.w	r8, r8, #1
2400b1e4:	e7ac      	b.n	2400b140 <_lv_blend_fill+0x324>
                    FILL_NORMAL_MASK_PX(x, color)
2400b1e6:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
2400b1ea:	4630      	mov	r0, r6
2400b1ec:	f7ff fdeb 	bl	2400adc6 <lv_color_mix>
2400b1f0:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
2400b1f4:	e7f4      	b.n	2400b1e0 <_lv_blend_fill+0x3c4>
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
                const lv_opa_t * mask_tmp_x = mask;
                for(x = 0; x < draw_area_w; x++) {
                    if(*mask_tmp_x) {
2400b1f6:	f815 800b 	ldrb.w	r8, [r5, fp]
2400b1fa:	f1b8 0f00 	cmp.w	r8, #0
2400b1fe:	d01e      	beq.n	2400b23e <_lv_blend_fill+0x422>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
2400b200:	9805      	ldr	r0, [sp, #20]
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
2400b202:	f8b9 3000 	ldrh.w	r3, [r9]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
2400b206:	4580      	cmp	r8, r0
2400b208:	d014      	beq.n	2400b234 <_lv_blend_fill+0x418>
2400b20a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
2400b20e:	bf16      	itet	ne
2400b210:	fb18 f204 	smulbbne	r2, r8, r4
2400b214:	4622      	moveq	r2, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
2400b216:	0a12      	lsrne	r2, r2, #8
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
2400b218:	f8b9 1000 	ldrh.w	r1, [r9]
2400b21c:	4630      	mov	r0, r6
2400b21e:	9309      	str	r3, [sp, #36]	; 0x24
2400b220:	9207      	str	r2, [sp, #28]
2400b222:	f7ff fdd0 	bl	2400adc6 <lv_color_mix>
2400b226:	9a07      	ldr	r2, [sp, #28]
2400b228:	fa1f fc80 	uxth.w	ip, r0
                            }
                            last_mask = *mask_tmp_x;
                            last_dest_color.full = disp_buf_first[x].full;
2400b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
2400b22e:	f8cd 8014 	str.w	r8, [sp, #20]
2400b232:	e001      	b.n	2400b238 <_lv_blend_fill+0x41c>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
2400b234:	4299      	cmp	r1, r3
2400b236:	d1ef      	bne.n	2400b218 <_lv_blend_fill+0x3fc>
2400b238:	4619      	mov	r1, r3
                        }
                        disp_buf_first[x] = last_res_color;
2400b23a:	f8a9 c000 	strh.w	ip, [r9]
                for(x = 0; x < draw_area_w; x++) {
2400b23e:	f10b 0b01 	add.w	fp, fp, #1
2400b242:	f109 0902 	add.w	r9, r9, #2
2400b246:	9b06      	ldr	r3, [sp, #24]
2400b248:	455b      	cmp	r3, fp
2400b24a:	dcd4      	bgt.n	2400b1f6 <_lv_blend_fill+0x3da>
                    }
                    mask_tmp_x++;
                }
                disp_buf_first += disp_w;
2400b24c:	9b08      	ldr	r3, [sp, #32]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b24e:	f10a 0a01 	add.w	sl, sl, #1
                disp_buf_first += disp_w;
2400b252:	441f      	add	r7, r3
                mask += draw_area_w;
2400b254:	9b06      	ldr	r3, [sp, #24]
2400b256:	441d      	add	r5, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2400b25a:	459a      	cmp	sl, r3
2400b25c:	f73f aea9 	bgt.w	2400afb2 <_lv_blend_fill+0x196>
2400b260:	46b9      	mov	r9, r7
                for(x = 0; x < draw_area_w; x++) {
2400b262:	f04f 0b00 	mov.w	fp, #0
2400b266:	e7ee      	b.n	2400b246 <_lv_blend_fill+0x42a>
        last_res_color.full = disp_buf_first[0].full;
2400b268:	468c      	mov	ip, r1
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
2400b26a:	9a05      	ldr	r2, [sp, #20]
2400b26c:	e7f4      	b.n	2400b258 <_lv_blend_fill+0x43c>

2400b26e <_lv_blend_map>:
{
2400b26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400b272:	ed2d 8b02 	vpush	{d8}
2400b276:	b08d      	sub	sp, #52	; 0x34
2400b278:	4689      	mov	r9, r1
2400b27a:	9304      	str	r3, [sp, #16]
2400b27c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
2400b280:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
2400b284:	9308      	str	r3, [sp, #32]
2400b286:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
2400b28a:	9207      	str	r2, [sp, #28]
    if(opa < LV_OPA_MIN) return;
2400b28c:	2b01      	cmp	r3, #1
{
2400b28e:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
2400b290:	f240 80cb 	bls.w	2400b42a <_lv_blend_map+0x1bc>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
2400b294:	9b08      	ldr	r3, [sp, #32]
2400b296:	2b00      	cmp	r3, #0
2400b298:	f000 80c7 	beq.w	2400b42a <_lv_blend_map+0x1bc>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
2400b29c:	460a      	mov	r2, r1
2400b29e:	4601      	mov	r1, r0
2400b2a0:	a80a      	add	r0, sp, #40	; 0x28
2400b2a2:	f003 ff56 	bl	2400f152 <_lv_area_intersect>
    if(!is_common) return;
2400b2a6:	2800      	cmp	r0, #0
2400b2a8:	f000 80bf 	beq.w	2400b42a <_lv_blend_map+0x1bc>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
2400b2ac:	f7fe fee4 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400b2b0:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400b2b2:	f003 fddf 	bl	2400ee74 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
2400b2b6:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400b2b8:	4683      	mov	fp, r0
    lv_color_t * disp_buf = vdb->buf_act;
2400b2ba:	ee08 3a10 	vmov	s16, r3
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
2400b2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400b2c0:	b10b      	cbz	r3, 2400b2c6 <_lv_blend_map+0x58>
2400b2c2:	4620      	mov	r0, r4
2400b2c4:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
2400b2c6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
2400b2ca:	f8bb 0010 	ldrh.w	r0, [fp, #16]
    draw_area.y1 -= disp_area->y1;
2400b2ce:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    draw_area.x1 -= disp_area->x1;
2400b2d2:	1a13      	subs	r3, r2, r0
    draw_area.x2 -= disp_area->x1;
2400b2d4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
2400b2d8:	fa0f fa83 	sxth.w	sl, r3
    draw_area.y1 -= disp_area->y1;
2400b2dc:	f8bb 3012 	ldrh.w	r3, [fp, #18]
    draw_area.x2 -= disp_area->x1;
2400b2e0:	1a30      	subs	r0, r6, r0
    draw_area.y1 -= disp_area->y1;
2400b2e2:	1acd      	subs	r5, r1, r3
    draw_area.x1 -= disp_area->x1;
2400b2e4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
    draw_area.x2 -= disp_area->x1;
2400b2e8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
2400b2ec:	fa0f fe85 	sxth.w	lr, r5
    draw_area.y2 -= disp_area->y1;
2400b2f0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
2400b2f4:	1aeb      	subs	r3, r5, r3
    draw_area.y1 -= disp_area->y1;
2400b2f6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
2400b2fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    if(mask)
2400b2fe:	9b04      	ldr	r3, [sp, #16]
2400b300:	2b00      	cmp	r3, #0
2400b302:	d14c      	bne.n	2400b39e <_lv_blend_map+0x130>
    if(disp->driver.set_px_cb) {
2400b304:	6963      	ldr	r3, [r4, #20]
2400b306:	2b00      	cmp	r3, #0
2400b308:	d15e      	bne.n	2400b3c8 <_lv_blend_map+0x15a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
2400b30a:	f1b8 0f00 	cmp.w	r8, #0
2400b30e:	f040 808c 	bne.w	2400b42a <_lv_blend_map+0x1bc>
2400b312:	f8bb 3014 	ldrh.w	r3, [fp, #20]
2400b316:	f1c2 0201 	rsb	r2, r2, #1
2400b31a:	f9bb 0010 	ldrsh.w	r0, [fp, #16]
2400b31e:	3301      	adds	r3, #1
2400b320:	4416      	add	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400b322:	f1c1 0201 	rsb	r2, r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400b326:	f8b9 7004 	ldrh.w	r7, [r9, #4]
2400b32a:	1a1b      	subs	r3, r3, r0

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400b32c:	ee18 1a10 	vmov	r1, s16
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400b330:	4415      	add	r5, r2

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b332:	f9bb 4012 	ldrsh.w	r4, [fp, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400b336:	b21b      	sxth	r3, r3
2400b338:	3701      	adds	r7, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
2400b33a:	b22a      	sxth	r2, r5
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400b33c:	fb03 a50e 	mla	r5, r3, lr, sl
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
                disp_buf_first += disp_w;
2400b340:	005b      	lsls	r3, r3, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
2400b342:	9206      	str	r2, [sp, #24]
2400b344:	b236      	sxth	r6, r6
2400b346:	f9b9 2000 	ldrsh.w	r2, [r9]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
2400b34a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b34e:	f9b9 1002 	ldrsh.w	r1, [r9, #2]
2400b352:	1abf      	subs	r7, r7, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
2400b354:	1a12      	subs	r2, r2, r0
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b356:	1b09      	subs	r1, r1, r4
2400b358:	b23f      	sxth	r7, r7
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
2400b35a:	ebaa 0402 	sub.w	r4, sl, r2
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b35e:	ebae 0101 	sub.w	r1, lr, r1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
2400b362:	9a07      	ldr	r2, [sp, #28]
                disp_buf_first += disp_w;
2400b364:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400b366:	9b08      	ldr	r3, [sp, #32]
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
2400b368:	fb07 4401 	mla	r4, r7, r1, r4
                map_buf_first += map_w;
2400b36c:	007f      	lsls	r7, r7, #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400b36e:	2b01      	cmp	r3, #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
2400b370:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if(opa > LV_OPA_MAX) {
2400b374:	9b05      	ldr	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400b376:	f040 80c9 	bne.w	2400b50c <_lv_blend_map+0x29e>
        if(opa > LV_OPA_MAX) {
2400b37a:	2bfd      	cmp	r3, #253	; 0xfd
2400b37c:	f240 80c0 	bls.w	2400b500 <_lv_blend_map+0x292>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
2400b380:	0076      	lsls	r6, r6, #1
            for(y = 0; y < draw_area_h; y++) {
2400b382:	9b06      	ldr	r3, [sp, #24]
2400b384:	4543      	cmp	r3, r8
2400b386:	dd50      	ble.n	2400b42a <_lv_blend_map+0x1bc>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
2400b388:	4621      	mov	r1, r4
2400b38a:	4628      	mov	r0, r5
2400b38c:	4632      	mov	r2, r6
                map_buf_first += map_w;
2400b38e:	443c      	add	r4, r7
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
2400b390:	f004 fb8c 	bl	2400faac <_lv_memcpy>
                disp_buf_first += disp_w;
2400b394:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
2400b396:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
2400b39a:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
2400b39c:	e7f1      	b.n	2400b382 <_lv_blend_map+0x114>
2400b39e:	1c73      	adds	r3, r6, #1
2400b3a0:	9804      	ldr	r0, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
2400b3a2:	9f04      	ldr	r7, [sp, #16]
2400b3a4:	1a9b      	subs	r3, r3, r2
2400b3a6:	3801      	subs	r0, #1
2400b3a8:	f1c7 0c01 	rsb	ip, r7, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
2400b3ac:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
2400b3ae:	eb0c 0700 	add.w	r7, ip, r0
2400b3b2:	42bb      	cmp	r3, r7
2400b3b4:	dda6      	ble.n	2400b304 <_lv_blend_map+0x96>
2400b3b6:	f810 7f01 	ldrb.w	r7, [r0, #1]!
2400b3ba:	2f80      	cmp	r7, #128	; 0x80
2400b3bc:	f04f 37ff 	mov.w	r7, #4294967295
2400b3c0:	bf98      	it	ls
2400b3c2:	2700      	movls	r7, #0
2400b3c4:	7007      	strb	r7, [r0, #0]
2400b3c6:	e7f2      	b.n	2400b3ae <_lv_blend_map+0x140>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
2400b3c8:	f7fe fe56 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400b3cc:	f8b9 5004 	ldrh.w	r5, [r9, #4]
2400b3d0:	f9b9 1000 	ldrsh.w	r1, [r9]
2400b3d4:	4607      	mov	r7, r0
2400b3d6:	f8bb 2014 	ldrh.w	r2, [fp, #20]
2400b3da:	3501      	adds	r5, #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b3dc:	f9b9 c002 	ldrsh.w	ip, [r9, #2]
2400b3e0:	f9bb e012 	ldrsh.w	lr, [fp, #18]
2400b3e4:	1a6d      	subs	r5, r5, r1
2400b3e6:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
2400b3ea:	3201      	adds	r2, #1
2400b3ec:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
2400b3f0:	ebac 0c0e 	sub.w	ip, ip, lr
2400b3f4:	1b12      	subs	r2, r2, r4
2400b3f6:	b22d      	sxth	r5, r5
    map_buf_tmp -= draw_area->x1;
2400b3f8:	1a64      	subs	r4, r4, r1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
2400b3fa:	eba6 0c0c 	sub.w	ip, r6, ip
    map_buf_tmp -= draw_area->x1;
2400b3fe:	9907      	ldr	r1, [sp, #28]
2400b400:	b212      	sxth	r2, r2
2400b402:	fb05 440c 	mla	r4, r5, ip, r4
2400b406:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
2400b40a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
2400b40e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
2400b412:	9908      	ldr	r1, [sp, #32]
2400b414:	f1c3 0a00 	rsb	sl, r3, #0
2400b418:	2901      	cmp	r1, #1
2400b41a:	ea4f 0145 	mov.w	r1, r5, lsl #1
2400b41e:	9106      	str	r1, [sp, #24]
2400b420:	d128      	bne.n	2400b474 <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b422:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
2400b426:	429e      	cmp	r6, r3
2400b428:	dd04      	ble.n	2400b434 <_lv_blend_map+0x1c6>
}
2400b42a:	b00d      	add	sp, #52	; 0x34
2400b42c:	ecbd 8b02 	vpop	{d8}
2400b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b434:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
2400b438:	fa0f f986 	sxth.w	r9, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b43c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
2400b440:	4598      	cmp	r8, r3
2400b442:	dd03      	ble.n	2400b44c <_lv_blend_map+0x1de>
            map_buf_tmp += map_w;
2400b444:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b446:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
2400b448:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b44a:	e7ea      	b.n	2400b422 <_lv_blend_map+0x1b4>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
2400b44c:	9b05      	ldr	r3, [sp, #20]
2400b44e:	ee18 1a10 	vmov	r1, s16
2400b452:	4638      	mov	r0, r7
2400b454:	9204      	str	r2, [sp, #16]
2400b456:	9302      	str	r3, [sp, #8]
2400b458:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
2400b45c:	f8cd 9000 	str.w	r9, [sp]
2400b460:	f8ad 3004 	strh.w	r3, [sp, #4]
2400b464:	fa0f f388 	sxth.w	r3, r8
2400b468:	697d      	ldr	r5, [r7, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b46a:	f108 0801 	add.w	r8, r8, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
2400b46e:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b470:	9a04      	ldr	r2, [sp, #16]
2400b472:	e7e3      	b.n	2400b43c <_lv_blend_map+0x1ce>
2400b474:	f108 0801 	add.w	r8, r8, #1
2400b478:	eba8 0803 	sub.w	r8, r8, r3
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
2400b47c:	9b04      	ldr	r3, [sp, #16]
2400b47e:	4453      	add	r3, sl
2400b480:	fa0f f888 	sxth.w	r8, r8
2400b484:	469a      	mov	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b486:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
2400b48a:	429e      	cmp	r6, r3
2400b48c:	dccd      	bgt.n	2400b42a <_lv_blend_map+0x1bc>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b48e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
2400b492:	fa0f fb86 	sxth.w	fp, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b496:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
2400b49a:	4599      	cmp	r9, r3
2400b49c:	dd04      	ble.n	2400b4a8 <_lv_blend_map+0x23a>
            map_buf_tmp += map_w;
2400b49e:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
2400b4a0:	44c2      	add	sl, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b4a2:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
2400b4a4:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
2400b4a6:	e7ee      	b.n	2400b486 <_lv_blend_map+0x218>
                if(mask_tmp[x]) {
2400b4a8:	f81a 3009 	ldrb.w	r3, [sl, r9]
2400b4ac:	b19b      	cbz	r3, 2400b4d6 <_lv_blend_map+0x268>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
2400b4ae:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
2400b4b0:	4638      	mov	r0, r7
2400b4b2:	9204      	str	r2, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
2400b4b4:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
2400b4b8:	ee18 1a10 	vmov	r1, s16
2400b4bc:	0a1b      	lsrs	r3, r3, #8
2400b4be:	9302      	str	r3, [sp, #8]
2400b4c0:	f834 3019 	ldrh.w	r3, [r4, r9, lsl #1]
2400b4c4:	f8cd b000 	str.w	fp, [sp]
2400b4c8:	f8ad 3004 	strh.w	r3, [sp, #4]
2400b4cc:	fa0f f389 	sxth.w	r3, r9
2400b4d0:	697d      	ldr	r5, [r7, #20]
2400b4d2:	47a8      	blx	r5
2400b4d4:	9a04      	ldr	r2, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
2400b4d6:	f109 0901 	add.w	r9, r9, #1
2400b4da:	e7dc      	b.n	2400b496 <_lv_blend_map+0x228>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
2400b4dc:	f835 1019 	ldrh.w	r1, [r5, r9, lsl #1]
2400b4e0:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
2400b4e4:	9a05      	ldr	r2, [sp, #20]
2400b4e6:	f7ff fc6e 	bl	2400adc6 <lv_color_mix>
2400b4ea:	f825 0019 	strh.w	r0, [r5, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
2400b4ee:	f109 0901 	add.w	r9, r9, #1
2400b4f2:	454e      	cmp	r6, r9
2400b4f4:	dcf2      	bgt.n	2400b4dc <_lv_blend_map+0x26e>
                    }
                }
                disp_buf_first += disp_w;
2400b4f6:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
2400b4f8:	443c      	add	r4, r7
            for(y = 0; y < draw_area_h; y++) {
2400b4fa:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
2400b4fe:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
2400b500:	9b06      	ldr	r3, [sp, #24]
2400b502:	4543      	cmp	r3, r8
2400b504:	dd91      	ble.n	2400b42a <_lv_blend_map+0x1bc>
                for(x = 0; x < draw_area_w; x++) {
2400b506:	f04f 0900 	mov.w	r9, #0
2400b50a:	e7f2      	b.n	2400b4f2 <_lv_blend_map+0x284>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
2400b50c:	2bfd      	cmp	r3, #253	; 0xfd
2400b50e:	f240 80e1 	bls.w	2400b6d4 <_lv_blend_map+0x466>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
2400b512:	1f33      	subs	r3, r6, #4

            for(y = 0; y < draw_area_h; y++) {
2400b514:	f8cd 8014 	str.w	r8, [sp, #20]
            int32_t x_end4 = draw_area_w - 4;
2400b518:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
2400b51a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
2400b51e:	4293      	cmp	r3, r2
2400b520:	dd83      	ble.n	2400b42a <_lv_blend_map+0x1bc>
2400b522:	9b04      	ldr	r3, [sp, #16]
2400b524:	46a3      	mov	fp, r4
2400b526:	46aa      	mov	sl, r5
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b528:	f04f 0800 	mov.w	r8, #0
2400b52c:	e01b      	b.n	2400b566 <_lv_blend_map+0x2f8>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
2400b52e:	f8ba 1000 	ldrh.w	r1, [sl]
2400b532:	f8bb 0000 	ldrh.w	r0, [fp]
2400b536:	9309      	str	r3, [sp, #36]	; 0x24
2400b538:	f7ff fc45 	bl	2400adc6 <lv_color_mix>
2400b53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400b53e:	f8aa 0000 	strh.w	r0, [sl]
2400b542:	e00a      	b.n	2400b55a <_lv_blend_map+0x2ec>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b544:	079a      	lsls	r2, r3, #30
2400b546:	d011      	beq.n	2400b56c <_lv_blend_map+0x2fe>
                    MAP_NORMAL_MASK_PX(x)
2400b548:	f813 2b01 	ldrb.w	r2, [r3], #1
2400b54c:	b12a      	cbz	r2, 2400b55a <_lv_blend_map+0x2ec>
2400b54e:	2aff      	cmp	r2, #255	; 0xff
2400b550:	d1ed      	bne.n	2400b52e <_lv_blend_map+0x2c0>
2400b552:	f8bb 2000 	ldrh.w	r2, [fp]
2400b556:	f8aa 2000 	strh.w	r2, [sl]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
2400b55a:	f108 0801 	add.w	r8, r8, #1
2400b55e:	f10b 0b02 	add.w	fp, fp, #2
2400b562:	f10a 0a02 	add.w	sl, sl, #2
2400b566:	4546      	cmp	r6, r8
2400b568:	4699      	mov	r9, r3
2400b56a:	dceb      	bgt.n	2400b544 <_lv_blend_map+0x2d6>
2400b56c:	eb04 0b48 	add.w	fp, r4, r8, lsl #1
2400b570:	eb05 0a48 	add.w	sl, r5, r8, lsl #1
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
2400b574:	9b08      	ldr	r3, [sp, #32]
2400b576:	4543      	cmp	r3, r8
2400b578:	dc11      	bgt.n	2400b59e <_lv_blend_map+0x330>
2400b57a:	f109 39ff 	add.w	r9, r9, #4294967295
2400b57e:	eb04 0b48 	add.w	fp, r4, r8, lsl #1
2400b582:	eb05 0a48 	add.w	sl, r5, r8, lsl #1
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
2400b586:	4546      	cmp	r6, r8
2400b588:	dc6c      	bgt.n	2400b664 <_lv_blend_map+0x3f6>
#else
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
2400b58a:	9b07      	ldr	r3, [sp, #28]
                mask += draw_area_w;
                map_buf_first += map_w;
2400b58c:	443c      	add	r4, r7
                disp_buf_first += disp_w;
2400b58e:	441d      	add	r5, r3
                mask += draw_area_w;
2400b590:	9b04      	ldr	r3, [sp, #16]
2400b592:	4433      	add	r3, r6
2400b594:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
2400b596:	9b05      	ldr	r3, [sp, #20]
2400b598:	3301      	adds	r3, #1
2400b59a:	9305      	str	r3, [sp, #20]
2400b59c:	e7bd      	b.n	2400b51a <_lv_blend_map+0x2ac>
                    if(*mask32) {
2400b59e:	f8d9 3000 	ldr.w	r3, [r9]
2400b5a2:	b18b      	cbz	r3, 2400b5c8 <_lv_blend_map+0x35a>
                        if((*mask32) == 0xFFFFFFFF) {
2400b5a4:	3301      	adds	r3, #1
2400b5a6:	d118      	bne.n	2400b5da <_lv_blend_map+0x36c>
                            disp_buf_first[x] = map_buf_first[x];
2400b5a8:	f8bb 3000 	ldrh.w	r3, [fp]
2400b5ac:	f8aa 3000 	strh.w	r3, [sl]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
2400b5b0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
2400b5b4:	f8aa 3002 	strh.w	r3, [sl, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
2400b5b8:	f8bb 3004 	ldrh.w	r3, [fp, #4]
2400b5bc:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
2400b5c0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
2400b5c4:	f8aa 3006 	strh.w	r3, [sl, #6]
                    mask32++;
2400b5c8:	f109 0904 	add.w	r9, r9, #4
                for(; x < x_end4; x += 4) {
2400b5cc:	f108 0804 	add.w	r8, r8, #4
2400b5d0:	f10b 0b08 	add.w	fp, fp, #8
2400b5d4:	f10a 0a08 	add.w	sl, sl, #8
2400b5d8:	e7cc      	b.n	2400b574 <_lv_blend_map+0x306>
                            MAP_NORMAL_MASK_PX(x)
2400b5da:	f899 2000 	ldrb.w	r2, [r9]
2400b5de:	b12a      	cbz	r2, 2400b5ec <_lv_blend_map+0x37e>
2400b5e0:	2aff      	cmp	r2, #255	; 0xff
2400b5e2:	d124      	bne.n	2400b62e <_lv_blend_map+0x3c0>
2400b5e4:	f8bb 3000 	ldrh.w	r3, [fp]
2400b5e8:	f8aa 3000 	strh.w	r3, [sl]
                            MAP_NORMAL_MASK_PX(x + 1)
2400b5ec:	f899 2001 	ldrb.w	r2, [r9, #1]
2400b5f0:	b12a      	cbz	r2, 2400b5fe <_lv_blend_map+0x390>
2400b5f2:	2aff      	cmp	r2, #255	; 0xff
2400b5f4:	d124      	bne.n	2400b640 <_lv_blend_map+0x3d2>
2400b5f6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
2400b5fa:	f8aa 3002 	strh.w	r3, [sl, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
2400b5fe:	f899 2002 	ldrb.w	r2, [r9, #2]
2400b602:	b12a      	cbz	r2, 2400b610 <_lv_blend_map+0x3a2>
2400b604:	2aff      	cmp	r2, #255	; 0xff
2400b606:	d124      	bne.n	2400b652 <_lv_blend_map+0x3e4>
2400b608:	f8bb 3004 	ldrh.w	r3, [fp, #4]
2400b60c:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
2400b610:	f899 2003 	ldrb.w	r2, [r9, #3]
2400b614:	2a00      	cmp	r2, #0
2400b616:	d0d7      	beq.n	2400b5c8 <_lv_blend_map+0x35a>
2400b618:	2aff      	cmp	r2, #255	; 0xff
2400b61a:	d0d1      	beq.n	2400b5c0 <_lv_blend_map+0x352>
2400b61c:	f8ba 1006 	ldrh.w	r1, [sl, #6]
2400b620:	f8bb 0006 	ldrh.w	r0, [fp, #6]
2400b624:	f7ff fbcf 	bl	2400adc6 <lv_color_mix>
2400b628:	f8aa 0006 	strh.w	r0, [sl, #6]
2400b62c:	e7cc      	b.n	2400b5c8 <_lv_blend_map+0x35a>
                            MAP_NORMAL_MASK_PX(x)
2400b62e:	f8ba 1000 	ldrh.w	r1, [sl]
2400b632:	f8bb 0000 	ldrh.w	r0, [fp]
2400b636:	f7ff fbc6 	bl	2400adc6 <lv_color_mix>
2400b63a:	f8aa 0000 	strh.w	r0, [sl]
2400b63e:	e7d5      	b.n	2400b5ec <_lv_blend_map+0x37e>
                            MAP_NORMAL_MASK_PX(x + 1)
2400b640:	f8ba 1002 	ldrh.w	r1, [sl, #2]
2400b644:	f8bb 0002 	ldrh.w	r0, [fp, #2]
2400b648:	f7ff fbbd 	bl	2400adc6 <lv_color_mix>
2400b64c:	f8aa 0002 	strh.w	r0, [sl, #2]
2400b650:	e7d5      	b.n	2400b5fe <_lv_blend_map+0x390>
                            MAP_NORMAL_MASK_PX(x + 2)
2400b652:	f8ba 1004 	ldrh.w	r1, [sl, #4]
2400b656:	f8bb 0004 	ldrh.w	r0, [fp, #4]
2400b65a:	f7ff fbb4 	bl	2400adc6 <lv_color_mix>
2400b65e:	f8aa 0004 	strh.w	r0, [sl, #4]
2400b662:	e7d5      	b.n	2400b610 <_lv_blend_map+0x3a2>
                    MAP_NORMAL_MASK_PX(x)
2400b664:	f819 2f01 	ldrb.w	r2, [r9, #1]!
2400b668:	b12a      	cbz	r2, 2400b676 <_lv_blend_map+0x408>
2400b66a:	2aff      	cmp	r2, #255	; 0xff
2400b66c:	d10a      	bne.n	2400b684 <_lv_blend_map+0x416>
2400b66e:	f8bb 3000 	ldrh.w	r3, [fp]
2400b672:	f8aa 3000 	strh.w	r3, [sl]
                for(; x < draw_area_w ; x++) {
2400b676:	f108 0801 	add.w	r8, r8, #1
2400b67a:	f10b 0b02 	add.w	fp, fp, #2
2400b67e:	f10a 0a02 	add.w	sl, sl, #2
2400b682:	e780      	b.n	2400b586 <_lv_blend_map+0x318>
                    MAP_NORMAL_MASK_PX(x)
2400b684:	f8ba 1000 	ldrh.w	r1, [sl]
2400b688:	f8bb 0000 	ldrh.w	r0, [fp]
2400b68c:	f7ff fb9b 	bl	2400adc6 <lv_color_mix>
2400b690:	f8aa 0000 	strh.w	r0, [sl]
2400b694:	e7ef      	b.n	2400b676 <_lv_blend_map+0x408>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
2400b696:	9b04      	ldr	r3, [sp, #16]
2400b698:	f813 2009 	ldrb.w	r2, [r3, r9]
2400b69c:	b172      	cbz	r2, 2400b6bc <_lv_blend_map+0x44e>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
2400b69e:	2afc      	cmp	r2, #252	; 0xfc
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
2400b6a0:	f835 1019 	ldrh.w	r1, [r5, r9, lsl #1]
2400b6a4:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
2400b6a8:	bf97      	itett	ls
2400b6aa:	9b05      	ldrls	r3, [sp, #20]
2400b6ac:	9a05      	ldrhi	r2, [sp, #20]
2400b6ae:	fb13 f202 	smulbbls	r2, r3, r2
2400b6b2:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
2400b6b4:	f7ff fb87 	bl	2400adc6 <lv_color_mix>
2400b6b8:	f825 0019 	strh.w	r0, [r5, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
2400b6bc:	f109 0901 	add.w	r9, r9, #1
2400b6c0:	454e      	cmp	r6, r9
2400b6c2:	dce8      	bgt.n	2400b696 <_lv_blend_map+0x428>
                        }
                    }
                }
                disp_buf_first += disp_w;
2400b6c4:	9b07      	ldr	r3, [sp, #28]
                mask += draw_area_w;
                map_buf_first += map_w;
2400b6c6:	443c      	add	r4, r7
            for(y = 0; y < draw_area_h; y++) {
2400b6c8:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
2400b6cc:	441d      	add	r5, r3
                mask += draw_area_w;
2400b6ce:	9b04      	ldr	r3, [sp, #16]
2400b6d0:	4433      	add	r3, r6
2400b6d2:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
2400b6d4:	9b06      	ldr	r3, [sp, #24]
2400b6d6:	4543      	cmp	r3, r8
2400b6d8:	f77f aea7 	ble.w	2400b42a <_lv_blend_map+0x1bc>
                for(x = 0; x < draw_area_w; x++) {
2400b6dc:	f04f 0900 	mov.w	r9, #0
2400b6e0:	e7ee      	b.n	2400b6c0 <_lv_blend_map+0x452>
	...

2400b6e4 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
2400b6e4:	b510      	push	{r4, lr}
2400b6e6:	b0a2      	sub	sp, #136	; 0x88
2400b6e8:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
2400b6ea:	a80d      	add	r0, sp, #52	; 0x34
{
2400b6ec:	9102      	str	r1, [sp, #8]
2400b6ee:	9203      	str	r2, [sp, #12]
    lv_draw_rect_dsc_init(&rect_dsc);
2400b6f0:	f002 f9b8 	bl	2400da64 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
2400b6f4:	4a0a      	ldr	r2, [pc, #40]	; (2400b720 <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
2400b6f6:	4620      	mov	r0, r4
2400b6f8:	9902      	ldr	r1, [sp, #8]
    rect_dsc.bg_color = LV_COLOR_WHITE;
2400b6fa:	8812      	ldrh	r2, [r2, #0]
2400b6fc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    lv_draw_rect(coords, clip_area, &rect_dsc);
2400b700:	aa0d      	add	r2, sp, #52	; 0x34
2400b702:	f002 f9d3 	bl	2400daac <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
2400b706:	a804      	add	r0, sp, #16
2400b708:	f000 fb9c 	bl	2400be44 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
2400b70c:	2200      	movs	r2, #0
2400b70e:	9b03      	ldr	r3, [sp, #12]
2400b710:	4620      	mov	r0, r4
2400b712:	9200      	str	r2, [sp, #0]
2400b714:	aa04      	add	r2, sp, #16
2400b716:	9902      	ldr	r1, [sp, #8]
2400b718:	f000 fbaa 	bl	2400be70 <lv_draw_label>
}
2400b71c:	b022      	add	sp, #136	; 0x88
2400b71e:	bd10      	pop	{r4, pc}
2400b720:	9001acbe 	.word	0x9001acbe

2400b724 <lv_area_copy>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
2400b724:	3901      	subs	r1, #1
2400b726:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
2400b72a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
2400b72e:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
2400b732:	4298      	cmp	r0, r3
2400b734:	d1f9      	bne.n	2400b72a <lv_area_copy+0x6>
}
2400b736:	4770      	bx	lr

2400b738 <lv_draw_map>:
{
2400b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400b73c:	ed2d 8b02 	vpush	{d8}
2400b740:	b09b      	sub	sp, #108	; 0x6c
2400b742:	461c      	mov	r4, r3
2400b744:	4606      	mov	r6, r0
2400b746:	468b      	mov	fp, r1
2400b748:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
    lv_area_copy(&draw_area, clip_area);
2400b74c:	a816      	add	r0, sp, #88	; 0x58
{
2400b74e:	4617      	mov	r7, r2
2400b750:	930a      	str	r3, [sp, #40]	; 0x28
2400b752:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
2400b756:	9308      	str	r3, [sp, #32]
    lv_area_copy(&draw_area, clip_area);
2400b758:	f7ff ffe4 	bl	2400b724 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400b75c:	f7fe fc8c 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400b760:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400b762:	f003 fb87 	bl	2400ee74 <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
2400b766:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
2400b76a:	8a01      	ldrh	r1, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400b76c:	4682      	mov	sl, r0
    draw_area.y1 -= disp_area->y1;
2400b76e:	8a42      	ldrh	r2, [r0, #18]
    draw_area.x1 -= disp_area->x1;
2400b770:	1a5b      	subs	r3, r3, r1
2400b772:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
2400b776:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400b77a:	1a9b      	subs	r3, r3, r2
2400b77c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
2400b780:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
2400b784:	1a5b      	subs	r3, r3, r1
2400b786:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
2400b78a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400b78e:	1a9b      	subs	r3, r3, r2
2400b790:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
2400b794:	f002 f85e 	bl	2400d854 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
2400b798:	9007      	str	r0, [sp, #28]
2400b79a:	b9f8      	cbnz	r0, 2400b7dc <lv_draw_map+0xa4>
2400b79c:	8863      	ldrh	r3, [r4, #2]
2400b79e:	b9eb      	cbnz	r3, 2400b7dc <lv_draw_map+0xa4>
2400b7a0:	8923      	ldrh	r3, [r4, #8]
2400b7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b7a6:	d119      	bne.n	2400b7dc <lv_draw_map+0xa4>
2400b7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400b7aa:	b9bb      	cbnz	r3, 2400b7dc <lv_draw_map+0xa4>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
2400b7ac:	9b08      	ldr	r3, [sp, #32]
2400b7ae:	2b00      	cmp	r3, #0
2400b7b0:	f040 808a 	bne.w	2400b8c8 <lv_draw_map+0x190>
2400b7b4:	7aa3      	ldrb	r3, [r4, #10]
2400b7b6:	2b00      	cmp	r3, #0
2400b7b8:	f040 8088 	bne.w	2400b8cc <lv_draw_map+0x194>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
2400b7bc:	7ba2      	ldrb	r2, [r4, #14]
2400b7be:	4631      	mov	r1, r6
2400b7c0:	4658      	mov	r0, fp
2400b7c2:	9202      	str	r2, [sp, #8]
2400b7c4:	7822      	ldrb	r2, [r4, #0]
2400b7c6:	9201      	str	r2, [sp, #4]
2400b7c8:	2201      	movs	r2, #1
2400b7ca:	9200      	str	r2, [sp, #0]
2400b7cc:	463a      	mov	r2, r7
2400b7ce:	f7ff fd4e 	bl	2400b26e <_lv_blend_map>
}
2400b7d2:	b01b      	add	sp, #108	; 0x6c
2400b7d4:	ecbd 8b02 	vpop	{d8}
2400b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
2400b7dc:	9b08      	ldr	r3, [sp, #32]
2400b7de:	3302      	adds	r3, #2
2400b7e0:	b2db      	uxtb	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400b7e2:	88b5      	ldrh	r5, [r6, #4]
2400b7e4:	f9b6 2000 	ldrsh.w	r2, [r6]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
2400b7e8:	f9ba 1012 	ldrsh.w	r1, [sl, #18]
2400b7ec:	3501      	adds	r5, #1
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
2400b7ee:	9305      	str	r3, [sp, #20]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
2400b7f0:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
2400b7f4:	1aad      	subs	r5, r5, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b7f6:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
2400b7fa:	f9bd 005a 	ldrsh.w	r0, [sp, #90]	; 0x5a
2400b7fe:	1a76      	subs	r6, r6, r1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b800:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
2400b804:	1ad2      	subs	r2, r2, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
2400b806:	1b86      	subs	r6, r0, r6
2400b808:	b22d      	sxth	r5, r5
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b80a:	ebac 0202 	sub.w	r2, ip, r2
        blend_area.x1 = draw_area.x1 + disp_area->x1;
2400b80e:	fa13 f38c 	uxtah	r3, r3, ip
        blend_area.y1 = disp_area->y1 + draw_area.y1;
2400b812:	fa11 f180 	uxtah	r1, r1, r0
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b816:	fb05 2206 	mla	r2, r5, r6, r2
2400b81a:	9e05      	ldr	r6, [sp, #20]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
2400b81c:	b29b      	uxth	r3, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b81e:	fb02 7206 	mla	r2, r2, r6, r7
        blend_area.y1 = disp_area->y1 + draw_area.y1;
2400b822:	b209      	sxth	r1, r1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
2400b824:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
2400b828:	9206      	str	r2, [sp, #24]
2400b82a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
2400b82e:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
2400b832:	3201      	adds	r2, #1
        blend_area.y2 = blend_area.y1;
2400b834:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
2400b838:	eba2 020c 	sub.w	r2, r2, ip
2400b83c:	b296      	uxth	r6, r2
2400b83e:	b212      	sxth	r2, r2
2400b840:	920c      	str	r2, [sp, #48]	; 0x30
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
2400b842:	1e72      	subs	r2, r6, #1
2400b844:	4413      	add	r3, r2
2400b846:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400b84a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400b84e:	3301      	adds	r3, #1
2400b850:	1a1b      	subs	r3, r3, r0
2400b852:	b21b      	sxth	r3, r3
2400b854:	9310      	str	r3, [sp, #64]	; 0x40
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
2400b856:	9b07      	ldr	r3, [sp, #28]
2400b858:	2b00      	cmp	r3, #0
2400b85a:	f040 8092 	bne.w	2400b982 <lv_draw_map+0x24a>
2400b85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400b860:	2b00      	cmp	r3, #0
2400b862:	f040 808e 	bne.w	2400b982 <lv_draw_map+0x24a>
2400b866:	7aa3      	ldrb	r3, [r4, #10]
2400b868:	2b00      	cmp	r3, #0
2400b86a:	f040 808a 	bne.w	2400b982 <lv_draw_map+0x24a>
2400b86e:	9b08      	ldr	r3, [sp, #32]
2400b870:	2b00      	cmp	r3, #0
2400b872:	f000 8086 	beq.w	2400b982 <lv_draw_map+0x24a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
2400b876:	4640      	mov	r0, r8
2400b878:	f003 fa98 	bl	2400edac <lv_disp_get_hor_res>
2400b87c:	4606      	mov	r6, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
2400b87e:	a816      	add	r0, sp, #88	; 0x58
2400b880:	f003 fc59 	bl	2400f136 <lv_area_get_size>
2400b884:	42b0      	cmp	r0, r6
2400b886:	d803      	bhi.n	2400b890 <lv_draw_map+0x158>
2400b888:	a816      	add	r0, sp, #88	; 0x58
2400b88a:	f003 fc54 	bl	2400f136 <lv_area_get_size>
2400b88e:	4606      	mov	r6, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
2400b890:	0070      	lsls	r0, r6, #1
            for(y = 0; y < draw_area_h; y++) {
2400b892:	f04f 0900 	mov.w	r9, #0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
2400b896:	f004 fa25 	bl	2400fce4 <_lv_mem_buf_get>
2400b89a:	4607      	mov	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400b89c:	4630      	mov	r0, r6
2400b89e:	f004 fa21 	bl	2400fce4 <_lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
2400b8a2:	9b05      	ldr	r3, [sp, #20]
2400b8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400b8a6:	4680      	mov	r8, r0
                map_buf_tmp += map_w * px_size_byte;
2400b8a8:	fb13 f305 	smulbb	r3, r3, r5
2400b8ac:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
2400b8b0:	9307      	str	r3, [sp, #28]
        uint32_t px_i = 0;
2400b8b2:	464b      	mov	r3, r9
            for(y = 0; y < draw_area_h; y++) {
2400b8b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
2400b8b6:	454a      	cmp	r2, r9
2400b8b8:	dd47      	ble.n	2400b94a <lv_draw_map+0x212>
2400b8ba:	eb08 0c03 	add.w	ip, r8, r3
2400b8be:	eb07 0e43 	add.w	lr, r7, r3, lsl #1
                map_px = map_buf_tmp;
2400b8c2:	9a06      	ldr	r2, [sp, #24]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
2400b8c4:	2100      	movs	r1, #0
2400b8c6:	e011      	b.n	2400b8ec <lv_draw_map+0x1b4>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
2400b8c8:	2303      	movs	r3, #3
2400b8ca:	e78a      	b.n	2400b7e2 <lv_draw_map+0xaa>
2400b8cc:	2302      	movs	r3, #2
2400b8ce:	e788      	b.n	2400b7e2 <lv_draw_map+0xaa>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
2400b8d0:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
2400b8d2:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
2400b8d6:	b130      	cbz	r0, 2400b8e6 <lv_draw_map+0x1ae>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
2400b8d8:	7850      	ldrb	r0, [r2, #1]
2400b8da:	4605      	mov	r5, r0
2400b8dc:	7810      	ldrb	r0, [r2, #0]
2400b8de:	eb00 2005 	add.w	r0, r0, r5, lsl #8
2400b8e2:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
2400b8e6:	9805      	ldr	r0, [sp, #20]
2400b8e8:	3101      	adds	r1, #1
2400b8ea:	4402      	add	r2, r0
2400b8ec:	980c      	ldr	r0, [sp, #48]	; 0x30
2400b8ee:	4288      	cmp	r0, r1
2400b8f0:	dcee      	bgt.n	2400b8d0 <lv_draw_map+0x198>
2400b8f2:	4453      	add	r3, sl
                map_buf_tmp += map_w * px_size_byte;
2400b8f4:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
2400b8f8:	440a      	add	r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400b8fa:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
2400b8fe:	9206      	str	r2, [sp, #24]
2400b900:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
2400b904:	3201      	adds	r2, #1
2400b906:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
2400b908:	fa03 f282 	sxtah	r2, r3, r2
2400b90c:	42b2      	cmp	r2, r6
2400b90e:	d208      	bcs.n	2400b922 <lv_draw_map+0x1ea>
                    blend_area.y2 ++;
2400b910:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
2400b914:	3201      	adds	r2, #1
2400b916:	b212      	sxth	r2, r2
            for(y = 0; y < draw_area_h; y++) {
2400b918:	f109 0901 	add.w	r9, r9, #1
                    blend_area.y2 ++;
2400b91c:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
2400b920:	e7c8      	b.n	2400b8b4 <lv_draw_map+0x17c>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
2400b922:	7ba3      	ldrb	r3, [r4, #14]
2400b924:	463a      	mov	r2, r7
2400b926:	a918      	add	r1, sp, #96	; 0x60
2400b928:	4658      	mov	r0, fp
2400b92a:	9302      	str	r3, [sp, #8]
2400b92c:	7823      	ldrb	r3, [r4, #0]
2400b92e:	9301      	str	r3, [sp, #4]
2400b930:	2302      	movs	r3, #2
2400b932:	9300      	str	r3, [sp, #0]
2400b934:	4643      	mov	r3, r8
2400b936:	f7ff fc9a 	bl	2400b26e <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
2400b93a:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
                    px_i = 0;
2400b93e:	2300      	movs	r3, #0
                    blend_area.y1 = blend_area.y2 + 1;
2400b940:	3201      	adds	r2, #1
2400b942:	b212      	sxth	r2, r2
2400b944:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    px_i = 0;
2400b948:	e7e6      	b.n	2400b918 <lv_draw_map+0x1e0>
            if(blend_area.y1 != blend_area.y2) {
2400b94a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
2400b94e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
2400b952:	429a      	cmp	r2, r3
2400b954:	d00e      	beq.n	2400b974 <lv_draw_map+0x23c>
                blend_area.y2--;
2400b956:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
2400b958:	463a      	mov	r2, r7
2400b95a:	a918      	add	r1, sp, #96	; 0x60
2400b95c:	4658      	mov	r0, fp
                blend_area.y2--;
2400b95e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
2400b962:	7ba3      	ldrb	r3, [r4, #14]
2400b964:	9302      	str	r3, [sp, #8]
2400b966:	7823      	ldrb	r3, [r4, #0]
2400b968:	9301      	str	r3, [sp, #4]
2400b96a:	2302      	movs	r3, #2
2400b96c:	9300      	str	r3, [sp, #0]
2400b96e:	4643      	mov	r3, r8
2400b970:	f7ff fc7d 	bl	2400b26e <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
2400b974:	4640      	mov	r0, r8
2400b976:	f004 f84d 	bl	2400fa14 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
2400b97a:	4638      	mov	r0, r7
            _lv_mem_buf_release(map2);
2400b97c:	f004 f84a 	bl	2400fa14 <_lv_mem_buf_release>
}
2400b980:	e727      	b.n	2400b7d2 <lv_draw_map+0x9a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
2400b982:	4640      	mov	r0, r8
2400b984:	f003 fa12 	bl	2400edac <lv_disp_get_hor_res>
2400b988:	4607      	mov	r7, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
2400b98a:	a816      	add	r0, sp, #88	; 0x58
2400b98c:	f003 fbd3 	bl	2400f136 <lv_area_get_size>
2400b990:	42b8      	cmp	r0, r7
2400b992:	d803      	bhi.n	2400b99c <lv_draw_map+0x264>
2400b994:	a816      	add	r0, sp, #88	; 0x58
2400b996:	f003 fbce 	bl	2400f136 <lv_area_get_size>
2400b99a:	4607      	mov	r7, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
2400b99c:	0078      	lsls	r0, r7, #1
2400b99e:	f004 f9a1 	bl	2400fce4 <_lv_mem_buf_get>
2400b9a2:	4681      	mov	r9, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400b9a4:	4638      	mov	r0, r7
2400b9a6:	f004 f99d 	bl	2400fce4 <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
2400b9aa:	7aa3      	ldrb	r3, [r4, #10]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400b9ac:	4680      	mov	r8, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
2400b9ae:	43da      	mvns	r2, r3
2400b9b0:	b2d2      	uxtb	r2, r2
2400b9b2:	920e      	str	r2, [sp, #56]	; 0x38
            if(draw_dsc->recolor_opa != 0) {
2400b9b4:	2b00      	cmp	r3, #0
2400b9b6:	d03e      	beq.n	2400ba36 <lv_draw_map+0x2fe>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
2400b9b8:	7b62      	ldrb	r2, [r4, #13]
2400b9ba:	08d2      	lsrs	r2, r2, #3
2400b9bc:	435a      	muls	r2, r3
2400b9be:	920f      	str	r2, [sp, #60]	; 0x3c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
2400b9c0:	89a2      	ldrh	r2, [r4, #12]
2400b9c2:	f3c2 1245 	ubfx	r2, r2, #5, #6
2400b9c6:	435a      	muls	r2, r3
2400b9c8:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
2400b9ca:	7b22      	ldrb	r2, [r4, #12]
2400b9cc:	f002 021f 	and.w	r2, r2, #31
2400b9d0:	4353      	muls	r3, r2
2400b9d2:	930d      	str	r3, [sp, #52]	; 0x34
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
2400b9d4:	9b08      	ldr	r3, [sp, #32]
2400b9d6:	2b00      	cmp	r3, #0
2400b9d8:	d131      	bne.n	2400ba3e <lv_draw_map+0x306>
2400b9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400b9dc:	2b00      	cmp	r3, #0
2400b9de:	d12e      	bne.n	2400ba3e <lv_draw_map+0x306>
2400b9e0:	8863      	ldrh	r3, [r4, #2]
2400b9e2:	bb63      	cbnz	r3, 2400ba3e <lv_draw_map+0x306>
2400b9e4:	8923      	ldrh	r3, [r4, #8]
2400b9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b9ea:	bf14      	ite	ne
2400b9ec:	2602      	movne	r6, #2
2400b9ee:	2601      	moveq	r6, #1
            if(other_mask_cnt) {
2400b9f0:	9b07      	ldr	r3, [sp, #28]
2400b9f2:	b11b      	cbz	r3, 2400b9fc <lv_draw_map+0x2c4>
                _lv_memset_ff(mask_buf, mask_buf_size);
2400b9f4:	4639      	mov	r1, r7
2400b9f6:	4640      	mov	r0, r8
2400b9f8:	f004 fa2d 	bl	2400fe56 <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
2400b9fc:	9b05      	ldr	r3, [sp, #20]
2400b9fe:	fb13 f305 	smulbb	r3, r3, r5
2400ba02:	9312      	str	r3, [sp, #72]	; 0x48
2400ba04:	2300      	movs	r3, #0
2400ba06:	461d      	mov	r5, r3
2400ba08:	9309      	str	r3, [sp, #36]	; 0x24
2400ba0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400ba0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
2400ba10:	9315      	str	r3, [sp, #84]	; 0x54
            for(y = 0; y < draw_area_h; y++) {
2400ba12:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400ba14:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400ba16:	4293      	cmp	r3, r2
2400ba18:	f340 80db 	ble.w	2400bbd2 <lv_draw_map+0x49a>
2400ba1c:	eb08 0305 	add.w	r3, r8, r5
                map_px = map_buf_tmp;
2400ba20:	f8dd c018 	ldr.w	ip, [sp, #24]
2400ba24:	ee08 3a10 	vmov	s16, r3
2400ba28:	469e      	mov	lr, r3
2400ba2a:	eb09 0345 	add.w	r3, r9, r5, lsl #1
2400ba2e:	9313      	str	r3, [sp, #76]	; 0x4c
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
2400ba30:	2300      	movs	r3, #0
2400ba32:	930b      	str	r3, [sp, #44]	; 0x2c
2400ba34:	e015      	b.n	2400ba62 <lv_draw_map+0x32a>
            uint16_t recolor_premult[3] = {0};
2400ba36:	930d      	str	r3, [sp, #52]	; 0x34
2400ba38:	9311      	str	r3, [sp, #68]	; 0x44
2400ba3a:	930f      	str	r3, [sp, #60]	; 0x3c
2400ba3c:	e7ca      	b.n	2400b9d4 <lv_draw_map+0x29c>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
2400ba3e:	2602      	movs	r6, #2
2400ba40:	e7d6      	b.n	2400b9f0 <lv_draw_map+0x2b8>
                        if(alpha_byte) {
2400ba42:	9b08      	ldr	r3, [sp, #32]
2400ba44:	2b00      	cmp	r3, #0
2400ba46:	d050      	beq.n	2400baea <lv_draw_map+0x3b2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
2400ba48:	f89c 3002 	ldrb.w	r3, [ip, #2]
                            mask_buf[px_i] = px_opa;
2400ba4c:	f88e 3000 	strb.w	r3, [lr]
                            if(px_opa == 0) {
2400ba50:	2b00      	cmp	r3, #0
2400ba52:	d14e      	bne.n	2400baf2 <lv_draw_map+0x3ba>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
2400ba54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2400ba56:	f10e 0e01 	add.w	lr, lr, #1
2400ba5a:	3301      	adds	r3, #1
2400ba5c:	930b      	str	r3, [sp, #44]	; 0x2c
2400ba5e:	9b05      	ldr	r3, [sp, #20]
2400ba60:	449c      	add	ip, r3
2400ba62:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
2400ba66:	4293      	cmp	r3, r2
2400ba68:	dceb      	bgt.n	2400ba42 <lv_draw_map+0x30a>
2400ba6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
2400ba6c:	441d      	add	r5, r3
                if(other_mask_cnt) {
2400ba6e:	9b07      	ldr	r3, [sp, #28]
2400ba70:	b323      	cbz	r3, 2400babc <lv_draw_map+0x384>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
2400ba72:	f8ba 0012 	ldrh.w	r0, [sl, #18]
2400ba76:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
2400ba7a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
2400ba7e:	4402      	add	r2, r0
2400ba80:	9809      	ldr	r0, [sp, #36]	; 0x24
2400ba82:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
2400ba86:	3301      	adds	r3, #1
2400ba88:	4402      	add	r2, r0
2400ba8a:	f8ba 0010 	ldrh.w	r0, [sl, #16]
2400ba8e:	1a5b      	subs	r3, r3, r1
2400ba90:	4401      	add	r1, r0
2400ba92:	b212      	sxth	r2, r2
2400ba94:	b21b      	sxth	r3, r3
2400ba96:	ee18 0a10 	vmov	r0, s16
2400ba9a:	b209      	sxth	r1, r1
2400ba9c:	f001 fe92 	bl	2400d7c4 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
2400baa0:	2800      	cmp	r0, #0
2400baa2:	d167      	bne.n	2400bb74 <lv_draw_map+0x43c>
2400baa4:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
2400baa8:	2602      	movs	r6, #2
2400baaa:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
2400baae:	ee18 0a10 	vmov	r0, s16
2400bab2:	3101      	adds	r1, #1
2400bab4:	1ac9      	subs	r1, r1, r3
2400bab6:	b209      	sxth	r1, r1
2400bab8:	f004 f9a2 	bl	2400fe00 <_lv_memset_00>
                map_buf_tmp += map_w * px_size_byte;
2400babc:	9b06      	ldr	r3, [sp, #24]
2400babe:	9a12      	ldr	r2, [sp, #72]	; 0x48
2400bac0:	4413      	add	r3, r2
2400bac2:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
2400bac6:	9306      	str	r3, [sp, #24]
2400bac8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
2400bacc:	3301      	adds	r3, #1
2400bace:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
2400bad0:	fa05 f383 	sxtah	r3, r5, r3
2400bad4:	42bb      	cmp	r3, r7
2400bad6:	d251      	bcs.n	2400bb7c <lv_draw_map+0x444>
                    blend_area.y2 ++;
2400bad8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
2400badc:	3301      	adds	r3, #1
2400bade:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
2400bae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400bae4:	3301      	adds	r3, #1
2400bae6:	9309      	str	r3, [sp, #36]	; 0x24
2400bae8:	e793      	b.n	2400ba12 <lv_draw_map+0x2da>
                            mask_buf[px_i] = 0xFF;
2400baea:	f04f 33ff 	mov.w	r3, #4294967295
2400baee:	f88e 3000 	strb.w	r3, [lr]
                        c.full =  map_px[0] + (map_px[1] << 8);
2400baf2:	f89c 2001 	ldrb.w	r2, [ip, #1]
2400baf6:	f89c 3000 	ldrb.w	r3, [ip]
2400bafa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if(chroma_key) {
2400bafe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        c.full =  map_px[0] + (map_px[1] << 8);
2400bb00:	b29b      	uxth	r3, r3
                        if(chroma_key) {
2400bb02:	b13a      	cbz	r2, 2400bb14 <lv_draw_map+0x3dc>
                            if(c.full == chroma_keyed_color.full) {
2400bb04:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
2400bb08:	d104      	bne.n	2400bb14 <lv_draw_map+0x3dc>
                                mask_buf[px_i] = LV_OPA_TRANSP;
2400bb0a:	f04f 0300 	mov.w	r3, #0
2400bb0e:	f88e 3000 	strb.w	r3, [lr]
                                continue;
2400bb12:	e79f      	b.n	2400ba54 <lv_draw_map+0x31c>
                    if(draw_dsc->recolor_opa != 0) {
2400bb14:	7aa2      	ldrb	r2, [r4, #10]
2400bb16:	b342      	cbz	r2, 2400bb6a <lv_draw_map+0x432>
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400bb18:	f3c3 1145 	ubfx	r1, r3, #5, #6
2400bb1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
2400bb1e:	980e      	ldr	r0, [sp, #56]	; 0x38
2400bb20:	fb01 2100 	mla	r1, r1, r0, r2
2400bb24:	f248 0281 	movw	r2, #32897	; 0x8081
2400bb28:	3180      	adds	r1, #128	; 0x80
2400bb2a:	4351      	muls	r1, r2
2400bb2c:	f3c1 52c5 	ubfx	r2, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400bb30:	e9dd 010d 	ldrd	r0, r1, [sp, #52]	; 0x34
2400bb34:	9214      	str	r2, [sp, #80]	; 0x50
2400bb36:	f003 021f 	and.w	r2, r3, #31
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400bb3a:	0adb      	lsrs	r3, r3, #11
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400bb3c:	fb02 0201 	mla	r2, r2, r1, r0
2400bb40:	f248 0181 	movw	r1, #32897	; 0x8081
2400bb44:	3280      	adds	r2, #128	; 0x80
2400bb46:	434a      	muls	r2, r1
2400bb48:	9914      	ldr	r1, [sp, #80]	; 0x50
2400bb4a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
2400bb4e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
2400bb52:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
2400bb56:	fb03 0301 	mla	r3, r3, r1, r0
2400bb5a:	f248 0181 	movw	r1, #32897	; 0x8081
2400bb5e:	3380      	adds	r3, #128	; 0x80
2400bb60:	434b      	muls	r3, r1
2400bb62:	0ddb      	lsrs	r3, r3, #23
2400bb64:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
2400bb68:	b293      	uxth	r3, r2
                    map2[px_i].full = c.full;
2400bb6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
2400bb6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
2400bb6e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
2400bb72:	e76f      	b.n	2400ba54 <lv_draw_map+0x31c>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
2400bb74:	2802      	cmp	r0, #2
2400bb76:	bf08      	it	eq
2400bb78:	2602      	moveq	r6, #2
2400bb7a:	e79f      	b.n	2400babc <lv_draw_map+0x384>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
2400bb7c:	7ba3      	ldrb	r3, [r4, #14]
2400bb7e:	464a      	mov	r2, r9
2400bb80:	a918      	add	r1, sp, #96	; 0x60
2400bb82:	4658      	mov	r0, fp
2400bb84:	9302      	str	r3, [sp, #8]
2400bb86:	7823      	ldrb	r3, [r4, #0]
2400bb88:	e9cd 6300 	strd	r6, r3, [sp]
2400bb8c:	4643      	mov	r3, r8
2400bb8e:	f7ff fb6e 	bl	2400b26e <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
2400bb92:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
2400bb96:	3301      	adds	r3, #1
2400bb98:	b21b      	sxth	r3, r3
2400bb9a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
2400bb9e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
2400bba2:	9b08      	ldr	r3, [sp, #32]
2400bba4:	b98b      	cbnz	r3, 2400bbca <lv_draw_map+0x492>
2400bba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400bba8:	b97b      	cbnz	r3, 2400bbca <lv_draw_map+0x492>
2400bbaa:	8863      	ldrh	r3, [r4, #2]
2400bbac:	b96b      	cbnz	r3, 2400bbca <lv_draw_map+0x492>
2400bbae:	8923      	ldrh	r3, [r4, #8]
2400bbb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400bbb4:	bf14      	ite	ne
2400bbb6:	2602      	movne	r6, #2
2400bbb8:	2601      	moveq	r6, #1
                    if(other_mask_cnt) {
2400bbba:	9b07      	ldr	r3, [sp, #28]
2400bbbc:	b13b      	cbz	r3, 2400bbce <lv_draw_map+0x496>
                        _lv_memset_ff(mask_buf, mask_buf_size);
2400bbbe:	4639      	mov	r1, r7
2400bbc0:	4640      	mov	r0, r8
                    px_i = 0;
2400bbc2:	2500      	movs	r5, #0
                        _lv_memset_ff(mask_buf, mask_buf_size);
2400bbc4:	f004 f947 	bl	2400fe56 <_lv_memset_ff>
2400bbc8:	e78b      	b.n	2400bae2 <lv_draw_map+0x3aa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
2400bbca:	2602      	movs	r6, #2
2400bbcc:	e7f5      	b.n	2400bbba <lv_draw_map+0x482>
                    px_i = 0;
2400bbce:	9d07      	ldr	r5, [sp, #28]
2400bbd0:	e787      	b.n	2400bae2 <lv_draw_map+0x3aa>
            if(blend_area.y1 != blend_area.y2) {
2400bbd2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
2400bbd6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
2400bbda:	429a      	cmp	r2, r3
2400bbdc:	d00d      	beq.n	2400bbfa <lv_draw_map+0x4c2>
                blend_area.y2--;
2400bbde:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
2400bbe0:	464a      	mov	r2, r9
2400bbe2:	a918      	add	r1, sp, #96	; 0x60
2400bbe4:	4658      	mov	r0, fp
                blend_area.y2--;
2400bbe6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
2400bbea:	7ba3      	ldrb	r3, [r4, #14]
2400bbec:	9302      	str	r3, [sp, #8]
2400bbee:	7823      	ldrb	r3, [r4, #0]
2400bbf0:	e9cd 6300 	strd	r6, r3, [sp]
2400bbf4:	4643      	mov	r3, r8
2400bbf6:	f7ff fb3a 	bl	2400b26e <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
2400bbfa:	4640      	mov	r0, r8
2400bbfc:	f003 ff0a 	bl	2400fa14 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
2400bc00:	4648      	mov	r0, r9
2400bc02:	e6bb      	b.n	2400b97c <lv_draw_map+0x244>

2400bc04 <lv_draw_img_dsc_init>:
{
2400bc04:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
2400bc06:	2110      	movs	r1, #16
{
2400bc08:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
2400bc0a:	f004 f8f9 	bl	2400fe00 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
2400bc0e:	23ff      	movs	r3, #255	; 0xff
    dsc->recolor = LV_COLOR_BLACK;
2400bc10:	2200      	movs	r2, #0
    dsc->opa = LV_OPA_COVER;
2400bc12:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
2400bc14:	f44f 7380 	mov.w	r3, #256	; 0x100
    dsc->recolor = LV_COLOR_BLACK;
2400bc18:	81a2      	strh	r2, [r4, #12]
    dsc->zoom = LV_IMG_ZOOM_NONE;
2400bc1a:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
2400bc1c:	7be3      	ldrb	r3, [r4, #15]
2400bc1e:	f362 0300 	bfi	r3, r2, #0, #1
2400bc22:	73e3      	strb	r3, [r4, #15]
}
2400bc24:	bd10      	pop	{r4, pc}

2400bc26 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
2400bc26:	2803      	cmp	r0, #3
2400bc28:	d005      	beq.n	2400bc36 <lv_img_cf_is_chroma_keyed+0x10>
2400bc2a:	3806      	subs	r0, #6
2400bc2c:	2804      	cmp	r0, #4
2400bc2e:	bf8c      	ite	hi
2400bc30:	2000      	movhi	r0, #0
2400bc32:	2001      	movls	r0, #1
2400bc34:	4770      	bx	lr
            is_chroma_keyed = true;
2400bc36:	2001      	movs	r0, #1
}
2400bc38:	4770      	bx	lr

2400bc3a <lv_img_cf_has_alpha>:
    switch(cf) {
2400bc3a:	280e      	cmp	r0, #14
2400bc3c:	bf9d      	ittte	ls
2400bc3e:	f647 73a4 	movwls	r3, #32676	; 0x7fa4
2400bc42:	fa23 f000 	lsrls.w	r0, r3, r0
2400bc46:	f000 0001 	andls.w	r0, r0, #1
2400bc4a:	2000      	movhi	r0, #0
}
2400bc4c:	4770      	bx	lr
	...

2400bc50 <lv_draw_img>:
{
2400bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400bc54:	4604      	mov	r4, r0
2400bc56:	4688      	mov	r8, r1
2400bc58:	461f      	mov	r7, r3
    if(src == NULL) {
2400bc5a:	4610      	mov	r0, r2
{
2400bc5c:	ed2d 8b02 	vpush	{d8}
2400bc60:	b08b      	sub	sp, #44	; 0x2c
    if(src == NULL) {
2400bc62:	b94a      	cbnz	r2, 2400bc78 <lv_draw_img+0x28>
        show_error(coords, mask, "No\ndata");
2400bc64:	4a66      	ldr	r2, [pc, #408]	; (2400be00 <lv_draw_img+0x1b0>)
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
2400bc66:	4641      	mov	r1, r8
2400bc68:	4620      	mov	r0, r4
}
2400bc6a:	b00b      	add	sp, #44	; 0x2c
2400bc6c:	ecbd 8b02 	vpop	{d8}
2400bc70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
2400bc74:	f7ff bd36 	b.w	2400b6e4 <show_error>
    if(dsc->opa <= LV_OPA_MIN) return;
2400bc78:	781b      	ldrb	r3, [r3, #0]
2400bc7a:	2b02      	cmp	r3, #2
2400bc7c:	d957      	bls.n	2400bd2e <lv_draw_img+0xde>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
2400bc7e:	89b9      	ldrh	r1, [r7, #12]
2400bc80:	f002 fd06 	bl	2400e690 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
2400bc84:	4605      	mov	r5, r0
2400bc86:	2800      	cmp	r0, #0
2400bc88:	d0ec      	beq.n	2400bc64 <lv_draw_img+0x14>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
2400bc8a:	7b03      	ldrb	r3, [r0, #12]
    if(cdsc->dec_dsc.error_msg != NULL) {
2400bc8c:	6982      	ldr	r2, [r0, #24]
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
2400bc8e:	f003 031f 	and.w	r3, r3, #31
    if(cdsc->dec_dsc.error_msg != NULL) {
2400bc92:	2a00      	cmp	r2, #0
2400bc94:	d1e7      	bne.n	2400bc66 <lv_draw_img+0x16>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
2400bc96:	4618      	mov	r0, r3
2400bc98:	f7ff ffc5 	bl	2400bc26 <lv_img_cf_is_chroma_keyed>
2400bc9c:	9002      	str	r0, [sp, #8]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
2400bc9e:	4618      	mov	r0, r3
2400bca0:	f7ff ffcb 	bl	2400bc3a <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
2400bca4:	692b      	ldr	r3, [r5, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
2400bca6:	9003      	str	r0, [sp, #12]
    else if(cdsc->dec_dsc.img_data) {
2400bca8:	2b00      	cmp	r3, #0
2400bcaa:	d045      	beq.n	2400bd38 <lv_draw_img+0xe8>
        lv_area_copy(&map_area_rot, coords);
2400bcac:	a806      	add	r0, sp, #24
2400bcae:	4621      	mov	r1, r4
2400bcb0:	f7ff fd38 	bl	2400b724 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
2400bcb4:	887b      	ldrh	r3, [r7, #2]
2400bcb6:	8938      	ldrh	r0, [r7, #8]
2400bcb8:	b913      	cbnz	r3, 2400bcc0 <lv_draw_img+0x70>
2400bcba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
2400bcbe:	d026      	beq.n	2400bd0e <lv_draw_img+0xbe>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400bcc0:	88e2      	ldrh	r2, [r4, #6]
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
2400bcc2:	b21b      	sxth	r3, r3
2400bcc4:	8861      	ldrh	r1, [r4, #2]
2400bcc6:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400bcc8:	8826      	ldrh	r6, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400bcca:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400bccc:	88a1      	ldrh	r1, [r4, #4]
2400bcce:	3101      	adds	r1, #1
2400bcd0:	b212      	sxth	r2, r2
2400bcd2:	1b89      	subs	r1, r1, r6
2400bcd4:	1d3e      	adds	r6, r7, #4
2400bcd6:	b209      	sxth	r1, r1
2400bcd8:	e9cd 0600 	strd	r0, r6, [sp]
2400bcdc:	a806      	add	r0, sp, #24
2400bcde:	f002 fccf 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
2400bce2:	8822      	ldrh	r2, [r4, #0]
2400bce4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
            map_area_rot.y1 += coords->y1;
2400bce8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            map_area_rot.x1 += coords->x1;
2400bcec:	4413      	add	r3, r2
2400bcee:	f8ad 3018 	strh.w	r3, [sp, #24]
            map_area_rot.y1 += coords->y1;
2400bcf2:	8863      	ldrh	r3, [r4, #2]
2400bcf4:	4419      	add	r1, r3
2400bcf6:	f8ad 101a 	strh.w	r1, [sp, #26]
            map_area_rot.x2 += coords->x1;
2400bcfa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
2400bcfe:	440a      	add	r2, r1
2400bd00:	f8ad 201c 	strh.w	r2, [sp, #28]
            map_area_rot.y2 += coords->y1;
2400bd04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
2400bd08:	4413      	add	r3, r2
2400bd0a:	f8ad 301e 	strh.w	r3, [sp, #30]
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
2400bd0e:	aa06      	add	r2, sp, #24
2400bd10:	4641      	mov	r1, r8
2400bd12:	a808      	add	r0, sp, #32
2400bd14:	f003 fa1d 	bl	2400f152 <_lv_area_intersect>
        if(union_ok == false) {
2400bd18:	b148      	cbz	r0, 2400bd2e <lv_draw_img+0xde>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
2400bd1a:	9b03      	ldr	r3, [sp, #12]
2400bd1c:	a908      	add	r1, sp, #32
2400bd1e:	4620      	mov	r0, r4
2400bd20:	9301      	str	r3, [sp, #4]
2400bd22:	9b02      	ldr	r3, [sp, #8]
2400bd24:	9300      	str	r3, [sp, #0]
2400bd26:	463b      	mov	r3, r7
2400bd28:	692a      	ldr	r2, [r5, #16]
2400bd2a:	f7ff fd05 	bl	2400b738 <lv_draw_map>
}
2400bd2e:	b00b      	add	sp, #44	; 0x2c
2400bd30:	ecbd 8b02 	vpop	{d8}
2400bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
2400bd38:	4622      	mov	r2, r4
2400bd3a:	4641      	mov	r1, r8
2400bd3c:	a804      	add	r0, sp, #16
2400bd3e:	f003 fa08 	bl	2400f152 <_lv_area_intersect>
        if(union_ok == false) {
2400bd42:	2800      	cmp	r0, #0
2400bd44:	d0f3      	beq.n	2400bd2e <lv_draw_img+0xde>
2400bd46:	f8bd 6014 	ldrh.w	r6, [sp, #20]
2400bd4a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
2400bd4e:	3601      	adds	r6, #1
2400bd50:	1af6      	subs	r6, r6, r3
2400bd52:	b236      	sxth	r6, r6
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
2400bd54:	eb06 0046 	add.w	r0, r6, r6, lsl #1
2400bd58:	f003 ffc4 	bl	2400fce4 <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
2400bd5c:	a904      	add	r1, sp, #16
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
2400bd5e:	4681      	mov	r9, r0
        lv_area_copy(&line, &mask_com);
2400bd60:	a806      	add	r0, sp, #24
2400bd62:	f7ff fcdf 	bl	2400b724 <lv_area_copy>
        lv_area_set_height(&line, 1);
2400bd66:	2101      	movs	r1, #1
2400bd68:	a806      	add	r0, sp, #24
2400bd6a:	f003 f9d1 	bl	2400f110 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
2400bd6e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
2400bd72:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
2400bd76:	f9bd b012 	ldrsh.w	fp, [sp, #18]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
2400bd7a:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
2400bd7c:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
2400bd80:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
2400bd82:	ebab 0a0a 	sub.w	sl, fp, sl
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
2400bd86:	ee08 3a10 	vmov	s16, r3
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
2400bd8a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
2400bd8e:	459b      	cmp	fp, r3
2400bd90:	dd03      	ble.n	2400bd9a <lv_draw_img+0x14a>
        _lv_mem_buf_release(buf);
2400bd92:	4648      	mov	r0, r9
2400bd94:	f003 fe3e 	bl	2400fa14 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
2400bd98:	e7c9      	b.n	2400bd2e <lv_draw_img+0xde>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
2400bd9a:	aa06      	add	r2, sp, #24
2400bd9c:	4641      	mov	r1, r8
2400bd9e:	a808      	add	r0, sp, #32
2400bda0:	f003 f9d7 	bl	2400f152 <_lv_area_intersect>
            if(union_ok == false) continue;
2400bda4:	b340      	cbz	r0, 2400bdf8 <lv_draw_img+0x1a8>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
2400bda6:	4633      	mov	r3, r6
2400bda8:	fa0f f28a 	sxth.w	r2, sl
2400bdac:	ee18 1a10 	vmov	r1, s16
2400bdb0:	4628      	mov	r0, r5
2400bdb2:	f8cd 9000 	str.w	r9, [sp]
2400bdb6:	f002 fe29 	bl	2400ea0c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
2400bdba:	2801      	cmp	r0, #1
2400bdbc:	d006      	beq.n	2400bdcc <lv_draw_img+0x17c>
                lv_img_decoder_close(&cdsc->dec_dsc);
2400bdbe:	4628      	mov	r0, r5
2400bdc0:	f002 fe34 	bl	2400ea2c <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
2400bdc4:	4648      	mov	r0, r9
2400bdc6:	f003 fe25 	bl	2400fa14 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
2400bdca:	e74b      	b.n	2400bc64 <lv_draw_img+0x14>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
2400bdcc:	9b03      	ldr	r3, [sp, #12]
2400bdce:	464a      	mov	r2, r9
2400bdd0:	a908      	add	r1, sp, #32
2400bdd2:	a806      	add	r0, sp, #24
2400bdd4:	9301      	str	r3, [sp, #4]
            y++;
2400bdd6:	f10a 0a01 	add.w	sl, sl, #1
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
2400bdda:	9b02      	ldr	r3, [sp, #8]
2400bddc:	9300      	str	r3, [sp, #0]
2400bdde:	463b      	mov	r3, r7
2400bde0:	f7ff fcaa 	bl	2400b738 <lv_draw_map>
            line.y1++;
2400bde4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
2400bde8:	3301      	adds	r3, #1
2400bdea:	f8ad 301a 	strh.w	r3, [sp, #26]
            line.y2++;
2400bdee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
2400bdf2:	3301      	adds	r3, #1
2400bdf4:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
2400bdf8:	f10b 0b01 	add.w	fp, fp, #1
2400bdfc:	e7c5      	b.n	2400bd8a <lv_draw_img+0x13a>
2400bdfe:	bf00      	nop
2400be00:	900d66e2 	.word	0x900d66e2

2400be04 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
2400be04:	b138      	cbz	r0, 2400be16 <lv_img_src_get_type+0x12>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
2400be06:	7800      	ldrb	r0, [r0, #0]
2400be08:	f1a0 0320 	sub.w	r3, r0, #32
2400be0c:	2b5f      	cmp	r3, #95	; 0x5f
2400be0e:	d904      	bls.n	2400be1a <lv_img_src_get_type+0x16>
    else if(u8_p[0] >= 0x80) {
2400be10:	09c0      	lsrs	r0, r0, #7
2400be12:	0040      	lsls	r0, r0, #1
2400be14:	4770      	bx	lr
    if(src == NULL) return img_src_type;
2400be16:	2003      	movs	r0, #3
2400be18:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
2400be1a:	2001      	movs	r0, #1
}
2400be1c:	4770      	bx	lr

2400be1e <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
2400be1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
2400be22:	b2db      	uxtb	r3, r3
2400be24:	2b09      	cmp	r3, #9
2400be26:	d90a      	bls.n	2400be3e <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
2400be28:	2860      	cmp	r0, #96	; 0x60
2400be2a:	bf84      	itt	hi
2400be2c:	3820      	subhi	r0, #32
2400be2e:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
2400be30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
2400be34:	2b05      	cmp	r3, #5
2400be36:	bf96      	itet	ls
2400be38:	3837      	subls	r0, #55	; 0x37
{
2400be3a:	2300      	movhi	r3, #0
2400be3c:	b2c3      	uxtbls	r3, r0
                break;
        }
    }

    return result;
}
2400be3e:	4618      	mov	r0, r3
2400be40:	4770      	bx	lr
	...

2400be44 <lv_draw_label_dsc_init>:
{
2400be44:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
2400be46:	2124      	movs	r1, #36	; 0x24
{
2400be48:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
2400be4a:	f003 ffd9 	bl	2400fe00 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
2400be4e:	23ff      	movs	r3, #255	; 0xff
    dsc->sel_bg_color = LV_COLOR_BLUE;
2400be50:	221f      	movs	r2, #31
    dsc->opa = LV_OPA_COVER;
2400be52:	7323      	strb	r3, [r4, #12]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
2400be54:	4b05      	ldr	r3, [pc, #20]	; (2400be6c <lv_draw_label_dsc_init+0x28>)
    dsc->sel_bg_color = LV_COLOR_BLUE;
2400be56:	80a2      	strh	r2, [r4, #4]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
2400be58:	60a3      	str	r3, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
2400be5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
2400be5e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    dsc->color = LV_COLOR_BLACK;
2400be62:	2300      	movs	r3, #0
2400be64:	6023      	str	r3, [r4, #0]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
2400be66:	f884 3020 	strb.w	r3, [r4, #32]
}
2400be6a:	bd10      	pop	{r4, pc}
2400be6c:	2401a5e8 	.word	0x2401a5e8

2400be70 <lv_draw_label>:
{
2400be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400be74:	ed2d 8b02 	vpush	{d8}
2400be78:	b0c7      	sub	sp, #284	; 0x11c
2400be7a:	468a      	mov	sl, r1
2400be7c:	4614      	mov	r4, r2
2400be7e:	9309      	str	r3, [sp, #36]	; 0x24
2400be80:	2300      	movs	r3, #0
2400be82:	9d52      	ldr	r5, [sp, #328]	; 0x148
2400be84:	931b      	str	r3, [sp, #108]	; 0x6c
    if(dsc->opa <= LV_OPA_MIN) return;
2400be86:	7b13      	ldrb	r3, [r2, #12]
{
2400be88:	9005      	str	r0, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
2400be8a:	2b02      	cmp	r3, #2
2400be8c:	f240 80cf 	bls.w	2400c02e <lv_draw_label+0x1be>
    if(txt[0] == '\0')  return;
2400be90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const lv_font_t * font = dsc->font;
2400be92:	f8d2 b008 	ldr.w	fp, [r2, #8]
    if(txt[0] == '\0')  return;
2400be96:	781b      	ldrb	r3, [r3, #0]
2400be98:	2b00      	cmp	r3, #0
2400be9a:	f000 80c8 	beq.w	2400c02e <lv_draw_label+0x1be>
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
2400be9e:	460a      	mov	r2, r1
2400bea0:	4601      	mov	r1, r0
2400bea2:	a827      	add	r0, sp, #156	; 0x9c
2400bea4:	f003 f955 	bl	2400f152 <_lv_area_intersect>
    if(!clip_ok) return;
2400bea8:	2800      	cmp	r0, #0
2400beaa:	f000 80c0 	beq.w	2400c02e <lv_draw_label+0x1be>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
2400beae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
2400beb2:	079e      	lsls	r6, r3, #30
2400beb4:	f100 80c0 	bmi.w	2400c038 <lv_draw_label+0x1c8>
2400beb8:	9b05      	ldr	r3, [sp, #20]
2400beba:	9a05      	ldr	r2, [sp, #20]
2400bebc:	889b      	ldrh	r3, [r3, #4]
2400bebe:	8812      	ldrh	r2, [r2, #0]
2400bec0:	3301      	adds	r3, #1
2400bec2:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
2400bec4:	b21b      	sxth	r3, r3
    pos.x = coords->x1;
2400bec6:	9a05      	ldr	r2, [sp, #20]
    int32_t line_height_font = lv_font_get_line_height(font);
2400bec8:	f9bb 9008 	ldrsh.w	r9, [fp, #8]
    pos.x = coords->x1;
2400becc:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t line_height = line_height_font + dsc->line_space;
2400bed0:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
    pos.x = coords->x1;
2400bed4:	920a      	str	r2, [sp, #40]	; 0x28
    pos.y = coords->y1;
2400bed6:	9a05      	ldr	r2, [sp, #20]
    int32_t line_height = line_height_font + dsc->line_space;
2400bed8:	444e      	add	r6, r9
    pos.y = coords->y1;
2400beda:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    x_ofs = dsc->ofs_x;
2400bede:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
2400bee2:	9222      	str	r2, [sp, #136]	; 0x88
    y_ofs = dsc->ofs_y;
2400bee4:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
    pos.y += y_ofs;
2400bee8:	eb00 0c02 	add.w	ip, r0, r2
2400beec:	fa0f f18c 	sxth.w	r1, ip
2400bef0:	fa1f f78c 	uxth.w	r7, ip
2400bef4:	9106      	str	r1, [sp, #24]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
2400bef6:	2d00      	cmp	r5, #0
2400bef8:	f000 80af 	beq.w	2400c05a <lv_draw_label+0x1ea>
2400befc:	2a00      	cmp	r2, #0
2400befe:	f040 80ae 	bne.w	2400c05e <lv_draw_label+0x1ee>
2400bf02:	2800      	cmp	r0, #0
2400bf04:	f280 80ac 	bge.w	2400c060 <lv_draw_label+0x1f0>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
2400bf08:	68aa      	ldr	r2, [r5, #8]
2400bf0a:	1a12      	subs	r2, r2, r0
2400bf0c:	f5c6 7000 	rsb	r0, r6, #512	; 0x200
2400bf10:	2a00      	cmp	r2, #0
2400bf12:	bfb8      	it	lt
2400bf14:	4252      	neglt	r2, r2
2400bf16:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
            hint->line_start = -1;
2400bf1a:	bfc4      	itt	gt
2400bf1c:	f04f 32ff 	movgt.w	r2, #4294967295
2400bf20:	602a      	strgt	r2, [r5, #0]
        last_line_start = hint->line_start;
2400bf22:	682a      	ldr	r2, [r5, #0]
    if(hint && last_line_start >= 0) {
2400bf24:	2a00      	cmp	r2, #0
2400bf26:	f2c0 809a 	blt.w	2400c05e <lv_draw_label+0x1ee>
        line_start = last_line_start;
2400bf2a:	9204      	str	r2, [sp, #16]
        pos.y += hint->y;
2400bf2c:	686a      	ldr	r2, [r5, #4]
2400bf2e:	443a      	add	r2, r7
2400bf30:	b212      	sxth	r2, r2
2400bf32:	9206      	str	r2, [sp, #24]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400bf34:	b21b      	sxth	r3, r3
2400bf36:	9809      	ldr	r0, [sp, #36]	; 0x24
2400bf38:	9f04      	ldr	r7, [sp, #16]
2400bf3a:	4659      	mov	r1, fp
2400bf3c:	ee08 3a10 	vmov	s16, r3
2400bf40:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
2400bf44:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
2400bf48:	4438      	add	r0, r7
2400bf4a:	9300      	str	r3, [sp, #0]
2400bf4c:	ee18 3a10 	vmov	r3, s16
2400bf50:	f004 fdc8 	bl	24010ae4 <_lv_txt_get_next_line>
2400bf54:	9b04      	ldr	r3, [sp, #16]
2400bf56:	18c3      	adds	r3, r0, r3
2400bf58:	9307      	str	r3, [sp, #28]
    while(pos.y + line_height_font < mask->y1) {
2400bf5a:	9a06      	ldr	r2, [sp, #24]
2400bf5c:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
2400bf60:	444a      	add	r2, r9
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400bf62:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    while(pos.y + line_height_font < mask->y1) {
2400bf66:	428a      	cmp	r2, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400bf68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    while(pos.y + line_height_font < mask->y1) {
2400bf6a:	db7b      	blt.n	2400c064 <lv_draw_label+0x1f4>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400bf6c:	9904      	ldr	r1, [sp, #16]
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
2400bf6e:	075d      	lsls	r5, r3, #29
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400bf70:	eb02 0001 	add.w	r0, r2, r1
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
2400bf74:	f140 80a0 	bpl.w	2400c0b8 <lv_draw_label+0x248>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400bf78:	9907      	ldr	r1, [sp, #28]
2400bf7a:	465a      	mov	r2, fp
2400bf7c:	9d04      	ldr	r5, [sp, #16]
2400bf7e:	9300      	str	r3, [sp, #0]
2400bf80:	1b49      	subs	r1, r1, r5
2400bf82:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
2400bf86:	f004 fd5d 	bl	24010a44 <_lv_txt_get_width>
2400bf8a:	9b05      	ldr	r3, [sp, #20]
2400bf8c:	9a05      	ldr	r2, [sp, #20]
2400bf8e:	889b      	ldrh	r3, [r3, #4]
2400bf90:	8812      	ldrh	r2, [r2, #0]
2400bf92:	3301      	adds	r3, #1
2400bf94:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
2400bf96:	b21b      	sxth	r3, r3
2400bf98:	1a18      	subs	r0, r3, r0
2400bf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400bf9c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
2400bfa0:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
2400bfa4:	b203      	sxth	r3, r0
2400bfa6:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t opa = dsc->opa;
2400bfa8:	7b23      	ldrb	r3, [r4, #12]
2400bfaa:	931a      	str	r3, [sp, #104]	; 0x68
    uint32_t sel_start = dsc->sel_start;
2400bfac:	6963      	ldr	r3, [r4, #20]
2400bfae:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t sel_end = dsc->sel_end;
2400bfb0:	69a3      	ldr	r3, [r4, #24]
2400bfb2:	930f      	str	r3, [sp, #60]	; 0x3c
    if(sel_start > sel_end) {
2400bfb4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
2400bfb8:	4293      	cmp	r3, r2
2400bfba:	bf88      	it	hi
2400bfbc:	e9cd 230e 	strdhi	r2, r3, [sp, #56]	; 0x38
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
2400bfc0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
2400bfc4:	079a      	lsls	r2, r3, #30
2400bfc6:	d017      	beq.n	2400bff8 <lv_draw_label+0x188>
        lv_draw_line_dsc_init(&line_dsc);
2400bfc8:	a82b      	add	r0, sp, #172	; 0xac
2400bfca:	f000 fbb1 	bl	2400c730 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
2400bfce:	8823      	ldrh	r3, [r4, #0]
        line_dsc.blend_mode = dsc->blend_mode;
2400bfd0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
        line_dsc.color = dsc->color;
2400bfd4:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
2400bfd8:	f99b 300e 	ldrsb.w	r3, [fp, #14]
2400bfdc:	2b00      	cmp	r3, #0
2400bfde:	bf08      	it	eq
2400bfe0:	2301      	moveq	r3, #1
2400bfe2:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        line_dsc.opa = dsc->opa;
2400bfe6:	7b23      	ldrb	r3, [r4, #12]
2400bfe8:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
        line_dsc.blend_mode = dsc->blend_mode;
2400bfec:	f89d 30b5 	ldrb.w	r3, [sp, #181]	; 0xb5
2400bff0:	f362 0301 	bfi	r3, r2, #0, #2
2400bff4:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
    lv_draw_rect_dsc_init(&draw_dsc_sel);
2400bff8:	a831      	add	r0, sp, #196	; 0xc4
2400bffa:	f001 fd33 	bl	2400da64 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
2400bffe:	88a3      	ldrh	r3, [r4, #4]
    while(txt[line_start] != '\0') {
2400c000:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
2400c002:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
    while(txt[line_start] != '\0') {
2400c006:	9b1a      	ldr	r3, [sp, #104]	; 0x68
2400c008:	2bfd      	cmp	r3, #253	; 0xfd
2400c00a:	bf88      	it	hi
2400c00c:	23ff      	movhi	r3, #255	; 0xff
2400c00e:	9314      	str	r3, [sp, #80]	; 0x50
2400c010:	b2b3      	uxth	r3, r6
2400c012:	931c      	str	r3, [sp, #112]	; 0x70
2400c014:	f8bd 3018 	ldrh.w	r3, [sp, #24]
2400c018:	9318      	str	r3, [sp, #96]	; 0x60
    uint32_t par_start = 0;
2400c01a:	2300      	movs	r3, #0
2400c01c:	9316      	str	r3, [sp, #88]	; 0x58
    while(txt[line_start] != '\0') {
2400c01e:	9a04      	ldr	r2, [sp, #16]
2400c020:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400c022:	4413      	add	r3, r2
2400c024:	9315      	str	r3, [sp, #84]	; 0x54
2400c026:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400c028:	5c9b      	ldrb	r3, [r3, r2]
2400c02a:	2b00      	cmp	r3, #0
2400c02c:	d15b      	bne.n	2400c0e6 <lv_draw_label+0x276>
}
2400c02e:	b047      	add	sp, #284	; 0x11c
2400c030:	ecbd 8b02 	vpop	{d8}
2400c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
2400c038:	9302      	str	r3, [sp, #8]
2400c03a:	f647 4318 	movw	r3, #31768	; 0x7c18
2400c03e:	68a2      	ldr	r2, [r4, #8]
2400c040:	a831      	add	r0, sp, #196	; 0xc4
2400c042:	9301      	str	r3, [sp, #4]
2400c044:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
2400c048:	9909      	ldr	r1, [sp, #36]	; 0x24
2400c04a:	9300      	str	r3, [sp, #0]
2400c04c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
2400c050:	f004 fe2a 	bl	24010ca8 <_lv_txt_get_size>
        w = p.x;
2400c054:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
2400c058:	e735      	b.n	2400bec6 <lv_draw_label+0x56>
    uint32_t line_start     = 0;
2400c05a:	9504      	str	r5, [sp, #16]
2400c05c:	e76a      	b.n	2400bf34 <lv_draw_label+0xc4>
2400c05e:	2200      	movs	r2, #0
2400c060:	9204      	str	r2, [sp, #16]
2400c062:	e767      	b.n	2400bf34 <lv_draw_label+0xc4>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400c064:	9907      	ldr	r1, [sp, #28]
2400c066:	9300      	str	r3, [sp, #0]
2400c068:	ee18 3a10 	vmov	r3, s16
2400c06c:	eb02 0801 	add.w	r8, r2, r1
2400c070:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
2400c074:	4659      	mov	r1, fp
2400c076:	4640      	mov	r0, r8
2400c078:	f004 fd34 	bl	24010ae4 <_lv_txt_get_next_line>
2400c07c:	9b07      	ldr	r3, [sp, #28]
2400c07e:	4418      	add	r0, r3
        pos.y += line_height;
2400c080:	9b06      	ldr	r3, [sp, #24]
2400c082:	4433      	add	r3, r6
2400c084:	b21b      	sxth	r3, r3
2400c086:	9306      	str	r3, [sp, #24]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
2400c088:	b175      	cbz	r5, 2400c0a8 <lv_draw_label+0x238>
2400c08a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
2400c08e:	db0b      	blt.n	2400c0a8 <lv_draw_label+0x238>
2400c090:	682b      	ldr	r3, [r5, #0]
2400c092:	2b00      	cmp	r3, #0
2400c094:	da08      	bge.n	2400c0a8 <lv_draw_label+0x238>
            hint->line_start = line_start;
2400c096:	9b07      	ldr	r3, [sp, #28]
            hint->y          = pos.y - coords->y1;
2400c098:	9a06      	ldr	r2, [sp, #24]
            hint->line_start = line_start;
2400c09a:	602b      	str	r3, [r5, #0]
            hint->y          = pos.y - coords->y1;
2400c09c:	9b05      	ldr	r3, [sp, #20]
2400c09e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
2400c0a2:	1ad2      	subs	r2, r2, r3
            hint->coord_y    = coords->y1;
2400c0a4:	e9c5 2301 	strd	r2, r3, [r5, #4]
        if(txt[line_start] == '\0') return;
2400c0a8:	9b07      	ldr	r3, [sp, #28]
2400c0aa:	9304      	str	r3, [sp, #16]
2400c0ac:	f898 3000 	ldrb.w	r3, [r8]
2400c0b0:	2b00      	cmp	r3, #0
2400c0b2:	d0bc      	beq.n	2400c02e <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400c0b4:	9007      	str	r0, [sp, #28]
2400c0b6:	e750      	b.n	2400bf5a <lv_draw_label+0xea>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
2400c0b8:	0719      	lsls	r1, r3, #28
2400c0ba:	f57f af75 	bpl.w	2400bfa8 <lv_draw_label+0x138>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400c0be:	9907      	ldr	r1, [sp, #28]
2400c0c0:	465a      	mov	r2, fp
2400c0c2:	9d04      	ldr	r5, [sp, #16]
2400c0c4:	9300      	str	r3, [sp, #0]
2400c0c6:	1b49      	subs	r1, r1, r5
2400c0c8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
2400c0cc:	f004 fcba 	bl	24010a44 <_lv_txt_get_width>
2400c0d0:	9b05      	ldr	r3, [sp, #20]
2400c0d2:	9a05      	ldr	r2, [sp, #20]
2400c0d4:	889b      	ldrh	r3, [r3, #4]
2400c0d6:	8812      	ldrh	r2, [r2, #0]
2400c0d8:	3301      	adds	r3, #1
2400c0da:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
2400c0dc:	b21b      	sxth	r3, r3
2400c0de:	1a18      	subs	r0, r3, r0
2400c0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400c0e2:	4418      	add	r0, r3
2400c0e4:	e75e      	b.n	2400bfa4 <lv_draw_label+0x134>
        pos.x += x_ofs;
2400c0e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
2400c0e8:	441d      	add	r5, r3
2400c0ea:	b22b      	sxth	r3, r5
2400c0ec:	930b      	str	r3, [sp, #44]	; 0x2c
        i         = 0;
2400c0ee:	2300      	movs	r3, #0
2400c0f0:	9326      	str	r3, [sp, #152]	; 0x98
                        cmd_state = CMD_STATE_WAIT;
2400c0f2:	9308      	str	r3, [sp, #32]
2400c0f4:	e0b6      	b.n	2400c264 <lv_draw_label+0x3f4>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
2400c0f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400c0fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
2400c0fc:	429a      	cmp	r2, r3
2400c0fe:	d023      	beq.n	2400c148 <lv_draw_label+0x2d8>
2400c100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
2400c102:	429a      	cmp	r2, r3
2400c104:	d020      	beq.n	2400c148 <lv_draw_label+0x2d8>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
2400c106:	9a04      	ldr	r2, [sp, #16]
2400c108:	4b9e      	ldr	r3, [pc, #632]	; (2400c384 <lv_draw_label+0x514>)
2400c10a:	4411      	add	r1, r2
2400c10c:	9809      	ldr	r0, [sp, #36]	; 0x24
2400c10e:	681b      	ldr	r3, [r3, #0]
2400c110:	4798      	blx	r3
2400c112:	4607      	mov	r7, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
2400c114:	4d9c      	ldr	r5, [pc, #624]	; (2400c388 <lv_draw_label+0x518>)
2400c116:	a926      	add	r1, sp, #152	; 0x98
2400c118:	9815      	ldr	r0, [sp, #84]	; 0x54
2400c11a:	682b      	ldr	r3, [r5, #0]
2400c11c:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
2400c11e:	9a15      	ldr	r2, [sp, #84]	; 0x54
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
2400c120:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
2400c122:	9826      	ldr	r0, [sp, #152]	; 0x98
2400c124:	682b      	ldr	r3, [r5, #0]
2400c126:	2100      	movs	r1, #0
2400c128:	4410      	add	r0, r2
2400c12a:	4798      	blx	r3
2400c12c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
2400c130:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
2400c132:	f013 0301 	ands.w	r3, r3, #1
2400c136:	f000 811d 	beq.w	2400c374 <lv_draw_label+0x504>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
2400c13a:	2e23      	cmp	r6, #35	; 0x23
2400c13c:	d10e      	bne.n	2400c15c <lv_draw_label+0x2ec>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
2400c13e:	9908      	ldr	r1, [sp, #32]
2400c140:	b921      	cbnz	r1, 2400c14c <lv_draw_label+0x2dc>
                        par_start = i;
2400c142:	9a26      	ldr	r2, [sp, #152]	; 0x98
2400c144:	9216      	str	r2, [sp, #88]	; 0x58
                        continue;
2400c146:	e7d4      	b.n	2400c0f2 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
2400c148:	2700      	movs	r7, #0
2400c14a:	e7e3      	b.n	2400c114 <lv_draw_label+0x2a4>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
2400c14c:	9b08      	ldr	r3, [sp, #32]
2400c14e:	2b01      	cmp	r3, #1
2400c150:	d049      	beq.n	2400c1e6 <lv_draw_label+0x376>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
2400c152:	2b02      	cmp	r3, #2
2400c154:	f040 8111 	bne.w	2400c37a <lv_draw_label+0x50a>
                        cmd_state = CMD_STATE_WAIT;
2400c158:	2300      	movs	r3, #0
2400c15a:	e7ca      	b.n	2400c0f2 <lv_draw_label+0x282>
                if(cmd_state == CMD_STATE_PAR) {
2400c15c:	9b08      	ldr	r3, [sp, #32]
2400c15e:	2b01      	cmp	r3, #1
2400c160:	f040 8108 	bne.w	2400c374 <lv_draw_label+0x504>
                    if(letter == ' ') {
2400c164:	2e20      	cmp	r6, #32
2400c166:	d17d      	bne.n	2400c264 <lv_draw_label+0x3f4>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
2400c168:	9b26      	ldr	r3, [sp, #152]	; 0x98
2400c16a:	9a16      	ldr	r2, [sp, #88]	; 0x58
2400c16c:	1a9b      	subs	r3, r3, r2
2400c16e:	2b07      	cmp	r3, #7
2400c170:	d137      	bne.n	2400c1e2 <lv_draw_label+0x372>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
2400c172:	9b15      	ldr	r3, [sp, #84]	; 0x54
        *d8 = *s8;
2400c174:	9916      	ldr	r1, [sp, #88]	; 0x58
2400c176:	189a      	adds	r2, r3, r2
2400c178:	5858      	ldr	r0, [r3, r1]
2400c17a:	8893      	ldrh	r3, [r2, #4]
2400c17c:	f3c0 4507 	ubfx	r5, r0, #16, #8
2400c180:	f3c0 6107 	ubfx	r1, r0, #24, #8
2400c184:	f3c0 2607 	ubfx	r6, r0, #8, #8
2400c188:	902e      	str	r0, [sp, #184]	; 0xb8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
2400c18a:	b2c0      	uxtb	r0, r0
2400c18c:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
2400c190:	f7ff fe45 	bl	2400be1e <hex_char_to_num>
2400c194:	4602      	mov	r2, r0
2400c196:	b2f0      	uxtb	r0, r6
2400c198:	f7ff fe41 	bl	2400be1e <hex_char_to_num>
2400c19c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
2400c1a0:	b2e8      	uxtb	r0, r5
2400c1a2:	f7ff fe3c 	bl	2400be1e <hex_char_to_num>
2400c1a6:	4605      	mov	r5, r0
2400c1a8:	b2c8      	uxtb	r0, r1
2400c1aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
2400c1ae:	f7ff fe36 	bl	2400be1e <hex_char_to_num>
2400c1b2:	eb00 1105 	add.w	r1, r0, r5, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
2400c1b6:	f89d 00bc 	ldrb.w	r0, [sp, #188]	; 0xbc
2400c1ba:	f7ff fe30 	bl	2400be1e <hex_char_to_num>
2400c1be:	4605      	mov	r5, r0
2400c1c0:	f89d 00bd 	ldrb.w	r0, [sp, #189]	; 0xbd
2400c1c4:	f3c1 0185 	ubfx	r1, r1, #2, #6
2400c1c8:	f7ff fe29 	bl	2400be1e <hex_char_to_num>
2400c1cc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
2400c1d0:	f3c0 03c4 	ubfx	r3, r0, #3, #5
2400c1d4:	ea43 1041 	orr.w	r0, r3, r1, lsl #5
2400c1d8:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
                            recolor.full = dsc->color.full;
2400c1dc:	931b      	str	r3, [sp, #108]	; 0x6c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
2400c1de:	2302      	movs	r3, #2
2400c1e0:	e787      	b.n	2400c0f2 <lv_draw_label+0x282>
                            recolor.full = dsc->color.full;
2400c1e2:	8823      	ldrh	r3, [r4, #0]
2400c1e4:	e7fa      	b.n	2400c1dc <lv_draw_label+0x36c>
                        cmd_state = CMD_STATE_WAIT;
2400c1e6:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
2400c1e8:	8825      	ldrh	r5, [r4, #0]
                        cmd_state = CMD_STATE_WAIT;
2400c1ea:	9308      	str	r3, [sp, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
2400c1ec:	4631      	mov	r1, r6
2400c1ee:	4658      	mov	r0, fp
2400c1f0:	f002 fc60 	bl	2400eab4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
2400c1f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400c1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
2400c1fa:	9019      	str	r0, [sp, #100]	; 0x64
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
2400c1fc:	429a      	cmp	r2, r3
2400c1fe:	d020      	beq.n	2400c242 <lv_draw_label+0x3d2>
2400c200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
2400c202:	429a      	cmp	r2, r3
2400c204:	d01d      	beq.n	2400c242 <lv_draw_label+0x3d2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
2400c206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
2400c208:	42bb      	cmp	r3, r7
2400c20a:	d81a      	bhi.n	2400c242 <lv_draw_label+0x3d2>
2400c20c:	42ba      	cmp	r2, r7
2400c20e:	d918      	bls.n	2400c242 <lv_draw_label+0x3d2>
                    sel_coords.x1 = pos.x;
2400c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
2400c212:	4651      	mov	r1, sl
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
2400c214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    sel_coords.x1 = pos.x;
2400c216:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
                    sel_coords.y1 = pos.y;
2400c21a:	9b06      	ldr	r3, [sp, #24]
2400c21c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
2400c220:	8a23      	ldrh	r3, [r4, #16]
2400c222:	3b01      	subs	r3, #1
2400c224:	4413      	add	r3, r2
                    sel_coords.y2 = pos.y + line_height - 1;
2400c226:	9a06      	ldr	r2, [sp, #24]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
2400c228:	4403      	add	r3, r0
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
2400c22a:	a82e      	add	r0, sp, #184	; 0xb8
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
2400c22c:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
                    sel_coords.y2 = pos.y + line_height - 1;
2400c230:	9b1c      	ldr	r3, [sp, #112]	; 0x70
2400c232:	3b01      	subs	r3, #1
2400c234:	4413      	add	r3, r2
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
2400c236:	aa31      	add	r2, sp, #196	; 0xc4
                    sel_coords.y2 = pos.y + line_height - 1;
2400c238:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
2400c23c:	f001 fc36 	bl	2400daac <lv_draw_rect>
                    color = dsc->sel_color;
2400c240:	8865      	ldrh	r5, [r4, #2]
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
2400c242:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
2400c246:	931d      	str	r3, [sp, #116]	; 0x74
    if(opa < LV_OPA_MIN) return;
2400c248:	9b1a      	ldr	r3, [sp, #104]	; 0x68
2400c24a:	2b01      	cmp	r3, #1
2400c24c:	f200 8204 	bhi.w	2400c658 <lv_draw_label+0x7e8>
            if(letter_w > 0) {
2400c250:	9b19      	ldr	r3, [sp, #100]	; 0x64
2400c252:	b13b      	cbz	r3, 2400c264 <lv_draw_label+0x3f4>
                pos.x += letter_w + dsc->letter_space;
2400c254:	8a23      	ldrh	r3, [r4, #16]
2400c256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
2400c258:	441a      	add	r2, r3
2400c25a:	4613      	mov	r3, r2
2400c25c:	9a19      	ldr	r2, [sp, #100]	; 0x64
2400c25e:	441a      	add	r2, r3
2400c260:	b213      	sxth	r3, r2
2400c262:	930b      	str	r3, [sp, #44]	; 0x2c
        while(i < line_end - line_start) {
2400c264:	9b07      	ldr	r3, [sp, #28]
2400c266:	9a04      	ldr	r2, [sp, #16]
2400c268:	9926      	ldr	r1, [sp, #152]	; 0x98
2400c26a:	1a9b      	subs	r3, r3, r2
2400c26c:	428b      	cmp	r3, r1
2400c26e:	f63f af42 	bhi.w	2400c0f6 <lv_draw_label+0x286>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
2400c272:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
2400c276:	079e      	lsls	r6, r3, #30
2400c278:	d51e      	bpl.n	2400c2b8 <lv_draw_label+0x448>
            p1.x = pos_x_start;
2400c27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c27c:	a92e      	add	r1, sp, #184	; 0xb8
2400c27e:	a829      	add	r0, sp, #164	; 0xa4
            p1.x = pos_x_start;
2400c280:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
2400c284:	68a3      	ldr	r3, [r4, #8]
2400c286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
2400c28a:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
2400c28e:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
2400c292:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2400c296:	105b      	asrs	r3, r3, #1
2400c298:	eb03 0362 	add.w	r3, r3, r2, asr #1
2400c29c:	9a18      	ldr	r2, [sp, #96]	; 0x60
2400c29e:	4413      	add	r3, r2
            p2.x = pos.x;
2400c2a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
2400c2a2:	b21b      	sxth	r3, r3
            p2.x = pos.x;
2400c2a4:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2a8:	4652      	mov	r2, sl
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
2400c2aa:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            p2.y = p1.y;
2400c2ae:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2b2:	ab2b      	add	r3, sp, #172	; 0xac
2400c2b4:	f000 fa48 	bl	2400c748 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
2400c2b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
2400c2bc:	07dd      	lsls	r5, r3, #31
2400c2be:	d519      	bpl.n	2400c2f4 <lv_draw_label+0x484>
            p1.x = pos_x_start;
2400c2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2c2:	a829      	add	r0, sp, #164	; 0xa4
            p1.x = pos_x_start;
2400c2c4:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
2400c2c8:	68a3      	ldr	r3, [r4, #8]
2400c2ca:	f99b 200d 	ldrsb.w	r2, [fp, #13]
2400c2ce:	8959      	ldrh	r1, [r3, #10]
2400c2d0:	891b      	ldrh	r3, [r3, #8]
2400c2d2:	440a      	add	r2, r1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2d4:	a92e      	add	r1, sp, #184	; 0xb8
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
2400c2d6:	1a9b      	subs	r3, r3, r2
2400c2d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
2400c2da:	4413      	add	r3, r2
            p2.x = pos.x;
2400c2dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
2400c2de:	b21b      	sxth	r3, r3
            p2.x = pos.x;
2400c2e0:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2e4:	4652      	mov	r2, sl
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
2400c2e6:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            p2.y = p1.y;
2400c2ea:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            lv_draw_line(&p1, &p2, mask, &line_dsc);
2400c2ee:	ab2b      	add	r3, sp, #172	; 0xac
2400c2f0:	f000 fa2a 	bl	2400c748 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400c2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400c2f6:	4659      	mov	r1, fp
2400c2f8:	9a07      	ldr	r2, [sp, #28]
2400c2fa:	189f      	adds	r7, r3, r2
2400c2fc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
2400c300:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
2400c304:	9300      	str	r3, [sp, #0]
2400c306:	4638      	mov	r0, r7
2400c308:	ee18 3a10 	vmov	r3, s16
2400c30c:	f004 fbea 	bl	24010ae4 <_lv_txt_get_next_line>
2400c310:	9b07      	ldr	r3, [sp, #28]
2400c312:	4601      	mov	r1, r0
2400c314:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
2400c316:	9b05      	ldr	r3, [sp, #20]
2400c318:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
2400c31c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
2400c320:	0758      	lsls	r0, r3, #29
2400c322:	f140 8176 	bpl.w	2400c612 <lv_draw_label+0x7a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400c326:	465a      	mov	r2, fp
2400c328:	9300      	str	r3, [sp, #0]
2400c32a:	4638      	mov	r0, r7
2400c32c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
2400c330:	f004 fb88 	bl	24010a44 <_lv_txt_get_width>
2400c334:	9b05      	ldr	r3, [sp, #20]
2400c336:	9a05      	ldr	r2, [sp, #20]
2400c338:	889b      	ldrh	r3, [r3, #4]
2400c33a:	8812      	ldrh	r2, [r2, #0]
2400c33c:	3301      	adds	r3, #1
2400c33e:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
2400c340:	b21b      	sxth	r3, r3
2400c342:	1a18      	subs	r0, r3, r0
2400c344:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
2400c348:	eb05 0060 	add.w	r0, r5, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
2400c34c:	b205      	sxth	r5, r0
        pos.y += line_height;
2400c34e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
2400c350:	9b06      	ldr	r3, [sp, #24]
2400c352:	4413      	add	r3, r2
2400c354:	b21b      	sxth	r3, r3
2400c356:	9306      	str	r3, [sp, #24]
        if(pos.y > mask->y2) return;
2400c358:	9b18      	ldr	r3, [sp, #96]	; 0x60
2400c35a:	4413      	add	r3, r2
2400c35c:	9a06      	ldr	r2, [sp, #24]
2400c35e:	b29b      	uxth	r3, r3
2400c360:	9318      	str	r3, [sp, #96]	; 0x60
        line_start = line_end;
2400c362:	9b07      	ldr	r3, [sp, #28]
2400c364:	9304      	str	r3, [sp, #16]
        if(pos.y > mask->y2) return;
2400c366:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
2400c36a:	4293      	cmp	r3, r2
2400c36c:	f6ff ae5f 	blt.w	2400c02e <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
2400c370:	9607      	str	r6, [sp, #28]
2400c372:	e654      	b.n	2400c01e <lv_draw_label+0x1ae>
            if(cmd_state == CMD_STATE_IN) color = recolor;
2400c374:	9b08      	ldr	r3, [sp, #32]
2400c376:	2b02      	cmp	r3, #2
2400c378:	d001      	beq.n	2400c37e <lv_draw_label+0x50e>
            lv_color_t color = dsc->color;
2400c37a:	8825      	ldrh	r5, [r4, #0]
2400c37c:	e736      	b.n	2400c1ec <lv_draw_label+0x37c>
2400c37e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
2400c380:	e734      	b.n	2400c1ec <lv_draw_label+0x37c>
2400c382:	bf00      	nop
2400c384:	2401a6e0 	.word	0x2401a6e0
2400c388:	2401a6e4 	.word	0x2401a6e4
    switch(bpp) {
2400c38c:	21c0      	movs	r1, #192	; 0xc0
2400c38e:	2602      	movs	r6, #2
2400c390:	2304      	movs	r3, #4
2400c392:	9111      	str	r1, [sp, #68]	; 0x44
2400c394:	49a9      	ldr	r1, [pc, #676]	; (2400c63c <lv_draw_label+0x7cc>)
            bpp_opa_table_p = _lv_bpp4_opa_table;
2400c396:	910c      	str	r1, [sp, #48]	; 0x30
    if(opa < LV_OPA_MAX) {
2400c398:	9914      	ldr	r1, [sp, #80]	; 0x50
2400c39a:	29fc      	cmp	r1, #252	; 0xfc
2400c39c:	d811      	bhi.n	2400c3c2 <lv_draw_label+0x552>
        if(prev_opa != opa || prev_bpp != bpp) {
2400c39e:	49a8      	ldr	r1, [pc, #672]	; (2400c640 <lv_draw_label+0x7d0>)
2400c3a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
2400c3a2:	7809      	ldrb	r1, [r1, #0]
2400c3a4:	42a9      	cmp	r1, r5
2400c3a6:	f040 80a8 	bne.w	2400c4fa <lv_draw_label+0x68a>
2400c3aa:	49a6      	ldr	r1, [pc, #664]	; (2400c644 <lv_draw_label+0x7d4>)
2400c3ac:	6809      	ldr	r1, [r1, #0]
2400c3ae:	42b1      	cmp	r1, r6
2400c3b0:	f040 80a3 	bne.w	2400c4fa <lv_draw_label+0x68a>
        prev_opa = opa;
2400c3b4:	4ba2      	ldr	r3, [pc, #648]	; (2400c640 <lv_draw_label+0x7d0>)
2400c3b6:	9914      	ldr	r1, [sp, #80]	; 0x50
2400c3b8:	7019      	strb	r1, [r3, #0]
        prev_bpp = bpp;
2400c3ba:	4ba2      	ldr	r3, [pc, #648]	; (2400c644 <lv_draw_label+0x7d4>)
2400c3bc:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
2400c3be:	4ba2      	ldr	r3, [pc, #648]	; (2400c648 <lv_draw_label+0x7d8>)
2400c3c0:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
2400c3c2:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t box_w = g->box_w;
2400c3c6:	f8bd 90ba 	ldrh.w	r9, [sp, #186]	; 0xba
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
2400c3ca:	4298      	cmp	r0, r3
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
2400c3cc:	f9ba 7002 	ldrsh.w	r7, [sl, #2]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
2400c3d0:	eb09 0500 	add.w	r5, r9, r0
    int32_t box_h = g->box_h;
2400c3d4:	f8bd 80bc 	ldrh.w	r8, [sp, #188]	; 0xbc
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
2400c3d8:	bfb4      	ite	lt
2400c3da:	1a1b      	sublt	r3, r3, r0
2400c3dc:	2300      	movge	r3, #0
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
2400c3de:	fb06 f109 	mul.w	r1, r6, r9
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
2400c3e2:	930d      	str	r3, [sp, #52]	; 0x34
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
2400c3e4:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
2400c3e8:	429d      	cmp	r5, r3
2400c3ea:	bfcc      	ite	gt
2400c3ec:	1a1b      	subgt	r3, r3, r0
2400c3ee:	f8cd 9040 	strle.w	r9, [sp, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
2400c3f2:	eb08 0002 	add.w	r0, r8, r2
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
2400c3f6:	bfc4      	itt	gt
2400c3f8:	3301      	addgt	r3, #1
2400c3fa:	9310      	strgt	r3, [sp, #64]	; 0x40
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
2400c3fc:	42ba      	cmp	r2, r7
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
2400c3fe:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
2400c402:	bfb4      	ite	lt
2400c404:	1abf      	sublt	r7, r7, r2
2400c406:	2700      	movge	r7, #0
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
2400c408:	4298      	cmp	r0, r3
2400c40a:	bfcc      	ite	gt
2400c40c:	1a9b      	subgt	r3, r3, r2
2400c40e:	f8cd 807c 	strle.w	r8, [sp, #124]	; 0x7c
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
2400c412:	fb08 f809 	mul.w	r8, r8, r9
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
2400c416:	bfc4      	itt	gt
2400c418:	3301      	addgt	r3, #1
2400c41a:	931f      	strgt	r3, [sp, #124]	; 0x7c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
2400c41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2400c41e:	fb03 f506 	mul.w	r5, r3, r6
2400c422:	fb07 5501 	mla	r5, r7, r1, r5
    map_p += bit_ofs >> 3;
2400c426:	eb0c 03d5 	add.w	r3, ip, r5, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
2400c42a:	f005 0507 	and.w	r5, r5, #7
    map_p += bit_ofs >> 3;
2400c42e:	9313      	str	r3, [sp, #76]	; 0x4c
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
2400c430:	f7fd fe22 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400c434:	f002 fcba 	bl	2400edac <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
2400c438:	4580      	cmp	r8, r0
2400c43a:	4643      	mov	r3, r8
2400c43c:	bfa8      	it	ge
2400c43e:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400c440:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
2400c442:	931e      	str	r3, [sp, #120]	; 0x78
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400c444:	f003 fc4e 	bl	2400fce4 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
2400c448:	9a12      	ldr	r2, [sp, #72]	; 0x48
2400c44a:	990d      	ldr	r1, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400c44c:	4680      	mov	r8, r0
    fill_area.x1 = col_start + pos_x;
2400c44e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
2400c452:	fa11 f282 	uxtah	r2, r1, r2
    fill_area.x2 = col_end  + pos_x - 1;
2400c456:	3b01      	subs	r3, #1
    fill_area.x1 = col_start + pos_x;
2400c458:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    fill_area.x2 = col_end  + pos_x - 1;
2400c45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
2400c45e:	4413      	add	r3, r2
2400c460:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    fill_area.y1 = row_start + pos_y;
2400c464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2400c466:	443b      	add	r3, r7
2400c468:	b21b      	sxth	r3, r3
2400c46a:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    fill_area.y2 = fill_area.y1;
2400c46e:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
2400c472:	f001 f9ef 	bl	2400d854 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
2400c476:	f1c6 0308 	rsb	r3, r6, #8
2400c47a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
2400c47c:	9023      	str	r0, [sp, #140]	; 0x8c
    uint32_t col_bit_max = 8 - bpp;
2400c47e:	9317      	str	r3, [sp, #92]	; 0x5c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
2400c480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2400c482:	4499      	add	r9, r3
2400c484:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400c486:	eba9 0903 	sub.w	r9, r9, r3
2400c48a:	fb06 f309 	mul.w	r3, r6, r9
2400c48e:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t mask_p = 0;
2400c490:	2300      	movs	r3, #0
2400c492:	9312      	str	r3, [sp, #72]	; 0x48
2400c494:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400c496:	1a9b      	subs	r3, r3, r2
2400c498:	9321      	str	r3, [sp, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
2400c49a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
2400c49c:	429f      	cmp	r7, r3
2400c49e:	db3e      	blt.n	2400c51e <lv_draw_label+0x6ae>
    if(fill_area.y1 != fill_area.y2) {
2400c4a0:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
2400c4a4:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
2400c4a8:	429a      	cmp	r2, r3
2400c4aa:	d00f      	beq.n	2400c4cc <lv_draw_label+0x65c>
        fill_area.y2--;
2400c4ac:	3b01      	subs	r3, #1
        _lv_blend_fill(clip_area, &fill_area,
2400c4ae:	27ff      	movs	r7, #255	; 0xff
2400c4b0:	ee18 2a90 	vmov	r2, s17
2400c4b4:	a929      	add	r1, sp, #164	; 0xa4
        fill_area.y2--;
2400c4b6:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
        _lv_blend_fill(clip_area, &fill_area,
2400c4ba:	4650      	mov	r0, sl
2400c4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
2400c4be:	9302      	str	r3, [sp, #8]
2400c4c0:	2302      	movs	r3, #2
2400c4c2:	e9cd 3700 	strd	r3, r7, [sp]
2400c4c6:	4643      	mov	r3, r8
2400c4c8:	f7fe fca8 	bl	2400ae1c <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
2400c4cc:	4640      	mov	r0, r8
2400c4ce:	f003 faa1 	bl	2400fa14 <_lv_mem_buf_release>
2400c4d2:	e6bd      	b.n	2400c250 <lv_draw_label+0x3e0>
            bitmask_init  = 0x80;
2400c4d4:	2180      	movs	r1, #128	; 0x80
    uint32_t bpp = g->bpp;
2400c4d6:	2601      	movs	r6, #1
            shades = 2;
2400c4d8:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
2400c4da:	9111      	str	r1, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp1_opa_table;
2400c4dc:	495b      	ldr	r1, [pc, #364]	; (2400c64c <lv_draw_label+0x7dc>)
2400c4de:	e75a      	b.n	2400c396 <lv_draw_label+0x526>
            bitmask_init  = 0xFF;
2400c4e0:	21ff      	movs	r1, #255	; 0xff
    uint32_t bpp = g->bpp;
2400c4e2:	2608      	movs	r6, #8
            shades = 256;
2400c4e4:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
2400c4e8:	9111      	str	r1, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp8_opa_table;
2400c4ea:	4959      	ldr	r1, [pc, #356]	; (2400c650 <lv_draw_label+0x7e0>)
2400c4ec:	e753      	b.n	2400c396 <lv_draw_label+0x526>
            bitmask_init  = 0xF0;
2400c4ee:	21f0      	movs	r1, #240	; 0xf0
    switch(bpp) {
2400c4f0:	2604      	movs	r6, #4
            shades = 16;
2400c4f2:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
2400c4f4:	9111      	str	r1, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp4_opa_table;
2400c4f6:	4957      	ldr	r1, [pc, #348]	; (2400c654 <lv_draw_label+0x7e4>)
2400c4f8:	e74d      	b.n	2400c396 <lv_draw_label+0x526>
2400c4fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
2400c4fc:	4f52      	ldr	r7, [pc, #328]	; (2400c648 <lv_draw_label+0x7d8>)
2400c4fe:	eb03 0e05 	add.w	lr, r3, r5
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
2400c502:	f815 1b01 	ldrb.w	r1, [r5], #1
2400c506:	29ff      	cmp	r1, #255	; 0xff
2400c508:	bf17      	itett	ne
2400c50a:	9b14      	ldrne	r3, [sp, #80]	; 0x50
2400c50c:	9914      	ldreq	r1, [sp, #80]	; 0x50
2400c50e:	fb11 f103 	smulbbne	r1, r1, r3
2400c512:	0a09      	lsrne	r1, r1, #8
            for(i = 0; i < shades; i++) {
2400c514:	4575      	cmp	r5, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
2400c516:	f807 1b01 	strb.w	r1, [r7], #1
            for(i = 0; i < shades; i++) {
2400c51a:	d1f2      	bne.n	2400c502 <lv_draw_label+0x692>
2400c51c:	e74a      	b.n	2400c3b4 <lv_draw_label+0x544>
        bitmask = bitmask_init >> col_bit;
2400c51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
        for(col = col_start; col < col_end; col++) {
2400c520:	990d      	ldr	r1, [sp, #52]	; 0x34
        bitmask = bitmask_init >> col_bit;
2400c522:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
2400c526:	9b12      	ldr	r3, [sp, #72]	; 0x48
2400c528:	eb08 0903 	add.w	r9, r8, r3
2400c52c:	9325      	str	r3, [sp, #148]	; 0x94
2400c52e:	46ce      	mov	lr, r9
2400c530:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400c532:	428b      	cmp	r3, r1
2400c534:	dc3c      	bgt.n	2400c5b0 <lv_draw_label+0x740>
2400c536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
2400c538:	9b21      	ldr	r3, [sp, #132]	; 0x84
2400c53a:	9910      	ldr	r1, [sp, #64]	; 0x40
2400c53c:	428a      	cmp	r2, r1
2400c53e:	bfc8      	it	gt
2400c540:	2300      	movgt	r3, #0
2400c542:	9320      	str	r3, [sp, #128]	; 0x80
2400c544:	9a20      	ldr	r2, [sp, #128]	; 0x80
2400c546:	9b12      	ldr	r3, [sp, #72]	; 0x48
2400c548:	4413      	add	r3, r2
2400c54a:	9312      	str	r3, [sp, #72]	; 0x48
        if(other_mask_cnt) {
2400c54c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
2400c54e:	b1b3      	cbz	r3, 2400c57e <lv_draw_label+0x70e>
2400c550:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
2400c554:	4648      	mov	r0, r9
2400c556:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
2400c55a:	3301      	adds	r3, #1
2400c55c:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
2400c560:	1a5b      	subs	r3, r3, r1
2400c562:	b21b      	sxth	r3, r3
2400c564:	f001 f92e 	bl	2400d7c4 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
2400c568:	b948      	cbnz	r0, 2400c57e <lv_draw_label+0x70e>
2400c56a:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	; 0xa8
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
2400c56e:	4648      	mov	r0, r9
2400c570:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
2400c574:	3101      	adds	r1, #1
2400c576:	1ac9      	subs	r1, r1, r3
2400c578:	b209      	sxth	r1, r1
2400c57a:	f003 fc41 	bl	2400fe00 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
2400c57e:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
2400c582:	4413      	add	r3, r2
2400c584:	4699      	mov	r9, r3
2400c586:	9b25      	ldr	r3, [sp, #148]	; 0x94
2400c588:	4499      	add	r9, r3
2400c58a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
2400c58c:	454b      	cmp	r3, r9
2400c58e:	d929      	bls.n	2400c5e4 <lv_draw_label+0x774>
            fill_area.y2 ++;
2400c590:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
2400c594:	3301      	adds	r3, #1
2400c596:	b21b      	sxth	r3, r3
2400c598:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    for(row = row_start ; row < row_end; row++) {
2400c59c:	3701      	adds	r7, #1
        col_bit += col_bit_row_ofs;
2400c59e:	9b24      	ldr	r3, [sp, #144]	; 0x90
2400c5a0:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
2400c5a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
2400c5a4:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
        col_bit = col_bit & 0x7;
2400c5a8:	f005 0507 	and.w	r5, r5, #7
        map_p += (col_bit >> 3);
2400c5ac:	9313      	str	r3, [sp, #76]	; 0x4c
    for(row = row_start ; row < row_end; row++) {
2400c5ae:	e774      	b.n	2400c49a <lv_draw_label+0x62a>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
2400c5b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        for(col = col_start; col < col_end; col++) {
2400c5b2:	3101      	adds	r1, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
2400c5b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
2400c5b6:	781b      	ldrb	r3, [r3, #0]
2400c5b8:	eba0 0c05 	sub.w	ip, r0, r5
2400c5bc:	4013      	ands	r3, r2
            if(letter_px) {
2400c5be:	fa33 f30c 	lsrs.w	r3, r3, ip
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
2400c5c2:	bf1c      	itt	ne
2400c5c4:	980c      	ldrne	r0, [sp, #48]	; 0x30
2400c5c6:	5cc3      	ldrbne	r3, [r0, r3]
2400c5c8:	f80e 3b01 	strb.w	r3, [lr], #1
            if(col_bit < col_bit_max) {
2400c5cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2400c5ce:	42ab      	cmp	r3, r5
                map_p++;
2400c5d0:	bf93      	iteet	ls
2400c5d2:	9b13      	ldrls	r3, [sp, #76]	; 0x4c
                col_bit += bpp;
2400c5d4:	19ad      	addhi	r5, r5, r6
                bitmask = bitmask >> bpp;
2400c5d6:	40f2      	lsrhi	r2, r6
                bitmask = bitmask_init;
2400c5d8:	9a11      	ldrls	r2, [sp, #68]	; 0x44
                map_p++;
2400c5da:	bf9e      	ittt	ls
2400c5dc:	3301      	addls	r3, #1
                col_bit = 0;
2400c5de:	2500      	movls	r5, #0
                map_p++;
2400c5e0:	9313      	strls	r3, [sp, #76]	; 0x4c
        for(col = col_start; col < col_end; col++) {
2400c5e2:	e7a5      	b.n	2400c530 <lv_draw_label+0x6c0>
            _lv_blend_fill(clip_area, &fill_area,
2400c5e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
2400c5e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
2400c5ea:	ee18 2a90 	vmov	r2, s17
2400c5ee:	a929      	add	r1, sp, #164	; 0xa4
2400c5f0:	9302      	str	r3, [sp, #8]
2400c5f2:	2302      	movs	r3, #2
2400c5f4:	4650      	mov	r0, sl
2400c5f6:	e9cd 3c00 	strd	r3, ip, [sp]
2400c5fa:	4643      	mov	r3, r8
2400c5fc:	f7fe fc0e 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
2400c600:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            mask_p = 0;
2400c604:	2200      	movs	r2, #0
            fill_area.y1 = fill_area.y2 + 1;
2400c606:	3301      	adds	r3, #1
            mask_p = 0;
2400c608:	9212      	str	r2, [sp, #72]	; 0x48
            fill_area.y1 = fill_area.y2 + 1;
2400c60a:	b21b      	sxth	r3, r3
2400c60c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            mask_p = 0;
2400c610:	e7c2      	b.n	2400c598 <lv_draw_label+0x728>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
2400c612:	071a      	lsls	r2, r3, #28
2400c614:	f57f ae9b 	bpl.w	2400c34e <lv_draw_label+0x4de>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
2400c618:	465a      	mov	r2, fp
2400c61a:	9300      	str	r3, [sp, #0]
2400c61c:	4638      	mov	r0, r7
2400c61e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
2400c622:	f004 fa0f 	bl	24010a44 <_lv_txt_get_width>
2400c626:	9b05      	ldr	r3, [sp, #20]
2400c628:	9a05      	ldr	r2, [sp, #20]
2400c62a:	889b      	ldrh	r3, [r3, #4]
2400c62c:	8812      	ldrh	r2, [r2, #0]
2400c62e:	3301      	adds	r3, #1
2400c630:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
2400c632:	b21b      	sxth	r3, r3
2400c634:	1a18      	subs	r0, r3, r0
2400c636:	4428      	add	r0, r5
2400c638:	e688      	b.n	2400c34c <lv_draw_label+0x4dc>
2400c63a:	bf00      	nop
2400c63c:	900d66ec 	.word	0x900d66ec
2400c640:	2402db10 	.word	0x2402db10
2400c644:	2402db0c 	.word	0x2402db0c
2400c648:	2402da0c 	.word	0x2402da0c
2400c64c:	900d66ea 	.word	0x900d66ea
2400c650:	900d6700 	.word	0x900d6700
2400c654:	900d66f0 	.word	0x900d66f0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
2400c658:	2300      	movs	r3, #0
2400c65a:	4632      	mov	r2, r6
2400c65c:	a92e      	add	r1, sp, #184	; 0xb8
2400c65e:	4658      	mov	r0, fp
2400c660:	f002 fa22 	bl	2400eaa8 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
2400c664:	2800      	cmp	r0, #0
2400c666:	f43f adf3 	beq.w	2400c250 <lv_draw_label+0x3e0>
    if((g.box_h == 0) || (g.box_w == 0)) return;
2400c66a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
2400c66e:	2a00      	cmp	r2, #0
2400c670:	f43f adee 	beq.w	2400c250 <lv_draw_label+0x3e0>
2400c674:	f8bd 10ba 	ldrh.w	r1, [sp, #186]	; 0xba
2400c678:	2900      	cmp	r1, #0
2400c67a:	f43f ade9 	beq.w	2400c250 <lv_draw_label+0x3e0>
    int32_t pos_x = pos_p->x + g.ofs_x;
2400c67e:	980b      	ldr	r0, [sp, #44]	; 0x2c
2400c680:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
    if(pos_x + g.box_w < clip_area->x1 ||
2400c684:	f9ba c000 	ldrsh.w	ip, [sl]
    int32_t pos_x = pos_p->x + g.ofs_x;
2400c688:	4403      	add	r3, r0
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
2400c68a:	f9bb e008 	ldrsh.w	lr, [fp, #8]
2400c68e:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
    if(pos_x + g.box_w < clip_area->x1 ||
2400c692:	4419      	add	r1, r3
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
2400c694:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
    int32_t pos_x = pos_p->x + g.ofs_x;
2400c698:	9312      	str	r3, [sp, #72]	; 0x48
    if(pos_x + g.box_w < clip_area->x1 ||
2400c69a:	4561      	cmp	r1, ip
2400c69c:	f6ff add8 	blt.w	2400c250 <lv_draw_label+0x3e0>
       pos_x > clip_area->x2 ||
2400c6a0:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
2400c6a4:	428b      	cmp	r3, r1
2400c6a6:	f73f add3 	bgt.w	2400c250 <lv_draw_label+0x3e0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
2400c6aa:	ebae 0307 	sub.w	r3, lr, r7
2400c6ae:	9906      	ldr	r1, [sp, #24]
2400c6b0:	440b      	add	r3, r1
2400c6b2:	1a9b      	subs	r3, r3, r2
2400c6b4:	1a1b      	subs	r3, r3, r0
       pos_y + g.box_h < clip_area->y1 ||
2400c6b6:	441a      	add	r2, r3
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
2400c6b8:	9317      	str	r3, [sp, #92]	; 0x5c
       pos_y + g.box_h < clip_area->y1 ||
2400c6ba:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
       pos_x > clip_area->x2 ||
2400c6be:	429a      	cmp	r2, r3
2400c6c0:	f6ff adc6 	blt.w	2400c250 <lv_draw_label+0x3e0>
       pos_y > clip_area->y2)  {
2400c6c4:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
       pos_y + g.box_h < clip_area->y1 ||
2400c6c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
2400c6ca:	429a      	cmp	r2, r3
2400c6cc:	f73f adc0 	bgt.w	2400c250 <lv_draw_label+0x3e0>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
2400c6d0:	4631      	mov	r1, r6
2400c6d2:	4658      	mov	r0, fp
2400c6d4:	f002 f9e6 	bl	2400eaa4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
2400c6d8:	4684      	mov	ip, r0
2400c6da:	2800      	cmp	r0, #0
2400c6dc:	f43f adb8 	beq.w	2400c250 <lv_draw_label+0x3e0>
    if(font_p->subpx) {
2400c6e0:	f89b 300c 	ldrb.w	r3, [fp, #12]
2400c6e4:	079b      	lsls	r3, r3, #30
2400c6e6:	f47f adb3 	bne.w	2400c250 <lv_draw_label+0x3e0>
    uint32_t bpp = g->bpp;
2400c6ea:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
2400c6ee:	ee08 5a90 	vmov	s17, r5
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
2400c6f2:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
    if(bpp == 3) bpp = 4;
2400c6f6:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
2400c6f8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    if(bpp == 3) bpp = 4;
2400c6fc:	f43f aef7 	beq.w	2400c4ee <lv_draw_label+0x67e>
    switch(bpp) {
2400c700:	3b01      	subs	r3, #1
2400c702:	2b07      	cmp	r3, #7
2400c704:	f63f ada4 	bhi.w	2400c250 <lv_draw_label+0x3e0>
2400c708:	a101      	add	r1, pc, #4	; (adr r1, 2400c710 <lv_draw_label+0x8a0>)
2400c70a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
2400c70e:	bf00      	nop
2400c710:	2400c4d5 	.word	0x2400c4d5
2400c714:	2400c38d 	.word	0x2400c38d
2400c718:	2400c251 	.word	0x2400c251
2400c71c:	2400c4ef 	.word	0x2400c4ef
2400c720:	2400c251 	.word	0x2400c251
2400c724:	2400c251 	.word	0x2400c251
2400c728:	2400c251 	.word	0x2400c251
2400c72c:	2400c4e1 	.word	0x2400c4e1

2400c730 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
2400c730:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
2400c732:	210a      	movs	r1, #10
{
2400c734:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
2400c736:	f003 fb63 	bl	2400fe00 <_lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
2400c73a:	23ff      	movs	r3, #255	; 0xff
2400c73c:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
2400c73e:	2300      	movs	r3, #0
2400c740:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
2400c742:	2301      	movs	r3, #1
2400c744:	8063      	strh	r3, [r4, #2]
}
2400c746:	bd10      	pop	{r4, pc}

2400c748 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
2400c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400c74c:	461c      	mov	r4, r3
    if(dsc->width == 0) return;
2400c74e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
2400c752:	ed2d 8b04 	vpush	{d8-d9}
2400c756:	b0c7      	sub	sp, #284	; 0x11c
2400c758:	ee08 2a10 	vmov	s16, r2
2400c75c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    if(dsc->width == 0) return;
2400c760:	2b00      	cmp	r3, #0
2400c762:	f000 80db 	beq.w	2400c91c <lv_draw_line+0x1d4>
    if(dsc->opa <= LV_OPA_MIN) return;
2400c766:	7a22      	ldrb	r2, [r4, #8]
2400c768:	2a02      	cmp	r2, #2
2400c76a:	f240 80d7 	bls.w	2400c91c <lv_draw_line+0x1d4>

    if(point1->x == point2->x && point1->y == point2->y) return;
2400c76e:	f9b0 5000 	ldrsh.w	r5, [r0]
2400c772:	9a06      	ldr	r2, [sp, #24]
2400c774:	f9b1 0000 	ldrsh.w	r0, [r1]
2400c778:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
2400c77c:	4285      	cmp	r5, r0
2400c77e:	9a07      	ldr	r2, [sp, #28]
2400c780:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
2400c784:	d102      	bne.n	2400c78c <lv_draw_line+0x44>
2400c786:	4291      	cmp	r1, r2
2400c788:	f000 80c8 	beq.w	2400c91c <lv_draw_line+0x1d4>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
2400c78c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2400c790:	f3c3 034f 	ubfx	r3, r3, #1, #16
2400c794:	4285      	cmp	r5, r0
2400c796:	bfd4      	ite	le
2400c798:	ebc3 0605 	rsble	r6, r3, r5
2400c79c:	ebc3 0600 	rsbgt	r6, r3, r0
2400c7a0:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
2400c7a4:	4285      	cmp	r5, r0
2400c7a6:	bfac      	ite	ge
2400c7a8:	195e      	addge	r6, r3, r5
2400c7aa:	181e      	addlt	r6, r3, r0
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
2400c7ac:	4291      	cmp	r1, r2
2400c7ae:	bfd4      	ite	le
2400c7b0:	ebc3 0001 	rsble	r0, r3, r1
2400c7b4:	ebc3 0002 	rsbgt	r0, r3, r2
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
2400c7b8:	4291      	cmp	r1, r2
2400c7ba:	bfac      	ite	ge
2400c7bc:	185b      	addge	r3, r3, r1
2400c7be:	189b      	addlt	r3, r3, r2

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
2400c7c0:	a90a      	add	r1, sp, #40	; 0x28
2400c7c2:	ee18 2a10 	vmov	r2, s16
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
2400c7c6:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
2400c7ca:	4608      	mov	r0, r1
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
2400c7cc:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
2400c7d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
2400c7d4:	f002 fcbd 	bl	2400f152 <_lv_area_intersect>
    if(!is_common) return;
2400c7d8:	2800      	cmp	r0, #0
2400c7da:	f000 809f 	beq.w	2400c91c <lv_draw_line+0x1d4>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
2400c7de:	9b06      	ldr	r3, [sp, #24]
2400c7e0:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
2400c7e4:	9b07      	ldr	r3, [sp, #28]
2400c7e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
2400c7ea:	4599      	cmp	r9, r3
2400c7ec:	9305      	str	r3, [sp, #20]
2400c7ee:	f040 8137 	bne.w	2400ca60 <lv_draw_line+0x318>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
2400c7f2:	7a25      	ldrb	r5, [r4, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400c7f4:	f7fd fc40 	bl	2400a078 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400c7f8:	f002 fb3c 	bl	2400ee74 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
2400c7fc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
2400c800:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400c804:	4681      	mov	r9, r0
    int32_t w = dsc->width - 1;
2400c806:	3b01      	subs	r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400c808:	f003 0701 	and.w	r7, r3, #1
    int32_t w_half0 = w >> 1;
2400c80c:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400c810:	eb07 0763 	add.w	r7, r7, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
2400c814:	b126      	cbz	r6, 2400c820 <lv_draw_line+0xd8>
2400c816:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
2400c81a:	3e00      	subs	r6, #0
2400c81c:	bf18      	it	ne
2400c81e:	2601      	movne	r6, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
2400c820:	f001 f818 	bl	2400d854 <lv_draw_mask_get_cnt>
2400c824:	2800      	cmp	r0, #0
2400c826:	d17e      	bne.n	2400c926 <lv_draw_line+0x1de>
    else if(dashed) simple_mode = false;
2400c828:	f086 0201 	eor.w	r2, r6, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
2400c82c:	9b07      	ldr	r3, [sp, #28]
2400c82e:	9906      	ldr	r1, [sp, #24]
2400c830:	f9b3 3000 	ldrsh.w	r3, [r3]
2400c834:	f9b1 1000 	ldrsh.w	r1, [r1]
2400c838:	4618      	mov	r0, r3
2400c83a:	428b      	cmp	r3, r1
2400c83c:	bfa8      	it	ge
2400c83e:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
2400c840:	428b      	cmp	r3, r1
2400c842:	bfb8      	it	lt
2400c844:	460b      	movlt	r3, r1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
2400c846:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
2400c84a:	3b01      	subs	r3, #1
2400c84c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = point1->y - w_half1;
2400c850:	9b06      	ldr	r3, [sp, #24]
2400c852:	885b      	ldrh	r3, [r3, #2]
2400c854:	1bdf      	subs	r7, r3, r7
    draw_area.y2 = point1->y + w_half0;
2400c856:	4443      	add	r3, r8
    draw_area.y1 = point1->y - w_half1;
2400c858:	f8ad 709a 	strh.w	r7, [sp, #154]	; 0x9a
    draw_area.y2 = point1->y + w_half0;
2400c85c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
2400c860:	2a00      	cmp	r2, #0
2400c862:	d062      	beq.n	2400c92a <lv_draw_line+0x1e2>

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
2400c864:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
2400c866:	a926      	add	r1, sp, #152	; 0x98
2400c868:	8822      	ldrh	r2, [r4, #0]
2400c86a:	a80a      	add	r0, sp, #40	; 0x28
2400c86c:	f003 0303 	and.w	r3, r3, #3
2400c870:	e9cd 5301 	strd	r5, r3, [sp, #4]
2400c874:	2301      	movs	r3, #1
2400c876:	9300      	str	r3, [sp, #0]
2400c878:	2300      	movs	r3, #0
2400c87a:	f7fe facf 	bl	2400ae1c <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
2400c87e:	7a63      	ldrb	r3, [r4, #9]
2400c880:	f013 0f0c 	tst.w	r3, #12
2400c884:	d04a      	beq.n	2400c91c <lv_draw_line+0x1d4>
        lv_draw_rect_dsc_init(&cir_dsc);
2400c886:	a831      	add	r0, sp, #196	; 0xc4
2400c888:	f001 f8ec 	bl	2400da64 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
2400c88c:	8823      	ldrh	r3, [r4, #0]
        int32_t r = (dsc->width >> 1);
2400c88e:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
        cir_dsc.bg_color = dsc->color;
2400c892:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
        cir_dsc.radius = LV_RADIUS_CIRCLE;
2400c896:	f647 73ff 	movw	r3, #32767	; 0x7fff
        int32_t r = (dsc->width >> 1);
2400c89a:	1075      	asrs	r5, r6, #1
2400c89c:	43f6      	mvns	r6, r6
        cir_dsc.radius = LV_RADIUS_CIRCLE;
2400c89e:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        cir_dsc.bg_opa = dsc->opa;
2400c8a2:	7a23      	ldrb	r3, [r4, #8]
2400c8a4:	f006 0601 	and.w	r6, r6, #1
2400c8a8:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
        if(dsc->round_start) {
2400c8ac:	7a63      	ldrb	r3, [r4, #9]
2400c8ae:	075a      	lsls	r2, r3, #29
2400c8b0:	d518      	bpl.n	2400c8e4 <lv_draw_line+0x19c>
            cir_area.x1 = point1->x - r;
2400c8b2:	9b06      	ldr	r3, [sp, #24]
2400c8b4:	881a      	ldrh	r2, [r3, #0]
2400c8b6:	b2ab      	uxth	r3, r5
2400c8b8:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
2400c8ba:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
2400c8bc:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point1->x + r - r_corr;
2400c8c0:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
2400c8c2:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point1->x + r - r_corr;
2400c8c4:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c8c8:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point1->y - r;
2400c8ca:	8849      	ldrh	r1, [r1, #2]
2400c8cc:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
2400c8ce:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c8d0:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point1->y + r - r_corr ;
2400c8d4:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point1->y - r;
2400c8d6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c8da:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point1->y + r - r_corr ;
2400c8dc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c8e0:	f001 f8e4 	bl	2400daac <lv_draw_rect>
        if(dsc->round_end) {
2400c8e4:	7a63      	ldrb	r3, [r4, #9]
2400c8e6:	071b      	lsls	r3, r3, #28
2400c8e8:	d518      	bpl.n	2400c91c <lv_draw_line+0x1d4>
            cir_area.x1 = point2->x - r;
2400c8ea:	9b07      	ldr	r3, [sp, #28]
2400c8ec:	881a      	ldrh	r2, [r3, #0]
2400c8ee:	b2ab      	uxth	r3, r5
2400c8f0:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
2400c8f2:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
2400c8f4:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point2->x + r - r_corr;
2400c8f8:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
2400c8fa:	9907      	ldr	r1, [sp, #28]
            cir_area.x2 = point2->x + r - r_corr;
2400c8fc:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c900:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point2->y - r;
2400c902:	8849      	ldrh	r1, [r1, #2]
2400c904:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
2400c906:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c908:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point2->y + r - r_corr ;
2400c90c:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point2->y - r;
2400c90e:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c912:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point2->y + r - r_corr ;
2400c914:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
2400c918:	f001 f8c8 	bl	2400daac <lv_draw_rect>
}
2400c91c:	b047      	add	sp, #284	; 0x11c
2400c91e:	ecbd 8b04 	vpop	{d8-d9}
2400c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
2400c926:	2200      	movs	r2, #0
2400c928:	e780      	b.n	2400c82c <lv_draw_line+0xe4>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
2400c92a:	aa26      	add	r2, sp, #152	; 0x98
2400c92c:	a90a      	add	r1, sp, #40	; 0x28
2400c92e:	4610      	mov	r0, r2
2400c930:	f002 fc0f 	bl	2400f152 <_lv_area_intersect>
        if(!is_common) return;
2400c934:	2800      	cmp	r0, #0
2400c936:	d0a2      	beq.n	2400c87e <lv_draw_line+0x136>
        draw_area.y1 -= disp_area->y1;
2400c938:	f8b9 8012 	ldrh.w	r8, [r9, #18]
2400c93c:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	; 0x9a
        draw_area.x1 -= disp_area->x1;
2400c940:	f8b9 2010 	ldrh.w	r2, [r9, #16]
        draw_area.y1 -= disp_area->y1;
2400c944:	eba1 0508 	sub.w	r5, r1, r8
        draw_area.x1 -= disp_area->x1;
2400c948:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
2400c94c:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
        draw_area.y1 -= disp_area->y1;
2400c950:	f8ad 509a 	strh.w	r5, [sp, #154]	; 0x9a
        draw_area.x2 -= disp_area->x1;
2400c954:	f8bd 509c 	ldrh.w	r5, [sp, #156]	; 0x9c
        draw_area.x1 -= disp_area->x1;
2400c958:	1a83      	subs	r3, r0, r2
        draw_area.x2 -= disp_area->x1;
2400c95a:	f9bd c09c 	ldrsh.w	ip, [sp, #156]	; 0x9c
2400c95e:	1aaa      	subs	r2, r5, r2
2400c960:	3501      	adds	r5, #1
        draw_area.x1 -= disp_area->x1;
2400c962:	f9bd e098 	ldrsh.w	lr, [sp, #152]	; 0x98
2400c966:	b21b      	sxth	r3, r3
        draw_area.x2 -= disp_area->x1;
2400c968:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
2400c96c:	1a2d      	subs	r5, r5, r0
        draw_area.y2 -= disp_area->y1;
2400c96e:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
2400c972:	b22d      	sxth	r5, r5
        draw_area.x1 -= disp_area->x1;
2400c974:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        draw_area.y2 -= disp_area->y1;
2400c978:	eba2 0208 	sub.w	r2, r2, r8
        fill_area.x1 = draw_area.x1 + disp_area->x1;
2400c97c:	f8ad e0c4 	strh.w	lr, [sp, #196]	; 0xc4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
2400c980:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
        draw_area.y2 -= disp_area->y1;
2400c984:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
        fill_area.y1 = draw_area.y1 + disp_area->y1;
2400c988:	f8ad 10c6 	strh.w	r1, [sp, #198]	; 0xc6
        fill_area.y2 = fill_area.y1;
2400c98c:	f8ad 10ca 	strh.w	r1, [sp, #202]	; 0xca
        if(dashed) {
2400c990:	b1d6      	cbz	r6, 2400c9c8 <lv_draw_line+0x280>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
2400c992:	441f      	add	r7, r3
2400c994:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
2400c998:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
2400c99c:	4413      	add	r3, r2
2400c99e:	fb97 f2f3 	sdiv	r2, r7, r3
2400c9a2:	fb03 7712 	mls	r7, r3, r2, r7
2400c9a6:	b23f      	sxth	r7, r7
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400c9a8:	4628      	mov	r0, r5
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
2400c9aa:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400c9ae:	f003 f999 	bl	2400fce4 <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400c9b2:	f9bd a09a 	ldrsh.w	sl, [sp, #154]	; 0x9a
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400c9b6:	4680      	mov	r8, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400c9b8:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
2400c9bc:	459a      	cmp	sl, r3
2400c9be:	dd05      	ble.n	2400c9cc <lv_draw_line+0x284>
        _lv_mem_buf_release(mask_buf);
2400c9c0:	4640      	mov	r0, r8
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
2400c9c2:	f003 f827 	bl	2400fa14 <_lv_mem_buf_release>
2400c9c6:	e75a      	b.n	2400c87e <lv_draw_line+0x136>
        lv_style_int_t dash_start = 0;
2400c9c8:	4637      	mov	r7, r6
2400c9ca:	e7ed      	b.n	2400c9a8 <lv_draw_line+0x260>
            _lv_memset_ff(mask_buf, draw_area_w);
2400c9cc:	4629      	mov	r1, r5
2400c9ce:	4640      	mov	r0, r8
2400c9d0:	f003 fa41 	bl	2400fe56 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400c9d4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
2400c9d8:	f8b9 2012 	ldrh.w	r2, [r9, #18]
2400c9dc:	4640      	mov	r0, r8
2400c9de:	f8b9 1010 	ldrh.w	r1, [r9, #16]
2400c9e2:	4452      	add	r2, sl
2400c9e4:	4419      	add	r1, r3
2400c9e6:	462b      	mov	r3, r5
2400c9e8:	b212      	sxth	r2, r2
2400c9ea:	b209      	sxth	r1, r1
2400c9ec:	f000 feea 	bl	2400d7c4 <lv_draw_mask_apply>
2400c9f0:	4602      	mov	r2, r0
            if(dashed) {
2400c9f2:	b18e      	cbz	r6, 2400ca18 <lv_draw_line+0x2d0>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
2400c9f4:	b180      	cbz	r0, 2400ca18 <lv_draw_line+0x2d0>
                    lv_style_int_t dash_cnt = dash_start;
2400c9f6:	4639      	mov	r1, r7
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
2400c9f8:	2300      	movs	r3, #0
2400c9fa:	e00a      	b.n	2400ca12 <lv_draw_line+0x2ca>
                        if(dash_cnt <= dsc->dash_width) {
2400c9fc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
2400ca00:	428a      	cmp	r2, r1
2400ca02:	db23      	blt.n	2400ca4c <lv_draw_line+0x304>
                            i += diff;
2400ca04:	4413      	add	r3, r2
2400ca06:	1a5b      	subs	r3, r3, r1
2400ca08:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
2400ca0a:	3301      	adds	r3, #1
2400ca0c:	3201      	adds	r2, #1
2400ca0e:	b21b      	sxth	r3, r3
2400ca10:	b211      	sxth	r1, r2
2400ca12:	429d      	cmp	r5, r3
2400ca14:	dcf2      	bgt.n	2400c9fc <lv_draw_line+0x2b4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
2400ca16:	2202      	movs	r2, #2
                           dsc->blend_mode);
2400ca18:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
2400ca1a:	a931      	add	r1, sp, #196	; 0xc4
2400ca1c:	a80a      	add	r0, sp, #40	; 0x28
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400ca1e:	f10a 0a01 	add.w	sl, sl, #1
            _lv_blend_fill(clip, &fill_area,
2400ca22:	f003 0303 	and.w	r3, r3, #3
2400ca26:	9302      	str	r3, [sp, #8]
2400ca28:	7a23      	ldrb	r3, [r4, #8]
2400ca2a:	e9cd 2300 	strd	r2, r3, [sp]
2400ca2e:	4643      	mov	r3, r8
2400ca30:	8822      	ldrh	r2, [r4, #0]
2400ca32:	f7fe f9f3 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400ca36:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
2400ca3a:	3301      	adds	r3, #1
2400ca3c:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
2400ca40:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
2400ca44:	3301      	adds	r3, #1
2400ca46:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400ca4a:	e7b5      	b.n	2400c9b8 <lv_draw_line+0x270>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
2400ca4c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
2400ca50:	4402      	add	r2, r0
2400ca52:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
2400ca54:	bfb6      	itet	lt
2400ca56:	460a      	movlt	r2, r1
                            dash_cnt = 0;
2400ca58:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
2400ca5a:	f808 b003 	strblt.w	fp, [r8, r3]
2400ca5e:	e7d4      	b.n	2400ca0a <lv_draw_line+0x2c2>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
2400ca60:	9b06      	ldr	r3, [sp, #24]
2400ca62:	f9b3 8000 	ldrsh.w	r8, [r3]
2400ca66:	9b07      	ldr	r3, [sp, #28]
2400ca68:	f9b3 7000 	ldrsh.w	r7, [r3]
2400ca6c:	45b8      	cmp	r8, r7
2400ca6e:	f040 80c4 	bne.w	2400cbfa <lv_draw_line+0x4b2>
    lv_opa_t opa = dsc->opa;
2400ca72:	7a25      	ldrb	r5, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400ca74:	f7fd fb00 	bl	2400a078 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400ca78:	f002 f9fc 	bl	2400ee74 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
2400ca7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
2400ca80:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400ca84:	4681      	mov	r9, r0
    int32_t w = dsc->width - 1;
2400ca86:	3b01      	subs	r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400ca88:	f003 0701 	and.w	r7, r3, #1
    int32_t w_half0 = w >> 1;
2400ca8c:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400ca90:	eb07 0763 	add.w	r7, r7, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
2400ca94:	b126      	cbz	r6, 2400caa0 <lv_draw_line+0x358>
2400ca96:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
2400ca9a:	3e00      	subs	r6, #0
2400ca9c:	bf18      	it	ne
2400ca9e:	2601      	movne	r6, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
2400caa0:	f000 fed8 	bl	2400d854 <lv_draw_mask_get_cnt>
2400caa4:	2800      	cmp	r0, #0
2400caa6:	d16b      	bne.n	2400cb80 <lv_draw_line+0x438>
    else if(dashed) simple_mode = false;
2400caa8:	f086 0201 	eor.w	r2, r6, #1
    draw_area.x1 = point1->x - w_half1;
2400caac:	9b06      	ldr	r3, [sp, #24]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
2400caae:	9906      	ldr	r1, [sp, #24]
    draw_area.x1 = point1->x - w_half1;
2400cab0:	881b      	ldrh	r3, [r3, #0]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
2400cab2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
2400cab6:	1bdf      	subs	r7, r3, r7
    draw_area.x2 = point1->x + w_half0;
2400cab8:	4443      	add	r3, r8
2400caba:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
2400cabe:	9b07      	ldr	r3, [sp, #28]
    draw_area.x1 = point1->x - w_half1;
2400cac0:	f8ad 7098 	strh.w	r7, [sp, #152]	; 0x98
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
2400cac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
2400cac8:	428b      	cmp	r3, r1
2400caca:	4618      	mov	r0, r3
2400cacc:	bfa8      	it	ge
2400cace:	4608      	movge	r0, r1
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
2400cad0:	428b      	cmp	r3, r1
2400cad2:	bfb8      	it	lt
2400cad4:	460b      	movlt	r3, r1
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
2400cad6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
2400cada:	3b01      	subs	r3, #1
2400cadc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(simple_mode) {
2400cae0:	2a00      	cmp	r2, #0
2400cae2:	f47f aebf 	bne.w	2400c864 <lv_draw_line+0x11c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
2400cae6:	aa26      	add	r2, sp, #152	; 0x98
2400cae8:	a90a      	add	r1, sp, #40	; 0x28
2400caea:	4610      	mov	r0, r2
2400caec:	f002 fb31 	bl	2400f152 <_lv_area_intersect>
        if(!is_common) return;
2400caf0:	2800      	cmp	r0, #0
2400caf2:	f43f aec4 	beq.w	2400c87e <lv_draw_line+0x136>
        draw_area.x1 -= vdb->area.x1;
2400caf6:	f8b9 3010 	ldrh.w	r3, [r9, #16]
2400cafa:	f8bd 5098 	ldrh.w	r5, [sp, #152]	; 0x98
        draw_area.x2 -= vdb->area.x1;
2400cafe:	f8bd 709c 	ldrh.w	r7, [sp, #156]	; 0x9c
        draw_area.x1 -= vdb->area.x1;
2400cb02:	1aea      	subs	r2, r5, r3
        draw_area.y1 -= vdb->area.y1;
2400cb04:	f8b9 c012 	ldrh.w	ip, [r9, #18]
        draw_area.x1 -= vdb->area.x1;
2400cb08:	f9bd 0098 	ldrsh.w	r0, [sp, #152]	; 0x98
        draw_area.x2 -= vdb->area.x1;
2400cb0c:	1afb      	subs	r3, r7, r3
        draw_area.x1 -= vdb->area.x1;
2400cb0e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
2400cb12:	3701      	adds	r7, #1
        draw_area.y1 -= vdb->area.y1;
2400cb14:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
2400cb18:	1b7f      	subs	r7, r7, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
2400cb1a:	f8ad 00c4 	strh.w	r0, [sp, #196]	; 0xc4
        draw_area.y1 -= vdb->area.y1;
2400cb1e:	eba2 010c 	sub.w	r1, r2, ip
        fill_area.y1 = draw_area.y1 + disp_area->y1;
2400cb22:	f8ad 20c6 	strh.w	r2, [sp, #198]	; 0xc6
2400cb26:	b23f      	sxth	r7, r7
        fill_area.y2 = fill_area.y1;
2400cb28:	f8ad 20ca 	strh.w	r2, [sp, #202]	; 0xca
        draw_area.y1 -= vdb->area.y1;
2400cb2c:	f8ad 109a 	strh.w	r1, [sp, #154]	; 0x9a
        draw_area.x2 -= vdb->area.x1;
2400cb30:	f9bd 109c 	ldrsh.w	r1, [sp, #156]	; 0x9c
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400cb34:	4638      	mov	r0, r7
        draw_area.x2 -= vdb->area.x1;
2400cb36:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        draw_area.y2 -= vdb->area.y1;
2400cb3a:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
        fill_area.x2 = draw_area.x2 + disp_area->x1;
2400cb3e:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
        draw_area.y2 -= vdb->area.y1;
2400cb42:	eba3 030c 	sub.w	r3, r3, ip
2400cb46:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400cb4a:	f003 f8cb 	bl	2400fce4 <_lv_mem_buf_get>
2400cb4e:	f9bd 809a 	ldrsh.w	r8, [sp, #154]	; 0x9a
2400cb52:	4682      	mov	sl, r0
        if(dashed) {
2400cb54:	b1b6      	cbz	r6, 2400cb84 <lv_draw_line+0x43c>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
2400cb56:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
2400cb5a:	f9b9 5012 	ldrsh.w	r5, [r9, #18]
2400cb5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
2400cb62:	4445      	add	r5, r8
2400cb64:	4413      	add	r3, r2
2400cb66:	fb95 f2f3 	sdiv	r2, r5, r3
2400cb6a:	fb03 5512 	mls	r5, r3, r2, r5
2400cb6e:	b22d      	sxth	r5, r5
            _lv_blend_fill(clip, &fill_area,
2400cb70:	f04f 0b00 	mov.w	fp, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400cb74:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
2400cb78:	4598      	cmp	r8, r3
2400cb7a:	dd05      	ble.n	2400cb88 <lv_draw_line+0x440>
        _lv_mem_buf_release(mask_buf);
2400cb7c:	4650      	mov	r0, sl
2400cb7e:	e720      	b.n	2400c9c2 <lv_draw_line+0x27a>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
2400cb80:	2200      	movs	r2, #0
2400cb82:	e793      	b.n	2400caac <lv_draw_line+0x364>
        lv_style_int_t dash_start = 0;
2400cb84:	4635      	mov	r5, r6
2400cb86:	e7f3      	b.n	2400cb70 <lv_draw_line+0x428>
            _lv_memset_ff(mask_buf, draw_area_w);
2400cb88:	4639      	mov	r1, r7
2400cb8a:	4650      	mov	r0, sl
2400cb8c:	f003 f963 	bl	2400fe56 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400cb90:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
2400cb94:	f8b9 2012 	ldrh.w	r2, [r9, #18]
2400cb98:	4650      	mov	r0, sl
2400cb9a:	f8b9 1010 	ldrh.w	r1, [r9, #16]
2400cb9e:	4442      	add	r2, r8
2400cba0:	4419      	add	r1, r3
2400cba2:	463b      	mov	r3, r7
2400cba4:	b212      	sxth	r2, r2
2400cba6:	b209      	sxth	r1, r1
2400cba8:	f000 fe0c 	bl	2400d7c4 <lv_draw_mask_apply>
            if(dashed) {
2400cbac:	b16e      	cbz	r6, 2400cbca <lv_draw_line+0x482>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
2400cbae:	b150      	cbz	r0, 2400cbc6 <lv_draw_line+0x47e>
                    if(dash_cnt > dsc->dash_width) {
2400cbb0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
2400cbb4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
2400cbb8:	42aa      	cmp	r2, r5
2400cbba:	bfb8      	it	lt
2400cbbc:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
2400cbbe:	4413      	add	r3, r2
                        dash_cnt = 0;
2400cbc0:	429d      	cmp	r5, r3
2400cbc2:	bfa8      	it	ge
2400cbc4:	2500      	movge	r5, #0
                dash_cnt ++;
2400cbc6:	3501      	adds	r5, #1
2400cbc8:	b22d      	sxth	r5, r5
            _lv_blend_fill(clip, &fill_area,
2400cbca:	7a23      	ldrb	r3, [r4, #8]
2400cbcc:	a931      	add	r1, sp, #196	; 0xc4
2400cbce:	8822      	ldrh	r2, [r4, #0]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400cbd0:	f108 0801 	add.w	r8, r8, #1
            _lv_blend_fill(clip, &fill_area,
2400cbd4:	f8cd b008 	str.w	fp, [sp, #8]
2400cbd8:	e9cd 0300 	strd	r0, r3, [sp]
2400cbdc:	4653      	mov	r3, sl
2400cbde:	a80a      	add	r0, sp, #40	; 0x28
2400cbe0:	f7fe f91c 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400cbe4:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
2400cbe8:	3301      	adds	r3, #1
2400cbea:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
2400cbee:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
2400cbf2:	3301      	adds	r3, #1
2400cbf4:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400cbf8:	e7bc      	b.n	2400cb74 <lv_draw_line+0x42c>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
2400cbfa:	9b05      	ldr	r3, [sp, #20]
2400cbfc:	4599      	cmp	r9, r3
2400cbfe:	db06      	blt.n	2400cc0e <lv_draw_line+0x4c6>
2400cc00:	464b      	mov	r3, r9
2400cc02:	f8dd 9014 	ldr.w	r9, [sp, #20]
2400cc06:	9305      	str	r3, [sp, #20]
2400cc08:	4643      	mov	r3, r8
2400cc0a:	46b8      	mov	r8, r7
2400cc0c:	461f      	mov	r7, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
2400cc0e:	eba7 0308 	sub.w	r3, r7, r8
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
2400cc12:	4ac2      	ldr	r2, [pc, #776]	; (2400cf1c <lv_draw_line+0x7d4>)
    int32_t w = dsc->width;
2400cc14:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
2400cc18:	a90c      	add	r1, sp, #48	; 0x30
    int32_t xdiff = p2.x - p1.x;
2400cc1a:	9308      	str	r3, [sp, #32]
    int32_t ydiff = p2.y - p1.y;
2400cc1c:	9b05      	ldr	r3, [sp, #20]
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
2400cc1e:	4608      	mov	r0, r1
    int32_t ydiff = p2.y - p1.y;
2400cc20:	eba3 0309 	sub.w	r3, r3, r9
2400cc24:	9309      	str	r3, [sp, #36]	; 0x24
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
2400cc26:	9b08      	ldr	r3, [sp, #32]
2400cc28:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
2400cc2c:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
2400cc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400cc32:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
2400cc36:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
2400cc3a:	45d3      	cmp	fp, sl
2400cc3c:	bfcb      	itete	gt
2400cc3e:	ea4f 134a 	movgt.w	r3, sl, lsl #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
2400cc42:	ea4f 134b 	movle.w	r3, fp, lsl #5
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
2400cc46:	fbb3 f3fb 	udivgt	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
2400cc4a:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
2400cc4e:	5cd2      	ldrb	r2, [r2, r3]
2400cc50:	233f      	movs	r3, #63	; 0x3f
2400cc52:	fb16 3602 	smlabb	r6, r6, r2, r3
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
2400cc56:	f3c6 13cf 	ubfx	r3, r6, #7, #16
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
2400cc5a:	11f5      	asrs	r5, r6, #7
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
2400cc5c:	4547      	cmp	r7, r8
2400cc5e:	bfd4      	ite	le
2400cc60:	ebc3 0207 	rsble	r2, r3, r7
2400cc64:	ebc3 0208 	rsbgt	r2, r3, r8
2400cc68:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
2400cc6c:	4547      	cmp	r7, r8
2400cc6e:	bfac      	ite	ge
2400cc70:	19da      	addge	r2, r3, r7
2400cc72:	eb03 0208 	addlt.w	r2, r3, r8
2400cc76:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
2400cc7a:	9a05      	ldr	r2, [sp, #20]
2400cc7c:	454a      	cmp	r2, r9
2400cc7e:	bfd4      	ite	le
2400cc80:	ebc3 0202 	rsble	r2, r3, r2
2400cc84:	ebc3 0209 	rsbgt	r2, r3, r9
2400cc88:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
2400cc8c:	9a05      	ldr	r2, [sp, #20]
2400cc8e:	454a      	cmp	r2, r9
2400cc90:	bfac      	ite	ge
2400cc92:	189b      	addge	r3, r3, r2
2400cc94:	444b      	addlt	r3, r9
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
2400cc96:	aa0a      	add	r2, sp, #40	; 0x28
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
2400cc98:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
2400cc9c:	f002 fa59 	bl	2400f152 <_lv_area_intersect>
    if(is_common == false) return;
2400cca0:	2800      	cmp	r0, #0
2400cca2:	f43f adec 	beq.w	2400c87e <lv_draw_line+0x136>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400cca6:	f005 0501 	and.w	r5, r5, #1
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
2400ccaa:	45d3      	cmp	fp, sl
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
2400ccac:	eb05 2526 	add.w	r5, r5, r6, asr #8
        if(xdiff > 0) {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ccb0:	f3c6 260f 	ubfx	r6, r6, #8, #16
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400ccb4:	b2ad      	uxth	r5, r5
    if(flat) {
2400ccb6:	f340 80ee 	ble.w	2400ce96 <lv_draw_line+0x74e>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400ccba:	9b05      	ldr	r3, [sp, #20]
2400ccbc:	fa15 fb89 	uxtah	fp, r5, r9
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ccc0:	eba9 0a06 	sub.w	sl, r9, r6
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400ccc4:	fa15 f583 	uxtah	r5, r5, r3
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ccc8:	1b9e      	subs	r6, r3, r6
        if(xdiff > 0) {
2400ccca:	9b08      	ldr	r3, [sp, #32]
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400cccc:	fa0f fb8b 	sxth.w	fp, fp
2400ccd0:	b22d      	sxth	r5, r5
        if(xdiff > 0) {
2400ccd2:	2b00      	cmp	r3, #0
2400ccd4:	f04f 0300 	mov.w	r3, #0
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ccd8:	fa0f fa8a 	sxth.w	sl, sl
2400ccdc:	b236      	sxth	r6, r6
2400ccde:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
2400cce0:	f340 80cc 	ble.w	2400ce7c <lv_draw_line+0x734>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400cce4:	463b      	mov	r3, r7
2400cce6:	4652      	mov	r2, sl
2400cce8:	4641      	mov	r1, r8
2400ccea:	a810      	add	r0, sp, #64	; 0x40
2400ccec:	9600      	str	r6, [sp, #0]
2400ccee:	f000 fdbf 	bl	2400d870 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400ccf2:	2301      	movs	r3, #1
2400ccf4:	465a      	mov	r2, fp
2400ccf6:	e9cd 5300 	strd	r5, r3, [sp]
2400ccfa:	463b      	mov	r3, r7
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ccfc:	4641      	mov	r1, r8
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
2400ccfe:	a81b      	add	r0, sp, #108	; 0x6c
2400cd00:	f000 fdb6 	bl	2400d870 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
2400cd04:	2100      	movs	r1, #0
2400cd06:	a810      	add	r0, sp, #64	; 0x40
2400cd08:	f000 fd46 	bl	2400d798 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
2400cd0c:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
2400cd0e:	ee09 0a10 	vmov	s18, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
2400cd12:	a81b      	add	r0, sp, #108	; 0x6c
2400cd14:	f000 fd40 	bl	2400d798 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
2400cd18:	7a66      	ldrb	r6, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
2400cd1a:	ee09 0a90 	vmov	s19, r0
    if(!dsc->raw_end) {
2400cd1e:	f016 0610 	ands.w	r6, r6, #16
2400cd22:	f040 80d6 	bne.w	2400ced2 <lv_draw_line+0x78a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
2400cd26:	2203      	movs	r2, #3
2400cd28:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
2400cd2c:	4641      	mov	r1, r8
2400cd2e:	a826      	add	r0, sp, #152	; 0x98
2400cd30:	9201      	str	r2, [sp, #4]
2400cd32:	eba8 0305 	sub.w	r3, r8, r5
2400cd36:	9a08      	ldr	r2, [sp, #32]
2400cd38:	b21b      	sxth	r3, r3
2400cd3a:	f8bd a020 	ldrh.w	sl, [sp, #32]
2400cd3e:	fa19 f282 	uxtah	r2, r9, r2
2400cd42:	b212      	sxth	r2, r2
2400cd44:	9200      	str	r2, [sp, #0]
2400cd46:	464a      	mov	r2, r9
2400cd48:	f000 fd92 	bl	2400d870 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
2400cd4c:	2202      	movs	r2, #2
2400cd4e:	1b7b      	subs	r3, r7, r5
2400cd50:	4639      	mov	r1, r7
2400cd52:	9201      	str	r2, [sp, #4]
2400cd54:	a831      	add	r0, sp, #196	; 0xc4
2400cd56:	9a05      	ldr	r2, [sp, #20]
2400cd58:	b21b      	sxth	r3, r3
2400cd5a:	4492      	add	sl, r2
2400cd5c:	fa0f f28a 	sxth.w	r2, sl
2400cd60:	9200      	str	r2, [sp, #0]
2400cd62:	9a05      	ldr	r2, [sp, #20]
2400cd64:	f000 fd84 	bl	2400d870 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
2400cd68:	4631      	mov	r1, r6
2400cd6a:	a826      	add	r0, sp, #152	; 0x98
2400cd6c:	f000 fd14 	bl	2400d798 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
2400cd70:	4631      	mov	r1, r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
2400cd72:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
2400cd74:	a831      	add	r0, sp, #196	; 0xc4
2400cd76:	f000 fd0f 	bl	2400d798 <lv_draw_mask_add>
2400cd7a:	4683      	mov	fp, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400cd7c:	f7fd f97c 	bl	2400a078 <_lv_refr_get_disp_refreshing>
2400cd80:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400cd82:	f002 f877 	bl	2400ee74 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
2400cd86:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
2400cd8a:	8a03      	ldrh	r3, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400cd8c:	4607      	mov	r7, r0
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
2400cd8e:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    draw_area.x1 -= disp_area->x1;
2400cd92:	1ad1      	subs	r1, r2, r3
    draw_area.x2 -= disp_area->x1;
2400cd94:	1aeb      	subs	r3, r5, r3
2400cd96:	3501      	adds	r5, #1
    draw_area.x1 -= disp_area->x1;
2400cd98:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
2400cd9c:	8a41      	ldrh	r1, [r0, #18]
2400cd9e:	1aad      	subs	r5, r5, r2
2400cda0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
2400cda4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
2400cda8:	b22d      	sxth	r5, r5
    draw_area.y2 -= disp_area->y1;
2400cdaa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
2400cdae:	1a40      	subs	r0, r0, r1
    draw_area.y2 -= disp_area->y1;
2400cdb0:	1a5b      	subs	r3, r3, r1
    draw_area.y1 -= disp_area->y1;
2400cdb2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
2400cdb6:	4630      	mov	r0, r6
    draw_area.y2 -= disp_area->y1;
2400cdb8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
2400cdbc:	f001 fff6 	bl	2400edac <lv_disp_get_hor_res>
2400cdc0:	4606      	mov	r6, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
2400cdc2:	a80c      	add	r0, sp, #48	; 0x30
2400cdc4:	f002 f9b7 	bl	2400f136 <lv_area_get_size>
2400cdc8:	4286      	cmp	r6, r0
2400cdca:	d903      	bls.n	2400cdd4 <lv_draw_line+0x68c>
2400cdcc:	a80c      	add	r0, sp, #48	; 0x30
2400cdce:	f002 f9b2 	bl	2400f136 <lv_area_get_size>
2400cdd2:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400cdd4:	4630      	mov	r0, r6
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
2400cdd6:	f04f 0a00 	mov.w	sl, #0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400cdda:	f002 ff83 	bl	2400fce4 <_lv_mem_buf_get>
    fill_area.x1 = draw_area.x1 + disp_area->x1;
2400cdde:	8a3b      	ldrh	r3, [r7, #16]
2400cde0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30

    _lv_memset_ff(mask_buf, mask_buf_size);
2400cde4:	4631      	mov	r1, r6
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
2400cde6:	4680      	mov	r8, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
2400cde8:	441a      	add	r2, r3
2400cdea:	b212      	sxth	r2, r2
2400cdec:	9205      	str	r2, [sp, #20]
2400cdee:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    fill_area.x2 = draw_area.x2 + disp_area->x1;
2400cdf2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
2400cdf6:	4413      	add	r3, r2
    fill_area.y1 = draw_area.y1 + disp_area->y1;
2400cdf8:	8a7a      	ldrh	r2, [r7, #18]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
2400cdfa:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    fill_area.y1 = draw_area.y1 + disp_area->y1;
2400cdfe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
2400ce02:	4413      	add	r3, r2
2400ce04:	b21b      	sxth	r3, r3
2400ce06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
2400ce0a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    _lv_memset_ff(mask_buf, mask_buf_size);
2400ce0e:	f003 f822 	bl	2400fe56 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
2400ce12:	f9bd 9032 	ldrsh.w	r9, [sp, #50]	; 0x32
2400ce16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
2400ce1a:	4499      	add	r9, r3
2400ce1c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
2400ce20:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
2400ce24:	4413      	add	r3, r2
2400ce26:	4599      	cmp	r9, r3
2400ce28:	dd58      	ble.n	2400cedc <lv_draw_line+0x794>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
2400ce2a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
2400ce2e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
2400ce32:	429a      	cmp	r2, r3
2400ce34:	d010      	beq.n	2400ce58 <lv_draw_line+0x710>
        fill_area.y2--;
2400ce36:	3b01      	subs	r3, #1
        _lv_blend_fill(&fill_area, clip,
2400ce38:	8822      	ldrh	r2, [r4, #0]
2400ce3a:	a90a      	add	r1, sp, #40	; 0x28
2400ce3c:	a80e      	add	r0, sp, #56	; 0x38
        fill_area.y2--;
2400ce3e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
2400ce42:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
2400ce44:	f003 0303 	and.w	r3, r3, #3
2400ce48:	9302      	str	r3, [sp, #8]
2400ce4a:	7a23      	ldrb	r3, [r4, #8]
2400ce4c:	9301      	str	r3, [sp, #4]
2400ce4e:	2302      	movs	r3, #2
2400ce50:	9300      	str	r3, [sp, #0]
2400ce52:	4643      	mov	r3, r8
2400ce54:	f7fd ffe2 	bl	2400ae1c <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
2400ce58:	4640      	mov	r0, r8
2400ce5a:	f002 fddb 	bl	2400fa14 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
2400ce5e:	ee19 0a10 	vmov	r0, s18
2400ce62:	f000 fccf 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
2400ce66:	ee19 0a90 	vmov	r0, s19
2400ce6a:	f000 fccb 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
2400ce6e:	9808      	ldr	r0, [sp, #32]
2400ce70:	f000 fcc8 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
2400ce74:	4658      	mov	r0, fp
2400ce76:	f000 fcc5 	bl	2400d804 <lv_draw_mask_remove_id>
2400ce7a:	e500      	b.n	2400c87e <lv_draw_line+0x136>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
2400ce7c:	463b      	mov	r3, r7
2400ce7e:	465a      	mov	r2, fp
2400ce80:	4641      	mov	r1, r8
2400ce82:	a810      	add	r0, sp, #64	; 0x40
2400ce84:	9500      	str	r5, [sp, #0]
2400ce86:	f000 fcf3 	bl	2400d870 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
2400ce8a:	2301      	movs	r3, #1
2400ce8c:	4652      	mov	r2, sl
2400ce8e:	e9cd 6300 	strd	r6, r3, [sp]
2400ce92:	463b      	mov	r3, r7
2400ce94:	e732      	b.n	2400ccfc <lv_draw_line+0x5b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
2400ce96:	2200      	movs	r2, #0
2400ce98:	fa15 f387 	uxtah	r3, r5, r7
2400ce9c:	fa15 f588 	uxtah	r5, r5, r8
2400cea0:	a810      	add	r0, sp, #64	; 0x40
2400cea2:	9201      	str	r2, [sp, #4]
2400cea4:	b21b      	sxth	r3, r3
2400cea6:	9a05      	ldr	r2, [sp, #20]
2400cea8:	b229      	sxth	r1, r5
2400ceaa:	fa1f fa88 	uxth.w	sl, r8
2400ceae:	9200      	str	r2, [sp, #0]
2400ceb0:	464a      	mov	r2, r9
2400ceb2:	f000 fcdd 	bl	2400d870 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
2400ceb6:	2201      	movs	r2, #1
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
2400ceb8:	fa1f fb87 	uxth.w	fp, r7
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
2400cebc:	ebaa 0106 	sub.w	r1, sl, r6
2400cec0:	9201      	str	r2, [sp, #4]
2400cec2:	ebab 0306 	sub.w	r3, fp, r6
2400cec6:	9a05      	ldr	r2, [sp, #20]
2400cec8:	b209      	sxth	r1, r1
2400ceca:	9200      	str	r2, [sp, #0]
2400cecc:	b21b      	sxth	r3, r3
2400cece:	464a      	mov	r2, r9
2400ced0:	e715      	b.n	2400ccfe <lv_draw_line+0x5b6>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
2400ced2:	f04f 3bff 	mov.w	fp, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
2400ced6:	f8cd b020 	str.w	fp, [sp, #32]
2400ceda:	e74f      	b.n	2400cd7c <lv_draw_line+0x634>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
2400cedc:	eb08 030a 	add.w	r3, r8, sl
2400cee0:	fa0f f289 	sxth.w	r2, r9
2400cee4:	9905      	ldr	r1, [sp, #20]
2400cee6:	ee08 3a90 	vmov	s17, r3
2400ceea:	462b      	mov	r3, r5
2400ceec:	ee18 0a90 	vmov	r0, s17
2400cef0:	f000 fc68 	bl	2400d7c4 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
2400cef4:	b920      	cbnz	r0, 2400cf00 <lv_draw_line+0x7b8>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
2400cef6:	4629      	mov	r1, r5
2400cef8:	ee18 0a90 	vmov	r0, s17
2400cefc:	f002 ff80 	bl	2400fe00 <_lv_memset_00>
        mask_p += draw_area_w;
2400cf00:	44aa      	add	sl, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
2400cf02:	eb0a 0305 	add.w	r3, sl, r5
2400cf06:	429e      	cmp	r6, r3
2400cf08:	d90a      	bls.n	2400cf20 <lv_draw_line+0x7d8>
            fill_area.y2 ++;
2400cf0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
2400cf0e:	3301      	adds	r3, #1
2400cf10:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
2400cf14:	f109 0901 	add.w	r9, r9, #1
2400cf18:	e780      	b.n	2400ce1c <lv_draw_line+0x6d4>
2400cf1a:	bf00      	nop
2400cf1c:	900d6800 	.word	0x900d6800
                           dsc->blend_mode);
2400cf20:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(&fill_area, clip,
2400cf22:	a90a      	add	r1, sp, #40	; 0x28
2400cf24:	8822      	ldrh	r2, [r4, #0]
2400cf26:	a80e      	add	r0, sp, #56	; 0x38
2400cf28:	f003 0303 	and.w	r3, r3, #3
            mask_p = 0;
2400cf2c:	f04f 0a00 	mov.w	sl, #0
            _lv_blend_fill(&fill_area, clip,
2400cf30:	9302      	str	r3, [sp, #8]
2400cf32:	7a23      	ldrb	r3, [r4, #8]
2400cf34:	9301      	str	r3, [sp, #4]
2400cf36:	2302      	movs	r3, #2
2400cf38:	9300      	str	r3, [sp, #0]
2400cf3a:	4643      	mov	r3, r8
2400cf3c:	f7fd ff6e 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
2400cf40:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            _lv_memset_ff(mask_buf, mask_buf_size);
2400cf44:	4631      	mov	r1, r6
2400cf46:	4640      	mov	r0, r8
            fill_area.y1 = fill_area.y2 + 1;
2400cf48:	3301      	adds	r3, #1
2400cf4a:	b21b      	sxth	r3, r3
2400cf4c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            fill_area.y2 = fill_area.y1;
2400cf50:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            _lv_memset_ff(mask_buf, mask_buf_size);
2400cf54:	f002 ff7f 	bl	2400fe56 <_lv_memset_ff>
2400cf58:	e7dc      	b.n	2400cf14 <lv_draw_line+0x7cc>
2400cf5a:	bf00      	nop

2400cf5c <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
2400cf5c:	29fc      	cmp	r1, #252	; 0xfc
2400cf5e:	d80a      	bhi.n	2400cf76 <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
2400cf60:	2902      	cmp	r1, #2
2400cf62:	d907      	bls.n	2400cf74 <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
2400cf64:	fb10 f001 	smulbb	r0, r0, r1
2400cf68:	f248 0381 	movw	r3, #32897	; 0x8081
2400cf6c:	4358      	muls	r0, r3
2400cf6e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
2400cf72:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
2400cf74:	2000      	movs	r0, #0
}
2400cf76:	4770      	bx	lr

2400cf78 <lv_draw_mask_line>:
{
2400cf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400cf7c:	9e08      	ldr	r6, [sp, #32]
2400cf7e:	461c      	mov	r4, r3
2400cf80:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
2400cf82:	8ab3      	ldrh	r3, [r6, #20]
2400cf84:	1ad2      	subs	r2, r2, r3
    abs_x -= p->origo.x;
2400cf86:	8a73      	ldrh	r3, [r6, #18]
2400cf88:	1ac9      	subs	r1, r1, r3
        if(p->flat) {
2400cf8a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    abs_y -= p->origo.y;
2400cf8e:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
2400cf90:	b20f      	sxth	r7, r1
    if(p->steep == 0) {
2400cf92:	6a31      	ldr	r1, [r6, #32]
        if(p->flat) {
2400cf94:	f003 0001 	and.w	r0, r3, #1
    if(p->steep == 0) {
2400cf98:	bb99      	cbnz	r1, 2400d002 <lv_draw_mask_line+0x8a>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
2400cf9a:	7c33      	ldrb	r3, [r6, #16]
2400cf9c:	f003 0602 	and.w	r6, r3, #2
        if(p->flat) {
2400cfa0:	b180      	cbz	r0, 2400cfc4 <lv_draw_mask_line+0x4c>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
2400cfa2:	b13e      	cbz	r6, 2400cfb4 <lv_draw_mask_line+0x3c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
2400cfa4:	f003 0303 	and.w	r3, r3, #3
2400cfa8:	2b02      	cmp	r3, #2
2400cfaa:	d105      	bne.n	2400cfb8 <lv_draw_mask_line+0x40>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
2400cfac:	3201      	adds	r2, #1
2400cfae:	bfac      	ite	ge
2400cfb0:	2000      	movge	r0, #0
2400cfb2:	2001      	movlt	r0, #1
}
2400cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
2400cfb8:	2b03      	cmp	r3, #3
2400cfba:	d101      	bne.n	2400cfc0 <lv_draw_mask_line+0x48>
2400cfbc:	2a00      	cmp	r2, #0
2400cfbe:	dcf9      	bgt.n	2400cfb4 <lv_draw_mask_line+0x3c>
                return LV_DRAW_MASK_RES_TRANSP;
2400cfc0:	2000      	movs	r0, #0
2400cfc2:	e7f7      	b.n	2400cfb4 <lv_draw_mask_line+0x3c>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
2400cfc4:	2e00      	cmp	r6, #0
2400cfc6:	f040 818d 	bne.w	2400d2e4 <lv_draw_mask_line+0x36c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
2400cfca:	f003 0003 	and.w	r0, r3, #3
2400cfce:	2801      	cmp	r0, #1
2400cfd0:	d10a      	bne.n	2400cfe8 <lv_draw_mask_line+0x70>
2400cfd2:	2f00      	cmp	r7, #0
2400cfd4:	dcee      	bgt.n	2400cfb4 <lv_draw_mask_line+0x3c>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
2400cfd6:	42e7      	cmn	r7, r4
2400cfd8:	d4f2      	bmi.n	2400cfc0 <lv_draw_mask_line+0x48>
                    if(k < 0) k = 0;
2400cfda:	2f00      	cmp	r7, #0
2400cfdc:	f300 8184 	bgt.w	2400d2e8 <lv_draw_mask_line+0x370>
                    int32_t k = - abs_x;
2400cfe0:	4279      	negs	r1, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
2400cfe2:	428c      	cmp	r4, r1
2400cfe4:	ddec      	ble.n	2400cfc0 <lv_draw_mask_line+0x48>
2400cfe6:	e09d      	b.n	2400d124 <lv_draw_mask_line+0x1ac>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
2400cfe8:	2800      	cmp	r0, #0
2400cfea:	d1f4      	bne.n	2400cfd6 <lv_draw_mask_line+0x5e>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
2400cfec:	1939      	adds	r1, r7, r4
2400cfee:	f100 8179 	bmi.w	2400d2e4 <lv_draw_mask_line+0x36c>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
2400cff2:	2f00      	cmp	r7, #0
2400cff4:	dce4      	bgt.n	2400cfc0 <lv_draw_mask_line+0x48>
                    int32_t k = - abs_x;
2400cff6:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
2400cff8:	42a0      	cmp	r0, r4
2400cffa:	f2c0 809e 	blt.w	2400d13a <lv_draw_mask_line+0x1c2>
    return LV_DRAW_MASK_RES_CHANGED;
2400cffe:	2002      	movs	r0, #2
2400d000:	e7d8      	b.n	2400cfb4 <lv_draw_mask_line+0x3c>
    if(p->flat) {
2400d002:	f003 0c02 	and.w	ip, r3, #2
2400d006:	2800      	cmp	r0, #0
2400d008:	f000 8099 	beq.w	2400d13e <lv_draw_mask_line+0x1c6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
2400d00c:	69f1      	ldr	r1, [r6, #28]
            if(p->inv) {
2400d00e:	fa5f f08c 	uxtb.w	r0, ip
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
2400d012:	fb07 f301 	mul.w	r3, r7, r1
    if(p->yx_steep > 0) {
2400d016:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
2400d018:	ea4f 23a3 	mov.w	r3, r3, asr #10
    if(p->yx_steep > 0) {
2400d01c:	dd05      	ble.n	2400d02a <lv_draw_mask_line+0xb2>
        if(y_at_x > abs_y) {
2400d01e:	429a      	cmp	r2, r3
2400d020:	da05      	bge.n	2400d02e <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
2400d022:	3800      	subs	r0, #0
2400d024:	bf18      	it	ne
2400d026:	2001      	movne	r0, #1
2400d028:	e7c4      	b.n	2400cfb4 <lv_draw_mask_line+0x3c>
        if(y_at_x < abs_y) {
2400d02a:	429a      	cmp	r2, r3
2400d02c:	dcf9      	bgt.n	2400d022 <lv_draw_mask_line+0xaa>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
2400d02e:	193b      	adds	r3, r7, r4
    if(p->yx_steep > 0) {
2400d030:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
2400d032:	fb01 f303 	mul.w	r3, r1, r3
2400d036:	ea4f 23a3 	mov.w	r3, r3, asr #10
    if(p->yx_steep > 0) {
2400d03a:	dd05      	ble.n	2400d048 <lv_draw_mask_line+0xd0>
        if(y_at_x < abs_y) {
2400d03c:	429a      	cmp	r2, r3
2400d03e:	dd06      	ble.n	2400d04e <lv_draw_mask_line+0xd6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
2400d040:	fab0 f080 	clz	r0, r0
2400d044:	0940      	lsrs	r0, r0, #5
2400d046:	e7b5      	b.n	2400cfb4 <lv_draw_mask_line+0x3c>
        if(y_at_x > abs_y) {
2400d048:	429a      	cmp	r2, r3
2400d04a:	dbf9      	blt.n	2400d040 <lv_draw_mask_line+0xc8>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
2400d04c:	3201      	adds	r2, #1
2400d04e:	69b3      	ldr	r3, [r6, #24]
2400d050:	0212      	lsls	r2, r2, #8
2400d052:	435a      	muls	r2, r3
2400d054:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
2400d056:	1211      	asrs	r1, r2, #8
    if(xef == 0) px_h = 255;
2400d058:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
2400d05c:	bf1a      	itte	ne
2400d05e:	f1c2 08ff 	rsbne	r8, r2, #255	; 0xff
2400d062:	6a73      	ldrne	r3, [r6, #36]	; 0x24
    if(xef == 0) px_h = 255;
2400d064:	f04f 08ff 	moveq.w	r8, #255	; 0xff
    int32_t k = xei - abs_x;
2400d068:	eba1 0707 	sub.w	r7, r1, r7
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
2400d06c:	bf1e      	ittt	ne
2400d06e:	fb03 f808 	mulne.w	r8, r3, r8
2400d072:	ea4f 2828 	movne.w	r8, r8, asr #8
2400d076:	f1c8 08ff 	rsbne	r8, r8, #255	; 0xff
    if(xef) {
2400d07a:	2a00      	cmp	r2, #0
2400d07c:	d054      	beq.n	2400d128 <lv_draw_mask_line+0x1b0>
        if(k >= 0 && k < len) {
2400d07e:	2f00      	cmp	r7, #0
2400d080:	db0f      	blt.n	2400d0a2 <lv_draw_mask_line+0x12a>
2400d082:	42bc      	cmp	r4, r7
2400d084:	dd0d      	ble.n	2400d0a2 <lv_draw_mask_line+0x12a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
2400d086:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
2400d08a:	f1c8 03ff 	rsb	r3, r8, #255	; 0xff
2400d08e:	4359      	muls	r1, r3
2400d090:	f3c1 2147 	ubfx	r1, r1, #9, #8
            if(p->inv) m = 255 - m;
2400d094:	b908      	cbnz	r0, 2400d09a <lv_draw_mask_line+0x122>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
2400d096:	43c9      	mvns	r1, r1
2400d098:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
2400d09a:	5de8      	ldrb	r0, [r5, r7]
2400d09c:	f7ff ff5e 	bl	2400cf5c <mask_mix>
2400d0a0:	55e8      	strb	r0, [r5, r7]
        k++;
2400d0a2:	1c7a      	adds	r2, r7, #1
    while(px_h > p->spx) {
2400d0a4:	6a71      	ldr	r1, [r6, #36]	; 0x24
            if(p->inv) m = 255 - m;
2400d0a6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    while(px_h > p->spx) {
2400d0aa:	4588      	cmp	r8, r1
            if(p->inv) m = 255 - m;
2400d0ac:	f003 0302 	and.w	r3, r3, #2
    while(px_h > p->spx) {
2400d0b0:	dc19      	bgt.n	2400d0e6 <lv_draw_mask_line+0x16e>
    if(k < len && k >= 0) {
2400d0b2:	4294      	cmp	r4, r2
2400d0b4:	dd2b      	ble.n	2400d10e <lv_draw_mask_line+0x196>
2400d0b6:	2a00      	cmp	r2, #0
2400d0b8:	db29      	blt.n	2400d10e <lv_draw_mask_line+0x196>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
2400d0ba:	69b1      	ldr	r1, [r6, #24]
        if(p->yx_steep < 0) m = 255 - m;
2400d0bc:	69f0      	ldr	r0, [r6, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
2400d0be:	fb01 f108 	mul.w	r1, r1, r8
        if(p->yx_steep < 0) m = 255 - m;
2400d0c2:	2800      	cmp	r0, #0
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
2400d0c4:	ea4f 21a1 	mov.w	r1, r1, asr #10
        m = (x_inters * px_h) >> 9;
2400d0c8:	fb08 f101 	mul.w	r1, r8, r1
2400d0cc:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
2400d0d0:	bfbc      	itt	lt
2400d0d2:	43c9      	mvnlt	r1, r1
2400d0d4:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
2400d0d6:	b10b      	cbz	r3, 2400d0dc <lv_draw_mask_line+0x164>
2400d0d8:	43c9      	mvns	r1, r1
2400d0da:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
2400d0dc:	5ca8      	ldrb	r0, [r5, r2]
2400d0de:	f7ff ff3d 	bl	2400cf5c <mask_mix>
2400d0e2:	54a8      	strb	r0, [r5, r2]
2400d0e4:	e013      	b.n	2400d10e <lv_draw_mask_line+0x196>
        if(k >= 0 && k < len) {
2400d0e6:	2a00      	cmp	r2, #0
2400d0e8:	db0b      	blt.n	2400d102 <lv_draw_mask_line+0x18a>
2400d0ea:	4294      	cmp	r4, r2
2400d0ec:	dd09      	ble.n	2400d102 <lv_draw_mask_line+0x18a>
            m = px_h - (p->spx >> 1);
2400d0ee:	eba8 0161 	sub.w	r1, r8, r1, asr #1
2400d0f2:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
2400d0f4:	b10b      	cbz	r3, 2400d0fa <lv_draw_mask_line+0x182>
2400d0f6:	43c9      	mvns	r1, r1
2400d0f8:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
2400d0fa:	5ca8      	ldrb	r0, [r5, r2]
2400d0fc:	f7ff ff2e 	bl	2400cf5c <mask_mix>
2400d100:	54a8      	strb	r0, [r5, r2]
        k++;
2400d102:	3201      	adds	r2, #1
        px_h -= p->spx;
2400d104:	6a73      	ldr	r3, [r6, #36]	; 0x24
        if(k >= len) break;
2400d106:	4294      	cmp	r4, r2
        px_h -= p->spx;
2400d108:	eba8 0803 	sub.w	r8, r8, r3
        if(k >= len) break;
2400d10c:	dcca      	bgt.n	2400d0a4 <lv_draw_mask_line+0x12c>
    if(p->inv) {
2400d10e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
2400d112:	0799      	lsls	r1, r3, #30
2400d114:	d50a      	bpl.n	2400d12c <lv_draw_mask_line+0x1b4>
        if(k > len) {
2400d116:	42bc      	cmp	r4, r7
2400d118:	f6ff af52 	blt.w	2400cfc0 <lv_draw_mask_line+0x48>
        if(k >= 0) {
2400d11c:	2f00      	cmp	r7, #0
2400d11e:	f6ff af6e 	blt.w	2400cffe <lv_draw_mask_line+0x86>
            _lv_memset_00(&mask_buf[0], k);
2400d122:	4639      	mov	r1, r7
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
2400d124:	4628      	mov	r0, r5
2400d126:	e086      	b.n	2400d236 <lv_draw_mask_line+0x2be>
    int32_t k = xei - abs_x;
2400d128:	463a      	mov	r2, r7
2400d12a:	e7bb      	b.n	2400d0a4 <lv_draw_mask_line+0x12c>
        if(k < 0) {
2400d12c:	1c50      	adds	r0, r2, #1
2400d12e:	f53f af47 	bmi.w	2400cfc0 <lv_draw_mask_line+0x48>
        if(k <= len) {
2400d132:	4284      	cmp	r4, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
2400d134:	f6ff af63 	blt.w	2400cffe <lv_draw_mask_line+0x86>
2400d138:	1a21      	subs	r1, r4, r0
2400d13a:	4428      	add	r0, r5
2400d13c:	e07b      	b.n	2400d236 <lv_draw_mask_line+0x2be>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
2400d13e:	69b1      	ldr	r1, [r6, #24]
            if(p->inv) {
2400d140:	fa5f f08c 	uxtb.w	r0, ip
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
2400d144:	fb01 f302 	mul.w	r3, r1, r2
    if(p->xy_steep > 0) x_at_y++;
2400d148:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
2400d14a:	ea4f 23a3 	mov.w	r3, r3, asr #10
    if(p->xy_steep > 0) x_at_y++;
2400d14e:	bfcc      	ite	gt
2400d150:	f103 0e01 	addgt.w	lr, r3, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
2400d154:	469e      	movle	lr, r3
    if(x_at_y < abs_x) {
2400d156:	4577      	cmp	r7, lr
2400d158:	f73f af63 	bgt.w	2400d022 <lv_draw_mask_line+0xaa>
    if(x_at_y > abs_x + len) {
2400d15c:	eb07 0c04 	add.w	ip, r7, r4
2400d160:	4563      	cmp	r3, ip
2400d162:	f73f af6d 	bgt.w	2400d040 <lv_draw_mask_line+0xc8>
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
2400d166:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
2400d16a:	3201      	adds	r2, #1
2400d16c:	0212      	lsls	r2, r2, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
2400d16e:	fb01 fc0c 	mul.w	ip, r1, ip
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
2400d172:	434a      	muls	r2, r1
    int32_t xsf = xs & 0xFF;
2400d174:	f3cc 2387 	ubfx	r3, ip, #10, #8
    k = xsi - abs_x;
2400d178:	ebc7 4aac 	rsb	sl, r7, ip, asr #18
    int32_t xei = xe >> 8;
2400d17c:	ea4f 49a2 	mov.w	r9, r2, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
2400d180:	ebb9 4fac 	cmp.w	r9, ip, asr #18
2400d184:	f000 80b2 	beq.w	2400d2ec <lv_draw_mask_line+0x374>
2400d188:	2900      	cmp	r1, #0
2400d18a:	da5d      	bge.n	2400d248 <lv_draw_mask_line+0x2d0>
        k--;
2400d18c:	f10a 38ff 	add.w	r8, sl, #4294967295
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
2400d190:	2b00      	cmp	r3, #0
2400d192:	f000 80cd 	beq.w	2400d330 <lv_draw_mask_line+0x3b8>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
2400d196:	69f2      	ldr	r2, [r6, #28]
            if(k >= 0 && k < len) {
2400d198:	f1ba 0f00 	cmp.w	sl, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
2400d19c:	f1c2 0200 	rsb	r2, r2, #0
2400d1a0:	fb03 f202 	mul.w	r2, r3, r2
2400d1a4:	ea4f 22a2 	mov.w	r2, r2, asr #10
            if(k >= 0 && k < len) {
2400d1a8:	db0d      	blt.n	2400d1c6 <lv_draw_mask_line+0x24e>
2400d1aa:	4554      	cmp	r4, sl
2400d1ac:	dd0b      	ble.n	2400d1c6 <lv_draw_mask_line+0x24e>
                m = (y_inters * xsf) >> 9;
2400d1ae:	4353      	muls	r3, r2
2400d1b0:	f3c3 2147 	ubfx	r1, r3, #9, #8
                if(p->inv) m = 255 - m;
2400d1b4:	b108      	cbz	r0, 2400d1ba <lv_draw_mask_line+0x242>
2400d1b6:	43c9      	mvns	r1, r1
2400d1b8:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d1ba:	f815 000a 	ldrb.w	r0, [r5, sl]
2400d1be:	f7ff fecd 	bl	2400cf5c <mask_mix>
2400d1c2:	f805 000a 	strb.w	r0, [r5, sl]
            if(k >= 0 && k < len) {
2400d1c6:	f1b8 0f00 	cmp.w	r8, #0
2400d1ca:	db18      	blt.n	2400d1fe <lv_draw_mask_line+0x286>
2400d1cc:	4544      	cmp	r4, r8
2400d1ce:	dd16      	ble.n	2400d1fe <lv_draw_mask_line+0x286>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
2400d1d0:	69b3      	ldr	r3, [r6, #24]
2400d1d2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d1d6:	f815 0008 	ldrb.w	r0, [r5, r8]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
2400d1da:	4259      	negs	r1, r3
                if(p->inv) m = 255 - m;
2400d1dc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
2400d1e0:	4351      	muls	r1, r2
                if(p->inv) m = 255 - m;
2400d1e2:	079f      	lsls	r7, r3, #30
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
2400d1e4:	ea4f 21a1 	mov.w	r1, r1, asr #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
2400d1e8:	fb02 f101 	mul.w	r1, r2, r1
2400d1ec:	f3c1 2147 	ubfx	r1, r1, #9, #8
2400d1f0:	bf5c      	itt	pl
2400d1f2:	43c9      	mvnpl	r1, r1
2400d1f4:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d1f6:	f7ff feb1 	bl	2400cf5c <mask_mix>
2400d1fa:	f805 0008 	strb.w	r0, [r5, r8]
            if(p->inv) {
2400d1fe:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
2400d202:	079e      	lsls	r6, r3, #30
2400d204:	d51a      	bpl.n	2400d23c <lv_draw_mask_line+0x2c4>
                if(k > len) k = len;
2400d206:	4544      	cmp	r4, r8
2400d208:	f6ff aef9 	blt.w	2400cffe <lv_draw_mask_line+0x86>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
2400d20c:	f1b8 0f00 	cmp.w	r8, #0
2400d210:	f77f aef5 	ble.w	2400cffe <lv_draw_mask_line+0x86>
2400d214:	4641      	mov	r1, r8
2400d216:	e785      	b.n	2400d124 <lv_draw_mask_line+0x1ac>
        k++;
2400d218:	f108 0801 	add.w	r8, r8, #1
2400d21c:	45a0      	cmp	r8, r4
2400d21e:	bfa8      	it	ge
2400d220:	46a0      	movge	r8, r4
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
2400d222:	f1b8 0f00 	cmp.w	r8, #0
2400d226:	f43f aecb 	beq.w	2400cfc0 <lv_draw_mask_line+0x48>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
2400d22a:	f77f aee8 	ble.w	2400cffe <lv_draw_mask_line+0x86>
2400d22e:	eba4 0108 	sub.w	r1, r4, r8
2400d232:	eb05 0008 	add.w	r0, r5, r8
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
2400d236:	f002 fde3 	bl	2400fe00 <_lv_memset_00>
2400d23a:	e6e0      	b.n	2400cffe <lv_draw_mask_line+0x86>
            k += 2;
2400d23c:	f10a 0001 	add.w	r0, sl, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
2400d240:	4284      	cmp	r4, r0
2400d242:	db4f      	blt.n	2400d2e4 <lv_draw_mask_line+0x36c>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
2400d244:	2800      	cmp	r0, #0
2400d246:	e775      	b.n	2400d134 <lv_draw_mask_line+0x1bc>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
2400d248:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
2400d24c:	69f7      	ldr	r7, [r6, #28]
            if(k >= 0 && k < len) {
2400d24e:	f1ba 0f00 	cmp.w	sl, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
2400d252:	fb03 f707 	mul.w	r7, r3, r7
2400d256:	ea4f 27a7 	mov.w	r7, r7, asr #10
            if(k >= 0 && k < len) {
2400d25a:	db0d      	blt.n	2400d278 <lv_draw_mask_line+0x300>
2400d25c:	4554      	cmp	r4, sl
2400d25e:	dd0b      	ble.n	2400d278 <lv_draw_mask_line+0x300>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
2400d260:	437b      	muls	r3, r7
2400d262:	f3c3 2147 	ubfx	r1, r3, #9, #8
                if(p->inv) m = 255 - m;
2400d266:	b908      	cbnz	r0, 2400d26c <lv_draw_mask_line+0x2f4>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
2400d268:	43c9      	mvns	r1, r1
2400d26a:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d26c:	f815 000a 	ldrb.w	r0, [r5, sl]
2400d270:	f7ff fe74 	bl	2400cf5c <mask_mix>
2400d274:	f805 000a 	strb.w	r0, [r5, sl]
            if(k >= 0 && k < len) {
2400d278:	f11a 0201 	adds.w	r2, sl, #1
2400d27c:	d415      	bmi.n	2400d2aa <lv_draw_mask_line+0x332>
2400d27e:	4294      	cmp	r4, r2
2400d280:	dd13      	ble.n	2400d2aa <lv_draw_mask_line+0x332>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
2400d282:	69b3      	ldr	r3, [r6, #24]
2400d284:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
2400d288:	fb03 f107 	mul.w	r1, r3, r7
                if(p->inv) m = 255 - m;
2400d28c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
2400d290:	1289      	asrs	r1, r1, #10
                if(p->inv) m = 255 - m;
2400d292:	0798      	lsls	r0, r3, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d294:	5ca8      	ldrb	r0, [r5, r2]
                m = ((255 - y_inters) * x_inters) >> 9;
2400d296:	fb07 f101 	mul.w	r1, r7, r1
2400d29a:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
2400d29e:	bf44      	itt	mi
2400d2a0:	43c9      	mvnmi	r1, r1
2400d2a2:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
2400d2a4:	f7ff fe5a 	bl	2400cf5c <mask_mix>
2400d2a8:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
2400d2aa:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
2400d2ae:	079b      	lsls	r3, r3, #30
2400d2b0:	d508      	bpl.n	2400d2c4 <lv_draw_mask_line+0x34c>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
2400d2b2:	4554      	cmp	r4, sl
2400d2b4:	f6ff ae84 	blt.w	2400cfc0 <lv_draw_mask_line+0x48>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
2400d2b8:	f1ba 0f00 	cmp.w	sl, #0
2400d2bc:	f6ff ae9f 	blt.w	2400cffe <lv_draw_mask_line+0x86>
2400d2c0:	4651      	mov	r1, sl
2400d2c2:	e72f      	b.n	2400d124 <lv_draw_mask_line+0x1ac>
            k++;
2400d2c4:	f10a 0a02 	add.w	sl, sl, #2
2400d2c8:	45a2      	cmp	sl, r4
2400d2ca:	bfa8      	it	ge
2400d2cc:	46a2      	movge	sl, r4
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
2400d2ce:	f1ba 0f00 	cmp.w	sl, #0
2400d2d2:	f43f ae75 	beq.w	2400cfc0 <lv_draw_mask_line+0x48>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
2400d2d6:	f77f ae92 	ble.w	2400cffe <lv_draw_mask_line+0x86>
2400d2da:	eba4 010a 	sub.w	r1, r4, sl
2400d2de:	eb05 000a 	add.w	r0, r5, sl
2400d2e2:	e7a8      	b.n	2400d236 <lv_draw_mask_line+0x2be>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
2400d2e4:	2001      	movs	r0, #1
2400d2e6:	e665      	b.n	2400cfb4 <lv_draw_mask_line+0x3c>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
2400d2e8:	2c00      	cmp	r4, #0
2400d2ea:	e67b      	b.n	2400cfe4 <lv_draw_mask_line+0x6c>
    k = xsi - abs_x;
2400d2ec:	46d0      	mov	r8, sl
        if(k >= 0 && k < len) {
2400d2ee:	f1b8 0f00 	cmp.w	r8, #0
2400d2f2:	db0f      	blt.n	2400d314 <lv_draw_mask_line+0x39c>
2400d2f4:	4544      	cmp	r4, r8
2400d2f6:	dd0d      	ble.n	2400d314 <lv_draw_mask_line+0x39c>
    int32_t xef = xe & 0xFF;
2400d2f8:	f3c2 2187 	ubfx	r1, r2, #10, #8
            m = (xsf + xef) >> 1;
2400d2fc:	4419      	add	r1, r3
2400d2fe:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
2400d302:	b108      	cbz	r0, 2400d308 <lv_draw_mask_line+0x390>
2400d304:	43c9      	mvns	r1, r1
2400d306:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
2400d308:	f815 0008 	ldrb.w	r0, [r5, r8]
2400d30c:	f7ff fe26 	bl	2400cf5c <mask_mix>
2400d310:	f805 0008 	strb.w	r0, [r5, r8]
        if(p->inv) {
2400d314:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
2400d318:	079b      	lsls	r3, r3, #30
2400d31a:	f57f af7d 	bpl.w	2400d218 <lv_draw_mask_line+0x2a0>
            k = xsi - abs_x;
2400d31e:	eba9 0107 	sub.w	r1, r9, r7
            if(k >= len) {
2400d322:	428c      	cmp	r4, r1
2400d324:	f77f ae4c 	ble.w	2400cfc0 <lv_draw_mask_line+0x48>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
2400d328:	2900      	cmp	r1, #0
2400d32a:	f6ff ae68 	blt.w	2400cffe <lv_draw_mask_line+0x86>
2400d32e:	e6f9      	b.n	2400d124 <lv_draw_mask_line+0x1ac>
        xsf = 0xFF;
2400d330:	23ff      	movs	r3, #255	; 0xff
2400d332:	e7dc      	b.n	2400d2ee <lv_draw_mask_line+0x376>

2400d334 <lv_area_copy>:
    while(len) {
2400d334:	3901      	subs	r1, #1
2400d336:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
2400d33a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
2400d33e:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
2400d342:	4298      	cmp	r0, r3
2400d344:	d1f9      	bne.n	2400d33a <lv_area_copy+0x6>
}
2400d346:	4770      	bx	lr

2400d348 <lv_draw_mask_radius>:
{
2400d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400d34c:	b08d      	sub	sp, #52	; 0x34
2400d34e:	461d      	mov	r5, r3
2400d350:	2300      	movs	r3, #0
2400d352:	4606      	mov	r6, r0
2400d354:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
2400d358:	468a      	mov	sl, r1
    lv_area_copy(&rect, &p->cfg.rect);
2400d35a:	a80a      	add	r0, sp, #40	; 0x28
{
2400d35c:	9303      	str	r3, [sp, #12]
    bool outer = p->cfg.outer;
2400d35e:	f898 9012 	ldrb.w	r9, [r8, #18]
    lv_area_copy(&rect, &p->cfg.rect);
2400d362:	f108 0108 	add.w	r1, r8, #8
{
2400d366:	9301      	str	r3, [sp, #4]
2400d368:	4617      	mov	r7, r2
    bool outer = p->cfg.outer;
2400d36a:	f009 0901 	and.w	r9, r9, #1
    int32_t radius = p->cfg.radius;
2400d36e:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    lv_area_copy(&rect, &p->cfg.rect);
2400d372:	f7ff ffdf 	bl	2400d334 <lv_area_copy>
    if(outer == false) {
2400d376:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
2400d37a:	f1b9 0f00 	cmp.w	r9, #0
2400d37e:	d13a      	bne.n	2400d3f6 <lv_draw_mask_radius+0xae>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
2400d380:	42bb      	cmp	r3, r7
2400d382:	dd01      	ble.n	2400d388 <lv_draw_mask_radius+0x40>
                    return LV_DRAW_MASK_RES_TRANSP;
2400d384:	2000      	movs	r0, #0
2400d386:	e039      	b.n	2400d3fc <lv_draw_mask_radius+0xb4>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
2400d388:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
2400d38c:	42ba      	cmp	r2, r7
2400d38e:	dbf9      	blt.n	2400d384 <lv_draw_mask_radius+0x3c>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
2400d390:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
2400d394:	eb01 020b 	add.w	r2, r1, fp
2400d398:	eba1 040a 	sub.w	r4, r1, sl
2400d39c:	4592      	cmp	sl, r2
2400d39e:	db07      	blt.n	2400d3b0 <lv_draw_mask_radius+0x68>
2400d3a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
2400d3a4:	eb05 000a 	add.w	r0, r5, sl
2400d3a8:	eba2 020b 	sub.w	r2, r2, fp
2400d3ac:	4290      	cmp	r0, r2
2400d3ae:	dd09      	ble.n	2400d3c4 <lv_draw_mask_radius+0x7c>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
2400d3b0:	eb03 020b 	add.w	r2, r3, fp
        if(abs_y < rect.y1 || abs_y > rect.y2) {
2400d3b4:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
2400d3b8:	4297      	cmp	r7, r2
2400d3ba:	db3d      	blt.n	2400d438 <lv_draw_mask_radius+0xf0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
2400d3bc:	eba0 020b 	sub.w	r2, r0, fp
2400d3c0:	4297      	cmp	r7, r2
2400d3c2:	dc39      	bgt.n	2400d438 <lv_draw_mask_radius+0xf0>
        if(outer == false) {
2400d3c4:	f1b9 0f00 	cmp.w	r9, #0
2400d3c8:	d125      	bne.n	2400d416 <lv_draw_mask_radius+0xce>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
2400d3ca:	42a5      	cmp	r5, r4
2400d3cc:	dbda      	blt.n	2400d384 <lv_draw_mask_radius+0x3c>
            if(last >= 0) {
2400d3ce:	2c00      	cmp	r4, #0
2400d3d0:	db03      	blt.n	2400d3da <lv_draw_mask_radius+0x92>
                _lv_memset_00(&mask_buf[0], last);
2400d3d2:	4621      	mov	r1, r4
2400d3d4:	4630      	mov	r0, r6
2400d3d6:	f002 fd13 	bl	2400fe00 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
2400d3da:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
2400d3de:	eba0 000a 	sub.w	r0, r0, sl
2400d3e2:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
2400d3e4:	2800      	cmp	r0, #0
2400d3e6:	ddcd      	ble.n	2400d384 <lv_draw_mask_radius+0x3c>
            else if(first < len) {
2400d3e8:	42a8      	cmp	r0, r5
2400d3ea:	da0f      	bge.n	2400d40c <lv_draw_mask_radius+0xc4>
                    _lv_memset_00(&mask_buf[kr], len - kr);
2400d3ec:	1a29      	subs	r1, r5, r0
                    _lv_memset_00(&mask_buf[first], len_tmp);
2400d3ee:	4430      	add	r0, r6
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
2400d3f0:	f002 fd06 	bl	2400fe00 <_lv_memset_00>
2400d3f4:	e00d      	b.n	2400d412 <lv_draw_mask_radius+0xca>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
2400d3f6:	42bb      	cmp	r3, r7
2400d3f8:	dd03      	ble.n	2400d402 <lv_draw_mask_radius+0xba>
            return LV_DRAW_MASK_RES_FULL_COVER;
2400d3fa:	2001      	movs	r0, #1
}
2400d3fc:	b00d      	add	sp, #52	; 0x34
2400d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
2400d402:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
2400d406:	42ba      	cmp	r2, r7
2400d408:	dac2      	bge.n	2400d390 <lv_draw_mask_radius+0x48>
2400d40a:	e7f6      	b.n	2400d3fa <lv_draw_mask_radius+0xb2>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
2400d40c:	b90c      	cbnz	r4, 2400d412 <lv_draw_mask_radius+0xca>
2400d40e:	42a8      	cmp	r0, r5
2400d410:	d0f3      	beq.n	2400d3fa <lv_draw_mask_radius+0xb2>
    return LV_DRAW_MASK_RES_CHANGED;
2400d412:	2002      	movs	r0, #2
2400d414:	e7f2      	b.n	2400d3fc <lv_draw_mask_radius+0xb4>
            if(first < 0) first = 0;
2400d416:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
            if(first <= len) {
2400d41a:	42a8      	cmp	r0, r5
2400d41c:	dcf9      	bgt.n	2400d412 <lv_draw_mask_radius+0xca>
                int32_t last =  rect.x2 - abs_x - first + 1;
2400d41e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
2400d422:	eba1 010a 	sub.w	r1, r1, sl
2400d426:	1a09      	subs	r1, r1, r0
2400d428:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
2400d42a:	1843      	adds	r3, r0, r1
2400d42c:	42ab      	cmp	r3, r5
2400d42e:	dd00      	ble.n	2400d432 <lv_draw_mask_radius+0xea>
2400d430:	1a29      	subs	r1, r5, r0
                if(first < len && len_tmp >= 0) {
2400d432:	2900      	cmp	r1, #0
2400d434:	dbed      	blt.n	2400d412 <lv_draw_mask_radius+0xca>
2400d436:	e7da      	b.n	2400d3ee <lv_draw_mask_radius+0xa6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d438:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d43a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d43e:	3001      	adds	r0, #1
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
2400d440:	f9b8 a010 	ldrsh.w	sl, [r8, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d444:	3201      	adds	r2, #1
    abs_y -= rect.y1;
2400d446:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d448:	1ac0      	subs	r0, r0, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
2400d44a:	fb0a fa0a 	mul.w	sl, sl, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d44e:	1a52      	subs	r2, r2, r1
    abs_y -= rect.y1;
2400d450:	b23f      	sxth	r7, r7
    int32_t h = lv_area_get_height(&rect);
2400d452:	b200      	sxth	r0, r0
    int32_t w = lv_area_get_width(&rect);
2400d454:	b212      	sxth	r2, r2
    if(abs_y < radius || abs_y > h - radius - 1) {
2400d456:	45bb      	cmp	fp, r7
    int32_t w = lv_area_get_width(&rect);
2400d458:	9202      	str	r2, [sp, #8]
    if(abs_y < radius || abs_y > h - radius - 1) {
2400d45a:	f300 8186 	bgt.w	2400d76a <lv_draw_mask_radius+0x422>
2400d45e:	eba0 030b 	sub.w	r3, r0, fp
2400d462:	429f      	cmp	r7, r3
2400d464:	dbd5      	blt.n	2400d412 <lv_draw_mask_radius+0xca>
            y = radius - (h - abs_y) + 1;
2400d466:	1bc0      	subs	r0, r0, r7
        if(radius <= 256) sqrt_mask = 0x800;
2400d468:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
            if((y - 1) == p->y_prev) {
2400d46c:	f8d8 3014 	ldr.w	r3, [r8, #20]
            y = radius - (h - abs_y) + 1;
2400d470:	ebab 0000 	sub.w	r0, fp, r0
        if(radius <= 256) sqrt_mask = 0x800;
2400d474:	bfd4      	ite	le
2400d476:	f44f 6200 	movle.w	r2, #2048	; 0x800
2400d47a:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
2400d47e:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
2400d480:	f100 0701 	add.w	r7, r0, #1
            if((y - 1) == p->y_prev) {
2400d484:	d066      	beq.n	2400d554 <lv_draw_mask_radius+0x20c>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
2400d486:	a907      	add	r1, sp, #28
2400d488:	fb00 a010 	mls	r0, r0, r0, sl
2400d48c:	9204      	str	r2, [sp, #16]
2400d48e:	f002 fa0e 	bl	2400f8ae <_lv_sqrt>
2400d492:	9a04      	ldr	r2, [sp, #16]
2400d494:	e061      	b.n	2400d55a <lv_draw_mask_radius+0x212>
                x0.i = p->y_prev_x.i;
2400d496:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d49a:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
2400d49c:	1e7b      	subs	r3, r7, #1
2400d49e:	a907      	add	r1, sp, #28
2400d4a0:	9205      	str	r2, [sp, #20]
2400d4a2:	fb03 a013 	mls	r0, r3, r3, sl
2400d4a6:	9304      	str	r3, [sp, #16]
2400d4a8:	f002 fa01 	bl	2400f8ae <_lv_sqrt>
            p->y_prev = y - 1;
2400d4ac:	9b04      	ldr	r3, [sp, #16]
2400d4ae:	9a05      	ldr	r2, [sp, #20]
2400d4b0:	f8c8 3014 	str.w	r3, [r8, #20]
            p->y_prev_x.f = x1.f;
2400d4b4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
2400d4b8:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev_x.i = x1.i;
2400d4bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        if(x0.i == x1.i - 1 && x1.f == 0) {
2400d4c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            p->y_prev_x.i = x1.i;
2400d4c4:	f8a8 3018 	strh.w	r3, [r8, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
2400d4c8:	3901      	subs	r1, #1
2400d4ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
2400d4ce:	428b      	cmp	r3, r1
2400d4d0:	d107      	bne.n	2400d4e2 <lv_draw_mask_radius+0x19a>
2400d4d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
2400d4d6:	b921      	cbnz	r1, 2400d4e2 <lv_draw_mask_radius+0x19a>
            x1.f = 0xFF;
2400d4d8:	21ff      	movs	r1, #255	; 0xff
            x1.i--;
2400d4da:	f8ad 301c 	strh.w	r3, [sp, #28]
            x1.f = 0xFF;
2400d4de:	f8ad 101e 	strh.w	r1, [sp, #30]
        if(x0.i == x1.i) {
2400d4e2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
2400d4e6:	4299      	cmp	r1, r3
2400d4e8:	d152      	bne.n	2400d590 <lv_draw_mask_radius+0x248>
            lv_opa_t m = (x0.f + x1.f) >> 1;
2400d4ea:	f8bd 101a 	ldrh.w	r1, [sp, #26]
2400d4ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
2400d4f2:	4411      	add	r1, r2
2400d4f4:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(outer) m = 255 - m;
2400d4f8:	f1b9 0f00 	cmp.w	r9, #0
2400d4fc:	d001      	beq.n	2400d502 <lv_draw_mask_radius+0x1ba>
2400d4fe:	43c9      	mvns	r1, r1
2400d500:	b2c9      	uxtb	r1, r1
            int32_t ofs = radius - x0.i - 1;
2400d502:	ebab 0303 	sub.w	r3, fp, r3
2400d506:	1e5a      	subs	r2, r3, #1
            if(kl >= 0 && kl < len) {
2400d508:	18a7      	adds	r7, r4, r2
2400d50a:	d405      	bmi.n	2400d518 <lv_draw_mask_radius+0x1d0>
2400d50c:	42af      	cmp	r7, r5
2400d50e:	da03      	bge.n	2400d518 <lv_draw_mask_radius+0x1d0>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
2400d510:	5df0      	ldrb	r0, [r6, r7]
2400d512:	f7ff fd23 	bl	2400cf5c <mask_mix>
2400d516:	55f0      	strb	r0, [r6, r7]
            int32_t kr = k + (w - ofs - 1);
2400d518:	9b02      	ldr	r3, [sp, #8]
2400d51a:	1a9a      	subs	r2, r3, r2
2400d51c:	1e50      	subs	r0, r2, #1
            if(kr >= 0 && kr < len) {
2400d51e:	1904      	adds	r4, r0, r4
2400d520:	d405      	bmi.n	2400d52e <lv_draw_mask_radius+0x1e6>
2400d522:	42ac      	cmp	r4, r5
2400d524:	da03      	bge.n	2400d52e <lv_draw_mask_radius+0x1e6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
2400d526:	5d30      	ldrb	r0, [r6, r4]
2400d528:	f7ff fd18 	bl	2400cf5c <mask_mix>
2400d52c:	5530      	strb	r0, [r6, r4]
            if(outer == false) {
2400d52e:	f1b9 0f00 	cmp.w	r9, #0
2400d532:	d122      	bne.n	2400d57a <lv_draw_mask_radius+0x232>
                if(kl > len)  {
2400d534:	42af      	cmp	r7, r5
2400d536:	f73f af25 	bgt.w	2400d384 <lv_draw_mask_radius+0x3c>
                if(kl >= 0) {
2400d53a:	2f00      	cmp	r7, #0
2400d53c:	db03      	blt.n	2400d546 <lv_draw_mask_radius+0x1fe>
                    _lv_memset_00(&mask_buf[0], kl);
2400d53e:	4639      	mov	r1, r7
2400d540:	4630      	mov	r0, r6
2400d542:	f002 fc5d 	bl	2400fe00 <_lv_memset_00>
                if(kr < 0) {
2400d546:	1c60      	adds	r0, r4, #1
2400d548:	f53f af1c 	bmi.w	2400d384 <lv_draw_mask_radius+0x3c>
                if(kr <= len) {
2400d54c:	42a8      	cmp	r0, r5
2400d54e:	f73f af60 	bgt.w	2400d412 <lv_draw_mask_radius+0xca>
2400d552:	e74b      	b.n	2400d3ec <lv_draw_mask_radius+0xa4>
                x1.i = p->y_prev_x.i;
2400d554:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d558:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
2400d55a:	a906      	add	r1, sp, #24
2400d55c:	fb07 a017 	mls	r0, r7, r7, sl
2400d560:	9204      	str	r2, [sp, #16]
2400d562:	f002 f9a4 	bl	2400f8ae <_lv_sqrt>
            p->y_prev_x.f = x0.f;
2400d566:	f8bd 301a 	ldrh.w	r3, [sp, #26]
            p->y_prev_x.i = x0.i;
2400d56a:	9a04      	ldr	r2, [sp, #16]
            p->y_prev_x.f = x0.f;
2400d56c:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev = y;
2400d570:	f8c8 7014 	str.w	r7, [r8, #20]
            p->y_prev_x.i = x0.i;
2400d574:	f8bd 3018 	ldrh.w	r3, [sp, #24]
2400d578:	e7a2      	b.n	2400d4c0 <lv_draw_mask_radius+0x178>
                kl++;
2400d57a:	1c78      	adds	r0, r7, #1
                if(len_tmp + first > len) len_tmp = len - first;
2400d57c:	42ac      	cmp	r4, r5
2400d57e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
2400d582:	bfd4      	ite	le
2400d584:	1a21      	suble	r1, r4, r0
                if(len_tmp + first > len) len_tmp = len - first;
2400d586:	1a29      	subgt	r1, r5, r0
                if(first < len && len_tmp >= 0) {
2400d588:	42a8      	cmp	r0, r5
2400d58a:	f6bf af42 	bge.w	2400d412 <lv_draw_mask_radius+0xca>
2400d58e:	e750      	b.n	2400d432 <lv_draw_mask_radius+0xea>
            int32_t ofs = radius - (x0.i + 1);
2400d590:	3301      	adds	r3, #1
            int32_t kr = k + (w - ofs - 1);
2400d592:	9902      	ldr	r1, [sp, #8]
            int32_t ofs = radius - (x0.i + 1);
2400d594:	ebab 0303 	sub.w	r3, fp, r3
            int32_t kl = k + ofs;
2400d598:	eb04 0803 	add.w	r8, r4, r3
            int32_t kr = k + (w - ofs - 1);
2400d59c:	1acb      	subs	r3, r1, r3
2400d59e:	3b01      	subs	r3, #1
2400d5a0:	441c      	add	r4, r3
            if(outer) {
2400d5a2:	f1b9 0f00 	cmp.w	r9, #0
2400d5a6:	d010      	beq.n	2400d5ca <lv_draw_mask_radius+0x282>
                int32_t first = kl + 1;
2400d5a8:	f108 0001 	add.w	r0, r8, #1
                if(len_tmp + first > len) len_tmp = len - first;
2400d5ac:	42a5      	cmp	r5, r4
2400d5ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
2400d5b2:	bfac      	ite	ge
2400d5b4:	1a21      	subge	r1, r4, r0
                if(len_tmp + first > len) len_tmp = len - first;
2400d5b6:	1a29      	sublt	r1, r5, r0
                if(first < len && len_tmp >= 0) {
2400d5b8:	42a8      	cmp	r0, r5
2400d5ba:	da06      	bge.n	2400d5ca <lv_draw_mask_radius+0x282>
2400d5bc:	2900      	cmp	r1, #0
2400d5be:	db04      	blt.n	2400d5ca <lv_draw_mask_radius+0x282>
                    _lv_memset_00(&mask_buf[first], len_tmp);
2400d5c0:	4430      	add	r0, r6
2400d5c2:	9202      	str	r2, [sp, #8]
2400d5c4:	f002 fc1c 	bl	2400fe00 <_lv_memset_00>
2400d5c8:	9a02      	ldr	r2, [sp, #8]
            uint32_t i = x0.i + 1;
2400d5ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
2400d5ce:	a908      	add	r1, sp, #32
2400d5d0:	9204      	str	r2, [sp, #16]
2400d5d2:	fb03 a013 	mls	r0, r3, r3, sl
            uint32_t i = x0.i + 1;
2400d5d6:	f103 0b01 	add.w	fp, r3, #1
2400d5da:	9302      	str	r3, [sp, #8]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
2400d5dc:	f002 f967 	bl	2400f8ae <_lv_sqrt>
            if(y_prev.f == 0) {
2400d5e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
2400d5e4:	9a04      	ldr	r2, [sp, #16]
2400d5e6:	b939      	cbnz	r1, 2400d5f8 <lv_draw_mask_radius+0x2b0>
                y_prev.i--;
2400d5e8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
2400d5ec:	3901      	subs	r1, #1
2400d5ee:	f8ad 1020 	strh.w	r1, [sp, #32]
                y_prev.f = 0xFF;
2400d5f2:	21ff      	movs	r1, #255	; 0xff
2400d5f4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
2400d5f8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
2400d5fc:	42b9      	cmp	r1, r7
2400d5fe:	db2f      	blt.n	2400d660 <lv_draw_mask_radius+0x318>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
2400d600:	a909      	add	r1, sp, #36	; 0x24
2400d602:	fb0b a01b 	mls	r0, fp, fp, sl
2400d606:	f002 f952 	bl	2400f8ae <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
2400d60a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
2400d60e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
2400d612:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
2400d616:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
2400d61a:	4359      	muls	r1, r3
2400d61c:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(outer) m = 255 - m;
2400d620:	f1b9 0f00 	cmp.w	r9, #0
2400d624:	d101      	bne.n	2400d62a <lv_draw_mask_radius+0x2e2>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
2400d626:	43c9      	mvns	r1, r1
2400d628:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
2400d62a:	f1b8 0f00 	cmp.w	r8, #0
2400d62e:	db07      	blt.n	2400d640 <lv_draw_mask_radius+0x2f8>
2400d630:	4545      	cmp	r5, r8
2400d632:	dd05      	ble.n	2400d640 <lv_draw_mask_radius+0x2f8>
2400d634:	f816 0008 	ldrb.w	r0, [r6, r8]
2400d638:	f7ff fc90 	bl	2400cf5c <mask_mix>
2400d63c:	f806 0008 	strb.w	r0, [r6, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
2400d640:	2c00      	cmp	r4, #0
2400d642:	db05      	blt.n	2400d650 <lv_draw_mask_radius+0x308>
2400d644:	42a5      	cmp	r5, r4
2400d646:	dd03      	ble.n	2400d650 <lv_draw_mask_radius+0x308>
2400d648:	5d30      	ldrb	r0, [r6, r4]
2400d64a:	f7ff fc87 	bl	2400cf5c <mask_mix>
2400d64e:	5530      	strb	r0, [r6, r4]
                i++;
2400d650:	9b02      	ldr	r3, [sp, #8]
                kl--;
2400d652:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
2400d656:	3401      	adds	r4, #1
                y_prev.f = y_next.f;
2400d658:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                i++;
2400d65c:	f103 0b02 	add.w	fp, r3, #2
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
2400d660:	f8bd 2020 	ldrh.w	r2, [sp, #32]
2400d664:	2000      	movs	r0, #0
            for(; i <= x1.i; i++) {
2400d666:	f8bd 701c 	ldrh.w	r7, [sp, #28]
2400d66a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
2400d66e:	0112      	lsls	r2, r2, #4
            for(; i <= x1.i; i++) {
2400d670:	455f      	cmp	r7, fp
2400d672:	d242      	bcs.n	2400d6fa <lv_draw_mask_radius+0x3b2>
2400d674:	b138      	cbz	r0, 2400d686 <lv_draw_mask_radius+0x33e>
2400d676:	9b01      	ldr	r3, [sp, #4]
2400d678:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
2400d67c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
2400d680:	9b03      	ldr	r3, [sp, #12]
2400d682:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            if(y_prev.f) {
2400d686:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
2400d68a:	b1fb      	cbz	r3, 2400d6cc <lv_draw_mask_radius+0x384>
                m = (y_prev.f * x1.f) >> 9;
2400d68c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
2400d690:	4359      	muls	r1, r3
2400d692:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(outer) m = 255 - m;
2400d696:	f1b9 0f00 	cmp.w	r9, #0
2400d69a:	d001      	beq.n	2400d6a0 <lv_draw_mask_radius+0x358>
2400d69c:	43c9      	mvns	r1, r1
2400d69e:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
2400d6a0:	f1b8 0f00 	cmp.w	r8, #0
2400d6a4:	db07      	blt.n	2400d6b6 <lv_draw_mask_radius+0x36e>
2400d6a6:	4545      	cmp	r5, r8
2400d6a8:	dd05      	ble.n	2400d6b6 <lv_draw_mask_radius+0x36e>
2400d6aa:	f816 0008 	ldrb.w	r0, [r6, r8]
2400d6ae:	f7ff fc55 	bl	2400cf5c <mask_mix>
2400d6b2:	f806 0008 	strb.w	r0, [r6, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
2400d6b6:	2c00      	cmp	r4, #0
2400d6b8:	db05      	blt.n	2400d6c6 <lv_draw_mask_radius+0x37e>
2400d6ba:	42a5      	cmp	r5, r4
2400d6bc:	dd03      	ble.n	2400d6c6 <lv_draw_mask_radius+0x37e>
2400d6be:	5d30      	ldrb	r0, [r6, r4]
2400d6c0:	f7ff fc4c 	bl	2400cf5c <mask_mix>
2400d6c4:	5530      	strb	r0, [r6, r4]
                kl--;
2400d6c6:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
2400d6ca:	3401      	adds	r4, #1
            if(outer == 0) {
2400d6cc:	f1b9 0f00 	cmp.w	r9, #0
2400d6d0:	f47f ae9f 	bne.w	2400d412 <lv_draw_mask_radius+0xca>
                kl++;
2400d6d4:	f108 0101 	add.w	r1, r8, #1
                if(kl > len) {
2400d6d8:	428d      	cmp	r5, r1
2400d6da:	f6ff ae53 	blt.w	2400d384 <lv_draw_mask_radius+0x3c>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
2400d6de:	2900      	cmp	r1, #0
2400d6e0:	db02      	blt.n	2400d6e8 <lv_draw_mask_radius+0x3a0>
2400d6e2:	4630      	mov	r0, r6
2400d6e4:	f002 fb8c 	bl	2400fe00 <_lv_memset_00>
                if(kr < 0) {
2400d6e8:	2c00      	cmp	r4, #0
2400d6ea:	f6ff ae4b 	blt.w	2400d384 <lv_draw_mask_radius+0x3c>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
2400d6ee:	42a5      	cmp	r5, r4
2400d6f0:	f77f ae8f 	ble.w	2400d412 <lv_draw_mask_radius+0xca>
2400d6f4:	1b29      	subs	r1, r5, r4
2400d6f6:	1930      	adds	r0, r6, r4
2400d6f8:	e67a      	b.n	2400d3f0 <lv_draw_mask_radius+0xa8>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
2400d6fa:	f3c1 1c0f 	ubfx	ip, r1, #4, #16
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
2400d6fe:	fb0b ae1b 	mls	lr, fp, fp, sl
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
2400d702:	4494      	add	ip, r2
    uint32_t raw2 = raw * raw;
2400d704:	fb0c f00c 	mul.w	r0, ip, ip

    int32_t d = x - raw2;
2400d708:	ebc0 200e 	rsb	r0, r0, lr, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
2400d70c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
2400d710:	fb90 f0fe 	sdiv	r0, r0, lr
2400d714:	4460      	add	r0, ip

    q->i = d >> 4;
2400d716:	f3c0 130f 	ubfx	r3, r0, #4, #16
    q->f = (d & 0xF) << 4;
2400d71a:	0100      	lsls	r0, r0, #4
    q->i = d >> 4;
2400d71c:	9303      	str	r3, [sp, #12]
    q->f = (d & 0xF) << 4;
2400d71e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
2400d722:	4419      	add	r1, r3
    q->f = (d & 0xF) << 4;
2400d724:	9301      	str	r3, [sp, #4]
                m = (y_prev.f + y_next.f) >> 1;
2400d726:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
2400d72a:	f1b9 0f00 	cmp.w	r9, #0
2400d72e:	d001      	beq.n	2400d734 <lv_draw_mask_radius+0x3ec>
2400d730:	43c9      	mvns	r1, r1
2400d732:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
2400d734:	f1b8 0f00 	cmp.w	r8, #0
2400d738:	db07      	blt.n	2400d74a <lv_draw_mask_radius+0x402>
2400d73a:	4545      	cmp	r5, r8
2400d73c:	dd05      	ble.n	2400d74a <lv_draw_mask_radius+0x402>
2400d73e:	f816 0008 	ldrb.w	r0, [r6, r8]
2400d742:	f7ff fc0b 	bl	2400cf5c <mask_mix>
2400d746:	f806 0008 	strb.w	r0, [r6, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
2400d74a:	2c00      	cmp	r4, #0
2400d74c:	db05      	blt.n	2400d75a <lv_draw_mask_radius+0x412>
2400d74e:	42a5      	cmp	r5, r4
2400d750:	dd03      	ble.n	2400d75a <lv_draw_mask_radius+0x412>
2400d752:	5d30      	ldrb	r0, [r6, r4]
2400d754:	f7ff fc02 	bl	2400cf5c <mask_mix>
2400d758:	5530      	strb	r0, [r6, r4]
                kl--;
2400d75a:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
2400d75e:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
2400d760:	f10b 0b01 	add.w	fp, fp, #1
                y_prev.f = y_next.f;
2400d764:	9901      	ldr	r1, [sp, #4]
            for(; i <= x1.i; i++) {
2400d766:	2001      	movs	r0, #1
2400d768:	e782      	b.n	2400d670 <lv_draw_mask_radius+0x328>
        if(radius <= 256) sqrt_mask = 0x800;
2400d76a:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
            y = radius - abs_y;
2400d76e:	ebab 0707 	sub.w	r7, fp, r7
            if(y == p->y_prev) {
2400d772:	f8d8 3014 	ldr.w	r3, [r8, #20]
        if(radius <= 256) sqrt_mask = 0x800;
2400d776:	bfd4      	ite	le
2400d778:	f44f 6200 	movle.w	r2, #2048	; 0x800
2400d77c:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if(y == p->y_prev) {
2400d780:	42bb      	cmp	r3, r7
2400d782:	f43f ae88 	beq.w	2400d496 <lv_draw_mask_radius+0x14e>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
2400d786:	a906      	add	r1, sp, #24
2400d788:	fb07 a017 	mls	r0, r7, r7, sl
2400d78c:	9204      	str	r2, [sp, #16]
2400d78e:	f002 f88e 	bl	2400f8ae <_lv_sqrt>
2400d792:	9a04      	ldr	r2, [sp, #16]
2400d794:	e682      	b.n	2400d49c <lv_draw_mask_radius+0x154>
	...

2400d798 <lv_draw_mask_add>:
{
2400d798:	b570      	push	{r4, r5, r6, lr}
2400d79a:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
2400d79c:	4c08      	ldr	r4, [pc, #32]	; (2400d7c0 <lv_draw_mask_add+0x28>)
2400d79e:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
2400d7a2:	b2da      	uxtb	r2, r3
2400d7a4:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
2400d7a8:	b12e      	cbz	r6, 2400d7b6 <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
2400d7aa:	3301      	adds	r3, #1
2400d7ac:	2b10      	cmp	r3, #16
2400d7ae:	d1f6      	bne.n	2400d79e <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
2400d7b0:	f04f 30ff 	mov.w	r0, #4294967295
}
2400d7b4:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
2400d7b6:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    return i;
2400d7ba:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
2400d7bc:	6069      	str	r1, [r5, #4]
    return i;
2400d7be:	e7f9      	b.n	2400d7b4 <lv_draw_mask_add+0x1c>
2400d7c0:	2402db2c 	.word	0x2402db2c

2400d7c4 <lv_draw_mask_apply>:
{
2400d7c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
2400d7c8:	4607      	mov	r7, r0
2400d7ca:	4688      	mov	r8, r1
2400d7cc:	4691      	mov	r9, r2
2400d7ce:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
2400d7d0:	4e0b      	ldr	r6, [pc, #44]	; (2400d800 <lv_draw_mask_apply+0x3c>)
    bool changed = false;
2400d7d2:	2400      	movs	r4, #0
    while(m->param) {
2400d7d4:	6835      	ldr	r5, [r6, #0]
2400d7d6:	b925      	cbnz	r5, 2400d7e2 <lv_draw_mask_apply+0x1e>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
2400d7d8:	3401      	adds	r4, #1
2400d7da:	b2e0      	uxtb	r0, r4
}
2400d7dc:	b002      	add	sp, #8
2400d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
2400d7e2:	9500      	str	r5, [sp, #0]
2400d7e4:	4653      	mov	r3, sl
2400d7e6:	682d      	ldr	r5, [r5, #0]
2400d7e8:	464a      	mov	r2, r9
2400d7ea:	4641      	mov	r1, r8
2400d7ec:	4638      	mov	r0, r7
2400d7ee:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
2400d7f0:	2800      	cmp	r0, #0
2400d7f2:	d0f3      	beq.n	2400d7dc <lv_draw_mask_apply+0x18>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
2400d7f4:	2802      	cmp	r0, #2
        m++;
2400d7f6:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
2400d7fa:	bf08      	it	eq
2400d7fc:	2401      	moveq	r4, #1
        m++;
2400d7fe:	e7e9      	b.n	2400d7d4 <lv_draw_mask_apply+0x10>
2400d800:	2402db2c 	.word	0x2402db2c

2400d804 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
2400d804:	1c43      	adds	r3, r0, #1
2400d806:	f04f 0200 	mov.w	r2, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
2400d80a:	bf17      	itett	ne
2400d80c:	4b06      	ldrne	r3, [pc, #24]	; (2400d828 <lv_draw_mask_remove_id+0x24>)
    void * p = NULL;
2400d80e:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
2400d810:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
2400d814:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
2400d818:	bf18      	it	ne
2400d81a:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
}
2400d81e:	4608      	mov	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
2400d820:	bf18      	it	ne
2400d822:	605a      	strne	r2, [r3, #4]
}
2400d824:	4770      	bx	lr
2400d826:	bf00      	nop
2400d828:	2402db2c 	.word	0x2402db2c

2400d82c <lv_draw_mask_remove_custom>:
{
2400d82c:	2200      	movs	r2, #0
2400d82e:	4b08      	ldr	r3, [pc, #32]	; (2400d850 <lv_draw_mask_remove_custom+0x24>)
2400d830:	b530      	push	{r4, r5, lr}
    void * p = NULL;
2400d832:	4611      	mov	r1, r2
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
2400d834:	4614      	mov	r4, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
2400d836:	685d      	ldr	r5, [r3, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
2400d838:	3201      	adds	r2, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
2400d83a:	4285      	cmp	r5, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
2400d83c:	bf04      	itt	eq
2400d83e:	6819      	ldreq	r1, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
2400d840:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
2400d844:	2a10      	cmp	r2, #16
2400d846:	f103 0308 	add.w	r3, r3, #8
2400d84a:	d1f4      	bne.n	2400d836 <lv_draw_mask_remove_custom+0xa>
}
2400d84c:	4608      	mov	r0, r1
2400d84e:	bd30      	pop	{r4, r5, pc}
2400d850:	2402db2c 	.word	0x2402db2c

2400d854 <lv_draw_mask_get_cnt>:
{
2400d854:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
2400d856:	4a05      	ldr	r2, [pc, #20]	; (2400d86c <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
2400d858:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
2400d85a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
2400d85e:	b109      	cbz	r1, 2400d864 <lv_draw_mask_get_cnt+0x10>
2400d860:	3001      	adds	r0, #1
2400d862:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
2400d864:	3301      	adds	r3, #1
2400d866:	2b10      	cmp	r3, #16
2400d868:	d1f7      	bne.n	2400d85a <lv_draw_mask_get_cnt+0x6>
}
2400d86a:	4770      	bx	lr
2400d86c:	2402db2c 	.word	0x2402db2c

2400d870 <lv_draw_mask_line_points_init>:
{
2400d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400d874:	4615      	mov	r5, r2
2400d876:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
2400d87a:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
2400d87c:	212c      	movs	r1, #44	; 0x2c
{
2400d87e:	4604      	mov	r4, r0
2400d880:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
2400d882:	f002 fabd 	bl	2400fe00 <_lv_memset_00>
    if(p1y > p2y) {
2400d886:	4545      	cmp	r5, r8
2400d888:	dd05      	ble.n	2400d896 <lv_draw_mask_line_points_init+0x26>
2400d88a:	462b      	mov	r3, r5
2400d88c:	4645      	mov	r5, r8
2400d88e:	4698      	mov	r8, r3
2400d890:	4633      	mov	r3, r6
        p1x = t;
2400d892:	463e      	mov	r6, r7
        p2x = p1x;
2400d894:	461f      	mov	r7, r3
    param->cfg.side = side;
2400d896:	7c23      	ldrb	r3, [r4, #16]
2400d898:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
2400d89c:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
2400d89e:	f362 0301 	bfi	r3, r2, #0, #2
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8a2:	eba8 0205 	sub.w	r2, r8, r5
    param->origo.y = p1y;
2400d8a6:	82a5      	strh	r5, [r4, #20]
    param->cfg.side = side;
2400d8a8:	7423      	strb	r3, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8aa:	1bbb      	subs	r3, r7, r6
2400d8ac:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
2400d8b0:	4d2f      	ldr	r5, [pc, #188]	; (2400d970 <lv_draw_mask_line_points_init+0x100>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8b2:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
    param->cfg.p1.x = p1x;
2400d8b6:	8126      	strh	r6, [r4, #8]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8b8:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
    param->cfg.p2.x = p2x;
2400d8bc:	81a7      	strh	r7, [r4, #12]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8be:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    param->cfg.p2.y = p2y;
2400d8c2:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->origo.x = p1x;
2400d8c6:	8266      	strh	r6, [r4, #18]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8c8:	4288      	cmp	r0, r1
2400d8ca:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
2400d8ce:	6025      	str	r5, [r4, #0]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8d0:	bfd4      	ite	le
2400d8d2:	2000      	movle	r0, #0
2400d8d4:	2001      	movgt	r0, #1
2400d8d6:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
2400d8da:	2000      	movs	r0, #0
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
2400d8dc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if(param->flat) {
2400d8e0:	07c9      	lsls	r1, r1, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
2400d8e2:	7120      	strb	r0, [r4, #4]
    param->xy_steep = 0;
2400d8e4:	e9c4 0006 	strd	r0, r0, [r4, #24]
    if(param->flat) {
2400d8e8:	d52b      	bpl.n	2400d942 <lv_draw_mask_line_points_init+0xd2>
        if(dx) {
2400d8ea:	b133      	cbz	r3, 2400d8fa <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
2400d8ec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
2400d8f0:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
2400d8f4:	4351      	muls	r1, r2
2400d8f6:	1289      	asrs	r1, r1, #10
2400d8f8:	61e1      	str	r1, [r4, #28]
        if(dy) {
2400d8fa:	b132      	cbz	r2, 2400d90a <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
2400d8fc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
2400d900:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
2400d904:	4353      	muls	r3, r2
2400d906:	129b      	asrs	r3, r3, #10
2400d908:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
2400d90a:	69e2      	ldr	r2, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
2400d90c:	7c23      	ldrb	r3, [r4, #16]
        param->steep = param->yx_steep;
2400d90e:	6222      	str	r2, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
2400d910:	f013 0303 	ands.w	r3, r3, #3
2400d914:	d007      	beq.n	2400d926 <lv_draw_mask_line_points_init+0xb6>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
2400d916:	2b01      	cmp	r3, #1
2400d918:	d005      	beq.n	2400d926 <lv_draw_mask_line_points_init+0xb6>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
2400d91a:	2b02      	cmp	r3, #2
2400d91c:	d123      	bne.n	2400d966 <lv_draw_mask_line_points_init+0xf6>
        if(param->steep > 0) param->inv = 1;
2400d91e:	2a00      	cmp	r2, #0
2400d920:	bfd4      	ite	le
2400d922:	2300      	movle	r3, #0
2400d924:	2301      	movgt	r3, #1
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
2400d926:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
2400d92a:	2a00      	cmp	r2, #0
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
2400d92c:	f363 0141 	bfi	r1, r3, #1, #1
    param->spx = param->steep >> 2;
2400d930:	ea4f 03a2 	mov.w	r3, r2, asr #2
    if(param->steep < 0) param->spx = -param->spx;
2400d934:	bfb8      	it	lt
2400d936:	425b      	neglt	r3, r3
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
2400d938:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
2400d93c:	6263      	str	r3, [r4, #36]	; 0x24
}
2400d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
2400d942:	b132      	cbz	r2, 2400d952 <lv_draw_mask_line_points_init+0xe2>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
2400d944:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
2400d948:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
2400d94c:	4359      	muls	r1, r3
2400d94e:	1289      	asrs	r1, r1, #10
2400d950:	61a1      	str	r1, [r4, #24]
        if(dx) {
2400d952:	b133      	cbz	r3, 2400d962 <lv_draw_mask_line_points_init+0xf2>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
2400d954:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
2400d958:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
2400d95c:	4353      	muls	r3, r2
2400d95e:	129b      	asrs	r3, r3, #10
2400d960:	61e3      	str	r3, [r4, #28]
        param->steep = param->xy_steep;
2400d962:	69a2      	ldr	r2, [r4, #24]
2400d964:	e7d2      	b.n	2400d90c <lv_draw_mask_line_points_init+0x9c>
        if(param->steep > 0) param->inv = 0;
2400d966:	2a00      	cmp	r2, #0
2400d968:	bfcc      	ite	gt
2400d96a:	2300      	movgt	r3, #0
2400d96c:	2301      	movle	r3, #1
2400d96e:	e7da      	b.n	2400d926 <lv_draw_mask_line_points_init+0xb6>
2400d970:	2400cf79 	.word	0x2400cf79

2400d974 <lv_draw_mask_radius_init>:
{
2400d974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400d976:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d978:	88c8      	ldrh	r0, [r1, #6]
2400d97a:	461f      	mov	r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d97c:	888d      	ldrh	r5, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d97e:	884b      	ldrh	r3, [r1, #2]
2400d980:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d982:	3501      	adds	r5, #1
2400d984:	4616      	mov	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400d986:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400d988:	880b      	ldrh	r3, [r1, #0]
2400d98a:	1aed      	subs	r5, r5, r3
    int32_t short_side = LV_MATH_MIN(w, h);
2400d98c:	b200      	sxth	r0, r0
2400d98e:	b22d      	sxth	r5, r5
2400d990:	42a8      	cmp	r0, r5
2400d992:	bfa8      	it	ge
2400d994:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
2400d996:	1043      	asrs	r3, r0, #1
2400d998:	ebb2 0f60 	cmp.w	r2, r0, asr #1
    lv_area_copy(&param->cfg.rect, rect);
2400d99c:	f104 0008 	add.w	r0, r4, #8
    if(radius > short_side >> 1) radius = short_side >> 1;
2400d9a0:	bfc8      	it	gt
2400d9a2:	b21e      	sxthgt	r6, r3
    lv_area_copy(&param->cfg.rect, rect);
2400d9a4:	f7ff fcc6 	bl	2400d334 <lv_area_copy>
    param->cfg.outer = inv ? 1 : 0;
2400d9a8:	7ca3      	ldrb	r3, [r4, #18]
    param->y_prev_x.i = 0;
2400d9aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->cfg.radius = radius;
2400d9ae:	8226      	strh	r6, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
2400d9b0:	f367 0300 	bfi	r3, r7, #0, #1
2400d9b4:	74a3      	strb	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
2400d9b6:	4b04      	ldr	r3, [pc, #16]	; (2400d9c8 <lv_draw_mask_radius_init+0x54>)
2400d9b8:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
2400d9ba:	2302      	movs	r3, #2
2400d9bc:	7123      	strb	r3, [r4, #4]
    param->y_prev_x.i = 0;
2400d9be:	2300      	movs	r3, #0
2400d9c0:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
2400d9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d9c6:	bf00      	nop
2400d9c8:	2400d349 	.word	0x2400d349

2400d9cc <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
2400d9cc:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
2400d9ce:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
2400d9d2:	fb04 f301 	mul.w	r3, r4, r1
    if(i <= min) return dsc->bg_color;
2400d9d6:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
2400d9da:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
2400d9de:	dc01      	bgt.n	2400d9e4 <grad_get+0x18>
2400d9e0:	8840      	ldrh	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
2400d9e2:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
2400d9e4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
2400d9e8:	fb01 f603 	mul.w	r6, r1, r3
    if(i >= max) return dsc->bg_grad_color;
2400d9ec:	ebb2 2f26 	cmp.w	r2, r6, asr #8
2400d9f0:	db01      	blt.n	2400d9f6 <grad_get+0x2a>
2400d9f2:	8880      	ldrh	r0, [r0, #4]
2400d9f4:	e7f5      	b.n	2400d9e2 <grad_get+0x16>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
2400d9f6:	1b1b      	subs	r3, r3, r4
    i -= min;
2400d9f8:	1b52      	subs	r2, r2, r5
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400d9fa:	7906      	ldrb	r6, [r0, #4]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400d9fc:	f248 0481 	movw	r4, #32897	; 0x8081
    d = (s * d) >> 8;
2400da00:	4359      	muls	r1, r3
    lv_opa_t mix = (i * 255) / d;
2400da02:	b212      	sxth	r2, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da04:	f006 061f 	and.w	r6, r6, #31
    d = (s * d) >> 8;
2400da08:	120b      	asrs	r3, r1, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400da0a:	8841      	ldrh	r1, [r0, #2]
    lv_opa_t mix = (i * 255) / d;
2400da0c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
2400da10:	f3c1 1145 	ubfx	r1, r1, #5, #6
2400da14:	fb92 f2f3 	sdiv	r2, r2, r3
2400da18:	b2d2      	uxtb	r2, r2
2400da1a:	8883      	ldrh	r3, [r0, #4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400da1c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400da20:	f3c3 1345 	ubfx	r3, r3, #5, #6
2400da24:	4369      	muls	r1, r5
2400da26:	fb02 1103 	mla	r1, r2, r3, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da2a:	7883      	ldrb	r3, [r0, #2]
2400da2c:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400da30:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da32:	436b      	muls	r3, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400da34:	4361      	muls	r1, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da36:	fb02 3306 	mla	r3, r2, r6, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400da3a:	7946      	ldrb	r6, [r0, #5]
2400da3c:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da40:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400da42:	08f6      	lsrs	r6, r6, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400da44:	4363      	muls	r3, r4
2400da46:	f3c3 53c4 	ubfx	r3, r3, #23, #5
2400da4a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400da4e:	78c1      	ldrb	r1, [r0, #3]
2400da50:	08c9      	lsrs	r1, r1, #3
2400da52:	4369      	muls	r1, r5
2400da54:	fb02 1206 	mla	r2, r2, r6, r1
2400da58:	3280      	adds	r2, #128	; 0x80
2400da5a:	4362      	muls	r2, r4
2400da5c:	0dd2      	lsrs	r2, r2, #23
2400da5e:	ea43 20c2 	orr.w	r0, r3, r2, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
2400da62:	e7be      	b.n	2400d9e2 <grad_get+0x16>

2400da64 <lv_draw_rect_dsc_init>:
{
2400da64:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
2400da66:	2154      	movs	r1, #84	; 0x54
{
2400da68:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
2400da6a:	f002 f9c9 	bl	2400fe00 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
2400da6e:	4b0d      	ldr	r3, [pc, #52]	; (2400daa4 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_grad_color = LV_COLOR_BLACK;
2400da70:	2200      	movs	r2, #0
    dsc->bg_color = LV_COLOR_WHITE;
2400da72:	881b      	ldrh	r3, [r3, #0]
    dsc->bg_grad_color = LV_COLOR_BLACK;
2400da74:	80a2      	strh	r2, [r4, #4]
    dsc->bg_color = LV_COLOR_WHITE;
2400da76:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color_stop = 0xFF;
2400da78:	23ff      	movs	r3, #255	; 0xff
    dsc->border_color = LV_COLOR_BLACK;
2400da7a:	81e2      	strh	r2, [r4, #14]
    dsc->value_color = LV_COLOR_BLACK;
2400da7c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
2400da80:	8422      	strh	r2, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
2400da82:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
2400da84:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
2400da86:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
2400da88:	7523      	strb	r3, [r4, #20]
    dsc->pattern_recolor = LV_COLOR_BLACK;
2400da8a:	86a2      	strh	r2, [r4, #52]	; 0x34
    dsc->pattern_opa = LV_OPA_COVER;
2400da8c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
2400da90:	4a05      	ldr	r2, [pc, #20]	; (2400daa8 <lv_draw_rect_dsc_init+0x44>)
    dsc->value_opa = LV_OPA_COVER;
2400da92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->shadow_opa = LV_OPA_COVER;
2400da96:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
2400da9a:	230f      	movs	r3, #15
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
2400da9c:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
2400da9e:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->border_side = LV_BORDER_SIDE_FULL;
2400daa0:	8263      	strh	r3, [r4, #18]
}
2400daa2:	bd10      	pop	{r4, pc}
2400daa4:	9001acc0 	.word	0x9001acc0
2400daa8:	2401a5e8 	.word	0x2401a5e8

2400daac <lv_draw_rect>:
{
2400daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400dab0:	4616      	mov	r6, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dab2:	88c2      	ldrh	r2, [r0, #6]
2400dab4:	8845      	ldrh	r5, [r0, #2]
2400dab6:	4683      	mov	fp, r0
2400dab8:	1c53      	adds	r3, r2, #1
2400daba:	460c      	mov	r4, r1
2400dabc:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
2400dabe:	b21b      	sxth	r3, r3
2400dac0:	2b00      	cmp	r3, #0
{
2400dac2:	ed2d 8b02 	vpush	{d8}
2400dac6:	b0a9      	sub	sp, #164	; 0xa4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
2400dac8:	f340 8213 	ble.w	2400def2 <lv_draw_rect+0x446>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dacc:	8887      	ldrh	r7, [r0, #4]
2400dace:	f8b0 c000 	ldrh.w	ip, [r0]
2400dad2:	1c7b      	adds	r3, r7, #1
2400dad4:	eba3 030c 	sub.w	r3, r3, ip
2400dad8:	b21b      	sxth	r3, r3
2400dada:	2b00      	cmp	r3, #0
2400dadc:	f340 8209 	ble.w	2400def2 <lv_draw_rect+0x446>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
2400dae0:	7b33      	ldrb	r3, [r6, #12]
2400dae2:	2b02      	cmp	r3, #2
2400dae4:	9305      	str	r3, [sp, #20]
2400dae6:	f240 80a1 	bls.w	2400dc2c <lv_draw_rect+0x180>
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
2400daea:	ab14      	add	r3, sp, #80	; 0x50
2400daec:	6800      	ldr	r0, [r0, #0]
2400daee:	f8db 1004 	ldr.w	r1, [fp, #4]
2400daf2:	c303      	stmia	r3!, {r0, r1}
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
2400daf4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
2400daf8:	2b01      	cmp	r3, #1
2400dafa:	dd1a      	ble.n	2400db32 <lv_draw_rect+0x86>
2400dafc:	7d33      	ldrb	r3, [r6, #20]
2400dafe:	2bfc      	cmp	r3, #252	; 0xfc
2400db00:	d917      	bls.n	2400db32 <lv_draw_rect+0x86>
2400db02:	f9b6 3000 	ldrsh.w	r3, [r6]
2400db06:	b1a3      	cbz	r3, 2400db32 <lv_draw_rect+0x86>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
2400db08:	8a73      	ldrh	r3, [r6, #18]
2400db0a:	f3c3 0180 	ubfx	r1, r3, #2, #1
2400db0e:	448c      	add	ip, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
2400db10:	f3c3 0140 	ubfx	r1, r3, #1, #1
2400db14:	440d      	add	r5, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
2400db16:	f3c3 01c0 	ubfx	r1, r3, #3, #1
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
2400db1a:	f003 0301 	and.w	r3, r3, #1
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
2400db1e:	f8ad c050 	strh.w	ip, [sp, #80]	; 0x50
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
2400db22:	1a7f      	subs	r7, r7, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
2400db24:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
2400db28:	1ad2      	subs	r2, r2, r3
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
2400db2a:	f8ad 7054 	strh.w	r7, [sp, #84]	; 0x54
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
2400db2e:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
2400db32:	9b05      	ldr	r3, [sp, #20]
2400db34:	2bfe      	cmp	r3, #254	; 0xfe
2400db36:	bf28      	it	cs
2400db38:	23ff      	movcs	r3, #255	; 0xff
2400db3a:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400db3c:	f7fc fa9c 	bl	2400a078 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400db40:	f001 f998 	bl	2400ee74 <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
2400db44:	4622      	mov	r2, r4
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400db46:	9006      	str	r0, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
2400db48:	a914      	add	r1, sp, #80	; 0x50
2400db4a:	a816      	add	r0, sp, #88	; 0x58
2400db4c:	f001 fb01 	bl	2400f152 <_lv_area_intersect>
    if(is_common == false) return;
2400db50:	2800      	cmp	r0, #0
2400db52:	d06b      	beq.n	2400dc2c <lv_draw_rect+0x180>
    draw_area.x1 -= disp_area->x1;
2400db54:	9b06      	ldr	r3, [sp, #24]
2400db56:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
2400db5a:	8a1a      	ldrh	r2, [r3, #16]
2400db5c:	1a8b      	subs	r3, r1, r2
2400db5e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
2400db62:	9b06      	ldr	r3, [sp, #24]
2400db64:	8a58      	ldrh	r0, [r3, #18]
2400db66:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400db6a:	1a1b      	subs	r3, r3, r0
2400db6c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
2400db70:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
2400db74:	1a9a      	subs	r2, r3, r2
2400db76:	3301      	adds	r3, #1
2400db78:	1a5b      	subs	r3, r3, r1
2400db7a:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
2400db7e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
2400db82:	b21b      	sxth	r3, r3
2400db84:	1a12      	subs	r2, r2, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400db86:	4618      	mov	r0, r3
2400db88:	ee08 3a90 	vmov	s17, r3
    draw_area.y2 -= disp_area->y1;
2400db8c:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400db90:	f002 f8a8 	bl	2400fce4 <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
2400db94:	88b3      	ldrh	r3, [r6, #4]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400db96:	4680      	mov	r8, r0
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
2400db98:	79b5      	ldrb	r5, [r6, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
2400db9a:	8872      	ldrh	r2, [r6, #2]
2400db9c:	429a      	cmp	r2, r3
2400db9e:	bf08      	it	eq
2400dba0:	2500      	moveq	r5, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
2400dba2:	f7ff fe57 	bl	2400d854 <lv_draw_mask_get_cnt>
2400dba6:	900e      	str	r0, [sp, #56]	; 0x38
2400dba8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
2400dbac:	930f      	str	r3, [sp, #60]	; 0x3c
    if(other_mask_cnt) simple_mode = false;
2400dbae:	2b00      	cmp	r3, #0
2400dbb0:	f040 81a4 	bne.w	2400defc <lv_draw_rect+0x450>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
2400dbb4:	1eab      	subs	r3, r5, #2
2400dbb6:	bf18      	it	ne
2400dbb8:	2301      	movne	r3, #1
2400dbba:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
    if(other_mask_cnt) simple_mode = false;
2400dbbe:	9308      	str	r3, [sp, #32]
2400dbc0:	3701      	adds	r7, #1
2400dbc2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dbc6:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dbca:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dbcc:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
2400dbd0:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dbd2:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dbd4:	1a9b      	subs	r3, r3, r2
    int32_t rout = dsc->radius;
2400dbd6:	f9b6 2000 	ldrsh.w	r2, [r6]
    int32_t coords_h = lv_area_get_height(&coords_bg);
2400dbda:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
2400dbdc:	42bb      	cmp	r3, r7
2400dbde:	bfa8      	it	ge
2400dbe0:	463b      	movge	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
2400dbe2:	105b      	asrs	r3, r3, #1
2400dbe4:	4293      	cmp	r3, r2
2400dbe6:	bfa8      	it	ge
2400dbe8:	4613      	movge	r3, r2
2400dbea:	469a      	mov	sl, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
2400dbec:	9b08      	ldr	r3, [sp, #32]
2400dbee:	2b00      	cmp	r3, #0
2400dbf0:	f000 8186 	beq.w	2400df00 <lv_draw_rect+0x454>
2400dbf4:	f1ba 0f00 	cmp.w	sl, #0
2400dbf8:	f040 8182 	bne.w	2400df00 <lv_draw_rect+0x454>
2400dbfc:	2d00      	cmp	r5, #0
2400dbfe:	f040 8227 	bne.w	2400e050 <lv_draw_rect+0x5a4>
        _lv_blend_fill(clip, &coords_bg,
2400dc02:	7b73      	ldrb	r3, [r6, #13]
2400dc04:	a914      	add	r1, sp, #80	; 0x50
2400dc06:	4620      	mov	r0, r4
2400dc08:	9302      	str	r3, [sp, #8]
2400dc0a:	9b05      	ldr	r3, [sp, #20]
2400dc0c:	9301      	str	r3, [sp, #4]
2400dc0e:	2301      	movs	r3, #1
2400dc10:	9300      	str	r3, [sp, #0]
2400dc12:	462b      	mov	r3, r5
2400dc14:	8872      	ldrh	r2, [r6, #2]
2400dc16:	f7fd f901 	bl	2400ae1c <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
2400dc1a:	f04f 33ff 	mov.w	r3, #4294967295
2400dc1e:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_remove_id(mask_rout_id);
2400dc20:	980b      	ldr	r0, [sp, #44]	; 0x2c
2400dc22:	f7ff fdef 	bl	2400d804 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
2400dc26:	4640      	mov	r0, r8
2400dc28:	f001 fef4 	bl	2400fa14 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
2400dc2c:	7d33      	ldrb	r3, [r6, #20]
2400dc2e:	2b02      	cmp	r3, #2
2400dc30:	9305      	str	r3, [sp, #20]
2400dc32:	f240 815e 	bls.w	2400def2 <lv_draw_rect+0x446>
    if(dsc->border_width == 0) return;
2400dc36:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
2400dc3a:	2b00      	cmp	r3, #0
2400dc3c:	f000 8159 	beq.w	2400def2 <lv_draw_rect+0x446>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
2400dc40:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
2400dc44:	2900      	cmp	r1, #0
2400dc46:	f000 8154 	beq.w	2400def2 <lv_draw_rect+0x446>
    if(dsc->border_post) return;
2400dc4a:	7db2      	ldrb	r2, [r6, #22]
2400dc4c:	07d0      	lsls	r0, r2, #31
2400dc4e:	f100 8150 	bmi.w	2400def2 <lv_draw_rect+0x446>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dc52:	f8bb 8004 	ldrh.w	r8, [fp, #4]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
2400dc56:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dc58:	f8bb 0006 	ldrh.w	r0, [fp, #6]
2400dc5c:	fa1f fe81 	uxth.w	lr, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dc60:	f8bb 9000 	ldrh.w	r9, [fp]
2400dc64:	f108 0501 	add.w	r5, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dc68:	f8bb c002 	ldrh.w	ip, [fp, #2]
2400dc6c:	1c42      	adds	r2, r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dc6e:	eba5 0509 	sub.w	r5, r5, r9
    int32_t rout = dsc->radius;
2400dc72:	f9b6 7000 	ldrsh.w	r7, [r6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dc76:	eba2 020c 	sub.w	r2, r2, ip
    int32_t coords_w = lv_area_get_width(coords);
2400dc7a:	b22d      	sxth	r5, r5
    int32_t coords_h = lv_area_get_height(coords);
2400dc7c:	b212      	sxth	r2, r2
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
2400dc7e:	4295      	cmp	r5, r2
2400dc80:	bfa8      	it	ge
2400dc82:	4615      	movge	r5, r2
    if(rout > short_side >> 1) rout = short_side >> 1;
2400dc84:	106d      	asrs	r5, r5, #1
2400dc86:	42bd      	cmp	r5, r7
2400dc88:	bfa8      	it	ge
2400dc8a:	463d      	movge	r5, r7
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
2400dc8c:	074a      	lsls	r2, r1, #29
2400dc8e:	bf57      	itett	pl
2400dc90:	195a      	addpl	r2, r3, r5
2400dc92:	461a      	movmi	r2, r3
2400dc94:	4252      	negpl	r2, r2
2400dc96:	b292      	uxthpl	r2, r2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
2400dc98:	f01e 0f08 	tst.w	lr, #8
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
2400dc9c:	4491      	add	r9, r2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
2400dc9e:	bf0a      	itet	eq
2400dca0:	195a      	addeq	r2, r3, r5
2400dca2:	461a      	movne	r2, r3
2400dca4:	4252      	negeq	r2, r2
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
2400dca6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
2400dcaa:	bf08      	it	eq
2400dcac:	b292      	uxtheq	r2, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
2400dcae:	f01e 0f02 	tst.w	lr, #2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
2400dcb2:	eba8 0802 	sub.w	r8, r8, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
2400dcb6:	bf0a      	itet	eq
2400dcb8:	195a      	addeq	r2, r3, r5
2400dcba:	461a      	movne	r2, r3
2400dcbc:	4252      	negeq	r2, r2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
2400dcbe:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
2400dcc2:	bf08      	it	eq
2400dcc4:	b292      	uxtheq	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
2400dcc6:	f01e 0f01 	tst.w	lr, #1
2400dcca:	bf08      	it	eq
2400dccc:	195b      	addeq	r3, r3, r5
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
2400dcce:	4494      	add	ip, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
2400dcd0:	bf08      	it	eq
2400dcd2:	425b      	negeq	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
2400dcd4:	f8ad c04a 	strh.w	ip, [sp, #74]	; 0x4a
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
2400dcd8:	bf08      	it	eq
2400dcda:	b29b      	uxtheq	r3, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
2400dcdc:	290f      	cmp	r1, #15
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
2400dcde:	eba0 0003 	sub.w	r0, r0, r3
2400dce2:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
2400dce6:	f040 83d1 	bne.w	2400e48c <lv_draw_rect+0x9e0>
                         dsc->border_blend_mode);
2400dcea:	7d73      	ldrb	r3, [r6, #21]
2400dcec:	f8b6 800e 	ldrh.w	r8, [r6, #14]
2400dcf0:	9306      	str	r3, [sp, #24]
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
2400dcf2:	f7ff fdaf 	bl	2400d854 <lv_draw_mask_get_cnt>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dcf6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
2400dcfa:	f9bb 9000 	ldrsh.w	r9, [fp]
2400dcfe:	9307      	str	r3, [sp, #28]
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
2400dd00:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dd04:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
2400dd08:	9308      	str	r3, [sp, #32]
2400dd0a:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
2400dd0e:	900b      	str	r0, [sp, #44]	; 0x2c
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400dd10:	f7fc f9b2 	bl	2400a078 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400dd14:	f001 f8ae 	bl	2400ee74 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
2400dd18:	4622      	mov	r2, r4
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400dd1a:	4682      	mov	sl, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
2400dd1c:	4659      	mov	r1, fp
2400dd1e:	a814      	add	r0, sp, #80	; 0x50
2400dd20:	f001 fa17 	bl	2400f152 <_lv_area_intersect>
    if(is_common == false) return;
2400dd24:	2800      	cmp	r0, #0
2400dd26:	f000 80e4 	beq.w	2400def2 <lv_draw_rect+0x446>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dd2a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dd2e:	3501      	adds	r5, #1
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
2400dd30:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dd34:	930c      	str	r3, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400dd36:	1bad      	subs	r5, r5, r6
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
2400dd38:	9b08      	ldr	r3, [sp, #32]
2400dd3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    int32_t coords_out_h = lv_area_get_height(area_outer);
2400dd3c:	b22d      	sxth	r5, r5
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
2400dd3e:	b29b      	uxth	r3, r3
    draw_area.x2 -= disp_area->x1;
2400dd40:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
2400dd44:	1a9a      	subs	r2, r3, r2
2400dd46:	930a      	str	r3, [sp, #40]	; 0x28
2400dd48:	b293      	uxth	r3, r2
2400dd4a:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400dd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400dd4e:	3301      	adds	r3, #1
2400dd50:	eba3 0309 	sub.w	r3, r3, r9
    int32_t coords_out_w = lv_area_get_width(area_outer);
2400dd54:	b21b      	sxth	r3, r3
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
2400dd56:	42ab      	cmp	r3, r5
2400dd58:	bfa8      	it	ge
2400dd5a:	462b      	movge	r3, r5
        if(rout > short_side >> 1) rout = short_side >> 1;
2400dd5c:	105b      	asrs	r3, r3, #1
2400dd5e:	42bb      	cmp	r3, r7
2400dd60:	bfa8      	it	ge
2400dd62:	463b      	movge	r3, r7
2400dd64:	9307      	str	r3, [sp, #28]
        rin = rout - border_width;
2400dd66:	b213      	sxth	r3, r2
    draw_area.x1 -= disp_area->x1;
2400dd68:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
        rin = rout - border_width;
2400dd6c:	9308      	str	r3, [sp, #32]
    draw_area.x1 -= disp_area->x1;
2400dd6e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
2400dd72:	1ad1      	subs	r1, r2, r3
    draw_area.x2 -= disp_area->x1;
2400dd74:	1af3      	subs	r3, r6, r3
2400dd76:	3601      	adds	r6, #1
    draw_area.x1 -= disp_area->x1;
2400dd78:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    draw_area.y1 -= disp_area->y1;
2400dd7c:	f8ba 1012 	ldrh.w	r1, [sl, #18]
2400dd80:	1ab6      	subs	r6, r6, r2
    draw_area.x2 -= disp_area->x1;
2400dd82:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    draw_area.y2 -= disp_area->y1;
2400dd86:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    draw_area.y1 -= disp_area->y1;
2400dd8a:	1a40      	subs	r0, r0, r1
2400dd8c:	b236      	sxth	r6, r6
    draw_area.y2 -= disp_area->y1;
2400dd8e:	1a5b      	subs	r3, r3, r1
    draw_area.y1 -= disp_area->y1;
2400dd90:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
2400dd94:	a912      	add	r1, sp, #72	; 0x48
2400dd96:	a81a      	add	r0, sp, #104	; 0x68
    draw_area.y2 -= disp_area->y1;
2400dd98:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        rin = rout - border_width;
2400dd9c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
2400dda0:	1a9a      	subs	r2, r3, r2
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
2400dda2:	2301      	movs	r3, #1
2400dda4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2400dda8:	b212      	sxth	r2, r2
2400ddaa:	f7ff fde3 	bl	2400d974 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
2400ddae:	2100      	movs	r1, #0
2400ddb0:	a81a      	add	r0, sp, #104	; 0x68
2400ddb2:	f7ff fcf1 	bl	2400d798 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
2400ddb6:	2300      	movs	r3, #0
2400ddb8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
2400ddbc:	4659      	mov	r1, fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
2400ddbe:	ee08 0a10 	vmov	s16, r0
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
2400ddc2:	a821      	add	r0, sp, #132	; 0x84
2400ddc4:	f7ff fdd6 	bl	2400d974 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
2400ddc8:	2100      	movs	r1, #0
2400ddca:	a821      	add	r0, sp, #132	; 0x84
2400ddcc:	f7ff fce4 	bl	2400d798 <lv_draw_mask_add>
2400ddd0:	ee08 0a90 	vmov	s17, r0

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400ddd4:	4630      	mov	r0, r6
2400ddd6:	f001 ff85 	bl	2400fce4 <_lv_mem_buf_get>
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
2400ddda:	f9ba c012 	ldrsh.w	ip, [sl, #18]

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400ddde:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400dde2:	4605      	mov	r5, r0
        fill_area.x2 = area_outer->x2;
2400dde4:	f9bb e004 	ldrsh.w	lr, [fp, #4]
        fill_area.x1 = area_outer->x1;
2400dde8:	f9bb 0000 	ldrsh.w	r0, [fp]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
2400ddec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
2400ddf0:	4293      	cmp	r3, r2
2400ddf2:	bfb4      	ite	lt
2400ddf4:	4613      	movlt	r3, r2
2400ddf6:	9b07      	ldrge	r3, [sp, #28]
    if(simple_mode) {
2400ddf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
2400ddfa:	bfb8      	it	lt
2400ddfc:	f103 33ff 	addlt.w	r3, r3, #4294967295
2400de00:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400de02:	eb0c 0307 	add.w	r3, ip, r7
2400de06:	b21b      	sxth	r3, r3
    if(simple_mode) {
2400de08:	2a00      	cmp	r2, #0
2400de0a:	f040 830a 	bne.w	2400e422 <lv_draw_rect+0x976>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
2400de0e:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
2400de12:	9909      	ldr	r1, [sp, #36]	; 0x24
2400de14:	eba2 020c 	sub.w	r2, r2, ip
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400de18:	f8bd 901c 	ldrh.w	r9, [sp, #28]
        fill_area.x1 = area_outer->x1;
2400de1c:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
2400de20:	440a      	add	r2, r1
        fill_area.x2 = area_outer->x2;
2400de22:	f8ad e05c 	strh.w	lr, [sp, #92]	; 0x5c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400de26:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
2400de2a:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.y2 = fill_area.y1;
2400de2c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
2400de30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2400de32:	42bb      	cmp	r3, r7
2400de34:	f280 8201 	bge.w	2400e23a <lv_draw_rect+0x78e>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
2400de38:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
2400de3c:	f9bb 7006 	ldrsh.w	r7, [fp, #6]
2400de40:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400de42:	1aff      	subs	r7, r7, r3
            _lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400de44:	f8bd 901c 	ldrh.w	r9, [sp, #28]
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
2400de48:	1abf      	subs	r7, r7, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
2400de4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
2400de4c:	42ba      	cmp	r2, r7
2400de4e:	bfa4      	itt	ge
2400de50:	4617      	movge	r7, r2
2400de52:	3701      	addge	r7, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
2400de54:	443b      	add	r3, r7
2400de56:	b21b      	sxth	r3, r3
2400de58:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        fill_area.y2 = fill_area.y1;
2400de5c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
2400de60:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
2400de64:	429f      	cmp	r7, r3
2400de66:	f340 8262 	ble.w	2400e32e <lv_draw_rect+0x882>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
2400de6a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400de6e:	2601      	movs	r6, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
2400de70:	9a09      	ldr	r2, [sp, #36]	; 0x24
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400de72:	a916      	add	r1, sp, #88	; 0x58
        fill_area.y1 = area_outer->y1 + corner_size + 1;
2400de74:	3301      	adds	r3, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400de76:	4620      	mov	r0, r4
2400de78:	9600      	str	r6, [sp, #0]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
2400de7a:	fa13 f382 	uxtah	r3, r3, r2
2400de7e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
2400de82:	f8bb 3006 	ldrh.w	r3, [fp, #6]
2400de86:	3b01      	subs	r3, #1
2400de88:	1a9b      	subs	r3, r3, r2
        fill_area.x2 = area_outer->x1 + border_width - 1;
2400de8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        fill_area.y2 = area_outer->y2 - corner_size - 1;
2400de8c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        fill_area.x1 = area_outer->x1;
2400de90:	f9bb 3000 	ldrsh.w	r3, [fp]
2400de94:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        fill_area.x2 = area_outer->x1 + border_width - 1;
2400de98:	3b01      	subs	r3, #1
2400de9a:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400de9c:	9b06      	ldr	r3, [sp, #24]
2400de9e:	9302      	str	r3, [sp, #8]
2400dea0:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
2400dea2:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400dea6:	4642      	mov	r2, r8
2400dea8:	9301      	str	r3, [sp, #4]
2400deaa:	2300      	movs	r3, #0
2400deac:	f7fc ffb6 	bl	2400ae1c <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
2400deb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400deb2:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400deb6:	4620      	mov	r0, r4
        fill_area.x1 = area_outer->x2 - border_width + 1;
2400deb8:	4433      	add	r3, r6
2400deba:	990a      	ldr	r1, [sp, #40]	; 0x28
        fill_area.x2 = area_outer->x2;
2400debc:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        fill_area.x1 = area_outer->x2 - border_width + 1;
2400dec0:	4413      	add	r3, r2
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400dec2:	4642      	mov	r2, r8
        fill_area.x1 = area_outer->x2 - border_width + 1;
2400dec4:	1a5b      	subs	r3, r3, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400dec6:	a916      	add	r1, sp, #88	; 0x58
        fill_area.x1 = area_outer->x2 - border_width + 1;
2400dec8:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400decc:	9b06      	ldr	r3, [sp, #24]
2400dece:	9302      	str	r3, [sp, #8]
2400ded0:	9b05      	ldr	r3, [sp, #20]
2400ded2:	e9cd 6300 	strd	r6, r3, [sp]
2400ded6:	2300      	movs	r3, #0
2400ded8:	f7fc ffa0 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
2400dedc:	ee18 0a10 	vmov	r0, s16
2400dee0:	f7ff fc90 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
2400dee4:	ee18 0a90 	vmov	r0, s17
2400dee8:	f7ff fc8c 	bl	2400d804 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
2400deec:	4628      	mov	r0, r5
        _lv_mem_buf_release(mask_buf);
2400deee:	f001 fd91 	bl	2400fa14 <_lv_mem_buf_release>
}
2400def2:	b029      	add	sp, #164	; 0xa4
2400def4:	ecbd 8b02 	vpop	{d8}
2400def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
2400defc:	2300      	movs	r3, #0
2400defe:	e65c      	b.n	2400dbba <lv_draw_rect+0x10e>
        if(rout > 0) {
2400df00:	f1ba 0f00 	cmp.w	sl, #0
2400df04:	f340 80a4 	ble.w	2400e050 <lv_draw_rect+0x5a4>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
2400df08:	2300      	movs	r3, #0
2400df0a:	4652      	mov	r2, sl
2400df0c:	a914      	add	r1, sp, #80	; 0x50
2400df0e:	a821      	add	r0, sp, #132	; 0x84
2400df10:	f7ff fd30 	bl	2400d974 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
2400df14:	2100      	movs	r1, #0
2400df16:	a821      	add	r0, sp, #132	; 0x84
2400df18:	f7ff fc3e 	bl	2400d798 <lv_draw_mask_add>
2400df1c:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_color_t grad_color = dsc->bg_color;
2400df1e:	8873      	ldrh	r3, [r6, #2]
        if(grad_dir == LV_GRAD_DIR_HOR) {
2400df20:	2d02      	cmp	r5, #2
        lv_color_t grad_color = dsc->bg_color;
2400df22:	ee08 3a10 	vmov	s16, r3
        if(grad_dir == LV_GRAD_DIR_HOR) {
2400df26:	f040 80a3 	bne.w	2400e070 <lv_draw_rect+0x5c4>
            for(i = 0; i < coords_w; i++) {
2400df2a:	f04f 0900 	mov.w	r9, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
2400df2e:	0078      	lsls	r0, r7, #1
2400df30:	f001 fed8 	bl	2400fce4 <_lv_mem_buf_get>
2400df34:	9009      	str	r0, [sp, #36]	; 0x24
            for(i = 0; i < coords_w; i++) {
2400df36:	454f      	cmp	r7, r9
2400df38:	f300 808e 	bgt.w	2400e058 <lv_draw_rect+0x5ac>
2400df3c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
2400df40:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
2400df44:	1c53      	adds	r3, r2, #1
        fill_area.x2 = coords_bg.x2;
2400df46:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400df4a:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
2400df4e:	1a5b      	subs	r3, r3, r1
        fill_area.x1 = coords_bg.x1;
2400df50:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400df54:	9207      	str	r2, [sp, #28]
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
2400df56:	b21b      	sxth	r3, r3
2400df58:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
2400df5c:	930d      	str	r3, [sp, #52]	; 0x34
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400df5e:	9b06      	ldr	r3, [sp, #24]
2400df60:	8a5b      	ldrh	r3, [r3, #18]
2400df62:	4413      	add	r3, r2
                fill_area2.x2 = coords_bg.x1 + rout - 1;
2400df64:	fa1f f28a 	uxth.w	r2, sl
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400df68:	b21b      	sxth	r3, r3
                fill_area2.x2 = coords_bg.x1 + rout - 1;
2400df6a:	920c      	str	r2, [sp, #48]	; 0x30
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400df6c:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400df70:	9a07      	ldr	r2, [sp, #28]
        fill_area.y2 = fill_area.y1;
2400df72:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400df76:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
2400df7a:	429a      	cmp	r2, r3
2400df7c:	dd7b      	ble.n	2400e076 <lv_draw_rect+0x5ca>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
2400df7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
2400df80:	432b      	orrs	r3, r5
2400df82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
2400df86:	d15b      	bne.n	2400e040 <lv_draw_rect+0x594>
2400df88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
2400df8a:	2a32      	cmp	r2, #50	; 0x32
2400df8c:	dd58      	ble.n	2400e040 <lv_draw_rect+0x594>
            fill_area.x1 = coords_bg.x1 + rout;
2400df8e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
2400df92:	fa1f f78a 	uxth.w	r7, sl
            _lv_blend_fill(clip, &fill_area,
2400df96:	a918      	add	r1, sp, #96	; 0x60
2400df98:	4620      	mov	r0, r4
            fill_area.x1 = coords_bg.x1 + rout;
2400df9a:	fa12 f28a 	uxtah	r2, r2, sl
            _lv_blend_fill(clip, &fill_area,
2400df9e:	2501      	movs	r5, #1
            fill_area.x1 = coords_bg.x1 + rout;
2400dfa0:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            fill_area.x2 = coords_bg.x2 - rout;
2400dfa4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
2400dfa8:	1bd2      	subs	r2, r2, r7
2400dfaa:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            fill_area.y1 = coords_bg.y1;
2400dfae:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
2400dfb2:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            fill_area.y2 = coords_bg.y1 + rout;
2400dfb6:	443a      	add	r2, r7
2400dfb8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            _lv_blend_fill(clip, &fill_area,
2400dfbc:	7b72      	ldrb	r2, [r6, #13]
2400dfbe:	9202      	str	r2, [sp, #8]
2400dfc0:	9a05      	ldr	r2, [sp, #20]
2400dfc2:	9201      	str	r2, [sp, #4]
2400dfc4:	2201      	movs	r2, #1
2400dfc6:	9200      	str	r2, [sp, #0]
2400dfc8:	8872      	ldrh	r2, [r6, #2]
2400dfca:	f7fc ff27 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
2400dfce:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
2400dfd2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
            _lv_blend_fill(clip, &fill_area,
2400dfd6:	4620      	mov	r0, r4
            fill_area.y1 = coords_bg.y2 - rout;
2400dfd8:	1bca      	subs	r2, r1, r7
            fill_area.y2 = coords_bg.y2;
2400dfda:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            _lv_blend_fill(clip, &fill_area,
2400dfde:	a918      	add	r1, sp, #96	; 0x60
            fill_area.y1 = coords_bg.y2 - rout;
2400dfe0:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
2400dfe2:	429a      	cmp	r2, r3
            fill_area.y1 = coords_bg.y2 - rout;
2400dfe4:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
2400dfe8:	bfdc      	itt	le
2400dfea:	3301      	addle	r3, #1
2400dfec:	f8ad 3062 	strhle.w	r3, [sp, #98]	; 0x62
            _lv_blend_fill(clip, &fill_area,
2400dff0:	7b73      	ldrb	r3, [r6, #13]
2400dff2:	9500      	str	r5, [sp, #0]
2400dff4:	9302      	str	r3, [sp, #8]
2400dff6:	9b05      	ldr	r3, [sp, #20]
2400dff8:	9301      	str	r3, [sp, #4]
2400dffa:	2300      	movs	r3, #0
2400dffc:	8872      	ldrh	r2, [r6, #2]
2400dffe:	f7fc ff0d 	bl	2400ae1c <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
2400e002:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            _lv_blend_fill(clip, &fill_area,
2400e006:	a918      	add	r1, sp, #96	; 0x60
2400e008:	4620      	mov	r0, r4
            fill_area.x1 = coords_bg.x1;
2400e00a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            fill_area.x2 = coords_bg.x2;
2400e00e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
2400e012:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            fill_area.y1 = coords_bg.y1 + rout + 1;
2400e016:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
2400e01a:	442b      	add	r3, r5
2400e01c:	443b      	add	r3, r7
2400e01e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2 = coords_bg.y2 - rout - 1;
2400e022:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
2400e026:	3b01      	subs	r3, #1
2400e028:	1bdb      	subs	r3, r3, r7
2400e02a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            _lv_blend_fill(clip, &fill_area,
2400e02e:	7b73      	ldrb	r3, [r6, #13]
2400e030:	9302      	str	r3, [sp, #8]
2400e032:	9b05      	ldr	r3, [sp, #20]
2400e034:	e9cd 5300 	strd	r5, r3, [sp]
2400e038:	2300      	movs	r3, #0
2400e03a:	8872      	ldrh	r2, [r6, #2]
2400e03c:	f7fc feee 	bl	2400ae1c <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
2400e040:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400e042:	2b00      	cmp	r3, #0
2400e044:	f43f adec 	beq.w	2400dc20 <lv_draw_rect+0x174>
2400e048:	4618      	mov	r0, r3
2400e04a:	f001 fce3 	bl	2400fa14 <_lv_mem_buf_release>
2400e04e:	e5e7      	b.n	2400dc20 <lv_draw_rect+0x174>
    int16_t mask_rout_id = LV_MASK_ID_INV;
2400e050:	f04f 33ff 	mov.w	r3, #4294967295
2400e054:	930b      	str	r3, [sp, #44]	; 0x2c
2400e056:	e762      	b.n	2400df1e <lv_draw_rect+0x472>
                grad_map[i] = grad_get(dsc, coords_w, i);
2400e058:	fa0f f289 	sxth.w	r2, r9
2400e05c:	4639      	mov	r1, r7
2400e05e:	4630      	mov	r0, r6
2400e060:	f7ff fcb4 	bl	2400d9cc <grad_get>
2400e064:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400e066:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
            for(i = 0; i < coords_w; i++) {
2400e06a:	f109 0901 	add.w	r9, r9, #1
2400e06e:	e762      	b.n	2400df36 <lv_draw_rect+0x48a>
        lv_color_t * grad_map = NULL;
2400e070:	2300      	movs	r3, #0
2400e072:	9309      	str	r3, [sp, #36]	; 0x24
2400e074:	e762      	b.n	2400df3c <lv_draw_rect+0x490>
            int32_t y = h + vdb->area.y1;
2400e076:	9b06      	ldr	r3, [sp, #24]
2400e078:	9a07      	ldr	r2, [sp, #28]
2400e07a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
2400e07e:	4413      	add	r3, r2
2400e080:	930a      	str	r3, [sp, #40]	; 0x28
            if(y > coords_bg.y1 + rout + 1 &&
2400e082:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
2400e086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2400e088:	4453      	add	r3, sl
2400e08a:	3301      	adds	r3, #1
2400e08c:	429a      	cmp	r2, r3
2400e08e:	dd0a      	ble.n	2400e0a6 <lv_draw_rect+0x5fa>
               y < coords_bg.y2 - rout - 1) {
2400e090:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
2400e094:	eba3 030a 	sub.w	r3, r3, sl
2400e098:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
2400e09a:	429a      	cmp	r2, r3
2400e09c:	da03      	bge.n	2400e0a6 <lv_draw_rect+0x5fa>
                if(simple_mode == false) {
2400e09e:	9b08      	ldr	r3, [sp, #32]
2400e0a0:	2b00      	cmp	r3, #0
2400e0a2:	f040 82e2 	bne.w	2400e66a <lv_draw_rect+0xbbe>
                _lv_memset(mask_buf, opa, draw_area_w);
2400e0a6:	ee18 2a90 	vmov	r2, s17
2400e0aa:	9905      	ldr	r1, [sp, #20]
2400e0ac:	4640      	mov	r0, r8
2400e0ae:	f001 fe79 	bl	2400fda4 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e0b2:	9b06      	ldr	r3, [sp, #24]
2400e0b4:	4640      	mov	r0, r8
2400e0b6:	8a5a      	ldrh	r2, [r3, #18]
2400e0b8:	9b07      	ldr	r3, [sp, #28]
2400e0ba:	441a      	add	r2, r3
2400e0bc:	9b06      	ldr	r3, [sp, #24]
2400e0be:	8a19      	ldrh	r1, [r3, #16]
2400e0c0:	b212      	sxth	r2, r2
2400e0c2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
2400e0c6:	4419      	add	r1, r3
2400e0c8:	ee18 3a90 	vmov	r3, s17
2400e0cc:	b209      	sxth	r1, r1
2400e0ce:	f7ff fb79 	bl	2400d7c4 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
2400e0d2:	9b05      	ldr	r3, [sp, #20]
2400e0d4:	2802      	cmp	r0, #2
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e0d6:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
2400e0d8:	bf14      	ite	ne
2400e0da:	4699      	movne	r9, r3
2400e0dc:	f04f 09ff 	moveq.w	r9, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
2400e0e0:	2d01      	cmp	r5, #1
2400e0e2:	d11b      	bne.n	2400e11c <lv_draw_rect+0x670>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400e0e4:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
2400e0e8:	4630      	mov	r0, r6
2400e0ea:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
2400e0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2400e0f0:	3101      	adds	r1, #1
2400e0f2:	1ad2      	subs	r2, r2, r3
2400e0f4:	1ac9      	subs	r1, r1, r3
2400e0f6:	b212      	sxth	r2, r2
2400e0f8:	b209      	sxth	r1, r1
2400e0fa:	f7ff fc67 	bl	2400d9cc <grad_get>
            if(simple_mode && split &&
2400e0fe:	9b08      	ldr	r3, [sp, #32]
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
2400e100:	ee08 0a10 	vmov	s16, r0
            if(simple_mode && split &&
2400e104:	b973      	cbnz	r3, 2400e124 <lv_draw_rect+0x678>
                    _lv_blend_fill(clip, &fill_area,
2400e106:	7b73      	ldrb	r3, [r6, #13]
2400e108:	ee18 2a10 	vmov	r2, s16
2400e10c:	a918      	add	r1, sp, #96	; 0x60
2400e10e:	9700      	str	r7, [sp, #0]
2400e110:	e9cd 9301 	strd	r9, r3, [sp, #4]
2400e114:	4643      	mov	r3, r8
2400e116:	e068      	b.n	2400e1ea <lv_draw_rect+0x73e>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
2400e118:	462f      	mov	r7, r5
2400e11a:	e7e3      	b.n	2400e0e4 <lv_draw_rect+0x638>
            if(simple_mode && split &&
2400e11c:	9b08      	ldr	r3, [sp, #32]
2400e11e:	2b00      	cmp	r3, #0
2400e120:	f000 82aa 	beq.w	2400e678 <lv_draw_rect+0xbcc>
2400e124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2400e126:	2b32      	cmp	r3, #50	; 0x32
2400e128:	dd63      	ble.n	2400e1f2 <lv_draw_rect+0x746>
               (y < coords_bg.y1 + rout + 1 ||
2400e12a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
            if(simple_mode && split &&
2400e12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
               (y < coords_bg.y1 + rout + 1 ||
2400e130:	4453      	add	r3, sl
            if(simple_mode && split &&
2400e132:	429a      	cmp	r2, r3
2400e134:	dd05      	ble.n	2400e142 <lv_draw_rect+0x696>
                y > coords_bg.y2 - rout - 1)) {
2400e136:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
2400e13a:	eba3 030a 	sub.w	r3, r3, sl
               (y < coords_bg.y1 + rout + 1 ||
2400e13e:	429a      	cmp	r2, r3
2400e140:	db57      	blt.n	2400e1f2 <lv_draw_rect+0x746>
                fill_area2.x1 = coords_bg.x1;
2400e142:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
                _lv_blend_fill(clip, &fill_area2,
2400e146:	a91a      	add	r1, sp, #104	; 0x68
                fill_area2.x2 = coords_bg.x1 + rout - 1;
2400e148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                _lv_blend_fill(clip, &fill_area2,
2400e14a:	4620      	mov	r0, r4
                fill_area2.x1 = coords_bg.x1;
2400e14c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = coords_bg.x1 + rout - 1;
2400e150:	3b01      	subs	r3, #1
2400e152:	4413      	add	r3, r2
                _lv_blend_fill(clip, &fill_area2,
2400e154:	ee18 2a10 	vmov	r2, s16
                fill_area2.x2 = coords_bg.x1 + rout - 1;
2400e158:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                fill_area2.y1 = fill_area.y1;
2400e15c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
2400e160:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                fill_area2.y2 = fill_area.y2;
2400e164:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
2400e168:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                _lv_blend_fill(clip, &fill_area2,
2400e16c:	7b73      	ldrb	r3, [r6, #13]
2400e16e:	9700      	str	r7, [sp, #0]
2400e170:	e9cd 9301 	strd	r9, r3, [sp, #4]
2400e174:	4643      	mov	r3, r8
2400e176:	f7fc fe51 	bl	2400ae1c <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
2400e17a:	2d01      	cmp	r5, #1
2400e17c:	d116      	bne.n	2400e1ac <lv_draw_rect+0x700>
                    fill_area2.x1 = coords_bg.x1 + rout;
2400e17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    _lv_blend_fill(clip, &fill_area2,
2400e180:	a91a      	add	r1, sp, #104	; 0x68
                    fill_area2.x1 = coords_bg.x1 + rout;
2400e182:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
                    _lv_blend_fill(clip, &fill_area2,
2400e186:	4620      	mov	r0, r4
                    fill_area2.x1 = coords_bg.x1 + rout;
2400e188:	4413      	add	r3, r2
2400e18a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                    fill_area2.x2 = coords_bg.x2 - rout;
2400e18e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
2400e192:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
2400e194:	ee18 2a10 	vmov	r2, s16
                    fill_area2.x2 = coords_bg.x2 - rout;
2400e198:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                    _lv_blend_fill(clip, &fill_area2,
2400e19c:	7b73      	ldrb	r3, [r6, #13]
2400e19e:	9302      	str	r3, [sp, #8]
2400e1a0:	9b05      	ldr	r3, [sp, #20]
2400e1a2:	e9cd 5300 	strd	r5, r3, [sp]
2400e1a6:	2300      	movs	r3, #0
2400e1a8:	f7fc fe38 	bl	2400ae1c <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
2400e1ac:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
2400e1b0:	990c      	ldr	r1, [sp, #48]	; 0x30
2400e1b2:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
2400e1b4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e1b8:	eba3 030a 	sub.w	r3, r3, sl
                fill_area2.x1 = coords_bg.x2 - rout + 1;
2400e1bc:	1a52      	subs	r2, r2, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e1be:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
2400e1c2:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
2400e1c4:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e1c8:	9a06      	ldr	r2, [sp, #24]
2400e1ca:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
2400e1ce:	440a      	add	r2, r1
                _lv_blend_fill(clip, &fill_area2,
2400e1d0:	a91a      	add	r1, sp, #104	; 0x68
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e1d2:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
2400e1d4:	7b72      	ldrb	r2, [r6, #13]
2400e1d6:	9700      	str	r7, [sp, #0]
2400e1d8:	2b00      	cmp	r3, #0
2400e1da:	bfac      	ite	ge
2400e1dc:	4443      	addge	r3, r8
2400e1de:	f108 0300 	addlt.w	r3, r8, #0
2400e1e2:	e9cd 9201 	strd	r9, r2, [sp, #4]
2400e1e6:	ee18 2a10 	vmov	r2, s16
                    _lv_blend_fill(clip, &fill_area,
2400e1ea:	4620      	mov	r0, r4
2400e1ec:	f7fc fe16 	bl	2400ae1c <_lv_blend_fill>
2400e1f0:	e00b      	b.n	2400e20a <lv_draw_rect+0x75e>
                if(grad_dir == LV_GRAD_DIR_HOR) {
2400e1f2:	2d02      	cmp	r5, #2
2400e1f4:	d116      	bne.n	2400e224 <lv_draw_rect+0x778>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
2400e1f6:	7b73      	ldrb	r3, [r6, #13]
2400e1f8:	a918      	add	r1, sp, #96	; 0x60
2400e1fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400e1fc:	4620      	mov	r0, r4
2400e1fe:	9700      	str	r7, [sp, #0]
2400e200:	e9cd 9301 	strd	r9, r3, [sp, #4]
2400e204:	4643      	mov	r3, r8
2400e206:	f7fd f832 	bl	2400b26e <_lv_blend_map>
            fill_area.y1++;
2400e20a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e20e:	9a07      	ldr	r2, [sp, #28]
            fill_area.y1++;
2400e210:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e212:	3201      	adds	r2, #1
            fill_area.y1++;
2400e214:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
2400e218:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e21c:	9207      	str	r2, [sp, #28]
            fill_area.y2++;
2400e21e:	3301      	adds	r3, #1
2400e220:	b21b      	sxth	r3, r3
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e222:	e6a5      	b.n	2400df70 <lv_draw_rect+0x4c4>
                else if(grad_dir == LV_GRAD_DIR_VER) {
2400e224:	2d01      	cmp	r5, #1
2400e226:	f43f af6e 	beq.w	2400e106 <lv_draw_rect+0x65a>
                else if(other_mask_cnt != 0 || !split) {
2400e22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
2400e22c:	2b00      	cmp	r3, #0
2400e22e:	f47f af6a 	bne.w	2400e106 <lv_draw_rect+0x65a>
2400e232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2400e234:	2b32      	cmp	r3, #50	; 0x32
2400e236:	dce8      	bgt.n	2400e20a <lv_draw_rect+0x75e>
2400e238:	e765      	b.n	2400e106 <lv_draw_rect+0x65a>
            _lv_memset_ff(mask_buf, draw_area_w);
2400e23a:	4631      	mov	r1, r6
2400e23c:	4628      	mov	r0, r5
2400e23e:	f001 fe0a 	bl	2400fe56 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e242:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
2400e246:	f8ba 2012 	ldrh.w	r2, [sl, #18]
2400e24a:	4628      	mov	r0, r5
2400e24c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
2400e250:	443a      	add	r2, r7
2400e252:	4419      	add	r1, r3
2400e254:	4633      	mov	r3, r6
2400e256:	b212      	sxth	r2, r2
2400e258:	b209      	sxth	r1, r1
2400e25a:	f7ff fab3 	bl	2400d7c4 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
2400e25e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e262:	4642      	mov	r2, r8
2400e264:	a918      	add	r1, sp, #96	; 0x60
            fill_area2.y1 = fill_area.y1;
2400e266:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area2.y2 = fill_area.y2;
2400e26a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e26e:	900d      	str	r0, [sp, #52]	; 0x34
            fill_area2.y2 = fill_area.y2;
2400e270:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            fill_area2.x1 = area_outer->x1;
2400e274:	f9bb 3000 	ldrsh.w	r3, [fp]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e278:	9000      	str	r0, [sp, #0]
2400e27a:	4620      	mov	r0, r4
            fill_area2.x1 = area_outer->x1;
2400e27c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400e280:	3b01      	subs	r3, #1
2400e282:	444b      	add	r3, r9
2400e284:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e288:	9b06      	ldr	r3, [sp, #24]
2400e28a:	9302      	str	r3, [sp, #8]
2400e28c:	9b05      	ldr	r3, [sp, #20]
2400e28e:	9301      	str	r3, [sp, #4]
2400e290:	462b      	mov	r3, r5
2400e292:	f7fc fdc3 	bl	2400ae1c <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
2400e296:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
2400e29a:	9908      	ldr	r1, [sp, #32]
2400e29c:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
2400e2a0:	440b      	add	r3, r1
2400e2a2:	429a      	cmp	r2, r3
2400e2a4:	da16      	bge.n	2400e2d4 <lv_draw_rect+0x828>
                fill_area2.x1 = area_outer->x1 + rout;
2400e2a6:	f8bb 3000 	ldrh.w	r3, [fp]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400e2aa:	4642      	mov	r2, r8
2400e2ac:	a918      	add	r1, sp, #96	; 0x60
2400e2ae:	4620      	mov	r0, r4
                fill_area2.x1 = area_outer->x1 + rout;
2400e2b0:	444b      	add	r3, r9
2400e2b2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.x2 = area_outer->x2 - rout;
2400e2b6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
2400e2ba:	eba3 0309 	sub.w	r3, r3, r9
2400e2be:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400e2c2:	9b06      	ldr	r3, [sp, #24]
2400e2c4:	9302      	str	r3, [sp, #8]
2400e2c6:	9b05      	ldr	r3, [sp, #20]
2400e2c8:	9301      	str	r3, [sp, #4]
2400e2ca:	2301      	movs	r3, #1
2400e2cc:	9300      	str	r3, [sp, #0]
2400e2ce:	2300      	movs	r3, #0
2400e2d0:	f7fc fda4 	bl	2400ae1c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e2d4:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e2d8:	4620      	mov	r0, r4
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e2da:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
2400e2de:	3701      	adds	r7, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e2e0:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
2400e2e2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e2e6:	eba2 0209 	sub.w	r2, r2, r9
2400e2ea:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e2ee:	9a07      	ldr	r2, [sp, #28]
2400e2f0:	1a9b      	subs	r3, r3, r2
2400e2f2:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
2400e2f6:	3301      	adds	r3, #1
2400e2f8:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e2fa:	a918      	add	r1, sp, #96	; 0x60
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e2fc:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e2fe:	9a06      	ldr	r2, [sp, #24]
2400e300:	9202      	str	r2, [sp, #8]
2400e302:	2b00      	cmp	r3, #0
2400e304:	bfac      	ite	ge
2400e306:	18eb      	addge	r3, r5, r3
2400e308:	1c2b      	addlt	r3, r5, #0
2400e30a:	9a05      	ldr	r2, [sp, #20]
2400e30c:	9201      	str	r2, [sp, #4]
2400e30e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
2400e310:	9200      	str	r2, [sp, #0]
2400e312:	4642      	mov	r2, r8
2400e314:	f7fc fd82 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400e318:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400e31c:	3301      	adds	r3, #1
2400e31e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2++;
2400e322:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400e326:	3301      	adds	r3, #1
2400e328:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
2400e32c:	e580      	b.n	2400de30 <lv_draw_rect+0x384>
            _lv_memset_ff(mask_buf, draw_area_w);
2400e32e:	4631      	mov	r1, r6
2400e330:	4628      	mov	r0, r5
2400e332:	f001 fd90 	bl	2400fe56 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e336:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
2400e33a:	f8ba 2012 	ldrh.w	r2, [sl, #18]
2400e33e:	4628      	mov	r0, r5
2400e340:	f8ba 1010 	ldrh.w	r1, [sl, #16]
2400e344:	443a      	add	r2, r7
2400e346:	4419      	add	r1, r3
2400e348:	4633      	mov	r3, r6
2400e34a:	b212      	sxth	r2, r2
2400e34c:	b209      	sxth	r1, r1
2400e34e:	f7ff fa39 	bl	2400d7c4 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
2400e352:	f9bb 3000 	ldrsh.w	r3, [fp]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e356:	4642      	mov	r2, r8
2400e358:	a918      	add	r1, sp, #96	; 0x60
            fill_area2.x1 = area_outer->x1;
2400e35a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400e35e:	3b01      	subs	r3, #1
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e360:	900b      	str	r0, [sp, #44]	; 0x2c
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400e362:	444b      	add	r3, r9
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e364:	9000      	str	r0, [sp, #0]
2400e366:	4620      	mov	r0, r4
            fill_area2.x2 = area_outer->x1 + rout - 1;
2400e368:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            fill_area2.y1 = fill_area.y1;
2400e36c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400e370:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area2.y2 = fill_area.y2;
2400e374:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400e378:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
2400e37c:	9b06      	ldr	r3, [sp, #24]
2400e37e:	9302      	str	r3, [sp, #8]
2400e380:	9b05      	ldr	r3, [sp, #20]
2400e382:	9301      	str	r3, [sp, #4]
2400e384:	462b      	mov	r3, r5
2400e386:	f7fc fd49 	bl	2400ae1c <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
2400e38a:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
2400e38e:	9908      	ldr	r1, [sp, #32]
2400e390:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
2400e394:	1a5b      	subs	r3, r3, r1
2400e396:	429a      	cmp	r2, r3
2400e398:	dd16      	ble.n	2400e3c8 <lv_draw_rect+0x91c>
                fill_area2.x1 = area_outer->x1 + rout;
2400e39a:	f8bb 3000 	ldrh.w	r3, [fp]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400e39e:	4642      	mov	r2, r8
2400e3a0:	a918      	add	r1, sp, #96	; 0x60
2400e3a2:	4620      	mov	r0, r4
                fill_area2.x1 = area_outer->x1 + rout;
2400e3a4:	444b      	add	r3, r9
2400e3a6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.x2 = area_outer->x2 - rout;
2400e3aa:	f8bb 3004 	ldrh.w	r3, [fp, #4]
2400e3ae:	eba3 0309 	sub.w	r3, r3, r9
2400e3b2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
2400e3b6:	9b06      	ldr	r3, [sp, #24]
2400e3b8:	9302      	str	r3, [sp, #8]
2400e3ba:	9b05      	ldr	r3, [sp, #20]
2400e3bc:	9301      	str	r3, [sp, #4]
2400e3be:	2301      	movs	r3, #1
2400e3c0:	9300      	str	r3, [sp, #0]
2400e3c2:	2300      	movs	r3, #0
2400e3c4:	f7fc fd2a 	bl	2400ae1c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e3c8:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e3cc:	4620      	mov	r0, r4
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e3ce:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
2400e3d2:	3701      	adds	r7, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e3d4:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
2400e3d6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            fill_area2.x1 = area_outer->x2 - rout + 1;
2400e3da:	eba2 0209 	sub.w	r2, r2, r9
2400e3de:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e3e2:	9a07      	ldr	r2, [sp, #28]
2400e3e4:	1a9b      	subs	r3, r3, r2
2400e3e6:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
2400e3ea:	3301      	adds	r3, #1
2400e3ec:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e3ee:	a918      	add	r1, sp, #96	; 0x60
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
2400e3f0:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
2400e3f2:	9a06      	ldr	r2, [sp, #24]
2400e3f4:	9202      	str	r2, [sp, #8]
2400e3f6:	2b00      	cmp	r3, #0
2400e3f8:	bfac      	ite	ge
2400e3fa:	18eb      	addge	r3, r5, r3
2400e3fc:	1c2b      	addlt	r3, r5, #0
2400e3fe:	9a05      	ldr	r2, [sp, #20]
2400e400:	9201      	str	r2, [sp, #4]
2400e402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
2400e404:	9200      	str	r2, [sp, #0]
2400e406:	4642      	mov	r2, r8
2400e408:	f7fc fd08 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400e40c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400e410:	3301      	adds	r3, #1
2400e412:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2++;
2400e416:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400e41a:	3301      	adds	r3, #1
2400e41c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
2400e420:	e51e      	b.n	2400de60 <lv_draw_rect+0x3b4>
        fill_area.x1 = area_outer->x1;
2400e422:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
        fill_area.x2 = area_outer->x2;
2400e426:	f8ad e05c 	strh.w	lr, [sp, #92]	; 0x5c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e42a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        fill_area.y2 = fill_area.y1;
2400e42e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e432:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
2400e436:	429f      	cmp	r7, r3
2400e438:	f73f ad50 	bgt.w	2400dedc <lv_draw_rect+0x430>
            _lv_memset_ff(mask_buf, draw_area_w);
2400e43c:	4631      	mov	r1, r6
2400e43e:	4628      	mov	r0, r5
2400e440:	f001 fd09 	bl	2400fe56 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e444:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
2400e448:	f8ba 2012 	ldrh.w	r2, [sl, #18]
2400e44c:	4628      	mov	r0, r5
2400e44e:	f8ba 1010 	ldrh.w	r1, [sl, #16]
2400e452:	443a      	add	r2, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e454:	3701      	adds	r7, #1
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e456:	4419      	add	r1, r3
2400e458:	4633      	mov	r3, r6
2400e45a:	b212      	sxth	r2, r2
2400e45c:	b209      	sxth	r1, r1
2400e45e:	f7ff f9b1 	bl	2400d7c4 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
2400e462:	9b06      	ldr	r3, [sp, #24]
2400e464:	4642      	mov	r2, r8
2400e466:	a916      	add	r1, sp, #88	; 0x58
2400e468:	9302      	str	r3, [sp, #8]
2400e46a:	9b05      	ldr	r3, [sp, #20]
2400e46c:	e9cd 0300 	strd	r0, r3, [sp]
2400e470:	462b      	mov	r3, r5
2400e472:	4620      	mov	r0, r4
2400e474:	f7fc fcd2 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400e478:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
2400e47c:	3301      	adds	r3, #1
2400e47e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2++;
2400e482:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400e486:	3301      	adds	r3, #1
2400e488:	b21b      	sxth	r3, r3
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e48a:	e7d0      	b.n	2400e42e <lv_draw_rect+0x982>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
2400e48c:	9b05      	ldr	r3, [sp, #20]
2400e48e:	2bfe      	cmp	r3, #254	; 0xfe
2400e490:	bf28      	it	cs
2400e492:	23ff      	movcs	r3, #255	; 0xff
2400e494:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
2400e496:	f7fb fdef 	bl	2400a078 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400e49a:	f000 fceb 	bl	2400ee74 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
2400e49e:	4622      	mov	r2, r4
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
2400e4a0:	4681      	mov	r9, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
2400e4a2:	4659      	mov	r1, fp
2400e4a4:	a816      	add	r0, sp, #88	; 0x58
2400e4a6:	f000 fe54 	bl	2400f152 <_lv_area_intersect>
        if(is_common == false) return;
2400e4aa:	2800      	cmp	r0, #0
2400e4ac:	f43f ad21 	beq.w	2400def2 <lv_draw_rect+0x446>
        draw_area.x1 -= disp_area->x1;
2400e4b0:	f8b9 3010 	ldrh.w	r3, [r9, #16]
2400e4b4:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
        draw_area.x2 -= disp_area->x1;
2400e4b8:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
        draw_area.x1 -= disp_area->x1;
2400e4bc:	1aca      	subs	r2, r1, r3
        draw_area.y1 -= disp_area->y1;
2400e4be:	f8b9 0012 	ldrh.w	r0, [r9, #18]
        draw_area.x2 -= disp_area->x1;
2400e4c2:	1afb      	subs	r3, r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400e4c4:	3701      	adds	r7, #1
        draw_area.x1 -= disp_area->x1;
2400e4c6:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
2400e4ca:	1a7f      	subs	r7, r7, r1
        draw_area.y1 -= disp_area->y1;
2400e4cc:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
        draw_area.x2 -= disp_area->x1;
2400e4d0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        draw_area.y2 -= disp_area->y1;
2400e4d4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
2400e4d8:	b23f      	sxth	r7, r7
        draw_area.y1 -= disp_area->y1;
2400e4da:	1a12      	subs	r2, r2, r0
        draw_area.y2 -= disp_area->y1;
2400e4dc:	1a1b      	subs	r3, r3, r0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400e4de:	4638      	mov	r0, r7
        draw_area.y1 -= disp_area->y1;
2400e4e0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
        draw_area.y2 -= disp_area->y1;
2400e4e4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400e4e8:	f001 fbfc 	bl	2400fce4 <_lv_mem_buf_get>
        if(rout > 0) {
2400e4ec:	2d00      	cmp	r5, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
2400e4ee:	4682      	mov	sl, r0
        if(rout > 0) {
2400e4f0:	dd3e      	ble.n	2400e570 <lv_draw_rect+0xac4>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
2400e4f2:	2300      	movs	r3, #0
2400e4f4:	b22a      	sxth	r2, r5
2400e4f6:	4659      	mov	r1, fp
2400e4f8:	a81a      	add	r0, sp, #104	; 0x68
2400e4fa:	f7ff fa3b 	bl	2400d974 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
2400e4fe:	2100      	movs	r1, #0
2400e500:	a81a      	add	r0, sp, #104	; 0x68
2400e502:	f7ff f949 	bl	2400d798 <lv_draw_mask_add>
2400e506:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
2400e508:	8a32      	ldrh	r2, [r6, #16]
2400e50a:	2301      	movs	r3, #1
2400e50c:	a912      	add	r1, sp, #72	; 0x48
2400e50e:	a821      	add	r0, sp, #132	; 0x84
2400e510:	1aaa      	subs	r2, r5, r2
2400e512:	b212      	sxth	r2, r2
2400e514:	f7ff fa2e 	bl	2400d974 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
2400e518:	2100      	movs	r1, #0
2400e51a:	a821      	add	r0, sp, #132	; 0x84
2400e51c:	f7ff f93c 	bl	2400d798 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
2400e520:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e524:	f8b9 2012 	ldrh.w	r2, [r9, #18]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
2400e528:	ee08 0a10 	vmov	s16, r0
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e52c:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
2400e530:	429d      	cmp	r5, r3
        fill_area.x1 = coords->x1;
2400e532:	f9bb 1000 	ldrsh.w	r1, [fp]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e536:	4442      	add	r2, r8
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
2400e538:	bfb8      	it	lt
2400e53a:	f103 35ff 	addlt.w	r5, r3, #4294967295
        lv_color_t color = dsc->border_color;
2400e53e:	89f3      	ldrh	r3, [r6, #14]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e540:	b212      	sxth	r2, r2
        fill_area.x1 = coords->x1;
2400e542:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
        lv_color_t color = dsc->border_color;
2400e546:	ee08 3a90 	vmov	s17, r3
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
2400e54a:	7d73      	ldrb	r3, [r6, #21]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
2400e54c:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
2400e550:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
2400e554:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
2400e558:	9307      	str	r3, [sp, #28]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
2400e55a:	2a04      	cmp	r2, #4
        fill_area.x2 = coords->x2;
2400e55c:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
2400e560:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
2400e564:	d108      	bne.n	2400e578 <lv_draw_rect+0xacc>
2400e566:	4429      	add	r1, r5
2400e568:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        uint32_t buf_ofs = 0;
2400e56c:	2600      	movs	r6, #0
2400e56e:	e00a      	b.n	2400e586 <lv_draw_rect+0xada>
        int16_t mask_rout_id = LV_MASK_ID_INV;
2400e570:	f04f 33ff 	mov.w	r3, #4294967295
2400e574:	9306      	str	r3, [sp, #24]
2400e576:	e7c7      	b.n	2400e508 <lv_draw_rect+0xa5c>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
2400e578:	2a08      	cmp	r2, #8
2400e57a:	d1f7      	bne.n	2400e56c <lv_draw_rect+0xac0>
            fill_area.x1 = coords->x2 - corner_size;
2400e57c:	1b5e      	subs	r6, r3, r5
2400e57e:	b236      	sxth	r6, r6
2400e580:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
            buf_ofs = fill_area.x1 - coords->x1;
2400e584:	1a76      	subs	r6, r6, r1
        volatile bool top_only = false;
2400e586:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
2400e588:	2a02      	cmp	r2, #2
        volatile bool top_only = false;
2400e58a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
        volatile bool bottom_only = false;
2400e58e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
2400e592:	d11b      	bne.n	2400e5cc <lv_draw_rect+0xb20>
2400e594:	2301      	movs	r3, #1
2400e596:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
        volatile bool normal = !top_only && !bottom_only ? true : false;
2400e59a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
2400e59e:	bb13      	cbnz	r3, 2400e5e6 <lv_draw_rect+0xb3a>
2400e5a0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
2400e5a4:	f083 0301 	eor.w	r3, r3, #1
2400e5a8:	f003 0301 	and.w	r3, r3, #1
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
2400e5ac:	4456      	add	r6, sl
        volatile bool normal = !top_only && !bottom_only ? true : false;
2400e5ae:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e5b2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
2400e5b6:	4598      	cmp	r8, r3
2400e5b8:	dd17      	ble.n	2400e5ea <lv_draw_rect+0xb3e>
        lv_draw_mask_remove_id(mask_rin_id);
2400e5ba:	ee18 0a10 	vmov	r0, s16
2400e5be:	f7ff f921 	bl	2400d804 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
2400e5c2:	9806      	ldr	r0, [sp, #24]
2400e5c4:	f7ff f91e 	bl	2400d804 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
2400e5c8:	4650      	mov	r0, sl
2400e5ca:	e490      	b.n	2400deee <lv_draw_rect+0x442>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
2400e5cc:	2a01      	cmp	r2, #1
2400e5ce:	d007      	beq.n	2400e5e0 <lv_draw_rect+0xb34>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
2400e5d0:	2a03      	cmp	r2, #3
2400e5d2:	d1e2      	bne.n	2400e59a <lv_draw_rect+0xaee>
            top_only = true;
2400e5d4:	2301      	movs	r3, #1
2400e5d6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            bottom_only = true;
2400e5da:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
2400e5de:	e7dc      	b.n	2400e59a <lv_draw_rect+0xaee>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
2400e5e0:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
2400e5e4:	e7d9      	b.n	2400e59a <lv_draw_rect+0xaee>
        volatile bool normal = !top_only && !bottom_only ? true : false;
2400e5e6:	2300      	movs	r3, #0
2400e5e8:	e7de      	b.n	2400e5a8 <lv_draw_rect+0xafc>
            if(normal ||
2400e5ea:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
2400e5ee:	b98b      	cbnz	r3, 2400e614 <lv_draw_rect+0xb68>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
2400e5f0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
2400e5f4:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
            if(normal ||
2400e5f8:	b123      	cbz	r3, 2400e604 <lv_draw_rect+0xb58>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
2400e5fa:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
2400e5fe:	442b      	add	r3, r5
2400e600:	429a      	cmp	r2, r3
2400e602:	dd07      	ble.n	2400e614 <lv_draw_rect+0xb68>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
2400e604:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
2400e608:	b313      	cbz	r3, 2400e650 <lv_draw_rect+0xba4>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
2400e60a:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
2400e60e:	1b5b      	subs	r3, r3, r5
2400e610:	429a      	cmp	r2, r3
2400e612:	db1d      	blt.n	2400e650 <lv_draw_rect+0xba4>
                _lv_memset_ff(mask_buf, draw_area_w);
2400e614:	4639      	mov	r1, r7
2400e616:	4650      	mov	r0, sl
2400e618:	f001 fc1d 	bl	2400fe56 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
2400e61c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
2400e620:	f8b9 2012 	ldrh.w	r2, [r9, #18]
2400e624:	4650      	mov	r0, sl
2400e626:	f8b9 1010 	ldrh.w	r1, [r9, #16]
2400e62a:	4442      	add	r2, r8
2400e62c:	4419      	add	r1, r3
2400e62e:	463b      	mov	r3, r7
2400e630:	b212      	sxth	r2, r2
2400e632:	b209      	sxth	r1, r1
2400e634:	f7ff f8c6 	bl	2400d7c4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
2400e638:	9b07      	ldr	r3, [sp, #28]
2400e63a:	ee18 2a90 	vmov	r2, s17
2400e63e:	a918      	add	r1, sp, #96	; 0x60
2400e640:	9302      	str	r3, [sp, #8]
2400e642:	9b05      	ldr	r3, [sp, #20]
2400e644:	e9cd 0300 	strd	r0, r3, [sp]
2400e648:	4633      	mov	r3, r6
2400e64a:	4620      	mov	r0, r4
2400e64c:	f7fc fbe6 	bl	2400ae1c <_lv_blend_fill>
            fill_area.y1++;
2400e650:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e654:	f108 0801 	add.w	r8, r8, #1
            fill_area.y1++;
2400e658:	3301      	adds	r3, #1
2400e65a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
2400e65e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
2400e662:	3301      	adds	r3, #1
2400e664:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
2400e668:	e7a3      	b.n	2400e5b2 <lv_draw_rect+0xb06>
            if(grad_dir == LV_GRAD_DIR_VER) {
2400e66a:	2d01      	cmp	r5, #1
            opa2 = opa;
2400e66c:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if(grad_dir == LV_GRAD_DIR_VER) {
2400e670:	f43f ad52 	beq.w	2400e118 <lv_draw_rect+0x66c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
2400e674:	2701      	movs	r7, #1
2400e676:	e555      	b.n	2400e124 <lv_draw_rect+0x678>
                if(grad_dir == LV_GRAD_DIR_HOR) {
2400e678:	2d02      	cmp	r5, #2
2400e67a:	f47f add6 	bne.w	2400e22a <lv_draw_rect+0x77e>
2400e67e:	e5ba      	b.n	2400e1f6 <lv_draw_rect+0x74a>

2400e680 <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
2400e680:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
2400e682:	3901      	subs	r1, #1
    res->y2 = h - 1;
2400e684:	3a01      	subs	r2, #1
    res->x1 = 0;
2400e686:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
2400e688:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
2400e68a:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
2400e68c:	80c2      	strh	r2, [r0, #6]
#endif
}
2400e68e:	4770      	bx	lr

2400e690 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
2400e690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
2400e694:	f8df 911c 	ldr.w	r9, [pc, #284]	; 2400e7b4 <_lv_img_cache_open+0x124>
{
2400e698:	4605      	mov	r5, r0
2400e69a:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
2400e69c:	f8b9 4000 	ldrh.w	r4, [r9]
2400e6a0:	2c00      	cmp	r4, #0
2400e6a2:	d05d      	beq.n	2400e760 <_lv_img_cache_open+0xd0>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
2400e6a4:	4b41      	ldr	r3, [pc, #260]	; (2400e7ac <_lv_img_cache_open+0x11c>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
2400e6a6:	4842      	ldr	r0, [pc, #264]	; (2400e7b0 <_lv_img_cache_open+0x120>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
2400e6a8:	681f      	ldr	r7, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
2400e6aa:	2300      	movs	r3, #0
2400e6ac:	463a      	mov	r2, r7
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
2400e6ae:	6a11      	ldr	r1, [r2, #32]
    for(i = 0; i < entry_cnt; i++) {
2400e6b0:	3301      	adds	r3, #1
2400e6b2:	3224      	adds	r2, #36	; 0x24
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
2400e6b4:	4281      	cmp	r1, r0
    for(i = 0; i < entry_cnt; i++) {
2400e6b6:	b29b      	uxth	r3, r3
            cache[i].life -= LV_IMG_CACHE_AGING;
2400e6b8:	bfa4      	itt	ge
2400e6ba:	f101 31ff 	addge.w	r1, r1, #4294967295
2400e6be:	f842 1c04 	strge.w	r1, [r2, #-4]
    for(i = 0; i < entry_cnt; i++) {
2400e6c2:	429c      	cmp	r4, r3
2400e6c4:	d1f3      	bne.n	2400e6ae <_lv_img_cache_open+0x1e>
2400e6c6:	f04f 0800 	mov.w	r8, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
2400e6ca:	f04f 0a24 	mov.w	sl, #36	; 0x24
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
2400e6ce:	fa1f fb86 	uxth.w	fp, r6
    for(i = 0; i < entry_cnt; i++) {
2400e6d2:	f8b9 1000 	ldrh.w	r1, [r9]
2400e6d6:	fa1f f388 	uxth.w	r3, r8
2400e6da:	4299      	cmp	r1, r3
2400e6dc:	d829      	bhi.n	2400e732 <_lv_img_cache_open+0xa2>
2400e6de:	f107 0224 	add.w	r2, r7, #36	; 0x24
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
2400e6e2:	463c      	mov	r4, r7
        for(i = 1; i < entry_cnt; i++) {
2400e6e4:	2301      	movs	r3, #1
2400e6e6:	4299      	cmp	r1, r3
2400e6e8:	d848      	bhi.n	2400e77c <_lv_img_cache_open+0xec>
                cached_src = &cache[i];
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
2400e6ea:	6863      	ldr	r3, [r4, #4]
2400e6ec:	b113      	cbz	r3, 2400e6f4 <_lv_img_cache_open+0x64>
            lv_img_decoder_close(&cached_src->dec_dsc);
2400e6ee:	4620      	mov	r0, r4
2400e6f0:	f000 f99c 	bl	2400ea2c <lv_img_decoder_close>
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
        cached_src->dec_dsc.time_to_open = 0;
2400e6f4:	f04f 0800 	mov.w	r8, #0
        t_start                          = lv_tick_get();
2400e6f8:	f000 fcd0 	bl	2400f09c <lv_tick_get>
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
2400e6fc:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
2400e6fe:	4607      	mov	r7, r0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
2400e700:	4632      	mov	r2, r6
2400e702:	4620      	mov	r0, r4
        cached_src->dec_dsc.time_to_open = 0;
2400e704:	f8c4 8014 	str.w	r8, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
2400e708:	f000 f93a 	bl	2400e980 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
2400e70c:	4605      	mov	r5, r0
2400e70e:	2800      	cmp	r0, #0
2400e710:	d13d      	bne.n	2400e78e <_lv_img_cache_open+0xfe>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
2400e712:	4620      	mov	r0, r4
2400e714:	f000 f98a 	bl	2400ea2c <lv_img_decoder_close>
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
2400e718:	4620      	mov	r0, r4
2400e71a:	2120      	movs	r1, #32
2400e71c:	f001 fb70 	bl	2400fe00 <_lv_memset_00>
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
2400e720:	4620      	mov	r0, r4
2400e722:	2124      	movs	r1, #36	; 0x24
2400e724:	f001 fb6c 	bl	2400fe00 <_lv_memset_00>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
2400e728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400e72c:	6223      	str	r3, [r4, #32]
            return NULL;
2400e72e:	462c      	mov	r4, r5
2400e730:	e016      	b.n	2400e760 <_lv_img_cache_open+0xd0>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
2400e732:	fa1f f488 	uxth.w	r4, r8
2400e736:	fb0a 7404 	mla	r4, sl, r4, r7
2400e73a:	6860      	ldr	r0, [r4, #4]
2400e73c:	f7fd fb62 	bl	2400be04 <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
2400e740:	b988      	cbnz	r0, 2400e766 <_lv_img_cache_open+0xd6>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
2400e742:	6863      	ldr	r3, [r4, #4]
2400e744:	42ab      	cmp	r3, r5
2400e746:	d116      	bne.n	2400e776 <_lv_img_cache_open+0xe6>
2400e748:	8923      	ldrh	r3, [r4, #8]
2400e74a:	455b      	cmp	r3, fp
2400e74c:	d113      	bne.n	2400e776 <_lv_img_cache_open+0xe6>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
2400e74e:	6a23      	ldr	r3, [r4, #32]
2400e750:	6962      	ldr	r2, [r4, #20]
2400e752:	4413      	add	r3, r2
2400e754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400e758:	bfa8      	it	ge
2400e75a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
2400e75e:	6223      	str	r3, [r4, #32]

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
2400e760:	4620      	mov	r0, r4
2400e762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(src_type == LV_IMG_SRC_FILE) {
2400e766:	2801      	cmp	r0, #1
2400e768:	d105      	bne.n	2400e776 <_lv_img_cache_open+0xe6>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
2400e76a:	4629      	mov	r1, r5
2400e76c:	6860      	ldr	r0, [r4, #4]
2400e76e:	f00b ff17 	bl	2401a5a0 <__strcmp_veneer>
2400e772:	2800      	cmp	r0, #0
2400e774:	d0eb      	beq.n	2400e74e <_lv_img_cache_open+0xbe>
    for(i = 0; i < entry_cnt; i++) {
2400e776:	f108 0801 	add.w	r8, r8, #1
2400e77a:	e7aa      	b.n	2400e6d2 <_lv_img_cache_open+0x42>
            if(cache[i].life < cached_src->life) {
2400e77c:	6a17      	ldr	r7, [r2, #32]
        for(i = 1; i < entry_cnt; i++) {
2400e77e:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
2400e780:	6a20      	ldr	r0, [r4, #32]
        for(i = 1; i < entry_cnt; i++) {
2400e782:	b29b      	uxth	r3, r3
            if(cache[i].life < cached_src->life) {
2400e784:	4287      	cmp	r7, r0
2400e786:	bfb8      	it	lt
2400e788:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
2400e78a:	3224      	adds	r2, #36	; 0x24
2400e78c:	e7ab      	b.n	2400e6e6 <_lv_img_cache_open+0x56>
        if(cached_src->dec_dsc.time_to_open == 0) {
2400e78e:	6963      	ldr	r3, [r4, #20]
        cached_src->life = 0;
2400e790:	f8c4 8020 	str.w	r8, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
2400e794:	2b00      	cmp	r3, #0
2400e796:	d1e3      	bne.n	2400e760 <_lv_img_cache_open+0xd0>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
2400e798:	4638      	mov	r0, r7
2400e79a:	f000 fc8d 	bl	2400f0b8 <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
2400e79e:	b108      	cbz	r0, 2400e7a4 <_lv_img_cache_open+0x114>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
2400e7a0:	6160      	str	r0, [r4, #20]
2400e7a2:	e7dd      	b.n	2400e760 <_lv_img_cache_open+0xd0>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
2400e7a4:	2301      	movs	r3, #1
2400e7a6:	6163      	str	r3, [r4, #20]
2400e7a8:	e7da      	b.n	2400e760 <_lv_img_cache_open+0xd0>
2400e7aa:	bf00      	nop
2400e7ac:	2402dbb0 	.word	0x2402dbb0
2400e7b0:	80000002 	.word	0x80000002
2400e7b4:	2402db12 	.word	0x2402db12

2400e7b8 <lv_img_cache_invalidate_src>:
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
2400e7b8:	4b12      	ldr	r3, [pc, #72]	; (2400e804 <lv_img_cache_invalidate_src+0x4c>)
{
2400e7ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
2400e7be:	4605      	mov	r5, r0
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
2400e7c0:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
2400e7c2:	2400      	movs	r4, #0
2400e7c4:	4e10      	ldr	r6, [pc, #64]	; (2400e808 <lv_img_cache_invalidate_src+0x50>)
        if(cache[i].dec_dsc.src == src || src == NULL) {
2400e7c6:	f04f 0824 	mov.w	r8, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
2400e7ca:	8832      	ldrh	r2, [r6, #0]
2400e7cc:	b2a3      	uxth	r3, r4
2400e7ce:	429a      	cmp	r2, r3
2400e7d0:	d802      	bhi.n	2400e7d8 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
2400e7d2:	b002      	add	sp, #8
2400e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
2400e7d8:	b2a3      	uxth	r3, r4
2400e7da:	fb08 7003 	mla	r0, r8, r3, r7
2400e7de:	6843      	ldr	r3, [r0, #4]
2400e7e0:	42ab      	cmp	r3, r5
2400e7e2:	d000      	beq.n	2400e7e6 <lv_img_cache_invalidate_src+0x2e>
2400e7e4:	b965      	cbnz	r5, 2400e800 <lv_img_cache_invalidate_src+0x48>
            if(cache[i].dec_dsc.src != NULL) {
2400e7e6:	b11b      	cbz	r3, 2400e7f0 <lv_img_cache_invalidate_src+0x38>
                lv_img_decoder_close(&cache[i].dec_dsc);
2400e7e8:	9001      	str	r0, [sp, #4]
2400e7ea:	f000 f91f 	bl	2400ea2c <lv_img_decoder_close>
2400e7ee:	9801      	ldr	r0, [sp, #4]
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
2400e7f0:	2120      	movs	r1, #32
2400e7f2:	9001      	str	r0, [sp, #4]
2400e7f4:	f001 fb04 	bl	2400fe00 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
2400e7f8:	2124      	movs	r1, #36	; 0x24
2400e7fa:	9801      	ldr	r0, [sp, #4]
2400e7fc:	f001 fb00 	bl	2400fe00 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
2400e800:	3401      	adds	r4, #1
2400e802:	e7e2      	b.n	2400e7ca <lv_img_cache_invalidate_src+0x12>
2400e804:	2402dbb0 	.word	0x2402dbb0
2400e808:	2402db12 	.word	0x2402db12

2400e80c <lv_img_cache_set_size>:
{
2400e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
2400e810:	4c16      	ldr	r4, [pc, #88]	; (2400e86c <lv_img_cache_set_size+0x60>)
{
2400e812:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
2400e814:	6823      	ldr	r3, [r4, #0]
2400e816:	b12b      	cbz	r3, 2400e824 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
2400e818:	2000      	movs	r0, #0
2400e81a:	f7ff ffcd 	bl	2400e7b8 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
2400e81e:	6820      	ldr	r0, [r4, #0]
2400e820:	f001 f8dc 	bl	2400f9dc <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
2400e824:	2724      	movs	r7, #36	; 0x24
2400e826:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2400e870 <lv_img_cache_set_size+0x64>
2400e82a:	fb07 f005 	mul.w	r0, r7, r5
2400e82e:	f001 f8a5 	bl	2400f97c <lv_mem_alloc>
2400e832:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
2400e834:	b918      	cbnz	r0, 2400e83e <lv_img_cache_set_size+0x32>
        entry_cnt = 0;
2400e836:	f8a8 0000 	strh.w	r0, [r8]
}
2400e83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
2400e83e:	f8a8 5000 	strh.w	r5, [r8]
    for(i = 0; i < entry_cnt; i++) {
2400e842:	2500      	movs	r5, #0
2400e844:	f8b8 2000 	ldrh.w	r2, [r8]
2400e848:	b2ab      	uxth	r3, r5
2400e84a:	429a      	cmp	r2, r3
2400e84c:	d9f5      	bls.n	2400e83a <lv_img_cache_set_size+0x2e>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
2400e84e:	b2ae      	uxth	r6, r5
2400e850:	6820      	ldr	r0, [r4, #0]
2400e852:	2120      	movs	r1, #32
2400e854:	3501      	adds	r5, #1
2400e856:	437e      	muls	r6, r7
2400e858:	4430      	add	r0, r6
2400e85a:	f001 fad1 	bl	2400fe00 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
2400e85e:	6820      	ldr	r0, [r4, #0]
2400e860:	2124      	movs	r1, #36	; 0x24
2400e862:	4430      	add	r0, r6
2400e864:	f001 facc 	bl	2400fe00 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
2400e868:	e7ec      	b.n	2400e844 <lv_img_cache_set_size+0x38>
2400e86a:	bf00      	nop
2400e86c:	2402dbb0 	.word	0x2402dbb0
2400e870:	2402db12 	.word	0x2402db12

2400e874 <lv_img_decoder_built_in_read_line>:
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
    }

    return res;
}
2400e874:	2000      	movs	r0, #0
2400e876:	4770      	bx	lr

2400e878 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
2400e878:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
2400e87a:	69cd      	ldr	r5, [r1, #28]
{
2400e87c:	460c      	mov	r4, r1
    if(user_data) {
2400e87e:	b165      	cbz	r5, 2400e89a <lv_img_decoder_built_in_close+0x22>
        if(user_data->f) {
            lv_fs_close(user_data->f);
            lv_mem_free(user_data->f);
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
2400e880:	6828      	ldr	r0, [r5, #0]
2400e882:	b108      	cbz	r0, 2400e888 <lv_img_decoder_built_in_close+0x10>
2400e884:	f001 f8aa 	bl	2400f9dc <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
2400e888:	6868      	ldr	r0, [r5, #4]
2400e88a:	b108      	cbz	r0, 2400e890 <lv_img_decoder_built_in_close+0x18>
2400e88c:	f001 f8a6 	bl	2400f9dc <lv_mem_free>

        lv_mem_free(user_data);
2400e890:	4628      	mov	r0, r5
2400e892:	f001 f8a3 	bl	2400f9dc <lv_mem_free>

        dsc->user_data = NULL;
2400e896:	2300      	movs	r3, #0
2400e898:	61e3      	str	r3, [r4, #28]
    }
}
2400e89a:	bd38      	pop	{r3, r4, r5, pc}

2400e89c <lv_img_decoder_built_in_open>:
    if(dsc->src_type == LV_IMG_SRC_FILE) {
2400e89c:	7a8b      	ldrb	r3, [r1, #10]
2400e89e:	2b01      	cmp	r3, #1
{
2400e8a0:	b510      	push	{r4, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
2400e8a2:	d019      	beq.n	2400e8d8 <lv_img_decoder_built_in_open+0x3c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
2400e8a4:	b913      	cbnz	r3, 2400e8ac <lv_img_decoder_built_in_open+0x10>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
2400e8a6:	684a      	ldr	r2, [r1, #4]
2400e8a8:	6892      	ldr	r2, [r2, #8]
2400e8aa:	b152      	cbz	r2, 2400e8c2 <lv_img_decoder_built_in_open+0x26>
    lv_img_cf_t cf = dsc->header.cf;
2400e8ac:	7b0a      	ldrb	r2, [r1, #12]
2400e8ae:	f002 021f 	and.w	r2, r2, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
2400e8b2:	1f14      	subs	r4, r2, #4
2400e8b4:	2c02      	cmp	r4, #2
2400e8b6:	d808      	bhi.n	2400e8ca <lv_img_decoder_built_in_open+0x2e>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
2400e8b8:	b92b      	cbnz	r3, 2400e8c6 <lv_img_decoder_built_in_open+0x2a>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
2400e8ba:	684b      	ldr	r3, [r1, #4]
2400e8bc:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
2400e8be:	610b      	str	r3, [r1, #16]
            return LV_RES_OK;
2400e8c0:	2301      	movs	r3, #1
}
2400e8c2:	4618      	mov	r0, r3
2400e8c4:	bd10      	pop	{r4, pc}
            dsc->img_data = NULL;
2400e8c6:	2300      	movs	r3, #0
2400e8c8:	e7f9      	b.n	2400e8be <lv_img_decoder_built_in_open+0x22>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
2400e8ca:	3219      	adds	r2, #25
2400e8cc:	f002 021f 	and.w	r2, r2, #31
2400e8d0:	2a07      	cmp	r2, #7
2400e8d2:	d901      	bls.n	2400e8d8 <lv_img_decoder_built_in_open+0x3c>
        lv_img_decoder_built_in_close(decoder, dsc);
2400e8d4:	f7ff ffd0 	bl	2400e878 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
2400e8d8:	2300      	movs	r3, #0
2400e8da:	e7f2      	b.n	2400e8c2 <lv_img_decoder_built_in_open+0x26>

2400e8dc <lv_img_decoder_built_in_info>:
{
2400e8dc:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
2400e8de:	4608      	mov	r0, r1
{
2400e8e0:	460d      	mov	r5, r1
2400e8e2:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
2400e8e4:	f7fd fa8e 	bl	2400be04 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
2400e8e8:	b9c8      	cbnz	r0, 2400e91e <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
2400e8ea:	782b      	ldrb	r3, [r5, #0]
2400e8ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
2400e8f0:	3b04      	subs	r3, #4
2400e8f2:	b2db      	uxtb	r3, r3
2400e8f4:	2b0a      	cmp	r3, #10
2400e8f6:	d811      	bhi.n	2400e91c <lv_img_decoder_built_in_info+0x40>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
2400e8f8:	886b      	ldrh	r3, [r5, #2]
2400e8fa:	8862      	ldrh	r2, [r4, #2]
2400e8fc:	f3c3 134a 	ubfx	r3, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
2400e900:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
2400e902:	f363 124f 	bfi	r2, r3, #5, #11
2400e906:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
2400e908:	6823      	ldr	r3, [r4, #0]
2400e90a:	4a09      	ldr	r2, [pc, #36]	; (2400e930 <lv_img_decoder_built_in_info+0x54>)
2400e90c:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
2400e910:	400a      	ands	r2, r1
2400e912:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
        header->cf = LV_IMG_CF_ALPHA_1BIT;
2400e916:	4313      	orrs	r3, r2
    return LV_RES_OK;
2400e918:	2001      	movs	r0, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
2400e91a:	6023      	str	r3, [r4, #0]
}
2400e91c:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
2400e91e:	2802      	cmp	r0, #2
2400e920:	d104      	bne.n	2400e92c <lv_img_decoder_built_in_info+0x50>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
2400e922:	6823      	ldr	r3, [r4, #0]
2400e924:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
2400e928:	4b02      	ldr	r3, [pc, #8]	; (2400e934 <lv_img_decoder_built_in_info+0x58>)
2400e92a:	e7f4      	b.n	2400e916 <lv_img_decoder_built_in_info+0x3a>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
2400e92c:	2000      	movs	r0, #0
2400e92e:	e7f5      	b.n	2400e91c <lv_img_decoder_built_in_info+0x40>
2400e930:	001ffc1f 	.word	0x001ffc1f
2400e934:	0020040b 	.word	0x0020040b

2400e938 <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
2400e938:	680b      	ldr	r3, [r1, #0]
2400e93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
2400e93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400e942:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
2400e944:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e946:	480d      	ldr	r0, [pc, #52]	; (2400e97c <lv_img_decoder_get_info+0x44>)
{
2400e948:	460e      	mov	r6, r1
    lv_res_t res = LV_RES_INV;
2400e94a:	2400      	movs	r4, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e94c:	f000 fed4 	bl	2400f6f8 <_lv_ll_get_head>
2400e950:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2400e97c <lv_img_decoder_get_info+0x44>
2400e954:	4605      	mov	r5, r0
2400e956:	b915      	cbnz	r5, 2400e95e <lv_img_decoder_get_info+0x26>
}
2400e958:	4620      	mov	r0, r4
2400e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
2400e95e:	682c      	ldr	r4, [r5, #0]
2400e960:	b134      	cbz	r4, 2400e970 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
2400e962:	4632      	mov	r2, r6
2400e964:	4639      	mov	r1, r7
2400e966:	4628      	mov	r0, r5
2400e968:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
2400e96a:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
2400e96c:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
2400e96e:	d0f3      	beq.n	2400e958 <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e970:	4629      	mov	r1, r5
2400e972:	4640      	mov	r0, r8
2400e974:	f000 fec6 	bl	2400f704 <_lv_ll_get_next>
2400e978:	4605      	mov	r5, r0
2400e97a:	e7ec      	b.n	2400e956 <lv_img_decoder_get_info+0x1e>
2400e97c:	2402dbb4 	.word	0x2402dbb4

2400e980 <lv_img_decoder_open>:
{
2400e980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400e984:	4605      	mov	r5, r0
    dsc->color     = color;
2400e986:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
2400e988:	4608      	mov	r0, r1
{
2400e98a:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
2400e98c:	f7fd fa3a 	bl	2400be04 <lv_img_src_get_type>
    dsc->user_data = NULL;
2400e990:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
2400e992:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
2400e994:	72a8      	strb	r0, [r5, #10]
    dsc->user_data = NULL;
2400e996:	61eb      	str	r3, [r5, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
2400e998:	d117      	bne.n	2400e9ca <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
2400e99a:	4638      	mov	r0, r7
2400e99c:	f00b fe08 	bl	2401a5b0 <__strlen_veneer>
        dsc->src = lv_mem_alloc(fnlen + 1);
2400e9a0:	3001      	adds	r0, #1
2400e9a2:	f000 ffeb 	bl	2400f97c <lv_mem_alloc>
        strcpy((char *)dsc->src, src);
2400e9a6:	4639      	mov	r1, r7
        dsc->src = lv_mem_alloc(fnlen + 1);
2400e9a8:	6068      	str	r0, [r5, #4]
        strcpy((char *)dsc->src, src);
2400e9aa:	f00b fddf 	bl	2401a56c <strcpy>
    lv_res_t res = LV_RES_INV;
2400e9ae:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e9b0:	4815      	ldr	r0, [pc, #84]	; (2400ea08 <lv_img_decoder_open+0x88>)
2400e9b2:	f000 fea1 	bl	2400f6f8 <_lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
2400e9b6:	f105 090c 	add.w	r9, r5, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e9ba:	4604      	mov	r4, r0
        dsc->error_msg = NULL;
2400e9bc:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e9be:	f8df a048 	ldr.w	sl, [pc, #72]	; 2400ea08 <lv_img_decoder_open+0x88>
2400e9c2:	b924      	cbnz	r4, 2400e9ce <lv_img_decoder_open+0x4e>
}
2400e9c4:	4630      	mov	r0, r6
2400e9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
2400e9ca:	606f      	str	r7, [r5, #4]
2400e9cc:	e7ef      	b.n	2400e9ae <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
2400e9ce:	6823      	ldr	r3, [r4, #0]
2400e9d0:	b1a3      	cbz	r3, 2400e9fc <lv_img_decoder_open+0x7c>
2400e9d2:	6862      	ldr	r2, [r4, #4]
2400e9d4:	b192      	cbz	r2, 2400e9fc <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
2400e9d6:	464a      	mov	r2, r9
2400e9d8:	4639      	mov	r1, r7
2400e9da:	4620      	mov	r0, r4
2400e9dc:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
2400e9de:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
2400e9e0:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
2400e9e2:	d10b      	bne.n	2400e9fc <lv_img_decoder_open+0x7c>
        res = d->open_cb(d, dsc);
2400e9e4:	6863      	ldr	r3, [r4, #4]
2400e9e6:	4629      	mov	r1, r5
2400e9e8:	4620      	mov	r0, r4
        dsc->error_msg = NULL;
2400e9ea:	f8c5 8018 	str.w	r8, [r5, #24]
        dsc->img_data  = NULL;
2400e9ee:	f8c5 8010 	str.w	r8, [r5, #16]
        dsc->decoder   = d;
2400e9f2:	602c      	str	r4, [r5, #0]
        res = d->open_cb(d, dsc);
2400e9f4:	4798      	blx	r3
        if(res == LV_RES_OK) break;
2400e9f6:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
2400e9f8:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
2400e9fa:	d0e3      	beq.n	2400e9c4 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
2400e9fc:	4621      	mov	r1, r4
2400e9fe:	4650      	mov	r0, sl
2400ea00:	f000 fe80 	bl	2400f704 <_lv_ll_get_next>
2400ea04:	4604      	mov	r4, r0
2400ea06:	e7dc      	b.n	2400e9c2 <lv_img_decoder_open+0x42>
2400ea08:	2402dbb4 	.word	0x2402dbb4

2400ea0c <lv_img_decoder_read_line>:
{
2400ea0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
2400ea0e:	6805      	ldr	r5, [r0, #0]
2400ea10:	68ac      	ldr	r4, [r5, #8]
2400ea12:	b14c      	cbz	r4, 2400ea28 <lv_img_decoder_read_line+0x1c>
2400ea14:	9e06      	ldr	r6, [sp, #24]
2400ea16:	e9cd 3600 	strd	r3, r6, [sp]
2400ea1a:	4613      	mov	r3, r2
2400ea1c:	460a      	mov	r2, r1
2400ea1e:	4601      	mov	r1, r0
2400ea20:	4628      	mov	r0, r5
2400ea22:	47a0      	blx	r4
}
2400ea24:	b002      	add	sp, #8
2400ea26:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
2400ea28:	4620      	mov	r0, r4
2400ea2a:	e7fb      	b.n	2400ea24 <lv_img_decoder_read_line+0x18>

2400ea2c <lv_img_decoder_close>:
{
2400ea2c:	b510      	push	{r4, lr}
2400ea2e:	4604      	mov	r4, r0
    if(dsc->decoder) {
2400ea30:	6800      	ldr	r0, [r0, #0]
2400ea32:	b158      	cbz	r0, 2400ea4c <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
2400ea34:	68c3      	ldr	r3, [r0, #12]
2400ea36:	b10b      	cbz	r3, 2400ea3c <lv_img_decoder_close+0x10>
2400ea38:	4621      	mov	r1, r4
2400ea3a:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
2400ea3c:	7aa3      	ldrb	r3, [r4, #10]
2400ea3e:	2b01      	cmp	r3, #1
2400ea40:	d104      	bne.n	2400ea4c <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
2400ea42:	6860      	ldr	r0, [r4, #4]
2400ea44:	f000 ffca 	bl	2400f9dc <lv_mem_free>
            dsc->src = NULL;
2400ea48:	2300      	movs	r3, #0
2400ea4a:	6063      	str	r3, [r4, #4]
}
2400ea4c:	bd10      	pop	{r4, pc}
	...

2400ea50 <lv_img_decoder_create>:
{
2400ea50:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
2400ea52:	4805      	ldr	r0, [pc, #20]	; (2400ea68 <lv_img_decoder_create+0x18>)
2400ea54:	f000 fe19 	bl	2400f68a <_lv_ll_ins_head>
    if(decoder == NULL) return NULL;
2400ea58:	4604      	mov	r4, r0
2400ea5a:	b110      	cbz	r0, 2400ea62 <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
2400ea5c:	2110      	movs	r1, #16
2400ea5e:	f001 f9cf 	bl	2400fe00 <_lv_memset_00>
}
2400ea62:	4620      	mov	r0, r4
2400ea64:	bd10      	pop	{r4, pc}
2400ea66:	bf00      	nop
2400ea68:	2402dbb4 	.word	0x2402dbb4

2400ea6c <_lv_img_decoder_init>:
{
2400ea6c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
2400ea6e:	2110      	movs	r1, #16
2400ea70:	4807      	ldr	r0, [pc, #28]	; (2400ea90 <_lv_img_decoder_init+0x24>)
2400ea72:	f000 fe02 	bl	2400f67a <_lv_ll_init>
    decoder = lv_img_decoder_create();
2400ea76:	f7ff ffeb 	bl	2400ea50 <lv_img_decoder_create>
    if(decoder == NULL) {
2400ea7a:	b138      	cbz	r0, 2400ea8c <_lv_img_decoder_init+0x20>
    decoder->info_cb = info_cb;
2400ea7c:	4b05      	ldr	r3, [pc, #20]	; (2400ea94 <_lv_img_decoder_init+0x28>)
2400ea7e:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
2400ea80:	4b05      	ldr	r3, [pc, #20]	; (2400ea98 <_lv_img_decoder_init+0x2c>)
2400ea82:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
2400ea84:	4b05      	ldr	r3, [pc, #20]	; (2400ea9c <_lv_img_decoder_init+0x30>)
2400ea86:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
2400ea88:	4b05      	ldr	r3, [pc, #20]	; (2400eaa0 <_lv_img_decoder_init+0x34>)
2400ea8a:	60c3      	str	r3, [r0, #12]
}
2400ea8c:	bd08      	pop	{r3, pc}
2400ea8e:	bf00      	nop
2400ea90:	2402dbb4 	.word	0x2402dbb4
2400ea94:	2400e8dd 	.word	0x2400e8dd
2400ea98:	2400e89d 	.word	0x2400e89d
2400ea9c:	2400e875 	.word	0x2400e875
2400eaa0:	2400e879 	.word	0x2400e879

2400eaa4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
2400eaa4:	6843      	ldr	r3, [r0, #4]
2400eaa6:	4718      	bx	r3

2400eaa8 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
2400eaa8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
2400eaaa:	6804      	ldr	r4, [r0, #0]
2400eaac:	46a4      	mov	ip, r4
}
2400eaae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
2400eab2:	4760      	bx	ip

2400eab4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
2400eab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2400eab6:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
2400eab8:	460a      	mov	r2, r1
2400eaba:	a901      	add	r1, sp, #4
2400eabc:	f7ff fff4 	bl	2400eaa8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
2400eac0:	b108      	cbz	r0, 2400eac6 <lv_font_get_glyph_width+0x12>
2400eac2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
2400eac6:	b005      	add	sp, #20
2400eac8:	f85d fb04 	ldr.w	pc, [sp], #4

2400eacc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
2400eacc:	7803      	ldrb	r3, [r0, #0]
2400eace:	780a      	ldrb	r2, [r1, #0]
2400ead0:	4293      	cmp	r3, r2
2400ead2:	bf11      	iteee	ne
2400ead4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
2400ead6:	784b      	ldrbeq	r3, [r1, #1]
2400ead8:	7840      	ldrbeq	r0, [r0, #1]
2400eada:	1ac0      	subeq	r0, r0, r3

}
2400eadc:	4770      	bx	lr

2400eade <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
2400eade:	8803      	ldrh	r3, [r0, #0]
2400eae0:	880a      	ldrh	r2, [r1, #0]
2400eae2:	4293      	cmp	r3, r2
2400eae4:	bf11      	iteee	ne
2400eae6:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
2400eae8:	884b      	ldrheq	r3, [r1, #2]
2400eaea:	8840      	ldrheq	r0, [r0, #2]
2400eaec:	1ac0      	subeq	r0, r0, r3
}
2400eaee:	4770      	bx	lr

2400eaf0 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
2400eaf0:	8800      	ldrh	r0, [r0, #0]
2400eaf2:	880b      	ldrh	r3, [r1, #0]
}
2400eaf4:	1ac0      	subs	r0, r0, r3
2400eaf6:	4770      	bx	lr

2400eaf8 <get_glyph_dsc_id>:
{
2400eaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(letter == '\0') return 0;
2400eafa:	460c      	mov	r4, r1
{
2400eafc:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
2400eafe:	b181      	cbz	r1, 2400eb22 <get_glyph_dsc_id+0x2a>
2400eb00:	6905      	ldr	r5, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
2400eb02:	69ab      	ldr	r3, [r5, #24]
2400eb04:	4299      	cmp	r1, r3
2400eb06:	d00b      	beq.n	2400eb20 <get_glyph_dsc_id+0x28>
    for(i = 0; i < fdsc->cmap_num; i++) {
2400eb08:	8a68      	ldrh	r0, [r5, #18]
2400eb0a:	2300      	movs	r3, #0
2400eb0c:	2714      	movs	r7, #20
2400eb0e:	f3c0 0009 	ubfx	r0, r0, #0, #10
2400eb12:	b29a      	uxth	r2, r3
2400eb14:	4282      	cmp	r2, r0
2400eb16:	d307      	bcc.n	2400eb28 <get_glyph_dsc_id+0x30>
    fdsc->last_letter = letter;
2400eb18:	61ac      	str	r4, [r5, #24]
    fdsc->last_glyph_id = 0;
2400eb1a:	2400      	movs	r4, #0
2400eb1c:	61ec      	str	r4, [r5, #28]
    return 0;
2400eb1e:	e000      	b.n	2400eb22 <get_glyph_dsc_id+0x2a>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
2400eb20:	69ec      	ldr	r4, [r5, #28]
}
2400eb22:	4620      	mov	r0, r4
2400eb24:	b005      	add	sp, #20
2400eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
2400eb28:	fb07 f603 	mul.w	r6, r7, r3
2400eb2c:	68aa      	ldr	r2, [r5, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
2400eb2e:	3301      	adds	r3, #1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
2400eb30:	1991      	adds	r1, r2, r6
2400eb32:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
2400eb34:	f8b1 c004 	ldrh.w	ip, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
2400eb38:	1aa2      	subs	r2, r4, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
2400eb3a:	4562      	cmp	r2, ip
2400eb3c:	d8e9      	bhi.n	2400eb12 <get_glyph_dsc_id+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
2400eb3e:	7c8b      	ldrb	r3, [r1, #18]
2400eb40:	b92b      	cbnz	r3, 2400eb4e <get_glyph_dsc_id+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
2400eb42:	88c8      	ldrh	r0, [r1, #6]
2400eb44:	4410      	add	r0, r2
        fdsc->last_glyph_id = glyph_id;
2400eb46:	e9c5 4006 	strd	r4, r0, [r5, #24]
        return glyph_id;
2400eb4a:	4604      	mov	r4, r0
2400eb4c:	e7e9      	b.n	2400eb22 <get_glyph_dsc_id+0x2a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
2400eb4e:	2b01      	cmp	r3, #1
2400eb50:	d104      	bne.n	2400eb5c <get_glyph_dsc_id+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
2400eb52:	68cb      	ldr	r3, [r1, #12]
2400eb54:	5c98      	ldrb	r0, [r3, r2]
2400eb56:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
2400eb58:	4418      	add	r0, r3
2400eb5a:	e7f4      	b.n	2400eb46 <get_glyph_dsc_id+0x4e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
2400eb5c:	2b02      	cmp	r3, #2
2400eb5e:	d113      	bne.n	2400eb88 <get_glyph_dsc_id+0x90>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
2400eb60:	4816      	ldr	r0, [pc, #88]	; (2400ebbc <get_glyph_dsc_id+0xc4>)
            uint16_t key = rcp;
2400eb62:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
2400eb66:	8a0a      	ldrh	r2, [r1, #16]
2400eb68:	9000      	str	r0, [sp, #0]
2400eb6a:	f10d 000e 	add.w	r0, sp, #14
2400eb6e:	6889      	ldr	r1, [r1, #8]
2400eb70:	f002 f966 	bl	24010e40 <_lv_utils_bsearch>
            if(p) {
2400eb74:	2800      	cmp	r0, #0
2400eb76:	d0e6      	beq.n	2400eb46 <get_glyph_dsc_id+0x4e>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
2400eb78:	68ab      	ldr	r3, [r5, #8]
2400eb7a:	4433      	add	r3, r6
2400eb7c:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
2400eb7e:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
2400eb80:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
2400eb82:	eb03 0050 	add.w	r0, r3, r0, lsr #1
2400eb86:	e7de      	b.n	2400eb46 <get_glyph_dsc_id+0x4e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
2400eb88:	2b03      	cmp	r3, #3
2400eb8a:	d115      	bne.n	2400ebb8 <get_glyph_dsc_id+0xc0>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
2400eb8c:	4b0b      	ldr	r3, [pc, #44]	; (2400ebbc <get_glyph_dsc_id+0xc4>)
2400eb8e:	f10d 000e 	add.w	r0, sp, #14
            uint16_t key = rcp;
2400eb92:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
2400eb96:	8a0a      	ldrh	r2, [r1, #16]
2400eb98:	9300      	str	r3, [sp, #0]
2400eb9a:	2302      	movs	r3, #2
2400eb9c:	6889      	ldr	r1, [r1, #8]
2400eb9e:	f002 f94f 	bl	24010e40 <_lv_utils_bsearch>
            if(p) {
2400eba2:	2800      	cmp	r0, #0
2400eba4:	d0cf      	beq.n	2400eb46 <get_glyph_dsc_id+0x4e>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
2400eba6:	68ab      	ldr	r3, [r5, #8]
2400eba8:	4433      	add	r3, r6
2400ebaa:	689a      	ldr	r2, [r3, #8]
2400ebac:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
2400ebae:	68da      	ldr	r2, [r3, #12]
2400ebb0:	88db      	ldrh	r3, [r3, #6]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
2400ebb2:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
2400ebb4:	5c10      	ldrb	r0, [r2, r0]
2400ebb6:	e7cf      	b.n	2400eb58 <get_glyph_dsc_id+0x60>
        uint32_t glyph_id = 0;
2400ebb8:	2000      	movs	r0, #0
2400ebba:	e7c4      	b.n	2400eb46 <get_glyph_dsc_id+0x4e>
2400ebbc:	2400eaf1 	.word	0x2400eaf1

2400ebc0 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
2400ebc0:	2909      	cmp	r1, #9
{
2400ebc2:	b510      	push	{r4, lr}
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
2400ebc4:	bf08      	it	eq
2400ebc6:	2120      	moveq	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
2400ebc8:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
2400ebca:	f7ff ff95 	bl	2400eaf8 <get_glyph_dsc_id>
    if(!gid) return NULL;
2400ebce:	b170      	cbz	r0, 2400ebee <lv_font_get_bitmap_fmt_txt+0x2e>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
2400ebd0:	7d21      	ldrb	r1, [r4, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
2400ebd2:	6862      	ldr	r2, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
2400ebd4:	0789      	lsls	r1, r1, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
2400ebd6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
2400ebda:	d108      	bne.n	2400ebee <lv_font_get_bitmap_fmt_txt+0x2e>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
2400ebdc:	b12b      	cbz	r3, 2400ebea <lv_font_get_bitmap_fmt_txt+0x2a>
2400ebde:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
2400ebe2:	6823      	ldr	r3, [r4, #0]
2400ebe4:	f3c2 0213 	ubfx	r2, r2, #0, #20
2400ebe8:	4413      	add	r3, r2
}
2400ebea:	4618      	mov	r0, r3
2400ebec:	bd10      	pop	{r4, pc}
    if(!gid) return NULL;
2400ebee:	2300      	movs	r3, #0
2400ebf0:	e7fb      	b.n	2400ebea <lv_font_get_bitmap_fmt_txt+0x2a>
	...

2400ebf4 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
2400ebf4:	2a09      	cmp	r2, #9
{
2400ebf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2400ebfa:	460c      	mov	r4, r1
2400ebfc:	b085      	sub	sp, #20
2400ebfe:	4611      	mov	r1, r2
        unicode_letter = ' ';
2400ec00:	bf08      	it	eq
2400ec02:	2120      	moveq	r1, #32
{
2400ec04:	4680      	mov	r8, r0
2400ec06:	4699      	mov	r9, r3
        is_tab = true;
2400ec08:	bf0c      	ite	eq
2400ec0a:	2601      	moveq	r6, #1
    bool is_tab = false;
2400ec0c:	2600      	movne	r6, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
2400ec0e:	6907      	ldr	r7, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
2400ec10:	f7ff ff72 	bl	2400eaf8 <get_glyph_dsc_id>
    if(!gid) return false;
2400ec14:	4605      	mov	r5, r0
2400ec16:	2800      	cmp	r0, #0
2400ec18:	f000 8085 	beq.w	2400ed26 <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
2400ec1c:	68fb      	ldr	r3, [r7, #12]
2400ec1e:	bb3b      	cbnz	r3, 2400ec70 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
    int8_t kvalue = 0;
2400ec20:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
2400ec22:	6879      	ldr	r1, [r7, #4]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
2400ec24:	8a3a      	ldrh	r2, [r7, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
2400ec26:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
2400ec2a:	4353      	muls	r3, r2
    uint32_t adv_w = gdsc->adv_w;
2400ec2c:	884a      	ldrh	r2, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
2400ec2e:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
2400ec30:	f3c2 100b 	ubfx	r0, r2, #4, #12
2400ec34:	4602      	mov	r2, r0
    if(is_tab) adv_w *= 2;
2400ec36:	b10e      	cbz	r6, 2400ec3c <lv_font_get_glyph_dsc_fmt_txt+0x48>
2400ec38:	b202      	sxth	r2, r0
2400ec3a:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
2400ec3c:	3308      	adds	r3, #8
2400ec3e:	4413      	add	r3, r2
2400ec40:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
2400ec42:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
2400ec44:	794b      	ldrb	r3, [r1, #5]
2400ec46:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
2400ec48:	790b      	ldrb	r3, [r1, #4]
2400ec4a:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
2400ec4c:	f991 2006 	ldrsb.w	r2, [r1, #6]
2400ec50:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
2400ec52:	f991 2007 	ldrsb.w	r2, [r1, #7]
2400ec56:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
2400ec58:	7cfa      	ldrb	r2, [r7, #19]
2400ec5a:	f3c2 0283 	ubfx	r2, r2, #2, #4
2400ec5e:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
2400ec60:	2e00      	cmp	r6, #0
2400ec62:	d062      	beq.n	2400ed2a <lv_font_get_glyph_dsc_fmt_txt+0x136>
2400ec64:	005b      	lsls	r3, r3, #1
2400ec66:	8063      	strh	r3, [r4, #2]
}
2400ec68:	4630      	mov	r0, r6
2400ec6a:	b005      	add	sp, #20
2400ec6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
2400ec70:	4649      	mov	r1, r9
2400ec72:	4640      	mov	r0, r8
2400ec74:	f7ff ff40 	bl	2400eaf8 <get_glyph_dsc_id>
        if(gid_next) {
2400ec78:	2800      	cmp	r0, #0
2400ec7a:	d0d1      	beq.n	2400ec20 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            kvalue = get_kern_value(font, gid, gid_next);
2400ec7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
2400ec80:	f8d2 800c 	ldr.w	r8, [r2, #12]
    if(fdsc->kern_classes == 0) {
2400ec84:	7cd2      	ldrb	r2, [r2, #19]
2400ec86:	0653      	lsls	r3, r2, #25
2400ec88:	d438      	bmi.n	2400ecfc <lv_font_get_glyph_dsc_fmt_txt+0x108>
        if(kdsc->glyph_ids_size == 0) {
2400ec8a:	f898 200b 	ldrb.w	r2, [r8, #11]
2400ec8e:	f012 0203 	ands.w	r2, r2, #3
2400ec92:	d11a      	bne.n	2400ecca <lv_font_get_glyph_dsc_fmt_txt+0xd6>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
2400ec94:	eb05 2300 	add.w	r3, r5, r0, lsl #8
            const uint8_t * g_ids = kdsc->glyph_ids;
2400ec98:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
2400ec9c:	f8d8 2008 	ldr.w	r2, [r8, #8]
2400eca0:	a803      	add	r0, sp, #12
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
2400eca2:	f8ad 300c 	strh.w	r3, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
2400eca6:	4649      	mov	r1, r9
2400eca8:	4b21      	ldr	r3, [pc, #132]	; (2400ed30 <lv_font_get_glyph_dsc_fmt_txt+0x13c>)
2400ecaa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
2400ecae:	9300      	str	r3, [sp, #0]
2400ecb0:	2302      	movs	r3, #2
2400ecb2:	f002 f8c5 	bl	24010e40 <_lv_utils_bsearch>
            if(kid_p) {
2400ecb6:	4603      	mov	r3, r0
2400ecb8:	2800      	cmp	r0, #0
2400ecba:	d0b2      	beq.n	2400ec22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
2400ecbc:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
2400ecc0:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
2400ecc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
2400ecc6:	56d3      	ldrsb	r3, [r2, r3]
2400ecc8:	e7ab      	b.n	2400ec22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        else if(kdsc->glyph_ids_size == 1) {
2400ecca:	2a01      	cmp	r2, #1
2400eccc:	d1a8      	bne.n	2400ec20 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            const uint16_t * g_ids = kdsc->glyph_ids;
2400ecce:	f8d8 9000 	ldr.w	r9, [r8]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
2400ecd2:	eb05 2000 	add.w	r0, r5, r0, lsl #8
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
2400ecd6:	f8d8 2008 	ldr.w	r2, [r8, #8]
2400ecda:	4b16      	ldr	r3, [pc, #88]	; (2400ed34 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
2400ecdc:	4649      	mov	r1, r9
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
2400ecde:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
2400ece0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
2400ece4:	9300      	str	r3, [sp, #0]
2400ece6:	a803      	add	r0, sp, #12
2400ece8:	2304      	movs	r3, #4
2400ecea:	f002 f8a9 	bl	24010e40 <_lv_utils_bsearch>
            if(kid_p) {
2400ecee:	4603      	mov	r3, r0
2400ecf0:	2800      	cmp	r0, #0
2400ecf2:	d096      	beq.n	2400ec22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
2400ecf4:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
2400ecf8:	091b      	lsrs	r3, r3, #4
2400ecfa:	e7e2      	b.n	2400ecc2 <lv_font_get_glyph_dsc_fmt_txt+0xce>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
2400ecfc:	f8d8 2004 	ldr.w	r2, [r8, #4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
2400ed00:	f8d8 1008 	ldr.w	r1, [r8, #8]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
2400ed04:	5d52      	ldrb	r2, [r2, r5]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
2400ed06:	5c09      	ldrb	r1, [r1, r0]
        if(left_class > 0 && right_class > 0) {
2400ed08:	2a00      	cmp	r2, #0
2400ed0a:	d089      	beq.n	2400ec20 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
2400ed0c:	2900      	cmp	r1, #0
2400ed0e:	d087      	beq.n	2400ec20 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
2400ed10:	f8d8 3000 	ldr.w	r3, [r8]
2400ed14:	3a01      	subs	r2, #1
2400ed16:	f898 000d 	ldrb.w	r0, [r8, #13]
2400ed1a:	440b      	add	r3, r1
2400ed1c:	fb00 3302 	mla	r3, r0, r2, r3
2400ed20:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
2400ed24:	e77d      	b.n	2400ec22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
    if(!gid) return false;
2400ed26:	4606      	mov	r6, r0
2400ed28:	e79e      	b.n	2400ec68 <lv_font_get_glyph_dsc_fmt_txt+0x74>
    return true;
2400ed2a:	2601      	movs	r6, #1
2400ed2c:	e79c      	b.n	2400ec68 <lv_font_get_glyph_dsc_fmt_txt+0x74>
2400ed2e:	bf00      	nop
2400ed30:	2400eacd 	.word	0x2400eacd
2400ed34:	2400eadf 	.word	0x2400eadf

2400ed38 <_lv_font_clean_up_fmt_txt>:
{
2400ed38:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
2400ed3a:	4c04      	ldr	r4, [pc, #16]	; (2400ed4c <_lv_font_clean_up_fmt_txt+0x14>)
2400ed3c:	6820      	ldr	r0, [r4, #0]
2400ed3e:	b118      	cbz	r0, 2400ed48 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
2400ed40:	f000 fe4c 	bl	2400f9dc <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
2400ed44:	2300      	movs	r3, #0
2400ed46:	6023      	str	r3, [r4, #0]
}
2400ed48:	bd10      	pop	{r4, pc}
2400ed4a:	bf00      	nop
2400ed4c:	2402dbac 	.word	0x2402dbac

2400ed50 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
2400ed50:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
2400ed52:	212c      	movs	r1, #44	; 0x2c
{
2400ed54:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
2400ed56:	f001 f853 	bl	2400fe00 <_lv_memset_00>
    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
2400ed5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    driver->flush_cb         = NULL;
2400ed5e:	2200      	movs	r2, #0
    driver->color_chroma_key = LV_COLOR_TRANSP;
2400ed60:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->hor_res          = LV_HOR_RES_MAX;
2400ed62:	4b07      	ldr	r3, [pc, #28]	; (2400ed80 <lv_disp_drv_init+0x30>)
    driver->flush_cb         = NULL;
2400ed64:	60e2      	str	r2, [r4, #12]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
2400ed66:	6162      	str	r2, [r4, #20]
    driver->buffer           = NULL;
2400ed68:	e9c4 3200 	strd	r3, r2, [r4]
    driver->rotated          = 0;
2400ed6c:	8923      	ldrh	r3, [r4, #8]
2400ed6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
2400ed72:	f023 0307 	bic.w	r3, r3, #7
2400ed76:	f443 7382 	orr.w	r3, r3, #260	; 0x104
2400ed7a:	8123      	strh	r3, [r4, #8]
}
2400ed7c:	bd10      	pop	{r4, pc}
2400ed7e:	bf00      	nop
2400ed80:	01e20320 	.word	0x01e20320

2400ed84 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
2400ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400ed86:	4604      	mov	r4, r0
2400ed88:	460d      	mov	r5, r1
2400ed8a:	4617      	mov	r7, r2
2400ed8c:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
2400ed8e:	2124      	movs	r1, #36	; 0x24
2400ed90:	f001 f836 	bl	2400fe00 <_lv_memset_00>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
2400ed94:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->buf_act = disp_buf->buf1;
    disp_buf->size    = size_in_px_cnt;
2400ed98:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
2400ed9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

2400eda0 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
2400eda0:	4b01      	ldr	r3, [pc, #4]	; (2400eda8 <lv_disp_get_default+0x8>)
2400eda2:	6818      	ldr	r0, [r3, #0]
2400eda4:	4770      	bx	lr
2400eda6:	bf00      	nop
2400eda8:	2402db14 	.word	0x2402db14

2400edac <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
2400edac:	b910      	cbnz	r0, 2400edb4 <lv_disp_get_hor_res+0x8>
    return disp_def;
2400edae:	4b07      	ldr	r3, [pc, #28]	; (2400edcc <lv_disp_get_hor_res+0x20>)
2400edb0:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
2400edb2:	b138      	cbz	r0, 2400edc4 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
2400edb4:	7a03      	ldrb	r3, [r0, #8]
2400edb6:	07db      	lsls	r3, r3, #31
2400edb8:	bf54      	ite	pl
2400edba:	f9b0 0000 	ldrshpl.w	r0, [r0]
2400edbe:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
2400edc2:	4770      	bx	lr
        return LV_HOR_RES_MAX;
2400edc4:	f44f 7048 	mov.w	r0, #800	; 0x320
}
2400edc8:	4770      	bx	lr
2400edca:	bf00      	nop
2400edcc:	2402db14 	.word	0x2402db14

2400edd0 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
2400edd0:	b910      	cbnz	r0, 2400edd8 <lv_disp_get_ver_res+0x8>
    return disp_def;
2400edd2:	4b07      	ldr	r3, [pc, #28]	; (2400edf0 <lv_disp_get_ver_res+0x20>)
2400edd4:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
2400edd6:	b138      	cbz	r0, 2400ede8 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
2400edd8:	7a03      	ldrb	r3, [r0, #8]
2400edda:	07db      	lsls	r3, r3, #31
2400eddc:	bf54      	ite	pl
2400edde:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
2400ede2:	f9b0 0000 	ldrshmi.w	r0, [r0]
2400ede6:	4770      	bx	lr
        return LV_VER_RES_MAX;
2400ede8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
}
2400edec:	4770      	bx	lr
2400edee:	bf00      	nop
2400edf0:	2402db14 	.word	0x2402db14

2400edf4 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
2400edf4:	b910      	cbnz	r0, 2400edfc <lv_disp_get_dpi+0x8>
    return disp_def;
2400edf6:	4b04      	ldr	r3, [pc, #16]	; (2400ee08 <lv_disp_get_dpi+0x14>)
2400edf8:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
2400edfa:	b118      	cbz	r0, 2400ee04 <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
2400edfc:	8900      	ldrh	r0, [r0, #8]
2400edfe:	f3c0 0049 	ubfx	r0, r0, #1, #10
2400ee02:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
2400ee04:	2082      	movs	r0, #130	; 0x82
}
2400ee06:	4770      	bx	lr
2400ee08:	2402db14 	.word	0x2402db14

2400ee0c <lv_disp_get_size_category>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
2400ee0c:	4601      	mov	r1, r0
{
2400ee0e:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
2400ee10:	b910      	cbnz	r0, 2400ee18 <lv_disp_get_size_category+0xc>
    return disp_def;
2400ee12:	4b0f      	ldr	r3, [pc, #60]	; (2400ee50 <lv_disp_get_size_category+0x44>)
2400ee14:	6819      	ldr	r1, [r3, #0]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
2400ee16:	b199      	cbz	r1, 2400ee40 <lv_disp_get_size_category+0x34>
    else w = lv_disp_get_hor_res(disp);
2400ee18:	4608      	mov	r0, r1
2400ee1a:	f7ff ffc7 	bl	2400edac <lv_disp_get_hor_res>
2400ee1e:	4602      	mov	r2, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
2400ee20:	4608      	mov	r0, r1
2400ee22:	f7ff ffe7 	bl	2400edf4 <lv_disp_get_dpi>

    w = w * 10 / dpi;
2400ee26:	230a      	movs	r3, #10
2400ee28:	435a      	muls	r2, r3
2400ee2a:	fbb2 f0f0 	udiv	r0, r2, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
2400ee2e:	281d      	cmp	r0, #29
2400ee30:	d909      	bls.n	2400ee46 <lv_disp_get_size_category+0x3a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
2400ee32:	2831      	cmp	r0, #49	; 0x31
2400ee34:	d909      	bls.n	2400ee4a <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
2400ee36:	2846      	cmp	r0, #70	; 0x46
2400ee38:	bf34      	ite	cc
2400ee3a:	2002      	movcc	r0, #2
2400ee3c:	2003      	movcs	r0, #3
}
2400ee3e:	bd08      	pop	{r3, pc}
    if(disp == NULL) w = LV_HOR_RES_MAX;
2400ee40:	f44f 7248 	mov.w	r2, #800	; 0x320
2400ee44:	e7ec      	b.n	2400ee20 <lv_disp_get_size_category+0x14>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
2400ee46:	2000      	movs	r0, #0
2400ee48:	e7f9      	b.n	2400ee3e <lv_disp_get_size_category+0x32>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
2400ee4a:	2001      	movs	r0, #1
2400ee4c:	e7f7      	b.n	2400ee3e <lv_disp_get_size_category+0x32>
2400ee4e:	bf00      	nop
2400ee50:	2402db14 	.word	0x2402db14

2400ee54 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
2400ee54:	6843      	ldr	r3, [r0, #4]
2400ee56:	2200      	movs	r2, #0
2400ee58:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
2400ee5a:	61da      	str	r2, [r3, #28]
}
2400ee5c:	4770      	bx	lr
	...

2400ee60 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
2400ee60:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
2400ee62:	4803      	ldr	r0, [pc, #12]	; (2400ee70 <lv_disp_get_next+0x10>)
    if(disp == NULL)
2400ee64:	b909      	cbnz	r1, 2400ee6a <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
2400ee66:	f000 bc47 	b.w	2400f6f8 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
2400ee6a:	f000 bc4b 	b.w	2400f704 <_lv_ll_get_next>
2400ee6e:	bf00      	nop
2400ee70:	2402db20 	.word	0x2402db20

2400ee74 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
2400ee74:	6840      	ldr	r0, [r0, #4]
2400ee76:	4770      	bx	lr

2400ee78 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
2400ee78:	f8b0 0176 	ldrh.w	r0, [r0, #374]	; 0x176
}
2400ee7c:	f3c0 0009 	ubfx	r0, r0, #0, #10
2400ee80:	4770      	bx	lr

2400ee82 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
2400ee82:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
2400ee86:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400ee8a:	428b      	cmp	r3, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
2400ee8c:	bfac      	ite	ge
2400ee8e:	1a59      	subge	r1, r3, r1
        disp->inv_p = 0;
2400ee90:	2100      	movlt	r1, #0
2400ee92:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
        disp->inv_p -= num;
2400ee96:	bfa8      	it	ge
2400ee98:	f3c1 0109 	ubfxge	r1, r1, #0, #10
2400ee9c:	f361 0309 	bfi	r3, r1, #0, #10
2400eea0:	f8a0 3176 	strh.w	r3, [r0, #374]	; 0x176
}
2400eea4:	4770      	bx	lr

2400eea6 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
2400eea6:	6843      	ldr	r3, [r0, #4]
2400eea8:	6818      	ldr	r0, [r3, #0]
2400eeaa:	b118      	cbz	r0, 2400eeb4 <lv_disp_is_double_buf+0xe>
2400eeac:	6858      	ldr	r0, [r3, #4]
2400eeae:	3800      	subs	r0, #0
2400eeb0:	bf18      	it	ne
2400eeb2:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
2400eeb4:	4770      	bx	lr

2400eeb6 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
2400eeb6:	b508      	push	{r3, lr}
2400eeb8:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
2400eeba:	f7ff fff4 	bl	2400eea6 <lv_disp_is_double_buf>
2400eebe:	b140      	cbz	r0, 2400eed2 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
2400eec0:	8813      	ldrh	r3, [r2, #0]
2400eec2:	8851      	ldrh	r1, [r2, #2]
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
2400eec4:	6852      	ldr	r2, [r2, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
2400eec6:	fb13 f301 	smulbb	r3, r3, r1
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
2400eeca:	68d0      	ldr	r0, [r2, #12]
2400eecc:	1a1b      	subs	r3, r3, r0
2400eece:	4258      	negs	r0, r3
2400eed0:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
2400eed2:	bd08      	pop	{r3, pc}

2400eed4 <lv_disp_drv_register>:
{
2400eed4:	b570      	push	{r4, r5, r6, lr}
2400eed6:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
2400eed8:	482f      	ldr	r0, [pc, #188]	; (2400ef98 <lv_disp_drv_register+0xc4>)
2400eeda:	f000 fbd6 	bl	2400f68a <_lv_ll_ins_head>
    if(!disp) {
2400eede:	4604      	mov	r4, r0
2400eee0:	b910      	cbnz	r0, 2400eee8 <lv_disp_drv_register+0x14>
        return NULL;
2400eee2:	2400      	movs	r4, #0
}
2400eee4:	4620      	mov	r0, r4
2400eee6:	bd70      	pop	{r4, r5, r6, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
2400eee8:	f44f 71be 	mov.w	r1, #380	; 0x17c
2400eeec:	f000 ff88 	bl	2400fe00 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
2400eef0:	4629      	mov	r1, r5
2400eef2:	222c      	movs	r2, #44	; 0x2c
2400eef4:	4620      	mov	r0, r4
2400eef6:	f000 fdd9 	bl	2400faac <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
2400eefa:	2138      	movs	r1, #56	; 0x38
2400eefc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    if(disp_def == NULL) disp_def = disp;
2400ef00:	4d26      	ldr	r5, [pc, #152]	; (2400ef9c <lv_disp_drv_register+0xc8>)
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
2400ef02:	f000 fbba 	bl	2400f67a <_lv_ll_init>
    disp->last_activity_time = 0;
2400ef06:	2300      	movs	r3, #0
2400ef08:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
    if(disp_def == NULL) disp_def = disp;
2400ef0c:	682b      	ldr	r3, [r5, #0]
2400ef0e:	b903      	cbnz	r3, 2400ef12 <lv_disp_drv_register+0x3e>
2400ef10:	602c      	str	r4, [r5, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
2400ef12:	4623      	mov	r3, r4
2400ef14:	2203      	movs	r2, #3
2400ef16:	2101      	movs	r1, #1
2400ef18:	4821      	ldr	r0, [pc, #132]	; (2400efa0 <lv_disp_drv_register+0xcc>)
    lv_disp_t * disp_def_tmp = disp_def;
2400ef1a:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
2400ef1c:	602c      	str	r4, [r5, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
2400ef1e:	f001 fc23 	bl	24010768 <lv_task_create>
2400ef22:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(disp->refr_task == NULL) return NULL;
2400ef24:	2800      	cmp	r0, #0
2400ef26:	d0dc      	beq.n	2400eee2 <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
2400ef28:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    disp->last_activity_time = 0;
2400ef2c:	2100      	movs	r1, #0
    disp->inv_p = 0;
2400ef2e:	f36f 0309 	bfc	r3, #0, #10
    disp->last_activity_time = 0;
2400ef32:	f8c4 1178 	str.w	r1, [r4, #376]	; 0x178
    disp->bg_img = NULL;
2400ef36:	6521      	str	r1, [r4, #80]	; 0x50
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
2400ef38:	4608      	mov	r0, r1
    disp->inv_p = 0;
2400ef3a:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
    disp->bg_color = LV_COLOR_WHITE;
2400ef3e:	4b19      	ldr	r3, [pc, #100]	; (2400efa4 <lv_disp_drv_register+0xd0>)
    disp->prev_scr  = NULL;
2400ef40:	6421      	str	r1, [r4, #64]	; 0x40
    disp->bg_color = LV_COLOR_WHITE;
2400ef42:	881b      	ldrh	r3, [r3, #0]
2400ef44:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    disp->bg_opa = LV_OPA_COVER;
2400ef48:	23ff      	movs	r3, #255	; 0xff
2400ef4a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
2400ef4e:	f7f9 f9e1 	bl	24008314 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
2400ef52:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
2400ef54:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
2400ef56:	4608      	mov	r0, r1
2400ef58:	f7f9 f9dc 	bl	24008314 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
2400ef5c:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
2400ef5e:	6460      	str	r0, [r4, #68]	; 0x44
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
2400ef60:	4608      	mov	r0, r1
2400ef62:	f7f9 f9d7 	bl	24008314 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
2400ef66:	2100      	movs	r1, #0
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
2400ef68:	64a0      	str	r0, [r4, #72]	; 0x48
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
2400ef6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
2400ef6c:	f7fa f84b 	bl	24009006 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
2400ef70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
2400ef72:	2100      	movs	r1, #0
2400ef74:	f7fa f847 	bl	24009006 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
2400ef78:	6c60      	ldr	r0, [r4, #68]	; 0x44
2400ef7a:	2100      	movs	r1, #0
2400ef7c:	f7f8 fe9d 	bl	24007cba <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
2400ef80:	2100      	movs	r1, #0
2400ef82:	6ca0      	ldr	r0, [r4, #72]	; 0x48
2400ef84:	f7f8 fe99 	bl	24007cba <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
2400ef88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400ef8a:	f7f9 f82b 	bl	24007fe4 <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
2400ef8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    disp_def = disp_def_tmp; /*Revert the default display*/
2400ef90:	602e      	str	r6, [r5, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
2400ef92:	f001 fbfb 	bl	2401078c <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
2400ef96:	e7a5      	b.n	2400eee4 <lv_disp_drv_register+0x10>
2400ef98:	2402db20 	.word	0x2402db20
2400ef9c:	2402db14 	.word	0x2402db14
2400efa0:	2400a085 	.word	0x2400a085
2400efa4:	9001acc2 	.word	0x9001acc2

2400efa8 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
2400efa8:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
2400efaa:	211c      	movs	r1, #28
{
2400efac:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
2400efae:	f000 ff27 	bl	2400fe00 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
2400efb2:	2300      	movs	r3, #0
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
2400efb4:	4a02      	ldr	r2, [pc, #8]	; (2400efc0 <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
2400efb6:	7023      	strb	r3, [r4, #0]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
2400efb8:	4b02      	ldr	r3, [pc, #8]	; (2400efc4 <lv_indev_drv_init+0x1c>)
2400efba:	e9c4 2305 	strd	r2, r3, [r4, #20]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
2400efbe:	bd10      	pop	{r4, pc}
2400efc0:	3203010a 	.word	0x3203010a
2400efc4:	00640190 	.word	0x00640190

2400efc8 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
2400efc8:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
2400efca:	68c3      	ldr	r3, [r0, #12]
{
2400efcc:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
2400efce:	b133      	cbz	r3, 2400efde <lv_indev_drv_register+0x16>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
2400efd0:	4813      	ldr	r0, [pc, #76]	; (2400f020 <lv_indev_drv_register+0x58>)
2400efd2:	f000 fb5a 	bl	2400f68a <_lv_ll_ins_head>
    if(!indev) {
2400efd6:	4604      	mov	r4, r0
2400efd8:	b940      	cbnz	r0, 2400efec <lv_indev_drv_register+0x24>
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);

    return indev;
}
2400efda:	4620      	mov	r0, r4
2400efdc:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
2400efde:	f7ff fedf 	bl	2400eda0 <lv_disp_get_default>
2400efe2:	4604      	mov	r4, r0
2400efe4:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
2400efe6:	2800      	cmp	r0, #0
2400efe8:	d0f7      	beq.n	2400efda <lv_indev_drv_register+0x12>
2400efea:	e7f1      	b.n	2400efd0 <lv_indev_drv_register+0x8>
    _lv_memset_00(indev, sizeof(lv_indev_t));
2400efec:	2160      	movs	r1, #96	; 0x60
2400efee:	f000 ff07 	bl	2400fe00 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
2400eff2:	221c      	movs	r2, #28
2400eff4:	4629      	mov	r1, r5
2400eff6:	4620      	mov	r0, r4
2400eff8:	f000 fd58 	bl	2400faac <_lv_memcpy>
    indev->proc.reset_query = 1;
2400effc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
2400f000:	2204      	movs	r2, #4
2400f002:	2101      	movs	r1, #1
    indev->proc.reset_query = 1;
2400f004:	f043 0302 	orr.w	r3, r3, #2
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
2400f008:	4806      	ldr	r0, [pc, #24]	; (2400f024 <lv_indev_drv_register+0x5c>)
    indev->proc.reset_query = 1;
2400f00a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
2400f00e:	2300      	movs	r3, #0
    indev->group            = NULL;
2400f010:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    indev->btn_points       = NULL;
2400f014:	65e3      	str	r3, [r4, #92]	; 0x5c
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
2400f016:	4623      	mov	r3, r4
2400f018:	f001 fba6 	bl	24010768 <lv_task_create>
2400f01c:	6120      	str	r0, [r4, #16]
    return indev;
2400f01e:	e7dc      	b.n	2400efda <lv_indev_drv_register+0x12>
2400f020:	2402dbc0 	.word	0x2402dbc0
2400f024:	24007a01 	.word	0x24007a01

2400f028 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
2400f028:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
2400f02a:	4803      	ldr	r0, [pc, #12]	; (2400f038 <lv_indev_get_next+0x10>)
    if(indev == NULL)
2400f02c:	b909      	cbnz	r1, 2400f032 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
2400f02e:	f000 bb63 	b.w	2400f6f8 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
2400f032:	f000 bb67 	b.w	2400f704 <_lv_ll_get_next>
2400f036:	bf00      	nop
2400f038:	2402dbc0 	.word	0x2402dbc0

2400f03c <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
2400f03c:	b570      	push	{r4, r5, r6, lr}
2400f03e:	460c      	mov	r4, r1
2400f040:	4605      	mov	r5, r0
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
2400f042:	2110      	movs	r1, #16
2400f044:	4620      	mov	r0, r4
2400f046:	f000 fedb 	bl	2400fe00 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
2400f04a:	782b      	ldrb	r3, [r5, #0]
2400f04c:	2b01      	cmp	r3, #1
2400f04e:	d10a      	bne.n	2400f066 <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.act_point.x;
2400f050:	8c2b      	ldrh	r3, [r5, #32]
2400f052:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
2400f054:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
2400f056:	8063      	strh	r3, [r4, #2]
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
2400f058:	686b      	ldr	r3, [r5, #4]
2400f05a:	b183      	cbz	r3, 2400f07e <_lv_indev_read+0x42>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
2400f05c:	4621      	mov	r1, r4
2400f05e:	4628      	mov	r0, r5
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
2400f060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
2400f064:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
2400f066:	2b02      	cmp	r3, #2
2400f068:	d102      	bne.n	2400f070 <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
2400f06a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
2400f06c:	6063      	str	r3, [r4, #4]
2400f06e:	e7f3      	b.n	2400f058 <_lv_indev_read+0x1c>
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
2400f070:	2b04      	cmp	r3, #4
        data->key = LV_KEY_ENTER;
2400f072:	bf01      	itttt	eq
2400f074:	230a      	moveq	r3, #10
2400f076:	6063      	streq	r3, [r4, #4]
        data->enc_diff = 0;
2400f078:	2300      	moveq	r3, #0
2400f07a:	81a3      	strheq	r3, [r4, #12]
2400f07c:	e7ec      	b.n	2400f058 <_lv_indev_read+0x1c>
}
2400f07e:	4618      	mov	r0, r3
2400f080:	bd70      	pop	{r4, r5, r6, pc}
	...

2400f084 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
2400f084:	4b03      	ldr	r3, [pc, #12]	; (2400f094 <lv_tick_inc+0x10>)
2400f086:	2200      	movs	r2, #0
2400f088:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
2400f08a:	4a03      	ldr	r2, [pc, #12]	; (2400f098 <lv_tick_inc+0x14>)
2400f08c:	6813      	ldr	r3, [r2, #0]
2400f08e:	4418      	add	r0, r3
2400f090:	6010      	str	r0, [r2, #0]
}
2400f092:	4770      	bx	lr
2400f094:	2402db1c 	.word	0x2402db1c
2400f098:	2402db18 	.word	0x2402db18

2400f09c <lv_tick_get>:
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
2400f09c:	4b04      	ldr	r3, [pc, #16]	; (2400f0b0 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
2400f09e:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
2400f0a2:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
2400f0a4:	4b03      	ldr	r3, [pc, #12]	; (2400f0b4 <lv_tick_get+0x18>)
2400f0a6:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
2400f0a8:	781a      	ldrb	r2, [r3, #0]
2400f0aa:	2a00      	cmp	r2, #0
2400f0ac:	d0fb      	beq.n	2400f0a6 <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
2400f0ae:	4770      	bx	lr
2400f0b0:	2402db18 	.word	0x2402db18
2400f0b4:	2402db1c 	.word	0x2402db1c

2400f0b8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
2400f0b8:	b510      	push	{r4, lr}
2400f0ba:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
2400f0bc:	f7ff ffee 	bl	2400f09c <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
2400f0c0:	1b00      	subs	r0, r0, r4
2400f0c2:	bd10      	pop	{r4, pc}

2400f0c4 <lv_point_within_circle.isra.0>:
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
2400f0c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
2400f0c8:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
2400f0ca:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
2400f0ce:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
2400f0d0:	1b5b      	subs	r3, r3, r5
    lv_coord_t px = p->x - cx;
2400f0d2:	1b49      	subs	r1, r1, r5
    lv_coord_t py = p->y - cy;
2400f0d4:	1a12      	subs	r2, r2, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
2400f0d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2400f0da:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
2400f0dc:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t py = p->y - cy;
2400f0e0:	1ad2      	subs	r2, r2, r3
    lv_coord_t px = p->x - cx;
2400f0e2:	1ac9      	subs	r1, r1, r3

    int32_t r_sqrd = r * r;
2400f0e4:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
2400f0e6:	fb12 f202 	smulbb	r2, r2, r2
2400f0ea:	fb11 2101 	smlabb	r1, r1, r1, r2

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
2400f0ee:	428c      	cmp	r4, r1
2400f0f0:	bfb4      	ite	lt
2400f0f2:	2000      	movlt	r0, #0
2400f0f4:	2001      	movge	r0, #1
2400f0f6:	bd30      	pop	{r4, r5, pc}

2400f0f8 <lv_area_set>:
    area_p->x2 = x2;
2400f0f8:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
2400f0fa:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
2400f0fe:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
2400f100:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
2400f102:	80c3      	strh	r3, [r0, #6]
}
2400f104:	4770      	bx	lr

2400f106 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
2400f106:	3901      	subs	r1, #1
2400f108:	8803      	ldrh	r3, [r0, #0]
2400f10a:	4419      	add	r1, r3
2400f10c:	8081      	strh	r1, [r0, #4]
}
2400f10e:	4770      	bx	lr

2400f110 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
2400f110:	3901      	subs	r1, #1
2400f112:	8843      	ldrh	r3, [r0, #2]
2400f114:	4419      	add	r1, r3
2400f116:	80c1      	strh	r1, [r0, #6]
}
2400f118:	4770      	bx	lr

2400f11a <_lv_area_set_pos>:
{
2400f11a:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f11c:	88c3      	ldrh	r3, [r0, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f11e:	8884      	ldrh	r4, [r0, #4]
2400f120:	8806      	ldrh	r6, [r0, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f122:	8845      	ldrh	r5, [r0, #2]
    area_p->x1   = x;
2400f124:	8001      	strh	r1, [r0, #0]
    area_p->x2 = area_p->x1 + w - 1;
2400f126:	4421      	add	r1, r4
    area_p->y1   = y;
2400f128:	8042      	strh	r2, [r0, #2]
    area_p->y2 = area_p->y1 + h - 1;
2400f12a:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
2400f12c:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
2400f12e:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
2400f130:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
2400f132:	80c2      	strh	r2, [r0, #6]
}
2400f134:	bd70      	pop	{r4, r5, r6, pc}

2400f136 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
2400f136:	f9b0 3000 	ldrsh.w	r3, [r0]
2400f13a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
2400f13e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
2400f142:	1ad2      	subs	r2, r2, r3
2400f144:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
2400f148:	1a58      	subs	r0, r3, r1
2400f14a:	3001      	adds	r0, #1
}
2400f14c:	fb02 0000 	mla	r0, r2, r0, r0
2400f150:	4770      	bx	lr

2400f152 <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
2400f152:	f9b1 3000 	ldrsh.w	r3, [r1]
{
2400f156:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
2400f158:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
2400f15c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
2400f160:	429d      	cmp	r5, r3
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
2400f162:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
2400f166:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
2400f16a:	bfb8      	it	lt
2400f16c:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
2400f16e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
2400f172:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
2400f174:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
2400f176:	bfb8      	it	lt
2400f178:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
2400f17a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
2400f17e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
2400f182:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
2400f184:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
2400f186:	bfa8      	it	ge
2400f188:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
2400f18a:	428a      	cmp	r2, r1
2400f18c:	bfa8      	it	ge
2400f18e:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
2400f190:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
2400f192:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
2400f194:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
2400f196:	dc04      	bgt.n	2400f1a2 <_lv_area_intersect+0x50>
2400f198:	4293      	cmp	r3, r2
2400f19a:	bfcc      	ite	gt
2400f19c:	2000      	movgt	r0, #0
2400f19e:	2001      	movle	r0, #1
}
2400f1a0:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
2400f1a2:	2000      	movs	r0, #0
2400f1a4:	e7fc      	b.n	2400f1a0 <_lv_area_intersect+0x4e>

2400f1a6 <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
2400f1a6:	f9b2 3000 	ldrsh.w	r3, [r2]
{
2400f1aa:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
2400f1ac:	f9b1 4000 	ldrsh.w	r4, [r1]
2400f1b0:	42a3      	cmp	r3, r4
2400f1b2:	bfa8      	it	ge
2400f1b4:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
2400f1b6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
2400f1ba:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
2400f1bc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
2400f1c0:	42a3      	cmp	r3, r4
2400f1c2:	bfa8      	it	ge
2400f1c4:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
2400f1c6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
2400f1ca:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
2400f1cc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
2400f1d0:	42a3      	cmp	r3, r4
2400f1d2:	bfb8      	it	lt
2400f1d4:	4623      	movlt	r3, r4
2400f1d6:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
2400f1d8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
2400f1dc:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
2400f1e0:	4293      	cmp	r3, r2
2400f1e2:	bfb8      	it	lt
2400f1e4:	4613      	movlt	r3, r2
2400f1e6:	80c3      	strh	r3, [r0, #6]
}
2400f1e8:	bd10      	pop	{r4, pc}

2400f1ea <_lv_area_is_point_on>:
{
2400f1ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
2400f1ee:	f9b1 9000 	ldrsh.w	r9, [r1]
{
2400f1f2:	b087      	sub	sp, #28
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
2400f1f4:	f9b0 4000 	ldrsh.w	r4, [r0]
{
2400f1f8:	4688      	mov	r8, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
2400f1fa:	45a1      	cmp	r9, r4
2400f1fc:	f2c0 8088 	blt.w	2400f310 <_lv_area_is_point_on+0x126>
2400f200:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
2400f204:	4599      	cmp	r9, r3
2400f206:	9301      	str	r3, [sp, #4]
2400f208:	f300 8082 	bgt.w	2400f310 <_lv_area_is_point_on+0x126>
2400f20c:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
2400f210:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
2400f214:	45da      	cmp	sl, fp
2400f216:	db7b      	blt.n	2400f310 <_lv_area_is_point_on+0x126>
2400f218:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
2400f21c:	459a      	cmp	sl, r3
2400f21e:	dc77      	bgt.n	2400f310 <_lv_area_is_point_on+0x126>
    if(radius <= 0) {
2400f220:	2a00      	cmp	r2, #0
2400f222:	dc03      	bgt.n	2400f22c <_lv_area_is_point_on+0x42>
        return true;
2400f224:	2001      	movs	r0, #1
}
2400f226:	b007      	add	sp, #28
2400f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f22c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
2400f230:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f232:	b29e      	uxth	r6, r3
    corner_area.x1 = a_p->x1;
2400f234:	f8ad 4010 	strh.w	r4, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f238:	9002      	str	r0, [sp, #8]
2400f23a:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f23c:	fa1f fc8b 	uxth.w	ip, fp
2400f240:	9303      	str	r3, [sp, #12]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f242:	1bc0      	subs	r0, r0, r7
    corner_area.y1 = a_p->y1;
2400f244:	f8ad b012 	strh.w	fp, [sp, #18]
    lv_coord_t w = lv_area_get_width(a_p) / 2;
2400f248:	f3c0 34c0 	ubfx	r4, r0, #15, #1
2400f24c:	fa04 f080 	sxtah	r0, r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f250:	1c74      	adds	r4, r6, #1
2400f252:	eba4 040c 	sub.w	r4, r4, ip
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
2400f256:	1040      	asrs	r0, r0, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
2400f258:	f3c4 35c0 	ubfx	r5, r4, #15, #1
2400f25c:	fa05 f584 	sxtah	r5, r5, r4
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
2400f260:	106d      	asrs	r5, r5, #1
    corner_area.x2 = a_p->x1 + radius;
2400f262:	42a8      	cmp	r0, r5
2400f264:	bfa8      	it	ge
2400f266:	4628      	movge	r0, r5
2400f268:	4290      	cmp	r0, r2
2400f26a:	bfa8      	it	ge
2400f26c:	4610      	movge	r0, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f26e:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
2400f270:	fa1c f480 	uxtah	r4, ip, r0
    corner_area.x2 = a_p->x1 + radius;
2400f274:	fa17 f780 	uxtah	r7, r7, r0
2400f278:	b285      	uxth	r5, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f27a:	a804      	add	r0, sp, #16
    corner_area.x2 = a_p->x1 + radius;
2400f27c:	b2bf      	uxth	r7, r7
    corner_area.y2 = a_p->y1 + radius;
2400f27e:	b224      	sxth	r4, r4
    corner_area.x2 = a_p->x1 + radius;
2400f280:	f8ad 7014 	strh.w	r7, [sp, #20]
    corner_area.y2 = a_p->y1 + radius;
2400f284:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f288:	f7ff ffaf 	bl	2400f1ea <_lv_area_is_point_on>
2400f28c:	9b03      	ldr	r3, [sp, #12]
2400f28e:	4602      	mov	r2, r0
2400f290:	b140      	cbz	r0, 2400f2a4 <_lv_area_is_point_on+0xba>
        corner_area.x2 += radius;
2400f292:	443d      	add	r5, r7
2400f294:	f8ad 5014 	strh.w	r5, [sp, #20]
        return lv_point_within_circle(&corner_area, p_p);
2400f298:	4652      	mov	r2, sl
2400f29a:	4649      	mov	r1, r9
2400f29c:	a804      	add	r0, sp, #16
2400f29e:	f7ff ff11 	bl	2400f0c4 <lv_point_within_circle.isra.0>
2400f2a2:	e7c0      	b.n	2400f226 <_lv_area_is_point_on+0x3c>
    corner_area.y1 = a_p->y2 - radius;
2400f2a4:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f2a6:	4641      	mov	r1, r8
2400f2a8:	a804      	add	r0, sp, #16
    corner_area.y2 = a_p->y2;
2400f2aa:	f8ad 3016 	strh.w	r3, [sp, #22]
    corner_area.y1 = a_p->y2 - radius;
2400f2ae:	b2b6      	uxth	r6, r6
2400f2b0:	f8ad 6012 	strh.w	r6, [sp, #18]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f2b4:	f7ff ff99 	bl	2400f1ea <_lv_area_is_point_on>
2400f2b8:	4602      	mov	r2, r0
2400f2ba:	b130      	cbz	r0, 2400f2ca <_lv_area_is_point_on+0xe0>
        corner_area.x2 += radius;
2400f2bc:	442f      	add	r7, r5
        corner_area.y1 -= radius;
2400f2be:	1b75      	subs	r5, r6, r5
        corner_area.x2 += radius;
2400f2c0:	f8ad 7014 	strh.w	r7, [sp, #20]
        corner_area.y1 -= radius;
2400f2c4:	f8ad 5012 	strh.w	r5, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
2400f2c8:	e7e6      	b.n	2400f298 <_lv_area_is_point_on+0xae>
    corner_area.x1 = a_p->x2 - radius;
2400f2ca:	9b02      	ldr	r3, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f2cc:	4641      	mov	r1, r8
2400f2ce:	a804      	add	r0, sp, #16
    corner_area.x1 = a_p->x2 - radius;
2400f2d0:	1b5f      	subs	r7, r3, r5
    corner_area.x2 = a_p->x2;
2400f2d2:	9b01      	ldr	r3, [sp, #4]
    corner_area.x1 = a_p->x2 - radius;
2400f2d4:	b2bf      	uxth	r7, r7
    corner_area.x2 = a_p->x2;
2400f2d6:	f8ad 3014 	strh.w	r3, [sp, #20]
    corner_area.x1 = a_p->x2 - radius;
2400f2da:	f8ad 7010 	strh.w	r7, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f2de:	f7ff ff84 	bl	2400f1ea <_lv_area_is_point_on>
2400f2e2:	4602      	mov	r2, r0
2400f2e4:	b130      	cbz	r0, 2400f2f4 <_lv_area_is_point_on+0x10a>
        corner_area.x1 -= radius;
2400f2e6:	1b7f      	subs	r7, r7, r5
        corner_area.y1 -= radius;
2400f2e8:	1b76      	subs	r6, r6, r5
        corner_area.x1 -= radius;
2400f2ea:	f8ad 7010 	strh.w	r7, [sp, #16]
        corner_area.y1 -= radius;
2400f2ee:	f8ad 6012 	strh.w	r6, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
2400f2f2:	e7d1      	b.n	2400f298 <_lv_area_is_point_on+0xae>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f2f4:	4641      	mov	r1, r8
2400f2f6:	a804      	add	r0, sp, #16
    corner_area.y1 = a_p->y1;
2400f2f8:	f8ad b012 	strh.w	fp, [sp, #18]
    corner_area.y2 = a_p->y1 + radius;
2400f2fc:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
2400f300:	f7ff ff73 	bl	2400f1ea <_lv_area_is_point_on>
2400f304:	2800      	cmp	r0, #0
2400f306:	d08d      	beq.n	2400f224 <_lv_area_is_point_on+0x3a>
        corner_area.x1 -= radius;
2400f308:	1b7f      	subs	r7, r7, r5
2400f30a:	f8ad 7010 	strh.w	r7, [sp, #16]
2400f30e:	e7c3      	b.n	2400f298 <_lv_area_is_point_on+0xae>
        return false;
2400f310:	2000      	movs	r0, #0
2400f312:	e788      	b.n	2400f226 <_lv_area_is_point_on+0x3c>

2400f314 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
2400f314:	f9b0 2000 	ldrsh.w	r2, [r0]
2400f318:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
2400f31c:	429a      	cmp	r2, r3
2400f31e:	dc14      	bgt.n	2400f34a <_lv_area_is_on+0x36>
2400f320:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
2400f324:	f9b1 3000 	ldrsh.w	r3, [r1]
2400f328:	429a      	cmp	r2, r3
2400f32a:	db0e      	blt.n	2400f34a <_lv_area_is_on+0x36>
2400f32c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
2400f330:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
2400f334:	429a      	cmp	r2, r3
2400f336:	dc08      	bgt.n	2400f34a <_lv_area_is_on+0x36>
2400f338:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
2400f33c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
2400f340:	4298      	cmp	r0, r3
2400f342:	bfb4      	ite	lt
2400f344:	2000      	movlt	r0, #0
2400f346:	2001      	movge	r0, #1
2400f348:	4770      	bx	lr
        return false;
2400f34a:	2000      	movs	r0, #0
}
2400f34c:	4770      	bx	lr

2400f34e <_lv_area_is_in>:
{
2400f34e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
2400f350:	f9b1 3000 	ldrsh.w	r3, [r1]
{
2400f354:	b085      	sub	sp, #20
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
2400f356:	f9b0 6000 	ldrsh.w	r6, [r0]
{
2400f35a:	4605      	mov	r5, r0
2400f35c:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
2400f35e:	42b3      	cmp	r3, r6
2400f360:	dc23      	bgt.n	2400f3aa <_lv_area_is_in+0x5c>
2400f362:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
2400f366:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
2400f36a:	4299      	cmp	r1, r3
2400f36c:	db1d      	blt.n	2400f3aa <_lv_area_is_in+0x5c>
2400f36e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
2400f372:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
2400f376:	4299      	cmp	r1, r3
2400f378:	dc17      	bgt.n	2400f3aa <_lv_area_is_in+0x5c>
2400f37a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
2400f37e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
2400f382:	428b      	cmp	r3, r1
2400f384:	bfcc      	ite	gt
2400f386:	2000      	movgt	r0, #0
2400f388:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
2400f38a:	b162      	cbz	r2, 2400f3a6 <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
2400f38c:	886b      	ldrh	r3, [r5, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f38e:	a903      	add	r1, sp, #12
2400f390:	4620      	mov	r0, r4
2400f392:	9201      	str	r2, [sp, #4]
    p.x = ain_p->x1;
2400f394:	f8ad 600c 	strh.w	r6, [sp, #12]
    p.y = ain_p->y1;
2400f398:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f39c:	f7ff ff25 	bl	2400f1ea <_lv_area_is_point_on>
2400f3a0:	9a01      	ldr	r2, [sp, #4]
2400f3a2:	b920      	cbnz	r0, 2400f3ae <_lv_area_is_in+0x60>
2400f3a4:	2000      	movs	r0, #0
}
2400f3a6:	b005      	add	sp, #20
2400f3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
2400f3aa:	2000      	movs	r0, #0
2400f3ac:	e7ed      	b.n	2400f38a <_lv_area_is_in+0x3c>
    p.x = ain_p->x2;
2400f3ae:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3b2:	a903      	add	r1, sp, #12
2400f3b4:	4620      	mov	r0, r4
2400f3b6:	9201      	str	r2, [sp, #4]
    p.x = ain_p->x2;
2400f3b8:	f8ad 700c 	strh.w	r7, [sp, #12]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3bc:	f7ff ff15 	bl	2400f1ea <_lv_area_is_point_on>
2400f3c0:	2800      	cmp	r0, #0
2400f3c2:	d0ef      	beq.n	2400f3a4 <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
2400f3c4:	88eb      	ldrh	r3, [r5, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3c6:	a903      	add	r1, sp, #12
2400f3c8:	9a01      	ldr	r2, [sp, #4]
2400f3ca:	4620      	mov	r0, r4
    p.x = ain_p->x1;
2400f3cc:	f8ad 600c 	strh.w	r6, [sp, #12]
    p.y = ain_p->y2;
2400f3d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3d4:	f7ff ff09 	bl	2400f1ea <_lv_area_is_point_on>
2400f3d8:	2800      	cmp	r0, #0
2400f3da:	d0e3      	beq.n	2400f3a4 <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3dc:	9a01      	ldr	r2, [sp, #4]
2400f3de:	a903      	add	r1, sp, #12
2400f3e0:	4620      	mov	r0, r4
    p.x = ain_p->x2;
2400f3e2:	f8ad 700c 	strh.w	r7, [sp, #12]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
2400f3e6:	f7ff ff00 	bl	2400f1ea <_lv_area_is_point_on>
2400f3ea:	e7dc      	b.n	2400f3a6 <_lv_area_is_in+0x58>

2400f3ec <_lv_area_align>:
{
2400f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
2400f3ee:	8844      	ldrh	r4, [r0, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f3f0:	8805      	ldrh	r5, [r0, #0]
    switch(align) {
2400f3f2:	2a14      	cmp	r2, #20
2400f3f4:	d83f      	bhi.n	2400f476 <_lv_area_align+0x8a>
2400f3f6:	e8df f012 	tbh	[pc, r2, lsl #1]
2400f3fa:	0015      	.short	0x0015
2400f3fc:	0045003b 	.word	0x0045003b
2400f400:	0061005a 	.word	0x0061005a
2400f404:	007c0069 	.word	0x007c0069
2400f408:	00850083 	.word	0x00850083
2400f40c:	0093008c 	.word	0x0093008c
2400f410:	00ad00a6 	.word	0x00ad00a6
2400f414:	00c600b3 	.word	0x00c600b3
2400f418:	00d200cd 	.word	0x00d200cd
2400f41c:	00dc00d7 	.word	0x00dc00d7
2400f420:	00e200df 	.word	0x00e200df
2400f424:	8882      	ldrh	r2, [r0, #4]
2400f426:	880f      	ldrh	r7, [r1, #0]
2400f428:	3201      	adds	r2, #1
2400f42a:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
2400f42c:	f3c2 36c0 	ubfx	r6, r2, #15, #1
2400f430:	fa06 f682 	sxtah	r6, r6, r2
2400f434:	888a      	ldrh	r2, [r1, #4]
2400f436:	3201      	adds	r2, #1
2400f438:	1bd2      	subs	r2, r2, r7
2400f43a:	f3c2 37c0 	ubfx	r7, r2, #15, #1
2400f43e:	fa07 f282 	sxtah	r2, r7, r2
2400f442:	1052      	asrs	r2, r2, #1
2400f444:	ebc2 0266 	rsb	r2, r2, r6, asr #1
            res->x = lv_area_get_width(base);
2400f448:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f44a:	88c2      	ldrh	r2, [r0, #6]
2400f44c:	3201      	adds	r2, #1
2400f44e:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
2400f450:	f3c2 30c0 	ubfx	r0, r2, #15, #1
2400f454:	fa00 f082 	sxtah	r0, r0, r2
2400f458:	88ca      	ldrh	r2, [r1, #6]
2400f45a:	8849      	ldrh	r1, [r1, #2]
2400f45c:	3201      	adds	r2, #1
2400f45e:	1a52      	subs	r2, r2, r1
2400f460:	f3c2 31c0 	ubfx	r1, r2, #15, #1
2400f464:	fa01 f282 	sxtah	r2, r1, r2
2400f468:	1052      	asrs	r2, r2, #1
2400f46a:	ebc2 0260 	rsb	r2, r2, r0, asr #1
2400f46e:	e001      	b.n	2400f474 <_lv_area_align+0x88>
            res->x = 0;
2400f470:	2200      	movs	r2, #0
2400f472:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
2400f474:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
2400f476:	881a      	ldrh	r2, [r3, #0]
2400f478:	4415      	add	r5, r2
    res->y += base->y1;
2400f47a:	885a      	ldrh	r2, [r3, #2]
2400f47c:	4414      	add	r4, r2
    res->x += base->x1;
2400f47e:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
2400f480:	805c      	strh	r4, [r3, #2]
}
2400f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f484:	8882      	ldrh	r2, [r0, #4]
2400f486:	3201      	adds	r2, #1
2400f488:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
2400f48a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
2400f48e:	fa00 f082 	sxtah	r0, r0, r2
2400f492:	888a      	ldrh	r2, [r1, #4]
2400f494:	8809      	ldrh	r1, [r1, #0]
2400f496:	3201      	adds	r2, #1
2400f498:	1a52      	subs	r2, r2, r1
2400f49a:	f3c2 31c0 	ubfx	r1, r2, #15, #1
2400f49e:	fa01 f282 	sxtah	r2, r1, r2
2400f4a2:	1052      	asrs	r2, r2, #1
2400f4a4:	ebc2 0260 	rsb	r2, r2, r0, asr #1
            res->x = lv_area_get_width(base);
2400f4a8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
2400f4aa:	2200      	movs	r2, #0
2400f4ac:	e7e2      	b.n	2400f474 <_lv_area_align+0x88>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f4ae:	880a      	ldrh	r2, [r1, #0]
2400f4b0:	8889      	ldrh	r1, [r1, #4]
2400f4b2:	1a52      	subs	r2, r2, r1
2400f4b4:	8881      	ldrh	r1, [r0, #4]
2400f4b6:	440a      	add	r2, r1
2400f4b8:	1b52      	subs	r2, r2, r5
2400f4ba:	e7f5      	b.n	2400f4a8 <_lv_area_align+0xbc>
            res->x = 0;
2400f4bc:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
2400f4be:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
2400f4c0:	884a      	ldrh	r2, [r1, #2]
2400f4c2:	88c9      	ldrh	r1, [r1, #6]
2400f4c4:	1a52      	subs	r2, r2, r1
2400f4c6:	88c1      	ldrh	r1, [r0, #6]
2400f4c8:	440a      	add	r2, r1
2400f4ca:	e047      	b.n	2400f55c <_lv_area_align+0x170>
2400f4cc:	8882      	ldrh	r2, [r0, #4]
2400f4ce:	880f      	ldrh	r7, [r1, #0]
2400f4d0:	3201      	adds	r2, #1
2400f4d2:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
2400f4d4:	f3c2 36c0 	ubfx	r6, r2, #15, #1
2400f4d8:	fa06 f682 	sxtah	r6, r6, r2
2400f4dc:	888a      	ldrh	r2, [r1, #4]
2400f4de:	3201      	adds	r2, #1
2400f4e0:	1bd2      	subs	r2, r2, r7
2400f4e2:	f3c2 37c0 	ubfx	r7, r2, #15, #1
2400f4e6:	fa07 f282 	sxtah	r2, r7, r2
2400f4ea:	1052      	asrs	r2, r2, #1
2400f4ec:	ebc2 0266 	rsb	r2, r2, r6, asr #1
2400f4f0:	e7e5      	b.n	2400f4be <_lv_area_align+0xd2>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f4f2:	888e      	ldrh	r6, [r1, #4]
2400f4f4:	880a      	ldrh	r2, [r1, #0]
2400f4f6:	1b92      	subs	r2, r2, r6
2400f4f8:	8886      	ldrh	r6, [r0, #4]
2400f4fa:	4432      	add	r2, r6
2400f4fc:	1b52      	subs	r2, r2, r5
2400f4fe:	e7de      	b.n	2400f4be <_lv_area_align+0xd2>
            res->x = 0;
2400f500:	2200      	movs	r2, #0
2400f502:	e7a1      	b.n	2400f448 <_lv_area_align+0x5c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f504:	888e      	ldrh	r6, [r1, #4]
2400f506:	880a      	ldrh	r2, [r1, #0]
2400f508:	1b92      	subs	r2, r2, r6
2400f50a:	8886      	ldrh	r6, [r0, #4]
2400f50c:	4432      	add	r2, r6
2400f50e:	1b52      	subs	r2, r2, r5
2400f510:	e79a      	b.n	2400f448 <_lv_area_align+0x5c>
            res->x = 0;
2400f512:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f514:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
2400f516:	884a      	ldrh	r2, [r1, #2]
2400f518:	88c9      	ldrh	r1, [r1, #6]
2400f51a:	3a01      	subs	r2, #1
2400f51c:	1a52      	subs	r2, r2, r1
2400f51e:	e7a9      	b.n	2400f474 <_lv_area_align+0x88>
2400f520:	8882      	ldrh	r2, [r0, #4]
2400f522:	880e      	ldrh	r6, [r1, #0]
2400f524:	3201      	adds	r2, #1
2400f526:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
2400f528:	f3c2 30c0 	ubfx	r0, r2, #15, #1
2400f52c:	fa00 f082 	sxtah	r0, r0, r2
2400f530:	888a      	ldrh	r2, [r1, #4]
2400f532:	3201      	adds	r2, #1
2400f534:	1b92      	subs	r2, r2, r6
2400f536:	f3c2 36c0 	ubfx	r6, r2, #15, #1
2400f53a:	fa06 f282 	sxtah	r2, r6, r2
2400f53e:	1052      	asrs	r2, r2, #1
2400f540:	ebc2 0260 	rsb	r2, r2, r0, asr #1
2400f544:	e7e6      	b.n	2400f514 <_lv_area_align+0x128>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f546:	880a      	ldrh	r2, [r1, #0]
2400f548:	888e      	ldrh	r6, [r1, #4]
2400f54a:	8880      	ldrh	r0, [r0, #4]
2400f54c:	1b92      	subs	r2, r2, r6
2400f54e:	4402      	add	r2, r0
2400f550:	1b52      	subs	r2, r2, r5
2400f552:	e7df      	b.n	2400f514 <_lv_area_align+0x128>
            res->x = 0;
2400f554:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f556:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2400f558:	88c2      	ldrh	r2, [r0, #6]
2400f55a:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
2400f55c:	1b12      	subs	r2, r2, r4
2400f55e:	e789      	b.n	2400f474 <_lv_area_align+0x88>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2400f560:	8882      	ldrh	r2, [r0, #4]
2400f562:	3201      	adds	r2, #1
2400f564:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
2400f566:	f3c2 36c0 	ubfx	r6, r2, #15, #1
2400f56a:	fa06 f682 	sxtah	r6, r6, r2
2400f56e:	888a      	ldrh	r2, [r1, #4]
2400f570:	8809      	ldrh	r1, [r1, #0]
2400f572:	3201      	adds	r2, #1
2400f574:	1a52      	subs	r2, r2, r1
2400f576:	f3c2 31c0 	ubfx	r1, r2, #15, #1
2400f57a:	fa01 f282 	sxtah	r2, r1, r2
2400f57e:	1052      	asrs	r2, r2, #1
2400f580:	ebc2 0266 	rsb	r2, r2, r6, asr #1
2400f584:	e7e7      	b.n	2400f556 <_lv_area_align+0x16a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
2400f586:	880a      	ldrh	r2, [r1, #0]
2400f588:	8889      	ldrh	r1, [r1, #4]
2400f58a:	1a52      	subs	r2, r2, r1
2400f58c:	8881      	ldrh	r1, [r0, #4]
2400f58e:	440a      	add	r2, r1
2400f590:	1b52      	subs	r2, r2, r5
2400f592:	e7e0      	b.n	2400f556 <_lv_area_align+0x16a>
            res->x = -lv_area_get_width(to_align);
2400f594:	880a      	ldrh	r2, [r1, #0]
2400f596:	8889      	ldrh	r1, [r1, #4]
2400f598:	3a01      	subs	r2, #1
2400f59a:	1a52      	subs	r2, r2, r1
2400f59c:	e784      	b.n	2400f4a8 <_lv_area_align+0xbc>
            res->x = -lv_area_get_width(to_align);
2400f59e:	880a      	ldrh	r2, [r1, #0]
2400f5a0:	888e      	ldrh	r6, [r1, #4]
2400f5a2:	3a01      	subs	r2, #1
2400f5a4:	1b92      	subs	r2, r2, r6
2400f5a6:	e74f      	b.n	2400f448 <_lv_area_align+0x5c>
            res->x = -lv_area_get_width(to_align);
2400f5a8:	880a      	ldrh	r2, [r1, #0]
2400f5aa:	888e      	ldrh	r6, [r1, #4]
2400f5ac:	3a01      	subs	r2, #1
2400f5ae:	1b92      	subs	r2, r2, r6
2400f5b0:	e785      	b.n	2400f4be <_lv_area_align+0xd2>
2400f5b2:	8882      	ldrh	r2, [r0, #4]
2400f5b4:	3201      	adds	r2, #1
2400f5b6:	e77f      	b.n	2400f4b8 <_lv_area_align+0xcc>
2400f5b8:	8882      	ldrh	r2, [r0, #4]
2400f5ba:	3201      	adds	r2, #1
2400f5bc:	e7a7      	b.n	2400f50e <_lv_area_align+0x122>
2400f5be:	8882      	ldrh	r2, [r0, #4]
2400f5c0:	3201      	adds	r2, #1
2400f5c2:	e79b      	b.n	2400f4fc <_lv_area_align+0x110>

2400f5c4 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
2400f5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5c6:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400f5ca:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5ce:	f3c0 1445 	ubfx	r4, r0, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400f5d2:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5d6:	4373      	muls	r3, r6
2400f5d8:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400f5dc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5e0:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400f5e4:	f001 041f 	and.w	r4, r1, #31
2400f5e8:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5ea:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400f5ec:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
2400f5f0:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400f5f2:	3480      	adds	r4, #128	; 0x80
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
2400f5f4:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
2400f5f8:	436c      	muls	r4, r5
    return ret;
2400f5fa:	f3c4 54c4 	ubfx	r4, r4, #23, #5
2400f5fe:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2400f602:	f3c1 23c4 	ubfx	r3, r1, #11, #5
2400f606:	4373      	muls	r3, r6
2400f608:	fb00 3202 	mla	r2, r0, r2, r3
2400f60c:	f102 0380 	add.w	r3, r2, #128	; 0x80
2400f610:	436b      	muls	r3, r5
2400f612:	0ddb      	lsrs	r3, r3, #23
}
2400f614:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
2400f618:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400f61a <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
2400f61a:	0783      	lsls	r3, r0, #30
{
2400f61c:	b510      	push	{r4, lr}
2400f61e:	b28c      	uxth	r4, r1
        *buf = color;
        buf++;
        px_num--;
2400f620:	bf1c      	itt	ne
2400f622:	f102 32ff 	addne.w	r2, r2, #4294967295
        *buf = color;
2400f626:	f820 1b02 	strhne.w	r1, [r0], #2
    }

    uint32_t c32 = color.full + (color.full << 16);
2400f62a:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
2400f62e:	2a10      	cmp	r2, #16
2400f630:	4601      	mov	r1, r0
2400f632:	f100 0020 	add.w	r0, r0, #32
2400f636:	d804      	bhi.n	2400f642 <lv_color_fill+0x28>
2400f638:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
2400f63c:	428a      	cmp	r2, r1
2400f63e:	d10a      	bne.n	2400f656 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
2400f640:	bd10      	pop	{r4, pc}
        px_num -= 16;
2400f642:	3a10      	subs	r2, #16
        *buf32 = c32;
2400f644:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
2400f648:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
2400f64c:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
2400f650:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
2400f654:	e7eb      	b.n	2400f62e <lv_color_fill+0x14>
        *buf = color;
2400f656:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
2400f65a:	e7ef      	b.n	2400f63c <lv_color_fill+0x22>

2400f65c <lv_color_darken>:
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
2400f65c:	460a      	mov	r2, r1
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
2400f65e:	4601      	mov	r1, r0
2400f660:	f04f 0000 	mov.w	r0, #0
2400f664:	f7ff bfae 	b.w	2400f5c4 <lv_color_mix>

2400f668 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
2400f668:	b109      	cbz	r1, 2400f66e <node_set_prev+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
2400f66a:	6803      	ldr	r3, [r0, #0]
2400f66c:	50ca      	str	r2, [r1, r3]
}
2400f66e:	4770      	bx	lr

2400f670 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
2400f670:	b111      	cbz	r1, 2400f678 <node_set_next+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
2400f672:	6803      	ldr	r3, [r0, #0]
2400f674:	4419      	add	r1, r3
2400f676:	604a      	str	r2, [r1, #4]
}
2400f678:	4770      	bx	lr

2400f67a <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
2400f67a:	3103      	adds	r1, #3
    ll_p->head = NULL;
2400f67c:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
2400f67e:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
2400f682:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
2400f686:	6001      	str	r1, [r0, #0]
}
2400f688:	4770      	bx	lr

2400f68a <_lv_ll_ins_head>:
{
2400f68a:	b538      	push	{r3, r4, r5, lr}
2400f68c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
2400f68e:	6800      	ldr	r0, [r0, #0]
2400f690:	3008      	adds	r0, #8
2400f692:	f000 f973 	bl	2400f97c <lv_mem_alloc>
    if(n_new != NULL) {
2400f696:	4605      	mov	r5, r0
2400f698:	b180      	cbz	r0, 2400f6bc <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
2400f69a:	4601      	mov	r1, r0
2400f69c:	2200      	movs	r2, #0
2400f69e:	4620      	mov	r0, r4
2400f6a0:	f7ff ffe2 	bl	2400f668 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
2400f6a4:	6862      	ldr	r2, [r4, #4]
2400f6a6:	f7ff ffe3 	bl	2400f670 <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
2400f6aa:	6861      	ldr	r1, [r4, #4]
2400f6ac:	b111      	cbz	r1, 2400f6b4 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
2400f6ae:	462a      	mov	r2, r5
2400f6b0:	f7ff ffda 	bl	2400f668 <node_set_prev>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
2400f6b4:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
2400f6b6:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
2400f6b8:	b903      	cbnz	r3, 2400f6bc <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
2400f6ba:	60a5      	str	r5, [r4, #8]
}
2400f6bc:	4628      	mov	r0, r5
2400f6be:	bd38      	pop	{r3, r4, r5, pc}

2400f6c0 <_lv_ll_ins_tail>:
{
2400f6c0:	b538      	push	{r3, r4, r5, lr}
2400f6c2:	4605      	mov	r5, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
2400f6c4:	6800      	ldr	r0, [r0, #0]
2400f6c6:	3008      	adds	r0, #8
2400f6c8:	f000 f958 	bl	2400f97c <lv_mem_alloc>
    if(n_new != NULL) {
2400f6cc:	4604      	mov	r4, r0
2400f6ce:	b188      	cbz	r0, 2400f6f4 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
2400f6d0:	4601      	mov	r1, r0
2400f6d2:	2200      	movs	r2, #0
2400f6d4:	4628      	mov	r0, r5
2400f6d6:	f7ff ffcb 	bl	2400f670 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
2400f6da:	4621      	mov	r1, r4
2400f6dc:	68aa      	ldr	r2, [r5, #8]
2400f6de:	f7ff ffc3 	bl	2400f668 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
2400f6e2:	68a9      	ldr	r1, [r5, #8]
2400f6e4:	b111      	cbz	r1, 2400f6ec <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
2400f6e6:	4622      	mov	r2, r4
2400f6e8:	f7ff ffc2 	bl	2400f670 <node_set_next>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
2400f6ec:	686b      	ldr	r3, [r5, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
2400f6ee:	60ac      	str	r4, [r5, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
2400f6f0:	b903      	cbnz	r3, 2400f6f4 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
2400f6f2:	606c      	str	r4, [r5, #4]
}
2400f6f4:	4620      	mov	r0, r4
2400f6f6:	bd38      	pop	{r3, r4, r5, pc}

2400f6f8 <_lv_ll_get_head>:
    if(ll_p != NULL) {
2400f6f8:	b100      	cbz	r0, 2400f6fc <_lv_ll_get_head+0x4>
        head = ll_p->head;
2400f6fa:	6840      	ldr	r0, [r0, #4]
}
2400f6fc:	4770      	bx	lr

2400f6fe <_lv_ll_get_tail>:
    if(ll_p != NULL) {
2400f6fe:	b100      	cbz	r0, 2400f702 <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
2400f700:	6880      	ldr	r0, [r0, #8]
}
2400f702:	4770      	bx	lr

2400f704 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
2400f704:	b110      	cbz	r0, 2400f70c <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
2400f706:	6803      	ldr	r3, [r0, #0]
2400f708:	4419      	add	r1, r3
2400f70a:	6848      	ldr	r0, [r1, #4]
}
2400f70c:	4770      	bx	lr

2400f70e <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
2400f70e:	b108      	cbz	r0, 2400f714 <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
2400f710:	6803      	ldr	r3, [r0, #0]
2400f712:	58c8      	ldr	r0, [r1, r3]
}
2400f714:	4770      	bx	lr

2400f716 <_lv_ll_ins_prev>:
{
2400f716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400f718:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
2400f71a:	4605      	mov	r5, r0
2400f71c:	b328      	cbz	r0, 2400f76a <_lv_ll_ins_prev+0x54>
2400f71e:	b331      	cbz	r1, 2400f76e <_lv_ll_ins_prev+0x58>
    if(_lv_ll_get_head(ll_p) == n_act) {
2400f720:	6843      	ldr	r3, [r0, #4]
2400f722:	4299      	cmp	r1, r3
2400f724:	d103      	bne.n	2400f72e <_lv_ll_ins_prev+0x18>
}
2400f726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = _lv_ll_ins_head(ll_p);
2400f72a:	f7ff bfae 	b.w	2400f68a <_lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
2400f72e:	6800      	ldr	r0, [r0, #0]
2400f730:	3008      	adds	r0, #8
2400f732:	f000 f923 	bl	2400f97c <lv_mem_alloc>
        if(n_new == NULL) return NULL;
2400f736:	4604      	mov	r4, r0
2400f738:	b1a8      	cbz	r0, 2400f766 <_lv_ll_ins_prev+0x50>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
2400f73a:	4631      	mov	r1, r6
2400f73c:	4628      	mov	r0, r5
2400f73e:	f7ff ffe6 	bl	2400f70e <_lv_ll_get_prev>
2400f742:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
2400f744:	4601      	mov	r1, r0
2400f746:	4622      	mov	r2, r4
2400f748:	4628      	mov	r0, r5
2400f74a:	f7ff ff91 	bl	2400f670 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
2400f74e:	463a      	mov	r2, r7
2400f750:	4621      	mov	r1, r4
2400f752:	f7ff ff89 	bl	2400f668 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
2400f756:	4622      	mov	r2, r4
2400f758:	4631      	mov	r1, r6
2400f75a:	f7ff ff85 	bl	2400f668 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
2400f75e:	4632      	mov	r2, r6
2400f760:	4621      	mov	r1, r4
2400f762:	f7ff ff85 	bl	2400f670 <node_set_next>
}
2400f766:	4620      	mov	r0, r4
2400f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
2400f76a:	4604      	mov	r4, r0
2400f76c:	e7fb      	b.n	2400f766 <_lv_ll_ins_prev+0x50>
2400f76e:	460c      	mov	r4, r1
2400f770:	e7f9      	b.n	2400f766 <_lv_ll_ins_prev+0x50>

2400f772 <_lv_ll_remove>:
{
2400f772:	b570      	push	{r4, r5, r6, lr}
2400f774:	460b      	mov	r3, r1
    if(ll_p != NULL) {
2400f776:	4604      	mov	r4, r0
2400f778:	b308      	cbz	r0, 2400f7be <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
2400f77a:	6842      	ldr	r2, [r0, #4]
2400f77c:	4291      	cmp	r1, r2
2400f77e:	d10e      	bne.n	2400f79e <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
2400f780:	4619      	mov	r1, r3
2400f782:	4620      	mov	r0, r4
2400f784:	f7ff ffbe 	bl	2400f704 <_lv_ll_get_next>
2400f788:	4601      	mov	r1, r0
2400f78a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
2400f78c:	b908      	cbnz	r0, 2400f792 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
2400f78e:	60a0      	str	r0, [r4, #8]
}
2400f790:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
2400f792:	2200      	movs	r2, #0
2400f794:	4620      	mov	r0, r4
}
2400f796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
2400f79a:	f7ff bf65 	b.w	2400f668 <node_set_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
2400f79e:	6882      	ldr	r2, [r0, #8]
2400f7a0:	4291      	cmp	r1, r2
2400f7a2:	d10e      	bne.n	2400f7c2 <_lv_ll_remove+0x50>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
2400f7a4:	f7ff ffb3 	bl	2400f70e <_lv_ll_get_prev>
2400f7a8:	4601      	mov	r1, r0
2400f7aa:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
2400f7ac:	b908      	cbnz	r0, 2400f7b2 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
2400f7ae:	6060      	str	r0, [r4, #4]
2400f7b0:	e7ee      	b.n	2400f790 <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
2400f7b2:	4620      	mov	r0, r4
2400f7b4:	2200      	movs	r2, #0
}
2400f7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
2400f7ba:	f7ff bf59 	b.w	2400f670 <node_set_next>
    if(_lv_ll_get_head(ll_p) == node_p) {
2400f7be:	2900      	cmp	r1, #0
2400f7c0:	d0de      	beq.n	2400f780 <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
2400f7c2:	4619      	mov	r1, r3
2400f7c4:	4620      	mov	r0, r4
2400f7c6:	f7ff ffa2 	bl	2400f70e <_lv_ll_get_prev>
2400f7ca:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
2400f7cc:	4620      	mov	r0, r4
2400f7ce:	f7ff ff99 	bl	2400f704 <_lv_ll_get_next>
2400f7d2:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
2400f7d4:	4602      	mov	r2, r0
2400f7d6:	4631      	mov	r1, r6
2400f7d8:	4620      	mov	r0, r4
2400f7da:	f7ff ff49 	bl	2400f670 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
2400f7de:	4632      	mov	r2, r6
2400f7e0:	4629      	mov	r1, r5
2400f7e2:	e7d8      	b.n	2400f796 <_lv_ll_remove+0x24>

2400f7e4 <_lv_ll_chg_list>:
{
2400f7e4:	b570      	push	{r4, r5, r6, lr}
2400f7e6:	461e      	mov	r6, r3
2400f7e8:	460c      	mov	r4, r1
    _lv_ll_remove(ll_ori_p, node);
2400f7ea:	4611      	mov	r1, r2
{
2400f7ec:	4615      	mov	r5, r2
    _lv_ll_remove(ll_ori_p, node);
2400f7ee:	f7ff ffc0 	bl	2400f772 <_lv_ll_remove>
    if(head) {
2400f7f2:	b18e      	cbz	r6, 2400f818 <_lv_ll_chg_list+0x34>
        node_set_prev(ll_new_p, node, NULL);
2400f7f4:	4629      	mov	r1, r5
2400f7f6:	2200      	movs	r2, #0
2400f7f8:	4620      	mov	r0, r4
2400f7fa:	f7ff ff35 	bl	2400f668 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
2400f7fe:	6862      	ldr	r2, [r4, #4]
2400f800:	f7ff ff36 	bl	2400f670 <node_set_next>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
2400f804:	6861      	ldr	r1, [r4, #4]
2400f806:	b111      	cbz	r1, 2400f80e <_lv_ll_chg_list+0x2a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
2400f808:	462a      	mov	r2, r5
2400f80a:	f7ff ff2d 	bl	2400f668 <node_set_prev>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
2400f80e:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
2400f810:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
2400f812:	b903      	cbnz	r3, 2400f816 <_lv_ll_chg_list+0x32>
            ll_new_p->tail = node;
2400f814:	60a5      	str	r5, [r4, #8]
}
2400f816:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
2400f818:	4629      	mov	r1, r5
2400f81a:	68a2      	ldr	r2, [r4, #8]
2400f81c:	4620      	mov	r0, r4
2400f81e:	f7ff ff23 	bl	2400f668 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
2400f822:	4632      	mov	r2, r6
2400f824:	f7ff ff24 	bl	2400f670 <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
2400f828:	68a1      	ldr	r1, [r4, #8]
2400f82a:	b111      	cbz	r1, 2400f832 <_lv_ll_chg_list+0x4e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
2400f82c:	462a      	mov	r2, r5
2400f82e:	f7ff ff1f 	bl	2400f670 <node_set_next>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
2400f832:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
2400f834:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
2400f836:	2b00      	cmp	r3, #0
2400f838:	d1ed      	bne.n	2400f816 <_lv_ll_chg_list+0x32>
            ll_new_p->head = node;
2400f83a:	6065      	str	r5, [r4, #4]
}
2400f83c:	e7eb      	b.n	2400f816 <_lv_ll_chg_list+0x32>

2400f83e <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
2400f83e:	4291      	cmp	r1, r2
{
2400f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400f842:	4605      	mov	r5, r0
2400f844:	460c      	mov	r4, r1
2400f846:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
2400f848:	d01f      	beq.n	2400f88a <_lv_ll_move_before+0x4c>
    if(n_after != NULL)
2400f84a:	b1fa      	cbz	r2, 2400f88c <_lv_ll_move_before+0x4e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
2400f84c:	4611      	mov	r1, r2
2400f84e:	f7ff ff5e 	bl	2400f70e <_lv_ll_get_prev>
2400f852:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
2400f854:	42a6      	cmp	r6, r4
2400f856:	d018      	beq.n	2400f88a <_lv_ll_move_before+0x4c>
    _lv_ll_remove(ll_p, n_act);
2400f858:	4621      	mov	r1, r4
2400f85a:	4628      	mov	r0, r5
2400f85c:	f7ff ff89 	bl	2400f772 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
2400f860:	4628      	mov	r0, r5
2400f862:	4622      	mov	r2, r4
2400f864:	4631      	mov	r1, r6
2400f866:	f7ff ff03 	bl	2400f670 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
2400f86a:	4632      	mov	r2, r6
2400f86c:	4621      	mov	r1, r4
2400f86e:	f7ff fefb 	bl	2400f668 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
2400f872:	4622      	mov	r2, r4
2400f874:	4639      	mov	r1, r7
2400f876:	f7ff fef7 	bl	2400f668 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
2400f87a:	463a      	mov	r2, r7
2400f87c:	4621      	mov	r1, r4
2400f87e:	f7ff fef7 	bl	2400f670 <node_set_next>
    if(n_after == NULL) ll_p->tail = n_act;
2400f882:	b907      	cbnz	r7, 2400f886 <_lv_ll_move_before+0x48>
2400f884:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
2400f886:	b906      	cbnz	r6, 2400f88a <_lv_ll_move_before+0x4c>
2400f888:	606c      	str	r4, [r5, #4]
}
2400f88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
2400f88c:	b108      	cbz	r0, 2400f892 <_lv_ll_move_before+0x54>
        tail = ll_p->tail;
2400f88e:	6886      	ldr	r6, [r0, #8]
2400f890:	e7e0      	b.n	2400f854 <_lv_ll_move_before+0x16>
    void * tail = NULL;
2400f892:	4606      	mov	r6, r0
2400f894:	e7de      	b.n	2400f854 <_lv_ll_move_before+0x16>

2400f896 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
2400f896:	b130      	cbz	r0, 2400f8a6 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
2400f898:	6843      	ldr	r3, [r0, #4]
2400f89a:	b933      	cbnz	r3, 2400f8aa <_lv_ll_is_empty+0x14>
2400f89c:	6880      	ldr	r0, [r0, #8]
2400f89e:	fab0 f080 	clz	r0, r0
2400f8a2:	0940      	lsrs	r0, r0, #5
2400f8a4:	4770      	bx	lr
    if(ll_p == NULL) return true;
2400f8a6:	2001      	movs	r0, #1
2400f8a8:	4770      	bx	lr
    return false;
2400f8aa:	2000      	movs	r0, #0
}
2400f8ac:	4770      	bx	lr

2400f8ae <_lv_sqrt>:
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
2400f8ae:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
2400f8b0:	2300      	movs	r3, #0
{
2400f8b2:	b530      	push	{r4, r5, lr}
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
2400f8b4:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
2400f8b6:	fb04 f504 	mul.w	r5, r4, r4
2400f8ba:	42a8      	cmp	r0, r5
2400f8bc:	bf28      	it	cs
2400f8be:	4623      	movcs	r3, r4
        mask = mask >> 1;
    } while(mask);
2400f8c0:	0852      	lsrs	r2, r2, #1
2400f8c2:	d1f7      	bne.n	2400f8b4 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
2400f8c4:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
2400f8c6:	011b      	lsls	r3, r3, #4
    q->i = (uint32_t) root >> 4;
2400f8c8:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
2400f8ca:	b2db      	uxtb	r3, r3
2400f8cc:	804b      	strh	r3, [r1, #2]
}
2400f8ce:	bd30      	pop	{r4, r5, pc}

2400f8d0 <_lv_pow>:
 * @param base
 * @param power
 * @return base raised to the power exponent
 */
int64_t _lv_pow(int64_t base, int8_t exp)
{
2400f8d0:	b530      	push	{r4, r5, lr}
    int64_t result = 1;
2400f8d2:	2300      	movs	r3, #0
2400f8d4:	2401      	movs	r4, #1
    while(exp) {
2400f8d6:	b912      	cbnz	r2, 2400f8de <_lv_pow+0xe>
        exp >>= 1;
        base *= base;
    }

    return result;
}
2400f8d8:	4620      	mov	r0, r4
2400f8da:	4619      	mov	r1, r3
2400f8dc:	bd30      	pop	{r4, r5, pc}
        if(exp & 1)
2400f8de:	07d5      	lsls	r5, r2, #31
        exp >>= 1;
2400f8e0:	ea4f 0262 	mov.w	r2, r2, asr #1
            result *= base;
2400f8e4:	bf41      	itttt	mi
2400f8e6:	fb04 f501 	mulmi.w	r5, r4, r1
2400f8ea:	fb00 5503 	mlami	r5, r0, r3, r5
2400f8ee:	fba4 4300 	umullmi	r4, r3, r4, r0
2400f8f2:	195b      	addmi	r3, r3, r5
        base *= base;
2400f8f4:	fb00 f501 	mul.w	r5, r0, r1
2400f8f8:	fba0 0100 	umull	r0, r1, r0, r0
2400f8fc:	eb01 0145 	add.w	r1, r1, r5, lsl #1
2400f900:	e7e9      	b.n	2400f8d6 <_lv_pow+0x6>
	...

2400f904 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
2400f904:	4603      	mov	r3, r0
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
        next_e = (lv_mem_ent_t *)work_mem;
2400f906:	4a07      	ldr	r2, [pc, #28]	; (2400f924 <ent_get_next+0x20>)
2400f908:	6810      	ldr	r0, [r2, #0]
    if(act_e == NULL) { /*NULL means: get the first entry*/
2400f90a:	b153      	cbz	r3, 2400f922 <ent_get_next+0x1e>
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
2400f90c:	f853 2b04 	ldr.w	r2, [r3], #4
2400f910:	eb03 0352 	add.w	r3, r3, r2, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
2400f914:	f500 4200 	add.w	r2, r0, #32768	; 0x8000
2400f918:	1d19      	adds	r1, r3, #4
2400f91a:	4291      	cmp	r1, r2
2400f91c:	bf34      	ite	cc
2400f91e:	4618      	movcc	r0, r3
2400f920:	2000      	movcs	r0, #0
    }

    return next_e;
}
2400f922:	4770      	bx	lr
2400f924:	2402dc90 	.word	0x2402dc90

2400f928 <ent_trunc>:
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
2400f928:	3103      	adds	r1, #3
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
2400f92a:	6802      	ldr	r2, [r0, #0]
    size = (size + 3) & (~0x3);
2400f92c:	f021 0103 	bic.w	r1, r1, #3
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
2400f930:	f3c2 035e 	ubfx	r3, r2, #1, #31
{
2400f934:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
2400f936:	1d0c      	adds	r4, r1, #4
2400f938:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
2400f93c:	d00b      	beq.n	2400f956 <ent_trunc+0x2e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
2400f93e:	428b      	cmp	r3, r1
2400f940:	d004      	beq.n	2400f94c <ent_trunc+0x24>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
2400f942:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
2400f944:	1842      	adds	r2, r0, r1
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
2400f946:	1a5b      	subs	r3, r3, r1
        after_new_e->header.s.used   = 0;
2400f948:	005b      	lsls	r3, r3, #1
2400f94a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
2400f94c:	6803      	ldr	r3, [r0, #0]
2400f94e:	f361 035f 	bfi	r3, r1, #1, #31
2400f952:	6003      	str	r3, [r0, #0]
}
2400f954:	bd10      	pop	{r4, pc}
2400f956:	4619      	mov	r1, r3
2400f958:	e7f8      	b.n	2400f94c <ent_trunc+0x24>
	...

2400f95c <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
2400f95c:	4b04      	ldr	r3, [pc, #16]	; (2400f970 <_lv_mem_init+0x14>)
    mem_max_size = 0;
2400f95e:	2100      	movs	r1, #0
    work_mem = (uint8_t *)work_mem_int;
2400f960:	4a04      	ldr	r2, [pc, #16]	; (2400f974 <_lv_mem_init+0x18>)
2400f962:	6013      	str	r3, [r2, #0]
    mem_max_size = 0;
2400f964:	4a04      	ldr	r2, [pc, #16]	; (2400f978 <_lv_mem_init+0x1c>)
2400f966:	6011      	str	r1, [r2, #0]
    full->header.s.used = 0;
2400f968:	f64f 72f8 	movw	r2, #65528	; 0xfff8
2400f96c:	601a      	str	r2, [r3, #0]
}
2400f96e:	4770      	bx	lr
2400f970:	2402dc94 	.word	0x2402dc94
2400f974:	2402dc90 	.word	0x2402dc90
2400f978:	2402dc8c 	.word	0x2402dc8c

2400f97c <lv_mem_alloc>:
{
2400f97c:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
2400f97e:	b320      	cbz	r0, 2400f9ca <lv_mem_alloc+0x4e>
    size = (size + 3) & (~0x3);
2400f980:	3003      	adds	r0, #3
    lv_mem_ent_t * e = NULL;
2400f982:	2500      	movs	r5, #0
    size = (size + 3) & (~0x3);
2400f984:	f020 0403 	bic.w	r4, r0, #3
        e = ent_get_next(e);
2400f988:	4628      	mov	r0, r5
2400f98a:	f7ff ffbb 	bl	2400f904 <ent_get_next>
        if(e != NULL) {
2400f98e:	4605      	mov	r5, r0
2400f990:	b1c8      	cbz	r0, 2400f9c6 <lv_mem_alloc+0x4a>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
2400f992:	7803      	ldrb	r3, [r0, #0]
2400f994:	07db      	lsls	r3, r3, #31
2400f996:	d4f7      	bmi.n	2400f988 <lv_mem_alloc+0xc>
2400f998:	6803      	ldr	r3, [r0, #0]
2400f99a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
2400f99e:	d8f3      	bhi.n	2400f988 <lv_mem_alloc+0xc>
        ent_trunc(e, size);
2400f9a0:	4621      	mov	r1, r4
2400f9a2:	f7ff ffc1 	bl	2400f928 <ent_trunc>
        e->header.s.used = 1;
2400f9a6:	7803      	ldrb	r3, [r0, #0]
2400f9a8:	f043 0301 	orr.w	r3, r3, #1
2400f9ac:	f805 3b04 	strb.w	r3, [r5], #4
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
2400f9b0:	4b07      	ldr	r3, [pc, #28]	; (2400f9d0 <lv_mem_alloc+0x54>)
2400f9b2:	681b      	ldr	r3, [r3, #0]
2400f9b4:	429d      	cmp	r5, r3
2400f9b6:	d906      	bls.n	2400f9c6 <lv_mem_alloc+0x4a>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
2400f9b8:	1ae4      	subs	r4, r4, r3
2400f9ba:	4b06      	ldr	r3, [pc, #24]	; (2400f9d4 <lv_mem_alloc+0x58>)
2400f9bc:	442c      	add	r4, r5
2400f9be:	681a      	ldr	r2, [r3, #0]
2400f9c0:	4294      	cmp	r4, r2
2400f9c2:	d900      	bls.n	2400f9c6 <lv_mem_alloc+0x4a>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
2400f9c4:	601c      	str	r4, [r3, #0]
}
2400f9c6:	4628      	mov	r0, r5
2400f9c8:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
2400f9ca:	4d03      	ldr	r5, [pc, #12]	; (2400f9d8 <lv_mem_alloc+0x5c>)
2400f9cc:	e7fb      	b.n	2400f9c6 <lv_mem_alloc+0x4a>
2400f9ce:	bf00      	nop
2400f9d0:	2402dc90 	.word	0x2402dc90
2400f9d4:	2402dc8c 	.word	0x2402dc8c
2400f9d8:	24035c94 	.word	0x24035c94

2400f9dc <lv_mem_free>:
    if(data == &zero_mem) return;
2400f9dc:	4b05      	ldr	r3, [pc, #20]	; (2400f9f4 <lv_mem_free+0x18>)
2400f9de:	4298      	cmp	r0, r3
2400f9e0:	d006      	beq.n	2400f9f0 <lv_mem_free+0x14>
    if(data == NULL) return;
2400f9e2:	b128      	cbz	r0, 2400f9f0 <lv_mem_free+0x14>
    e->header.s.used = 0;
2400f9e4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
2400f9e8:	f36f 0300 	bfc	r3, #0, #1
2400f9ec:	f800 3c04 	strb.w	r3, [r0, #-4]
}
2400f9f0:	4770      	bx	lr
2400f9f2:	bf00      	nop
2400f9f4:	24035c94 	.word	0x24035c94

2400f9f8 <_lv_mem_get_size>:
    if(data == NULL) return 0;
2400f9f8:	b140      	cbz	r0, 2400fa0c <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
2400f9fa:	4b05      	ldr	r3, [pc, #20]	; (2400fa10 <_lv_mem_get_size+0x18>)
2400f9fc:	4298      	cmp	r0, r3
2400f9fe:	d004      	beq.n	2400fa0a <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
2400fa00:	f850 0c04 	ldr.w	r0, [r0, #-4]
2400fa04:	f3c0 005e 	ubfx	r0, r0, #1, #31
2400fa08:	4770      	bx	lr
    if(data == NULL) return 0;
2400fa0a:	2000      	movs	r0, #0
}
2400fa0c:	4770      	bx	lr
2400fa0e:	bf00      	nop
2400fa10:	24035c94 	.word	0x24035c94

2400fa14 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
2400fa14:	4b11      	ldr	r3, [pc, #68]	; (2400fa5c <_lv_mem_buf_release+0x48>)
2400fa16:	681a      	ldr	r2, [r3, #0]
2400fa18:	4290      	cmp	r0, r2
{
2400fa1a:	b510      	push	{r4, lr}
        if(mem_buf_small[i].p == p) {
2400fa1c:	d00a      	beq.n	2400fa34 <_lv_mem_buf_release+0x20>
2400fa1e:	689a      	ldr	r2, [r3, #8]
2400fa20:	4290      	cmp	r0, r2
2400fa22:	d109      	bne.n	2400fa38 <_lv_mem_buf_release+0x24>
2400fa24:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
2400fa26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
2400fa2a:	799a      	ldrb	r2, [r3, #6]
2400fa2c:	f36f 0200 	bfc	r2, #0, #1
2400fa30:	719a      	strb	r2, [r3, #6]
}
2400fa32:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
2400fa34:	2200      	movs	r2, #0
2400fa36:	e7f6      	b.n	2400fa26 <_lv_mem_buf_release+0x12>
2400fa38:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
2400fa3a:	4a09      	ldr	r2, [pc, #36]	; (2400fa60 <_lv_mem_buf_release+0x4c>)
2400fa3c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
2400fa40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
2400fa44:	4284      	cmp	r4, r0
2400fa46:	d104      	bne.n	2400fa52 <_lv_mem_buf_release+0x3e>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
2400fa48:	798b      	ldrb	r3, [r1, #6]
2400fa4a:	f36f 0300 	bfc	r3, #0, #1
2400fa4e:	718b      	strb	r3, [r1, #6]
            return;
2400fa50:	e7ef      	b.n	2400fa32 <_lv_mem_buf_release+0x1e>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
2400fa52:	3301      	adds	r3, #1
2400fa54:	2b10      	cmp	r3, #16
2400fa56:	d1f1      	bne.n	2400fa3c <_lv_mem_buf_release+0x28>
2400fa58:	e7eb      	b.n	2400fa32 <_lv_mem_buf_release+0x1e>
2400fa5a:	bf00      	nop
2400fa5c:	2401a6cc 	.word	0x2401a6cc
2400fa60:	2402dbcc 	.word	0x2402dbcc

2400fa64 <_lv_mem_buf_free_all>:
{
2400fa64:	b538      	push	{r3, r4, r5, lr}
        mem_buf_small[i].used = 0;
2400fa66:	4b0f      	ldr	r3, [pc, #60]	; (2400faa4 <_lv_mem_buf_free_all+0x40>)
2400fa68:	2100      	movs	r1, #0
2400fa6a:	799a      	ldrb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
2400fa6c:	460c      	mov	r4, r1
        mem_buf_small[i].used = 0;
2400fa6e:	f36f 0200 	bfc	r2, #0, #1
2400fa72:	719a      	strb	r2, [r3, #6]
2400fa74:	7b9a      	ldrb	r2, [r3, #14]
2400fa76:	f36f 0200 	bfc	r2, #0, #1
2400fa7a:	739a      	strb	r2, [r3, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
2400fa7c:	4a0a      	ldr	r2, [pc, #40]	; (2400faa8 <_lv_mem_buf_free_all+0x44>)
2400fa7e:	4615      	mov	r5, r2
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
2400fa80:	6810      	ldr	r0, [r2, #0]
2400fa82:	b148      	cbz	r0, 2400fa98 <_lv_mem_buf_free_all+0x34>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
2400fa84:	f7ff ffaa 	bl	2400f9dc <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
2400fa88:	6014      	str	r4, [r2, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
2400fa8a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
2400fa8e:	7998      	ldrb	r0, [r3, #6]
2400fa90:	f364 0000 	bfi	r0, r4, #0, #1
2400fa94:	7198      	strb	r0, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
2400fa96:	8094      	strh	r4, [r2, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
2400fa98:	3101      	adds	r1, #1
2400fa9a:	3208      	adds	r2, #8
2400fa9c:	2910      	cmp	r1, #16
2400fa9e:	d1ef      	bne.n	2400fa80 <_lv_mem_buf_free_all+0x1c>
}
2400faa0:	bd38      	pop	{r3, r4, r5, pc}
2400faa2:	bf00      	nop
2400faa4:	2401a6cc 	.word	0x2401a6cc
2400faa8:	2402dbcc 	.word	0x2402dbcc

2400faac <_lv_memcpy>:
{
2400faac:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
2400faae:	f000 0503 	and.w	r5, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
2400fab2:	f001 0603 	and.w	r6, r1, #3
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
2400fab6:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
2400fab8:	460b      	mov	r3, r1
    if(s_align != d_align) {
2400faba:	42b5      	cmp	r5, r6
2400fabc:	f040 8098 	bne.w	2400fbf0 <_lv_memcpy+0x144>
    if(d_align) {
2400fac0:	2d00      	cmp	r5, #0
2400fac2:	f040 80a8 	bne.w	2400fc16 <_lv_memcpy+0x16a>
    uint8_t * d8 = dst;
2400fac6:	4605      	mov	r5, r0
2400fac8:	462b      	mov	r3, r5
    while(len > 32) {
2400faca:	2a20      	cmp	r2, #32
2400facc:	461c      	mov	r4, r3
2400face:	f101 0520 	add.w	r5, r1, #32
2400fad2:	f103 0320 	add.w	r3, r3, #32
2400fad6:	f200 80af 	bhi.w	2400fc38 <_lv_memcpy+0x18c>
    while(len > 4) {
2400fada:	2a04      	cmp	r2, #4
2400fadc:	460e      	mov	r6, r1
2400fade:	f240 809f 	bls.w	2400fc20 <_lv_memcpy+0x174>
        COPY32;
2400fae2:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
2400fae6:	3a04      	subs	r2, #4
        COPY32;
2400fae8:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
2400faec:	e7f5      	b.n	2400fada <_lv_memcpy+0x2e>
            REPEAT8(COPY8);
2400faee:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
2400faf2:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
2400faf4:	f804 1c20 	strb.w	r1, [r4, #-32]
2400faf8:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
2400fafc:	f804 1c1f 	strb.w	r1, [r4, #-31]
2400fb00:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
2400fb04:	f804 1c1e 	strb.w	r1, [r4, #-30]
2400fb08:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
2400fb0c:	f804 1c1d 	strb.w	r1, [r4, #-29]
2400fb10:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
2400fb14:	f804 1c1c 	strb.w	r1, [r4, #-28]
2400fb18:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
2400fb1c:	f804 1c1b 	strb.w	r1, [r4, #-27]
2400fb20:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
2400fb24:	f804 1c1a 	strb.w	r1, [r4, #-26]
2400fb28:	f813 1c19 	ldrb.w	r1, [r3, #-25]
2400fb2c:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
2400fb30:	f813 1c18 	ldrb.w	r1, [r3, #-24]
2400fb34:	f804 1c18 	strb.w	r1, [r4, #-24]
2400fb38:	f813 1c17 	ldrb.w	r1, [r3, #-23]
2400fb3c:	f804 1c17 	strb.w	r1, [r4, #-23]
2400fb40:	f813 1c16 	ldrb.w	r1, [r3, #-22]
2400fb44:	f804 1c16 	strb.w	r1, [r4, #-22]
2400fb48:	f813 1c15 	ldrb.w	r1, [r3, #-21]
2400fb4c:	f804 1c15 	strb.w	r1, [r4, #-21]
2400fb50:	f813 1c14 	ldrb.w	r1, [r3, #-20]
2400fb54:	f804 1c14 	strb.w	r1, [r4, #-20]
2400fb58:	f813 1c13 	ldrb.w	r1, [r3, #-19]
2400fb5c:	f804 1c13 	strb.w	r1, [r4, #-19]
2400fb60:	f813 1c12 	ldrb.w	r1, [r3, #-18]
2400fb64:	f804 1c12 	strb.w	r1, [r4, #-18]
2400fb68:	f813 1c11 	ldrb.w	r1, [r3, #-17]
2400fb6c:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
2400fb70:	f813 1c10 	ldrb.w	r1, [r3, #-16]
2400fb74:	f804 1c10 	strb.w	r1, [r4, #-16]
2400fb78:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
2400fb7c:	f804 1c0f 	strb.w	r1, [r4, #-15]
2400fb80:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
2400fb84:	f804 1c0e 	strb.w	r1, [r4, #-14]
2400fb88:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
2400fb8c:	f804 1c0d 	strb.w	r1, [r4, #-13]
2400fb90:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
2400fb94:	f804 1c0c 	strb.w	r1, [r4, #-12]
2400fb98:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
2400fb9c:	f804 1c0b 	strb.w	r1, [r4, #-11]
2400fba0:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
2400fba4:	f804 1c0a 	strb.w	r1, [r4, #-10]
2400fba8:	f813 1c09 	ldrb.w	r1, [r3, #-9]
2400fbac:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
2400fbb0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
2400fbb4:	f804 1c08 	strb.w	r1, [r4, #-8]
2400fbb8:	f813 1c07 	ldrb.w	r1, [r3, #-7]
2400fbbc:	f804 1c07 	strb.w	r1, [r4, #-7]
2400fbc0:	f813 1c06 	ldrb.w	r1, [r3, #-6]
2400fbc4:	f804 1c06 	strb.w	r1, [r4, #-6]
2400fbc8:	f813 1c05 	ldrb.w	r1, [r3, #-5]
2400fbcc:	f804 1c05 	strb.w	r1, [r4, #-5]
2400fbd0:	f813 1c04 	ldrb.w	r1, [r3, #-4]
2400fbd4:	f804 1c04 	strb.w	r1, [r4, #-4]
2400fbd8:	f813 1c03 	ldrb.w	r1, [r3, #-3]
2400fbdc:	f804 1c03 	strb.w	r1, [r4, #-3]
2400fbe0:	f813 1c02 	ldrb.w	r1, [r3, #-2]
2400fbe4:	f804 1c02 	strb.w	r1, [r4, #-2]
2400fbe8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
2400fbec:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
2400fbf0:	2a20      	cmp	r2, #32
2400fbf2:	461d      	mov	r5, r3
2400fbf4:	4621      	mov	r1, r4
2400fbf6:	f103 0320 	add.w	r3, r3, #32
2400fbfa:	f104 0420 	add.w	r4, r4, #32
2400fbfe:	f63f af76 	bhi.w	2400faee <_lv_memcpy+0x42>
2400fc02:	1e6b      	subs	r3, r5, #1
2400fc04:	440a      	add	r2, r1
        while(len) {
2400fc06:	4291      	cmp	r1, r2
2400fc08:	d100      	bne.n	2400fc0c <_lv_memcpy+0x160>
}
2400fc0a:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
2400fc0c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
2400fc10:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
2400fc14:	e7f7      	b.n	2400fc06 <_lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
2400fc16:	f1c5 0504 	rsb	r5, r5, #4
2400fc1a:	4405      	add	r5, r0
2400fc1c:	461e      	mov	r6, r3
        while(d_align && len) {
2400fc1e:	b912      	cbnz	r2, 2400fc26 <_lv_memcpy+0x17a>
2400fc20:	1e73      	subs	r3, r6, #1
2400fc22:	4422      	add	r2, r4
2400fc24:	e02f      	b.n	2400fc86 <_lv_memcpy+0x1da>
            COPY8;
2400fc26:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
2400fc2a:	3a01      	subs	r2, #1
            COPY8;
2400fc2c:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
2400fc30:	42ac      	cmp	r4, r5
            COPY8;
2400fc32:	4619      	mov	r1, r3
        while(d_align && len) {
2400fc34:	d1f2      	bne.n	2400fc1c <_lv_memcpy+0x170>
2400fc36:	e747      	b.n	2400fac8 <_lv_memcpy+0x1c>
        REPEAT8(COPY32)
2400fc38:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
2400fc3c:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
2400fc3e:	f843 1c20 	str.w	r1, [r3, #-32]
2400fc42:	f855 1c1c 	ldr.w	r1, [r5, #-28]
2400fc46:	f843 1c1c 	str.w	r1, [r3, #-28]
2400fc4a:	f855 1c18 	ldr.w	r1, [r5, #-24]
2400fc4e:	f843 1c18 	str.w	r1, [r3, #-24]
2400fc52:	f855 1c14 	ldr.w	r1, [r5, #-20]
2400fc56:	f843 1c14 	str.w	r1, [r3, #-20]
2400fc5a:	f855 1c10 	ldr.w	r1, [r5, #-16]
2400fc5e:	f843 1c10 	str.w	r1, [r3, #-16]
2400fc62:	f855 1c0c 	ldr.w	r1, [r5, #-12]
2400fc66:	f843 1c0c 	str.w	r1, [r3, #-12]
2400fc6a:	f855 1c08 	ldr.w	r1, [r5, #-8]
2400fc6e:	f843 1c08 	str.w	r1, [r3, #-8]
2400fc72:	f855 1c04 	ldr.w	r1, [r5, #-4]
2400fc76:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
2400fc7a:	4629      	mov	r1, r5
2400fc7c:	e725      	b.n	2400faca <_lv_memcpy+0x1e>
        COPY8
2400fc7e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
2400fc82:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
2400fc86:	4294      	cmp	r4, r2
2400fc88:	d1f9      	bne.n	2400fc7e <_lv_memcpy+0x1d2>
2400fc8a:	e7be      	b.n	2400fc0a <_lv_memcpy+0x15e>

2400fc8c <lv_mem_realloc>:
    new_size = (new_size + 3) & (~0x3);
2400fc8c:	3103      	adds	r1, #3
{
2400fc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
2400fc90:	f021 0503 	bic.w	r5, r1, #3
    if(data_p != NULL) {
2400fc94:	4604      	mov	r4, r0
2400fc96:	b128      	cbz	r0, 2400fca4 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
2400fc98:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
2400fc9c:	f013 0f01 	tst.w	r3, #1
2400fca0:	bf08      	it	eq
2400fca2:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
2400fca4:	4620      	mov	r0, r4
2400fca6:	f7ff fea7 	bl	2400f9f8 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
2400fcaa:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
2400fcac:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
2400fcae:	d004      	beq.n	2400fcba <lv_mem_realloc+0x2e>
    if(new_size < old_size) {
2400fcb0:	d205      	bcs.n	2400fcbe <lv_mem_realloc+0x32>
        ent_trunc(e, new_size);
2400fcb2:	4629      	mov	r1, r5
2400fcb4:	1f20      	subs	r0, r4, #4
2400fcb6:	f7ff fe37 	bl	2400f928 <ent_trunc>
        return &e->first_data;
2400fcba:	4626      	mov	r6, r4
2400fcbc:	e010      	b.n	2400fce0 <lv_mem_realloc+0x54>
    new_p = lv_mem_alloc(new_size);
2400fcbe:	4628      	mov	r0, r5
2400fcc0:	f7ff fe5c 	bl	2400f97c <lv_mem_alloc>
    if(new_p == NULL) {
2400fcc4:	4606      	mov	r6, r0
2400fcc6:	b158      	cbz	r0, 2400fce0 <lv_mem_realloc+0x54>
    if(data_p != NULL) {
2400fcc8:	b154      	cbz	r4, 2400fce0 <lv_mem_realloc+0x54>
        if(old_size != 0) {
2400fcca:	b14f      	cbz	r7, 2400fce0 <lv_mem_realloc+0x54>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
2400fccc:	42bd      	cmp	r5, r7
2400fcce:	462a      	mov	r2, r5
2400fcd0:	4621      	mov	r1, r4
2400fcd2:	bf28      	it	cs
2400fcd4:	463a      	movcs	r2, r7
2400fcd6:	f7ff fee9 	bl	2400faac <_lv_memcpy>
            lv_mem_free(data_p);
2400fcda:	4620      	mov	r0, r4
2400fcdc:	f7ff fe7e 	bl	2400f9dc <lv_mem_free>
}
2400fce0:	4630      	mov	r0, r6
2400fce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2400fce4 <_lv_mem_buf_get>:
{
2400fce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
2400fce6:	b190      	cbz	r0, 2400fd0e <_lv_mem_buf_get+0x2a>
    if(size <= MEM_BUF_SMALL_SIZE) {
2400fce8:	2810      	cmp	r0, #16
2400fcea:	d811      	bhi.n	2400fd10 <_lv_mem_buf_get+0x2c>
            if(mem_buf_small[i].used == 0) {
2400fcec:	4a2b      	ldr	r2, [pc, #172]	; (2400fd9c <_lv_mem_buf_get+0xb8>)
2400fcee:	7993      	ldrb	r3, [r2, #6]
2400fcf0:	f013 0301 	ands.w	r3, r3, #1
2400fcf4:	d003      	beq.n	2400fcfe <_lv_mem_buf_get+0x1a>
2400fcf6:	7b93      	ldrb	r3, [r2, #14]
2400fcf8:	07de      	lsls	r6, r3, #31
2400fcfa:	d409      	bmi.n	2400fd10 <_lv_mem_buf_get+0x2c>
2400fcfc:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
2400fcfe:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
2400fd02:	7981      	ldrb	r1, [r0, #6]
2400fd04:	f041 0101 	orr.w	r1, r1, #1
2400fd08:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
2400fd0a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
}
2400fd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
2400fd10:	4c23      	ldr	r4, [pc, #140]	; (2400fda0 <_lv_mem_buf_get+0xbc>)
            if(mem_buf_small[i].used == 0) {
2400fd12:	2300      	movs	r3, #0
2400fd14:	f04f 32ff 	mov.w	r2, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
2400fd18:	1d27      	adds	r7, r4, #4
2400fd1a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
2400fd1e:	79b5      	ldrb	r5, [r6, #6]
2400fd20:	4629      	mov	r1, r5
2400fd22:	07ed      	lsls	r5, r5, #31
2400fd24:	d413      	bmi.n	2400fd4e <_lv_mem_buf_get+0x6a>
2400fd26:	f837 5033 	ldrh.w	r5, [r7, r3, lsl #3]
2400fd2a:	4285      	cmp	r5, r0
2400fd2c:	d30f      	bcc.n	2400fd4e <_lv_mem_buf_get+0x6a>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
2400fd2e:	d105      	bne.n	2400fd3c <_lv_mem_buf_get+0x58>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
2400fd30:	f041 0101 	orr.w	r1, r1, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
2400fd34:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
2400fd38:	71b1      	strb	r1, [r6, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
2400fd3a:	e7e8      	b.n	2400fd0e <_lv_mem_buf_get+0x2a>
            else if(i_guess < 0) {
2400fd3c:	1c56      	adds	r6, r2, #1
2400fd3e:	d101      	bne.n	2400fd44 <_lv_mem_buf_get+0x60>
                i_guess = i;
2400fd40:	b25a      	sxtb	r2, r3
2400fd42:	e004      	b.n	2400fd4e <_lv_mem_buf_get+0x6a>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
2400fd44:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
2400fd48:	8889      	ldrh	r1, [r1, #4]
2400fd4a:	42a9      	cmp	r1, r5
2400fd4c:	d8f8      	bhi.n	2400fd40 <_lv_mem_buf_get+0x5c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
2400fd4e:	3301      	adds	r3, #1
2400fd50:	2b10      	cmp	r3, #16
2400fd52:	d1e2      	bne.n	2400fd1a <_lv_mem_buf_get+0x36>
    if(i_guess >= 0) {
2400fd54:	1c55      	adds	r5, r2, #1
2400fd56:	d008      	beq.n	2400fd6a <_lv_mem_buf_get+0x86>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
2400fd58:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
2400fd5c:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
2400fd60:	798b      	ldrb	r3, [r1, #6]
2400fd62:	f043 0301 	orr.w	r3, r3, #1
2400fd66:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
2400fd68:	e7d1      	b.n	2400fd0e <_lv_mem_buf_get+0x2a>
2400fd6a:	2500      	movs	r5, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
2400fd6c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
2400fd70:	7999      	ldrb	r1, [r3, #6]
2400fd72:	460a      	mov	r2, r1
2400fd74:	07c9      	lsls	r1, r1, #31
2400fd76:	d40b      	bmi.n	2400fd90 <_lv_mem_buf_get+0xac>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
2400fd78:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
2400fd7c:	4601      	mov	r1, r0
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
2400fd7e:	8098      	strh	r0, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
2400fd80:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
2400fd82:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
2400fd86:	f7ff ff81 	bl	2400fc8c <lv_mem_realloc>
2400fd8a:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
2400fd8e:	e7be      	b.n	2400fd0e <_lv_mem_buf_get+0x2a>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
2400fd90:	3501      	adds	r5, #1
2400fd92:	2d10      	cmp	r5, #16
2400fd94:	d1ea      	bne.n	2400fd6c <_lv_mem_buf_get+0x88>
    if(size == 0) return NULL;
2400fd96:	2000      	movs	r0, #0
2400fd98:	e7b9      	b.n	2400fd0e <_lv_mem_buf_get+0x2a>
2400fd9a:	bf00      	nop
2400fd9c:	2401a6cc 	.word	0x2401a6cc
2400fda0:	2402dbcc 	.word	0x2402dbcc

2400fda4 <_lv_memset>:
    if(d_align) {
2400fda4:	f010 0303 	ands.w	r3, r0, #3
{
2400fda8:	b410      	push	{r4}
    if(d_align) {
2400fdaa:	d009      	beq.n	2400fdc0 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
2400fdac:	f1c3 0304 	rsb	r3, r3, #4
2400fdb0:	4403      	add	r3, r0
        while(d_align && len) {
2400fdb2:	b12a      	cbz	r2, 2400fdc0 <_lv_memset+0x1c>
            *d8 = v;
2400fdb4:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
2400fdb8:	4298      	cmp	r0, r3
            len--;
2400fdba:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
2400fdbe:	d1f8      	bne.n	2400fdb2 <_lv_memset+0xe>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
2400fdc0:	eb01 2401 	add.w	r4, r1, r1, lsl #8
2400fdc4:	4603      	mov	r3, r0
2400fdc6:	eb04 4401 	add.w	r4, r4, r1, lsl #16
2400fdca:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
2400fdce:	2a20      	cmp	r2, #32
2400fdd0:	4618      	mov	r0, r3
2400fdd2:	f103 0320 	add.w	r3, r3, #32
2400fdd6:	d805      	bhi.n	2400fde4 <_lv_memset+0x40>
    while(len > 4) {
2400fdd8:	2a04      	cmp	r2, #4
2400fdda:	d80d      	bhi.n	2400fdf8 <_lv_memset+0x54>
}
2400fddc:	f85d 4b04 	ldr.w	r4, [sp], #4
        *d8 = v;
2400fde0:	f00a bb80 	b.w	2401a4e4 <memset>
        len -= 32;
2400fde4:	3a20      	subs	r2, #32
        SET32(v32);
2400fde6:	e943 4408 	strd	r4, r4, [r3, #-32]
        SET32(v32);
2400fdea:	e943 4406 	strd	r4, r4, [r3, #-24]
        SET32(v32);
2400fdee:	e943 4404 	strd	r4, r4, [r3, #-16]
        SET32(v32);
2400fdf2:	e943 4402 	strd	r4, r4, [r3, #-8]
        len -= 32;
2400fdf6:	e7ea      	b.n	2400fdce <_lv_memset+0x2a>
        len -= 4;
2400fdf8:	3a04      	subs	r2, #4
        SET32(v32);
2400fdfa:	f840 4b04 	str.w	r4, [r0], #4
        len -= 4;
2400fdfe:	e7eb      	b.n	2400fdd8 <_lv_memset+0x34>

2400fe00 <_lv_memset_00>:
    if(d_align) {
2400fe00:	f010 0303 	ands.w	r3, r0, #3
{
2400fe04:	460a      	mov	r2, r1
    if(d_align) {
2400fe06:	d10d      	bne.n	2400fe24 <_lv_memset_00+0x24>
2400fe08:	4603      	mov	r3, r0
        SET32(0);
2400fe0a:	2100      	movs	r1, #0
    while(len > 32) {
2400fe0c:	2a20      	cmp	r2, #32
2400fe0e:	4618      	mov	r0, r3
2400fe10:	f103 0320 	add.w	r3, r3, #32
2400fe14:	d815      	bhi.n	2400fe42 <_lv_memset_00+0x42>
        SET32(0);
2400fe16:	2300      	movs	r3, #0
    while(len > 4) {
2400fe18:	2a04      	cmp	r2, #4
2400fe1a:	d908      	bls.n	2400fe2e <_lv_memset_00+0x2e>
        len -= 4;
2400fe1c:	3a04      	subs	r2, #4
        SET32(0);
2400fe1e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
2400fe22:	e7f9      	b.n	2400fe18 <_lv_memset_00+0x18>
        d_align = ALIGN_MASK + 1 - d_align;
2400fe24:	f1c3 0304 	rsb	r3, r3, #4
            *d8 = 0x00;
2400fe28:	2100      	movs	r1, #0
2400fe2a:	4403      	add	r3, r0
        while(d_align && len) {
2400fe2c:	b912      	cbnz	r2, 2400fe34 <_lv_memset_00+0x34>
        *d8 = 0;
2400fe2e:	2100      	movs	r1, #0
2400fe30:	f00a bb58 	b.w	2401a4e4 <memset>
            *d8 = 0x00;
2400fe34:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
2400fe38:	4283      	cmp	r3, r0
            len--;
2400fe3a:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
2400fe3e:	d1f5      	bne.n	2400fe2c <_lv_memset_00+0x2c>
2400fe40:	e7e2      	b.n	2400fe08 <_lv_memset_00+0x8>
        len -= 32;
2400fe42:	3a20      	subs	r2, #32
        SET32(0);
2400fe44:	e943 1108 	strd	r1, r1, [r3, #-32]
        SET32(0);
2400fe48:	e943 1106 	strd	r1, r1, [r3, #-24]
        SET32(0);
2400fe4c:	e943 1104 	strd	r1, r1, [r3, #-16]
        SET32(0);
2400fe50:	e943 1102 	strd	r1, r1, [r3, #-8]
        len -= 32;
2400fe54:	e7da      	b.n	2400fe0c <_lv_memset_00+0xc>

2400fe56 <_lv_memset_ff>:
    if(d_align) {
2400fe56:	f010 0303 	ands.w	r3, r0, #3
{
2400fe5a:	460a      	mov	r2, r1
    if(d_align) {
2400fe5c:	d10f      	bne.n	2400fe7e <_lv_memset_ff+0x28>
2400fe5e:	4603      	mov	r3, r0
        SET32(0xFFFFFFFF);
2400fe60:	f04f 31ff 	mov.w	r1, #4294967295
    while(len > 32) {
2400fe64:	2a20      	cmp	r2, #32
2400fe66:	4618      	mov	r0, r3
2400fe68:	f103 0320 	add.w	r3, r3, #32
2400fe6c:	d816      	bhi.n	2400fe9c <_lv_memset_ff+0x46>
        SET32(0xFFFFFFFF);
2400fe6e:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
2400fe72:	2a04      	cmp	r2, #4
2400fe74:	d908      	bls.n	2400fe88 <_lv_memset_ff+0x32>
        len -= 4;
2400fe76:	3a04      	subs	r2, #4
        SET32(0xFFFFFFFF);
2400fe78:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
2400fe7c:	e7f9      	b.n	2400fe72 <_lv_memset_ff+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
2400fe7e:	f1c3 0304 	rsb	r3, r3, #4
            *d8 = 0xFF;
2400fe82:	21ff      	movs	r1, #255	; 0xff
2400fe84:	4403      	add	r3, r0
        while(d_align && len) {
2400fe86:	b912      	cbnz	r2, 2400fe8e <_lv_memset_ff+0x38>
        *d8 = 0xFF;
2400fe88:	21ff      	movs	r1, #255	; 0xff
2400fe8a:	f00a bb2b 	b.w	2401a4e4 <memset>
            *d8 = 0xFF;
2400fe8e:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
2400fe92:	4283      	cmp	r3, r0
            len--;
2400fe94:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
2400fe98:	d1f5      	bne.n	2400fe86 <_lv_memset_ff+0x30>
2400fe9a:	e7e0      	b.n	2400fe5e <_lv_memset_ff+0x8>
        len -= 32;
2400fe9c:	3a20      	subs	r2, #32
        SET32(0xFFFFFFFF);
2400fe9e:	e943 1108 	strd	r1, r1, [r3, #-32]
        SET32(0xFFFFFFFF);
2400fea2:	e943 1106 	strd	r1, r1, [r3, #-24]
        SET32(0xFFFFFFFF);
2400fea6:	e943 1104 	strd	r1, r1, [r3, #-16]
        SET32(0xFFFFFFFF);
2400feaa:	e943 1102 	strd	r1, r1, [r3, #-8]
        len -= 32;
2400feae:	e7d9      	b.n	2400fe64 <_lv_memset_ff+0xe>

2400feb0 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
2400feb0:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
2400feb2:	bf38      	it	cc
2400feb4:	5488      	strbcc	r0, [r1, r2]
    }
}
2400feb6:	4770      	bx	lr

2400feb8 <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
2400feb8:	4770      	bx	lr

2400feba <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
2400feba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400febe:	4617      	mov	r7, r2
2400fec0:	4680      	mov	r8, r0
2400fec2:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
2400fec6:	e9dd 6211 	ldrd	r6, r2, [sp, #68]	; 0x44
2400feca:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
2400fece:	f012 0a02 	ands.w	sl, r2, #2
{
2400fed2:	e9dd 0c0f 	ldrd	r0, ip, [sp, #60]	; 0x3c
    if(!(flags & FLAGS_LEFT)) {
2400fed6:	d11f      	bne.n	2400ff18 <_ntoa_format+0x5e>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
2400fed8:	f002 0901 	and.w	r9, r2, #1
2400fedc:	b14e      	cbz	r6, 2400fef2 <_ntoa_format+0x38>
2400fede:	f1b9 0f00 	cmp.w	r9, #0
2400fee2:	d006      	beq.n	2400fef2 <_ntoa_format+0x38>
2400fee4:	f1be 0f00 	cmp.w	lr, #0
2400fee8:	d102      	bne.n	2400fef0 <_ntoa_format+0x36>
2400feea:	f012 0f0c 	tst.w	r2, #12
2400feee:	d000      	beq.n	2400fef2 <_ntoa_format+0x38>
            width--;
2400fef0:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
2400fef2:	f04f 0b30 	mov.w	fp, #48	; 0x30
2400fef6:	e002      	b.n	2400fefe <_ntoa_format+0x44>
2400fef8:	f805 b004 	strb.w	fp, [r5, r4]
2400fefc:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400fefe:	45a4      	cmp	ip, r4
2400ff00:	d901      	bls.n	2400ff06 <_ntoa_format+0x4c>
2400ff02:	2c20      	cmp	r4, #32
2400ff04:	d1f8      	bne.n	2400fef8 <_ntoa_format+0x3e>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
2400ff06:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400ff0a:	f1b9 0f00 	cmp.w	r9, #0
2400ff0e:	d003      	beq.n	2400ff18 <_ntoa_format+0x5e>
2400ff10:	42a6      	cmp	r6, r4
2400ff12:	d901      	bls.n	2400ff18 <_ntoa_format+0x5e>
2400ff14:	2c20      	cmp	r4, #32
2400ff16:	d137      	bne.n	2400ff88 <_ntoa_format+0xce>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
2400ff18:	f012 0f10 	tst.w	r2, #16
2400ff1c:	d019      	beq.n	2400ff52 <_ntoa_format+0x98>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
2400ff1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
2400ff22:	d136      	bne.n	2400ff92 <_ntoa_format+0xd8>
2400ff24:	b3ac      	cbz	r4, 2400ff92 <_ntoa_format+0xd8>
2400ff26:	4564      	cmp	r4, ip
2400ff28:	d001      	beq.n	2400ff2e <_ntoa_format+0x74>
2400ff2a:	42b4      	cmp	r4, r6
2400ff2c:	d131      	bne.n	2400ff92 <_ntoa_format+0xd8>
            len--;
            if(len && (base == 16U)) {
2400ff2e:	f1b4 0c01 	subs.w	ip, r4, #1
2400ff32:	d02d      	beq.n	2400ff90 <_ntoa_format+0xd6>
2400ff34:	2810      	cmp	r0, #16
2400ff36:	d16a      	bne.n	2401000e <_ntoa_format+0x154>
                len--;
2400ff38:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400ff3a:	0690      	lsls	r0, r2, #26
2400ff3c:	d431      	bmi.n	2400ffa2 <_ntoa_format+0xe8>
2400ff3e:	2c1f      	cmp	r4, #31
2400ff40:	d80f      	bhi.n	2400ff62 <_ntoa_format+0xa8>
            buf[len++] = 'x';
2400ff42:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
2400ff44:	5528      	strb	r0, [r5, r4]
2400ff46:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
2400ff48:	2c1f      	cmp	r4, #31
2400ff4a:	d80a      	bhi.n	2400ff62 <_ntoa_format+0xa8>
            buf[len++] = '0';
2400ff4c:	2030      	movs	r0, #48	; 0x30
2400ff4e:	5528      	strb	r0, [r5, r4]
2400ff50:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
2400ff52:	2c20      	cmp	r4, #32
2400ff54:	d005      	beq.n	2400ff62 <_ntoa_format+0xa8>
        if(negative) {
2400ff56:	f1be 0f00 	cmp.w	lr, #0
2400ff5a:	d026      	beq.n	2400ffaa <_ntoa_format+0xf0>
            buf[len++] = '-';
2400ff5c:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
2400ff5e:	5528      	strb	r0, [r5, r4]
2400ff60:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
2400ff62:	0792      	lsls	r2, r2, #30
2400ff64:	d03b      	beq.n	2400ffde <_ntoa_format+0x124>
2400ff66:	463a      	mov	r2, r7
2400ff68:	4425      	add	r5, r4
2400ff6a:	4414      	add	r4, r2
    while(len) {
2400ff6c:	42a2      	cmp	r2, r4
2400ff6e:	d13a      	bne.n	2400ffe6 <_ntoa_format+0x12c>
    if(flags & FLAGS_LEFT) {
2400ff70:	f1ba 0f00 	cmp.w	sl, #0
2400ff74:	d004      	beq.n	2400ff80 <_ntoa_format+0xc6>
2400ff76:	1bd5      	subs	r5, r2, r7
        while(idx - start_idx < width) {
2400ff78:	42b5      	cmp	r5, r6
2400ff7a:	eb05 0407 	add.w	r4, r5, r7
2400ff7e:	d33d      	bcc.n	2400fffc <_ntoa_format+0x142>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
2400ff80:	4620      	mov	r0, r4
2400ff82:	b003      	add	sp, #12
2400ff84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
2400ff88:	f805 b004 	strb.w	fp, [r5, r4]
2400ff8c:	3401      	adds	r4, #1
2400ff8e:	e7bc      	b.n	2400ff0a <_ntoa_format+0x50>
2400ff90:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400ff92:	2810      	cmp	r0, #16
2400ff94:	d0d1      	beq.n	2400ff3a <_ntoa_format+0x80>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400ff96:	2802      	cmp	r0, #2
2400ff98:	d1d6      	bne.n	2400ff48 <_ntoa_format+0x8e>
2400ff9a:	2c1f      	cmp	r4, #31
2400ff9c:	d8e1      	bhi.n	2400ff62 <_ntoa_format+0xa8>
            buf[len++] = 'b';
2400ff9e:	2062      	movs	r0, #98	; 0x62
2400ffa0:	e7d0      	b.n	2400ff44 <_ntoa_format+0x8a>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2400ffa2:	2c1f      	cmp	r4, #31
2400ffa4:	d8dd      	bhi.n	2400ff62 <_ntoa_format+0xa8>
            buf[len++] = 'X';
2400ffa6:	2058      	movs	r0, #88	; 0x58
2400ffa8:	e7cc      	b.n	2400ff44 <_ntoa_format+0x8a>
        else if(flags & FLAGS_PLUS) {
2400ffaa:	0750      	lsls	r0, r2, #29
2400ffac:	d501      	bpl.n	2400ffb2 <_ntoa_format+0xf8>
            buf[len++] = '+';  // ignore the space if the '+' exists
2400ffae:	202b      	movs	r0, #43	; 0x2b
2400ffb0:	e7d5      	b.n	2400ff5e <_ntoa_format+0xa4>
        else if(flags & FLAGS_SPACE) {
2400ffb2:	0710      	lsls	r0, r2, #28
2400ffb4:	d5d5      	bpl.n	2400ff62 <_ntoa_format+0xa8>
            buf[len++] = ' ';
2400ffb6:	2020      	movs	r0, #32
2400ffb8:	e7d1      	b.n	2400ff5e <_ntoa_format+0xa4>
            out(' ', buffer, idx++, maxlen);
2400ffba:	2020      	movs	r0, #32
        for(i = len; i < width; i++) {
2400ffbc:	f109 0901 	add.w	r9, r9, #1
            out(' ', buffer, idx++, maxlen);
2400ffc0:	e9cd 1300 	strd	r1, r3, [sp]
2400ffc4:	47c0      	blx	r8
        for(i = len; i < width; i++) {
2400ffc6:	e9dd 1300 	ldrd	r1, r3, [sp]
2400ffca:	454e      	cmp	r6, r9
2400ffcc:	eb0b 0209 	add.w	r2, fp, r9
2400ffd0:	d8f3      	bhi.n	2400ffba <_ntoa_format+0x100>
2400ffd2:	1b32      	subs	r2, r6, r4
2400ffd4:	42b4      	cmp	r4, r6
2400ffd6:	bf88      	it	hi
2400ffd8:	2200      	movhi	r2, #0
2400ffda:	443a      	add	r2, r7
2400ffdc:	e7c4      	b.n	2400ff68 <_ntoa_format+0xae>
2400ffde:	46a1      	mov	r9, r4
2400ffe0:	eba7 0b04 	sub.w	fp, r7, r4
2400ffe4:	e7f1      	b.n	2400ffca <_ntoa_format+0x110>
        out(buf[--len], buffer, idx++, maxlen);
2400ffe6:	f102 0901 	add.w	r9, r2, #1
2400ffea:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
2400ffee:	e9cd 1300 	strd	r1, r3, [sp]
2400fff2:	47c0      	blx	r8
2400fff4:	464a      	mov	r2, r9
2400fff6:	e9dd 1300 	ldrd	r1, r3, [sp]
2400fffa:	e7b7      	b.n	2400ff6c <_ntoa_format+0xb2>
            out(' ', buffer, idx++, maxlen);
2400fffc:	4622      	mov	r2, r4
2400fffe:	2020      	movs	r0, #32
24010000:	9301      	str	r3, [sp, #4]
24010002:	3501      	adds	r5, #1
24010004:	9100      	str	r1, [sp, #0]
24010006:	47c0      	blx	r8
24010008:	e9dd 1300 	ldrd	r1, r3, [sp]
2401000c:	e7b4      	b.n	2400ff78 <_ntoa_format+0xbe>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
2401000e:	2802      	cmp	r0, #2
24010010:	4664      	mov	r4, ip
24010012:	d199      	bne.n	2400ff48 <_ntoa_format+0x8e>
24010014:	e7c3      	b.n	2400ff9e <_ntoa_format+0xe4>

24010016 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
24010016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2401001a:	b091      	sub	sp, #68	; 0x44
2401001c:	9d18      	ldr	r5, [sp, #96]	; 0x60
2401001e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
24010020:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
24010022:	b90d      	cbnz	r5, 24010028 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
24010024:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
24010028:	057c      	lsls	r4, r7, #21
2401002a:	d500      	bpl.n	2401002e <_ntoa_long+0x18>
2401002c:	b315      	cbz	r5, 24010074 <_ntoa_long+0x5e>
2401002e:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
24010032:	46ac      	mov	ip, r5
24010034:	f10d 0820 	add.w	r8, sp, #32
24010038:	f04f 0500 	mov.w	r5, #0
2401003c:	bf14      	ite	ne
2401003e:	f04f 0e41 	movne.w	lr, #65	; 0x41
24010042:	f04f 0e61 	moveq.w	lr, #97	; 0x61
24010046:	f1ae 0e0a 	sub.w	lr, lr, #10
2401004a:	3501      	adds	r5, #1
            const char digit = (char)(value % base);
2401004c:	fbbc f9f6 	udiv	r9, ip, r6
24010050:	fb06 c919 	mls	r9, r6, r9, ip
24010054:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
24010058:	f1b9 0f09 	cmp.w	r9, #9
2401005c:	bf94      	ite	ls
2401005e:	3430      	addls	r4, #48	; 0x30
24010060:	4474      	addhi	r4, lr
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
24010062:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
24010064:	b2e4      	uxtb	r4, r4
24010066:	f808 4b01 	strb.w	r4, [r8], #1
            value /= base;
2401006a:	fbbc f4f6 	udiv	r4, ip, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
2401006e:	d301      	bcc.n	24010074 <_ntoa_long+0x5e>
24010070:	2d20      	cmp	r5, #32
24010072:	d110      	bne.n	24010096 <_ntoa_long+0x80>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
24010074:	9c1c      	ldr	r4, [sp, #112]	; 0x70
24010076:	9706      	str	r7, [sp, #24]
24010078:	9405      	str	r4, [sp, #20]
2401007a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
2401007c:	e9cd 6403 	strd	r6, r4, [sp, #12]
24010080:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
24010084:	e9cd 5401 	strd	r5, r4, [sp, #4]
24010088:	ac08      	add	r4, sp, #32
2401008a:	9400      	str	r4, [sp, #0]
2401008c:	f7ff ff15 	bl	2400feba <_ntoa_format>
}
24010090:	b011      	add	sp, #68	; 0x44
24010092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
24010096:	46a4      	mov	ip, r4
24010098:	e7d7      	b.n	2401004a <_ntoa_long+0x34>

2401009a <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
2401009a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401009e:	ed2d 8b04 	vpush	{d8-d9}
240100a2:	b093      	sub	sp, #76	; 0x4c
240100a4:	469a      	mov	sl, r3
240100a6:	ee09 2a10 	vmov	s18, r2
240100aa:	ee08 0a10 	vmov	s16, r0
240100ae:	9f28      	ldr	r7, [sp, #160]	; 0xa0
240100b0:	ee08 1a90 	vmov	s17, r1
240100b4:	e9dd 6420 	ldrd	r6, r4, [sp, #128]	; 0x80
240100b8:	e9dd b924 	ldrd	fp, r9, [sp, #144]	; 0x90
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
240100bc:	ea56 0304 	orrs.w	r3, r6, r4
        flags &= ~FLAGS_HASH;
240100c0:	bf08      	it	eq
240100c2:	f027 0710 	biceq.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
240100c6:	057a      	lsls	r2, r7, #21
240100c8:	d502      	bpl.n	240100d0 <_ntoa_long_long+0x36>
240100ca:	ea56 0304 	orrs.w	r3, r6, r4
240100ce:	d03d      	beq.n	2401014c <_ntoa_long_long+0xb2>
240100d0:	f017 0f20 	tst.w	r7, #32
240100d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
240100d8:	f04f 0500 	mov.w	r5, #0
240100dc:	bf14      	ite	ne
240100de:	2341      	movne	r3, #65	; 0x41
240100e0:	2361      	moveq	r3, #97	; 0x61
240100e2:	3b0a      	subs	r3, #10
240100e4:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
240100e6:	4621      	mov	r1, r4
240100e8:	465a      	mov	r2, fp
240100ea:	464b      	mov	r3, r9
240100ec:	4630      	mov	r0, r6
240100ee:	f00a fa5b 	bl	2401a5a8 <____aeabi_uldivmod_veneer>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
240100f2:	3501      	adds	r5, #1
            const char digit = (char)(value % base);
240100f4:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
240100f6:	2a09      	cmp	r2, #9
240100f8:	bf8a      	itet	hi
240100fa:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
240100fc:	3230      	addls	r2, #48	; 0x30
240100fe:	18d2      	addhi	r2, r2, r3
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
24010100:	455e      	cmp	r6, fp
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
24010102:	b2d2      	uxtb	r2, r2
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
24010104:	eb74 0409 	sbcs.w	r4, r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
24010108:	f808 2b01 	strb.w	r2, [r8], #1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
2401010c:	d301      	bcc.n	24010112 <_ntoa_long_long+0x78>
2401010e:	2d20      	cmp	r5, #32
24010110:	d119      	bne.n	24010146 <_ntoa_long_long+0xac>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
24010112:	9b27      	ldr	r3, [sp, #156]	; 0x9c
24010114:	ee19 2a10 	vmov	r2, s18
24010118:	ee18 1a90 	vmov	r1, s17
2401011c:	ee18 0a10 	vmov	r0, s16
24010120:	9305      	str	r3, [sp, #20]
24010122:	9b26      	ldr	r3, [sp, #152]	; 0x98
24010124:	9706      	str	r7, [sp, #24]
24010126:	e9cd b303 	strd	fp, r3, [sp, #12]
2401012a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
2401012e:	e9cd 5301 	strd	r5, r3, [sp, #4]
24010132:	ab0a      	add	r3, sp, #40	; 0x28
24010134:	9300      	str	r3, [sp, #0]
24010136:	4653      	mov	r3, sl
24010138:	f7ff febf 	bl	2400feba <_ntoa_format>
}
2401013c:	b013      	add	sp, #76	; 0x4c
2401013e:	ecbd 8b04 	vpop	{d8-d9}
24010142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
24010146:	4606      	mov	r6, r0
24010148:	460c      	mov	r4, r1
2401014a:	e7cc      	b.n	240100e6 <_ntoa_long_long+0x4c>
    size_t len = 0U;
2401014c:	2500      	movs	r5, #0
2401014e:	e7e0      	b.n	24010112 <_ntoa_long_long+0x78>

24010150 <_vsnprintf.constprop.0>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
24010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010154:	4689      	mov	r9, r1
24010156:	4617      	mov	r7, r2
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
24010158:	1e01      	subs	r1, r0, #0
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
2401015a:	461e      	mov	r6, r3
        out = _out_null;
2401015c:	4aab      	ldr	r2, [pc, #684]	; (2401040c <_vsnprintf.constprop.0+0x2bc>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
2401015e:	b091      	sub	sp, #68	; 0x44
        out = _out_null;
24010160:	4bab      	ldr	r3, [pc, #684]	; (24010410 <_vsnprintf.constprop.0+0x2c0>)
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
24010162:	f04f 0500 	mov.w	r5, #0
        out = _out_null;
24010166:	bf14      	ite	ne
24010168:	4693      	movne	fp, r2
2401016a:	469b      	moveq	fp, r3
    while(*format) {
2401016c:	7838      	ldrb	r0, [r7, #0]
2401016e:	b960      	cbnz	r0, 2401018a <_vsnprintf.constprop.0+0x3a>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
24010170:	454d      	cmp	r5, r9
24010172:	464b      	mov	r3, r9
24010174:	f04f 0000 	mov.w	r0, #0
24010178:	bf2c      	ite	cs
2401017a:	f109 32ff 	addcs.w	r2, r9, #4294967295
2401017e:	462a      	movcc	r2, r5
24010180:	47d8      	blx	fp

    // return written chars without terminating \0
    return (int)idx;
}
24010182:	4628      	mov	r0, r5
24010184:	b011      	add	sp, #68	; 0x44
24010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
2401018a:	2825      	cmp	r0, #37	; 0x25
            format++;
2401018c:	f107 0701 	add.w	r7, r7, #1
        if(*format != '%') {
24010190:	d006      	beq.n	240101a0 <_vsnprintf.constprop.0+0x50>
            out(*format, buffer, idx++, maxlen);
24010192:	1c6c      	adds	r4, r5, #1
24010194:	464b      	mov	r3, r9
24010196:	462a      	mov	r2, r5
24010198:	910a      	str	r1, [sp, #40]	; 0x28
                out(*format, buffer, idx++, maxlen);
2401019a:	4625      	mov	r5, r4
2401019c:	47d8      	blx	fp
                break;
2401019e:	e0cf      	b.n	24010340 <_vsnprintf.constprop.0+0x1f0>
        flags = 0U;
240101a0:	2300      	movs	r3, #0
240101a2:	e006      	b.n	240101b2 <_vsnprintf.constprop.0+0x62>
            switch(*format) {
240101a4:	2a2d      	cmp	r2, #45	; 0x2d
240101a6:	d015      	beq.n	240101d4 <_vsnprintf.constprop.0+0x84>
240101a8:	2a30      	cmp	r2, #48	; 0x30
240101aa:	d10c      	bne.n	240101c6 <_vsnprintf.constprop.0+0x76>
                    flags |= FLAGS_ZEROPAD;
240101ac:	f043 0301 	orr.w	r3, r3, #1
            format++;
240101b0:	4607      	mov	r7, r0
            switch(*format) {
240101b2:	4638      	mov	r0, r7
240101b4:	f810 2b01 	ldrb.w	r2, [r0], #1
240101b8:	2a2b      	cmp	r2, #43	; 0x2b
240101ba:	d00e      	beq.n	240101da <_vsnprintf.constprop.0+0x8a>
240101bc:	d8f2      	bhi.n	240101a4 <_vsnprintf.constprop.0+0x54>
240101be:	2a20      	cmp	r2, #32
240101c0:	d00e      	beq.n	240101e0 <_vsnprintf.constprop.0+0x90>
240101c2:	2a23      	cmp	r2, #35	; 0x23
240101c4:	d00f      	beq.n	240101e6 <_vsnprintf.constprop.0+0x96>
        if(_is_digit(*format)) {
240101c6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
240101ca:	2c09      	cmp	r4, #9
240101cc:	d828      	bhi.n	24010220 <_vsnprintf.constprop.0+0xd0>
    unsigned int i = 0U;
240101ce:	f04f 0800 	mov.w	r8, #0
240101d2:	e011      	b.n	240101f8 <_vsnprintf.constprop.0+0xa8>
                    flags |= FLAGS_LEFT;
240101d4:	f043 0302 	orr.w	r3, r3, #2
        } while(n);
240101d8:	e7ea      	b.n	240101b0 <_vsnprintf.constprop.0+0x60>
                    flags |= FLAGS_PLUS;
240101da:	f043 0304 	orr.w	r3, r3, #4
        } while(n);
240101de:	e7e7      	b.n	240101b0 <_vsnprintf.constprop.0+0x60>
                    flags |= FLAGS_SPACE;
240101e0:	f043 0308 	orr.w	r3, r3, #8
        } while(n);
240101e4:	e7e4      	b.n	240101b0 <_vsnprintf.constprop.0+0x60>
                    flags |= FLAGS_HASH;
240101e6:	f043 0310 	orr.w	r3, r3, #16
        } while(n);
240101ea:	e7e1      	b.n	240101b0 <_vsnprintf.constprop.0+0x60>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
240101ec:	240a      	movs	r4, #10
240101ee:	4607      	mov	r7, r0
240101f0:	fb04 2208 	mla	r2, r4, r8, r2
240101f4:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    while(_is_digit(**str)) {
240101f8:	4638      	mov	r0, r7
240101fa:	f810 2b01 	ldrb.w	r2, [r0], #1
240101fe:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
24010202:	2c09      	cmp	r4, #9
24010204:	d9f2      	bls.n	240101ec <_vsnprintf.constprop.0+0x9c>
        if(*format == '.') {
24010206:	783a      	ldrb	r2, [r7, #0]
24010208:	2a2e      	cmp	r2, #46	; 0x2e
2401020a:	d158      	bne.n	240102be <_vsnprintf.constprop.0+0x16e>
            if(_is_digit(*format)) {
2401020c:	7878      	ldrb	r0, [r7, #1]
            format++;
2401020e:	1c7a      	adds	r2, r7, #1
            flags |= FLAGS_PRECISION;
24010210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            if(_is_digit(*format)) {
24010214:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
24010218:	2c09      	cmp	r4, #9
2401021a:	d847      	bhi.n	240102ac <_vsnprintf.constprop.0+0x15c>
    unsigned int i = 0U;
2401021c:	2400      	movs	r4, #0
2401021e:	e015      	b.n	2401024c <_vsnprintf.constprop.0+0xfc>
        else if(*format == '*') {
24010220:	2a2a      	cmp	r2, #42	; 0x2a
24010222:	d10a      	bne.n	2401023a <_vsnprintf.constprop.0+0xea>
            const int w = va_arg(va, int);
24010224:	f856 8b04 	ldr.w	r8, [r6], #4
24010228:	4607      	mov	r7, r0
            if(w < 0) {
2401022a:	f1b8 0f00 	cmp.w	r8, #0
                flags |= FLAGS_LEFT;    // reverse padding
2401022e:	bfbc      	itt	lt
24010230:	f043 0302 	orrlt.w	r3, r3, #2
                width = (unsigned int) - w;
24010234:	f1c8 0800 	rsblt	r8, r8, #0
            format++;
24010238:	e7e5      	b.n	24010206 <_vsnprintf.constprop.0+0xb6>
        width = 0U;
2401023a:	f04f 0800 	mov.w	r8, #0
2401023e:	e7e2      	b.n	24010206 <_vsnprintf.constprop.0+0xb6>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
24010240:	220a      	movs	r2, #10
24010242:	fb02 0004 	mla	r0, r2, r4, r0
24010246:	463a      	mov	r2, r7
24010248:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    while(_is_digit(**str)) {
2401024c:	4617      	mov	r7, r2
2401024e:	f817 0b01 	ldrb.w	r0, [r7], #1
24010252:	f1a0 0c30 	sub.w	ip, r0, #48	; 0x30
24010256:	f1bc 0f09 	cmp.w	ip, #9
2401025a:	d9f1      	bls.n	24010240 <_vsnprintf.constprop.0+0xf0>
2401025c:	4617      	mov	r7, r2
        switch(*format) {
2401025e:	463a      	mov	r2, r7
24010260:	f812 0b01 	ldrb.w	r0, [r2], #1
24010264:	286c      	cmp	r0, #108	; 0x6c
24010266:	d033      	beq.n	240102d0 <_vsnprintf.constprop.0+0x180>
24010268:	d82b      	bhi.n	240102c2 <_vsnprintf.constprop.0+0x172>
2401026a:	2868      	cmp	r0, #104	; 0x68
2401026c:	d037      	beq.n	240102de <_vsnprintf.constprop.0+0x18e>
2401026e:	286a      	cmp	r0, #106	; 0x6a
24010270:	d03f      	beq.n	240102f2 <_vsnprintf.constprop.0+0x1a2>
        switch(*format) {
24010272:	f817 eb01 	ldrb.w	lr, [r7], #1
24010276:	f1be 0f78 	cmp.w	lr, #120	; 0x78
2401027a:	d811      	bhi.n	240102a0 <_vsnprintf.constprop.0+0x150>
2401027c:	f1be 0f63 	cmp.w	lr, #99	; 0x63
24010280:	d83a      	bhi.n	240102f8 <_vsnprintf.constprop.0+0x1a8>
24010282:	f1be 0f62 	cmp.w	lr, #98	; 0x62
24010286:	f000 80a2 	beq.w	240103ce <_vsnprintf.constprop.0+0x27e>
2401028a:	f1be 0f63 	cmp.w	lr, #99	; 0x63
2401028e:	f000 80f9 	beq.w	24010484 <_vsnprintf.constprop.0+0x334>
24010292:	f1be 0f25 	cmp.w	lr, #37	; 0x25
24010296:	d003      	beq.n	240102a0 <_vsnprintf.constprop.0+0x150>
24010298:	f1be 0f58 	cmp.w	lr, #88	; 0x58
2401029c:	f000 8093 	beq.w	240103c6 <_vsnprintf.constprop.0+0x276>
                out(*format, buffer, idx++, maxlen);
240102a0:	1c6c      	adds	r4, r5, #1
240102a2:	464b      	mov	r3, r9
240102a4:	462a      	mov	r2, r5
240102a6:	4670      	mov	r0, lr
240102a8:	910a      	str	r1, [sp, #40]	; 0x28
240102aa:	e776      	b.n	2401019a <_vsnprintf.constprop.0+0x4a>
            else if(*format == '*') {
240102ac:	282a      	cmp	r0, #42	; 0x2a
240102ae:	d105      	bne.n	240102bc <_vsnprintf.constprop.0+0x16c>
                precision = prec > 0 ? (unsigned int)prec : 0U;
240102b0:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
240102b4:	3702      	adds	r7, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
240102b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
240102ba:	e7d0      	b.n	2401025e <_vsnprintf.constprop.0+0x10e>
            format++;
240102bc:	4617      	mov	r7, r2
        precision = 0U;
240102be:	2400      	movs	r4, #0
240102c0:	e7cd      	b.n	2401025e <_vsnprintf.constprop.0+0x10e>
        switch(*format) {
240102c2:	2874      	cmp	r0, #116	; 0x74
240102c4:	d001      	beq.n	240102ca <_vsnprintf.constprop.0+0x17a>
240102c6:	287a      	cmp	r0, #122	; 0x7a
240102c8:	d1d3      	bne.n	24010272 <_vsnprintf.constprop.0+0x122>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
240102ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240102ce:	e00b      	b.n	240102e8 <_vsnprintf.constprop.0+0x198>
                if(*format == 'l') {
240102d0:	7878      	ldrb	r0, [r7, #1]
240102d2:	286c      	cmp	r0, #108	; 0x6c
240102d4:	d1f9      	bne.n	240102ca <_vsnprintf.constprop.0+0x17a>
                    flags |= FLAGS_LONG_LONG;
240102d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
                    format++;
240102da:	3702      	adds	r7, #2
240102dc:	e7c9      	b.n	24010272 <_vsnprintf.constprop.0+0x122>
                if(*format == 'h') {
240102de:	7878      	ldrb	r0, [r7, #1]
240102e0:	2868      	cmp	r0, #104	; 0x68
240102e2:	d003      	beq.n	240102ec <_vsnprintf.constprop.0+0x19c>
                flags |= FLAGS_SHORT;
240102e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
                format++;
240102e8:	4617      	mov	r7, r2
                break;
240102ea:	e7c2      	b.n	24010272 <_vsnprintf.constprop.0+0x122>
                    flags |= FLAGS_CHAR;
240102ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
240102f0:	e7f3      	b.n	240102da <_vsnprintf.constprop.0+0x18a>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
240102f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
                break;
240102f6:	e7f7      	b.n	240102e8 <_vsnprintf.constprop.0+0x198>
        switch(*format) {
240102f8:	f1ae 0c64 	sub.w	ip, lr, #100	; 0x64
240102fc:	2201      	movs	r2, #1
240102fe:	4845      	ldr	r0, [pc, #276]	; (24010414 <_vsnprintf.constprop.0+0x2c4>)
24010300:	fa5f fc8c 	uxtb.w	ip, ip
24010304:	fa02 f20c 	lsl.w	r2, r2, ip
24010308:	4002      	ands	r2, r0
2401030a:	d11b      	bne.n	24010344 <_vsnprintf.constprop.0+0x1f4>
2401030c:	f1be 0f73 	cmp.w	lr, #115	; 0x73
24010310:	f000 80f7 	beq.w	24010502 <_vsnprintf.constprop.0+0x3b2>
24010314:	f1be 0f70 	cmp.w	lr, #112	; 0x70
24010318:	d1c2      	bne.n	240102a0 <_vsnprintf.constprop.0+0x150>
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
2401031a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
2401031e:	4658      	mov	r0, fp
24010320:	910a      	str	r1, [sp, #40]	; 0x28
24010322:	9305      	str	r3, [sp, #20]
24010324:	2308      	movs	r3, #8
24010326:	e9cd 4303 	strd	r4, r3, [sp, #12]
2401032a:	2310      	movs	r3, #16
2401032c:	e9cd 2301 	strd	r2, r3, [sp, #4]
24010330:	f856 3b04 	ldr.w	r3, [r6], #4
24010334:	462a      	mov	r2, r5
24010336:	9300      	str	r3, [sp, #0]
24010338:	464b      	mov	r3, r9
2401033a:	f7ff fe6c 	bl	24010016 <_ntoa_long>
2401033e:	4605      	mov	r5, r0
                out(*format, buffer, idx++, maxlen);
24010340:	990a      	ldr	r1, [sp, #40]	; 0x28
                break;
24010342:	e713      	b.n	2401016c <_vsnprintf.constprop.0+0x1c>
                    if(*format == 'x' || *format == 'X') {
24010344:	f1be 0f78 	cmp.w	lr, #120	; 0x78
24010348:	d03f      	beq.n	240103ca <_vsnprintf.constprop.0+0x27a>
2401034a:	f1be 0f6f 	cmp.w	lr, #111	; 0x6f
2401034e:	f000 8140 	beq.w	240105d2 <_vsnprintf.constprop.0+0x482>
                    if((*format != 'i') && (*format != 'd')) {
24010352:	f1be 0f69 	cmp.w	lr, #105	; 0x69
                        flags &= ~FLAGS_HASH;   // no hash for dec format
24010356:	f023 0310 	bic.w	r3, r3, #16
                        base = 10U;
2401035a:	f04f 020a 	mov.w	r2, #10
                    if((*format != 'i') && (*format != 'd')) {
2401035e:	d002      	beq.n	24010366 <_vsnprintf.constprop.0+0x216>
24010360:	f1be 0f64 	cmp.w	lr, #100	; 0x64
24010364:	d134      	bne.n	240103d0 <_vsnprintf.constprop.0+0x280>
                    if(flags & FLAGS_PRECISION) {
24010366:	0558      	lsls	r0, r3, #21
                        flags &= ~FLAGS_ZEROPAD;
24010368:	bf48      	it	mi
2401036a:	f023 0301 	bicmi.w	r3, r3, #1
                    if((*format == 'i') || (*format == 'd')) {
2401036e:	f1be 0f69 	cmp.w	lr, #105	; 0x69
                        if(flags & FLAGS_LONG_LONG) {
24010372:	f403 7c00 	and.w	ip, r3, #512	; 0x200
                    if((*format == 'i') || (*format == 'd')) {
24010376:	d002      	beq.n	2401037e <_vsnprintf.constprop.0+0x22e>
24010378:	f1be 0f64 	cmp.w	lr, #100	; 0x64
2401037c:	d14c      	bne.n	24010418 <_vsnprintf.constprop.0+0x2c8>
                        if(flags & FLAGS_LONG_LONG) {
2401037e:	f1bc 0f00 	cmp.w	ip, #0
24010382:	d028      	beq.n	240103d6 <_vsnprintf.constprop.0+0x286>
                            const long long value = va_arg(va, long long);
24010384:	3607      	adds	r6, #7
24010386:	f026 0607 	bic.w	r6, r6, #7
2401038a:	46b2      	mov	sl, r6
2401038c:	6876      	ldr	r6, [r6, #4]
2401038e:	f85a 0b08 	ldr.w	r0, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
24010392:	9406      	str	r4, [sp, #24]
24010394:	9204      	str	r2, [sp, #16]
24010396:	e9cd 8307 	strd	r8, r3, [sp, #28]
2401039a:	2300      	movs	r3, #0
2401039c:	9305      	str	r3, [sp, #20]
2401039e:	0ff3      	lsrs	r3, r6, #31
240103a0:	2e00      	cmp	r6, #0
240103a2:	9302      	str	r3, [sp, #8]
240103a4:	4603      	mov	r3, r0
240103a6:	da02      	bge.n	240103ae <_vsnprintf.constprop.0+0x25e>
240103a8:	4243      	negs	r3, r0
240103aa:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
240103ae:	e9cd 3600 	strd	r3, r6, [sp]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
240103b2:	464b      	mov	r3, r9
240103b4:	462a      	mov	r2, r5
240103b6:	4658      	mov	r0, fp
240103b8:	910a      	str	r1, [sp, #40]	; 0x28
240103ba:	f7ff fe6e 	bl	2401009a <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
240103be:	4605      	mov	r5, r0
240103c0:	990a      	ldr	r1, [sp, #40]	; 0x28
                    break;
240103c2:	4656      	mov	r6, sl
240103c4:	e6d2      	b.n	2401016c <_vsnprintf.constprop.0+0x1c>
                        flags |= FLAGS_UPPERCASE;
240103c6:	f043 0320 	orr.w	r3, r3, #32
                        base = 16U;
240103ca:	2210      	movs	r2, #16
240103cc:	e000      	b.n	240103d0 <_vsnprintf.constprop.0+0x280>
        switch(*format) {
240103ce:	2202      	movs	r2, #2
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
240103d0:	f023 030c 	bic.w	r3, r3, #12
240103d4:	e7c7      	b.n	24010366 <_vsnprintf.constprop.0+0x216>
                        else if(flags & FLAGS_LONG) {
240103d6:	05d8      	lsls	r0, r3, #23
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
240103d8:	f106 0a04 	add.w	sl, r6, #4
                        else if(flags & FLAGS_LONG) {
240103dc:	d501      	bpl.n	240103e2 <_vsnprintf.constprop.0+0x292>
                                                                                                                                       int) : va_arg(va, int);
240103de:	6830      	ldr	r0, [r6, #0]
240103e0:	e002      	b.n	240103e8 <_vsnprintf.constprop.0+0x298>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
240103e2:	0658      	lsls	r0, r3, #25
240103e4:	d50c      	bpl.n	24010400 <_vsnprintf.constprop.0+0x2b0>
240103e6:	7830      	ldrb	r0, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
240103e8:	2800      	cmp	r0, #0
240103ea:	e9cd 8304 	strd	r8, r3, [sp, #16]
240103ee:	ea4f 73d0 	mov.w	r3, r0, lsr #31
240103f2:	bfb8      	it	lt
240103f4:	4240      	neglt	r0, r0
240103f6:	e9cd 2402 	strd	r2, r4, [sp, #8]
240103fa:	9301      	str	r3, [sp, #4]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
240103fc:	9000      	str	r0, [sp, #0]
240103fe:	e02a      	b.n	24010456 <_vsnprintf.constprop.0+0x306>
                                                                                                                                       int) : va_arg(va, int);
24010400:	0618      	lsls	r0, r3, #24
24010402:	d5ec      	bpl.n	240103de <_vsnprintf.constprop.0+0x28e>
24010404:	f9b6 0000 	ldrsh.w	r0, [r6]
24010408:	e7ee      	b.n	240103e8 <_vsnprintf.constprop.0+0x298>
2401040a:	bf00      	nop
2401040c:	2400feb1 	.word	0x2400feb1
24010410:	2400feb9 	.word	0x2400feb9
24010414:	00120821 	.word	0x00120821
                        if(flags & FLAGS_LONG_LONG) {
24010418:	f1bc 0f00 	cmp.w	ip, #0
2401041c:	d00f      	beq.n	2401043e <_vsnprintf.constprop.0+0x2ee>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
2401041e:	f106 0a07 	add.w	sl, r6, #7
24010422:	9406      	str	r4, [sp, #24]
24010424:	e9cd 8307 	strd	r8, r3, [sp, #28]
24010428:	f02a 0a07 	bic.w	sl, sl, #7
2401042c:	2300      	movs	r3, #0
2401042e:	e9cd 2304 	strd	r2, r3, [sp, #16]
24010432:	9302      	str	r3, [sp, #8]
24010434:	e8fa 2302 	ldrd	r2, r3, [sl], #8
24010438:	e9cd 2300 	strd	r2, r3, [sp]
2401043c:	e7b9      	b.n	240103b2 <_vsnprintf.constprop.0+0x262>
                        else if(flags & FLAGS_LONG) {
2401043e:	05d8      	lsls	r0, r3, #23
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
24010440:	f106 0a04 	add.w	sl, r6, #4
                        else if(flags & FLAGS_LONG) {
24010444:	d50e      	bpl.n	24010464 <_vsnprintf.constprop.0+0x314>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
24010446:	f8cd c004 	str.w	ip, [sp, #4]
2401044a:	e9cd 8304 	strd	r8, r3, [sp, #16]
2401044e:	e9cd 2402 	strd	r2, r4, [sp, #8]
24010452:	6833      	ldr	r3, [r6, #0]
24010454:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
24010456:	464b      	mov	r3, r9
24010458:	462a      	mov	r2, r5
2401045a:	4658      	mov	r0, fp
2401045c:	910a      	str	r1, [sp, #40]	; 0x28
2401045e:	f7ff fdda 	bl	24010016 <_ntoa_long>
24010462:	e7ac      	b.n	240103be <_vsnprintf.constprop.0+0x26e>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
24010464:	0658      	lsls	r0, r3, #25
24010466:	d507      	bpl.n	24010478 <_vsnprintf.constprop.0+0x328>
24010468:	7830      	ldrb	r0, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
2401046a:	e9cd 8304 	strd	r8, r3, [sp, #16]
2401046e:	2300      	movs	r3, #0
24010470:	e9cd 2402 	strd	r2, r4, [sp, #8]
24010474:	9301      	str	r3, [sp, #4]
24010476:	e7c1      	b.n	240103fc <_vsnprintf.constprop.0+0x2ac>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
24010478:	f013 0f80 	tst.w	r3, #128	; 0x80
2401047c:	6830      	ldr	r0, [r6, #0]
2401047e:	bf18      	it	ne
24010480:	b280      	uxthne	r0, r0
24010482:	e7f2      	b.n	2401046a <_vsnprintf.constprop.0+0x31a>
                    if(!(flags & FLAGS_LEFT)) {
24010484:	f013 0402 	ands.w	r4, r3, #2
24010488:	d025      	beq.n	240104d6 <_vsnprintf.constprop.0+0x386>
                    unsigned int l = 1U;
2401048a:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
2401048e:	1c6b      	adds	r3, r5, #1
24010490:	910b      	str	r1, [sp, #44]	; 0x2c
24010492:	462a      	mov	r2, r5
24010494:	f816 0b04 	ldrb.w	r0, [r6], #4
24010498:	930a      	str	r3, [sp, #40]	; 0x28
2401049a:	464b      	mov	r3, r9
2401049c:	47d8      	blx	fp
                    if(flags & FLAGS_LEFT) {
2401049e:	990b      	ldr	r1, [sp, #44]	; 0x2c
240104a0:	b36c      	cbz	r4, 240104fe <_vsnprintf.constprop.0+0x3ae>
240104a2:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
240104a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
240104a6:	e020      	b.n	240104ea <_vsnprintf.constprop.0+0x39a>
                            out(' ', buffer, idx++, maxlen);
240104a8:	910a      	str	r1, [sp, #40]	; 0x28
240104aa:	464b      	mov	r3, r9
240104ac:	2020      	movs	r0, #32
240104ae:	47d8      	blx	fp
240104b0:	990a      	ldr	r1, [sp, #40]	; 0x28
240104b2:	eb05 020a 	add.w	r2, r5, sl
                        while(l++ < width) {
240104b6:	f10a 0a01 	add.w	sl, sl, #1
240104ba:	45c2      	cmp	sl, r8
240104bc:	d3f4      	bcc.n	240104a8 <_vsnprintf.constprop.0+0x358>
240104be:	f1b8 0f00 	cmp.w	r8, #0
240104c2:	f108 33ff 	add.w	r3, r8, #4294967295
240104c6:	f108 0a01 	add.w	sl, r8, #1
240104ca:	bf04      	itt	eq
240104cc:	2300      	moveq	r3, #0
240104ce:	f04f 0a02 	moveq.w	sl, #2
240104d2:	441d      	add	r5, r3
240104d4:	e7db      	b.n	2401048e <_vsnprintf.constprop.0+0x33e>
240104d6:	46a2      	mov	sl, r4
240104d8:	e7eb      	b.n	240104b2 <_vsnprintf.constprop.0+0x362>
                            out(' ', buffer, idx++, maxlen);
240104da:	1c55      	adds	r5, r2, #1
240104dc:	910b      	str	r1, [sp, #44]	; 0x2c
240104de:	464b      	mov	r3, r9
240104e0:	2020      	movs	r0, #32
240104e2:	47d8      	blx	fp
240104e4:	3401      	adds	r4, #1
240104e6:	462a      	mov	r2, r5
240104e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
                        while(l++ < width) {
240104ea:	4544      	cmp	r4, r8
240104ec:	d3f5      	bcc.n	240104da <_vsnprintf.constprop.0+0x38a>
240104ee:	eba8 030a 	sub.w	r3, r8, sl
240104f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
240104f4:	45d0      	cmp	r8, sl
240104f6:	bf38      	it	cc
240104f8:	2300      	movcc	r3, #0
240104fa:	441a      	add	r2, r3
240104fc:	920a      	str	r2, [sp, #40]	; 0x28
                    break;
240104fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
24010500:	e634      	b.n	2401016c <_vsnprintf.constprop.0+0x1c>
                    const char * p = va_arg(va, char *);
24010502:	4632      	mov	r2, r6
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
24010504:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
24010506:	f852 6b04 	ldr.w	r6, [r2], #4
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
2401050a:	bf14      	ite	ne
2401050c:	4620      	movne	r0, r4
2401050e:	f04f 30ff 	moveq.w	r0, #4294967295
                    const char * p = va_arg(va, char *);
24010512:	920a      	str	r2, [sp, #40]	; 0x28
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
24010514:	4632      	mov	r2, r6
24010516:	4430      	add	r0, r6
    for(s = str; *s && maxsize--; ++s);
24010518:	f892 c000 	ldrb.w	ip, [r2]
2401051c:	f1bc 0f00 	cmp.w	ip, #0
24010520:	d001      	beq.n	24010526 <_vsnprintf.constprop.0+0x3d6>
24010522:	4290      	cmp	r0, r2
24010524:	d111      	bne.n	2401054a <_vsnprintf.constprop.0+0x3fa>
    return (unsigned int)(s - str);
24010526:	eba2 0a06 	sub.w	sl, r2, r6
                    if(flags & FLAGS_PRECISION) {
2401052a:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
2401052e:	920b      	str	r2, [sp, #44]	; 0x2c
24010530:	d002      	beq.n	24010538 <_vsnprintf.constprop.0+0x3e8>
                        l = (l < precision ? l : precision);
24010532:	45a2      	cmp	sl, r4
24010534:	bf28      	it	cs
24010536:	46a2      	movcs	sl, r4
                    if(!(flags & FLAGS_LEFT)) {
24010538:	f013 0302 	ands.w	r3, r3, #2
2401053c:	930c      	str	r3, [sp, #48]	; 0x30
2401053e:	d11c      	bne.n	2401057a <_vsnprintf.constprop.0+0x42a>
24010540:	ebaa 0305 	sub.w	r3, sl, r5
24010544:	462a      	mov	r2, r5
24010546:	930e      	str	r3, [sp, #56]	; 0x38
24010548:	e009      	b.n	2401055e <_vsnprintf.constprop.0+0x40e>
    for(s = str; *s && maxsize--; ++s);
2401054a:	3201      	adds	r2, #1
2401054c:	e7e4      	b.n	24010518 <_vsnprintf.constprop.0+0x3c8>
                            out(' ', buffer, idx++, maxlen);
2401054e:	1c53      	adds	r3, r2, #1
24010550:	910f      	str	r1, [sp, #60]	; 0x3c
24010552:	2020      	movs	r0, #32
24010554:	930d      	str	r3, [sp, #52]	; 0x34
24010556:	464b      	mov	r3, r9
24010558:	47d8      	blx	fp
2401055a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
2401055c:	990f      	ldr	r1, [sp, #60]	; 0x3c
                        while(l++ < width) {
2401055e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
24010560:	18d3      	adds	r3, r2, r3
24010562:	4543      	cmp	r3, r8
24010564:	d3f3      	bcc.n	2401054e <_vsnprintf.constprop.0+0x3fe>
24010566:	eba8 030a 	sub.w	r3, r8, sl
2401056a:	f10a 0201 	add.w	r2, sl, #1
2401056e:	45d0      	cmp	r8, sl
24010570:	bf38      	it	cc
24010572:	2300      	movcc	r3, #0
24010574:	441d      	add	r5, r3
24010576:	eb03 0a02 	add.w	sl, r3, r2
2401057a:	1bab      	subs	r3, r5, r6
2401057c:	930d      	str	r3, [sp, #52]	; 0x34
2401057e:	e005      	b.n	2401058c <_vsnprintf.constprop.0+0x43c>
24010580:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
24010582:	910e      	str	r1, [sp, #56]	; 0x38
24010584:	464b      	mov	r3, r9
24010586:	462a      	mov	r2, r5
24010588:	47d8      	blx	fp
2401058a:	990e      	ldr	r1, [sp, #56]	; 0x38
2401058c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2401058e:	199d      	adds	r5, r3, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
24010590:	f816 0b01 	ldrb.w	r0, [r6], #1
24010594:	b128      	cbz	r0, 240105a2 <_vsnprintf.constprop.0+0x452>
24010596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24010598:	2b00      	cmp	r3, #0
2401059a:	d0f2      	beq.n	24010582 <_vsnprintf.constprop.0+0x432>
2401059c:	1e63      	subs	r3, r4, #1
2401059e:	2c00      	cmp	r4, #0
240105a0:	d1ee      	bne.n	24010580 <_vsnprintf.constprop.0+0x430>
                    if(flags & FLAGS_LEFT) {
240105a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
240105a4:	b19b      	cbz	r3, 240105ce <_vsnprintf.constprop.0+0x47e>
240105a6:	462a      	mov	r2, r5
240105a8:	ebaa 0405 	sub.w	r4, sl, r5
240105ac:	e006      	b.n	240105bc <_vsnprintf.constprop.0+0x46c>
                            out(' ', buffer, idx++, maxlen);
240105ae:	1c56      	adds	r6, r2, #1
240105b0:	910b      	str	r1, [sp, #44]	; 0x2c
240105b2:	464b      	mov	r3, r9
240105b4:	2020      	movs	r0, #32
240105b6:	47d8      	blx	fp
240105b8:	4632      	mov	r2, r6
240105ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
                        while(l++ < width) {
240105bc:	18a3      	adds	r3, r4, r2
240105be:	4598      	cmp	r8, r3
240105c0:	d8f5      	bhi.n	240105ae <_vsnprintf.constprop.0+0x45e>
240105c2:	eba8 030a 	sub.w	r3, r8, sl
240105c6:	45d0      	cmp	r8, sl
240105c8:	bf38      	it	cc
240105ca:	2300      	movcc	r3, #0
240105cc:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
240105ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
                    break;
240105d0:	e5cc      	b.n	2401016c <_vsnprintf.constprop.0+0x1c>
                    if(*format == 'x' || *format == 'X') {
240105d2:	2208      	movs	r2, #8
240105d4:	e6fc      	b.n	240103d0 <_vsnprintf.constprop.0+0x280>
240105d6:	bf00      	nop

240105d8 <lv_vsnprintf>:
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
    return _vsnprintf(_out_buffer, buffer, count, format, va);
240105d8:	f7ff bdba 	b.w	24010150 <_vsnprintf.constprop.0>

240105dc <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
240105dc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
240105de:	2118      	movs	r1, #24
240105e0:	4804      	ldr	r0, [pc, #16]	; (240105f4 <_lv_task_core_init+0x18>)
240105e2:	f7ff f84a 	bl	2400f67a <_lv_ll_init>

    task_list_changed = false;
240105e6:	4b04      	ldr	r3, [pc, #16]	; (240105f8 <_lv_task_core_init+0x1c>)
240105e8:	2200      	movs	r2, #0
240105ea:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
240105ec:	2201      	movs	r2, #1
240105ee:	4b03      	ldr	r3, [pc, #12]	; (240105fc <_lv_task_core_init+0x20>)
240105f0:	701a      	strb	r2, [r3, #0]
}
240105f2:	bd08      	pop	{r3, pc}
240105f4:	2402dc5c 	.word	0x2402dc5c
240105f8:	24035caf 	.word	0x24035caf
240105fc:	24035cac 	.word	0x24035cac

24010600 <lv_task_create_basic>:
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
24010600:	481c      	ldr	r0, [pc, #112]	; (24010674 <lv_task_create_basic+0x74>)
{
24010602:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
24010604:	f7ff f878 	bl	2400f6f8 <_lv_ll_get_head>
    if(NULL == tmp) {
24010608:	4601      	mov	r1, r0
2401060a:	b148      	cbz	r0, 24010620 <lv_task_create_basic+0x20>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
2401060c:	4c19      	ldr	r4, [pc, #100]	; (24010674 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
2401060e:	7d0b      	ldrb	r3, [r1, #20]
24010610:	f003 0307 	and.w	r3, r3, #7
24010614:	2b03      	cmp	r3, #3
24010616:	d80b      	bhi.n	24010630 <lv_task_create_basic+0x30>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
24010618:	4816      	ldr	r0, [pc, #88]	; (24010674 <lv_task_create_basic+0x74>)
2401061a:	f7ff f87c 	bl	2400f716 <_lv_ll_ins_prev>
2401061e:	e002      	b.n	24010626 <lv_task_create_basic+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
24010620:	4814      	ldr	r0, [pc, #80]	; (24010674 <lv_task_create_basic+0x74>)
24010622:	f7ff f832 	bl	2400f68a <_lv_ll_ins_head>
        if(new_task == NULL) return NULL;
24010626:	4604      	mov	r4, r0
24010628:	b960      	cbnz	r0, 24010644 <lv_task_create_basic+0x44>
2401062a:	2400      	movs	r4, #0
}
2401062c:	4620      	mov	r0, r4
2401062e:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
24010630:	4620      	mov	r0, r4
24010632:	f7ff f867 	bl	2400f704 <_lv_ll_get_next>
        } while(tmp != NULL);
24010636:	4601      	mov	r1, r0
24010638:	2800      	cmp	r0, #0
2401063a:	d1e8      	bne.n	2401060e <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
2401063c:	480d      	ldr	r0, [pc, #52]	; (24010674 <lv_task_create_basic+0x74>)
2401063e:	f7ff f83f 	bl	2400f6c0 <_lv_ll_ins_tail>
24010642:	e7f0      	b.n	24010626 <lv_task_create_basic+0x26>
    task_list_changed = true;
24010644:	2501      	movs	r5, #1
24010646:	4b0c      	ldr	r3, [pc, #48]	; (24010678 <lv_task_create_basic+0x78>)
    new_task->prio    = DEF_PRIO;
24010648:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
2401064a:	2600      	movs	r6, #0
    task_list_changed = true;
2401064c:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
2401064e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    new_task->task_cb = NULL;
24010652:	6086      	str	r6, [r0, #8]
    new_task->period  = DEF_PERIOD;
24010654:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
24010656:	7d03      	ldrb	r3, [r0, #20]
24010658:	f362 0302 	bfi	r3, r2, #0, #3
2401065c:	7503      	strb	r3, [r0, #20]
    new_task->repeat_count = -1;
2401065e:	f04f 33ff 	mov.w	r3, #4294967295
24010662:	6103      	str	r3, [r0, #16]
    new_task->last_run = lv_tick_get();
24010664:	f7fe fd1a 	bl	2400f09c <lv_tick_get>
    task_created = true;
24010668:	4b04      	ldr	r3, [pc, #16]	; (2401067c <lv_task_create_basic+0x7c>)
    new_task->last_run = lv_tick_get();
2401066a:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
2401066c:	60e6      	str	r6, [r4, #12]
    task_created = true;
2401066e:	701d      	strb	r5, [r3, #0]
    return new_task;
24010670:	e7dc      	b.n	2401062c <lv_task_create_basic+0x2c>
24010672:	bf00      	nop
24010674:	2402dc5c 	.word	0x2402dc5c
24010678:	24035caf 	.word	0x24035caf
2401067c:	24035cad 	.word	0x24035cad

24010680 <lv_task_del>:
{
24010680:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
24010682:	4601      	mov	r1, r0
{
24010684:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
24010686:	4808      	ldr	r0, [pc, #32]	; (240106a8 <lv_task_del+0x28>)
    task_list_changed = true;
24010688:	2501      	movs	r5, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
2401068a:	f7ff f872 	bl	2400f772 <_lv_ll_remove>
    task_list_changed = true;
2401068e:	4b07      	ldr	r3, [pc, #28]	; (240106ac <lv_task_del+0x2c>)
    lv_mem_free(task);
24010690:	4620      	mov	r0, r4
    task_list_changed = true;
24010692:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
24010694:	f7ff f9a2 	bl	2400f9dc <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
24010698:	4b05      	ldr	r3, [pc, #20]	; (240106b0 <lv_task_del+0x30>)
2401069a:	681b      	ldr	r3, [r3, #0]
2401069c:	42a3      	cmp	r3, r4
2401069e:	bf04      	itt	eq
240106a0:	4b04      	ldreq	r3, [pc, #16]	; (240106b4 <lv_task_del+0x34>)
240106a2:	701d      	strbeq	r5, [r3, #0]
}
240106a4:	bd38      	pop	{r3, r4, r5, pc}
240106a6:	bf00      	nop
240106a8:	2402dc5c 	.word	0x2402dc5c
240106ac:	24035caf 	.word	0x24035caf
240106b0:	2402dc58 	.word	0x2402dc58
240106b4:	24035cae 	.word	0x24035cae

240106b8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
240106b8:	b538      	push	{r3, r4, r5, lr}
240106ba:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
240106bc:	6840      	ldr	r0, [r0, #4]
240106be:	f7fe fcfb 	bl	2400f0b8 <lv_tick_elaps>
    if(lv_task_time_remaining(task) == 0) {
240106c2:	6823      	ldr	r3, [r4, #0]
240106c4:	4298      	cmp	r0, r3
240106c6:	d31c      	bcc.n	24010702 <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
240106c8:	f7fe fce8 	bl	2400f09c <lv_tick_get>
        task_deleted   = false;
240106cc:	4d0e      	ldr	r5, [pc, #56]	; (24010708 <lv_task_exec+0x50>)
240106ce:	2300      	movs	r3, #0
        task_created   = false;
240106d0:	4a0e      	ldr	r2, [pc, #56]	; (2401070c <lv_task_exec+0x54>)
        task->last_run = lv_tick_get();
240106d2:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
240106d4:	702b      	strb	r3, [r5, #0]
        task_created   = false;
240106d6:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
240106d8:	68a3      	ldr	r3, [r4, #8]
240106da:	b943      	cbnz	r3, 240106ee <lv_task_exec+0x36>
            if(task->repeat_count > 0) {
240106dc:	6923      	ldr	r3, [r4, #16]
240106de:	2b00      	cmp	r3, #0
240106e0:	dc0c      	bgt.n	240106fc <lv_task_exec+0x44>
            if(task->repeat_count == 0) {
240106e2:	6923      	ldr	r3, [r4, #16]
240106e4:	b943      	cbnz	r3, 240106f8 <lv_task_exec+0x40>
                lv_task_del(task);
240106e6:	4620      	mov	r0, r4
240106e8:	f7ff ffca 	bl	24010680 <lv_task_del>
240106ec:	e004      	b.n	240106f8 <lv_task_exec+0x40>
        if(task->task_cb) task->task_cb(task);
240106ee:	4620      	mov	r0, r4
240106f0:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
240106f2:	782b      	ldrb	r3, [r5, #0]
240106f4:	2b00      	cmp	r3, #0
240106f6:	d0f1      	beq.n	240106dc <lv_task_exec+0x24>
                lv_task_del(task);
240106f8:	2001      	movs	r0, #1
}
240106fa:	bd38      	pop	{r3, r4, r5, pc}
                task->repeat_count--;
240106fc:	3b01      	subs	r3, #1
240106fe:	6123      	str	r3, [r4, #16]
24010700:	e7ef      	b.n	240106e2 <lv_task_exec+0x2a>
    bool exec = false;
24010702:	2000      	movs	r0, #0
24010704:	e7f9      	b.n	240106fa <lv_task_exec+0x42>
24010706:	bf00      	nop
24010708:	24035cae 	.word	0x24035cae
2401070c:	24035cad 	.word	0x24035cad

24010710 <lv_task_set_prio>:
    if(task->prio == prio) return;
24010710:	7d03      	ldrb	r3, [r0, #20]
24010712:	f003 0307 	and.w	r3, r3, #7
24010716:	428b      	cmp	r3, r1
{
24010718:	b570      	push	{r4, r5, r6, lr}
2401071a:	4604      	mov	r4, r0
2401071c:	460d      	mov	r5, r1
    if(task->prio == prio) return;
2401071e:	d017      	beq.n	24010750 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
24010720:	480f      	ldr	r0, [pc, #60]	; (24010760 <lv_task_set_prio+0x50>)
24010722:	f7fe ffe9 	bl	2400f6f8 <_lv_ll_get_head>
24010726:	4e0e      	ldr	r6, [pc, #56]	; (24010760 <lv_task_set_prio+0x50>)
24010728:	4602      	mov	r2, r0
2401072a:	b132      	cbz	r2, 2401073a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
2401072c:	7d13      	ldrb	r3, [r2, #20]
2401072e:	f003 0307 	and.w	r3, r3, #7
24010732:	429d      	cmp	r5, r3
24010734:	db0d      	blt.n	24010752 <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
24010736:	42a2      	cmp	r2, r4
24010738:	d003      	beq.n	24010742 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
2401073a:	4621      	mov	r1, r4
2401073c:	4808      	ldr	r0, [pc, #32]	; (24010760 <lv_task_set_prio+0x50>)
2401073e:	f7ff f87e 	bl	2400f83e <_lv_ll_move_before>
    task_list_changed = true;
24010742:	4b08      	ldr	r3, [pc, #32]	; (24010764 <lv_task_set_prio+0x54>)
24010744:	2201      	movs	r2, #1
24010746:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
24010748:	7d23      	ldrb	r3, [r4, #20]
2401074a:	f365 0302 	bfi	r3, r5, #0, #3
2401074e:	7523      	strb	r3, [r4, #20]
}
24010750:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
24010752:	4611      	mov	r1, r2
24010754:	4630      	mov	r0, r6
24010756:	f7fe ffd5 	bl	2400f704 <_lv_ll_get_next>
2401075a:	4602      	mov	r2, r0
2401075c:	e7e5      	b.n	2401072a <lv_task_set_prio+0x1a>
2401075e:	bf00      	nop
24010760:	2402dc5c 	.word	0x2402dc5c
24010764:	24035caf 	.word	0x24035caf

24010768 <lv_task_create>:
{
24010768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
2401076a:	4607      	mov	r7, r0
2401076c:	460e      	mov	r6, r1
2401076e:	461d      	mov	r5, r3
24010770:	9201      	str	r2, [sp, #4]
    lv_task_t * new_task = lv_task_create_basic();
24010772:	f7ff ff45 	bl	24010600 <lv_task_create_basic>
    if(new_task == NULL) return NULL;
24010776:	4604      	mov	r4, r0
24010778:	b128      	cbz	r0, 24010786 <lv_task_create+0x1e>
    lv_task_set_prio(new_task, prio);
2401077a:	9901      	ldr	r1, [sp, #4]
    task->task_cb = task_cb;
2401077c:	6087      	str	r7, [r0, #8]
    task->period = period;
2401077e:	6006      	str	r6, [r0, #0]
    lv_task_set_prio(new_task, prio);
24010780:	f7ff ffc6 	bl	24010710 <lv_task_set_prio>
    new_task->user_data = user_data;
24010784:	60e5      	str	r5, [r4, #12]
}
24010786:	4620      	mov	r0, r4
24010788:	b003      	add	sp, #12
2401078a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2401078c <lv_task_ready>:
{
2401078c:	b510      	push	{r4, lr}
2401078e:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
24010790:	f7fe fc84 	bl	2400f09c <lv_tick_get>
24010794:	6823      	ldr	r3, [r4, #0]
24010796:	1ac3      	subs	r3, r0, r3
24010798:	3b01      	subs	r3, #1
2401079a:	6063      	str	r3, [r4, #4]
}
2401079c:	bd10      	pop	{r4, pc}

2401079e <lv_task_set_repeat_count>:
    task->repeat_count = repeat_count;
2401079e:	6101      	str	r1, [r0, #16]
}
240107a0:	4770      	bx	lr

240107a2 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
240107a2:	f990 2000 	ldrsb.w	r2, [r0]
240107a6:	7803      	ldrb	r3, [r0, #0]
240107a8:	2a00      	cmp	r2, #0
240107aa:	da0f      	bge.n	240107cc <lv_txt_utf8_size+0x2a>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
240107ac:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
240107b0:	2ac0      	cmp	r2, #192	; 0xc0
240107b2:	d00d      	beq.n	240107d0 <lv_txt_utf8_size+0x2e>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
240107b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
240107b8:	2ae0      	cmp	r2, #224	; 0xe0
240107ba:	d00b      	beq.n	240107d4 <lv_txt_utf8_size+0x32>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
240107bc:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
240107c0:	f1a0 03f0 	sub.w	r3, r0, #240	; 0xf0
240107c4:	4258      	negs	r0, r3
240107c6:	4158      	adcs	r0, r3
240107c8:	0080      	lsls	r0, r0, #2
240107ca:	4770      	bx	lr
        return 1;
240107cc:	2001      	movs	r0, #1
240107ce:	4770      	bx	lr
        return 2;
240107d0:	2002      	movs	r0, #2
240107d2:	4770      	bx	lr
        return 3;
240107d4:	2003      	movs	r0, #3
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
}
240107d6:	4770      	bx	lr

240107d8 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
240107d8:	2300      	movs	r3, #0
{
240107da:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
240107dc:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
240107de:	b901      	cbnz	r1, 240107e2 <lv_txt_utf8_next+0xa>
240107e0:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
240107e2:	680a      	ldr	r2, [r1, #0]
240107e4:	5685      	ldrsb	r5, [r0, r2]
        result = txt[*i];
        (*i)++;
240107e6:	1c54      	adds	r4, r2, #1
    if((txt[*i] & 0x80) == 0) {
240107e8:	5c83      	ldrb	r3, [r0, r2]
240107ea:	2d00      	cmp	r5, #0
240107ec:	db03      	blt.n	240107f6 <lv_txt_utf8_next+0x1e>
        result = txt[*i];
240107ee:	4618      	mov	r0, r3
        (*i)++;
240107f0:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
240107f2:	b002      	add	sp, #8
240107f4:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
240107f6:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
240107fa:	2dc0      	cmp	r5, #192	; 0xc0
240107fc:	d110      	bne.n	24010820 <lv_txt_utf8_next+0x48>
            (*i)++;
240107fe:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
24010800:	5d00      	ldrb	r0, [r0, r4]
24010802:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
24010806:	2c80      	cmp	r4, #128	; 0x80
24010808:	d001      	beq.n	2401080e <lv_txt_utf8_next+0x36>
    uint32_t result = 0;
2401080a:	2000      	movs	r0, #0
2401080c:	e7f1      	b.n	240107f2 <lv_txt_utf8_next+0x1a>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
2401080e:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
24010810:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
24010814:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
24010816:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
2401081a:	4418      	add	r0, r3
            (*i)++;
2401081c:	600a      	str	r2, [r1, #0]
2401081e:	e7e8      	b.n	240107f2 <lv_txt_utf8_next+0x1a>
        else if((txt[*i] & 0xF0) == 0xE0) {
24010820:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
24010824:	2de0      	cmp	r5, #224	; 0xe0
24010826:	d117      	bne.n	24010858 <lv_txt_utf8_next+0x80>
            (*i)++;
24010828:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
2401082a:	5d04      	ldrb	r4, [r0, r4]
2401082c:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
24010830:	2d80      	cmp	r5, #128	; 0x80
24010832:	d1ea      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            (*i)++;
24010834:	1c95      	adds	r5, r2, #2
24010836:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
24010838:	5d45      	ldrb	r5, [r0, r5]
2401083a:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
2401083e:	2880      	cmp	r0, #128	; 0x80
24010840:	d1e3      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
24010842:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
24010844:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
24010848:	01a4      	lsls	r4, r4, #6
            (*i)++;
2401084a:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
2401084c:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
2401084e:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
24010852:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
24010854:	4420      	add	r0, r4
            (*i)++;
24010856:	e7e1      	b.n	2401081c <lv_txt_utf8_next+0x44>
        else if((txt[*i] & 0xF8) == 0xF0) {
24010858:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
2401085c:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
2401085e:	2df0      	cmp	r5, #240	; 0xf0
24010860:	d1d3      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
24010862:	5d04      	ldrb	r4, [r0, r4]
24010864:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
24010868:	2d80      	cmp	r5, #128	; 0x80
2401086a:	d1ce      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            (*i)++;
2401086c:	1c95      	adds	r5, r2, #2
2401086e:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
24010870:	5d45      	ldrb	r5, [r0, r5]
24010872:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
24010876:	2e80      	cmp	r6, #128	; 0x80
24010878:	d1c7      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            (*i)++;
2401087a:	1cd6      	adds	r6, r2, #3
2401087c:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
2401087e:	5d80      	ldrb	r0, [r0, r6]
24010880:	f000 06c0 	and.w	r6, r0, #192	; 0xc0
24010884:	2e80      	cmp	r6, #128	; 0x80
24010886:	d1c0      	bne.n	2401080a <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
24010888:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
2401088a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
2401088e:	0324      	lsls	r4, r4, #12
            (*i)++;
24010890:	3204      	adds	r2, #4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
24010892:	01ad      	lsls	r5, r5, #6
            result = (uint32_t)(txt[*i] & 0x07) << 18;
24010894:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
24010898:	f404 347c 	and.w	r4, r4, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
2401089c:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
240108a0:	431c      	orrs	r4, r3
            result += txt[*i] & 0x3F;
240108a2:	4405      	add	r5, r0
240108a4:	1928      	adds	r0, r5, r4
            (*i)++;
240108a6:	e7b9      	b.n	2401081c <lv_txt_utf8_next+0x44>

240108a8 <lv_txt_utf8_prev>:
{
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
240108a8:	680b      	ldr	r3, [r1, #0]
{
240108aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
240108ac:	3b01      	subs	r3, #1
{
240108ae:	4606      	mov	r6, r0
240108b0:	460c      	mov	r4, r1
    (*i)--;
240108b2:	2504      	movs	r5, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
240108b4:	4f0c      	ldr	r7, [pc, #48]	; (240108e8 <lv_txt_utf8_prev+0x40>)
    (*i)--;
240108b6:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
240108b8:	6820      	ldr	r0, [r4, #0]
240108ba:	683b      	ldr	r3, [r7, #0]
240108bc:	4430      	add	r0, r6
240108be:	4798      	blx	r3
        if(c_size == 0) {
240108c0:	6823      	ldr	r3, [r4, #0]
240108c2:	b948      	cbnz	r0, 240108d8 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
240108c4:	b12b      	cbz	r3, 240108d2 <lv_txt_utf8_prev+0x2a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
240108c6:	3d01      	subs	r5, #1
                (*i)--;
240108c8:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
240108ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
240108ce:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
240108d0:	d1f2      	bne.n	240108b8 <lv_txt_utf8_prev+0x10>
240108d2:	2000      	movs	r0, #0

    uint32_t i_tmp  = *i;
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/

    return letter;
}
240108d4:	b003      	add	sp, #12
240108d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
240108d8:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
240108da:	a901      	add	r1, sp, #4
240108dc:	4b03      	ldr	r3, [pc, #12]	; (240108ec <lv_txt_utf8_prev+0x44>)
240108de:	4630      	mov	r0, r6
240108e0:	681b      	ldr	r3, [r3, #0]
240108e2:	4798      	blx	r3
    return letter;
240108e4:	e7f6      	b.n	240108d4 <lv_txt_utf8_prev+0x2c>
240108e6:	bf00      	nop
240108e8:	2401a6ec 	.word	0x2401a6ec
240108ec:	2401a6e4 	.word	0x2401a6e4

240108f0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
240108f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
240108f4:	2400      	movs	r4, #0
{
240108f6:	4607      	mov	r7, r0
240108f8:	460d      	mov	r5, r1
    for(i = 0; i < utf8_id; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
240108fa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 24010924 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id; i++) {
240108fe:	4626      	mov	r6, r4
24010900:	42ae      	cmp	r6, r5
24010902:	d102      	bne.n	2401090a <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
24010904:	4620      	mov	r0, r4
24010906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
2401090a:	1938      	adds	r0, r7, r4
2401090c:	f8d8 3000 	ldr.w	r3, [r8]
24010910:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
24010912:	2801      	cmp	r0, #1
    for(i = 0; i < utf8_id; i++) {
24010914:	f106 0601 	add.w	r6, r6, #1
        byte_cnt += c_size > 0 ? c_size : 1;
24010918:	bf38      	it	cc
2401091a:	2001      	movcc	r0, #1
2401091c:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id; i++) {
24010920:	e7ee      	b.n	24010900 <lv_txt_utf8_get_byte_id+0x10>
24010922:	bf00      	nop
24010924:	2401a6ec 	.word	0x2401a6ec

24010928 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
24010928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
2401092a:	2400      	movs	r4, #0
{
2401092c:	4606      	mov	r6, r0
2401092e:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
24010930:	4f06      	ldr	r7, [pc, #24]	; (2401094c <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
24010932:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
24010934:	9b01      	ldr	r3, [sp, #4]
24010936:	42ab      	cmp	r3, r5
24010938:	d302      	bcc.n	24010940 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
2401093a:	4620      	mov	r0, r4
2401093c:	b003      	add	sp, #12
2401093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
24010940:	683b      	ldr	r3, [r7, #0]
24010942:	a901      	add	r1, sp, #4
24010944:	4630      	mov	r0, r6
        char_cnt++;
24010946:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
24010948:	4798      	blx	r3
        char_cnt++;
2401094a:	e7f3      	b.n	24010934 <lv_txt_utf8_get_char_id+0xc>
2401094c:	2401a6e4 	.word	0x2401a6e4

24010950 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
24010950:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
24010952:	2400      	movs	r4, #0
{
24010954:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
24010956:	4e07      	ldr	r6, [pc, #28]	; (24010974 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
24010958:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
2401095a:	9b01      	ldr	r3, [sp, #4]
2401095c:	5ceb      	ldrb	r3, [r5, r3]
2401095e:	b913      	cbnz	r3, 24010966 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
24010960:	4620      	mov	r0, r4
24010962:	b002      	add	sp, #8
24010964:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
24010966:	6833      	ldr	r3, [r6, #0]
24010968:	a901      	add	r1, sp, #4
2401096a:	4628      	mov	r0, r5
        len++;
2401096c:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
2401096e:	4798      	blx	r3
        len++;
24010970:	e7f3      	b.n	2401095a <lv_txt_utf8_get_length+0xa>
24010972:	bf00      	nop
24010974:	2401a6e4 	.word	0x2401a6e4

24010978 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
24010978:	287f      	cmp	r0, #127	; 0x7f
{
2401097a:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
2401097c:	d911      	bls.n	240109a2 <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
2401097e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
24010982:	d210      	bcs.n	240109a6 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
24010984:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
24010986:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
2401098a:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
2401098e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
24010992:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
24010996:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
24010998:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
2401099c:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
240109a0:	9801      	ldr	r0, [sp, #4]
}
240109a2:	b002      	add	sp, #8
240109a4:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
240109a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
240109aa:	d214      	bcs.n	240109d6 <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
240109ac:	0b03      	lsrs	r3, r0, #12
240109ae:	f063 031f 	orn	r3, r3, #31
240109b2:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
240109b6:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
240109ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
240109be:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
240109c2:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
240109c6:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
240109ca:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
240109cc:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
240109d0:	f88d 3007 	strb.w	r3, [sp, #7]
240109d4:	e7e4      	b.n	240109a0 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
240109d6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
240109da:	d2e1      	bcs.n	240109a0 <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
240109dc:	0c83      	lsrs	r3, r0, #18
240109de:	f063 030f 	orn	r3, r3, #15
240109e2:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
240109e6:	f3c0 3305 	ubfx	r3, r0, #12, #6
240109ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
240109ee:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
240109f2:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
240109f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
240109fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
240109fe:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
24010a02:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
24010a06:	f88d 0007 	strb.w	r0, [sp, #7]
24010a0a:	e7c9      	b.n	240109a0 <lv_txt_unicode_to_utf8+0x28>

24010a0c <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
24010a0c:	2923      	cmp	r1, #35	; 0x23
24010a0e:	d116      	bne.n	24010a3e <_lv_txt_is_cmd+0x32>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
24010a10:	7802      	ldrb	r2, [r0, #0]
24010a12:	b95a      	cbnz	r2, 24010a2c <_lv_txt_is_cmd+0x20>
            *state = LV_TXT_CMD_STATE_PAR;
24010a14:	2301      	movs	r3, #1
            *state = LV_TXT_CMD_STATE_WAIT;
24010a16:	7003      	strb	r3, [r0, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
24010a18:	7802      	ldrb	r2, [r0, #0]
24010a1a:	2a01      	cmp	r2, #1
24010a1c:	d104      	bne.n	24010a28 <_lv_txt_is_cmd+0x1c>
        if(c == ' ') {
24010a1e:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
24010a20:	bf04      	itt	eq
24010a22:	2302      	moveq	r3, #2
24010a24:	7003      	strbeq	r3, [r0, #0]
        ret = true;
24010a26:	4613      	mov	r3, r2
}
24010a28:	4618      	mov	r0, r3
24010a2a:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
24010a2c:	2a01      	cmp	r2, #1
24010a2e:	f04f 0300 	mov.w	r3, #0
24010a32:	d0f0      	beq.n	24010a16 <_lv_txt_is_cmd+0xa>
        else if(*state == LV_TXT_CMD_STATE_IN) {
24010a34:	2a02      	cmp	r2, #2
24010a36:	d1ef      	bne.n	24010a18 <_lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_WAIT;
24010a38:	7003      	strb	r3, [r0, #0]
            ret    = true;
24010a3a:	2301      	movs	r3, #1
24010a3c:	e7ec      	b.n	24010a18 <_lv_txt_is_cmd+0xc>
    bool ret = false;
24010a3e:	2300      	movs	r3, #0
24010a40:	e7ea      	b.n	24010a18 <_lv_txt_is_cmd+0xc>
	...

24010a44 <_lv_txt_get_width>:
{
24010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010a48:	4688      	mov	r8, r1
24010a4a:	b085      	sub	sp, #20
24010a4c:	4617      	mov	r7, r2
24010a4e:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
24010a50:	4605      	mov	r5, r0
24010a52:	2400      	movs	r4, #0
24010a54:	2800      	cmp	r0, #0
24010a56:	d03e      	beq.n	24010ad6 <_lv_txt_get_width+0x92>
    if(font == NULL) return 0;
24010a58:	2a00      	cmp	r2, #0
24010a5a:	d03e      	beq.n	24010ada <_lv_txt_get_width+0x96>
    uint32_t i                   = 0;
24010a5c:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
24010a5e:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
24010a62:	2900      	cmp	r1, #0
24010a64:	d035      	beq.n	24010ad2 <_lv_txt_get_width+0x8e>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010a66:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
24010a6a:	f8df a074 	ldr.w	sl, [pc, #116]	; 24010ae0 <_lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010a6e:	f009 0901 	and.w	r9, r9, #1
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
24010a72:	f8da 3000 	ldr.w	r3, [sl]
24010a76:	a903      	add	r1, sp, #12
24010a78:	4628      	mov	r0, r5
24010a7a:	4798      	blx	r3
24010a7c:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
24010a7e:	9803      	ldr	r0, [sp, #12]
24010a80:	2100      	movs	r1, #0
24010a82:	f8da 3000 	ldr.w	r3, [sl]
24010a86:	4428      	add	r0, r5
24010a88:	4798      	blx	r3
24010a8a:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010a8c:	f1b9 0f00 	cmp.w	r9, #0
24010a90:	d111      	bne.n	24010ab6 <_lv_txt_get_width+0x72>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
24010a92:	4659      	mov	r1, fp
24010a94:	4638      	mov	r0, r7
24010a96:	f7fe f80d 	bl	2400eab4 <lv_font_get_glyph_width>
            if(char_width > 0) {
24010a9a:	b203      	sxth	r3, r0
24010a9c:	2b00      	cmp	r3, #0
24010a9e:	dc14      	bgt.n	24010aca <_lv_txt_get_width+0x86>
        while(i < length) {
24010aa0:	9b03      	ldr	r3, [sp, #12]
24010aa2:	4598      	cmp	r8, r3
24010aa4:	d8e5      	bhi.n	24010a72 <_lv_txt_get_width+0x2e>
        if(width > 0) {
24010aa6:	2c00      	cmp	r4, #0
24010aa8:	dd01      	ble.n	24010aae <_lv_txt_get_width+0x6a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
24010aaa:	1ba6      	subs	r6, r4, r6
24010aac:	b234      	sxth	r4, r6
}
24010aae:	4620      	mov	r0, r4
24010ab0:	b005      	add	sp, #20
24010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24010ab6:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
24010ab8:	4659      	mov	r1, fp
24010aba:	f10d 000b 	add.w	r0, sp, #11
24010abe:	f7ff ffa5 	bl	24010a0c <_lv_txt_is_cmd>
24010ac2:	9a01      	ldr	r2, [sp, #4]
24010ac4:	2800      	cmp	r0, #0
24010ac6:	d0e4      	beq.n	24010a92 <_lv_txt_get_width+0x4e>
24010ac8:	e7ea      	b.n	24010aa0 <_lv_txt_get_width+0x5c>
                width += letter_space;
24010aca:	4434      	add	r4, r6
24010acc:	4420      	add	r0, r4
24010ace:	b204      	sxth	r4, r0
24010ad0:	e7e6      	b.n	24010aa0 <_lv_txt_get_width+0x5c>
    lv_coord_t width             = 0;
24010ad2:	460c      	mov	r4, r1
24010ad4:	e7eb      	b.n	24010aae <_lv_txt_get_width+0x6a>
    if(txt == NULL) return 0;
24010ad6:	4604      	mov	r4, r0
24010ad8:	e7e9      	b.n	24010aae <_lv_txt_get_width+0x6a>
24010ada:	4614      	mov	r4, r2
24010adc:	e7e7      	b.n	24010aae <_lv_txt_get_width+0x6a>
24010ade:	bf00      	nop
24010ae0:	2401a6e4 	.word	0x2401a6e4

24010ae4 <_lv_txt_get_next_line>:
{
24010ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010ae8:	b08f      	sub	sp, #60	; 0x3c
24010aea:	4699      	mov	r9, r3
    if(txt == NULL) return 0;
24010aec:	4607      	mov	r7, r0
{
24010aee:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
24010af2:	9102      	str	r1, [sp, #8]
24010af4:	9204      	str	r2, [sp, #16]
24010af6:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
24010af8:	b190      	cbz	r0, 24010b20 <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
24010afa:	2900      	cmp	r1, #0
24010afc:	f000 80cc 	beq.w	24010c98 <_lv_txt_get_next_line+0x1b4>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
24010b00:	9b03      	ldr	r3, [sp, #12]
24010b02:	f013 0312 	ands.w	r3, r3, #18
24010b06:	d00e      	beq.n	24010b26 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
24010b08:	2000      	movs	r0, #0
24010b0a:	e000      	b.n	24010b0e <_lv_txt_get_next_line+0x2a>
24010b0c:	3001      	adds	r0, #1
24010b0e:	5c3b      	ldrb	r3, [r7, r0]
24010b10:	2b0a      	cmp	r3, #10
24010b12:	f000 80c3 	beq.w	24010c9c <_lv_txt_get_next_line+0x1b8>
24010b16:	2b0d      	cmp	r3, #13
24010b18:	f000 80c0 	beq.w	24010c9c <_lv_txt_get_next_line+0x1b8>
24010b1c:	2b00      	cmp	r3, #0
24010b1e:	d1f5      	bne.n	24010b0c <_lv_txt_get_next_line+0x28>
}
24010b20:	b00f      	add	sp, #60	; 0x3c
24010b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b26:	9a03      	ldr	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
24010b28:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b2c:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /* Iterating index into txt */
24010b30:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b32:	9205      	str	r2, [sp, #20]
24010b34:	f647 4218 	movw	r2, #31768	; 0x7c18
24010b38:	bf18      	it	ne
24010b3a:	4691      	movne	r9, r2
    while(txt[i] != '\0' && max_width > 0) {
24010b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24010b3e:	eb07 0a03 	add.w	sl, r7, r3
24010b42:	9300      	str	r3, [sp, #0]
24010b44:	5cfb      	ldrb	r3, [r7, r3]
24010b46:	2b00      	cmp	r3, #0
24010b48:	f000 808d 	beq.w	24010c66 <_lv_txt_get_next_line+0x182>
24010b4c:	f1b9 0f00 	cmp.w	r9, #0
24010b50:	f340 8089 	ble.w	24010c66 <_lv_txt_get_next_line+0x182>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b54:	9a05      	ldr	r2, [sp, #20]
24010b56:	f647 4318 	movw	r3, #31768	; 0x7c18
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
24010b5a:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
24010b5c:	a90c      	add	r1, sp, #48	; 0x30
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b5e:	2a00      	cmp	r2, #0
24010b60:	bf08      	it	eq
24010b62:	464b      	moveq	r3, r9
    letter = _lv_txt_encoded_next(txt, &i_next);
24010b64:	4650      	mov	r0, sl
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
24010b66:	f04f 3bff 	mov.w	fp, #4294967295
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
24010b6a:	4625      	mov	r5, r4
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010b6c:	9307      	str	r3, [sp, #28]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
24010b6e:	4626      	mov	r6, r4
    letter = _lv_txt_encoded_next(txt, &i_next);
24010b70:	4b4b      	ldr	r3, [pc, #300]	; (24010ca0 <_lv_txt_get_next_line+0x1bc>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
24010b72:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
24010b76:	681b      	ldr	r3, [r3, #0]
24010b78:	4798      	blx	r3
    i_next_next = i_next;
24010b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
24010b7c:	4680      	mov	r8, r0
    uint32_t letter_next = 0; /* Letter at i_next */
24010b7e:	4622      	mov	r2, r4
    i_next_next = i_next;
24010b80:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010b82:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
24010b84:	9401      	str	r4, [sp, #4]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010b86:	f003 0301 	and.w	r3, r3, #1
24010b8a:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
24010b8c:	f81a 1006 	ldrb.w	r1, [sl, r6]
24010b90:	b949      	cbnz	r1, 24010ba6 <_lv_txt_get_next_line+0xc2>
    if(break_index == NO_BREAK_FOUND) {
24010b92:	f1bb 3fff 	cmp.w	fp, #4294967295
24010b96:	d052      	beq.n	24010c3e <_lv_txt_get_next_line+0x15a>
    if(force) return break_index;
24010b98:	9b00      	ldr	r3, [sp, #0]
24010b9a:	465e      	mov	r6, fp
24010b9c:	2b00      	cmp	r3, #0
24010b9e:	d056      	beq.n	24010c4e <_lv_txt_get_next_line+0x16a>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
24010ba0:	2400      	movs	r4, #0
    return 0;
24010ba2:	4626      	mov	r6, r4
24010ba4:	e053      	b.n	24010c4e <_lv_txt_get_next_line+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
24010ba6:	4b3e      	ldr	r3, [pc, #248]	; (24010ca0 <_lv_txt_get_next_line+0x1bc>)
24010ba8:	a90d      	add	r1, sp, #52	; 0x34
24010baa:	4650      	mov	r0, sl
24010bac:	681a      	ldr	r2, [r3, #0]
24010bae:	4790      	blx	r2
        word_len++;
24010bb0:	9b01      	ldr	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
24010bb2:	4602      	mov	r2, r0
        word_len++;
24010bb4:	3301      	adds	r3, #1
24010bb6:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24010bb8:	9b08      	ldr	r3, [sp, #32]
24010bba:	b173      	cbz	r3, 24010bda <_lv_txt_get_next_line+0xf6>
24010bbc:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
24010bbe:	4641      	mov	r1, r8
24010bc0:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
24010bc4:	f7ff ff22 	bl	24010a0c <_lv_txt_is_cmd>
24010bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
24010bca:	b130      	cbz	r0, 24010bda <_lv_txt_get_next_line+0xf6>
        i_next = i_next_next;
24010bcc:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
24010bce:	4690      	mov	r8, r2
        i_next = i_next_next;
24010bd0:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
24010bd4:	9301      	str	r3, [sp, #4]
24010bd6:	910c      	str	r1, [sp, #48]	; 0x30
24010bd8:	e7d8      	b.n	24010b8c <_lv_txt_get_next_line+0xa8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
24010bda:	4641      	mov	r1, r8
24010bdc:	9802      	ldr	r0, [sp, #8]
24010bde:	9209      	str	r2, [sp, #36]	; 0x24
24010be0:	f7fd ff68 	bl	2400eab4 <lv_font_get_glyph_width>
        cur_w += letter_w;
24010be4:	4405      	add	r5, r0
        if(letter_w > 0) {
24010be6:	b200      	sxth	r0, r0
24010be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
24010bea:	2800      	cmp	r0, #0
        cur_w += letter_w;
24010bec:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
24010bee:	bfc2      	ittt	gt
24010bf0:	9b04      	ldrgt	r3, [sp, #16]
24010bf2:	18ed      	addgt	r5, r5, r3
24010bf4:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
24010bf6:	f1bb 3fff 	cmp.w	fp, #4294967295
24010bfa:	b22d      	sxth	r5, r5
24010bfc:	d105      	bne.n	24010c0a <_lv_txt_get_next_line+0x126>
24010bfe:	9b04      	ldr	r3, [sp, #16]
24010c00:	1ae9      	subs	r1, r5, r3
24010c02:	9b07      	ldr	r3, [sp, #28]
24010c04:	4299      	cmp	r1, r3
24010c06:	bfc8      	it	gt
24010c08:	46b3      	movgt	fp, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
24010c0a:	f1b8 0f0a 	cmp.w	r8, #10
24010c0e:	d010      	beq.n	24010c32 <_lv_txt_get_next_line+0x14e>
24010c10:	f1b8 0f0d 	cmp.w	r8, #13
24010c14:	d00d      	beq.n	24010c32 <_lv_txt_get_next_line+0x14e>
24010c16:	2100      	movs	r1, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
24010c18:	b2c8      	uxtb	r0, r1
24010c1a:	4b22      	ldr	r3, [pc, #136]	; (24010ca4 <_lv_txt_get_next_line+0x1c0>)
24010c1c:	5c18      	ldrb	r0, [r3, r0]
24010c1e:	b920      	cbnz	r0, 24010c2a <_lv_txt_get_next_line+0x146>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
24010c20:	f1bb 3fff 	cmp.w	fp, #4294967295
24010c24:	bf08      	it	eq
24010c26:	462c      	moveq	r4, r5
24010c28:	e7d0      	b.n	24010bcc <_lv_txt_get_next_line+0xe8>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
24010c2a:	4580      	cmp	r8, r0
24010c2c:	f101 0101 	add.w	r1, r1, #1
24010c30:	d1f2      	bne.n	24010c18 <_lv_txt_get_next_line+0x134>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
24010c32:	2e00      	cmp	r6, #0
24010c34:	d1ad      	bne.n	24010b92 <_lv_txt_get_next_line+0xae>
24010c36:	f1bb 3fff 	cmp.w	fp, #4294967295
24010c3a:	d1ad      	bne.n	24010b98 <_lv_txt_get_next_line+0xb4>
24010c3c:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
24010c3e:	9b01      	ldr	r3, [sp, #4]
24010c40:	b123      	cbz	r3, 24010c4c <_lv_txt_get_next_line+0x168>
24010c42:	f1b8 0f0d 	cmp.w	r8, #13
24010c46:	d102      	bne.n	24010c4e <_lv_txt_get_next_line+0x16a>
24010c48:	2a0a      	cmp	r2, #10
24010c4a:	d100      	bne.n	24010c4e <_lv_txt_get_next_line+0x16a>
24010c4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        max_width -= word_w;
24010c4e:	eba9 0404 	sub.w	r4, r9, r4
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
24010c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        max_width -= word_w;
24010c54:	fa0f f984 	sxth.w	r9, r4
        if(advance == 0) {
24010c58:	b976      	cbnz	r6, 24010c78 <_lv_txt_get_next_line+0x194>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
24010c5a:	b95b      	cbnz	r3, 24010c74 <_lv_txt_get_next_line+0x190>
24010c5c:	4b10      	ldr	r3, [pc, #64]	; (24010ca0 <_lv_txt_get_next_line+0x1bc>)
24010c5e:	a90b      	add	r1, sp, #44	; 0x2c
24010c60:	4638      	mov	r0, r7
24010c62:	681b      	ldr	r3, [r3, #0]
24010c64:	4798      	blx	r3
    if(i == 0) {
24010c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24010c68:	b923      	cbnz	r3, 24010c74 <_lv_txt_get_next_line+0x190>
        _lv_txt_encoded_next(txt, &i);
24010c6a:	4b0d      	ldr	r3, [pc, #52]	; (24010ca0 <_lv_txt_get_next_line+0x1bc>)
24010c6c:	a90b      	add	r1, sp, #44	; 0x2c
24010c6e:	4638      	mov	r0, r7
24010c70:	681b      	ldr	r3, [r3, #0]
24010c72:	4798      	blx	r3
    return i;
24010c74:	980b      	ldr	r0, [sp, #44]	; 0x2c
24010c76:	e753      	b.n	24010b20 <_lv_txt_get_next_line+0x3c>
        if(txt[0] == '\n' || txt[0] == '\r') break;
24010c78:	783a      	ldrb	r2, [r7, #0]
        i += advance;
24010c7a:	4433      	add	r3, r6
        if(txt[0] == '\n' || txt[0] == '\r') break;
24010c7c:	2a0a      	cmp	r2, #10
        i += advance;
24010c7e:	930b      	str	r3, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
24010c80:	d0f1      	beq.n	24010c66 <_lv_txt_get_next_line+0x182>
24010c82:	2a0d      	cmp	r2, #13
24010c84:	d0ef      	beq.n	24010c66 <_lv_txt_get_next_line+0x182>
        if(txt[i] == '\n' || txt[i] == '\r') {
24010c86:	5cfa      	ldrb	r2, [r7, r3]
24010c88:	2a0a      	cmp	r2, #10
24010c8a:	d002      	beq.n	24010c92 <_lv_txt_get_next_line+0x1ae>
24010c8c:	2a0d      	cmp	r2, #13
24010c8e:	f47f af55 	bne.w	24010b3c <_lv_txt_get_next_line+0x58>
            i++;  /* Include the following newline in the current line */
24010c92:	3301      	adds	r3, #1
24010c94:	930b      	str	r3, [sp, #44]	; 0x2c
            break;
24010c96:	e7e6      	b.n	24010c66 <_lv_txt_get_next_line+0x182>
    if(txt == NULL) return 0;
24010c98:	9802      	ldr	r0, [sp, #8]
24010c9a:	e741      	b.n	24010b20 <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
24010c9c:	3001      	adds	r0, #1
24010c9e:	e73f      	b.n	24010b20 <_lv_txt_get_next_line+0x3c>
24010ca0:	2401a6e4 	.word	0x2401a6e4
24010ca4:	900ff288 	.word	0x900ff288

24010ca8 <_lv_txt_get_size>:
{
24010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010cac:	b087      	sub	sp, #28
    size_res->x = 0;
24010cae:	2500      	movs	r5, #0
{
24010cb0:	4698      	mov	r8, r3
24010cb2:	4604      	mov	r4, r0
24010cb4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
24010cb8:	4616      	mov	r6, r2
24010cba:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
    if(text == NULL) return;
24010cbe:	460f      	mov	r7, r1
{
24010cc0:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
24010cc4:	9302      	str	r3, [sp, #8]
    size_res->x = 0;
24010cc6:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
24010cc8:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
24010cca:	b311      	cbz	r1, 24010d12 <_lv_txt_get_size+0x6a>
    if(font == NULL) return;
24010ccc:	b30a      	cbz	r2, 24010d12 <_lv_txt_get_size+0x6a>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
24010cce:	f013 0f02 	tst.w	r3, #2
24010cd2:	f647 4318 	movw	r3, #31768	; 0x7c18
24010cd6:	bf18      	it	ne
24010cd8:	469a      	movne	sl, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
24010cda:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
24010cde:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
24010ce0:	8913      	ldrh	r3, [r2, #8]
24010ce2:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
24010ce4:	445b      	add	r3, fp
24010ce6:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
24010ce8:	5d7b      	ldrb	r3, [r7, r5]
24010cea:	eb07 0905 	add.w	r9, r7, r5
24010cee:	b99b      	cbnz	r3, 24010d18 <_lv_txt_get_size+0x70>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
24010cf0:	b155      	cbz	r5, 24010d08 <_lv_txt_get_size+0x60>
24010cf2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
24010cf6:	2b0a      	cmp	r3, #10
24010cf8:	d001      	beq.n	24010cfe <_lv_txt_get_size+0x56>
24010cfa:	2b0d      	cmp	r3, #13
24010cfc:	d104      	bne.n	24010d08 <_lv_txt_get_size+0x60>
        size_res->y += letter_height + line_space;
24010cfe:	9b03      	ldr	r3, [sp, #12]
24010d00:	8862      	ldrh	r2, [r4, #2]
24010d02:	445b      	add	r3, fp
24010d04:	4413      	add	r3, r2
24010d06:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
24010d08:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
24010d0c:	bb23      	cbnz	r3, 24010d58 <_lv_txt_get_size+0xb0>
        size_res->y = letter_height;
24010d0e:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
24010d10:	8063      	strh	r3, [r4, #2]
}
24010d12:	b007      	add	sp, #28
24010d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
24010d18:	9b02      	ldr	r3, [sp, #8]
24010d1a:	4642      	mov	r2, r8
24010d1c:	4631      	mov	r1, r6
24010d1e:	4648      	mov	r0, r9
24010d20:	9300      	str	r3, [sp, #0]
24010d22:	4653      	mov	r3, sl
24010d24:	f7ff fede 	bl	24010ae4 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
24010d28:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
24010d2c:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
24010d2e:	4601      	mov	r1, r0
24010d30:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
24010d32:	4413      	add	r3, r2
24010d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24010d38:	d2eb      	bcs.n	24010d12 <_lv_txt_get_size+0x6a>
            size_res->y += line_space;
24010d3a:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
24010d3c:	4632      	mov	r2, r6
24010d3e:	9b02      	ldr	r3, [sp, #8]
24010d40:	4648      	mov	r0, r9
24010d42:	9300      	str	r3, [sp, #0]
24010d44:	4643      	mov	r3, r8
24010d46:	f7ff fe7d 	bl	24010a44 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
24010d4a:	f9b4 3000 	ldrsh.w	r3, [r4]
24010d4e:	4298      	cmp	r0, r3
24010d50:	bfb8      	it	lt
24010d52:	4618      	movlt	r0, r3
24010d54:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
24010d56:	e7c7      	b.n	24010ce8 <_lv_txt_get_size+0x40>
        size_res->y -= line_space;
24010d58:	eba3 030b 	sub.w	r3, r3, fp
24010d5c:	e7d8      	b.n	24010d10 <_lv_txt_get_size+0x68>
	...

24010d60 <_lv_txt_ins>:
{
24010d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24010d64:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
24010d66:	4610      	mov	r0, r2
{
24010d68:	4688      	mov	r8, r1
24010d6a:	4617      	mov	r7, r2
    size_t ins_len = strlen(ins_txt);
24010d6c:	f009 fc20 	bl	2401a5b0 <__strlen_veneer>
    if(ins_len == 0) return;
24010d70:	4605      	mov	r5, r0
24010d72:	b1b8      	cbz	r0, 24010da4 <_lv_txt_ins+0x44>
    size_t old_len = strlen(txt_buf);
24010d74:	4620      	mov	r0, r4
24010d76:	f009 fc1b 	bl	2401a5b0 <__strlen_veneer>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
24010d7a:	4b0d      	ldr	r3, [pc, #52]	; (24010db0 <_lv_txt_ins+0x50>)
    size_t new_len = ins_len + old_len;
24010d7c:	1946      	adds	r6, r0, r5
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
24010d7e:	4641      	mov	r1, r8
24010d80:	681b      	ldr	r3, [r3, #0]
24010d82:	4620      	mov	r0, r4
24010d84:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
24010d86:	19a3      	adds	r3, r4, r6
24010d88:	1829      	adds	r1, r5, r0
        txt_buf[i] = txt_buf[i - ins_len];
24010d8a:	426e      	negs	r6, r5
    for(i = new_len; i >= pos + ins_len; i--) {
24010d8c:	1b1a      	subs	r2, r3, r4
24010d8e:	4291      	cmp	r1, r2
24010d90:	d90a      	bls.n	24010da8 <_lv_txt_ins+0x48>
    _lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
24010d92:	4404      	add	r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
24010d94:	3f01      	subs	r7, #1
24010d96:	4425      	add	r5, r4
        *d8 = *s8;
24010d98:	f817 3f01 	ldrb.w	r3, [r7, #1]!
24010d9c:	f804 3b01 	strb.w	r3, [r4], #1
    while(len) {
24010da0:	42ac      	cmp	r4, r5
24010da2:	d1f9      	bne.n	24010d98 <_lv_txt_ins+0x38>
}
24010da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt_buf[i] = txt_buf[i - ins_len];
24010da8:	5d9a      	ldrb	r2, [r3, r6]
24010daa:	f803 2901 	strb.w	r2, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
24010dae:	e7ed      	b.n	24010d8c <_lv_txt_ins+0x2c>
24010db0:	2401a6dc 	.word	0x2401a6dc

24010db4 <_lv_txt_set_text_vfmt>:
{
24010db4:	b570      	push	{r4, r5, r6, lr}
24010db6:	b086      	sub	sp, #24
24010db8:	460b      	mov	r3, r1
24010dba:	4602      	mov	r2, r0
    va_copy(ap_copy, ap);
24010dbc:	9105      	str	r1, [sp, #20]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
24010dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
24010dc2:	2100      	movs	r1, #0
24010dc4:	4608      	mov	r0, r1
24010dc6:	f7ff fc07 	bl	240105d8 <lv_vsnprintf>
    text = lv_mem_alloc(len + 1);
24010dca:	1c41      	adds	r1, r0, #1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
24010dcc:	4605      	mov	r5, r0
    text = lv_mem_alloc(len + 1);
24010dce:	4608      	mov	r0, r1
24010dd0:	9101      	str	r1, [sp, #4]
24010dd2:	f7fe fdd3 	bl	2400f97c <lv_mem_alloc>
    if(text == NULL) {
24010dd6:	4604      	mov	r4, r0
24010dd8:	b130      	cbz	r0, 24010de8 <_lv_txt_set_text_vfmt+0x34>
    text[len] = 0; /* Ensure NULL termination */
24010dda:	2600      	movs	r6, #0
    lv_vsnprintf(text, len + 1, fmt, ap);
24010ddc:	9901      	ldr	r1, [sp, #4]
24010dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    text[len] = 0; /* Ensure NULL termination */
24010de2:	5546      	strb	r6, [r0, r5]
    lv_vsnprintf(text, len + 1, fmt, ap);
24010de4:	f7ff fbf8 	bl	240105d8 <lv_vsnprintf>
}
24010de8:	4620      	mov	r0, r4
24010dea:	b006      	add	sp, #24
24010dec:	bd70      	pop	{r4, r5, r6, pc}

24010dee <_lv_utils_num_to_str>:
 * @param buf pointer to a `char` buffer. The result will be stored here (max 10 elements)
 * @return same as `buf` (just for convenience)
 */
char * _lv_utils_num_to_str(int32_t num, char * buf)
{
    if(num == 0) {
24010dee:	1e03      	subs	r3, r0, #0
{
24010df0:	b570      	push	{r4, r5, r6, lr}
    if(num == 0) {
24010df2:	d104      	bne.n	24010dfe <_lv_utils_num_to_str+0x10>
        buf[0] = '0';
24010df4:	2230      	movs	r2, #48	; 0x30
        buf[1] = '\0';
24010df6:	704b      	strb	r3, [r1, #1]
        buf[0] = '0';
24010df8:	700a      	strb	r2, [r1, #0]
        buf[digitCount] = temp;
        digitCount--;
        i++;
    }
    return buf;
}
24010dfa:	4608      	mov	r0, r1
24010dfc:	bd70      	pop	{r4, r5, r6, pc}
    if(num < 0) {
24010dfe:	da1d      	bge.n	24010e3c <_lv_utils_num_to_str+0x4e>
        buf[digitCount++] = '-';
24010e00:	222d      	movs	r2, #45	; 0x2d
        num               = LV_MATH_ABS(num);
24010e02:	425b      	negs	r3, r3
        buf[digitCount++] = '-';
24010e04:	700a      	strb	r2, [r1, #0]
24010e06:	2201      	movs	r2, #1
{
24010e08:	4614      	mov	r4, r2
        char digit        = num % 10;
24010e0a:	250a      	movs	r5, #10
        buf[digitCount++] = digit + 48;
24010e0c:	4620      	mov	r0, r4
24010e0e:	3401      	adds	r4, #1
        char digit        = num % 10;
24010e10:	fbb3 f6f5 	udiv	r6, r3, r5
24010e14:	fb05 3316 	mls	r3, r5, r6, r3
24010e18:	b264      	sxtb	r4, r4
        buf[digitCount++] = digit + 48;
24010e1a:	3330      	adds	r3, #48	; 0x30
24010e1c:	540b      	strb	r3, [r1, r0]
    while(num) {
24010e1e:	4633      	mov	r3, r6
24010e20:	2e00      	cmp	r6, #0
24010e22:	d1f3      	bne.n	24010e0c <_lv_utils_num_to_str+0x1e>
    buf[digitCount] = '\0';
24010e24:	550e      	strb	r6, [r1, r4]
    while(digitCount > i) {
24010e26:	4290      	cmp	r0, r2
24010e28:	dde7      	ble.n	24010dfa <_lv_utils_num_to_str+0xc>
        char temp       = buf[i];
24010e2a:	5c8b      	ldrb	r3, [r1, r2]
        buf[i]          = buf[digitCount];
24010e2c:	5c0c      	ldrb	r4, [r1, r0]
24010e2e:	548c      	strb	r4, [r1, r2]
        buf[digitCount] = temp;
24010e30:	3201      	adds	r2, #1
24010e32:	540b      	strb	r3, [r1, r0]
        digitCount--;
24010e34:	3801      	subs	r0, #1
24010e36:	b252      	sxtb	r2, r2
24010e38:	b240      	sxtb	r0, r0
        i++;
24010e3a:	e7f4      	b.n	24010e26 <_lv_utils_num_to_str+0x38>
    int8_t digitCount = 0;
24010e3c:	2200      	movs	r2, #0
24010e3e:	e7e3      	b.n	24010e08 <_lv_utils_num_to_str+0x1a>

24010e40 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
24010e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24010e44:	9d08      	ldr	r5, [sp, #32]
24010e46:	4680      	mov	r8, r0
24010e48:	460f      	mov	r7, r1
24010e4a:	4614      	mov	r4, r2
24010e4c:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
24010e4e:	b90c      	cbnz	r4, 24010e54 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
24010e50:	4626      	mov	r6, r4
24010e52:	e012      	b.n	24010e7a <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
24010e54:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
24010e58:	4640      	mov	r0, r8
        middle += (n / 2) * size;
24010e5a:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
24010e5e:	4631      	mov	r1, r6
24010e60:	47a8      	blx	r5
24010e62:	2800      	cmp	r0, #0
24010e64:	dd08      	ble.n	24010e78 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
24010e66:	43e4      	mvns	r4, r4
            base = (middle += size);
24010e68:	eb06 0709 	add.w	r7, r6, r9
24010e6c:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
24010e70:	ebaa 0a04 	sub.w	sl, sl, r4
{
24010e74:	4654      	mov	r4, sl
24010e76:	e7ea      	b.n	24010e4e <_lv_utils_bsearch+0xe>
        else if(c < 0) {
24010e78:	d1fc      	bne.n	24010e74 <_lv_utils_bsearch+0x34>
}
24010e7a:	4630      	mov	r0, r6
24010e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24010e80 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
24010e80:	b570      	push	{r4, r5, r6, lr}
24010e82:	4604      	mov	r4, r0
    if(th->base) {
24010e84:	6880      	ldr	r0, [r0, #8]
{
24010e86:	460d      	mov	r5, r1
24010e88:	4616      	mov	r6, r2
    if(th->base) {
24010e8a:	b108      	cbz	r0, 24010e90 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
24010e8c:	f7ff fff8 	bl	24010e80 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
24010e90:	6863      	ldr	r3, [r4, #4]
24010e92:	b123      	cbz	r3, 24010e9e <apply_theme+0x1e>
        th->apply_xcb(obj, name);
24010e94:	4631      	mov	r1, r6
24010e96:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
24010e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
24010e9c:	4718      	bx	r3
    else if(th->apply_cb) {
24010e9e:	6823      	ldr	r3, [r4, #0]
24010ea0:	b133      	cbz	r3, 24010eb0 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
24010ea2:	4804      	ldr	r0, [pc, #16]	; (24010eb4 <apply_theme+0x34>)
24010ea4:	4632      	mov	r2, r6
24010ea6:	4629      	mov	r1, r5
24010ea8:	6800      	ldr	r0, [r0, #0]
}
24010eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
24010eae:	4718      	bx	r3
}
24010eb0:	bd70      	pop	{r4, r5, r6, pc}
24010eb2:	bf00      	nop
24010eb4:	24035cb4 	.word	0x24035cb4

24010eb8 <lv_theme_set_act>:
    act_theme = th;
24010eb8:	4b01      	ldr	r3, [pc, #4]	; (24010ec0 <lv_theme_set_act+0x8>)
24010eba:	6018      	str	r0, [r3, #0]
}
24010ebc:	4770      	bx	lr
24010ebe:	bf00      	nop
24010ec0:	24035cb4 	.word	0x24035cb4

24010ec4 <lv_theme_apply>:

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
24010ec4:	290a      	cmp	r1, #10
{
24010ec6:	b570      	push	{r4, r5, r6, lr}
24010ec8:	4604      	mov	r4, r0
24010eca:	460d      	mov	r5, r1
    switch(name) {
24010ecc:	d814      	bhi.n	24010ef8 <lv_theme_apply+0x34>
24010ece:	b159      	cbz	r1, 24010ee8 <lv_theme_apply+0x24>
24010ed0:	2601      	movs	r6, #1
24010ed2:	fa06 f301 	lsl.w	r3, r6, r1
24010ed6:	f240 7196 	movw	r1, #1942	; 0x796
24010eda:	4019      	ands	r1, r3
24010edc:	d11a      	bne.n	24010f14 <lv_theme_apply+0x50>
24010ede:	f013 0f28 	tst.w	r3, #40	; 0x28
24010ee2:	d132      	bne.n	24010f4a <lv_theme_apply+0x86>
24010ee4:	2d06      	cmp	r5, #6
24010ee6:	d024      	beq.n	24010f32 <lv_theme_apply+0x6e>
    apply_theme(act_theme, obj, name);
24010ee8:	4b34      	ldr	r3, [pc, #208]	; (24010fbc <lv_theme_apply+0xf8>)
24010eea:	462a      	mov	r2, r5
24010eec:	4621      	mov	r1, r4
24010eee:	6818      	ldr	r0, [r3, #0]
}
24010ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    apply_theme(act_theme, obj, name);
24010ef4:	f7ff bfc4 	b.w	24010e80 <apply_theme>
    switch(name) {
24010ef8:	f1a1 030b 	sub.w	r3, r1, #11
24010efc:	2b08      	cmp	r3, #8
24010efe:	d8f3      	bhi.n	24010ee8 <lv_theme_apply+0x24>
24010f00:	f1a5 030c 	sub.w	r3, r5, #12
24010f04:	2b07      	cmp	r3, #7
24010f06:	d81a      	bhi.n	24010f3e <lv_theme_apply+0x7a>
24010f08:	e8df f003 	tbb	[pc, r3]
24010f0c:	09045109 	.word	0x09045109
24010f10:	47132335 	.word	0x47132335
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
24010f14:	2100      	movs	r1, #0


#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
24010f16:	4620      	mov	r0, r4
24010f18:	f7f7 fb99 	bl	2400864e <lv_obj_clean_style_list>
            break;
24010f1c:	e7e4      	b.n	24010ee8 <lv_theme_apply+0x24>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
24010f1e:	2100      	movs	r1, #0
24010f20:	4620      	mov	r0, r4
24010f22:	f7f7 fb94 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
24010f26:	2101      	movs	r1, #1
24010f28:	4620      	mov	r0, r4
24010f2a:	f7f7 fb90 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
24010f2e:	2102      	movs	r1, #2
24010f30:	e7f1      	b.n	24010f16 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
24010f32:	2100      	movs	r1, #0
24010f34:	4620      	mov	r0, r4
24010f36:	f7f7 fb8a 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
24010f3a:	2140      	movs	r1, #64	; 0x40
24010f3c:	e7eb      	b.n	24010f16 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
24010f3e:	2100      	movs	r1, #0
24010f40:	4620      	mov	r0, r4
24010f42:	f7f7 fb84 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
24010f46:	2140      	movs	r1, #64	; 0x40
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
24010f48:	4620      	mov	r0, r4
24010f4a:	f7f7 fb80 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
24010f4e:	2101      	movs	r1, #1
24010f50:	e7e1      	b.n	24010f16 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
24010f52:	2100      	movs	r1, #0
24010f54:	4620      	mov	r0, r4
24010f56:	f7f7 fb7a 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
24010f5a:	2140      	movs	r1, #64	; 0x40
24010f5c:	4620      	mov	r0, r4
24010f5e:	f7f7 fb76 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
24010f62:	2141      	movs	r1, #65	; 0x41
24010f64:	4620      	mov	r0, r4
24010f66:	f7f7 fb72 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
24010f6a:	2143      	movs	r1, #67	; 0x43
24010f6c:	4620      	mov	r0, r4
24010f6e:	f7f7 fb6e 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
24010f72:	2142      	movs	r1, #66	; 0x42
24010f74:	e7cf      	b.n	24010f16 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
24010f76:	2100      	movs	r1, #0
24010f78:	4620      	mov	r0, r4
24010f7a:	f7f7 fb68 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
24010f7e:	2101      	movs	r1, #1
24010f80:	4620      	mov	r0, r4
24010f82:	f7f7 fb64 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
24010f86:	2102      	movs	r1, #2
24010f88:	4620      	mov	r0, r4
24010f8a:	f7f7 fb60 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
24010f8e:	2103      	movs	r1, #3
24010f90:	4620      	mov	r0, r4
24010f92:	f7f7 fb5c 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
24010f96:	2104      	movs	r1, #4
24010f98:	e7bd      	b.n	24010f16 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
24010f9a:	2100      	movs	r1, #0
24010f9c:	4620      	mov	r0, r4
24010f9e:	f7f7 fb56 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
24010fa2:	2104      	movs	r1, #4
24010fa4:	4620      	mov	r0, r4
24010fa6:	f7f7 fb52 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
24010faa:	2103      	movs	r1, #3
24010fac:	e7cc      	b.n	24010f48 <lv_theme_apply+0x84>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
24010fae:	2100      	movs	r1, #0
24010fb0:	4620      	mov	r0, r4
24010fb2:	f7f7 fb4c 	bl	2400864e <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
24010fb6:	2103      	movs	r1, #3
24010fb8:	e7ad      	b.n	24010f16 <lv_theme_apply+0x52>
24010fba:	bf00      	nop
24010fbc:	24035cb4 	.word	0x24035cb4

24010fc0 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
24010fc0:	4b01      	ldr	r3, [pc, #4]	; (24010fc8 <lv_theme_get_font_normal+0x8>)
24010fc2:	681b      	ldr	r3, [r3, #0]
}
24010fc4:	6958      	ldr	r0, [r3, #20]
24010fc6:	4770      	bx	lr
24010fc8:	24035cb4 	.word	0x24035cb4

24010fcc <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
24010fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010fce:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
24010fd2:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010fd6:	f3c0 1445 	ubfx	r4, r0, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
24010fda:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010fde:	4373      	muls	r3, r6
24010fe0:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
24010fe4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010fe8:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
24010fec:	f001 041f 	and.w	r4, r1, #31
24010ff0:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010ff2:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
24010ff4:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
24010ff8:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
24010ffa:	3480      	adds	r4, #128	; 0x80
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
24010ffc:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
24011000:	436c      	muls	r4, r5
    return ret;
24011002:	f3c4 54c4 	ubfx	r4, r4, #23, #5
24011006:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
2401100a:	f3c1 23c4 	ubfx	r3, r1, #11, #5
2401100e:	4373      	muls	r3, r6
24011010:	fb00 3202 	mla	r2, r0, r2, r3
24011014:	f102 0380 	add.w	r3, r2, #128	; 0x80
24011018:	436b      	muls	r3, r5
2401101a:	0ddb      	lsrs	r3, r3, #23
}
2401101c:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
24011020:	bdf0      	pop	{r4, r5, r6, r7, pc}

24011022 <lv_color_hex3>:
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
24011022:	f3c0 1303 	ubfx	r3, r0, #4, #4
24011026:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
2401102a:	f3c0 1207 	ubfx	r2, r0, #4, #8
    return LV_COLOR_MAKE(r, g, b);
2401102e:	4319      	orrs	r1, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
24011030:	f000 030f 	and.w	r3, r0, #15
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
24011034:	f022 020f 	bic.w	r2, r2, #15
24011038:	0889      	lsrs	r1, r1, #2
{
2401103a:	b510      	push	{r4, lr}
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
2401103c:	b2c4      	uxtb	r4, r0
2401103e:	ea42 2010 	orr.w	r0, r2, r0, lsr #8
24011042:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
24011046:	f3c0 00c4 	ubfx	r0, r0, #3, #5
2401104a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
2401104e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
24011052:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
24011056:	bd10      	pop	{r4, pc}

24011058 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
24011058:	3a01      	subs	r2, #1
{
2401105a:	b570      	push	{r4, r5, r6, lr}
2401105c:	460c      	mov	r4, r1
    switch(name) {
2401105e:	2a12      	cmp	r2, #18
24011060:	f200 80fa 	bhi.w	24011258 <theme_apply+0x200>
24011064:	e8df f012 	tbh	[pc, r2, lsl #1]
24011068:	001c0013 	.word	0x001c0013
2401106c:	00240048 	.word	0x00240048
24011070:	008e002c 	.word	0x008e002c
24011074:	00f8001c 	.word	0x00f8001c
24011078:	00f800f8 	.word	0x00f800f8
2401107c:	007000a4 	.word	0x007000a4
24011080:	0133011d 	.word	0x0133011d
24011084:	00e30058 	.word	0x00e30058
24011088:	00db00bc 	.word	0x00db00bc
2401108c:	00ff      	.short	0x00ff
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
2401108e:	2100      	movs	r1, #0
24011090:	4620      	mov	r0, r4
24011092:	f7f7 faca 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
24011096:	4b94      	ldr	r3, [pc, #592]	; (240112e8 <theme_apply+0x290>)
24011098:	6819      	ldr	r1, [r3, #0]
            break;

        case LV_THEME_SPINBOX_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
            _lv_style_list_add_style(list, &styles->bg);
            _lv_style_list_add_style(list, &styles->bg_click);
2401109a:	f7f9 fad8 	bl	2400a64e <_lv_style_list_add_style>
            break;
2401109e:	e0db      	b.n	24011258 <theme_apply+0x200>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
240110a0:	2100      	movs	r1, #0
240110a2:	4620      	mov	r0, r4
240110a4:	f7f7 fac1 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240110a8:	4b8f      	ldr	r3, [pc, #572]	; (240112e8 <theme_apply+0x290>)
240110aa:	6819      	ldr	r1, [r3, #0]
240110ac:	3104      	adds	r1, #4
240110ae:	e7f4      	b.n	2401109a <theme_apply+0x42>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
240110b0:	2100      	movs	r1, #0
240110b2:	4620      	mov	r0, r4
240110b4:	f7f7 fab9 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
240110b8:	4b8b      	ldr	r3, [pc, #556]	; (240112e8 <theme_apply+0x290>)
240110ba:	6819      	ldr	r1, [r3, #0]
240110bc:	3110      	adds	r1, #16
240110be:	e7ec      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bg);
240110c0:	4d89      	ldr	r5, [pc, #548]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
240110c2:	2100      	movs	r1, #0
240110c4:	4620      	mov	r0, r4
240110c6:	f7f7 fab0 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240110ca:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
240110cc:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
240110ce:	3104      	adds	r1, #4
240110d0:	f7f9 fabd 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
240110d4:	6829      	ldr	r1, [r5, #0]
240110d6:	4630      	mov	r0, r6
240110d8:	3118      	adds	r1, #24
240110da:	f7f9 fab8 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
240110de:	2101      	movs	r1, #1
240110e0:	4620      	mov	r0, r4
240110e2:	f7f7 faa2 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240110e6:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
240110e8:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
240110ea:	3104      	adds	r1, #4
240110ec:	f7f9 faaf 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
240110f0:	6829      	ldr	r1, [r5, #0]
240110f2:	4630      	mov	r0, r6
240110f4:	3108      	adds	r1, #8
240110f6:	e7d0      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bar_bg);
240110f8:	4d7b      	ldr	r5, [pc, #492]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
240110fa:	2100      	movs	r1, #0
240110fc:	4620      	mov	r0, r4
240110fe:	f7f7 fa94 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
24011102:	6829      	ldr	r1, [r5, #0]
24011104:	311c      	adds	r1, #28
24011106:	f7f9 faa2 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
2401110a:	2101      	movs	r1, #1
2401110c:	4620      	mov	r0, r4
2401110e:	f7f7 fa8c 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
24011112:	6829      	ldr	r1, [r5, #0]
24011114:	3120      	adds	r1, #32
24011116:	e7c0      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bar_bg);
24011118:	4d73      	ldr	r5, [pc, #460]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
2401111a:	2100      	movs	r1, #0
2401111c:	4620      	mov	r0, r4
2401111e:	f7f7 fa84 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
24011122:	6829      	ldr	r1, [r5, #0]
24011124:	311c      	adds	r1, #28
24011126:	f7f9 fa92 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
2401112a:	2101      	movs	r1, #1
2401112c:	4620      	mov	r0, r4
2401112e:	f7f7 fa7c 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
24011132:	6829      	ldr	r1, [r5, #0]
24011134:	3120      	adds	r1, #32
24011136:	f7f9 fa8a 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
2401113a:	2102      	movs	r1, #2
2401113c:	4620      	mov	r0, r4
2401113e:	f7f7 fa74 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sw_knob);
24011142:	6829      	ldr	r1, [r5, #0]
24011144:	313c      	adds	r1, #60	; 0x3c
24011146:	e7a8      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bar_bg);
24011148:	4d67      	ldr	r5, [pc, #412]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
2401114a:	2100      	movs	r1, #0
2401114c:	4620      	mov	r0, r4
2401114e:	f7f7 fa6c 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
24011152:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
24011154:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
24011156:	311c      	adds	r1, #28
24011158:	f7f9 fa79 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
2401115c:	6829      	ldr	r1, [r5, #0]
2401115e:	4630      	mov	r0, r6
24011160:	3134      	adds	r1, #52	; 0x34
24011162:	f7f9 fa74 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
24011166:	2101      	movs	r1, #1
24011168:	4620      	mov	r0, r4
2401116a:	f7f7 fa5e 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
2401116e:	6829      	ldr	r1, [r5, #0]
24011170:	3120      	adds	r1, #32
24011172:	f7f9 fa6c 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
24011176:	2102      	movs	r1, #2
24011178:	4620      	mov	r0, r4
2401117a:	f7f7 fa56 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->slider_knob);
2401117e:	6829      	ldr	r1, [r5, #0]
24011180:	3130      	adds	r1, #48	; 0x30
24011182:	e78a      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->cb_bg);
24011184:	4e58      	ldr	r6, [pc, #352]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
24011186:	2100      	movs	r1, #0
24011188:	4620      	mov	r0, r4
2401118a:	f7f7 fa4e 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cb_bg);
2401118e:	6831      	ldr	r1, [r6, #0]
24011190:	3124      	adds	r1, #36	; 0x24
24011192:	f7f9 fa5c 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
24011196:	2140      	movs	r1, #64	; 0x40
24011198:	4620      	mov	r0, r4
2401119a:	f7f7 fa46 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
2401119e:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
240111a0:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->btn);
240111a2:	3110      	adds	r1, #16
240111a4:	f7f9 fa53 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
240111a8:	6831      	ldr	r1, [r6, #0]
240111aa:	3128      	adds	r1, #40	; 0x28
            _lv_style_list_add_style(list, &styles->bg_click);
240111ac:	4628      	mov	r0, r5
240111ae:	e774      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bg);
240111b0:	4d4d      	ldr	r5, [pc, #308]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
240111b2:	2100      	movs	r1, #0
240111b4:	4620      	mov	r0, r4
240111b6:	f7f7 fa38 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240111ba:	6829      	ldr	r1, [r5, #0]
240111bc:	3104      	adds	r1, #4
240111be:	f7f9 fa46 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
240111c2:	2140      	movs	r1, #64	; 0x40
240111c4:	4620      	mov	r0, r4
240111c6:	f7f7 fa30 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_inner);
240111ca:	6829      	ldr	r1, [r5, #0]
240111cc:	3114      	adds	r1, #20
            _lv_style_list_add_style(list, &styles->ta_cursor);
240111ce:	f7f9 fa3e 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
240111d2:	2101      	movs	r1, #1
240111d4:	4620      	mov	r0, r4
240111d6:	f7f7 fa28 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
240111da:	6829      	ldr	r1, [r5, #0]
240111dc:	312c      	adds	r1, #44	; 0x2c
240111de:	e75c      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->scr);
240111e0:	4d41      	ldr	r5, [pc, #260]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
240111e2:	2100      	movs	r1, #0
240111e4:	4620      	mov	r0, r4
240111e6:	f7f7 fa20 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
240111ea:	6829      	ldr	r1, [r5, #0]
240111ec:	f7f9 fa2f 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
240111f0:	2141      	movs	r1, #65	; 0x41
240111f2:	4620      	mov	r0, r4
240111f4:	f7f7 fa19 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
240111f8:	6829      	ldr	r1, [r5, #0]
240111fa:	3148      	adds	r1, #72	; 0x48
240111fc:	f7f9 fa27 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
24011200:	2143      	movs	r1, #67	; 0x43
24011202:	4620      	mov	r0, r4
24011204:	f7f7 fa11 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_indic);
24011208:	6829      	ldr	r1, [r5, #0]
2401120a:	314c      	adds	r1, #76	; 0x4c
2401120c:	f7f9 fa1f 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
24011210:	2142      	movs	r1, #66	; 0x42
24011212:	4620      	mov	r0, r4
24011214:	f7f7 fa09 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns);
24011218:	6829      	ldr	r1, [r5, #0]
2401121a:	3144      	adds	r1, #68	; 0x44
2401121c:	e73d      	b.n	2401109a <theme_apply+0x42>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
2401121e:	2140      	movs	r1, #64	; 0x40
24011220:	4620      	mov	r0, r4
24011222:	f7f7 fa02 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
24011226:	4b30      	ldr	r3, [pc, #192]	; (240112e8 <theme_apply+0x290>)
24011228:	6819      	ldr	r1, [r3, #0]
2401122a:	3150      	adds	r1, #80	; 0x50
2401122c:	e735      	b.n	2401109a <theme_apply+0x42>
                _lv_style_list_add_style(list, &styles->bg);
2401122e:	4e2e      	ldr	r6, [pc, #184]	; (240112e8 <theme_apply+0x290>)
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
24011230:	2100      	movs	r1, #0
24011232:	4620      	mov	r0, r4
                int idx = 1; /* start value should be 1, not zero, since cell styles
24011234:	2501      	movs	r5, #1
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
24011236:	f7f7 f9f8 	bl	2400862a <lv_obj_get_style_list>
                _lv_style_list_add_style(list, &styles->bg);
2401123a:	6831      	ldr	r1, [r6, #0]
2401123c:	3104      	adds	r1, #4
2401123e:	f7f9 fa06 	bl	2400a64e <_lv_style_list_add_style>
                    list = lv_obj_get_style_list(obj, idx);
24011242:	b2e9      	uxtb	r1, r5
24011244:	4620      	mov	r0, r4
24011246:	f7f7 f9f0 	bl	2400862a <lv_obj_get_style_list>
                    _lv_style_list_add_style(list, &styles->table_cell);
2401124a:	6831      	ldr	r1, [r6, #0]
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
2401124c:	3501      	adds	r5, #1
                    _lv_style_list_add_style(list, &styles->table_cell);
2401124e:	3140      	adds	r1, #64	; 0x40
24011250:	f7f9 f9fd 	bl	2400a64e <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
24011254:	2d05      	cmp	r5, #5
24011256:	d1f4      	bne.n	24011242 <theme_apply+0x1ea>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24011258:	22ff      	movs	r2, #255	; 0xff
2401125a:	4620      	mov	r0, r4
2401125c:	4611      	mov	r1, r2
}
2401125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24011262:	f7f7 be2d 	b.w	24008ec0 <lv_obj_refresh_style>
            _lv_style_list_add_style(list, &styles->bg);
24011266:	4d20      	ldr	r5, [pc, #128]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
24011268:	2100      	movs	r1, #0
2401126a:	4620      	mov	r0, r4
2401126c:	f7f7 f9dd 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
24011270:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
24011272:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
24011274:	3104      	adds	r1, #4
24011276:	f7f9 f9ea 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
2401127a:	6829      	ldr	r1, [r5, #0]
2401127c:	4630      	mov	r0, r6
2401127e:	3118      	adds	r1, #24
24011280:	f7f9 f9e5 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
24011284:	2104      	movs	r1, #4
24011286:	4620      	mov	r0, r4
24011288:	f7f7 f9cf 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_placeholder);
2401128c:	6829      	ldr	r1, [r5, #0]
2401128e:	3158      	adds	r1, #88	; 0x58
24011290:	f7f9 f9dd 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
24011294:	2103      	movs	r1, #3
24011296:	4620      	mov	r0, r4
24011298:	f7f7 f9c7 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_cursor);
2401129c:	6829      	ldr	r1, [r5, #0]
2401129e:	3154      	adds	r1, #84	; 0x54
240112a0:	e795      	b.n	240111ce <theme_apply+0x176>
            _lv_style_list_add_style(list, &styles->bg);
240112a2:	4d11      	ldr	r5, [pc, #68]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
240112a4:	2100      	movs	r1, #0
240112a6:	4620      	mov	r0, r4
240112a8:	f7f7 f9bf 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240112ac:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
240112ae:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
240112b0:	3104      	adds	r1, #4
240112b2:	f7f9 f9cc 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
240112b6:	6829      	ldr	r1, [r5, #0]
240112b8:	4630      	mov	r0, r6
240112ba:	3118      	adds	r1, #24
240112bc:	f7f9 f9c7 	bl	2400a64e <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
240112c0:	2103      	movs	r1, #3
240112c2:	4620      	mov	r0, r4
240112c4:	f7f7 f9b1 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
240112c8:	6829      	ldr	r1, [r5, #0]
240112ca:	3138      	adds	r1, #56	; 0x38
240112cc:	e6e5      	b.n	2401109a <theme_apply+0x42>
            _lv_style_list_add_style(list, &styles->bg);
240112ce:	4e06      	ldr	r6, [pc, #24]	; (240112e8 <theme_apply+0x290>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
240112d0:	2100      	movs	r1, #0
240112d2:	4620      	mov	r0, r4
240112d4:	f7f7 f9a9 	bl	2400862a <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
240112d8:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
240112da:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
240112dc:	3104      	adds	r1, #4
240112de:	f7f9 f9b6 	bl	2400a64e <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
240112e2:	6831      	ldr	r1, [r6, #0]
240112e4:	3108      	adds	r1, #8
240112e6:	e761      	b.n	240111ac <theme_apply+0x154>
240112e8:	24035cbc 	.word	0x24035cbc

240112ec <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
240112ec:	4b03      	ldr	r3, [pc, #12]	; (240112fc <style_init_reset+0x10>)
240112ee:	781b      	ldrb	r3, [r3, #0]
240112f0:	b10b      	cbz	r3, 240112f6 <style_init_reset+0xa>
240112f2:	f7f9 ba08 	b.w	2400a706 <lv_style_reset>
    else lv_style_init(style);
240112f6:	f7f9 b962 	b.w	2400a5be <lv_style_init>
240112fa:	bf00      	nop
240112fc:	24035cb8 	.word	0x24035cb8

24011300 <lv_color_hex>:
    return LV_COLOR_MAKE(r, g, b);
24011300:	f3c0 2285 	ubfx	r2, r0, #10, #6
24011304:	f3c0 03c4 	ubfx	r3, r0, #3, #5
24011308:	f3c0 40c4 	ubfx	r0, r0, #19, #5
2401130c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}
24011310:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
24011314:	4770      	bx	lr
	...

24011318 <lv_theme_material_init>:
{
24011318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
2401131c:	461f      	mov	r7, r3
    if(!inited) {
2401131e:	4bbf      	ldr	r3, [pc, #764]	; (2401161c <lv_theme_material_init+0x304>)
{
24011320:	4680      	mov	r8, r0
24011322:	4689      	mov	r9, r1
    if(!inited) {
24011324:	781b      	ldrb	r3, [r3, #0]
{
24011326:	4616      	mov	r6, r2
24011328:	4cbd      	ldr	r4, [pc, #756]	; (24011620 <lv_theme_material_init+0x308>)
    if(!inited) {
2401132a:	b92b      	cbnz	r3, 24011338 <lv_theme_material_init+0x20>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
2401132c:	205c      	movs	r0, #92	; 0x5c
2401132e:	f7fe fb25 	bl	2400f97c <lv_mem_alloc>
24011332:	4bbc      	ldr	r3, [pc, #752]	; (24011624 <lv_theme_material_init+0x30c>)
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
24011334:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
24011336:	6018      	str	r0, [r3, #0]
    theme.color_primary = color_primary;
24011338:	4dbb      	ldr	r5, [pc, #748]	; (24011628 <lv_theme_material_init+0x310>)
    theme.font_normal = font_normal;
2401133a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    style_init_reset(&styles->scr);
2401133c:	6820      	ldr	r0, [r4, #0]
    theme.font_normal = font_normal;
2401133e:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
24011340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    theme.font_small = font_small;
24011342:	612f      	str	r7, [r5, #16]
    theme.font_subtitle = font_subtitle;
24011344:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
24011346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    theme.color_primary = color_primary;
24011348:	f8a5 800c 	strh.w	r8, [r5, #12]
    theme.color_secondary = color_secondary;
2401134c:	f8a5 900e 	strh.w	r9, [r5, #14]
    theme.flags = flags;
24011350:	e9c5 3607 	strd	r3, r6, [r5, #28]
    style_init_reset(&styles->scr);
24011354:	f7ff ffca 	bl	240112ec <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24011358:	22ff      	movs	r2, #255	; 0xff
2401135a:	6820      	ldr	r0, [r4, #0]
2401135c:	212c      	movs	r1, #44	; 0x2c
2401135e:	f7f9 fa87 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
24011362:	6a2b      	ldr	r3, [r5, #32]
24011364:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24011366:	2129      	movs	r1, #41	; 0x29
24011368:	079a      	lsls	r2, r3, #30
2401136a:	bf4c      	ite	mi
2401136c:	48af      	ldrmi	r0, [pc, #700]	; (2401162c <lv_theme_material_init+0x314>)
2401136e:	48b0      	ldrpl	r0, [pc, #704]	; (24011630 <lv_theme_material_init+0x318>)
24011370:	f7ff ffc6 	bl	24011300 <lv_color_hex>
24011374:	4602      	mov	r2, r0
24011376:	4630      	mov	r0, r6
24011378:	f7f9 fa38 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
2401137c:	6a2b      	ldr	r3, [r5, #32]
2401137e:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24011380:	f248 0189 	movw	r1, #32905	; 0x8089
24011384:	079b      	lsls	r3, r3, #30
24011386:	bf4c      	ite	mi
24011388:	48aa      	ldrmi	r0, [pc, #680]	; (24011634 <lv_theme_material_init+0x31c>)
2401138a:	48ab      	ldrpl	r0, [pc, #684]	; (24011638 <lv_theme_material_init+0x320>)
2401138c:	f7ff ffb8 	bl	24011300 <lv_color_hex>
24011390:	4602      	mov	r2, r0
24011392:	4630      	mov	r0, r6
24011394:	f7f9 fa2a 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
24011398:	6a2b      	ldr	r3, [r5, #32]
2401139a:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
2401139c:	2179      	movs	r1, #121	; 0x79
2401139e:	079f      	lsls	r7, r3, #30
240113a0:	bf4c      	ite	mi
240113a2:	48a4      	ldrmi	r0, [pc, #656]	; (24011634 <lv_theme_material_init+0x31c>)
240113a4:	48a4      	ldrpl	r0, [pc, #656]	; (24011638 <lv_theme_material_init+0x320>)
240113a6:	f7ff ffab 	bl	24011300 <lv_color_hex>
240113aa:	4602      	mov	r2, r0
240113ac:	4630      	mov	r0, r6
240113ae:	f7f9 fa1d 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
240113b2:	6a2b      	ldr	r3, [r5, #32]
240113b4:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
240113b6:	f248 018a 	movw	r1, #32906	; 0x808a
240113ba:	0798      	lsls	r0, r3, #30
240113bc:	bf4c      	ite	mi
240113be:	489d      	ldrmi	r0, [pc, #628]	; (24011634 <lv_theme_material_init+0x31c>)
240113c0:	489d      	ldrpl	r0, [pc, #628]	; (24011638 <lv_theme_material_init+0x320>)
240113c2:	f7ff ff9d 	bl	24011300 <lv_color_hex>
240113c6:	4602      	mov	r2, r0
240113c8:	4630      	mov	r0, r6
240113ca:	f7f9 fa0f 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
240113ce:	89aa      	ldrh	r2, [r5, #12]
240113d0:	f248 018b 	movw	r1, #32907	; 0x808b
240113d4:	6820      	ldr	r0, [r4, #0]
240113d6:	f7f9 fa09 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
240113da:	696a      	ldr	r2, [r5, #20]
240113dc:	217e      	movs	r1, #126	; 0x7e
240113de:	6820      	ldr	r0, [r4, #0]
240113e0:	f7f9 fa8a 	bl	2400a8f8 <_lv_style_set_ptr>
    style_init_reset(&styles->bg);
240113e4:	6820      	ldr	r0, [r4, #0]
240113e6:	3004      	adds	r0, #4
240113e8:	f7ff ff80 	bl	240112ec <style_init_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
240113ec:	2000      	movs	r0, #0
240113ee:	6826      	ldr	r6, [r4, #0]
240113f0:	f7fd fd00 	bl	2400edf4 <lv_disp_get_dpi>
240113f4:	281d      	cmp	r0, #29
240113f6:	f106 0604 	add.w	r6, r6, #4
240113fa:	f341 846a 	ble.w	24012cd2 <lv_theme_material_init+0x19ba>
240113fe:	2000      	movs	r0, #0
24011400:	f7fd fcf8 	bl	2400edf4 <lv_disp_get_dpi>
24011404:	2314      	movs	r3, #20
24011406:	f100 020a 	add.w	r2, r0, #10
2401140a:	fb92 f2f3 	sdiv	r2, r2, r3
2401140e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24011410:	4630      	mov	r0, r6
24011412:	2101      	movs	r1, #1
24011414:	f7f9 f9a8 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
24011418:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
2401141a:	22ff      	movs	r2, #255	; 0xff
2401141c:	212c      	movs	r1, #44	; 0x2c
2401141e:	3004      	adds	r0, #4
24011420:	f7f9 fa26 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
24011424:	6a2b      	ldr	r3, [r5, #32]
24011426:	6826      	ldr	r6, [r4, #0]
24011428:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2401142a:	f04f 0129 	mov.w	r1, #41	; 0x29
2401142e:	f106 0604 	add.w	r6, r6, #4
24011432:	bf4c      	ite	mi
24011434:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
24011438:	4880      	ldrpl	r0, [pc, #512]	; (2401163c <lv_theme_material_init+0x324>)
2401143a:	f7ff ff61 	bl	24011300 <lv_color_hex>
2401143e:	4602      	mov	r2, r0
24011440:	4630      	mov	r0, r6
24011442:	f7f9 f9d3 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
24011446:	6a2b      	ldr	r3, [r5, #32]
24011448:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2401144a:	2139      	movs	r1, #57	; 0x39
2401144c:	079a      	lsls	r2, r3, #30
2401144e:	f106 0604 	add.w	r6, r6, #4
24011452:	bf4c      	ite	mi
24011454:	487a      	ldrmi	r0, [pc, #488]	; (24011640 <lv_theme_material_init+0x328>)
24011456:	487b      	ldrpl	r0, [pc, #492]	; (24011644 <lv_theme_material_init+0x32c>)
24011458:	f7ff ff52 	bl	24011300 <lv_color_hex>
2401145c:	4602      	mov	r2, r0
2401145e:	4630      	mov	r0, r6
24011460:	f7f9 f9c4 	bl	2400a7ec <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
24011464:	6a2b      	ldr	r3, [r5, #32]
24011466:	069b      	lsls	r3, r3, #26
24011468:	d406      	bmi.n	24011478 <lv_theme_material_init+0x160>
2401146a:	6820      	ldr	r0, [r4, #0]
2401146c:	f240 2139 	movw	r1, #569	; 0x239
24011470:	89aa      	ldrh	r2, [r5, #12]
24011472:	3004      	adds	r0, #4
24011474:	f7f9 f9ba 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
24011478:	6820      	ldr	r0, [r4, #0]
2401147a:	f240 4139 	movw	r1, #1081	; 0x439
2401147e:	89ea      	ldrh	r2, [r5, #14]
24011480:	3004      	adds	r0, #4
24011482:	f7f9 f9b3 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
24011486:	2000      	movs	r0, #0
24011488:	6826      	ldr	r6, [r4, #0]
2401148a:	f7fd fcb3 	bl	2400edf4 <lv_disp_get_dpi>
2401148e:	2877      	cmp	r0, #119	; 0x77
24011490:	f106 0604 	add.w	r6, r6, #4
24011494:	f341 8420 	ble.w	24012cd8 <lv_theme_material_init+0x19c0>
24011498:	2000      	movs	r0, #0
2401149a:	f7fd fcab 	bl	2400edf4 <lv_disp_get_dpi>
2401149e:	2350      	movs	r3, #80	; 0x50
240114a0:	f100 0228 	add.w	r2, r0, #40	; 0x28
240114a4:	fb92 f2f3 	sdiv	r2, r2, r3
240114a8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240114aa:	4630      	mov	r0, r6
240114ac:	2130      	movs	r1, #48	; 0x30
240114ae:	f7f9 f95b 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
240114b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
240114b4:	2201      	movs	r2, #1
240114b6:	2133      	movs	r1, #51	; 0x33
240114b8:	3004      	adds	r0, #4
240114ba:	f7f9 f955 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
240114be:	6a2b      	ldr	r3, [r5, #32]
240114c0:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240114c2:	f248 0189 	movw	r1, #32905	; 0x8089
240114c6:	079f      	lsls	r7, r3, #30
240114c8:	f106 0604 	add.w	r6, r6, #4
240114cc:	bf4c      	ite	mi
240114ce:	4859      	ldrmi	r0, [pc, #356]	; (24011634 <lv_theme_material_init+0x31c>)
240114d0:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
240114d4:	f7ff ff14 	bl	24011300 <lv_color_hex>
240114d8:	4602      	mov	r2, r0
240114da:	4630      	mov	r0, r6
240114dc:	f7f9 f986 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
240114e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
240114e2:	696a      	ldr	r2, [r5, #20]
240114e4:	217e      	movs	r1, #126	; 0x7e
240114e6:	3004      	adds	r0, #4
240114e8:	f7f9 fa06 	bl	2400a8f8 <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
240114ec:	6a2b      	ldr	r3, [r5, #32]
240114ee:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
240114f0:	2179      	movs	r1, #121	; 0x79
240114f2:	0798      	lsls	r0, r3, #30
240114f4:	f106 0604 	add.w	r6, r6, #4
240114f8:	bf4c      	ite	mi
240114fa:	484e      	ldrmi	r0, [pc, #312]	; (24011634 <lv_theme_material_init+0x31c>)
240114fc:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011500:	f7ff fefe 	bl	24011300 <lv_color_hex>
24011504:	4602      	mov	r2, r0
24011506:	4630      	mov	r0, r6
24011508:	f7f9 f970 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
2401150c:	6a2b      	ldr	r3, [r5, #32]
2401150e:	6826      	ldr	r6, [r4, #0]
24011510:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
24011512:	f248 01a9 	movw	r1, #32937	; 0x80a9
24011516:	f106 0604 	add.w	r6, r6, #4
2401151a:	bf4c      	ite	mi
2401151c:	4845      	ldrmi	r0, [pc, #276]	; (24011634 <lv_theme_material_init+0x31c>)
2401151e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011522:	f7ff feed 	bl	24011300 <lv_color_hex>
24011526:	4602      	mov	r2, r0
24011528:	4630      	mov	r0, r6
2401152a:	f7f9 f95f 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
2401152e:	6a2b      	ldr	r3, [r5, #32]
24011530:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
24011532:	2199      	movs	r1, #153	; 0x99
24011534:	079a      	lsls	r2, r3, #30
24011536:	f106 0604 	add.w	r6, r6, #4
2401153a:	bf4c      	ite	mi
2401153c:	483d      	ldrmi	r0, [pc, #244]	; (24011634 <lv_theme_material_init+0x31c>)
2401153e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011542:	f7ff fedd 	bl	24011300 <lv_color_hex>
24011546:	4602      	mov	r2, r0
24011548:	4630      	mov	r0, r6
2401154a:	f7f9 f94f 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
2401154e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
24011550:	2201      	movs	r2, #1
24011552:	2190      	movs	r1, #144	; 0x90
24011554:	3004      	adds	r0, #4
24011556:	f7f9 f907 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
2401155a:	2000      	movs	r0, #0
2401155c:	6827      	ldr	r7, [r4, #0]
2401155e:	f7fd fc55 	bl	2400ee0c <lv_disp_get_size_category>
24011562:	2801      	cmp	r0, #1
24011564:	f04f 0000 	mov.w	r0, #0
24011568:	f107 0704 	add.w	r7, r7, #4
2401156c:	f201 83c4 	bhi.w	24012cf8 <lv_theme_material_init+0x19e0>
24011570:	f7fd fc40 	bl	2400edf4 <lv_disp_get_dpi>
24011574:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24011578:	28ef      	cmp	r0, #239	; 0xef
2401157a:	f301 83b0 	bgt.w	24012cde <lv_theme_material_init+0x19c6>
2401157e:	2601      	movs	r6, #1
24011580:	2000      	movs	r0, #0
24011582:	f7fd fc37 	bl	2400edf4 <lv_disp_get_dpi>
24011586:	2877      	cmp	r0, #119	; 0x77
24011588:	f341 83d2 	ble.w	24012d30 <lv_theme_material_init+0x1a18>
2401158c:	2000      	movs	r0, #0
2401158e:	f7fd fc31 	bl	2400edf4 <lv_disp_get_dpi>
24011592:	2350      	movs	r3, #80	; 0x50
24011594:	3028      	adds	r0, #40	; 0x28
24011596:	fb90 f0f3 	sdiv	r0, r0, r3
2401159a:	b280      	uxth	r0, r0
2401159c:	1832      	adds	r2, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401159e:	2112      	movs	r1, #18
240115a0:	4638      	mov	r0, r7
240115a2:	b212      	sxth	r2, r2
240115a4:	f7f9 f8e0 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
240115a8:	2000      	movs	r0, #0
240115aa:	6827      	ldr	r7, [r4, #0]
240115ac:	f7fd fc2e 	bl	2400ee0c <lv_disp_get_size_category>
240115b0:	2801      	cmp	r0, #1
240115b2:	f04f 0000 	mov.w	r0, #0
240115b6:	f107 0704 	add.w	r7, r7, #4
240115ba:	f201 83c9 	bhi.w	24012d50 <lv_theme_material_init+0x1a38>
240115be:	f7fd fc19 	bl	2400edf4 <lv_disp_get_dpi>
240115c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
240115c6:	28ef      	cmp	r0, #239	; 0xef
240115c8:	f301 83b5 	bgt.w	24012d36 <lv_theme_material_init+0x1a1e>
240115cc:	2601      	movs	r6, #1
240115ce:	2000      	movs	r0, #0
240115d0:	f7fd fc10 	bl	2400edf4 <lv_disp_get_dpi>
240115d4:	2877      	cmp	r0, #119	; 0x77
240115d6:	f341 83c8 	ble.w	24012d6a <lv_theme_material_init+0x1a52>
240115da:	2000      	movs	r0, #0
240115dc:	f7fd fc0a 	bl	2400edf4 <lv_disp_get_dpi>
240115e0:	2350      	movs	r3, #80	; 0x50
240115e2:	3028      	adds	r0, #40	; 0x28
240115e4:	fb90 f0f3 	sdiv	r0, r0, r3
240115e8:	b280      	uxth	r0, r0
240115ea:	1832      	adds	r2, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240115ec:	2113      	movs	r1, #19
240115ee:	4638      	mov	r0, r7
240115f0:	b212      	sxth	r2, r2
240115f2:	f7f9 f8b9 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
240115f6:	2000      	movs	r0, #0
240115f8:	6827      	ldr	r7, [r4, #0]
240115fa:	f7fd fc07 	bl	2400ee0c <lv_disp_get_size_category>
240115fe:	2801      	cmp	r0, #1
24011600:	f04f 0000 	mov.w	r0, #0
24011604:	f107 0704 	add.w	r7, r7, #4
24011608:	f201 83bf 	bhi.w	24012d8a <lv_theme_material_init+0x1a72>
2401160c:	f7fd fbf2 	bl	2400edf4 <lv_disp_get_dpi>
24011610:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24011614:	28ef      	cmp	r0, #239	; 0xef
24011616:	f301 83ab 	bgt.w	24012d70 <lv_theme_material_init+0x1a58>
2401161a:	e015      	b.n	24011648 <lv_theme_material_init+0x330>
2401161c:	24035cb8 	.word	0x24035cb8
24011620:	24035cbc 	.word	0x24035cbc
24011624:	2402dc68 	.word	0x2402dc68
24011628:	24035cc0 	.word	0x24035cc0
2401162c:	00eaeff3 	.word	0x00eaeff3
24011630:	00444b5a 	.word	0x00444b5a
24011634:	003b3e42 	.word	0x003b3e42
24011638:	00e7e9ec 	.word	0x00e7e9ec
2401163c:	00586273 	.word	0x00586273
24011640:	00d6dde3 	.word	0x00d6dde3
24011644:	00808a97 	.word	0x00808a97
24011648:	2601      	movs	r6, #1
2401164a:	2000      	movs	r0, #0
2401164c:	f7fd fbd2 	bl	2400edf4 <lv_disp_get_dpi>
24011650:	2877      	cmp	r0, #119	; 0x77
24011652:	f341 83a7 	ble.w	24012da4 <lv_theme_material_init+0x1a8c>
24011656:	2000      	movs	r0, #0
24011658:	f7fd fbcc 	bl	2400edf4 <lv_disp_get_dpi>
2401165c:	2350      	movs	r3, #80	; 0x50
2401165e:	3028      	adds	r0, #40	; 0x28
24011660:	fb90 f0f3 	sdiv	r0, r0, r3
24011664:	b280      	uxth	r0, r0
24011666:	1832      	adds	r2, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24011668:	2110      	movs	r1, #16
2401166a:	4638      	mov	r0, r7
2401166c:	b212      	sxth	r2, r2
2401166e:	f7f9 f87b 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
24011672:	2000      	movs	r0, #0
24011674:	6827      	ldr	r7, [r4, #0]
24011676:	f7fd fbc9 	bl	2400ee0c <lv_disp_get_size_category>
2401167a:	2801      	cmp	r0, #1
2401167c:	f04f 0000 	mov.w	r0, #0
24011680:	f107 0704 	add.w	r7, r7, #4
24011684:	f201 839e 	bhi.w	24012dc4 <lv_theme_material_init+0x1aac>
24011688:	f7fd fbb4 	bl	2400edf4 <lv_disp_get_dpi>
2401168c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24011690:	28ef      	cmp	r0, #239	; 0xef
24011692:	f301 838a 	bgt.w	24012daa <lv_theme_material_init+0x1a92>
24011696:	2601      	movs	r6, #1
24011698:	2000      	movs	r0, #0
2401169a:	f7fd fbab 	bl	2400edf4 <lv_disp_get_dpi>
2401169e:	2877      	cmp	r0, #119	; 0x77
240116a0:	f341 839d 	ble.w	24012dde <lv_theme_material_init+0x1ac6>
240116a4:	2000      	movs	r0, #0
240116a6:	f7fd fba5 	bl	2400edf4 <lv_disp_get_dpi>
240116aa:	2350      	movs	r3, #80	; 0x50
240116ac:	3028      	adds	r0, #40	; 0x28
240116ae:	fb90 f0f3 	sdiv	r0, r0, r3
240116b2:	b280      	uxth	r0, r0
240116b4:	1832      	adds	r2, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240116b6:	2111      	movs	r1, #17
240116b8:	4638      	mov	r0, r7
240116ba:	b212      	sxth	r2, r2
240116bc:	f7f9 f854 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
240116c0:	2000      	movs	r0, #0
240116c2:	6826      	ldr	r6, [r4, #0]
240116c4:	f7fd fba2 	bl	2400ee0c <lv_disp_get_size_category>
240116c8:	2801      	cmp	r0, #1
240116ca:	f04f 0000 	mov.w	r0, #0
240116ce:	f106 0604 	add.w	r6, r6, #4
240116d2:	f201 8394 	bhi.w	24012dfe <lv_theme_material_init+0x1ae6>
240116d6:	f7fd fb8d 	bl	2400edf4 <lv_disp_get_dpi>
240116da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
240116de:	28ef      	cmp	r0, #239	; 0xef
240116e0:	f301 8380 	bgt.w	24012de4 <lv_theme_material_init+0x1acc>
240116e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
240116e6:	4630      	mov	r0, r6
240116e8:	2114      	movs	r1, #20
240116ea:	f7f9 f83d 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
240116ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
240116f0:	2200      	movs	r2, #0
240116f2:	21b0      	movs	r1, #176	; 0xb0
240116f4:	3004      	adds	r0, #4
240116f6:	f7f9 f837 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
240116fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
240116fc:	2239      	movs	r2, #57	; 0x39
240116fe:	21b7      	movs	r1, #183	; 0xb7
24011700:	3004      	adds	r0, #4
24011702:	f7f9 f831 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->bg_sec);
24011706:	6820      	ldr	r0, [r4, #0]
24011708:	300c      	adds	r0, #12
2401170a:	f7ff fdef 	bl	240112ec <style_init_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
2401170e:	6820      	ldr	r0, [r4, #0]
24011710:	1d01      	adds	r1, r0, #4
24011712:	300c      	adds	r0, #12
24011714:	f7f9 f812 	bl	2400a73c <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
24011718:	6a2b      	ldr	r3, [r5, #32]
2401171a:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2401171c:	2129      	movs	r1, #41	; 0x29
2401171e:	079b      	lsls	r3, r3, #30
24011720:	f106 060c 	add.w	r6, r6, #12
24011724:	bf4c      	ite	mi
24011726:	48c6      	ldrmi	r0, [pc, #792]	; (24011a40 <lv_theme_material_init+0x728>)
24011728:	48c6      	ldrpl	r0, [pc, #792]	; (24011a44 <lv_theme_material_init+0x72c>)
2401172a:	f7ff fde9 	bl	24011300 <lv_color_hex>
2401172e:	4602      	mov	r2, r0
24011730:	4630      	mov	r0, r6
24011732:	f7f9 f85b 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
24011736:	6a2b      	ldr	r3, [r5, #32]
24011738:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2401173a:	2139      	movs	r1, #57	; 0x39
2401173c:	079f      	lsls	r7, r3, #30
2401173e:	f106 060c 	add.w	r6, r6, #12
24011742:	bf4c      	ite	mi
24011744:	48c0      	ldrmi	r0, [pc, #768]	; (24011a48 <lv_theme_material_init+0x730>)
24011746:	48c1      	ldrpl	r0, [pc, #772]	; (24011a4c <lv_theme_material_init+0x734>)
24011748:	f7ff fdda 	bl	24011300 <lv_color_hex>
2401174c:	4602      	mov	r2, r0
2401174e:	4630      	mov	r0, r6
24011750:	f7f9 f84c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
24011754:	6a2b      	ldr	r3, [r5, #32]
24011756:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24011758:	f248 0189 	movw	r1, #32905	; 0x8089
2401175c:	0798      	lsls	r0, r3, #30
2401175e:	f106 060c 	add.w	r6, r6, #12
24011762:	bf4c      	ite	mi
24011764:	48ba      	ldrmi	r0, [pc, #744]	; (24011a50 <lv_theme_material_init+0x738>)
24011766:	48bb      	ldrpl	r0, [pc, #748]	; (24011a54 <lv_theme_material_init+0x73c>)
24011768:	f7ff fdca 	bl	24011300 <lv_color_hex>
2401176c:	4602      	mov	r2, r0
2401176e:	4630      	mov	r0, r6
24011770:	f7f9 f83c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
24011774:	6a2b      	ldr	r3, [r5, #32]
24011776:	6826      	ldr	r6, [r4, #0]
24011778:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
2401177a:	f04f 0179 	mov.w	r1, #121	; 0x79
2401177e:	f106 060c 	add.w	r6, r6, #12
24011782:	bf4c      	ite	mi
24011784:	48b2      	ldrmi	r0, [pc, #712]	; (24011a50 <lv_theme_material_init+0x738>)
24011786:	48b3      	ldrpl	r0, [pc, #716]	; (24011a54 <lv_theme_material_init+0x73c>)
24011788:	f7ff fdba 	bl	24011300 <lv_color_hex>
2401178c:	4602      	mov	r2, r0
2401178e:	4630      	mov	r0, r6
24011790:	f7f9 f82c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
24011794:	6a2b      	ldr	r3, [r5, #32]
24011796:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
24011798:	f248 01a9 	movw	r1, #32937	; 0x80a9
2401179c:	079a      	lsls	r2, r3, #30
2401179e:	f106 060c 	add.w	r6, r6, #12
240117a2:	bf4c      	ite	mi
240117a4:	48aa      	ldrmi	r0, [pc, #680]	; (24011a50 <lv_theme_material_init+0x738>)
240117a6:	48ab      	ldrpl	r0, [pc, #684]	; (24011a54 <lv_theme_material_init+0x73c>)
240117a8:	f7ff fdaa 	bl	24011300 <lv_color_hex>
240117ac:	4602      	mov	r2, r0
240117ae:	4630      	mov	r0, r6
240117b0:	f7f9 f81c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
240117b4:	6a2b      	ldr	r3, [r5, #32]
240117b6:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
240117b8:	2199      	movs	r1, #153	; 0x99
240117ba:	079b      	lsls	r3, r3, #30
240117bc:	f106 060c 	add.w	r6, r6, #12
240117c0:	bf4c      	ite	mi
240117c2:	48a3      	ldrmi	r0, [pc, #652]	; (24011a50 <lv_theme_material_init+0x738>)
240117c4:	48a3      	ldrpl	r0, [pc, #652]	; (24011a54 <lv_theme_material_init+0x73c>)
240117c6:	f7ff fd9b 	bl	24011300 <lv_color_hex>
240117ca:	4602      	mov	r2, r0
240117cc:	4630      	mov	r0, r6
240117ce:	f7f9 f80d 	bl	2400a7ec <_lv_style_set_color>
    style_init_reset(&styles->bg_click);
240117d2:	6820      	ldr	r0, [r4, #0]
240117d4:	3008      	adds	r0, #8
240117d6:	f7ff fd89 	bl	240112ec <style_init_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
240117da:	6a2b      	ldr	r3, [r5, #32]
240117dc:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
240117de:	f241 0129 	movw	r1, #4137	; 0x1029
240117e2:	079f      	lsls	r7, r3, #30
240117e4:	f106 0608 	add.w	r6, r6, #8
240117e8:	bf4c      	ite	mi
240117ea:	489b      	ldrmi	r0, [pc, #620]	; (24011a58 <lv_theme_material_init+0x740>)
240117ec:	489b      	ldrpl	r0, [pc, #620]	; (24011a5c <lv_theme_material_init+0x744>)
240117ee:	f7ff fd87 	bl	24011300 <lv_color_hex>
240117f2:	4602      	mov	r2, r0
240117f4:	4630      	mov	r0, r6
240117f6:	f7f8 fff9 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
240117fa:	6820      	ldr	r0, [r4, #0]
240117fc:	89aa      	ldrh	r2, [r5, #12]
240117fe:	f240 1129 	movw	r1, #297	; 0x129
24011802:	3008      	adds	r0, #8
24011804:	f7f8 fff2 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
24011808:	6820      	ldr	r0, [r4, #0]
2401180a:	2133      	movs	r1, #51	; 0x33
2401180c:	f100 0608 	add.w	r6, r0, #8
24011810:	89a8      	ldrh	r0, [r5, #12]
24011812:	f7fd ff23 	bl	2400f65c <lv_color_darken>
24011816:	f241 1129 	movw	r1, #4393	; 0x1129
2401181a:	4602      	mov	r2, r0
2401181c:	4630      	mov	r0, r6
2401181e:	f7f8 ffe5 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
24011822:	6a2b      	ldr	r3, [r5, #32]
24011824:	6824      	ldr	r4, [r4, #0]
24011826:	f242 0129 	movw	r1, #8233	; 0x2029
2401182a:	079e      	lsls	r6, r3, #30
2401182c:	f104 0408 	add.w	r4, r4, #8
24011830:	bf4c      	ite	mi
24011832:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
24011836:	488a      	ldrpl	r0, [pc, #552]	; (24011a60 <lv_theme_material_init+0x748>)
24011838:	f7ff fd62 	bl	24011300 <lv_color_hex>
2401183c:	4602      	mov	r2, r0
2401183e:	4620      	mov	r0, r4
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
24011840:	4c88      	ldr	r4, [pc, #544]	; (24011a64 <lv_theme_material_init+0x74c>)
24011842:	f7f8 ffd3 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24011846:	2200      	movs	r2, #0
24011848:	6820      	ldr	r0, [r4, #0]
2401184a:	f44f 7198 	mov.w	r1, #304	; 0x130
2401184e:	3008      	adds	r0, #8
24011850:	f7f8 ff8a 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
24011854:	6820      	ldr	r0, [r4, #0]
24011856:	2133      	movs	r1, #51	; 0x33
24011858:	f100 0608 	add.w	r6, r0, #8
2401185c:	89a8      	ldrh	r0, [r5, #12]
2401185e:	f7fd fefd 	bl	2400f65c <lv_color_darken>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24011862:	f241 2139 	movw	r1, #4665	; 0x1239
24011866:	4602      	mov	r2, r0
24011868:	4630      	mov	r0, r6
2401186a:	f7f8 ffbf 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
2401186e:	6a2b      	ldr	r3, [r5, #32]
24011870:	6826      	ldr	r6, [r4, #0]
24011872:	0798      	lsls	r0, r3, #30
24011874:	f106 0608 	add.w	r6, r6, #8
24011878:	f141 82ce 	bpl.w	24012e18 <lv_theme_material_init+0x1b00>
2401187c:	f640 40cc 	movw	r0, #3276	; 0xccc
24011880:	f7ff fbcf 	bl	24011022 <lv_color_hex3>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
24011884:	4d78      	ldr	r5, [pc, #480]	; (24011a68 <lv_theme_material_init+0x750>)
24011886:	4602      	mov	r2, r0
24011888:	f241 0139 	movw	r1, #4153	; 0x1039
2401188c:	4630      	mov	r0, r6
2401188e:	f7f8 ffad 	bl	2400a7ec <_lv_style_set_color>
24011892:	6a2b      	ldr	r3, [r5, #32]
24011894:	6826      	ldr	r6, [r4, #0]
24011896:	0799      	lsls	r1, r3, #30
24011898:	f240 1139 	movw	r1, #313	; 0x139
2401189c:	f106 0608 	add.w	r6, r6, #8
240118a0:	bf4c      	ite	mi
240118a2:	4872      	ldrmi	r0, [pc, #456]	; (24011a6c <lv_theme_material_init+0x754>)
240118a4:	4872      	ldrpl	r0, [pc, #456]	; (24011a70 <lv_theme_material_init+0x758>)
240118a6:	f7ff fd2b 	bl	24011300 <lv_color_hex>
240118aa:	4602      	mov	r2, r0
240118ac:	4630      	mov	r0, r6
240118ae:	f7f8 ff9d 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
240118b2:	6a2b      	ldr	r3, [r5, #32]
240118b4:	6826      	ldr	r6, [r4, #0]
240118b6:	f241 1139 	movw	r1, #4409	; 0x1139
240118ba:	079a      	lsls	r2, r3, #30
240118bc:	f106 0608 	add.w	r6, r6, #8
240118c0:	bf4c      	ite	mi
240118c2:	486a      	ldrmi	r0, [pc, #424]	; (24011a6c <lv_theme_material_init+0x754>)
240118c4:	486a      	ldrpl	r0, [pc, #424]	; (24011a70 <lv_theme_material_init+0x758>)
240118c6:	f7ff fd1b 	bl	24011300 <lv_color_hex>
240118ca:	4602      	mov	r2, r0
240118cc:	4630      	mov	r0, r6
240118ce:	f7f8 ff8d 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
240118d2:	6a2b      	ldr	r3, [r5, #32]
240118d4:	6826      	ldr	r6, [r4, #0]
240118d6:	f242 0139 	movw	r1, #8249	; 0x2039
240118da:	079b      	lsls	r3, r3, #30
240118dc:	f106 0608 	add.w	r6, r6, #8
240118e0:	bf4c      	ite	mi
240118e2:	4864      	ldrmi	r0, [pc, #400]	; (24011a74 <lv_theme_material_init+0x75c>)
240118e4:	4862      	ldrpl	r0, [pc, #392]	; (24011a70 <lv_theme_material_init+0x758>)
240118e6:	f7ff fd0b 	bl	24011300 <lv_color_hex>
240118ea:	4602      	mov	r2, r0
240118ec:	4630      	mov	r0, r6
240118ee:	f7f8 ff7d 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
240118f2:	6a2b      	ldr	r3, [r5, #32]
240118f4:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240118f6:	f249 0189 	movw	r1, #37001	; 0x9089
240118fa:	079f      	lsls	r7, r3, #30
240118fc:	f106 0608 	add.w	r6, r6, #8
24011900:	bf4c      	ite	mi
24011902:	485a      	ldrmi	r0, [pc, #360]	; (24011a6c <lv_theme_material_init+0x754>)
24011904:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011908:	f7ff fcfa 	bl	24011300 <lv_color_hex>
2401190c:	4602      	mov	r2, r0
2401190e:	4630      	mov	r0, r6
24011910:	f7f8 ff6c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
24011914:	6820      	ldr	r0, [r4, #0]
24011916:	f248 1189 	movw	r1, #33161	; 0x8189
2401191a:	f100 0608 	add.w	r6, r0, #8
2401191e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011922:	f7ff fced 	bl	24011300 <lv_color_hex>
24011926:	4602      	mov	r2, r0
24011928:	4630      	mov	r0, r6
2401192a:	f7f8 ff5f 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
2401192e:	6820      	ldr	r0, [r4, #0]
24011930:	f249 1189 	movw	r1, #37257	; 0x9189
24011934:	f100 0608 	add.w	r6, r0, #8
24011938:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
2401193c:	f7ff fce0 	bl	24011300 <lv_color_hex>
24011940:	4602      	mov	r2, r0
24011942:	4630      	mov	r0, r6
24011944:	f7f8 ff52 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
24011948:	6a2b      	ldr	r3, [r5, #32]
2401194a:	6826      	ldr	r6, [r4, #0]
2401194c:	0798      	lsls	r0, r3, #30
2401194e:	f106 0608 	add.w	r6, r6, #8
24011952:	bf4c      	ite	mi
24011954:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
24011958:	f640 1099 	movwpl	r0, #2457	; 0x999
2401195c:	f7ff fb61 	bl	24011022 <lv_color_hex3>
24011960:	f24a 0189 	movw	r1, #41097	; 0xa089
24011964:	4602      	mov	r2, r0
24011966:	4630      	mov	r0, r6
24011968:	f7f8 ff40 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
2401196c:	6a2b      	ldr	r3, [r5, #32]
2401196e:	6826      	ldr	r6, [r4, #0]
24011970:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
24011972:	f249 01a9 	movw	r1, #37033	; 0x90a9
24011976:	f106 0608 	add.w	r6, r6, #8
2401197a:	bf4c      	ite	mi
2401197c:	483b      	ldrmi	r0, [pc, #236]	; (24011a6c <lv_theme_material_init+0x754>)
2401197e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011982:	f7ff fcbd 	bl	24011300 <lv_color_hex>
24011986:	4602      	mov	r2, r0
24011988:	4630      	mov	r0, r6
2401198a:	f7f8 ff2f 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
2401198e:	6820      	ldr	r0, [r4, #0]
24011990:	f248 11a9 	movw	r1, #33193	; 0x81a9
24011994:	f100 0608 	add.w	r6, r0, #8
24011998:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
2401199c:	f7ff fcb0 	bl	24011300 <lv_color_hex>
240119a0:	4602      	mov	r2, r0
240119a2:	4630      	mov	r0, r6
240119a4:	f7f8 ff22 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
240119a8:	6820      	ldr	r0, [r4, #0]
240119aa:	f249 11a9 	movw	r1, #37289	; 0x91a9
240119ae:	f100 0608 	add.w	r6, r0, #8
240119b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
240119b6:	f7ff fca3 	bl	24011300 <lv_color_hex>
240119ba:	4602      	mov	r2, r0
240119bc:	4630      	mov	r0, r6
240119be:	f7f8 ff15 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
240119c2:	6a2b      	ldr	r3, [r5, #32]
240119c4:	6826      	ldr	r6, [r4, #0]
240119c6:	079a      	lsls	r2, r3, #30
240119c8:	f106 0608 	add.w	r6, r6, #8
240119cc:	bf4c      	ite	mi
240119ce:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
240119d2:	f640 1099 	movwpl	r0, #2457	; 0x999
240119d6:	f7ff fb24 	bl	24011022 <lv_color_hex3>
240119da:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
240119de:	4602      	mov	r2, r0
240119e0:	4630      	mov	r0, r6
240119e2:	f7f8 ff03 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
240119e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
240119e8:	2229      	movs	r2, #41	; 0x29
240119ea:	21b6      	movs	r1, #182	; 0xb6
240119ec:	3008      	adds	r0, #8
240119ee:	f7f8 febb 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->btn);
240119f2:	6820      	ldr	r0, [r4, #0]
240119f4:	3010      	adds	r0, #16
240119f6:	f7ff fc79 	bl	240112ec <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
240119fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240119fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
24011a00:	2101      	movs	r1, #1
24011a02:	3010      	adds	r0, #16
24011a04:	f7f8 feb0 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
24011a08:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24011a0a:	22ff      	movs	r2, #255	; 0xff
24011a0c:	212c      	movs	r1, #44	; 0x2c
24011a0e:	3010      	adds	r0, #16
24011a10:	f7f8 ff2e 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
24011a14:	6a2b      	ldr	r3, [r5, #32]
24011a16:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24011a18:	2129      	movs	r1, #41	; 0x29
24011a1a:	079b      	lsls	r3, r3, #30
24011a1c:	f106 0610 	add.w	r6, r6, #16
24011a20:	bf4c      	ite	mi
24011a22:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
24011a26:	480e      	ldrpl	r0, [pc, #56]	; (24011a60 <lv_theme_material_init+0x748>)
24011a28:	f7ff fc6a 	bl	24011300 <lv_color_hex>
24011a2c:	4602      	mov	r2, r0
24011a2e:	4630      	mov	r0, r6
24011a30:	f7f8 fedc 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
24011a34:	6a2b      	ldr	r3, [r5, #32]
24011a36:	6826      	ldr	r6, [r4, #0]
24011a38:	079f      	lsls	r7, r3, #30
24011a3a:	f106 0610 	add.w	r6, r6, #16
24011a3e:	e01b      	b.n	24011a78 <lv_theme_material_init+0x760>
24011a40:	00d4d7d9 	.word	0x00d4d7d9
24011a44:	0045494d 	.word	0x0045494d
24011a48:	00dfe7ed 	.word	0x00dfe7ed
24011a4c:	00404040 	.word	0x00404040
24011a50:	0031404f 	.word	0x0031404f
24011a54:	00a5a8ad 	.word	0x00a5a8ad
24011a58:	00eeeeee 	.word	0x00eeeeee
24011a5c:	00494f57 	.word	0x00494f57
24011a60:	00586273 	.word	0x00586273
24011a64:	24035cbc 	.word	0x24035cbc
24011a68:	24035cc0 	.word	0x24035cc0
24011a6c:	003b3e42 	.word	0x003b3e42
24011a70:	005f656e 	.word	0x005f656e
24011a74:	00d6dde3 	.word	0x00d6dde3
24011a78:	f141 81d3 	bpl.w	24012e22 <lv_theme_material_init+0x1b0a>
24011a7c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011a80:	f7ff fc3e 	bl	24011300 <lv_color_hex>
24011a84:	2233      	movs	r2, #51	; 0x33
24011a86:	4601      	mov	r1, r0
24011a88:	89a8      	ldrh	r0, [r5, #12]
24011a8a:	f7ff fa9f 	bl	24010fcc <lv_color_mix>
24011a8e:	f241 0129 	movw	r1, #4137	; 0x1029
24011a92:	4602      	mov	r2, r0
24011a94:	4630      	mov	r0, r6
24011a96:	f7f8 fea9 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
24011a9a:	6820      	ldr	r0, [r4, #0]
24011a9c:	89aa      	ldrh	r2, [r5, #12]
24011a9e:	f240 1129 	movw	r1, #297	; 0x129
24011aa2:	3010      	adds	r0, #16
24011aa4:	f7f8 fea2 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
24011aa8:	6820      	ldr	r0, [r4, #0]
24011aaa:	214c      	movs	r1, #76	; 0x4c
24011aac:	f100 0610 	add.w	r6, r0, #16
24011ab0:	89a8      	ldrh	r0, [r5, #12]
24011ab2:	f7fd fdd3 	bl	2400f65c <lv_color_darken>
24011ab6:	f241 1129 	movw	r1, #4393	; 0x1129
24011aba:	4602      	mov	r2, r0
24011abc:	4630      	mov	r0, r6
24011abe:	f7f8 fe95 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
24011ac2:	6a2b      	ldr	r3, [r5, #32]
24011ac4:	6826      	ldr	r6, [r4, #0]
24011ac6:	f242 0129 	movw	r1, #8233	; 0x2029
24011aca:	0798      	lsls	r0, r3, #30
24011acc:	f106 0610 	add.w	r6, r6, #16
24011ad0:	bf4c      	ite	mi
24011ad2:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
24011ad6:	48d4      	ldrpl	r0, [pc, #848]	; (24011e28 <lv_theme_material_init+0xb10>)
24011ad8:	f7ff fc12 	bl	24011300 <lv_color_hex>
24011adc:	4602      	mov	r2, r0
24011ade:	4630      	mov	r0, r6
24011ae0:	f7f8 fe84 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
24011ae4:	6a2b      	ldr	r3, [r5, #32]
24011ae6:	6826      	ldr	r6, [r4, #0]
24011ae8:	0799      	lsls	r1, r3, #30
24011aea:	f106 0610 	add.w	r6, r6, #16
24011aee:	bf4c      	ite	mi
24011af0:	f640 40cc 	movwmi	r0, #3276	; 0xccc
24011af4:	f640 0088 	movwpl	r0, #2184	; 0x888
24011af8:	f7ff fa93 	bl	24011022 <lv_color_hex3>
24011afc:	f242 1129 	movw	r1, #8489	; 0x2129
24011b00:	4602      	mov	r2, r0
24011b02:	4630      	mov	r0, r6
24011b04:	f7f8 fe72 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
24011b08:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24011b0a:	89aa      	ldrh	r2, [r5, #12]
24011b0c:	2139      	movs	r1, #57	; 0x39
24011b0e:	3010      	adds	r0, #16
24011b10:	f7f8 fe6c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
24011b14:	6820      	ldr	r0, [r4, #0]
24011b16:	89aa      	ldrh	r2, [r5, #12]
24011b18:	f241 0139 	movw	r1, #4153	; 0x1039
24011b1c:	3010      	adds	r0, #16
24011b1e:	f7f8 fe65 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
24011b22:	6a2b      	ldr	r3, [r5, #32]
24011b24:	6826      	ldr	r6, [r4, #0]
24011b26:	079a      	lsls	r2, r3, #30
24011b28:	f106 0610 	add.w	r6, r6, #16
24011b2c:	f141 8180 	bpl.w	24012e30 <lv_theme_material_init+0x1b18>
24011b30:	f640 0088 	movw	r0, #2184	; 0x888
24011b34:	f7ff fa75 	bl	24011022 <lv_color_hex3>
24011b38:	4602      	mov	r2, r0
24011b3a:	f242 0139 	movw	r1, #8249	; 0x2039
24011b3e:	4630      	mov	r0, r6
24011b40:	f7f8 fe54 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
24011b44:	2000      	movs	r0, #0
24011b46:	6826      	ldr	r6, [r4, #0]
24011b48:	f7fd f954 	bl	2400edf4 <lv_disp_get_dpi>
24011b4c:	2877      	cmp	r0, #119	; 0x77
24011b4e:	f106 0610 	add.w	r6, r6, #16
24011b52:	f341 8172 	ble.w	24012e3a <lv_theme_material_init+0x1b22>
24011b56:	2000      	movs	r0, #0
24011b58:	f7fd f94c 	bl	2400edf4 <lv_disp_get_dpi>
24011b5c:	2350      	movs	r3, #80	; 0x50
24011b5e:	f100 0228 	add.w	r2, r0, #40	; 0x28
24011b62:	fb92 f2f3 	sdiv	r2, r2, r3
24011b66:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24011b68:	4630      	mov	r0, r6
24011b6a:	2130      	movs	r1, #48	; 0x30
24011b6c:	f7f8 fdfc 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
24011b70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
24011b72:	2200      	movs	r2, #0
24011b74:	f44f 719e 	mov.w	r1, #316	; 0x13c
24011b78:	3010      	adds	r0, #16
24011b7a:	f7f8 fe79 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011b7e:	6a2b      	ldr	r3, [r5, #32]
24011b80:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24011b82:	f248 0189 	movw	r1, #32905	; 0x8089
24011b86:	079b      	lsls	r3, r3, #30
24011b88:	f106 0610 	add.w	r6, r6, #16
24011b8c:	bf4c      	ite	mi
24011b8e:	48a7      	ldrmi	r0, [pc, #668]	; (24011e2c <lv_theme_material_init+0xb14>)
24011b90:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011b94:	f7ff fbb4 	bl	24011300 <lv_color_hex>
24011b98:	4602      	mov	r2, r0
24011b9a:	4630      	mov	r0, r6
24011b9c:	f7f8 fe26 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011ba0:	6a2b      	ldr	r3, [r5, #32]
24011ba2:	6826      	ldr	r6, [r4, #0]
24011ba4:	f249 0189 	movw	r1, #37001	; 0x9089
24011ba8:	079f      	lsls	r7, r3, #30
24011baa:	f106 0610 	add.w	r6, r6, #16
24011bae:	bf4c      	ite	mi
24011bb0:	489e      	ldrmi	r0, [pc, #632]	; (24011e2c <lv_theme_material_init+0xb14>)
24011bb2:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011bb6:	f7ff fba3 	bl	24011300 <lv_color_hex>
24011bba:	4602      	mov	r2, r0
24011bbc:	4630      	mov	r0, r6
24011bbe:	f7f8 fe15 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
24011bc2:	6820      	ldr	r0, [r4, #0]
24011bc4:	f248 1189 	movw	r1, #33161	; 0x8189
24011bc8:	f100 0610 	add.w	r6, r0, #16
24011bcc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011bd0:	f7ff fb96 	bl	24011300 <lv_color_hex>
24011bd4:	4602      	mov	r2, r0
24011bd6:	4630      	mov	r0, r6
24011bd8:	f7f8 fe08 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
24011bdc:	6820      	ldr	r0, [r4, #0]
24011bde:	f249 1189 	movw	r1, #37257	; 0x9189
24011be2:	f100 0610 	add.w	r6, r0, #16
24011be6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011bea:	f7ff fb89 	bl	24011300 <lv_color_hex>
24011bee:	4602      	mov	r2, r0
24011bf0:	4630      	mov	r0, r6
24011bf2:	f7f8 fdfb 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
24011bf6:	6820      	ldr	r0, [r4, #0]
24011bf8:	f24a 0189 	movw	r1, #41097	; 0xa089
24011bfc:	f100 0610 	add.w	r6, r0, #16
24011c00:	488b      	ldr	r0, [pc, #556]	; (24011e30 <lv_theme_material_init+0xb18>)
24011c02:	f7ff fb7d 	bl	24011300 <lv_color_hex>
24011c06:	4602      	mov	r2, r0
24011c08:	4630      	mov	r0, r6
24011c0a:	f7f8 fdef 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011c0e:	6a2b      	ldr	r3, [r5, #32]
24011c10:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
24011c12:	f248 01a9 	movw	r1, #32937	; 0x80a9
24011c16:	0798      	lsls	r0, r3, #30
24011c18:	f106 0610 	add.w	r6, r6, #16
24011c1c:	bf4c      	ite	mi
24011c1e:	4883      	ldrmi	r0, [pc, #524]	; (24011e2c <lv_theme_material_init+0xb14>)
24011c20:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011c24:	f7ff fb6c 	bl	24011300 <lv_color_hex>
24011c28:	4602      	mov	r2, r0
24011c2a:	4630      	mov	r0, r6
24011c2c:	f7f8 fdde 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011c30:	6a2b      	ldr	r3, [r5, #32]
24011c32:	6826      	ldr	r6, [r4, #0]
24011c34:	0799      	lsls	r1, r3, #30
24011c36:	f249 01a9 	movw	r1, #37033	; 0x90a9
24011c3a:	f106 0610 	add.w	r6, r6, #16
24011c3e:	bf4c      	ite	mi
24011c40:	487a      	ldrmi	r0, [pc, #488]	; (24011e2c <lv_theme_material_init+0xb14>)
24011c42:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011c46:	f7ff fb5b 	bl	24011300 <lv_color_hex>
24011c4a:	4602      	mov	r2, r0
24011c4c:	4630      	mov	r0, r6
24011c4e:	f7f8 fdcd 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
24011c52:	6820      	ldr	r0, [r4, #0]
24011c54:	f249 01a9 	movw	r1, #37033	; 0x90a9
24011c58:	f100 0610 	add.w	r6, r0, #16
24011c5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011c60:	f7ff fb4e 	bl	24011300 <lv_color_hex>
24011c64:	4602      	mov	r2, r0
24011c66:	4630      	mov	r0, r6
24011c68:	f7f8 fdc0 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
24011c6c:	6820      	ldr	r0, [r4, #0]
24011c6e:	f249 11a9 	movw	r1, #37289	; 0x91a9
24011c72:	f100 0610 	add.w	r6, r0, #16
24011c76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011c7a:	f7ff fb41 	bl	24011300 <lv_color_hex>
24011c7e:	4602      	mov	r2, r0
24011c80:	4630      	mov	r0, r6
24011c82:	f7f8 fdb3 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
24011c86:	6820      	ldr	r0, [r4, #0]
24011c88:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
24011c8c:	f100 0610 	add.w	r6, r0, #16
24011c90:	4867      	ldr	r0, [pc, #412]	; (24011e30 <lv_theme_material_init+0xb18>)
24011c92:	f7ff fb35 	bl	24011300 <lv_color_hex>
24011c96:	4602      	mov	r2, r0
24011c98:	4630      	mov	r0, r6
24011c9a:	f7f8 fda7 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011c9e:	6a2b      	ldr	r3, [r5, #32]
24011ca0:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
24011ca2:	2179      	movs	r1, #121	; 0x79
24011ca4:	079a      	lsls	r2, r3, #30
24011ca6:	f106 0610 	add.w	r6, r6, #16
24011caa:	bf4c      	ite	mi
24011cac:	485f      	ldrmi	r0, [pc, #380]	; (24011e2c <lv_theme_material_init+0xb14>)
24011cae:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011cb2:	f7ff fb25 	bl	24011300 <lv_color_hex>
24011cb6:	4602      	mov	r2, r0
24011cb8:	4630      	mov	r0, r6
24011cba:	f7f8 fd97 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
24011cbe:	6a2b      	ldr	r3, [r5, #32]
24011cc0:	6826      	ldr	r6, [r4, #0]
24011cc2:	f241 0179 	movw	r1, #4217	; 0x1079
24011cc6:	079b      	lsls	r3, r3, #30
24011cc8:	f106 0610 	add.w	r6, r6, #16
24011ccc:	bf4c      	ite	mi
24011cce:	4857      	ldrmi	r0, [pc, #348]	; (24011e2c <lv_theme_material_init+0xb14>)
24011cd0:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
24011cd4:	f7ff fb14 	bl	24011300 <lv_color_hex>
24011cd8:	4602      	mov	r2, r0
24011cda:	4630      	mov	r0, r6
24011cdc:	f7f8 fd86 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
24011ce0:	6820      	ldr	r0, [r4, #0]
24011ce2:	f240 1179 	movw	r1, #377	; 0x179
24011ce6:	f100 0610 	add.w	r6, r0, #16
24011cea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011cee:	f7ff fb07 	bl	24011300 <lv_color_hex>
24011cf2:	4602      	mov	r2, r0
24011cf4:	4630      	mov	r0, r6
24011cf6:	f7f8 fd79 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
24011cfa:	6820      	ldr	r0, [r4, #0]
24011cfc:	f241 1179 	movw	r1, #4473	; 0x1179
24011d00:	f100 0610 	add.w	r6, r0, #16
24011d04:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
24011d08:	f7ff fafa 	bl	24011300 <lv_color_hex>
24011d0c:	4602      	mov	r2, r0
24011d0e:	4630      	mov	r0, r6
24011d10:	f7f8 fd6c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
24011d14:	6820      	ldr	r0, [r4, #0]
24011d16:	f242 0179 	movw	r1, #8313	; 0x2079
24011d1a:	f100 0610 	add.w	r6, r0, #16
24011d1e:	4844      	ldr	r0, [pc, #272]	; (24011e30 <lv_theme_material_init+0xb18>)
24011d20:	f7ff faee 	bl	24011300 <lv_color_hex>
24011d24:	4602      	mov	r2, r0
24011d26:	4630      	mov	r0, r6
24011d28:	f7f8 fd60 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
24011d2c:	2000      	movs	r0, #0
24011d2e:	6826      	ldr	r6, [r4, #0]
24011d30:	f7fd f860 	bl	2400edf4 <lv_disp_get_dpi>
24011d34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24011d38:	3610      	adds	r6, #16
24011d3a:	00c0      	lsls	r0, r0, #3
24011d3c:	28ef      	cmp	r0, #239	; 0xef
24011d3e:	f341 807f 	ble.w	24012e40 <lv_theme_material_init+0x1b28>
24011d42:	2000      	movs	r0, #0
24011d44:	f7fd f856 	bl	2400edf4 <lv_disp_get_dpi>
24011d48:	2328      	movs	r3, #40	; 0x28
24011d4a:	2250      	movs	r2, #80	; 0x50
24011d4c:	fb00 2203 	mla	r2, r0, r3, r2
24011d50:	23a0      	movs	r3, #160	; 0xa0
24011d52:	fb92 f2f3 	sdiv	r2, r2, r3
24011d56:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24011d58:	4630      	mov	r0, r6
24011d5a:	2112      	movs	r1, #18
24011d5c:	f7f8 fd04 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
24011d60:	2000      	movs	r0, #0
24011d62:	6826      	ldr	r6, [r4, #0]
24011d64:	f7fd f846 	bl	2400edf4 <lv_disp_get_dpi>
24011d68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24011d6c:	3610      	adds	r6, #16
24011d6e:	00c0      	lsls	r0, r0, #3
24011d70:	28ef      	cmp	r0, #239	; 0xef
24011d72:	f341 8068 	ble.w	24012e46 <lv_theme_material_init+0x1b2e>
24011d76:	2000      	movs	r0, #0
24011d78:	f7fd f83c 	bl	2400edf4 <lv_disp_get_dpi>
24011d7c:	2328      	movs	r3, #40	; 0x28
24011d7e:	2250      	movs	r2, #80	; 0x50
24011d80:	fb00 2203 	mla	r2, r0, r3, r2
24011d84:	23a0      	movs	r3, #160	; 0xa0
24011d86:	fb92 f2f3 	sdiv	r2, r2, r3
24011d8a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24011d8c:	4630      	mov	r0, r6
24011d8e:	2113      	movs	r1, #19
24011d90:	f7f8 fcea 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
24011d94:	2000      	movs	r0, #0
24011d96:	6826      	ldr	r6, [r4, #0]
24011d98:	f7fd f82c 	bl	2400edf4 <lv_disp_get_dpi>
24011d9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24011da0:	3610      	adds	r6, #16
24011da2:	28ef      	cmp	r0, #239	; 0xef
24011da4:	f341 8052 	ble.w	24012e4c <lv_theme_material_init+0x1b34>
24011da8:	2000      	movs	r0, #0
24011daa:	f7fd f823 	bl	2400edf4 <lv_disp_get_dpi>
24011dae:	230f      	movs	r3, #15
24011db0:	2250      	movs	r2, #80	; 0x50
24011db2:	fb00 2203 	mla	r2, r0, r3, r2
24011db6:	23a0      	movs	r3, #160	; 0xa0
24011db8:	fb92 f2f3 	sdiv	r2, r2, r3
24011dbc:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24011dbe:	4630      	mov	r0, r6
24011dc0:	2110      	movs	r1, #16
24011dc2:	f7f8 fcd1 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
24011dc6:	2000      	movs	r0, #0
24011dc8:	6826      	ldr	r6, [r4, #0]
24011dca:	f7fd f813 	bl	2400edf4 <lv_disp_get_dpi>
24011dce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24011dd2:	3610      	adds	r6, #16
24011dd4:	28ef      	cmp	r0, #239	; 0xef
24011dd6:	f341 803c 	ble.w	24012e52 <lv_theme_material_init+0x1b3a>
24011dda:	2000      	movs	r0, #0
24011ddc:	f7fd f80a 	bl	2400edf4 <lv_disp_get_dpi>
24011de0:	230f      	movs	r3, #15
24011de2:	2250      	movs	r2, #80	; 0x50
24011de4:	fb00 2203 	mla	r2, r0, r3, r2
24011de8:	23a0      	movs	r3, #160	; 0xa0
24011dea:	fb92 f2f3 	sdiv	r2, r2, r3
24011dee:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24011df0:	4630      	mov	r0, r6
24011df2:	2111      	movs	r1, #17
24011df4:	f7f8 fcb8 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
24011df8:	2000      	movs	r0, #0
24011dfa:	6826      	ldr	r6, [r4, #0]
24011dfc:	f7fc fffa 	bl	2400edf4 <lv_disp_get_dpi>
24011e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24011e04:	3610      	adds	r6, #16
24011e06:	0080      	lsls	r0, r0, #2
24011e08:	28ef      	cmp	r0, #239	; 0xef
24011e0a:	f341 8025 	ble.w	24012e58 <lv_theme_material_init+0x1b40>
24011e0e:	2000      	movs	r0, #0
24011e10:	f7fc fff0 	bl	2400edf4 <lv_disp_get_dpi>
24011e14:	2314      	movs	r3, #20
24011e16:	2250      	movs	r2, #80	; 0x50
24011e18:	fb00 2203 	mla	r2, r0, r3, r2
24011e1c:	23a0      	movs	r3, #160	; 0xa0
24011e1e:	fb92 f2f3 	sdiv	r2, r2, r3
24011e22:	b212      	sxth	r2, r2
24011e24:	e006      	b.n	24011e34 <lv_theme_material_init+0xb1c>
24011e26:	bf00      	nop
24011e28:	00586273 	.word	0x00586273
24011e2c:	0031404f 	.word	0x0031404f
24011e30:	00888888 	.word	0x00888888
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24011e34:	4630      	mov	r0, r6
24011e36:	2114      	movs	r1, #20
24011e38:	f7f8 fc96 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24011e3c:	6a28      	ldr	r0, [r5, #32]
24011e3e:	6826      	ldr	r6, [r4, #0]
24011e40:	f010 0720 	ands.w	r7, r0, #32
24011e44:	f106 0610 	add.w	r6, r6, #16
24011e48:	f041 8009 	bne.w	24012e5e <lv_theme_material_init+0x1b46>
24011e4c:	4638      	mov	r0, r7
24011e4e:	f7fc ffd1 	bl	2400edf4 <lv_disp_get_dpi>
24011e52:	2877      	cmp	r0, #119	; 0x77
24011e54:	f341 8006 	ble.w	24012e64 <lv_theme_material_init+0x1b4c>
24011e58:	4638      	mov	r0, r7
24011e5a:	f7fc ffcb 	bl	2400edf4 <lv_disp_get_dpi>
24011e5e:	2350      	movs	r3, #80	; 0x50
24011e60:	f100 0228 	add.w	r2, r0, #40	; 0x28
24011e64:	fb92 f2f3 	sdiv	r2, r2, r3
24011e68:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
24011e6a:	4630      	mov	r0, r6
24011e6c:	2140      	movs	r1, #64	; 0x40
24011e6e:	f7f8 fc7b 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
24011e72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
24011e74:	2200      	movs	r2, #0
24011e76:	214c      	movs	r1, #76	; 0x4c
24011e78:	3010      	adds	r0, #16
24011e7a:	f7f8 fcf9 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
24011e7e:	6820      	ldr	r0, [r4, #0]
24011e80:	227f      	movs	r2, #127	; 0x7f
24011e82:	f44f 7113 	mov.w	r1, #588	; 0x24c
24011e86:	3010      	adds	r0, #16
24011e88:	f7f8 fcf2 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
24011e8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
24011e8e:	89aa      	ldrh	r2, [r5, #12]
24011e90:	2149      	movs	r1, #73	; 0x49
24011e92:	3010      	adds	r0, #16
24011e94:	f7f8 fcaa 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
24011e98:	6820      	ldr	r0, [r4, #0]
24011e9a:	89ea      	ldrh	r2, [r5, #14]
24011e9c:	f240 4149 	movw	r1, #1097	; 0x449
24011ea0:	3010      	adds	r0, #16
24011ea2:	f7f8 fca3 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
24011ea6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
24011ea8:	2200      	movs	r2, #0
24011eaa:	21b0      	movs	r1, #176	; 0xb0
24011eac:	3010      	adds	r0, #16
24011eae:	f7f8 fc5b 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
24011eb2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
24011eb4:	223c      	movs	r2, #60	; 0x3c
24011eb6:	21b5      	movs	r1, #181	; 0xb5
24011eb8:	3010      	adds	r0, #16
24011eba:	f7f8 fc55 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
24011ebe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
24011ec0:	2229      	movs	r2, #41	; 0x29
24011ec2:	21b6      	movs	r1, #182	; 0xb6
24011ec4:	3010      	adds	r0, #16
24011ec6:	f7f8 fc4f 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
24011eca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
24011ecc:	224c      	movs	r2, #76	; 0x4c
24011ece:	21b7      	movs	r1, #183	; 0xb7
24011ed0:	3010      	adds	r0, #16
24011ed2:	f7f8 fc49 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
24011ed6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
24011ed8:	2200      	movs	r2, #0
24011eda:	21b1      	movs	r1, #177	; 0xb1
24011edc:	3010      	adds	r0, #16
24011ede:	f7f8 fc43 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
24011ee2:	6820      	ldr	r0, [r4, #0]
24011ee4:	2200      	movs	r2, #0
24011ee6:	f241 01b1 	movw	r1, #4273	; 0x10b1
24011eea:	3010      	adds	r0, #16
24011eec:	f7f8 fc3c 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
24011ef0:	6820      	ldr	r0, [r4, #0]
24011ef2:	3014      	adds	r0, #20
24011ef4:	f7ff f9fa 	bl	240112ec <style_init_reset>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24011ef8:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24011efa:	6826      	ldr	r6, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24011efc:	f7fc ff86 	bl	2400ee0c <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24011f00:	2801      	cmp	r0, #1
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24011f02:	f04f 0000 	mov.w	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24011f06:	f106 0614 	add.w	r6, r6, #20
24011f0a:	f200 87bb 	bhi.w	24012e84 <lv_theme_material_init+0x1b6c>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24011f0e:	f7fc ff71 	bl	2400edf4 <lv_disp_get_dpi>
24011f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24011f16:	0080      	lsls	r0, r0, #2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24011f18:	28ef      	cmp	r0, #239	; 0xef
24011f1a:	f300 87a6 	bgt.w	24012e6a <lv_theme_material_init+0x1b52>
24011f1e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24011f20:	2114      	movs	r1, #20
24011f22:	4630      	mov	r0, r6
24011f24:	f7f8 fc20 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
24011f28:	6820      	ldr	r0, [r4, #0]
24011f2a:	3018      	adds	r0, #24
24011f2c:	f7ff f9de 	bl	240112ec <style_init_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
24011f30:	2000      	movs	r0, #0
24011f32:	f7fc ff6b 	bl	2400ee0c <lv_disp_get_size_category>
24011f36:	2801      	cmp	r0, #1
24011f38:	f04f 0000 	mov.w	r0, #0
24011f3c:	f200 87bc 	bhi.w	24012eb8 <lv_theme_material_init+0x1ba0>
24011f40:	f7fc ff58 	bl	2400edf4 <lv_disp_get_dpi>
24011f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24011f48:	0040      	lsls	r0, r0, #1
24011f4a:	28ef      	cmp	r0, #239	; 0xef
24011f4c:	f300 87a7 	bgt.w	24012e9e <lv_theme_material_init+0x1b86>
24011f50:	2201      	movs	r2, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
24011f52:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24011f54:	2112      	movs	r1, #18
24011f56:	9201      	str	r2, [sp, #4]
24011f58:	3018      	adds	r0, #24
24011f5a:	f7f8 fc05 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
24011f5e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24011f60:	9a01      	ldr	r2, [sp, #4]
24011f62:	2113      	movs	r1, #19
24011f64:	3018      	adds	r0, #24
24011f66:	f7f8 fbff 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
24011f6a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24011f6c:	9a01      	ldr	r2, [sp, #4]
24011f6e:	2110      	movs	r1, #16
24011f70:	3018      	adds	r0, #24
24011f72:	f7f8 fbf9 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
24011f76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24011f78:	9a01      	ldr	r2, [sp, #4]
24011f7a:	2111      	movs	r1, #17
24011f7c:	3018      	adds	r0, #24
24011f7e:	f7f8 fbf3 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
24011f82:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24011f84:	9a01      	ldr	r2, [sp, #4]
24011f86:	2114      	movs	r1, #20
24011f88:	3018      	adds	r0, #24
24011f8a:	f7f8 fbed 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->bar_bg);
24011f8e:	6820      	ldr	r0, [r4, #0]
24011f90:	301c      	adds	r0, #28
24011f92:	f7ff f9ab 	bl	240112ec <style_init_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24011f96:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24011f98:	f647 72ff 	movw	r2, #32767	; 0x7fff
24011f9c:	2101      	movs	r1, #1
24011f9e:	301c      	adds	r0, #28
24011fa0:	f7f8 fbe2 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
24011fa4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24011fa6:	22ff      	movs	r2, #255	; 0xff
24011fa8:	212c      	movs	r1, #44	; 0x2c
24011faa:	301c      	adds	r0, #28
24011fac:	f7f8 fc60 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
24011fb0:	6a2b      	ldr	r3, [r5, #32]
24011fb2:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24011fb4:	2129      	movs	r1, #41	; 0x29
24011fb6:	079f      	lsls	r7, r3, #30
24011fb8:	f106 061c 	add.w	r6, r6, #28
24011fbc:	bf4c      	ite	mi
24011fbe:	48c4      	ldrmi	r0, [pc, #784]	; (240122d0 <lv_theme_material_init+0xfb8>)
24011fc0:	48c4      	ldrpl	r0, [pc, #784]	; (240122d4 <lv_theme_material_init+0xfbc>)
24011fc2:	f7ff f99d 	bl	24011300 <lv_color_hex>
24011fc6:	4602      	mov	r2, r0
24011fc8:	4630      	mov	r0, r6
24011fca:	4ec3      	ldr	r6, [pc, #780]	; (240122d8 <lv_theme_material_init+0xfc0>)
24011fcc:	f7f8 fc0e 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
24011fd0:	6a2b      	ldr	r3, [r5, #32]
24011fd2:	6820      	ldr	r0, [r4, #0]
24011fd4:	f013 0f02 	tst.w	r3, #2
24011fd8:	f100 071c 	add.w	r7, r0, #28
24011fdc:	f000 8779 	beq.w	24012ed2 <lv_theme_material_init+0x1bba>
24011fe0:	48be      	ldr	r0, [pc, #760]	; (240122dc <lv_theme_material_init+0xfc4>)
24011fe2:	f7ff f98d 	bl	24011300 <lv_color_hex>
24011fe6:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
24011fe8:	4638      	mov	r0, r7
24011fea:	2179      	movs	r1, #121	; 0x79
24011fec:	f7f8 fbfe 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
24011ff0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
24011ff2:	89aa      	ldrh	r2, [r5, #12]
24011ff4:	2149      	movs	r1, #73	; 0x49
24011ff6:	301c      	adds	r0, #28
24011ff8:	f7f8 fbf8 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
24011ffc:	6820      	ldr	r0, [r4, #0]
24011ffe:	89ea      	ldrh	r2, [r5, #14]
24012000:	f240 4149 	movw	r1, #1097	; 0x449
24012004:	301c      	adds	r0, #28
24012006:	f7f8 fbf1 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
2401200a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
2401200c:	2200      	movs	r2, #0
2401200e:	214c      	movs	r1, #76	; 0x4c
24012010:	301c      	adds	r0, #28
24012012:	f7f8 fc2d 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
24012016:	6820      	ldr	r0, [r4, #0]
24012018:	227f      	movs	r2, #127	; 0x7f
2401201a:	f44f 7113 	mov.w	r1, #588	; 0x24c
2401201e:	301c      	adds	r0, #28
24012020:	f7f8 fc26 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24012024:	6a28      	ldr	r0, [r5, #32]
24012026:	6824      	ldr	r4, [r4, #0]
24012028:	f010 0720 	ands.w	r7, r0, #32
2401202c:	f104 041c 	add.w	r4, r4, #28
24012030:	f040 8752 	bne.w	24012ed8 <lv_theme_material_init+0x1bc0>
24012034:	4638      	mov	r0, r7
24012036:	f7fc fedd 	bl	2400edf4 <lv_disp_get_dpi>
2401203a:	2877      	cmp	r0, #119	; 0x77
2401203c:	f340 874f 	ble.w	24012ede <lv_theme_material_init+0x1bc6>
24012040:	4638      	mov	r0, r7
24012042:	f7fc fed7 	bl	2400edf4 <lv_disp_get_dpi>
24012046:	2350      	movs	r3, #80	; 0x50
24012048:	f100 0228 	add.w	r2, r0, #40	; 0x28
2401204c:	fb92 f2f3 	sdiv	r2, r2, r3
24012050:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
24012052:	4620      	mov	r0, r4
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
24012054:	4ca2      	ldr	r4, [pc, #648]	; (240122e0 <lv_theme_material_init+0xfc8>)
24012056:	2140      	movs	r1, #64	; 0x40
24012058:	f7f8 fb86 	bl	2400a768 <_lv_style_set_int>
2401205c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
2401205e:	2200      	movs	r2, #0
24012060:	21b0      	movs	r1, #176	; 0xb0
24012062:	301c      	adds	r0, #28
24012064:	f7f8 fb80 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
24012068:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
2401206a:	224c      	movs	r2, #76	; 0x4c
2401206c:	21b7      	movs	r1, #183	; 0xb7
2401206e:	301c      	adds	r0, #28
24012070:	f7f8 fb7a 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->bar_indic);
24012074:	6820      	ldr	r0, [r4, #0]
24012076:	3020      	adds	r0, #32
24012078:	f7ff f938 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
2401207c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
2401207e:	22ff      	movs	r2, #255	; 0xff
24012080:	212c      	movs	r1, #44	; 0x2c
24012082:	3020      	adds	r0, #32
24012084:	f7f8 fbf4 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24012088:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
2401208a:	f647 72ff 	movw	r2, #32767	; 0x7fff
2401208e:	2101      	movs	r1, #1
24012090:	3020      	adds	r0, #32
24012092:	f7f8 fb69 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
24012096:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24012098:	89aa      	ldrh	r2, [r5, #12]
2401209a:	2129      	movs	r1, #41	; 0x29
2401209c:	3020      	adds	r0, #32
2401209e:	f7f8 fba5 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
240120a2:	6820      	ldr	r0, [r4, #0]
240120a4:	f100 0720 	add.w	r7, r0, #32
240120a8:	f640 0088 	movw	r0, #2184	; 0x888
240120ac:	f7fe ffb9 	bl	24011022 <lv_color_hex3>
240120b0:	f242 0129 	movw	r1, #8233	; 0x2029
240120b4:	4602      	mov	r2, r0
240120b6:	4638      	mov	r0, r7
240120b8:	f7f8 fb98 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
240120bc:	6820      	ldr	r0, [r4, #0]
240120be:	6a2b      	ldr	r3, [r5, #32]
240120c0:	f100 0720 	add.w	r7, r0, #32
240120c4:	0798      	lsls	r0, r3, #30
240120c6:	f140 870d 	bpl.w	24012ee4 <lv_theme_material_init+0x1bcc>
240120ca:	4886      	ldr	r0, [pc, #536]	; (240122e4 <lv_theme_material_init+0xfcc>)
240120cc:	f7ff f918 	bl	24011300 <lv_color_hex>
240120d0:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
240120d2:	2179      	movs	r1, #121	; 0x79
240120d4:	4638      	mov	r0, r7
240120d6:	f7f8 fb89 	bl	2400a7ec <_lv_style_set_color>
    style_init_reset(&styles->slider_knob);
240120da:	6820      	ldr	r0, [r4, #0]
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
240120dc:	4d82      	ldr	r5, [pc, #520]	; (240122e8 <lv_theme_material_init+0xfd0>)
    style_init_reset(&styles->slider_knob);
240120de:	3030      	adds	r0, #48	; 0x30
240120e0:	f7ff f904 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
240120e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
240120e6:	22ff      	movs	r2, #255	; 0xff
240120e8:	212c      	movs	r1, #44	; 0x2c
240120ea:	3030      	adds	r0, #48	; 0x30
240120ec:	f7f8 fbc0 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
240120f0:	6a2b      	ldr	r3, [r5, #32]
240120f2:	6820      	ldr	r0, [r4, #0]
240120f4:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
240120f6:	f04f 0129 	mov.w	r1, #41	; 0x29
240120fa:	f100 0030 	add.w	r0, r0, #48	; 0x30
240120fe:	bf4c      	ite	mi
24012100:	89aa      	ldrhmi	r2, [r5, #12]
24012102:	8832      	ldrhpl	r2, [r6, #0]
24012104:	f7f8 fb72 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
24012108:	6a2b      	ldr	r3, [r5, #32]
2401210a:	6820      	ldr	r0, [r4, #0]
2401210c:	079a      	lsls	r2, r3, #30
2401210e:	f100 0730 	add.w	r7, r0, #48	; 0x30
24012112:	f140 86ea 	bpl.w	24012eea <lv_theme_material_init+0x1bd2>
24012116:	4871      	ldr	r0, [pc, #452]	; (240122dc <lv_theme_material_init+0xfc4>)
24012118:	f7ff f8f2 	bl	24011300 <lv_color_hex>
2401211c:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
2401211e:	4638      	mov	r0, r7
24012120:	2179      	movs	r1, #121	; 0x79
24012122:	f7f8 fb63 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24012126:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012128:	f647 72ff 	movw	r2, #32767	; 0x7fff
2401212c:	2101      	movs	r1, #1
2401212e:	3030      	adds	r0, #48	; 0x30
24012130:	f7f8 fb1a 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012134:	2000      	movs	r0, #0
24012136:	6827      	ldr	r7, [r4, #0]
24012138:	f7fc fe5c 	bl	2400edf4 <lv_disp_get_dpi>
2401213c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
24012140:	3730      	adds	r7, #48	; 0x30
24012142:	28ef      	cmp	r0, #239	; 0xef
24012144:	f340 86d4 	ble.w	24012ef0 <lv_theme_material_init+0x1bd8>
24012148:	2000      	movs	r0, #0
2401214a:	f7fc fe53 	bl	2400edf4 <lv_disp_get_dpi>
2401214e:	2307      	movs	r3, #7
24012150:	2250      	movs	r2, #80	; 0x50
24012152:	fb00 2203 	mla	r2, r0, r3, r2
24012156:	23a0      	movs	r3, #160	; 0xa0
24012158:	fb92 f2f3 	sdiv	r2, r2, r3
2401215c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401215e:	4638      	mov	r0, r7
24012160:	2112      	movs	r1, #18
24012162:	f7f8 fb01 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012166:	2000      	movs	r0, #0
24012168:	6827      	ldr	r7, [r4, #0]
2401216a:	f7fc fe43 	bl	2400edf4 <lv_disp_get_dpi>
2401216e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
24012172:	3730      	adds	r7, #48	; 0x30
24012174:	28ef      	cmp	r0, #239	; 0xef
24012176:	f340 86be 	ble.w	24012ef6 <lv_theme_material_init+0x1bde>
2401217a:	2000      	movs	r0, #0
2401217c:	f7fc fe3a 	bl	2400edf4 <lv_disp_get_dpi>
24012180:	2307      	movs	r3, #7
24012182:	2250      	movs	r2, #80	; 0x50
24012184:	fb00 2203 	mla	r2, r0, r3, r2
24012188:	23a0      	movs	r3, #160	; 0xa0
2401218a:	fb92 f2f3 	sdiv	r2, r2, r3
2401218e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24012190:	4638      	mov	r0, r7
24012192:	2113      	movs	r1, #19
24012194:	f7f8 fae8 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012198:	2000      	movs	r0, #0
2401219a:	6827      	ldr	r7, [r4, #0]
2401219c:	f7fc fe2a 	bl	2400edf4 <lv_disp_get_dpi>
240121a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
240121a4:	3730      	adds	r7, #48	; 0x30
240121a6:	28ef      	cmp	r0, #239	; 0xef
240121a8:	f340 86a8 	ble.w	24012efc <lv_theme_material_init+0x1be4>
240121ac:	2000      	movs	r0, #0
240121ae:	f7fc fe21 	bl	2400edf4 <lv_disp_get_dpi>
240121b2:	2307      	movs	r3, #7
240121b4:	2250      	movs	r2, #80	; 0x50
240121b6:	fb00 2203 	mla	r2, r0, r3, r2
240121ba:	23a0      	movs	r3, #160	; 0xa0
240121bc:	fb92 f2f3 	sdiv	r2, r2, r3
240121c0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240121c2:	4638      	mov	r0, r7
240121c4:	2110      	movs	r1, #16
240121c6:	f7f8 facf 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
240121ca:	2000      	movs	r0, #0
240121cc:	6827      	ldr	r7, [r4, #0]
240121ce:	f7fc fe11 	bl	2400edf4 <lv_disp_get_dpi>
240121d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
240121d6:	3730      	adds	r7, #48	; 0x30
240121d8:	28ef      	cmp	r0, #239	; 0xef
240121da:	f340 8692 	ble.w	24012f02 <lv_theme_material_init+0x1bea>
240121de:	2000      	movs	r0, #0
240121e0:	f7fc fe08 	bl	2400edf4 <lv_disp_get_dpi>
240121e4:	2307      	movs	r3, #7
240121e6:	2250      	movs	r2, #80	; 0x50
240121e8:	fb00 2203 	mla	r2, r0, r3, r2
240121ec:	23a0      	movs	r3, #160	; 0xa0
240121ee:	fb92 f2f3 	sdiv	r2, r2, r3
240121f2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240121f4:	2111      	movs	r1, #17
240121f6:	4638      	mov	r0, r7
240121f8:	f7f8 fab6 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->slider_bg);
240121fc:	6820      	ldr	r0, [r4, #0]
240121fe:	3034      	adds	r0, #52	; 0x34
24012200:	f7ff f874 	bl	240112ec <style_init_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012204:	2000      	movs	r0, #0
24012206:	6827      	ldr	r7, [r4, #0]
24012208:	f7fc fdf4 	bl	2400edf4 <lv_disp_get_dpi>
2401220c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012210:	3734      	adds	r7, #52	; 0x34
24012212:	0040      	lsls	r0, r0, #1
24012214:	28ef      	cmp	r0, #239	; 0xef
24012216:	f340 8677 	ble.w	24012f08 <lv_theme_material_init+0x1bf0>
2401221a:	2000      	movs	r0, #0
2401221c:	f7fc fdea 	bl	2400edf4 <lv_disp_get_dpi>
24012220:	230a      	movs	r3, #10
24012222:	2250      	movs	r2, #80	; 0x50
24012224:	fb00 2203 	mla	r2, r0, r3, r2
24012228:	23a0      	movs	r3, #160	; 0xa0
2401222a:	fb92 f2f3 	sdiv	r2, r2, r3
2401222e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24012230:	4638      	mov	r0, r7
24012232:	2117      	movs	r1, #23
24012234:	f7f8 fa98 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012238:	2000      	movs	r0, #0
2401223a:	6827      	ldr	r7, [r4, #0]
2401223c:	f7fc fdda 	bl	2400edf4 <lv_disp_get_dpi>
24012240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012244:	3734      	adds	r7, #52	; 0x34
24012246:	0040      	lsls	r0, r0, #1
24012248:	28ef      	cmp	r0, #239	; 0xef
2401224a:	f340 8660 	ble.w	24012f0e <lv_theme_material_init+0x1bf6>
2401224e:	2000      	movs	r0, #0
24012250:	f7fc fdd0 	bl	2400edf4 <lv_disp_get_dpi>
24012254:	230a      	movs	r3, #10
24012256:	2250      	movs	r2, #80	; 0x50
24012258:	fb00 2203 	mla	r2, r0, r3, r2
2401225c:	23a0      	movs	r3, #160	; 0xa0
2401225e:	fb92 f2f3 	sdiv	r2, r2, r3
24012262:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24012264:	4638      	mov	r0, r7
24012266:	2118      	movs	r1, #24
24012268:	f7f8 fa7e 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
2401226c:	2000      	movs	r0, #0
2401226e:	6827      	ldr	r7, [r4, #0]
24012270:	f7fc fdc0 	bl	2400edf4 <lv_disp_get_dpi>
24012274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012278:	3734      	adds	r7, #52	; 0x34
2401227a:	0040      	lsls	r0, r0, #1
2401227c:	28ef      	cmp	r0, #239	; 0xef
2401227e:	f340 8649 	ble.w	24012f14 <lv_theme_material_init+0x1bfc>
24012282:	2000      	movs	r0, #0
24012284:	f7fc fdb6 	bl	2400edf4 <lv_disp_get_dpi>
24012288:	230a      	movs	r3, #10
2401228a:	2250      	movs	r2, #80	; 0x50
2401228c:	fb00 2203 	mla	r2, r0, r3, r2
24012290:	23a0      	movs	r3, #160	; 0xa0
24012292:	fb92 f2f3 	sdiv	r2, r2, r3
24012296:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
24012298:	4638      	mov	r0, r7
2401229a:	2115      	movs	r1, #21
2401229c:	f7f8 fa64 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
240122a0:	2000      	movs	r0, #0
240122a2:	6827      	ldr	r7, [r4, #0]
240122a4:	f7fc fda6 	bl	2400edf4 <lv_disp_get_dpi>
240122a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
240122ac:	3734      	adds	r7, #52	; 0x34
240122ae:	0040      	lsls	r0, r0, #1
240122b0:	28ef      	cmp	r0, #239	; 0xef
240122b2:	f340 8632 	ble.w	24012f1a <lv_theme_material_init+0x1c02>
240122b6:	2000      	movs	r0, #0
240122b8:	f7fc fd9c 	bl	2400edf4 <lv_disp_get_dpi>
240122bc:	230a      	movs	r3, #10
240122be:	2250      	movs	r2, #80	; 0x50
240122c0:	fb00 2203 	mla	r2, r0, r3, r2
240122c4:	23a0      	movs	r3, #160	; 0xa0
240122c6:	fb92 f2f3 	sdiv	r2, r2, r3
240122ca:	b212      	sxth	r2, r2
240122cc:	e00e      	b.n	240122ec <lv_theme_material_init+0xfd4>
240122ce:	bf00      	nop
240122d0:	00d4d7d9 	.word	0x00d4d7d9
240122d4:	0045494d 	.word	0x0045494d
240122d8:	9001acc4 	.word	0x9001acc4
240122dc:	0031404f 	.word	0x0031404f
240122e0:	24035cbc 	.word	0x24035cbc
240122e4:	0041404f 	.word	0x0041404f
240122e8:	24035cc0 	.word	0x24035cc0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
240122ec:	2116      	movs	r1, #22
240122ee:	4638      	mov	r0, r7
240122f0:	f7f8 fa3a 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->sw_knob);
240122f4:	6820      	ldr	r0, [r4, #0]
240122f6:	303c      	adds	r0, #60	; 0x3c
240122f8:	f7fe fff8 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
240122fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
240122fe:	22ff      	movs	r2, #255	; 0xff
24012300:	212c      	movs	r1, #44	; 0x2c
24012302:	303c      	adds	r0, #60	; 0x3c
24012304:	f7f8 fab4 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
24012308:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2401230a:	8832      	ldrh	r2, [r6, #0]
2401230c:	2129      	movs	r1, #41	; 0x29
2401230e:	303c      	adds	r0, #60	; 0x3c
24012310:	f7f8 fa6c 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24012314:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012316:	f647 72ff 	movw	r2, #32767	; 0x7fff
2401231a:	2101      	movs	r1, #1
2401231c:	303c      	adds	r0, #60	; 0x3c
2401231e:	f7f8 fa23 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
24012322:	2000      	movs	r0, #0
24012324:	6827      	ldr	r7, [r4, #0]
24012326:	f7fc fd65 	bl	2400edf4 <lv_disp_get_dpi>
2401232a:	283b      	cmp	r0, #59	; 0x3b
2401232c:	f107 073c 	add.w	r7, r7, #60	; 0x3c
24012330:	f340 85f6 	ble.w	24012f20 <lv_theme_material_init+0x1c08>
24012334:	2000      	movs	r0, #0
24012336:	f7fc fd5d 	bl	2400edf4 <lv_disp_get_dpi>
2401233a:	f06f 0327 	mvn.w	r3, #39	; 0x27
2401233e:	f100 0214 	add.w	r2, r0, #20
24012342:	fb92 f2f3 	sdiv	r2, r2, r3
24012346:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24012348:	4638      	mov	r0, r7
2401234a:	2110      	movs	r1, #16
2401234c:	f7f8 fa0c 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
24012350:	2000      	movs	r0, #0
24012352:	6827      	ldr	r7, [r4, #0]
24012354:	f7fc fd4e 	bl	2400edf4 <lv_disp_get_dpi>
24012358:	283b      	cmp	r0, #59	; 0x3b
2401235a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
2401235e:	f340 85e3 	ble.w	24012f28 <lv_theme_material_init+0x1c10>
24012362:	2000      	movs	r0, #0
24012364:	f7fc fd46 	bl	2400edf4 <lv_disp_get_dpi>
24012368:	f06f 0327 	mvn.w	r3, #39	; 0x27
2401236c:	f100 0214 	add.w	r2, r0, #20
24012370:	fb92 f2f3 	sdiv	r2, r2, r3
24012374:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24012376:	4638      	mov	r0, r7
24012378:	2111      	movs	r1, #17
2401237a:	f7f8 f9f5 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
2401237e:	2000      	movs	r0, #0
24012380:	6827      	ldr	r7, [r4, #0]
24012382:	f7fc fd37 	bl	2400edf4 <lv_disp_get_dpi>
24012386:	283b      	cmp	r0, #59	; 0x3b
24012388:	f107 073c 	add.w	r7, r7, #60	; 0x3c
2401238c:	f340 85d0 	ble.w	24012f30 <lv_theme_material_init+0x1c18>
24012390:	2000      	movs	r0, #0
24012392:	f7fc fd2f 	bl	2400edf4 <lv_disp_get_dpi>
24012396:	f06f 0327 	mvn.w	r3, #39	; 0x27
2401239a:	f100 0214 	add.w	r2, r0, #20
2401239e:	fb92 f2f3 	sdiv	r2, r2, r3
240123a2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240123a4:	4638      	mov	r0, r7
240123a6:	2112      	movs	r1, #18
240123a8:	f7f8 f9de 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
240123ac:	2000      	movs	r0, #0
240123ae:	6827      	ldr	r7, [r4, #0]
240123b0:	f7fc fd20 	bl	2400edf4 <lv_disp_get_dpi>
240123b4:	283b      	cmp	r0, #59	; 0x3b
240123b6:	f107 073c 	add.w	r7, r7, #60	; 0x3c
240123ba:	f340 85bd 	ble.w	24012f38 <lv_theme_material_init+0x1c20>
240123be:	2000      	movs	r0, #0
240123c0:	f7fc fd18 	bl	2400edf4 <lv_disp_get_dpi>
240123c4:	f06f 0327 	mvn.w	r3, #39	; 0x27
240123c8:	f100 0214 	add.w	r2, r0, #20
240123cc:	fb92 f2f3 	sdiv	r2, r2, r3
240123d0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240123d2:	2113      	movs	r1, #19
240123d4:	4638      	mov	r0, r7
240123d6:	f7f8 f9c7 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->cb_bg);
240123da:	6820      	ldr	r0, [r4, #0]
240123dc:	3024      	adds	r0, #36	; 0x24
240123de:	f7fe ff85 	bl	240112ec <style_init_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
240123e2:	2000      	movs	r0, #0
240123e4:	6827      	ldr	r7, [r4, #0]
240123e6:	f7fc fd05 	bl	2400edf4 <lv_disp_get_dpi>
240123ea:	283b      	cmp	r0, #59	; 0x3b
240123ec:	f107 0724 	add.w	r7, r7, #36	; 0x24
240123f0:	f340 85a6 	ble.w	24012f40 <lv_theme_material_init+0x1c28>
240123f4:	2000      	movs	r0, #0
240123f6:	f7fc fcfd 	bl	2400edf4 <lv_disp_get_dpi>
240123fa:	2328      	movs	r3, #40	; 0x28
240123fc:	f100 0214 	add.w	r2, r0, #20
24012400:	fb92 f2f3 	sdiv	r2, r2, r3
24012404:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012406:	4638      	mov	r0, r7
24012408:	2101      	movs	r1, #1
2401240a:	f7f8 f9ad 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
2401240e:	2000      	movs	r0, #0
24012410:	6827      	ldr	r7, [r4, #0]
24012412:	f7fc fcef 	bl	2400edf4 <lv_disp_get_dpi>
24012416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
2401241a:	3724      	adds	r7, #36	; 0x24
2401241c:	0040      	lsls	r0, r0, #1
2401241e:	28ef      	cmp	r0, #239	; 0xef
24012420:	f340 8591 	ble.w	24012f46 <lv_theme_material_init+0x1c2e>
24012424:	2000      	movs	r0, #0
24012426:	f7fc fce5 	bl	2400edf4 <lv_disp_get_dpi>
2401242a:	230a      	movs	r3, #10
2401242c:	2250      	movs	r2, #80	; 0x50
2401242e:	fb00 2203 	mla	r2, r0, r3, r2
24012432:	23a0      	movs	r3, #160	; 0xa0
24012434:	fb92 f2f3 	sdiv	r2, r2, r3
24012438:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
2401243a:	4638      	mov	r0, r7
2401243c:	2114      	movs	r1, #20
2401243e:	f7f8 f993 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
24012442:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
24012444:	89aa      	ldrh	r2, [r5, #12]
24012446:	2149      	movs	r1, #73	; 0x49
24012448:	3024      	adds	r0, #36	; 0x24
2401244a:	f7f8 f9cf 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
2401244e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
24012450:	2200      	movs	r2, #0
24012452:	214c      	movs	r1, #76	; 0x4c
24012454:	3024      	adds	r0, #36	; 0x24
24012456:	f7f8 fa0b 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
2401245a:	6820      	ldr	r0, [r4, #0]
2401245c:	227f      	movs	r2, #127	; 0x7f
2401245e:	f44f 7113 	mov.w	r1, #588	; 0x24c
24012462:	3024      	adds	r0, #36	; 0x24
24012464:	f7f8 fa04 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24012468:	6a28      	ldr	r0, [r5, #32]
2401246a:	6827      	ldr	r7, [r4, #0]
2401246c:	f010 0820 	ands.w	r8, r0, #32
24012470:	f107 0724 	add.w	r7, r7, #36	; 0x24
24012474:	f040 856a 	bne.w	24012f4c <lv_theme_material_init+0x1c34>
24012478:	4640      	mov	r0, r8
2401247a:	f7fc fcbb 	bl	2400edf4 <lv_disp_get_dpi>
2401247e:	2877      	cmp	r0, #119	; 0x77
24012480:	f340 8567 	ble.w	24012f52 <lv_theme_material_init+0x1c3a>
24012484:	4640      	mov	r0, r8
24012486:	f7fc fcb5 	bl	2400edf4 <lv_disp_get_dpi>
2401248a:	2350      	movs	r3, #80	; 0x50
2401248c:	f100 0228 	add.w	r2, r0, #40	; 0x28
24012490:	fb92 f2f3 	sdiv	r2, r2, r3
24012494:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
24012496:	4638      	mov	r0, r7
24012498:	2140      	movs	r1, #64	; 0x40
2401249a:	f7f8 f965 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
2401249e:	2000      	movs	r0, #0
240124a0:	6827      	ldr	r7, [r4, #0]
240124a2:	f7fc fca7 	bl	2400edf4 <lv_disp_get_dpi>
240124a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
240124aa:	3724      	adds	r7, #36	; 0x24
240124ac:	0040      	lsls	r0, r0, #1
240124ae:	28ef      	cmp	r0, #239	; 0xef
240124b0:	f340 8552 	ble.w	24012f58 <lv_theme_material_init+0x1c40>
240124b4:	2000      	movs	r0, #0
240124b6:	f7fc fc9d 	bl	2400edf4 <lv_disp_get_dpi>
240124ba:	230a      	movs	r3, #10
240124bc:	2250      	movs	r2, #80	; 0x50
240124be:	fb00 2203 	mla	r2, r0, r3, r2
240124c2:	23a0      	movs	r3, #160	; 0xa0
240124c4:	fb92 f2f3 	sdiv	r2, r2, r3
240124c8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
240124ca:	4638      	mov	r0, r7
240124cc:	2141      	movs	r1, #65	; 0x41
240124ce:	f7f8 f94b 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
240124d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
240124d4:	2200      	movs	r2, #0
240124d6:	21b0      	movs	r1, #176	; 0xb0
240124d8:	3024      	adds	r0, #36	; 0x24
240124da:	f7f8 f945 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
240124de:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
240124e0:	224c      	movs	r2, #76	; 0x4c
240124e2:	21b7      	movs	r1, #183	; 0xb7
240124e4:	3024      	adds	r0, #36	; 0x24
240124e6:	f7f8 f93f 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->cb_bullet);
240124ea:	6820      	ldr	r0, [r4, #0]
240124ec:	3028      	adds	r0, #40	; 0x28
240124ee:	f7fe fefd 	bl	240112ec <style_init_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
240124f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
240124f4:	2200      	movs	r2, #0
240124f6:	f44f 7113 	mov.w	r1, #588	; 0x24c
240124fa:	3028      	adds	r0, #40	; 0x28
240124fc:	f7f8 f9b8 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
24012500:	2000      	movs	r0, #0
24012502:	6827      	ldr	r7, [r4, #0]
24012504:	f7fc fc76 	bl	2400edf4 <lv_disp_get_dpi>
24012508:	283b      	cmp	r0, #59	; 0x3b
2401250a:	f107 0728 	add.w	r7, r7, #40	; 0x28
2401250e:	f340 8526 	ble.w	24012f5e <lv_theme_material_init+0x1c46>
24012512:	2000      	movs	r0, #0
24012514:	f7fc fc6e 	bl	2400edf4 <lv_disp_get_dpi>
24012518:	2328      	movs	r3, #40	; 0x28
2401251a:	f100 0214 	add.w	r2, r0, #20
2401251e:	fb92 f2f3 	sdiv	r2, r2, r3
24012522:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012524:	2101      	movs	r1, #1
24012526:	4638      	mov	r0, r7
24012528:	f7f8 f91e 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
2401252c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
2401252e:	4ad7      	ldr	r2, [pc, #860]	; (2401288c <lv_theme_material_init+0x1574>)
24012530:	f44f 71b7 	mov.w	r1, #366	; 0x16e
24012534:	3028      	adds	r0, #40	; 0x28
24012536:	f7f8 f9df 	bl	2400a8f8 <_lv_style_set_ptr>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
2401253a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
2401253c:	8832      	ldrh	r2, [r6, #0]
2401253e:	f240 1169 	movw	r1, #361	; 0x169
24012542:	3028      	adds	r0, #40	; 0x28
24012544:	f7f8 f952 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
24012548:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
2401254a:	2200      	movs	r2, #0
2401254c:	216c      	movs	r1, #108	; 0x6c
2401254e:	3028      	adds	r0, #40	; 0x28
24012550:	f7f8 f98e 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
24012554:	6820      	ldr	r0, [r4, #0]
24012556:	22ff      	movs	r2, #255	; 0xff
24012558:	f44f 71b6 	mov.w	r1, #364	; 0x16c
2401255c:	3028      	adds	r0, #40	; 0x28
2401255e:	f7f8 f987 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
24012562:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
24012564:	226c      	movs	r2, #108	; 0x6c
24012566:	21b4      	movs	r1, #180	; 0xb4
24012568:	3028      	adds	r0, #40	; 0x28
2401256a:	f7f8 f8fd 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
2401256e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24012570:	692a      	ldr	r2, [r5, #16]
24012572:	f248 118e 	movw	r1, #33166	; 0x818e
24012576:	3028      	adds	r0, #40	; 0x28
24012578:	f7f8 f9be 	bl	2400a8f8 <_lv_style_set_ptr>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
2401257c:	2000      	movs	r0, #0
2401257e:	6826      	ldr	r6, [r4, #0]
24012580:	f7fc fc38 	bl	2400edf4 <lv_disp_get_dpi>
24012584:	eb00 0040 	add.w	r0, r0, r0, lsl #1
24012588:	3628      	adds	r6, #40	; 0x28
2401258a:	28ef      	cmp	r0, #239	; 0xef
2401258c:	f340 84ea 	ble.w	24012f64 <lv_theme_material_init+0x1c4c>
24012590:	2000      	movs	r0, #0
24012592:	f7fc fc2f 	bl	2400edf4 <lv_disp_get_dpi>
24012596:	2303      	movs	r3, #3
24012598:	2250      	movs	r2, #80	; 0x50
2401259a:	fb00 2203 	mla	r2, r0, r3, r2
2401259e:	23a0      	movs	r3, #160	; 0xa0
240125a0:	fb92 f2f3 	sdiv	r2, r2, r3
240125a4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240125a6:	4630      	mov	r0, r6
240125a8:	2112      	movs	r1, #18
240125aa:	f7f8 f8dd 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
240125ae:	2000      	movs	r0, #0
240125b0:	6826      	ldr	r6, [r4, #0]
240125b2:	f7fc fc1f 	bl	2400edf4 <lv_disp_get_dpi>
240125b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
240125ba:	3628      	adds	r6, #40	; 0x28
240125bc:	28ef      	cmp	r0, #239	; 0xef
240125be:	f340 84d4 	ble.w	24012f6a <lv_theme_material_init+0x1c52>
240125c2:	2000      	movs	r0, #0
240125c4:	f7fc fc16 	bl	2400edf4 <lv_disp_get_dpi>
240125c8:	2303      	movs	r3, #3
240125ca:	2250      	movs	r2, #80	; 0x50
240125cc:	fb00 2203 	mla	r2, r0, r3, r2
240125d0:	23a0      	movs	r3, #160	; 0xa0
240125d2:	fb92 f2f3 	sdiv	r2, r2, r3
240125d6:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240125d8:	4630      	mov	r0, r6
240125da:	2113      	movs	r1, #19
240125dc:	f7f8 f8c4 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
240125e0:	2000      	movs	r0, #0
240125e2:	6826      	ldr	r6, [r4, #0]
240125e4:	f7fc fc06 	bl	2400edf4 <lv_disp_get_dpi>
240125e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
240125ec:	3628      	adds	r6, #40	; 0x28
240125ee:	28ef      	cmp	r0, #239	; 0xef
240125f0:	f340 84be 	ble.w	24012f70 <lv_theme_material_init+0x1c58>
240125f4:	2000      	movs	r0, #0
240125f6:	f7fc fbfd 	bl	2400edf4 <lv_disp_get_dpi>
240125fa:	2303      	movs	r3, #3
240125fc:	2250      	movs	r2, #80	; 0x50
240125fe:	fb00 2203 	mla	r2, r0, r3, r2
24012602:	23a0      	movs	r3, #160	; 0xa0
24012604:	fb92 f2f3 	sdiv	r2, r2, r3
24012608:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401260a:	4630      	mov	r0, r6
2401260c:	2110      	movs	r1, #16
2401260e:	f7f8 f8ab 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
24012612:	2000      	movs	r0, #0
24012614:	6826      	ldr	r6, [r4, #0]
24012616:	f7fc fbed 	bl	2400edf4 <lv_disp_get_dpi>
2401261a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
2401261e:	3628      	adds	r6, #40	; 0x28
24012620:	28ef      	cmp	r0, #239	; 0xef
24012622:	f340 84a8 	ble.w	24012f76 <lv_theme_material_init+0x1c5e>
24012626:	2000      	movs	r0, #0
24012628:	f7fc fbe4 	bl	2400edf4 <lv_disp_get_dpi>
2401262c:	2303      	movs	r3, #3
2401262e:	2250      	movs	r2, #80	; 0x50
24012630:	fb00 2203 	mla	r2, r0, r3, r2
24012634:	23a0      	movs	r3, #160	; 0xa0
24012636:	fb92 f2f3 	sdiv	r2, r2, r3
2401263a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401263c:	2111      	movs	r1, #17
2401263e:	4630      	mov	r0, r6
24012640:	f7f8 f892 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->sb);
24012644:	6820      	ldr	r0, [r4, #0]
24012646:	302c      	adds	r0, #44	; 0x2c
24012648:	f7fe fe50 	bl	240112ec <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
2401264c:	212c      	movs	r1, #44	; 0x2c
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
2401264e:	6820      	ldr	r0, [r4, #0]
24012650:	22ff      	movs	r2, #255	; 0xff
24012652:	4408      	add	r0, r1
24012654:	f7f8 f90c 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
24012658:	6a2b      	ldr	r3, [r5, #32]
2401265a:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2401265c:	2129      	movs	r1, #41	; 0x29
2401265e:	079b      	lsls	r3, r3, #30
24012660:	f106 062c 	add.w	r6, r6, #44	; 0x2c
24012664:	bf4c      	ite	mi
24012666:	488a      	ldrmi	r0, [pc, #552]	; (24012890 <lv_theme_material_init+0x1578>)
24012668:	488a      	ldrpl	r0, [pc, #552]	; (24012894 <lv_theme_material_init+0x157c>)
2401266a:	f7fe fe49 	bl	24011300 <lv_color_hex>
2401266e:	4602      	mov	r2, r0
24012670:	4630      	mov	r0, r6
24012672:	f7f8 f8bb 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24012676:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012678:	f647 72ff 	movw	r2, #32767	; 0x7fff
2401267c:	2101      	movs	r1, #1
2401267e:	302c      	adds	r0, #44	; 0x2c
24012680:	f7f8 f872 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
24012684:	2000      	movs	r0, #0
24012686:	6826      	ldr	r6, [r4, #0]
24012688:	f7fc fbb4 	bl	2400edf4 <lv_disp_get_dpi>
2401268c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
24012690:	362c      	adds	r6, #44	; 0x2c
24012692:	28ef      	cmp	r0, #239	; 0xef
24012694:	f340 8472 	ble.w	24012f7c <lv_theme_material_init+0x1c64>
24012698:	2000      	movs	r0, #0
2401269a:	f7fc fbab 	bl	2400edf4 <lv_disp_get_dpi>
2401269e:	2307      	movs	r3, #7
240126a0:	2250      	movs	r2, #80	; 0x50
240126a2:	fb00 2203 	mla	r2, r0, r3, r2
240126a6:	23a0      	movs	r3, #160	; 0xa0
240126a8:	fb92 f2f3 	sdiv	r2, r2, r3
240126ac:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
240126ae:	4630      	mov	r0, r6
240126b0:	2103      	movs	r1, #3
240126b2:	f7f8 f859 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
240126b6:	2000      	movs	r0, #0
240126b8:	6826      	ldr	r6, [r4, #0]
240126ba:	f7fc fb9b 	bl	2400edf4 <lv_disp_get_dpi>
240126be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
240126c2:	362c      	adds	r6, #44	; 0x2c
240126c4:	28ef      	cmp	r0, #239	; 0xef
240126c6:	f340 845c 	ble.w	24012f82 <lv_theme_material_init+0x1c6a>
240126ca:	2000      	movs	r0, #0
240126cc:	f7fc fb92 	bl	2400edf4 <lv_disp_get_dpi>
240126d0:	2307      	movs	r3, #7
240126d2:	2250      	movs	r2, #80	; 0x50
240126d4:	fb00 2203 	mla	r2, r0, r3, r2
240126d8:	23a0      	movs	r3, #160	; 0xa0
240126da:	fb92 f2f3 	sdiv	r2, r2, r3
240126de:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240126e0:	4630      	mov	r0, r6
240126e2:	2113      	movs	r1, #19
240126e4:	f7f8 f840 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
240126e8:	2000      	movs	r0, #0
240126ea:	6826      	ldr	r6, [r4, #0]
240126ec:	f7fc fb82 	bl	2400edf4 <lv_disp_get_dpi>
240126f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
240126f4:	362c      	adds	r6, #44	; 0x2c
240126f6:	28ef      	cmp	r0, #239	; 0xef
240126f8:	f340 8446 	ble.w	24012f88 <lv_theme_material_init+0x1c70>
240126fc:	2000      	movs	r0, #0
240126fe:	f7fc fb79 	bl	2400edf4 <lv_disp_get_dpi>
24012702:	2307      	movs	r3, #7
24012704:	2250      	movs	r2, #80	; 0x50
24012706:	fb00 2203 	mla	r2, r0, r3, r2
2401270a:	23a0      	movs	r3, #160	; 0xa0
2401270c:	fb92 f2f3 	sdiv	r2, r2, r3
24012710:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24012712:	2111      	movs	r1, #17
24012714:	4630      	mov	r0, r6
24012716:	f7f8 f827 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->ta_cursor);
2401271a:	6820      	ldr	r0, [r4, #0]
2401271c:	3054      	adds	r0, #84	; 0x54
2401271e:	f7fe fde5 	bl	240112ec <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
24012722:	6a2b      	ldr	r3, [r5, #32]
24012724:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
24012726:	2139      	movs	r1, #57	; 0x39
24012728:	079f      	lsls	r7, r3, #30
2401272a:	f106 0654 	add.w	r6, r6, #84	; 0x54
2401272e:	bf4c      	ite	mi
24012730:	4859      	ldrmi	r0, [pc, #356]	; (24012898 <lv_theme_material_init+0x1580>)
24012732:	485a      	ldrpl	r0, [pc, #360]	; (2401289c <lv_theme_material_init+0x1584>)
24012734:	f7fe fde4 	bl	24011300 <lv_color_hex>
24012738:	4602      	mov	r2, r0
2401273a:	4630      	mov	r0, r6
2401273c:	f7f8 f856 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
24012740:	2000      	movs	r0, #0
24012742:	6826      	ldr	r6, [r4, #0]
24012744:	f7fc fb56 	bl	2400edf4 <lv_disp_get_dpi>
24012748:	2877      	cmp	r0, #119	; 0x77
2401274a:	f106 0654 	add.w	r6, r6, #84	; 0x54
2401274e:	f340 841e 	ble.w	24012f8e <lv_theme_material_init+0x1c76>
24012752:	2000      	movs	r0, #0
24012754:	f7fc fb4e 	bl	2400edf4 <lv_disp_get_dpi>
24012758:	2350      	movs	r3, #80	; 0x50
2401275a:	f100 0228 	add.w	r2, r0, #40	; 0x28
2401275e:	fb92 f2f3 	sdiv	r2, r2, r3
24012762:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
24012764:	2130      	movs	r1, #48	; 0x30
24012766:	4630      	mov	r0, r6
24012768:	f7f7 fffe 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
2401276c:	2000      	movs	r0, #0
2401276e:	6824      	ldr	r4, [r4, #0]
24012770:	f7fc fb40 	bl	2400edf4 <lv_disp_get_dpi>
24012774:	28ef      	cmp	r0, #239	; 0xef
24012776:	f104 0454 	add.w	r4, r4, #84	; 0x54
2401277a:	f340 840b 	ble.w	24012f94 <lv_theme_material_init+0x1c7c>
2401277e:	2000      	movs	r0, #0
24012780:	f7fc fb38 	bl	2400edf4 <lv_disp_get_dpi>
24012784:	23a0      	movs	r3, #160	; 0xa0
24012786:	f100 0250 	add.w	r2, r0, #80	; 0x50
2401278a:	fb92 f2f3 	sdiv	r2, r2, r3
2401278e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24012790:	4620      	mov	r0, r4
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
24012792:	4c43      	ldr	r4, [pc, #268]	; (240128a0 <lv_theme_material_init+0x1588>)
24012794:	2112      	movs	r1, #18
24012796:	f7f7 ffe7 	bl	2400a768 <_lv_style_set_int>
2401279a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
2401279c:	2204      	movs	r2, #4
2401279e:	2131      	movs	r1, #49	; 0x31
240127a0:	3054      	adds	r0, #84	; 0x54
240127a2:	f7f7 ffe1 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->ta_placeholder);
240127a6:	6820      	ldr	r0, [r4, #0]
240127a8:	3058      	adds	r0, #88	; 0x58
240127aa:	f7fe fd9f 	bl	240112ec <style_init_reset>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
240127ae:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
240127b0:	6826      	ldr	r6, [r4, #0]
240127b2:	079d      	lsls	r5, r3, #30
240127b4:	f106 0658 	add.w	r6, r6, #88	; 0x58
240127b8:	f140 83ef 	bpl.w	24012f9a <lv_theme_material_init+0x1c82>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
240127bc:	f640 20aa 	movw	r0, #2730	; 0xaaa
240127c0:	f7fe fc2f 	bl	24011022 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240127c4:	4602      	mov	r2, r0
240127c6:	f248 0189 	movw	r1, #32905	; 0x8089
240127ca:	4630      	mov	r0, r6
240127cc:	4d35      	ldr	r5, [pc, #212]	; (240128a4 <lv_theme_material_init+0x158c>)
240127ce:	f7f8 f80d 	bl	2400a7ec <_lv_style_set_color>
    style_init_reset(&styles->spinbox_cursor);
240127d2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
240127d4:	2764      	movs	r7, #100	; 0x64
    style_init_reset(&styles->spinbox_cursor);
240127d6:	3038      	adds	r0, #56	; 0x38
240127d8:	f7fe fd88 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
240127dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
240127de:	22ff      	movs	r2, #255	; 0xff
240127e0:	212c      	movs	r1, #44	; 0x2c
240127e2:	3038      	adds	r0, #56	; 0x38
240127e4:	f7f8 f844 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
240127e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
240127ea:	89aa      	ldrh	r2, [r5, #12]
240127ec:	2129      	movs	r1, #41	; 0x29
240127ee:	3038      	adds	r0, #56	; 0x38
240127f0:	f7f7 fffc 	bl	2400a7ec <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240127f4:	4b2c      	ldr	r3, [pc, #176]	; (240128a8 <lv_theme_material_init+0x1590>)
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
240127f6:	6820      	ldr	r0, [r4, #0]
240127f8:	f248 0189 	movw	r1, #32905	; 0x8089
240127fc:	881a      	ldrh	r2, [r3, #0]
240127fe:	3038      	adds	r0, #56	; 0x38
24012800:	f7f7 fff4 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
24012804:	2000      	movs	r0, #0
24012806:	6826      	ldr	r6, [r4, #0]
24012808:	f7fc faf4 	bl	2400edf4 <lv_disp_get_dpi>
2401280c:	4378      	muls	r0, r7
2401280e:	3638      	adds	r6, #56	; 0x38
24012810:	28ef      	cmp	r0, #239	; 0xef
24012812:	f340 83c6 	ble.w	24012fa2 <lv_theme_material_init+0x1c8a>
24012816:	2000      	movs	r0, #0
24012818:	f7fc faec 	bl	2400edf4 <lv_disp_get_dpi>
2401281c:	2250      	movs	r2, #80	; 0x50
2401281e:	23a0      	movs	r3, #160	; 0xa0
24012820:	fb00 2207 	mla	r2, r0, r7, r2
24012824:	fb92 f2f3 	sdiv	r2, r2, r3
24012828:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401282a:	4630      	mov	r0, r6
2401282c:	2110      	movs	r1, #16
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
2401282e:	2764      	movs	r7, #100	; 0x64
24012830:	f7f7 ff9a 	bl	2400a768 <_lv_style_set_int>
24012834:	2000      	movs	r0, #0
24012836:	6826      	ldr	r6, [r4, #0]
24012838:	f7fc fadc 	bl	2400edf4 <lv_disp_get_dpi>
2401283c:	4378      	muls	r0, r7
2401283e:	3638      	adds	r6, #56	; 0x38
24012840:	28ef      	cmp	r0, #239	; 0xef
24012842:	f340 83b0 	ble.w	24012fa6 <lv_theme_material_init+0x1c8e>
24012846:	2000      	movs	r0, #0
24012848:	f7fc fad4 	bl	2400edf4 <lv_disp_get_dpi>
2401284c:	2250      	movs	r2, #80	; 0x50
2401284e:	23a0      	movs	r3, #160	; 0xa0
24012850:	fb00 2207 	mla	r2, r0, r7, r2
24012854:	fb92 f2f3 	sdiv	r2, r2, r3
24012858:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401285a:	2111      	movs	r1, #17
2401285c:	4630      	mov	r0, r6
2401285e:	f7f7 ff83 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->table_cell);
24012862:	6820      	ldr	r0, [r4, #0]
24012864:	3040      	adds	r0, #64	; 0x40
24012866:	f7fe fd41 	bl	240112ec <style_init_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
2401286a:	6a2b      	ldr	r3, [r5, #32]
2401286c:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
2401286e:	2139      	movs	r1, #57	; 0x39
24012870:	0798      	lsls	r0, r3, #30
24012872:	f106 0640 	add.w	r6, r6, #64	; 0x40
24012876:	bf4c      	ite	mi
24012878:	480c      	ldrmi	r0, [pc, #48]	; (240128ac <lv_theme_material_init+0x1594>)
2401287a:	480d      	ldrpl	r0, [pc, #52]	; (240128b0 <lv_theme_material_init+0x1598>)
2401287c:	f7fe fd40 	bl	24011300 <lv_color_hex>
24012880:	4602      	mov	r2, r0
24012882:	4630      	mov	r0, r6
24012884:	f7f7 ffb2 	bl	2400a7ec <_lv_style_set_color>
24012888:	e014      	b.n	240128b4 <lv_theme_material_init+0x159c>
2401288a:	bf00      	nop
2401288c:	900ff290 	.word	0x900ff290
24012890:	00cccfd1 	.word	0x00cccfd1
24012894:	00777f85 	.word	0x00777f85
24012898:	0031404f 	.word	0x0031404f
2401289c:	00a5a8ad 	.word	0x00a5a8ad
240128a0:	24035cbc 	.word	0x24035cbc
240128a4:	24035cc0 	.word	0x24035cc0
240128a8:	9001acc4 	.word	0x9001acc4
240128ac:	00d6dde3 	.word	0x00d6dde3
240128b0:	00808a97 	.word	0x00808a97
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
240128b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
240128b6:	2201      	movs	r2, #1
240128b8:	2130      	movs	r1, #48	; 0x30
240128ba:	3040      	adds	r0, #64	; 0x40
240128bc:	f7f7 ff54 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
240128c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
240128c2:	2203      	movs	r2, #3
240128c4:	2131      	movs	r1, #49	; 0x31
240128c6:	3040      	adds	r0, #64	; 0x40
240128c8:	f7f7 ff4e 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
240128cc:	2000      	movs	r0, #0
240128ce:	6826      	ldr	r6, [r4, #0]
240128d0:	f7fc fa9c 	bl	2400ee0c <lv_disp_get_size_category>
240128d4:	2801      	cmp	r0, #1
240128d6:	f04f 0000 	mov.w	r0, #0
240128da:	f106 0640 	add.w	r6, r6, #64	; 0x40
240128de:	f200 8370 	bhi.w	24012fc2 <lv_theme_material_init+0x1caa>
240128e2:	f7fc fa87 	bl	2400edf4 <lv_disp_get_dpi>
240128e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
240128ea:	28ef      	cmp	r0, #239	; 0xef
240128ec:	f300 835d 	bgt.w	24012faa <lv_theme_material_init+0x1c92>
240128f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240128f2:	4630      	mov	r0, r6
240128f4:	2112      	movs	r1, #18
240128f6:	f7f7 ff37 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
240128fa:	2000      	movs	r0, #0
240128fc:	6826      	ldr	r6, [r4, #0]
240128fe:	f7fc fa85 	bl	2400ee0c <lv_disp_get_size_category>
24012902:	2801      	cmp	r0, #1
24012904:	f04f 0000 	mov.w	r0, #0
24012908:	f106 0640 	add.w	r6, r6, #64	; 0x40
2401290c:	f200 8372 	bhi.w	24012ff4 <lv_theme_material_init+0x1cdc>
24012910:	f7fc fa70 	bl	2400edf4 <lv_disp_get_dpi>
24012914:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012918:	28ef      	cmp	r0, #239	; 0xef
2401291a:	f300 835f 	bgt.w	24012fdc <lv_theme_material_init+0x1cc4>
2401291e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24012920:	4630      	mov	r0, r6
24012922:	2113      	movs	r1, #19
24012924:	f7f7 ff20 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
24012928:	2000      	movs	r0, #0
2401292a:	6826      	ldr	r6, [r4, #0]
2401292c:	f7fc fa6e 	bl	2400ee0c <lv_disp_get_size_category>
24012930:	2801      	cmp	r0, #1
24012932:	f04f 0000 	mov.w	r0, #0
24012936:	f106 0640 	add.w	r6, r6, #64	; 0x40
2401293a:	f200 8374 	bhi.w	24013026 <lv_theme_material_init+0x1d0e>
2401293e:	f7fc fa59 	bl	2400edf4 <lv_disp_get_dpi>
24012942:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012946:	28ef      	cmp	r0, #239	; 0xef
24012948:	f300 8361 	bgt.w	2401300e <lv_theme_material_init+0x1cf6>
2401294c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401294e:	4630      	mov	r0, r6
24012950:	2110      	movs	r1, #16
24012952:	f7f7 ff09 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
24012956:	2000      	movs	r0, #0
24012958:	6826      	ldr	r6, [r4, #0]
2401295a:	f7fc fa57 	bl	2400ee0c <lv_disp_get_size_category>
2401295e:	2801      	cmp	r0, #1
24012960:	f04f 0000 	mov.w	r0, #0
24012964:	f106 0640 	add.w	r6, r6, #64	; 0x40
24012968:	f200 8376 	bhi.w	24013058 <lv_theme_material_init+0x1d40>
2401296c:	f7fc fa42 	bl	2400edf4 <lv_disp_get_dpi>
24012970:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012974:	28ef      	cmp	r0, #239	; 0xef
24012976:	f300 8363 	bgt.w	24013040 <lv_theme_material_init+0x1d28>
2401297a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401297c:	2111      	movs	r1, #17
2401297e:	4630      	mov	r0, r6
24012980:	f7f7 fef2 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->tabview_btns_bg);
24012984:	6820      	ldr	r0, [r4, #0]
24012986:	3048      	adds	r0, #72	; 0x48
24012988:	f7fe fcb0 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
2401298c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
2401298e:	22ff      	movs	r2, #255	; 0xff
24012990:	212c      	movs	r1, #44	; 0x2c
24012992:	3048      	adds	r0, #72	; 0x48
24012994:	f7f7 ff6c 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
24012998:	6a2b      	ldr	r3, [r5, #32]
2401299a:	6826      	ldr	r6, [r4, #0]
2401299c:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
2401299e:	f04f 0129 	mov.w	r1, #41	; 0x29
240129a2:	f106 0648 	add.w	r6, r6, #72	; 0x48
240129a6:	bf4c      	ite	mi
240129a8:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
240129ac:	48d9      	ldrpl	r0, [pc, #868]	; (24012d14 <lv_theme_material_init+0x19fc>)
240129ae:	f7fe fca7 	bl	24011300 <lv_color_hex>
240129b2:	4602      	mov	r2, r0
240129b4:	4630      	mov	r0, r6
240129b6:	f7f7 ff19 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
240129ba:	6a2b      	ldr	r3, [r5, #32]
240129bc:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
240129be:	f248 0189 	movw	r1, #32905	; 0x8089
240129c2:	079a      	lsls	r2, r3, #30
240129c4:	f106 0648 	add.w	r6, r6, #72	; 0x48
240129c8:	bf4c      	ite	mi
240129ca:	48d3      	ldrmi	r0, [pc, #844]	; (24012d18 <lv_theme_material_init+0x1a00>)
240129cc:	48d3      	ldrpl	r0, [pc, #844]	; (24012d1c <lv_theme_material_init+0x1a04>)
240129ce:	f7fe fc97 	bl	24011300 <lv_color_hex>
240129d2:	4602      	mov	r2, r0
240129d4:	4630      	mov	r0, r6
240129d6:	f7f7 ff09 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
240129da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
240129dc:	f248 01a9 	movw	r1, #32937	; 0x80a9
240129e0:	f100 0648 	add.w	r6, r0, #72	; 0x48
240129e4:	48ce      	ldr	r0, [pc, #824]	; (24012d20 <lv_theme_material_init+0x1a08>)
240129e6:	f7fe fc8b 	bl	24011300 <lv_color_hex>
240129ea:	4602      	mov	r2, r0
240129ec:	4630      	mov	r0, r6
240129ee:	f7f7 fefd 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
240129f2:	2000      	movs	r0, #0
240129f4:	6826      	ldr	r6, [r4, #0]
240129f6:	f7fc f9fd 	bl	2400edf4 <lv_disp_get_dpi>
240129fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
240129fe:	3648      	adds	r6, #72	; 0x48
24012a00:	28ef      	cmp	r0, #239	; 0xef
24012a02:	f340 8336 	ble.w	24013072 <lv_theme_material_init+0x1d5a>
24012a06:	2000      	movs	r0, #0
24012a08:	f7fc f9f4 	bl	2400edf4 <lv_disp_get_dpi>
24012a0c:	2307      	movs	r3, #7
24012a0e:	2250      	movs	r2, #80	; 0x50
24012a10:	fb00 2203 	mla	r2, r0, r3, r2
24012a14:	23a0      	movs	r3, #160	; 0xa0
24012a16:	fb92 f2f3 	sdiv	r2, r2, r3
24012a1a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24012a1c:	4630      	mov	r0, r6
24012a1e:	2110      	movs	r1, #16
24012a20:	f7f7 fea2 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
24012a24:	2000      	movs	r0, #0
24012a26:	6826      	ldr	r6, [r4, #0]
24012a28:	f7fc f9e4 	bl	2400edf4 <lv_disp_get_dpi>
24012a2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
24012a30:	3648      	adds	r6, #72	; 0x48
24012a32:	28ef      	cmp	r0, #239	; 0xef
24012a34:	f340 831f 	ble.w	24013076 <lv_theme_material_init+0x1d5e>
24012a38:	2000      	movs	r0, #0
24012a3a:	f7fc f9db 	bl	2400edf4 <lv_disp_get_dpi>
24012a3e:	2307      	movs	r3, #7
24012a40:	2250      	movs	r2, #80	; 0x50
24012a42:	fb00 2203 	mla	r2, r0, r3, r2
24012a46:	23a0      	movs	r3, #160	; 0xa0
24012a48:	fb92 f2f3 	sdiv	r2, r2, r3
24012a4c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24012a4e:	4630      	mov	r0, r6
24012a50:	2112      	movs	r1, #18
24012a52:	f7f7 fe89 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
24012a56:	2000      	movs	r0, #0
24012a58:	6826      	ldr	r6, [r4, #0]
24012a5a:	f7fc f9cb 	bl	2400edf4 <lv_disp_get_dpi>
24012a5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
24012a62:	3648      	adds	r6, #72	; 0x48
24012a64:	28ef      	cmp	r0, #239	; 0xef
24012a66:	f340 8308 	ble.w	2401307a <lv_theme_material_init+0x1d62>
24012a6a:	2000      	movs	r0, #0
24012a6c:	f7fc f9c2 	bl	2400edf4 <lv_disp_get_dpi>
24012a70:	2307      	movs	r3, #7
24012a72:	2250      	movs	r2, #80	; 0x50
24012a74:	fb00 2203 	mla	r2, r0, r3, r2
24012a78:	23a0      	movs	r3, #160	; 0xa0
24012a7a:	fb92 f2f3 	sdiv	r2, r2, r3
24012a7e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24012a80:	2113      	movs	r1, #19
24012a82:	4630      	mov	r0, r6
24012a84:	f7f7 fe70 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->tabview_btns);
24012a88:	6820      	ldr	r0, [r4, #0]
24012a8a:	3044      	adds	r0, #68	; 0x44
24012a8c:	f7fe fc2e 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
24012a90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24012a92:	227f      	movs	r2, #127	; 0x7f
24012a94:	f241 012c 	movw	r1, #4140	; 0x102c
24012a98:	3044      	adds	r0, #68	; 0x44
24012a9a:	f7f7 fee9 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
24012a9e:	6820      	ldr	r0, [r4, #0]
24012aa0:	f100 0644 	add.w	r6, r0, #68	; 0x44
24012aa4:	f640 0088 	movw	r0, #2184	; 0x888
24012aa8:	f7fe fabb 	bl	24011022 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24012aac:	f241 0129 	movw	r1, #4137	; 0x1029
24012ab0:	4602      	mov	r2, r0
24012ab2:	4630      	mov	r0, r6
24012ab4:	f7f7 fe9a 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
24012ab8:	6a2b      	ldr	r3, [r5, #32]
24012aba:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24012abc:	f248 1189 	movw	r1, #33161	; 0x8189
24012ac0:	079b      	lsls	r3, r3, #30
24012ac2:	f106 0644 	add.w	r6, r6, #68	; 0x44
24012ac6:	bf4c      	ite	mi
24012ac8:	4893      	ldrmi	r0, [pc, #588]	; (24012d18 <lv_theme_material_init+0x1a00>)
24012aca:	4894      	ldrpl	r0, [pc, #592]	; (24012d1c <lv_theme_material_init+0x1a04>)
24012acc:	f7fe fc18 	bl	24011300 <lv_color_hex>
24012ad0:	4602      	mov	r2, r0
24012ad2:	4630      	mov	r0, r6
24012ad4:	f7f7 fe8a 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
24012ad8:	2000      	movs	r0, #0
24012ada:	6826      	ldr	r6, [r4, #0]
24012adc:	f7fc f98a 	bl	2400edf4 <lv_disp_get_dpi>
24012ae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012ae4:	3644      	adds	r6, #68	; 0x44
24012ae6:	0080      	lsls	r0, r0, #2
24012ae8:	28ef      	cmp	r0, #239	; 0xef
24012aea:	f340 82c8 	ble.w	2401307e <lv_theme_material_init+0x1d66>
24012aee:	2000      	movs	r0, #0
24012af0:	f7fc f980 	bl	2400edf4 <lv_disp_get_dpi>
24012af4:	2314      	movs	r3, #20
24012af6:	2250      	movs	r2, #80	; 0x50
24012af8:	fb00 2203 	mla	r2, r0, r3, r2
24012afc:	23a0      	movs	r3, #160	; 0xa0
24012afe:	fb92 f2f3 	sdiv	r2, r2, r3
24012b02:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24012b04:	4630      	mov	r0, r6
24012b06:	2110      	movs	r1, #16
24012b08:	f7f7 fe2e 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
24012b0c:	2000      	movs	r0, #0
24012b0e:	6826      	ldr	r6, [r4, #0]
24012b10:	f7fc f970 	bl	2400edf4 <lv_disp_get_dpi>
24012b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012b18:	3644      	adds	r6, #68	; 0x44
24012b1a:	0080      	lsls	r0, r0, #2
24012b1c:	28ef      	cmp	r0, #239	; 0xef
24012b1e:	f340 82b0 	ble.w	24013082 <lv_theme_material_init+0x1d6a>
24012b22:	2000      	movs	r0, #0
24012b24:	f7fc f966 	bl	2400edf4 <lv_disp_get_dpi>
24012b28:	2314      	movs	r3, #20
24012b2a:	2250      	movs	r2, #80	; 0x50
24012b2c:	fb00 2203 	mla	r2, r0, r3, r2
24012b30:	23a0      	movs	r3, #160	; 0xa0
24012b32:	fb92 f2f3 	sdiv	r2, r2, r3
24012b36:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24012b38:	4630      	mov	r0, r6
24012b3a:	2111      	movs	r1, #17
24012b3c:	f7f7 fe14 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
24012b40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
24012b42:	89aa      	ldrh	r2, [r5, #12]
24012b44:	f248 2189 	movw	r1, #33417	; 0x8289
24012b48:	3044      	adds	r0, #68	; 0x44
24012b4a:	f7f7 fe4f 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
24012b4e:	6820      	ldr	r0, [r4, #0]
24012b50:	89ea      	ldrh	r2, [r5, #14]
24012b52:	f248 4189 	movw	r1, #33929	; 0x8489
24012b56:	3044      	adds	r0, #68	; 0x44
24012b58:	f7f7 fe48 	bl	2400a7ec <_lv_style_set_color>
    style_init_reset(&styles->tabview_indic);
24012b5c:	6820      	ldr	r0, [r4, #0]
24012b5e:	304c      	adds	r0, #76	; 0x4c
24012b60:	f7fe fbc4 	bl	240112ec <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
24012b64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
24012b66:	22ff      	movs	r2, #255	; 0xff
24012b68:	212c      	movs	r1, #44	; 0x2c
24012b6a:	304c      	adds	r0, #76	; 0x4c
24012b6c:	f7f7 fe80 	bl	2400a870 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
24012b70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
24012b72:	89aa      	ldrh	r2, [r5, #12]
24012b74:	2129      	movs	r1, #41	; 0x29
24012b76:	304c      	adds	r0, #76	; 0x4c
24012b78:	f7f7 fe38 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
24012b7c:	6820      	ldr	r0, [r4, #0]
24012b7e:	89ea      	ldrh	r2, [r5, #14]
24012b80:	f240 4129 	movw	r1, #1065	; 0x429
24012b84:	304c      	adds	r0, #76	; 0x4c
24012b86:	f7f7 fe31 	bl	2400a7ec <_lv_style_set_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
24012b8a:	2000      	movs	r0, #0
24012b8c:	6826      	ldr	r6, [r4, #0]
24012b8e:	f7fc f931 	bl	2400edf4 <lv_disp_get_dpi>
24012b92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012b96:	364c      	adds	r6, #76	; 0x4c
24012b98:	28ef      	cmp	r0, #239	; 0xef
24012b9a:	f340 8274 	ble.w	24013086 <lv_theme_material_init+0x1d6e>
24012b9e:	2000      	movs	r0, #0
24012ba0:	f7fc f928 	bl	2400edf4 <lv_disp_get_dpi>
24012ba4:	2305      	movs	r3, #5
24012ba6:	2250      	movs	r2, #80	; 0x50
24012ba8:	fb00 2203 	mla	r2, r0, r3, r2
24012bac:	23a0      	movs	r3, #160	; 0xa0
24012bae:	fb92 f2f3 	sdiv	r2, r2, r3
24012bb2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
24012bb4:	4630      	mov	r0, r6
24012bb6:	2103      	movs	r1, #3
24012bb8:	f7f7 fdd6 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
24012bbc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
24012bbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
24012bc2:	2101      	movs	r1, #1
24012bc4:	304c      	adds	r0, #76	; 0x4c
24012bc6:	f7f7 fdcf 	bl	2400a768 <_lv_style_set_int>
    style_init_reset(&styles->tabview_page_scrl);
24012bca:	6820      	ldr	r0, [r4, #0]
24012bcc:	3050      	adds	r0, #80	; 0x50
24012bce:	f7fe fb8d 	bl	240112ec <style_init_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24012bd2:	2000      	movs	r0, #0
24012bd4:	6826      	ldr	r6, [r4, #0]
24012bd6:	f7fc f919 	bl	2400ee0c <lv_disp_get_size_category>
24012bda:	2801      	cmp	r0, #1
24012bdc:	f04f 0000 	mov.w	r0, #0
24012be0:	f106 0650 	add.w	r6, r6, #80	; 0x50
24012be4:	f200 825d 	bhi.w	240130a2 <lv_theme_material_init+0x1d8a>
24012be8:	f7fc f904 	bl	2400edf4 <lv_disp_get_dpi>
24012bec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012bf0:	28ef      	cmp	r0, #239	; 0xef
24012bf2:	f300 824a 	bgt.w	2401308a <lv_theme_material_init+0x1d72>
24012bf6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24012bf8:	4630      	mov	r0, r6
24012bfa:	2110      	movs	r1, #16
24012bfc:	f7f7 fdb4 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24012c00:	2000      	movs	r0, #0
24012c02:	6826      	ldr	r6, [r4, #0]
24012c04:	f7fc f902 	bl	2400ee0c <lv_disp_get_size_category>
24012c08:	2801      	cmp	r0, #1
24012c0a:	f04f 0000 	mov.w	r0, #0
24012c0e:	f106 0650 	add.w	r6, r6, #80	; 0x50
24012c12:	f200 825f 	bhi.w	240130d4 <lv_theme_material_init+0x1dbc>
24012c16:	f7fc f8ed 	bl	2400edf4 <lv_disp_get_dpi>
24012c1a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012c1e:	28ef      	cmp	r0, #239	; 0xef
24012c20:	f300 824c 	bgt.w	240130bc <lv_theme_material_init+0x1da4>
24012c24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24012c26:	4630      	mov	r0, r6
24012c28:	2111      	movs	r1, #17
24012c2a:	f7f7 fd9d 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24012c2e:	2000      	movs	r0, #0
24012c30:	6826      	ldr	r6, [r4, #0]
24012c32:	f7fc f8eb 	bl	2400ee0c <lv_disp_get_size_category>
24012c36:	2801      	cmp	r0, #1
24012c38:	f04f 0000 	mov.w	r0, #0
24012c3c:	f106 0650 	add.w	r6, r6, #80	; 0x50
24012c40:	f200 8261 	bhi.w	24013106 <lv_theme_material_init+0x1dee>
24012c44:	f7fc f8d6 	bl	2400edf4 <lv_disp_get_dpi>
24012c48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012c4c:	28ef      	cmp	r0, #239	; 0xef
24012c4e:	f300 824e 	bgt.w	240130ee <lv_theme_material_init+0x1dd6>
24012c52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24012c54:	4630      	mov	r0, r6
24012c56:	2112      	movs	r1, #18
24012c58:	f7f7 fd86 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24012c5c:	2000      	movs	r0, #0
24012c5e:	6826      	ldr	r6, [r4, #0]
24012c60:	f7fc f8d4 	bl	2400ee0c <lv_disp_get_size_category>
24012c64:	2801      	cmp	r0, #1
24012c66:	f04f 0000 	mov.w	r0, #0
24012c6a:	f106 0650 	add.w	r6, r6, #80	; 0x50
24012c6e:	f200 8263 	bhi.w	24013138 <lv_theme_material_init+0x1e20>
24012c72:	f7fc f8bf 	bl	2400edf4 <lv_disp_get_dpi>
24012c76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012c7a:	28ef      	cmp	r0, #239	; 0xef
24012c7c:	f300 8250 	bgt.w	24013120 <lv_theme_material_init+0x1e08>
24012c80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24012c82:	2113      	movs	r1, #19
24012c84:	4630      	mov	r0, r6
24012c86:	f7f7 fd6f 	bl	2400a768 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24012c8a:	2000      	movs	r0, #0
24012c8c:	6824      	ldr	r4, [r4, #0]
24012c8e:	f7fc f8bd 	bl	2400ee0c <lv_disp_get_size_category>
24012c92:	2801      	cmp	r0, #1
24012c94:	f04f 0000 	mov.w	r0, #0
24012c98:	f104 0450 	add.w	r4, r4, #80	; 0x50
24012c9c:	f200 8265 	bhi.w	2401316a <lv_theme_material_init+0x1e52>
24012ca0:	f7fc f8a8 	bl	2400edf4 <lv_disp_get_dpi>
24012ca4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012ca8:	28ef      	cmp	r0, #239	; 0xef
24012caa:	f300 8252 	bgt.w	24013152 <lv_theme_material_init+0x1e3a>
24012cae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24012cb0:	2114      	movs	r1, #20
24012cb2:	4620      	mov	r0, r4
24012cb4:	f7f7 fd58 	bl	2400a768 <_lv_style_set_int>
    theme.apply_cb = theme_apply;
24012cb8:	4b1a      	ldr	r3, [pc, #104]	; (24012d24 <lv_theme_material_init+0x1a0c>)
    theme.apply_xcb = NULL;
24012cba:	2000      	movs	r0, #0
    inited = true;
24012cbc:	2201      	movs	r2, #1
    theme.apply_cb = theme_apply;
24012cbe:	602b      	str	r3, [r5, #0]
    inited = true;
24012cc0:	4b19      	ldr	r3, [pc, #100]	; (24012d28 <lv_theme_material_init+0x1a10>)
    theme.apply_xcb = NULL;
24012cc2:	6068      	str	r0, [r5, #4]
    inited = true;
24012cc4:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
24012cc6:	f7f6 fa02 	bl	240090ce <lv_obj_report_style_mod>
}
24012cca:	4818      	ldr	r0, [pc, #96]	; (24012d2c <lv_theme_material_init+0x1a14>)
24012ccc:	b003      	add	sp, #12
24012cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
24012cd2:	2201      	movs	r2, #1
24012cd4:	f7fe bb9c 	b.w	24011410 <lv_theme_material_init+0xf8>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
24012cd8:	2201      	movs	r2, #1
24012cda:	f7fe bbe6 	b.w	240114aa <lv_theme_material_init+0x192>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
24012cde:	2000      	movs	r0, #0
24012ce0:	f7fc f888 	bl	2400edf4 <lv_disp_get_dpi>
24012ce4:	230f      	movs	r3, #15
24012ce6:	2650      	movs	r6, #80	; 0x50
24012ce8:	fb00 6603 	mla	r6, r0, r3, r6
24012cec:	23a0      	movs	r3, #160	; 0xa0
24012cee:	fb96 f6f3 	sdiv	r6, r6, r3
24012cf2:	b2b6      	uxth	r6, r6
24012cf4:	f7fe bc44 	b.w	24011580 <lv_theme_material_init+0x268>
24012cf8:	f7fc f87c 	bl	2400edf4 <lv_disp_get_dpi>
24012cfc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012d00:	0040      	lsls	r0, r0, #1
24012d02:	28ef      	cmp	r0, #239	; 0xef
24012d04:	f77e ac3b 	ble.w	2401157e <lv_theme_material_init+0x266>
24012d08:	2000      	movs	r0, #0
24012d0a:	f7fc f873 	bl	2400edf4 <lv_disp_get_dpi>
24012d0e:	231e      	movs	r3, #30
24012d10:	e7e9      	b.n	24012ce6 <lv_theme_material_init+0x19ce>
24012d12:	bf00      	nop
24012d14:	00586273 	.word	0x00586273
24012d18:	003b3e42 	.word	0x003b3e42
24012d1c:	00e7e9ec 	.word	0x00e7e9ec
24012d20:	00979a9f 	.word	0x00979a9f
24012d24:	24011059 	.word	0x24011059
24012d28:	24035cb8 	.word	0x24035cb8
24012d2c:	24035cc0 	.word	0x24035cc0
24012d30:	2001      	movs	r0, #1
24012d32:	f7fe bc33 	b.w	2401159c <lv_theme_material_init+0x284>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
24012d36:	2000      	movs	r0, #0
24012d38:	f7fc f85c 	bl	2400edf4 <lv_disp_get_dpi>
24012d3c:	230f      	movs	r3, #15
24012d3e:	2650      	movs	r6, #80	; 0x50
24012d40:	fb00 6603 	mla	r6, r0, r3, r6
24012d44:	23a0      	movs	r3, #160	; 0xa0
24012d46:	fb96 f6f3 	sdiv	r6, r6, r3
24012d4a:	b2b6      	uxth	r6, r6
24012d4c:	f7fe bc3f 	b.w	240115ce <lv_theme_material_init+0x2b6>
24012d50:	f7fc f850 	bl	2400edf4 <lv_disp_get_dpi>
24012d54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012d58:	0040      	lsls	r0, r0, #1
24012d5a:	28ef      	cmp	r0, #239	; 0xef
24012d5c:	f77e ac36 	ble.w	240115cc <lv_theme_material_init+0x2b4>
24012d60:	2000      	movs	r0, #0
24012d62:	f7fc f847 	bl	2400edf4 <lv_disp_get_dpi>
24012d66:	231e      	movs	r3, #30
24012d68:	e7e9      	b.n	24012d3e <lv_theme_material_init+0x1a26>
24012d6a:	2001      	movs	r0, #1
24012d6c:	f7fe bc3d 	b.w	240115ea <lv_theme_material_init+0x2d2>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
24012d70:	2000      	movs	r0, #0
24012d72:	f7fc f83f 	bl	2400edf4 <lv_disp_get_dpi>
24012d76:	230f      	movs	r3, #15
24012d78:	2650      	movs	r6, #80	; 0x50
24012d7a:	fb00 6603 	mla	r6, r0, r3, r6
24012d7e:	23a0      	movs	r3, #160	; 0xa0
24012d80:	fb96 f6f3 	sdiv	r6, r6, r3
24012d84:	b2b6      	uxth	r6, r6
24012d86:	f7fe bc60 	b.w	2401164a <lv_theme_material_init+0x332>
24012d8a:	f7fc f833 	bl	2400edf4 <lv_disp_get_dpi>
24012d8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012d92:	0040      	lsls	r0, r0, #1
24012d94:	28ef      	cmp	r0, #239	; 0xef
24012d96:	f77e ac57 	ble.w	24011648 <lv_theme_material_init+0x330>
24012d9a:	2000      	movs	r0, #0
24012d9c:	f7fc f82a 	bl	2400edf4 <lv_disp_get_dpi>
24012da0:	231e      	movs	r3, #30
24012da2:	e7e9      	b.n	24012d78 <lv_theme_material_init+0x1a60>
24012da4:	2001      	movs	r0, #1
24012da6:	f7fe bc5e 	b.w	24011666 <lv_theme_material_init+0x34e>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
24012daa:	2000      	movs	r0, #0
24012dac:	f7fc f822 	bl	2400edf4 <lv_disp_get_dpi>
24012db0:	230f      	movs	r3, #15
24012db2:	2650      	movs	r6, #80	; 0x50
24012db4:	fb00 6603 	mla	r6, r0, r3, r6
24012db8:	23a0      	movs	r3, #160	; 0xa0
24012dba:	fb96 f6f3 	sdiv	r6, r6, r3
24012dbe:	b2b6      	uxth	r6, r6
24012dc0:	f7fe bc6a 	b.w	24011698 <lv_theme_material_init+0x380>
24012dc4:	f7fc f816 	bl	2400edf4 <lv_disp_get_dpi>
24012dc8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012dcc:	0040      	lsls	r0, r0, #1
24012dce:	28ef      	cmp	r0, #239	; 0xef
24012dd0:	f77e ac61 	ble.w	24011696 <lv_theme_material_init+0x37e>
24012dd4:	2000      	movs	r0, #0
24012dd6:	f7fc f80d 	bl	2400edf4 <lv_disp_get_dpi>
24012dda:	231e      	movs	r3, #30
24012ddc:	e7e9      	b.n	24012db2 <lv_theme_material_init+0x1a9a>
24012dde:	2001      	movs	r0, #1
24012de0:	f7fe bc68 	b.w	240116b4 <lv_theme_material_init+0x39c>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
24012de4:	2000      	movs	r0, #0
24012de6:	f7fc f805 	bl	2400edf4 <lv_disp_get_dpi>
24012dea:	230f      	movs	r3, #15
24012dec:	2250      	movs	r2, #80	; 0x50
24012dee:	fb00 2203 	mla	r2, r0, r3, r2
24012df2:	23a0      	movs	r3, #160	; 0xa0
24012df4:	fb92 f2f3 	sdiv	r2, r2, r3
24012df8:	b212      	sxth	r2, r2
24012dfa:	f7fe bc74 	b.w	240116e6 <lv_theme_material_init+0x3ce>
24012dfe:	f7fb fff9 	bl	2400edf4 <lv_disp_get_dpi>
24012e02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012e06:	0040      	lsls	r0, r0, #1
24012e08:	28ef      	cmp	r0, #239	; 0xef
24012e0a:	f77e ac6b 	ble.w	240116e4 <lv_theme_material_init+0x3cc>
24012e0e:	2000      	movs	r0, #0
24012e10:	f7fb fff0 	bl	2400edf4 <lv_disp_get_dpi>
24012e14:	231e      	movs	r3, #30
24012e16:	e7e9      	b.n	24012dec <lv_theme_material_init+0x1ad4>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
24012e18:	48da      	ldr	r0, [pc, #872]	; (24013184 <lv_theme_material_init+0x1e6c>)
24012e1a:	f7fe fa71 	bl	24011300 <lv_color_hex>
24012e1e:	f7fe bd31 	b.w	24011884 <lv_theme_material_init+0x56c>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
24012e22:	48d9      	ldr	r0, [pc, #868]	; (24013188 <lv_theme_material_init+0x1e70>)
24012e24:	f7fe fa6c 	bl	24011300 <lv_color_hex>
24012e28:	224c      	movs	r2, #76	; 0x4c
24012e2a:	4601      	mov	r1, r0
24012e2c:	f7fe be2c 	b.w	24011a88 <lv_theme_material_init+0x770>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
24012e30:	48d6      	ldr	r0, [pc, #856]	; (2401318c <lv_theme_material_init+0x1e74>)
24012e32:	f7fe fa65 	bl	24011300 <lv_color_hex>
24012e36:	f7fe be7f 	b.w	24011b38 <lv_theme_material_init+0x820>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
24012e3a:	2201      	movs	r2, #1
24012e3c:	f7fe be94 	b.w	24011b68 <lv_theme_material_init+0x850>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
24012e40:	2201      	movs	r2, #1
24012e42:	f7fe bf89 	b.w	24011d58 <lv_theme_material_init+0xa40>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
24012e46:	2201      	movs	r2, #1
24012e48:	f7fe bfa0 	b.w	24011d8c <lv_theme_material_init+0xa74>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
24012e4c:	2201      	movs	r2, #1
24012e4e:	f7fe bfb6 	b.w	24011dbe <lv_theme_material_init+0xaa6>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
24012e52:	2201      	movs	r2, #1
24012e54:	f7fe bfcc 	b.w	24011df0 <lv_theme_material_init+0xad8>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
24012e58:	2201      	movs	r2, #1
24012e5a:	f7fe bfeb 	b.w	24011e34 <lv_theme_material_init+0xb1c>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24012e5e:	2200      	movs	r2, #0
24012e60:	f7ff b803 	b.w	24011e6a <lv_theme_material_init+0xb52>
24012e64:	2201      	movs	r2, #1
24012e66:	f7ff b800 	b.w	24011e6a <lv_theme_material_init+0xb52>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24012e6a:	2000      	movs	r0, #0
24012e6c:	f7fb ffc2 	bl	2400edf4 <lv_disp_get_dpi>
24012e70:	2314      	movs	r3, #20
24012e72:	2250      	movs	r2, #80	; 0x50
24012e74:	fb00 2203 	mla	r2, r0, r3, r2
24012e78:	23a0      	movs	r3, #160	; 0xa0
24012e7a:	fb92 f2f3 	sdiv	r2, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24012e7e:	b212      	sxth	r2, r2
24012e80:	f7ff b84e 	b.w	24011f20 <lv_theme_material_init+0xc08>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24012e84:	f7fb ffb6 	bl	2400edf4 <lv_disp_get_dpi>
24012e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012e8c:	00c0      	lsls	r0, r0, #3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
24012e8e:	28ef      	cmp	r0, #239	; 0xef
24012e90:	f77f a845 	ble.w	24011f1e <lv_theme_material_init+0xc06>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
24012e94:	2000      	movs	r0, #0
24012e96:	f7fb ffad 	bl	2400edf4 <lv_disp_get_dpi>
24012e9a:	2328      	movs	r3, #40	; 0x28
24012e9c:	e7e9      	b.n	24012e72 <lv_theme_material_init+0x1b5a>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
24012e9e:	2000      	movs	r0, #0
24012ea0:	f7fb ffa8 	bl	2400edf4 <lv_disp_get_dpi>
24012ea4:	230a      	movs	r3, #10
24012ea6:	2250      	movs	r2, #80	; 0x50
24012ea8:	fb00 2203 	mla	r2, r0, r3, r2
24012eac:	23a0      	movs	r3, #160	; 0xa0
24012eae:	fb92 f2f3 	sdiv	r2, r2, r3
24012eb2:	b212      	sxth	r2, r2
24012eb4:	f7ff b84d 	b.w	24011f52 <lv_theme_material_init+0xc3a>
24012eb8:	f7fb ff9c 	bl	2400edf4 <lv_disp_get_dpi>
24012ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24012ec0:	0080      	lsls	r0, r0, #2
24012ec2:	28ef      	cmp	r0, #239	; 0xef
24012ec4:	f77f a844 	ble.w	24011f50 <lv_theme_material_init+0xc38>
24012ec8:	2000      	movs	r0, #0
24012eca:	f7fb ff93 	bl	2400edf4 <lv_disp_get_dpi>
24012ece:	2314      	movs	r3, #20
24012ed0:	e7e9      	b.n	24012ea6 <lv_theme_material_init+0x1b8e>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
24012ed2:	8832      	ldrh	r2, [r6, #0]
24012ed4:	f7ff b888 	b.w	24011fe8 <lv_theme_material_init+0xcd0>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24012ed8:	2200      	movs	r2, #0
24012eda:	f7ff b8ba 	b.w	24012052 <lv_theme_material_init+0xd3a>
24012ede:	2201      	movs	r2, #1
24012ee0:	f7ff b8b7 	b.w	24012052 <lv_theme_material_init+0xd3a>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
24012ee4:	8832      	ldrh	r2, [r6, #0]
24012ee6:	f7ff b8f4 	b.w	240120d2 <lv_theme_material_init+0xdba>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
24012eea:	8832      	ldrh	r2, [r6, #0]
24012eec:	f7ff b917 	b.w	2401211e <lv_theme_material_init+0xe06>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012ef0:	2201      	movs	r2, #1
24012ef2:	f7ff b934 	b.w	2401215e <lv_theme_material_init+0xe46>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012ef6:	2201      	movs	r2, #1
24012ef8:	f7ff b94a 	b.w	24012190 <lv_theme_material_init+0xe78>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012efc:	2201      	movs	r2, #1
24012efe:	f7ff b960 	b.w	240121c2 <lv_theme_material_init+0xeaa>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
24012f02:	2201      	movs	r2, #1
24012f04:	f7ff b976 	b.w	240121f4 <lv_theme_material_init+0xedc>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f08:	2201      	movs	r2, #1
24012f0a:	f7ff b991 	b.w	24012230 <lv_theme_material_init+0xf18>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f0e:	2201      	movs	r2, #1
24012f10:	f7ff b9a8 	b.w	24012264 <lv_theme_material_init+0xf4c>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f14:	2201      	movs	r2, #1
24012f16:	f7ff b9bf 	b.w	24012298 <lv_theme_material_init+0xf80>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f1a:	2201      	movs	r2, #1
24012f1c:	f7ff b9e6 	b.w	240122ec <lv_theme_material_init+0xfd4>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
24012f20:	f04f 32ff 	mov.w	r2, #4294967295
24012f24:	f7ff ba10 	b.w	24012348 <lv_theme_material_init+0x1030>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
24012f28:	f04f 32ff 	mov.w	r2, #4294967295
24012f2c:	f7ff ba23 	b.w	24012376 <lv_theme_material_init+0x105e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
24012f30:	f04f 32ff 	mov.w	r2, #4294967295
24012f34:	f7ff ba36 	b.w	240123a4 <lv_theme_material_init+0x108c>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
24012f38:	f04f 32ff 	mov.w	r2, #4294967295
24012f3c:	f7ff ba49 	b.w	240123d2 <lv_theme_material_init+0x10ba>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
24012f40:	2201      	movs	r2, #1
24012f42:	f7ff ba60 	b.w	24012406 <lv_theme_material_init+0x10ee>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f46:	2201      	movs	r2, #1
24012f48:	f7ff ba77 	b.w	2401243a <lv_theme_material_init+0x1122>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
24012f4c:	2200      	movs	r2, #0
24012f4e:	f7ff baa2 	b.w	24012496 <lv_theme_material_init+0x117e>
24012f52:	2201      	movs	r2, #1
24012f54:	f7ff ba9f 	b.w	24012496 <lv_theme_material_init+0x117e>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
24012f58:	2201      	movs	r2, #1
24012f5a:	f7ff bab6 	b.w	240124ca <lv_theme_material_init+0x11b2>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
24012f5e:	2201      	movs	r2, #1
24012f60:	f7ff bae0 	b.w	24012524 <lv_theme_material_init+0x120c>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
24012f64:	2201      	movs	r2, #1
24012f66:	f7ff bb1e 	b.w	240125a6 <lv_theme_material_init+0x128e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
24012f6a:	2201      	movs	r2, #1
24012f6c:	f7ff bb34 	b.w	240125d8 <lv_theme_material_init+0x12c0>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
24012f70:	2201      	movs	r2, #1
24012f72:	f7ff bb4a 	b.w	2401260a <lv_theme_material_init+0x12f2>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
24012f76:	2201      	movs	r2, #1
24012f78:	f7ff bb60 	b.w	2401263c <lv_theme_material_init+0x1324>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
24012f7c:	2201      	movs	r2, #1
24012f7e:	f7ff bb96 	b.w	240126ae <lv_theme_material_init+0x1396>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
24012f82:	2201      	movs	r2, #1
24012f84:	f7ff bbac 	b.w	240126e0 <lv_theme_material_init+0x13c8>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
24012f88:	2201      	movs	r2, #1
24012f8a:	f7ff bbc2 	b.w	24012712 <lv_theme_material_init+0x13fa>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
24012f8e:	2201      	movs	r2, #1
24012f90:	f7ff bbe8 	b.w	24012764 <lv_theme_material_init+0x144c>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
24012f94:	2201      	movs	r2, #1
24012f96:	f7ff bbfb 	b.w	24012790 <lv_theme_material_init+0x1478>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
24012f9a:	487d      	ldr	r0, [pc, #500]	; (24013190 <lv_theme_material_init+0x1e78>)
24012f9c:	f7fe f9b0 	bl	24011300 <lv_color_hex>
24012fa0:	e410      	b.n	240127c4 <lv_theme_material_init+0x14ac>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
24012fa2:	2201      	movs	r2, #1
24012fa4:	e441      	b.n	2401282a <lv_theme_material_init+0x1512>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
24012fa6:	2201      	movs	r2, #1
24012fa8:	e457      	b.n	2401285a <lv_theme_material_init+0x1542>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
24012faa:	2000      	movs	r0, #0
24012fac:	f7fb ff22 	bl	2400edf4 <lv_disp_get_dpi>
24012fb0:	230f      	movs	r3, #15
24012fb2:	2250      	movs	r2, #80	; 0x50
24012fb4:	fb00 2203 	mla	r2, r0, r3, r2
24012fb8:	23a0      	movs	r3, #160	; 0xa0
24012fba:	fb92 f2f3 	sdiv	r2, r2, r3
24012fbe:	b212      	sxth	r2, r2
24012fc0:	e497      	b.n	240128f2 <lv_theme_material_init+0x15da>
24012fc2:	f7fb ff17 	bl	2400edf4 <lv_disp_get_dpi>
24012fc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012fca:	0040      	lsls	r0, r0, #1
24012fcc:	28ef      	cmp	r0, #239	; 0xef
24012fce:	f77f ac8f 	ble.w	240128f0 <lv_theme_material_init+0x15d8>
24012fd2:	2000      	movs	r0, #0
24012fd4:	f7fb ff0e 	bl	2400edf4 <lv_disp_get_dpi>
24012fd8:	231e      	movs	r3, #30
24012fda:	e7ea      	b.n	24012fb2 <lv_theme_material_init+0x1c9a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
24012fdc:	2000      	movs	r0, #0
24012fde:	f7fb ff09 	bl	2400edf4 <lv_disp_get_dpi>
24012fe2:	230f      	movs	r3, #15
24012fe4:	2250      	movs	r2, #80	; 0x50
24012fe6:	fb00 2203 	mla	r2, r0, r3, r2
24012fea:	23a0      	movs	r3, #160	; 0xa0
24012fec:	fb92 f2f3 	sdiv	r2, r2, r3
24012ff0:	b212      	sxth	r2, r2
24012ff2:	e495      	b.n	24012920 <lv_theme_material_init+0x1608>
24012ff4:	f7fb fefe 	bl	2400edf4 <lv_disp_get_dpi>
24012ff8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24012ffc:	0040      	lsls	r0, r0, #1
24012ffe:	28ef      	cmp	r0, #239	; 0xef
24013000:	f77f ac8d 	ble.w	2401291e <lv_theme_material_init+0x1606>
24013004:	2000      	movs	r0, #0
24013006:	f7fb fef5 	bl	2400edf4 <lv_disp_get_dpi>
2401300a:	231e      	movs	r3, #30
2401300c:	e7ea      	b.n	24012fe4 <lv_theme_material_init+0x1ccc>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
2401300e:	2000      	movs	r0, #0
24013010:	f7fb fef0 	bl	2400edf4 <lv_disp_get_dpi>
24013014:	230f      	movs	r3, #15
24013016:	2250      	movs	r2, #80	; 0x50
24013018:	fb00 2203 	mla	r2, r0, r3, r2
2401301c:	23a0      	movs	r3, #160	; 0xa0
2401301e:	fb92 f2f3 	sdiv	r2, r2, r3
24013022:	b212      	sxth	r2, r2
24013024:	e493      	b.n	2401294e <lv_theme_material_init+0x1636>
24013026:	f7fb fee5 	bl	2400edf4 <lv_disp_get_dpi>
2401302a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
2401302e:	0040      	lsls	r0, r0, #1
24013030:	28ef      	cmp	r0, #239	; 0xef
24013032:	f77f ac8b 	ble.w	2401294c <lv_theme_material_init+0x1634>
24013036:	2000      	movs	r0, #0
24013038:	f7fb fedc 	bl	2400edf4 <lv_disp_get_dpi>
2401303c:	231e      	movs	r3, #30
2401303e:	e7ea      	b.n	24013016 <lv_theme_material_init+0x1cfe>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
24013040:	2000      	movs	r0, #0
24013042:	f7fb fed7 	bl	2400edf4 <lv_disp_get_dpi>
24013046:	230f      	movs	r3, #15
24013048:	2250      	movs	r2, #80	; 0x50
2401304a:	fb00 2203 	mla	r2, r0, r3, r2
2401304e:	23a0      	movs	r3, #160	; 0xa0
24013050:	fb92 f2f3 	sdiv	r2, r2, r3
24013054:	b212      	sxth	r2, r2
24013056:	e491      	b.n	2401297c <lv_theme_material_init+0x1664>
24013058:	f7fb fecc 	bl	2400edf4 <lv_disp_get_dpi>
2401305c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24013060:	0040      	lsls	r0, r0, #1
24013062:	28ef      	cmp	r0, #239	; 0xef
24013064:	f77f ac89 	ble.w	2401297a <lv_theme_material_init+0x1662>
24013068:	2000      	movs	r0, #0
2401306a:	f7fb fec3 	bl	2400edf4 <lv_disp_get_dpi>
2401306e:	231e      	movs	r3, #30
24013070:	e7ea      	b.n	24013048 <lv_theme_material_init+0x1d30>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
24013072:	2201      	movs	r2, #1
24013074:	e4d2      	b.n	24012a1c <lv_theme_material_init+0x1704>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
24013076:	2201      	movs	r2, #1
24013078:	e4e9      	b.n	24012a4e <lv_theme_material_init+0x1736>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
2401307a:	2201      	movs	r2, #1
2401307c:	e500      	b.n	24012a80 <lv_theme_material_init+0x1768>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
2401307e:	2201      	movs	r2, #1
24013080:	e540      	b.n	24012b04 <lv_theme_material_init+0x17ec>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
24013082:	2201      	movs	r2, #1
24013084:	e558      	b.n	24012b38 <lv_theme_material_init+0x1820>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
24013086:	2201      	movs	r2, #1
24013088:	e594      	b.n	24012bb4 <lv_theme_material_init+0x189c>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
2401308a:	2000      	movs	r0, #0
2401308c:	f7fb feb2 	bl	2400edf4 <lv_disp_get_dpi>
24013090:	230f      	movs	r3, #15
24013092:	2250      	movs	r2, #80	; 0x50
24013094:	fb00 2203 	mla	r2, r0, r3, r2
24013098:	23a0      	movs	r3, #160	; 0xa0
2401309a:	fb92 f2f3 	sdiv	r2, r2, r3
2401309e:	b212      	sxth	r2, r2
240130a0:	e5aa      	b.n	24012bf8 <lv_theme_material_init+0x18e0>
240130a2:	f7fb fea7 	bl	2400edf4 <lv_disp_get_dpi>
240130a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
240130aa:	0040      	lsls	r0, r0, #1
240130ac:	28ef      	cmp	r0, #239	; 0xef
240130ae:	f77f ada2 	ble.w	24012bf6 <lv_theme_material_init+0x18de>
240130b2:	2000      	movs	r0, #0
240130b4:	f7fb fe9e 	bl	2400edf4 <lv_disp_get_dpi>
240130b8:	231e      	movs	r3, #30
240130ba:	e7ea      	b.n	24013092 <lv_theme_material_init+0x1d7a>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
240130bc:	2000      	movs	r0, #0
240130be:	f7fb fe99 	bl	2400edf4 <lv_disp_get_dpi>
240130c2:	230f      	movs	r3, #15
240130c4:	2250      	movs	r2, #80	; 0x50
240130c6:	fb00 2203 	mla	r2, r0, r3, r2
240130ca:	23a0      	movs	r3, #160	; 0xa0
240130cc:	fb92 f2f3 	sdiv	r2, r2, r3
240130d0:	b212      	sxth	r2, r2
240130d2:	e5a8      	b.n	24012c26 <lv_theme_material_init+0x190e>
240130d4:	f7fb fe8e 	bl	2400edf4 <lv_disp_get_dpi>
240130d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
240130dc:	0040      	lsls	r0, r0, #1
240130de:	28ef      	cmp	r0, #239	; 0xef
240130e0:	f77f ada0 	ble.w	24012c24 <lv_theme_material_init+0x190c>
240130e4:	2000      	movs	r0, #0
240130e6:	f7fb fe85 	bl	2400edf4 <lv_disp_get_dpi>
240130ea:	231e      	movs	r3, #30
240130ec:	e7ea      	b.n	240130c4 <lv_theme_material_init+0x1dac>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
240130ee:	2000      	movs	r0, #0
240130f0:	f7fb fe80 	bl	2400edf4 <lv_disp_get_dpi>
240130f4:	230f      	movs	r3, #15
240130f6:	2250      	movs	r2, #80	; 0x50
240130f8:	fb00 2203 	mla	r2, r0, r3, r2
240130fc:	23a0      	movs	r3, #160	; 0xa0
240130fe:	fb92 f2f3 	sdiv	r2, r2, r3
24013102:	b212      	sxth	r2, r2
24013104:	e5a6      	b.n	24012c54 <lv_theme_material_init+0x193c>
24013106:	f7fb fe75 	bl	2400edf4 <lv_disp_get_dpi>
2401310a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
2401310e:	0040      	lsls	r0, r0, #1
24013110:	28ef      	cmp	r0, #239	; 0xef
24013112:	f77f ad9e 	ble.w	24012c52 <lv_theme_material_init+0x193a>
24013116:	2000      	movs	r0, #0
24013118:	f7fb fe6c 	bl	2400edf4 <lv_disp_get_dpi>
2401311c:	231e      	movs	r3, #30
2401311e:	e7ea      	b.n	240130f6 <lv_theme_material_init+0x1dde>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24013120:	2000      	movs	r0, #0
24013122:	f7fb fe67 	bl	2400edf4 <lv_disp_get_dpi>
24013126:	230f      	movs	r3, #15
24013128:	2250      	movs	r2, #80	; 0x50
2401312a:	fb00 2203 	mla	r2, r0, r3, r2
2401312e:	23a0      	movs	r3, #160	; 0xa0
24013130:	fb92 f2f3 	sdiv	r2, r2, r3
24013134:	b212      	sxth	r2, r2
24013136:	e5a4      	b.n	24012c82 <lv_theme_material_init+0x196a>
24013138:	f7fb fe5c 	bl	2400edf4 <lv_disp_get_dpi>
2401313c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24013140:	0040      	lsls	r0, r0, #1
24013142:	28ef      	cmp	r0, #239	; 0xef
24013144:	f77f ad9c 	ble.w	24012c80 <lv_theme_material_init+0x1968>
24013148:	2000      	movs	r0, #0
2401314a:	f7fb fe53 	bl	2400edf4 <lv_disp_get_dpi>
2401314e:	231e      	movs	r3, #30
24013150:	e7ea      	b.n	24013128 <lv_theme_material_init+0x1e10>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
24013152:	2000      	movs	r0, #0
24013154:	f7fb fe4e 	bl	2400edf4 <lv_disp_get_dpi>
24013158:	230f      	movs	r3, #15
2401315a:	2250      	movs	r2, #80	; 0x50
2401315c:	fb00 2203 	mla	r2, r0, r3, r2
24013160:	23a0      	movs	r3, #160	; 0xa0
24013162:	fb92 f2f3 	sdiv	r2, r2, r3
24013166:	b212      	sxth	r2, r2
24013168:	e5a2      	b.n	24012cb0 <lv_theme_material_init+0x1998>
2401316a:	f7fb fe43 	bl	2400edf4 <lv_disp_get_dpi>
2401316e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
24013172:	0040      	lsls	r0, r0, #1
24013174:	28ef      	cmp	r0, #239	; 0xef
24013176:	f77f ad9a 	ble.w	24012cae <lv_theme_material_init+0x1996>
2401317a:	2000      	movs	r0, #0
2401317c:	f7fb fe3a 	bl	2400edf4 <lv_disp_get_dpi>
24013180:	231e      	movs	r3, #30
24013182:	e7ea      	b.n	2401315a <lv_theme_material_init+0x1e42>
24013184:	005f656e 	.word	0x005f656e
24013188:	00586273 	.word	0x00586273
2401318c:	00404040 	.word	0x00404040
24013190:	00a1adbd 	.word	0x00a1adbd

24013194 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24013194:	8883      	ldrh	r3, [r0, #4]
24013196:	8802      	ldrh	r2, [r0, #0]
24013198:	3301      	adds	r3, #1
2401319a:	1a98      	subs	r0, r3, r2
}
2401319c:	b200      	sxth	r0, r0
2401319e:	4770      	bx	lr

240131a0 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240131a0:	88c3      	ldrh	r3, [r0, #6]
240131a2:	8842      	ldrh	r2, [r0, #2]
240131a4:	3301      	adds	r3, #1
240131a6:	1a98      	subs	r0, r3, r2
}
240131a8:	b200      	sxth	r0, r0
240131aa:	4770      	bx	lr

240131ac <lv_bar_signal>:
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
    lv_res_t res;

    if(sign == LV_SIGNAL_GET_STYLE) {
240131ac:	2908      	cmp	r1, #8
{
240131ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240131b2:	4604      	mov	r4, r0
240131b4:	460e      	mov	r6, r1
240131b6:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
240131b8:	d118      	bne.n	240131ec <lv_bar_signal+0x40>
        lv_get_style_info_t * info = param;
        info->result = lv_bar_get_style(bar, info->part);
240131ba:	7815      	ldrb	r5, [r2, #0]

static lv_style_list_t * lv_bar_get_style(lv_obj_t * bar, uint8_t part)
{
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);

    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
240131bc:	f7f5 ffcd 	bl	2400915a <lv_obj_get_ext_attr>
    lv_style_list_t * style_dsc_p;

    switch(part) {
240131c0:	b15d      	cbz	r5, 240131da <lv_bar_signal+0x2e>
240131c2:	2d01      	cmp	r5, #1
240131c4:	d010      	beq.n	240131e8 <lv_bar_signal+0x3c>
        info->result = lv_bar_get_style(bar, info->part);
240131c6:	2300      	movs	r3, #0
        else return ancestor_signal(bar, sign, param);
240131c8:	463a      	mov	r2, r7
240131ca:	4631      	mov	r1, r6
240131cc:	4620      	mov	r0, r4
        info->result = lv_bar_get_style(bar, info->part);
240131ce:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(bar, sign, param);
240131d0:	4b17      	ldr	r3, [pc, #92]	; (24013230 <lv_bar_signal+0x84>)
}
240131d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(bar, sign, param);
240131d6:	681b      	ldr	r3, [r3, #0]
240131d8:	4718      	bx	r3
        case LV_BAR_PART_BG:
            style_dsc_p = &bar->style_list;
240131da:	f104 0028 	add.w	r0, r4, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
240131de:	2501      	movs	r5, #1
        info->result = lv_bar_get_style(bar, info->part);
240131e0:	6078      	str	r0, [r7, #4]
}
240131e2:	4628      	mov	r0, r5
240131e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            break;
        case LV_BAR_PART_INDIC:
            style_dsc_p = &ext->style_indic;
240131e8:	3014      	adds	r0, #20
            break;
240131ea:	e7f8      	b.n	240131de <lv_bar_signal+0x32>
    res = ancestor_signal(bar, sign, param);
240131ec:	4b10      	ldr	r3, [pc, #64]	; (24013230 <lv_bar_signal+0x84>)
240131ee:	681b      	ldr	r3, [r3, #0]
240131f0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
240131f2:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
240131f4:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
240131f6:	d1f4      	bne.n	240131e2 <lv_bar_signal+0x36>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
240131f8:	2e07      	cmp	r6, #7
240131fa:	d105      	bne.n	24013208 <lv_bar_signal+0x5c>
240131fc:	4638      	mov	r0, r7
240131fe:	490d      	ldr	r1, [pc, #52]	; (24013234 <lv_bar_signal+0x88>)
}
24013200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24013204:	f7f5 bfdd 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
24013208:	2e06      	cmp	r6, #6
2401320a:	d10a      	bne.n	24013222 <lv_bar_signal+0x76>
        indic_size = lv_obj_get_draw_rect_ext_pad_size(bar, LV_BAR_PART_INDIC);
2401320c:	4601      	mov	r1, r0
2401320e:	4620      	mov	r0, r4
24013210:	f7f6 fbe1 	bl	240099d6 <lv_obj_get_draw_rect_ext_pad_size>
        bar->ext_draw_pad = LV_MATH_MAX(bar->ext_draw_pad, indic_size);
24013214:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
24013218:	4298      	cmp	r0, r3
2401321a:	bfb8      	it	lt
2401321c:	4618      	movlt	r0, r3
2401321e:	8660      	strh	r0, [r4, #50]	; 0x32
    if(sign == LV_SIGNAL_CLEANUP) {
24013220:	e7df      	b.n	240131e2 <lv_bar_signal+0x36>
24013222:	2e00      	cmp	r6, #0
24013224:	d1dd      	bne.n	240131e2 <lv_bar_signal+0x36>
        lv_obj_clean_style_list(bar, LV_BAR_PART_INDIC);
24013226:	4601      	mov	r1, r0
24013228:	4620      	mov	r0, r4
2401322a:	f7f5 fa10 	bl	2400864e <lv_obj_clean_style_list>
2401322e:	e7d8      	b.n	240131e2 <lv_bar_signal+0x36>
24013230:	24035cec 	.word	0x24035cec
24013234:	900ff294 	.word	0x900ff294

24013238 <lv_bar_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
24013238:	2a02      	cmp	r2, #2
{
2401323a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401323e:	4604      	mov	r4, r0
24013240:	460d      	mov	r5, r1
24013242:	4616      	mov	r6, r2
24013244:	ed2d 8b02 	vpush	{d8}
24013248:	b0af      	sub	sp, #188	; 0xbc
    if(mode == LV_DESIGN_COVER_CHK) {
2401324a:	d107      	bne.n	2401325c <lv_bar_design+0x24>
        return ancestor_design_f(bar, clip_area, mode);
2401324c:	4b8e      	ldr	r3, [pc, #568]	; (24013488 <lv_bar_design+0x250>)
2401324e:	681b      	ldr	r3, [r3, #0]
}
24013250:	b02f      	add	sp, #188	; 0xbc
24013252:	ecbd 8b02 	vpop	{d8}
24013256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return ancestor_design_f(bar, clip_area, mode);
2401325a:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
2401325c:	2a00      	cmp	r2, #0
2401325e:	f040 80de 	bne.w	2401341e <lv_bar_design+0x1e6>
    lv_draw_rect_dsc_init(&draw_dsc);
24013262:	a819      	add	r0, sp, #100	; 0x64
24013264:	f7fa fbfe 	bl	2400da64 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
24013268:	2233      	movs	r2, #51	; 0x33
2401326a:	4631      	mov	r1, r6
2401326c:	4620      	mov	r0, r4
2401326e:	f7f5 fa8b 	bl	24008788 <_lv_obj_get_style_int>
    if(lv_obj_get_style_border_post(bar, LV_BAR_PART_BG)) {
24013272:	b108      	cbz	r0, 24013278 <lv_bar_design+0x40>
        draw_dsc.border_opa = LV_OPA_TRANSP;
24013274:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
    draw_dsc.value_opa = LV_OPA_TRANSP;
24013278:	2600      	movs	r6, #0
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
2401327a:	aa19      	add	r2, sp, #100	; 0x64
2401327c:	4620      	mov	r0, r4
2401327e:	4631      	mov	r1, r6
    draw_dsc.value_opa = LV_OPA_TRANSP;
24013280:	f88d 60a8 	strb.w	r6, [sp, #168]	; 0xa8
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
24013284:	f7f5 ffab 	bl	240091de <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
24013288:	f104 0310 	add.w	r3, r4, #16
2401328c:	aa19      	add	r2, sp, #100	; 0x64
2401328e:	4629      	mov	r1, r5
24013290:	4618      	mov	r0, r3
24013292:	ee08 3a10 	vmov	s16, r3
24013296:	f7fa fc09 	bl	2400daac <lv_draw_rect>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
2401329a:	4620      	mov	r0, r4
2401329c:	f7f5 ff5d 	bl	2400915a <lv_obj_get_ext_attr>
240132a0:	4681      	mov	r9, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(bar);
240132a2:	4620      	mov	r0, r4
240132a4:	f7f5 fa1f 	bl	240086e6 <lv_obj_get_base_dir>
240132a8:	9005      	str	r0, [sp, #20]
    lv_coord_t objw = lv_obj_get_width(bar);
240132aa:	4620      	mov	r0, r4
240132ac:	f7f5 f9af 	bl	2400860e <lv_obj_get_width>
240132b0:	4683      	mov	fp, r0
    lv_coord_t objh = lv_obj_get_height(bar);
240132b2:	4620      	mov	r0, r4
240132b4:	f7f5 f9b1 	bl	2400861a <lv_obj_get_height>
    int32_t range = ext->max_value - ext->min_value;
240132b8:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
240132bc:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
    lv_coord_t objh = lv_obj_get_height(bar);
240132c0:	4680      	mov	r8, r0
    int32_t range = ext->max_value - ext->min_value;
240132c2:	1aca      	subs	r2, r1, r3
240132c4:	9202      	str	r2, [sp, #8]
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
240132c6:	f899 2010 	ldrb.w	r2, [r9, #16]
240132ca:	f002 0203 	and.w	r2, r2, #3
240132ce:	2a01      	cmp	r2, #1
240132d0:	d17e      	bne.n	240133d0 <lv_bar_design+0x198>
240132d2:	42b3      	cmp	r3, r6
240132d4:	da7c      	bge.n	240133d0 <lv_bar_design+0x198>
240132d6:	42b1      	cmp	r1, r6
240132d8:	dd7a      	ble.n	240133d0 <lv_bar_design+0x198>
240132da:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
240132de:	1ad2      	subs	r2, r2, r3
240132e0:	4253      	negs	r3, r2
240132e2:	4153      	adcs	r3, r2
240132e4:	9301      	str	r3, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240132e6:	2212      	movs	r2, #18
240132e8:	2100      	movs	r1, #0
240132ea:	4620      	mov	r0, r4
    lv_area_copy(&ext->indic_area, &bar->coords);
240132ec:	f109 0608 	add.w	r6, r9, #8
240132f0:	f7f5 fa4a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240132f4:	2213      	movs	r2, #19
240132f6:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240132f8:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240132fa:	4620      	mov	r0, r4
240132fc:	f7f5 fa44 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013300:	2210      	movs	r2, #16
24013302:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013304:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013306:	4620      	mov	r0, r4
24013308:	f7f5 fa3e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401330c:	2211      	movs	r2, #17
2401330e:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013310:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013312:	4620      	mov	r0, r4
24013314:	f7f5 fa38 	bl	24008788 <_lv_obj_get_style_int>
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
24013318:	f104 020f 	add.w	r2, r4, #15
2401331c:	f109 0110 	add.w	r1, r9, #16
    uint8_t * d8 = (uint8_t *)dst;
24013320:	4633      	mov	r3, r6
        *d8 = *s8;
24013322:	f812 cf01 	ldrb.w	ip, [r2, #1]!
24013326:	f803 cb01 	strb.w	ip, [r3], #1
    while(len) {
2401332a:	428b      	cmp	r3, r1
2401332c:	d1f9      	bne.n	24013322 <lv_bar_design+0xea>
    ext->indic_area.x1 += bg_left;
2401332e:	b2bb      	uxth	r3, r7
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
24013330:	45c3      	cmp	fp, r8
    ext->indic_area.x1 += bg_left;
24013332:	9306      	str	r3, [sp, #24]
24013334:	f8b9 3008 	ldrh.w	r3, [r9, #8]
24013338:	fa13 f787 	uxtah	r7, r3, r7
    ext->indic_area.x2 -= bg_right;
2401333c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
24013340:	9303      	str	r3, [sp, #12]
    ext->indic_area.x1 += bg_left;
24013342:	b2bf      	uxth	r7, r7
    ext->indic_area.x2 -= bg_right;
24013344:	f8b9 300c 	ldrh.w	r3, [r9, #12]
24013348:	9a03      	ldr	r2, [sp, #12]
    ext->indic_area.x1 += bg_left;
2401334a:	f8a9 7008 	strh.w	r7, [r9, #8]
    ext->indic_area.x2 -= bg_right;
2401334e:	eba3 0302 	sub.w	r3, r3, r2
    ext->indic_area.y1 += bg_top;
24013352:	fa1f f28a 	uxth.w	r2, sl
24013356:	9207      	str	r2, [sp, #28]
    ext->indic_area.x2 -= bg_right;
24013358:	b29b      	uxth	r3, r3
    ext->indic_area.y1 += bg_top;
2401335a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
    ext->indic_area.x2 -= bg_right;
2401335e:	f8a9 300c 	strh.w	r3, [r9, #12]
    ext->indic_area.y1 += bg_top;
24013362:	fa12 fa8a 	uxtah	sl, r2, sl
    ext->indic_area.y2 -= bg_bottom;
24013366:	b282      	uxth	r2, r0
24013368:	9204      	str	r2, [sp, #16]
    ext->indic_area.y1 += bg_top;
2401336a:	fa1f fa8a 	uxth.w	sl, sl
    ext->indic_area.y2 -= bg_bottom;
2401336e:	f8b9 200e 	ldrh.w	r2, [r9, #14]
24013372:	9904      	ldr	r1, [sp, #16]
    ext->indic_area.y1 += bg_top;
24013374:	f8a9 a00a 	strh.w	sl, [r9, #10]
    ext->indic_area.y2 -= bg_bottom;
24013378:	eba2 0201 	sub.w	r2, r2, r1
2401337c:	b292      	uxth	r2, r2
2401337e:	f8a9 200e 	strh.w	r2, [r9, #14]
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
24013382:	db27      	blt.n	240133d4 <lv_bar_design+0x19c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24013384:	3201      	adds	r2, #1
24013386:	eba2 020a 	sub.w	r2, r2, sl
2401338a:	b212      	sxth	r2, r2
2401338c:	2a03      	cmp	r2, #3
2401338e:	dc0b      	bgt.n	240133a8 <lv_bar_design+0x170>
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
24013390:	8a63      	ldrh	r3, [r4, #18]
24013392:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
24013396:	eb03 0362 	add.w	r3, r3, r2, asr #1
2401339a:	b29b      	uxth	r3, r3
2401339c:	1e9a      	subs	r2, r3, #2
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
2401339e:	3302      	adds	r3, #2
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
240133a0:	f8a9 200a 	strh.w	r2, [r9, #10]
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
240133a4:	f8a9 300e 	strh.w	r3, [r9, #14]
    lv_coord_t anim_length = hor ? indicw : indich;
240133a8:	45c3      	cmp	fp, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240133aa:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
240133ae:	f9b9 1008 	ldrsh.w	r1, [r9, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240133b2:	f9b9 700e 	ldrsh.w	r7, [r9, #14]
240133b6:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
240133ba:	da69      	bge.n	24013490 <lv_bar_design+0x258>
240133bc:	3701      	adds	r7, #1
        axis1 = &ext->indic_area.y1;
240133be:	f109 000a 	add.w	r0, r9, #10
        axis2 = &ext->indic_area.y2;
240133c2:	f109 0c0e 	add.w	ip, r9, #14
        indic_length_calc = lv_area_get_height;
240133c6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 2401348c <lv_bar_design+0x254>
240133ca:	1abf      	subs	r7, r7, r2
240133cc:	b23f      	sxth	r7, r7
240133ce:	e067      	b.n	240134a0 <lv_bar_design+0x268>
    bool sym = false;
240133d0:	9601      	str	r6, [sp, #4]
240133d2:	e788      	b.n	240132e6 <lv_bar_design+0xae>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240133d4:	3301      	adds	r3, #1
240133d6:	1bdb      	subs	r3, r3, r7
    else if(!hor && lv_area_get_width(&ext->indic_area) < LV_BAR_SIZE_MIN) {
240133d8:	b21b      	sxth	r3, r3
240133da:	2b03      	cmp	r3, #3
240133dc:	dce4      	bgt.n	240133a8 <lv_bar_design+0x170>
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
240133de:	8a23      	ldrh	r3, [r4, #16]
240133e0:	eb0b 72db 	add.w	r2, fp, fp, lsr #31
240133e4:	eb03 0362 	add.w	r3, r3, r2, asr #1
240133e8:	b29b      	uxth	r3, r3
240133ea:	1e9a      	subs	r2, r3, #2
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
240133ec:	3302      	adds	r3, #2
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
240133ee:	f8a9 2008 	strh.w	r2, [r9, #8]
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
240133f2:	f8a9 300c 	strh.w	r3, [r9, #12]
240133f6:	e7d7      	b.n	240133a8 <lv_bar_design+0x170>
240133f8:	3301      	adds	r3, #1
240133fa:	1a5b      	subs	r3, r3, r1
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
240133fc:	b21b      	sxth	r3, r3
240133fe:	2b03      	cmp	r3, #3
24013400:	f300 8124 	bgt.w	2401364c <lv_bar_design+0x414>
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
24013404:	eb0b 72db 	add.w	r2, fp, fp, lsr #31
24013408:	8a23      	ldrh	r3, [r4, #16]
2401340a:	eb03 0362 	add.w	r3, r3, r2, asr #1
2401340e:	b29b      	uxth	r3, r3
24013410:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
24013412:	3302      	adds	r3, #2
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
24013414:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
24013418:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
2401341c:	e116      	b.n	2401364c <lv_bar_design+0x414>
    else if(mode == LV_DESIGN_DRAW_POST) {
2401341e:	2a01      	cmp	r2, #1
24013420:	f040 815e 	bne.w	240136e0 <lv_bar_design+0x4a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
24013424:	2233      	movs	r2, #51	; 0x33
24013426:	2100      	movs	r1, #0
24013428:	f7f5 f9ae 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(bar, LV_OBJ_PART_MAIN)) {
2401342c:	2800      	cmp	r0, #0
2401342e:	f000 8157 	beq.w	240136e0 <lv_bar_design+0x4a8>
            lv_draw_rect_dsc_init(&draw_dsc);
24013432:	a819      	add	r0, sp, #100	; 0x64
24013434:	f7fa fb16 	bl	2400da64 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
24013438:	2100      	movs	r1, #0
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
2401343a:	aa19      	add	r2, sp, #100	; 0x64
2401343c:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
2401343e:	f88d 1070 	strb.w	r1, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
24013442:	f88d 109a 	strb.w	r1, [sp, #154]	; 0x9a
            draw_dsc.outline_opa = LV_OPA_TRANSP;
24013446:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
2401344a:	f88d 108e 	strb.w	r1, [sp, #142]	; 0x8e
            draw_dsc.value_opa = LV_OPA_TRANSP;
2401344e:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
24013452:	f7f5 fec4 	bl	240091de <lv_obj_init_draw_rect_dsc>
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
24013456:	aa19      	add	r2, sp, #100	; 0x64
24013458:	4629      	mov	r1, r5
2401345a:	f104 0010 	add.w	r0, r4, #16
2401345e:	e13d      	b.n	240136dc <lv_bar_design+0x4a4>
    if(!sym && indic_length_calc(&ext->indic_area) <= 1) return;
24013460:	4630      	mov	r0, r6
24013462:	47d0      	blx	sl
24013464:	2801      	cmp	r0, #1
24013466:	dc58      	bgt.n	2401351a <lv_bar_design+0x2e2>
24013468:	e122      	b.n	240136b0 <lv_bar_design+0x478>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
2401346a:	b21b      	sxth	r3, r3
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
2401346c:	b212      	sxth	r2, r2
2401346e:	e037      	b.n	240134e0 <lv_bar_design+0x2a8>
        *axis1 = *axis2 - anim_cur_value_x;
24013470:	f8bc e000 	ldrh.w	lr, [ip]
24013474:	ebae 0e02 	sub.w	lr, lr, r2
24013478:	f8a0 e000 	strh.w	lr, [r0]
        *axis2 -= anim_start_value_x;
2401347c:	f8bc 2000 	ldrh.w	r2, [ip]
24013480:	1ad2      	subs	r2, r2, r3
24013482:	f8ac 2000 	strh.w	r2, [ip]
24013486:	e033      	b.n	240134f0 <lv_bar_design+0x2b8>
24013488:	24035ce8 	.word	0x24035ce8
2401348c:	240131a1 	.word	0x240131a1
24013490:	3301      	adds	r3, #1
        axis2 = &ext->indic_area.x2;
24013492:	f109 0c0c 	add.w	ip, r9, #12
        axis1 = &ext->indic_area.x1;
24013496:	4630      	mov	r0, r6
        indic_length_calc = lv_area_get_width;
24013498:	f8df a250 	ldr.w	sl, [pc, #592]	; 240136ec <lv_bar_design+0x4b4>
2401349c:	1a5b      	subs	r3, r3, r1
2401349e:	b21f      	sxth	r7, r3
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
240134a0:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
    if(hor && base_dir == LV_BIDI_DIR_RTL) {
240134a4:	45c3      	cmp	fp, r8
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
240134a6:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
240134aa:	9a02      	ldr	r2, [sp, #8]
240134ac:	eba3 030e 	sub.w	r3, r3, lr
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
240134b0:	9902      	ldr	r1, [sp, #8]
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
240134b2:	fb07 f303 	mul.w	r3, r7, r3
240134b6:	fb93 f3f2 	sdiv	r3, r3, r2
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
240134ba:	f9b9 2000 	ldrsh.w	r2, [r9]
240134be:	eba2 020e 	sub.w	r2, r2, lr
240134c2:	fb07 f202 	mul.w	r2, r7, r2
240134c6:	fb92 f2f1 	sdiv	r2, r2, r1
    if(hor && base_dir == LV_BIDI_DIR_RTL) {
240134ca:	dbd1      	blt.n	24013470 <lv_bar_design+0x238>
240134cc:	9905      	ldr	r1, [sp, #20]
240134ce:	2901      	cmp	r1, #1
240134d0:	d1cb      	bne.n	2401346a <lv_bar_design+0x232>
        anim_start_value_x = -anim_start_value_x;
240134d2:	4686      	mov	lr, r0
        anim_cur_value_x = -anim_cur_value_x;
240134d4:	4252      	negs	r2, r2
        anim_start_value_x = -anim_start_value_x;
240134d6:	425b      	negs	r3, r3
240134d8:	4660      	mov	r0, ip
        anim_cur_value_x = -anim_cur_value_x;
240134da:	b212      	sxth	r2, r2
        anim_start_value_x = -anim_start_value_x;
240134dc:	46f4      	mov	ip, lr
240134de:	b21b      	sxth	r3, r3
        *axis2 = *axis1 + anim_cur_value_x;
240134e0:	f8b0 e000 	ldrh.w	lr, [r0]
240134e4:	4472      	add	r2, lr
240134e6:	f8ac 2000 	strh.w	r2, [ip]
        *axis1 += anim_start_value_x;
240134ea:	8802      	ldrh	r2, [r0, #0]
240134ec:	4413      	add	r3, r2
240134ee:	8003      	strh	r3, [r0, #0]
    if(sym) {
240134f0:	9b01      	ldr	r3, [sp, #4]
240134f2:	2b00      	cmp	r3, #0
240134f4:	d0b4      	beq.n	24013460 <lv_bar_design+0x228>
        zero = *axis1 + (-ext->min_value * anim_length) / range;
240134f6:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
240134fa:	9a02      	ldr	r2, [sp, #8]
240134fc:	425b      	negs	r3, r3
240134fe:	437b      	muls	r3, r7
24013500:	fb93 f3f2 	sdiv	r3, r3, r2
24013504:	8802      	ldrh	r2, [r0, #0]
24013506:	4413      	add	r3, r2
        if(*axis2 > zero)
24013508:	f9bc 2000 	ldrsh.w	r2, [ip]
        zero = *axis1 + (-ext->min_value * anim_length) / range;
2401350c:	b21b      	sxth	r3, r3
        if(*axis2 > zero)
2401350e:	4293      	cmp	r3, r2
            *axis1 = *axis2;
24013510:	bfaa      	itet	ge
24013512:	8002      	strhge	r2, [r0, #0]
            *axis1 = zero;
24013514:	8003      	strhlt	r3, [r0, #0]
            *axis2 = zero;
24013516:	f8ac 3000 	strhge.w	r3, [ip]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
2401351a:	2201      	movs	r2, #1
2401351c:	2100      	movs	r1, #0
2401351e:	4620      	mov	r0, r4
24013520:	f7f5 f932 	bl	24008788 <_lv_obj_get_style_int>
    lv_coord_t short_side = LV_MATH_MIN(objw, objh);
24013524:	45c3      	cmp	fp, r8
24013526:	465b      	mov	r3, fp
    uint16_t bg_radius = lv_obj_get_style_radius(bar, LV_BAR_PART_BG);
24013528:	b287      	uxth	r7, r0
    lv_coord_t short_side = LV_MATH_MIN(objw, objh);
2401352a:	bfa8      	it	ge
2401352c:	4643      	movge	r3, r8
    lv_draw_rect_dsc_init(&draw_indic_dsc);
2401352e:	a819      	add	r0, sp, #100	; 0x64
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
24013530:	f343 034e 	sbfx	r3, r3, #1, #15
24013534:	429f      	cmp	r7, r3
24013536:	bfc8      	it	gt
24013538:	b29f      	uxthgt	r7, r3
    lv_draw_rect_dsc_init(&draw_indic_dsc);
2401353a:	f7fa fa93 	bl	2400da64 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_INDIC, &draw_indic_dsc);
2401353e:	2101      	movs	r1, #1
24013540:	aa19      	add	r2, sp, #100	; 0x64
24013542:	4620      	mov	r0, r4
24013544:	f7f5 fe4b 	bl	240091de <lv_obj_init_draw_rect_dsc>
    if((hor && lv_area_get_width(&ext->indic_area) > bg_radius * 2) ||
24013548:	45c3      	cmp	fp, r8
2401354a:	ea4f 0247 	mov.w	r2, r7, lsl #1
2401354e:	bfa9      	itett	ge
24013550:	f8b9 300c 	ldrhge.w	r3, [r9, #12]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24013554:	f8b9 300e 	ldrhlt.w	r3, [r9, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24013558:	3301      	addge	r3, #1
2401355a:	f8b9 1008 	ldrhge.w	r1, [r9, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2401355e:	bfbc      	itt	lt
24013560:	3301      	addlt	r3, #1
24013562:	f8b9 100a 	ldrhlt.w	r1, [r9, #10]
24013566:	1a5b      	subs	r3, r3, r1
       (!hor && lv_area_get_height(&ext->indic_area) > bg_radius * 2)) {
24013568:	b21b      	sxth	r3, r3
2401356a:	429a      	cmp	r2, r3
2401356c:	da1e      	bge.n	240135ac <lv_bar_design+0x374>
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
2401356e:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
24013572:	2200      	movs	r2, #0
        lv_opa_t border_opa = draw_indic_dsc.border_opa;
24013574:	f89d 9078 	ldrb.w	r9, [sp, #120]	; 0x78
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
24013578:	4629      	mov	r1, r5
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
2401357a:	9302      	str	r3, [sp, #8]
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
2401357c:	4630      	mov	r0, r6
        const void * pattern_src = draw_indic_dsc.pattern_image;
2401357e:	9b24      	ldr	r3, [sp, #144]	; 0x90
        lv_opa_t value_opa = draw_indic_dsc.value_opa;
24013580:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
24013584:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
        draw_indic_dsc.border_opa = LV_OPA_TRANSP;
24013588:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
        draw_indic_dsc.value_opa = LV_OPA_TRANSP;
2401358c:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
        draw_indic_dsc.pattern_image = NULL;
24013590:	9224      	str	r2, [sp, #144]	; 0x90
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
24013592:	aa19      	add	r2, sp, #100	; 0x64
        const void * pattern_src = draw_indic_dsc.pattern_image;
24013594:	9301      	str	r3, [sp, #4]
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
24013596:	f7fa fa89 	bl	2400daac <lv_draw_rect>
        draw_indic_dsc.bg_opa = bg_opa;
2401359a:	9b02      	ldr	r3, [sp, #8]
        draw_indic_dsc.border_opa = border_opa;
2401359c:	f88d 9078 	strb.w	r9, [sp, #120]	; 0x78
        draw_indic_dsc.bg_opa = bg_opa;
240135a0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        draw_indic_dsc.pattern_image = pattern_src;
240135a4:	9b01      	ldr	r3, [sp, #4]
        draw_indic_dsc.value_opa = value_opa;
240135a6:	f88d a0a8 	strb.w	sl, [sp, #168]	; 0xa8
        draw_indic_dsc.pattern_image = pattern_src;
240135aa:	9324      	str	r3, [sp, #144]	; 0x90
    lv_draw_mask_radius_init(&mask_bg_param, &bar->coords, bg_radius, false);
240135ac:	b23a      	sxth	r2, r7
240135ae:	2300      	movs	r3, #0
240135b0:	ee18 1a10 	vmov	r1, s16
240135b4:	a80b      	add	r0, sp, #44	; 0x2c
240135b6:	f7fa f9dd 	bl	2400d974 <lv_draw_mask_radius_init>
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
240135ba:	2100      	movs	r1, #0
240135bc:	a80b      	add	r0, sp, #44	; 0x2c
240135be:	f7fa f8eb 	bl	2400d798 <lv_draw_mask_add>
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
240135c2:	2300      	movs	r3, #0
        *d8 = *s8;
240135c4:	ee18 2a10 	vmov	r2, s16
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
240135c8:	ee08 0a90 	vmov	s17, r0
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
240135cc:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
240135d0:	45c3      	cmp	fp, r8
240135d2:	6920      	ldr	r0, [r4, #16]
    lv_opa_t border_opa = draw_indic_dsc.border_opa;
240135d4:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
    lv_opa_t value_opa = draw_indic_dsc.value_opa;
240135d8:	f89d 90a8 	ldrb.w	r9, [sp, #168]	; 0xa8
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
240135dc:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
240135e0:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
240135e4:	ab09      	add	r3, sp, #36	; 0x24
240135e6:	6851      	ldr	r1, [r2, #4]
    mask_indic_max_area.x2 -= bg_right;
240135e8:	9a03      	ldr	r2, [sp, #12]
    mask_indic_max_area.y2 -= bg_bottom;
240135ea:	9f04      	ldr	r7, [sp, #16]
240135ec:	c303      	stmia	r3!, {r0, r1}
    mask_indic_max_area.x1 += bg_left;
240135ee:	9b06      	ldr	r3, [sp, #24]
240135f0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    mask_indic_max_area.y1 += bg_top;
240135f4:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    mask_indic_max_area.x1 += bg_left;
240135f8:	440b      	add	r3, r1
240135fa:	b299      	uxth	r1, r3
    mask_indic_max_area.y1 += bg_top;
240135fc:	9b07      	ldr	r3, [sp, #28]
240135fe:	4403      	add	r3, r0
    mask_indic_max_area.x1 += bg_left;
24013600:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    mask_indic_max_area.y1 += bg_top;
24013604:	b298      	uxth	r0, r3
    mask_indic_max_area.x2 -= bg_right;
24013606:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
2401360a:	eba3 0302 	sub.w	r3, r3, r2
    mask_indic_max_area.y2 -= bg_bottom;
2401360e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    mask_indic_max_area.y1 += bg_top;
24013612:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    mask_indic_max_area.y2 -= bg_bottom;
24013616:	eba2 0207 	sub.w	r2, r2, r7
    mask_indic_max_area.x2 -= bg_right;
2401361a:	b29b      	uxth	r3, r3
    mask_indic_max_area.y2 -= bg_bottom;
2401361c:	b292      	uxth	r2, r2
    mask_indic_max_area.x2 -= bg_right;
2401361e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    mask_indic_max_area.y2 -= bg_bottom;
24013622:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
24013626:	f6ff aee7 	blt.w	240133f8 <lv_bar_design+0x1c0>
2401362a:	3201      	adds	r2, #1
2401362c:	1a12      	subs	r2, r2, r0
2401362e:	b212      	sxth	r2, r2
24013630:	2a03      	cmp	r2, #3
24013632:	dc0b      	bgt.n	2401364c <lv_bar_design+0x414>
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
24013634:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
24013638:	8a63      	ldrh	r3, [r4, #18]
2401363a:	eb03 0362 	add.w	r3, r3, r2, asr #1
2401363e:	b29b      	uxth	r3, r3
24013640:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
24013642:	3302      	adds	r3, #2
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
24013644:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
24013648:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    lv_draw_mask_radius_init(&mask_indic_param, &ext->indic_area, draw_indic_dsc.radius, false);
2401364c:	2300      	movs	r3, #0
2401364e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
24013652:	4631      	mov	r1, r6
24013654:	a812      	add	r0, sp, #72	; 0x48
24013656:	f7fa f98d 	bl	2400d974 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
2401365a:	2100      	movs	r1, #0
2401365c:	a812      	add	r0, sp, #72	; 0x48
2401365e:	f7fa f89b 	bl	2400d798 <lv_draw_mask_add>
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
24013662:	aa19      	add	r2, sp, #100	; 0x64
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
24013664:	4683      	mov	fp, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
24013666:	4629      	mov	r1, r5
24013668:	a809      	add	r0, sp, #36	; 0x24
2401366a:	f7fa fa1f 	bl	2400daac <lv_draw_rect>
    draw_indic_dsc.border_opa = border_opa;
2401366e:	f88d a078 	strb.w	sl, [sp, #120]	; 0x78
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
24013672:	f04f 0a00 	mov.w	sl, #0
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
24013676:	aa19      	add	r2, sp, #100	; 0x64
24013678:	4629      	mov	r1, r5
2401367a:	4630      	mov	r0, r6
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
2401367c:	f88d a070 	strb.w	sl, [sp, #112]	; 0x70
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
24013680:	f88d a08e 	strb.w	sl, [sp, #142]	; 0x8e
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
24013684:	f88d a0a8 	strb.w	sl, [sp, #168]	; 0xa8
    draw_indic_dsc.pattern_image = NULL;
24013688:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
2401368c:	f7fa fa0e 	bl	2400daac <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
24013690:	4658      	mov	r0, fp
24013692:	f7fa f8b7 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
24013696:	ee18 0a90 	vmov	r0, s17
2401369a:	f7fa f8b3 	bl	2400d804 <lv_draw_mask_remove_id>
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
2401369e:	aa19      	add	r2, sp, #100	; 0x64
240136a0:	4629      	mov	r1, r5
240136a2:	4630      	mov	r0, r6
    draw_indic_dsc.value_opa = value_opa;
240136a4:	f88d 90a8 	strb.w	r9, [sp, #168]	; 0xa8
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
240136a8:	f88d a078 	strb.w	sl, [sp, #120]	; 0x78
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
240136ac:	f7fa f9fe 	bl	2400daac <lv_draw_rect>
        lv_draw_rect_dsc_init(&draw_dsc);
240136b0:	a819      	add	r0, sp, #100	; 0x64
240136b2:	f7fa f9d7 	bl	2400da64 <lv_draw_rect_dsc_init>
        draw_dsc.bg_opa = LV_OPA_TRANSP;
240136b6:	2100      	movs	r1, #0
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
240136b8:	aa19      	add	r2, sp, #100	; 0x64
240136ba:	4620      	mov	r0, r4
        draw_dsc.bg_opa = LV_OPA_TRANSP;
240136bc:	f88d 1070 	strb.w	r1, [sp, #112]	; 0x70
        draw_dsc.border_opa = LV_OPA_TRANSP;
240136c0:	f88d 1078 	strb.w	r1, [sp, #120]	; 0x78
        draw_dsc.shadow_opa = LV_OPA_TRANSP;
240136c4:	f88d 108e 	strb.w	r1, [sp, #142]	; 0x8e
        draw_dsc.pattern_opa = LV_OPA_TRANSP;
240136c8:	f88d 109a 	strb.w	r1, [sp, #154]	; 0x9a
        draw_dsc.outline_opa = LV_OPA_TRANSP;
240136cc:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
240136d0:	f7f5 fd85 	bl	240091de <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
240136d4:	aa19      	add	r2, sp, #100	; 0x64
240136d6:	4629      	mov	r1, r5
240136d8:	ee18 0a10 	vmov	r0, s16
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
240136dc:	f7fa f9e6 	bl	2400daac <lv_draw_rect>
}
240136e0:	2000      	movs	r0, #0
240136e2:	b02f      	add	sp, #188	; 0xbc
240136e4:	ecbd 8b02 	vpop	{d8}
240136e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240136ec:	24013195 	.word	0x24013195

240136f0 <lv_bar_set_value>:
{
240136f0:	b570      	push	{r4, r5, r6, lr}
240136f2:	460c      	mov	r4, r1
240136f4:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
240136f6:	f7f5 fd30 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
240136fa:	f9b0 6000 	ldrsh.w	r6, [r0]
240136fe:	42a6      	cmp	r6, r4
24013700:	d016      	beq.n	24013730 <lv_bar_set_value+0x40>
    new_value = new_value < ext->start_value ? ext->start_value : new_value;
24013702:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
24013706:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
2401370a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
2401370e:	428b      	cmp	r3, r1
24013710:	bfb8      	it	lt
24013712:	460b      	movlt	r3, r1
24013714:	42a2      	cmp	r2, r4
24013716:	bfa8      	it	ge
24013718:	4622      	movge	r2, r4
2401371a:	4293      	cmp	r3, r2
2401371c:	bfb8      	it	lt
2401371e:	4613      	movlt	r3, r2
    if(ext->cur_value == new_value) return;
24013720:	429e      	cmp	r6, r3
24013722:	d005      	beq.n	24013730 <lv_bar_set_value+0x40>
    ext->cur_value = new_value;
24013724:	8003      	strh	r3, [r0, #0]
    lv_obj_invalidate(bar);
24013726:	4628      	mov	r0, r5
}
24013728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(bar);
2401372c:	f7f4 bc5a 	b.w	24007fe4 <lv_obj_invalidate>
}
24013730:	bd70      	pop	{r4, r5, r6, pc}
	...

24013734 <lv_bar_create>:
{
24013734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24013738:	460e      	mov	r6, r1
    lv_obj_t * bar = lv_obj_create(par, copy);
2401373a:	f7f4 fdeb 	bl	24008314 <lv_obj_create>
    if(bar == NULL) return NULL;
2401373e:	4605      	mov	r5, r0
24013740:	b1b8      	cbz	r0, 24013772 <lv_bar_create+0x3e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(bar);
24013742:	4c35      	ldr	r4, [pc, #212]	; (24013818 <lv_bar_create+0xe4>)
24013744:	6823      	ldr	r3, [r4, #0]
24013746:	b913      	cbnz	r3, 2401374e <lv_bar_create+0x1a>
24013748:	f7f5 fd03 	bl	24009152 <lv_obj_get_signal_cb>
2401374c:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(bar);
2401374e:	4c33      	ldr	r4, [pc, #204]	; (2401381c <lv_bar_create+0xe8>)
24013750:	6823      	ldr	r3, [r4, #0]
24013752:	b91b      	cbnz	r3, 2401375c <lv_bar_create+0x28>
24013754:	4628      	mov	r0, r5
24013756:	f7f5 fcfe 	bl	24009156 <lv_obj_get_design_cb>
2401375a:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(bar, sizeof(lv_bar_ext_t));
2401375c:	211c      	movs	r1, #28
2401375e:	4628      	mov	r0, r5
24013760:	f7f4 fb54 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24013764:	2700      	movs	r7, #0
24013766:	4604      	mov	r4, r0
24013768:	b930      	cbnz	r0, 24013778 <lv_bar_create+0x44>
        lv_obj_del(bar);
2401376a:	4628      	mov	r0, r5
        return NULL;
2401376c:	4625      	mov	r5, r4
        lv_obj_del(bar);
2401376e:	f7f4 fd53 	bl	24008218 <lv_obj_del>
}
24013772:	4628      	mov	r0, r5
24013774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->max_value = 100;
24013778:	2364      	movs	r3, #100	; 0x64
    lv_style_list_init(&ext->style_indic);
2401377a:	f100 0814 	add.w	r8, r0, #20
    ext->cur_value = 0;
2401377e:	6007      	str	r7, [r0, #0]
    ext->max_value = 100;
24013780:	6043      	str	r3, [r0, #4]
    ext->type         = LV_BAR_TYPE_NORMAL;
24013782:	7c03      	ldrb	r3, [r0, #16]
24013784:	f367 0301 	bfi	r3, r7, #0, #2
24013788:	7403      	strb	r3, [r0, #16]
    lv_style_list_init(&ext->style_indic);
2401378a:	4640      	mov	r0, r8
2401378c:	f7f6 ff1a 	bl	2400a5c4 <lv_style_list_init>
    lv_obj_set_signal_cb(bar, lv_bar_signal);
24013790:	4923      	ldr	r1, [pc, #140]	; (24013820 <lv_bar_create+0xec>)
24013792:	4628      	mov	r0, r5
24013794:	f7f4 fb30 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(bar, lv_bar_design);
24013798:	4922      	ldr	r1, [pc, #136]	; (24013824 <lv_bar_create+0xf0>)
2401379a:	4628      	mov	r0, r5
2401379c:	f7f4 fb34 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
240137a0:	b9a6      	cbnz	r6, 240137cc <lv_bar_create+0x98>
        lv_obj_set_click(bar, false);
240137a2:	4631      	mov	r1, r6
240137a4:	4628      	mov	r0, r5
240137a6:	f7f4 fa88 	bl	24007cba <lv_obj_set_click>
        lv_obj_set_size(bar, LV_DPI * 2, LV_DPI / 10);
240137aa:	4628      	mov	r0, r5
240137ac:	220d      	movs	r2, #13
240137ae:	f44f 7182 	mov.w	r1, #260	; 0x104
240137b2:	f7f4 fcdd 	bl	24008170 <lv_obj_set_size>
        lv_bar_set_value(bar, ext->cur_value, false);
240137b6:	f9b4 1000 	ldrsh.w	r1, [r4]
240137ba:	4628      	mov	r0, r5
240137bc:	4632      	mov	r2, r6
240137be:	f7ff ff97 	bl	240136f0 <lv_bar_set_value>
        lv_theme_apply(bar, LV_THEME_BAR);
240137c2:	2103      	movs	r1, #3
240137c4:	4628      	mov	r0, r5
240137c6:	f7fd fb7d 	bl	24010ec4 <lv_theme_apply>
240137ca:	e7d2      	b.n	24013772 <lv_bar_create+0x3e>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
240137cc:	4630      	mov	r0, r6
240137ce:	f7f5 fcc4 	bl	2400915a <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
240137d2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        ext->type                = ext_copy->type;
240137d6:	7c02      	ldrb	r2, [r0, #16]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
240137d8:	f100 0114 	add.w	r1, r0, #20
        ext->min_value          = ext_copy->min_value;
240137dc:	8063      	strh	r3, [r4, #2]
        ext->start_value        = ext_copy->start_value;
240137de:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
240137e2:	80e3      	strh	r3, [r4, #6]
        ext->max_value          = ext_copy->max_value;
240137e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
240137e8:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
240137ea:	f9b0 3000 	ldrsh.w	r3, [r0]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
240137ee:	4640      	mov	r0, r8
        ext->cur_value          = ext_copy->cur_value;
240137f0:	8023      	strh	r3, [r4, #0]
        ext->type                = ext_copy->type;
240137f2:	7c23      	ldrb	r3, [r4, #16]
240137f4:	f362 0301 	bfi	r3, r2, #0, #2
240137f8:	7423      	strb	r3, [r4, #16]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
240137fa:	f7f7 f965 	bl	2400aac8 <lv_style_list_copy>
        lv_obj_refresh_style(bar, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
240137fe:	22ff      	movs	r2, #255	; 0xff
24013800:	4628      	mov	r0, r5
24013802:	4611      	mov	r1, r2
24013804:	f7f5 fb5c 	bl	24008ec0 <lv_obj_refresh_style>
        lv_bar_set_value(bar, ext->cur_value, LV_ANIM_OFF);
24013808:	463a      	mov	r2, r7
2401380a:	f9b4 1000 	ldrsh.w	r1, [r4]
2401380e:	4628      	mov	r0, r5
24013810:	f7ff ff6e 	bl	240136f0 <lv_bar_set_value>
24013814:	e7ad      	b.n	24013772 <lv_bar_create+0x3e>
24013816:	bf00      	nop
24013818:	24035cec 	.word	0x24035cec
2401381c:	24035ce8 	.word	0x24035ce8
24013820:	240131ad 	.word	0x240131ad
24013824:	24013239 	.word	0x24013239

24013828 <lv_bar_get_value>:
{
24013828:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
2401382a:	f7f5 fc96 	bl	2400915a <lv_obj_get_ext_attr>
}
2401382e:	f9b0 0000 	ldrsh.w	r0, [r0]
24013832:	bd08      	pop	{r3, pc}

24013834 <lv_bar_get_type>:
{
24013834:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
24013836:	f7f5 fc90 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->type;
2401383a:	7c00      	ldrb	r0, [r0, #16]
}
2401383c:	f000 0003 	and.w	r0, r0, #3
24013840:	bd08      	pop	{r3, pc}

24013842 <lv_bar_set_range>:
{
24013842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013844:	460d      	mov	r5, r1
24013846:	4607      	mov	r7, r0
24013848:	4616      	mov	r6, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
2401384a:	f7f5 fc86 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
2401384e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
24013852:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
24013854:	42ab      	cmp	r3, r5
24013856:	d103      	bne.n	24013860 <lv_bar_set_range+0x1e>
24013858:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
2401385c:	42b3      	cmp	r3, r6
2401385e:	d020      	beq.n	240138a2 <lv_bar_set_range+0x60>
    if(lv_bar_get_type(bar) != LV_BAR_TYPE_CUSTOM)
24013860:	4638      	mov	r0, r7
    ext->max_value = max;
24013862:	80a6      	strh	r6, [r4, #4]
    ext->min_value = min;
24013864:	8065      	strh	r5, [r4, #2]
    if(lv_bar_get_type(bar) != LV_BAR_TYPE_CUSTOM)
24013866:	f7ff ffe5 	bl	24013834 <lv_bar_get_type>
    if(ext->cur_value > max) {
2401386a:	f9b4 3000 	ldrsh.w	r3, [r4]
    if(lv_bar_get_type(bar) != LV_BAR_TYPE_CUSTOM)
2401386e:	2802      	cmp	r0, #2
        ext->start_value = min;
24013870:	bf18      	it	ne
24013872:	80e5      	strhne	r5, [r4, #6]
    if(ext->cur_value > max) {
24013874:	42b3      	cmp	r3, r6
24013876:	dd05      	ble.n	24013884 <lv_bar_set_range+0x42>
        lv_bar_set_value(bar, ext->cur_value, false);
24013878:	2200      	movs	r2, #0
2401387a:	4631      	mov	r1, r6
2401387c:	4638      	mov	r0, r7
        ext->cur_value = max;
2401387e:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
24013880:	f7ff ff36 	bl	240136f0 <lv_bar_set_value>
    if(ext->cur_value < min) {
24013884:	f9b4 3000 	ldrsh.w	r3, [r4]
24013888:	42ab      	cmp	r3, r5
2401388a:	da05      	bge.n	24013898 <lv_bar_set_range+0x56>
        lv_bar_set_value(bar, ext->cur_value, false);
2401388c:	2200      	movs	r2, #0
2401388e:	4629      	mov	r1, r5
24013890:	4638      	mov	r0, r7
        ext->cur_value = min;
24013892:	8025      	strh	r5, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
24013894:	f7ff ff2c 	bl	240136f0 <lv_bar_set_value>
    lv_obj_invalidate(bar);
24013898:	4638      	mov	r0, r7
}
2401389a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
2401389e:	f7f4 bba1 	b.w	24007fe4 <lv_obj_invalidate>
}
240138a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240138a4 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
240138a4:	2a02      	cmp	r2, #2
{
240138a6:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
240138a8:	d104      	bne.n	240138b4 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
240138aa:	4b07      	ldr	r3, [pc, #28]	; (240138c8 <lv_btn_design+0x24>)
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
}
240138ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(btn, clip_area, mode);
240138b0:	681b      	ldr	r3, [r3, #0]
240138b2:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
240138b4:	b91a      	cbnz	r2, 240138be <lv_btn_design+0x1a>
        ancestor_design(btn, clip_area, mode);
240138b6:	4b04      	ldr	r3, [pc, #16]	; (240138c8 <lv_btn_design+0x24>)
240138b8:	681b      	ldr	r3, [r3, #0]
240138ba:	4798      	blx	r3
240138bc:	e001      	b.n	240138c2 <lv_btn_design+0x1e>
    else if(mode == LV_DESIGN_DRAW_POST) {
240138be:	2a01      	cmp	r2, #1
240138c0:	d0f9      	beq.n	240138b6 <lv_btn_design+0x12>
}
240138c2:	2000      	movs	r0, #0
240138c4:	bd10      	pop	{r4, pc}
240138c6:	bf00      	nop
240138c8:	24035cf0 	.word	0x24035cf0

240138cc <lv_btn_create>:
{
240138cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240138ce:	4607      	mov	r7, r0
240138d0:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
240138d2:	f001 f991 	bl	24014bf8 <lv_cont_create>
    if(btn == NULL) return NULL;
240138d6:	4604      	mov	r4, r0
240138d8:	b1b0      	cbz	r0, 24013908 <lv_btn_create+0x3c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
240138da:	4d23      	ldr	r5, [pc, #140]	; (24013968 <lv_btn_create+0x9c>)
240138dc:	682b      	ldr	r3, [r5, #0]
240138de:	b913      	cbnz	r3, 240138e6 <lv_btn_create+0x1a>
240138e0:	f7f5 fc37 	bl	24009152 <lv_obj_get_signal_cb>
240138e4:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
240138e6:	4d21      	ldr	r5, [pc, #132]	; (2401396c <lv_btn_create+0xa0>)
240138e8:	682b      	ldr	r3, [r5, #0]
240138ea:	b91b      	cbnz	r3, 240138f4 <lv_btn_create+0x28>
240138ec:	4620      	mov	r0, r4
240138ee:	f7f5 fc32 	bl	24009156 <lv_obj_get_design_cb>
240138f2:	6028      	str	r0, [r5, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
240138f4:	2103      	movs	r1, #3
240138f6:	4620      	mov	r0, r4
240138f8:	f7f4 fa88 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
240138fc:	4605      	mov	r5, r0
240138fe:	b928      	cbnz	r0, 2401390c <lv_btn_create+0x40>
        lv_obj_del(btn);
24013900:	4620      	mov	r0, r4
        return NULL;
24013902:	462c      	mov	r4, r5
        lv_obj_del(btn);
24013904:	f7f4 fc88 	bl	24008218 <lv_obj_del>
}
24013908:	4620      	mov	r0, r4
2401390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ext->checkable = 0;
2401390c:	7883      	ldrb	r3, [r0, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
2401390e:	4918      	ldr	r1, [pc, #96]	; (24013970 <lv_btn_create+0xa4>)
    ext->checkable = 0;
24013910:	f36f 0300 	bfc	r3, #0, #1
24013914:	7083      	strb	r3, [r0, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
24013916:	4620      	mov	r0, r4
24013918:	f7f4 fa6e 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btn, lv_btn_design);
2401391c:	4915      	ldr	r1, [pc, #84]	; (24013974 <lv_btn_create+0xa8>)
2401391e:	4620      	mov	r0, r4
24013920:	f7f4 fa72 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24013924:	b996      	cbnz	r6, 2401394c <lv_btn_create+0x80>
        if(par) {
24013926:	b147      	cbz	r7, 2401393a <lv_btn_create+0x6e>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
24013928:	2182      	movs	r1, #130	; 0x82
2401392a:	4620      	mov	r0, r4
2401392c:	222b      	movs	r2, #43	; 0x2b
2401392e:	f7f4 fc1f 	bl	24008170 <lv_obj_set_size>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
24013932:	2101      	movs	r1, #1
24013934:	4620      	mov	r0, r4
24013936:	f001 f9c1 	bl	24014cbc <lv_cont_set_layout>
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
2401393a:	4620      	mov	r0, r4
2401393c:	2101      	movs	r1, #1
2401393e:	f7f4 f9bc 	bl	24007cba <lv_obj_set_click>
        lv_theme_apply(btn, LV_THEME_BTN);
24013942:	2104      	movs	r1, #4
24013944:	4620      	mov	r0, r4
24013946:	f7fd fabd 	bl	24010ec4 <lv_theme_apply>
2401394a:	e7dd      	b.n	24013908 <lv_btn_create+0x3c>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
2401394c:	4630      	mov	r0, r6
2401394e:	f7f5 fc04 	bl	2400915a <lv_obj_get_ext_attr>
        ext->checkable             = copy_ext->checkable;
24013952:	78ab      	ldrb	r3, [r5, #2]
24013954:	7882      	ldrb	r2, [r0, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24013956:	4620      	mov	r0, r4
        ext->checkable             = copy_ext->checkable;
24013958:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
2401395c:	22ff      	movs	r2, #255	; 0xff
        ext->checkable             = copy_ext->checkable;
2401395e:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24013960:	4611      	mov	r1, r2
24013962:	f7f5 faad 	bl	24008ec0 <lv_obj_refresh_style>
24013966:	e7cf      	b.n	24013908 <lv_btn_create+0x3c>
24013968:	24035cf4 	.word	0x24035cf4
2401396c:	24035cf0 	.word	0x24035cf0
24013970:	240139f1 	.word	0x240139f1
24013974:	240138a5 	.word	0x240138a5

24013978 <lv_btn_set_state>:
{
24013978:	b507      	push	{r0, r1, r2, lr}
    switch(state) {
2401397a:	2905      	cmp	r1, #5
2401397c:	d82e      	bhi.n	240139dc <lv_btn_set_state+0x64>
2401397e:	e8df f001 	tbb	[pc, r1]
24013982:	0903      	.short	0x0903
24013984:	271b1421 	.word	0x271b1421
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
24013988:	2131      	movs	r1, #49	; 0x31
}
2401398a:	b003      	add	sp, #12
2401398c:	f85d eb04 	ldr.w	lr, [sp], #4
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
24013990:	f7f6 b817 	b.w	240099c2 <lv_obj_clear_state>
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
24013994:	2121      	movs	r1, #33	; 0x21
24013996:	9001      	str	r0, [sp, #4]
24013998:	f7f6 f813 	bl	240099c2 <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_PRESSED);
2401399c:	2110      	movs	r1, #16
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
2401399e:	9801      	ldr	r0, [sp, #4]
}
240139a0:	b003      	add	sp, #12
240139a2:	f85d eb04 	ldr.w	lr, [sp], #4
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
240139a6:	f7f6 b802 	b.w	240099ae <lv_obj_add_state>
            lv_obj_add_state(btn, LV_STATE_CHECKED);
240139aa:	2101      	movs	r1, #1
240139ac:	9001      	str	r0, [sp, #4]
240139ae:	f7f5 fffe 	bl	240099ae <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
240139b2:	2130      	movs	r1, #48	; 0x30
240139b4:	9801      	ldr	r0, [sp, #4]
240139b6:	e7e8      	b.n	2401398a <lv_btn_set_state+0x12>
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
240139b8:	2111      	movs	r1, #17
240139ba:	9001      	str	r0, [sp, #4]
240139bc:	f7f5 fff7 	bl	240099ae <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
240139c0:	2120      	movs	r1, #32
240139c2:	e7f7      	b.n	240139b4 <lv_btn_set_state+0x3c>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
240139c4:	2111      	movs	r1, #17
240139c6:	9001      	str	r0, [sp, #4]
240139c8:	f7f5 fffb 	bl	240099c2 <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED);
240139cc:	2120      	movs	r1, #32
240139ce:	e7e6      	b.n	2401399e <lv_btn_set_state+0x26>
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
240139d0:	2110      	movs	r1, #16
240139d2:	9001      	str	r0, [sp, #4]
240139d4:	f7f5 fff5 	bl	240099c2 <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
240139d8:	2121      	movs	r1, #33	; 0x21
240139da:	e7e0      	b.n	2401399e <lv_btn_set_state+0x26>
}
240139dc:	b003      	add	sp, #12
240139de:	f85d fb04 	ldr.w	pc, [sp], #4

240139e2 <lv_btn_get_checkable>:
{
240139e2:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
240139e4:	f7f5 fbb9 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->checkable != 0 ? true : false;
240139e8:	7880      	ldrb	r0, [r0, #2]
}
240139ea:	f000 0001 	and.w	r0, r0, #1
240139ee:	bd08      	pop	{r3, pc}

240139f0 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
240139f0:	4b1e      	ldr	r3, [pc, #120]	; (24013a6c <lv_btn_signal+0x7c>)
{
240139f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(btn, sign, param);
240139f6:	681b      	ldr	r3, [r3, #0]
{
240139f8:	4606      	mov	r6, r0
240139fa:	460f      	mov	r7, r1
240139fc:	4614      	mov	r4, r2
    res = ancestor_signal(btn, sign, param);
240139fe:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24013a00:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
24013a02:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
24013a04:	d128      	bne.n	24013a58 <lv_btn_signal+0x68>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24013a06:	2f07      	cmp	r7, #7
24013a08:	d106      	bne.n	24013a18 <lv_btn_signal+0x28>
24013a0a:	4919      	ldr	r1, [pc, #100]	; (24013a70 <lv_btn_signal+0x80>)
24013a0c:	4620      	mov	r0, r4
        }
#endif
    }

    return res;
}
24013a0e:	b002      	add	sp, #8
24013a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24013a14:	f7f5 bbd5 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    bool tgl           = lv_btn_get_checkable(btn);
24013a18:	4630      	mov	r0, r6
24013a1a:	f7ff ffe2 	bl	240139e2 <lv_btn_get_checkable>
    if(sign == LV_SIGNAL_RELEASED) {
24013a1e:	2f0e      	cmp	r7, #14
    bool tgl           = lv_btn_get_checkable(btn);
24013a20:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
24013a22:	d119      	bne.n	24013a58 <lv_btn_signal+0x68>
        if(lv_indev_is_dragging(param) == false && tgl) {
24013a24:	4620      	mov	r0, r4
24013a26:	f7f3 fc19 	bl	2400725c <lv_indev_is_dragging>
24013a2a:	4604      	mov	r4, r0
24013a2c:	b9a0      	cbnz	r0, 24013a58 <lv_btn_signal+0x68>
24013a2e:	f1b8 0f00 	cmp.w	r8, #0
24013a32:	d011      	beq.n	24013a58 <lv_btn_signal+0x68>
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
24013a34:	4601      	mov	r1, r0
            uint32_t toggled = 0;
24013a36:	9001      	str	r0, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
24013a38:	4630      	mov	r0, r6
24013a3a:	f7f4 fe5d 	bl	240086f8 <lv_obj_get_state>
24013a3e:	07c3      	lsls	r3, r0, #31
24013a40:	d50e      	bpl.n	24013a60 <lv_btn_signal+0x70>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
24013a42:	2131      	movs	r1, #49	; 0x31
24013a44:	4630      	mov	r0, r6
24013a46:	f7f5 ffbc 	bl	240099c2 <lv_obj_clear_state>
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
24013a4a:	aa01      	add	r2, sp, #4
24013a4c:	2110      	movs	r1, #16
24013a4e:	4630      	mov	r0, r6
                toggled = 0;
24013a50:	9401      	str	r4, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
24013a52:	f7f4 f9c1 	bl	24007dd8 <lv_event_send>
24013a56:	4605      	mov	r5, r0
}
24013a58:	4628      	mov	r0, r5
24013a5a:	b002      	add	sp, #8
24013a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
24013a60:	2103      	movs	r1, #3
24013a62:	4630      	mov	r0, r6
24013a64:	462c      	mov	r4, r5
24013a66:	f7ff ff87 	bl	24013978 <lv_btn_set_state>
                toggled = 1;
24013a6a:	e7ee      	b.n	24013a4a <lv_btn_signal+0x5a>
24013a6c:	24035cf4 	.word	0x24035cf4
24013a70:	900ff29b 	.word	0x900ff29b

24013a74 <lv_area_copy>:
    while(len) {
24013a74:	3901      	subs	r1, #1
24013a76:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24013a7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24013a7e:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
24013a82:	4298      	cmp	r0, r3
24013a84:	d1f9      	bne.n	24013a7a <lv_area_copy+0x6>
}
24013a86:	4770      	bx	lr

24013a88 <invalidate_button_area>:
    return i;
}

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
24013a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
24013a8c:	4299      	cmp	r1, r3
{
24013a8e:	b530      	push	{r4, r5, lr}
24013a90:	4604      	mov	r4, r0
24013a92:	b085      	sub	sp, #20
24013a94:	460d      	mov	r5, r1
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
24013a96:	d027      	beq.n	24013ae8 <invalidate_button_area+0x60>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013a98:	f7f5 fb5f 	bl	2400915a <lv_obj_get_ext_attr>
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
24013a9c:	6841      	ldr	r1, [r0, #4]
24013a9e:	4668      	mov	r0, sp
24013aa0:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
24013aa4:	f7ff ffe6 	bl	24013a74 <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
24013aa8:	a902      	add	r1, sp, #8
24013aaa:	4620      	mov	r0, r4
24013aac:	f7f4 fc07 	bl	240082be <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
24013ab0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
24013ab4:	f8bd 3000 	ldrh.w	r3, [sp]
    btn_area.y1 += btnm_area.y1;
    btn_area.x2 += btnm_area.x1;
    btn_area.y2 += btnm_area.y1;

    lv_obj_invalidate_area(btnm, &btn_area);
24013ab8:	4620      	mov	r0, r4
    btn_area.y1 += btnm_area.y1;
24013aba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.x1 += btnm_area.x1;
24013abe:	4413      	add	r3, r2
24013ac0:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += btnm_area.y1;
24013ac4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
24013ac8:	4419      	add	r1, r3
24013aca:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.x2 += btnm_area.x1;
24013ace:	f8bd 1004 	ldrh.w	r1, [sp, #4]
24013ad2:	440a      	add	r2, r1
    lv_obj_invalidate_area(btnm, &btn_area);
24013ad4:	4669      	mov	r1, sp
    btn_area.x2 += btnm_area.x1;
24013ad6:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += btnm_area.y1;
24013ada:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24013ade:	4413      	add	r3, r2
24013ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(btnm, &btn_area);
24013ae4:	f7f4 fa6c 	bl	24007fc0 <lv_obj_invalidate_area>
}
24013ae8:	b005      	add	sp, #20
24013aea:	bd30      	pop	{r4, r5, pc}

24013aec <get_button_from_point>:
{
24013aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013af0:	4604      	mov	r4, r0
    for(i = 0; i < ext->btn_cnt; i++) {
24013af2:	f04f 0b00 	mov.w	fp, #0
{
24013af6:	ed2d 8b02 	vpush	{d8}
24013afa:	b089      	sub	sp, #36	; 0x24
24013afc:	ee08 1a10 	vmov	s16, r1
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013b00:	f7f5 fb2b 	bl	2400915a <lv_obj_get_ext_attr>
24013b04:	4681      	mov	r9, r0
    lv_obj_get_coords(btnm, &btnm_cords);
24013b06:	a904      	add	r1, sp, #16
24013b08:	4620      	mov	r0, r4
24013b0a:	f7f4 fbd8 	bl	240082be <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(btnm);
24013b0e:	4620      	mov	r0, r4
24013b10:	f7f4 fd7d 	bl	2400860e <lv_obj_get_width>
24013b14:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(btnm);
24013b16:	4620      	mov	r0, r4
24013b18:	f7f4 fd7f 	bl	2400861a <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24013b1c:	2212      	movs	r2, #18
24013b1e:	2100      	movs	r1, #0
24013b20:	9001      	str	r0, [sp, #4]
24013b22:	4620      	mov	r0, r4
24013b24:	f7f4 fe30 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013b28:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24013b2a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013b2c:	2100      	movs	r1, #0
24013b2e:	4620      	mov	r0, r4
24013b30:	f7f4 fe2a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013b34:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013b36:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013b38:	2100      	movs	r1, #0
24013b3a:	4620      	mov	r0, r4
24013b3c:	f7f4 fe24 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013b40:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013b42:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013b44:	2100      	movs	r1, #0
24013b46:	4620      	mov	r0, r4
24013b48:	f7f4 fe1e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24013b4c:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013b4e:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24013b50:	2100      	movs	r1, #0
24013b52:	4620      	mov	r0, r4
24013b54:	f7f4 fe18 	bl	24008788 <_lv_obj_get_style_int>
    pinner = (pinner / 2) + 1 + (pinner & 1);
24013b58:	f000 0401 	and.w	r4, r0, #1
24013b5c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
24013b60:	eb04 0463 	add.w	r4, r4, r3, asr #1
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013b64:	4653      	mov	r3, sl
    pinner = (pinner / 2) + 1 + (pinner & 1);
24013b66:	3401      	adds	r4, #1
24013b68:	b224      	sxth	r4, r4
    pinner = LV_MATH_MIN(pinner, BTN_EXTRA_CLICK_AREA_MAX);
24013b6a:	2c20      	cmp	r4, #32
24013b6c:	bfa8      	it	ge
24013b6e:	2420      	movge	r4, #32
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
24013b70:	2d20      	cmp	r5, #32
24013b72:	bfa8      	it	ge
24013b74:	2520      	movge	r5, #32
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013b76:	2e20      	cmp	r6, #32
24013b78:	bfa8      	it	ge
24013b7a:	2620      	movge	r6, #32
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
24013b7c:	2f20      	cmp	r7, #32
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
24013b7e:	b22d      	sxth	r5, r5
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
24013b80:	bfa8      	it	ge
24013b82:	2720      	movge	r7, #32
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013b84:	2b20      	cmp	r3, #32
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013b86:	eba8 0805 	sub.w	r8, r8, r5
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013b8a:	b236      	sxth	r6, r6
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013b8c:	bfa8      	it	ge
24013b8e:	2320      	movge	r3, #32
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
24013b90:	b23f      	sxth	r7, r7
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013b92:	9302      	str	r3, [sp, #8]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013b94:	f1a8 0302 	sub.w	r3, r8, #2
24013b98:	9303      	str	r3, [sp, #12]
24013b9a:	fa1f f88b 	uxth.w	r8, fp
    for(i = 0; i < ext->btn_cnt; i++) {
24013b9e:	f8b9 2014 	ldrh.w	r2, [r9, #20]
24013ba2:	4542      	cmp	r2, r8
24013ba4:	d949      	bls.n	24013c3a <get_button_from_point+0x14e>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
24013ba6:	f8d9 2004 	ldr.w	r2, [r9, #4]
24013baa:	fa1f f18b 	uxth.w	r1, fp
24013bae:	a806      	add	r0, sp, #24
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
24013bb0:	f10b 0b01 	add.w	fp, fp, #1
        lv_area_copy(&btn_area, &ext->button_areas[i]);
24013bb4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
24013bb8:	f7ff ff5c 	bl	24013a74 <lv_area_copy>
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013bbc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
24013bc0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
24013bc4:	4552      	cmp	r2, sl
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013bc6:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013bca:	440a      	add	r2, r1
24013bcc:	bfd6      	itet	le
24013bce:	9b02      	ldrle	r3, [sp, #8]
        else btn_area.x1 += btnm_cords.x1 - pinner;
24013bd0:	1b12      	subgt	r2, r2, r4
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
24013bd2:	1ad2      	suble	r2, r2, r3
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013bd4:	42b0      	cmp	r0, r6
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013bd6:	9b03      	ldr	r3, [sp, #12]
        else btn_area.x1 += btnm_cords.x1 - pinner;
24013bd8:	b212      	sxth	r2, r2
24013bda:	f8ad 2018 	strh.w	r2, [sp, #24]
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013bde:	f8bd 2012 	ldrh.w	r2, [sp, #18]
24013be2:	eb02 0100 	add.w	r1, r2, r0
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013be6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
24013bea:	b289      	uxth	r1, r1
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
24013bec:	bfd4      	ite	le
24013bee:	1b89      	suble	r1, r1, r6
        else btn_area.y1 += btnm_cords.y1 - pinner;
24013bf0:	1b09      	subgt	r1, r1, r4
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013bf2:	4298      	cmp	r0, r3
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
24013bf4:	9b01      	ldr	r3, [sp, #4]
        else btn_area.y1 += btnm_cords.y1 - pinner;
24013bf6:	b209      	sxth	r1, r1
24013bf8:	f8ad 101a 	strh.w	r1, [sp, #26]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013bfc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
24013c00:	4401      	add	r1, r0
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
24013c02:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
24013c06:	b289      	uxth	r1, r1
24013c08:	4402      	add	r2, r0
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
24013c0a:	bfac      	ite	ge
24013c0c:	1949      	addge	r1, r1, r5
        else btn_area.x2 += btnm_cords.x1 + pinner;
24013c0e:	1909      	addlt	r1, r1, r4
24013c10:	b292      	uxth	r2, r2
24013c12:	b209      	sxth	r1, r1
24013c14:	f8ad 101c 	strh.w	r1, [sp, #28]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
24013c18:	1bd9      	subs	r1, r3, r7
24013c1a:	3902      	subs	r1, #2
24013c1c:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
24013c1e:	ee18 1a10 	vmov	r1, s16
24013c22:	a806      	add	r0, sp, #24
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
24013c24:	bfac      	ite	ge
24013c26:	19d2      	addge	r2, r2, r7
        else btn_area.y2 += btnm_cords.y1 + pinner;
24013c28:	1912      	addlt	r2, r2, r4
24013c2a:	b212      	sxth	r2, r2
24013c2c:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
24013c30:	2200      	movs	r2, #0
24013c32:	f7fb fada 	bl	2400f1ea <_lv_area_is_point_on>
24013c36:	2800      	cmp	r0, #0
24013c38:	d0af      	beq.n	24013b9a <get_button_from_point+0xae>
    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
24013c3a:	f8b9 2014 	ldrh.w	r2, [r9, #20]
24013c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
24013c42:	4542      	cmp	r2, r8
24013c44:	bf08      	it	eq
24013c46:	4698      	moveq	r8, r3
}
24013c48:	4640      	mov	r0, r8
24013c4a:	b009      	add	sp, #36	; 0x24
24013c4c:	ecbd 8b02 	vpop	{d8}
24013c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

24013c54 <lv_btnmatrix_set_map>:
{
24013c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(strlen(map[i]) != 0) {
24013c58:	2700      	movs	r7, #0
{
24013c5a:	b097      	sub	sp, #92	; 0x5c
24013c5c:	4604      	mov	r4, r0
24013c5e:	460e      	mov	r6, r1
    uint16_t btn_cnt = 0;
24013c60:	463d      	mov	r5, r7
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013c62:	f7f5 fa7a 	bl	2400915a <lv_obj_get_ext_attr>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
24013c66:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 24013f54 <lv_btnmatrix_set_map+0x300>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013c6a:	4681      	mov	r9, r0
    while(strlen(map[i]) != 0) {
24013c6c:	b2bb      	uxth	r3, r7
24013c6e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
24013c72:	f890 8000 	ldrb.w	r8, [r0]
24013c76:	f1b8 0f00 	cmp.w	r8, #0
24013c7a:	f040 80a5 	bne.w	24013dc8 <lv_btnmatrix_set_map+0x174>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013c7e:	4620      	mov	r0, r4
24013c80:	f7f5 fa6b 	bl	2400915a <lv_obj_get_ext_attr>
    if(btn_cnt == ext->btn_cnt) return;
24013c84:	8a83      	ldrh	r3, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013c86:	4607      	mov	r7, r0
    if(btn_cnt == ext->btn_cnt) return;
24013c88:	42ab      	cmp	r3, r5
24013c8a:	d01e      	beq.n	24013cca <lv_btnmatrix_set_map+0x76>
    if(ext->button_areas != NULL) {
24013c8c:	6840      	ldr	r0, [r0, #4]
24013c8e:	b118      	cbz	r0, 24013c98 <lv_btnmatrix_set_map+0x44>
        lv_mem_free(ext->button_areas);
24013c90:	f7fb fea4 	bl	2400f9dc <lv_mem_free>
        ext->button_areas = NULL;
24013c94:	f8c7 8004 	str.w	r8, [r7, #4]
    if(ext->ctrl_bits != NULL) {
24013c98:	68b8      	ldr	r0, [r7, #8]
24013c9a:	b118      	cbz	r0, 24013ca4 <lv_btnmatrix_set_map+0x50>
        lv_mem_free(ext->ctrl_bits);
24013c9c:	f7fb fe9e 	bl	2400f9dc <lv_mem_free>
        ext->ctrl_bits = NULL;
24013ca0:	2300      	movs	r3, #0
24013ca2:	60bb      	str	r3, [r7, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
24013ca4:	00e8      	lsls	r0, r5, #3
24013ca6:	f7fb fe69 	bl	2400f97c <lv_mem_alloc>
24013caa:	6078      	str	r0, [r7, #4]
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
24013cac:	0068      	lsls	r0, r5, #1
24013cae:	f7fb fe65 	bl	2400f97c <lv_mem_alloc>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
24013cb2:	687b      	ldr	r3, [r7, #4]
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
24013cb4:	60b8      	str	r0, [r7, #8]
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
24013cb6:	2b00      	cmp	r3, #0
24013cb8:	f000 808e 	beq.w	24013dd8 <lv_btnmatrix_set_map+0x184>
24013cbc:	2800      	cmp	r0, #0
24013cbe:	bf08      	it	eq
24013cc0:	2500      	moveq	r5, #0
    _lv_memset_00(ext->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
24013cc2:	0069      	lsls	r1, r5, #1
24013cc4:	f7fc f89c 	bl	2400fe00 <_lv_memset_00>
    ext->btn_cnt = btn_cnt;
24013cc8:	82bd      	strh	r5, [r7, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24013cca:	2212      	movs	r2, #18
24013ccc:	2100      	movs	r1, #0
24013cce:	4620      	mov	r0, r4
    ext->map_p = map;
24013cd0:	f8c9 6000 	str.w	r6, [r9]
24013cd4:	f7f4 fd58 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013cd8:	2213      	movs	r2, #19
24013cda:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24013cdc:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013cde:	4620      	mov	r0, r4
    uint8_t line_cnt = 1;
24013ce0:	f04f 0b01 	mov.w	fp, #1
24013ce4:	f7f4 fd50 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013ce8:	2210      	movs	r2, #16
24013cea:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24013cec:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013cee:	4620      	mov	r0, r4
24013cf0:	f7f4 fd4a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013cf4:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24013cf6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013cf8:	2100      	movs	r1, #0
24013cfa:	4620      	mov	r0, r4
24013cfc:	f7f4 fd44 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24013d00:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24013d02:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24013d04:	2214      	movs	r2, #20
24013d06:	4620      	mov	r0, r4
24013d08:	f7f4 fd3e 	bl	24008788 <_lv_obj_get_style_int>
24013d0c:	9006      	str	r0, [sp, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
24013d0e:	4620      	mov	r0, r4
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
24013d10:	fa1f fa85 	uxth.w	sl, r5
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
24013d14:	f7f4 fc7b 	bl	2400860e <lv_obj_get_width>
24013d18:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
24013d1c:	fa17 f585 	uxtah	r5, r7, r5
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
24013d20:	930c      	str	r3, [sp, #48]	; 0x30
24013d22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
24013d26:	9308      	str	r3, [sp, #32]
24013d28:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
24013d2c:	fa12 f383 	uxtah	r3, r2, r3
24013d30:	1ac0      	subs	r0, r0, r3
24013d32:	b283      	uxth	r3, r0
24013d34:	930d      	str	r3, [sp, #52]	; 0x34
24013d36:	b203      	sxth	r3, r0
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
24013d38:	4620      	mov	r0, r4
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
24013d3a:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
24013d3c:	f7f4 fc6d 	bl	2400861a <lv_obj_get_height>
24013d40:	1b40      	subs	r0, r0, r5
        if(strcmp(map[li], "\n") == 0) line_cnt++;
24013d42:	4984      	ldr	r1, [pc, #528]	; (24013f54 <lv_btnmatrix_set_map+0x300>)
    for(li = 0; strlen(map[li]) != 0; li++) {
24013d44:	2500      	movs	r5, #0
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
24013d46:	fa1f f880 	uxth.w	r8, r0
    for(li = 0; strlen(map[li]) != 0; li++) {
24013d4a:	b2eb      	uxtb	r3, r5
24013d4c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
24013d50:	7803      	ldrb	r3, [r0, #0]
24013d52:	2b00      	cmp	r3, #0
24013d54:	d142      	bne.n	24013ddc <lv_btnmatrix_set_map+0x188>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
24013d56:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    uint16_t btn_i          = 0; /*Act. index of button areas*/
24013d5a:	461d      	mov	r5, r3
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
24013d5c:	9906      	ldr	r1, [sp, #24]
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
24013d5e:	ea6f 030a 	mvn.w	r3, sl
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
24013d62:	9202      	str	r2, [sp, #8]
24013d64:	f10b 32ff 	add.w	r2, fp, #4294967295
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
24013d68:	9312      	str	r3, [sp, #72]	; 0x48
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
24013d6a:	fb12 f201 	smulbb	r2, r2, r1
24013d6e:	eba8 0802 	sub.w	r8, r8, r2
    btn_h            = (btn_h + line_cnt / 2) / line_cnt;
24013d72:	ea4f 025b 	mov.w	r2, fp, lsr #1
24013d76:	fa02 f888 	sxtah	r8, r2, r8
24013d7a:	fb98 f8fb 	sdiv	r8, r8, fp
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
24013d7e:	f108 38ff 	add.w	r8, r8, #4294967295
24013d82:	fa0f f288 	sxth.w	r2, r8
24013d86:	9204      	str	r2, [sp, #16]
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
24013d88:	f04f 0b00 	mov.w	fp, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
24013d8c:	46da      	mov	sl, fp
24013d8e:	fa1f f88b 	uxth.w	r8, fp
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
24013d92:	4970      	ldr	r1, [pc, #448]	; (24013f54 <lv_btnmatrix_set_map+0x300>)
24013d94:	eb06 0388 	add.w	r3, r6, r8, lsl #2
24013d98:	f8cd 800c 	str.w	r8, [sp, #12]
24013d9c:	930e      	str	r3, [sp, #56]	; 0x38
24013d9e:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
24013da2:	4618      	mov	r0, r3
24013da4:	9305      	str	r3, [sp, #20]
24013da6:	f006 fbfb 	bl	2401a5a0 <__strcmp_veneer>
24013daa:	9b05      	ldr	r3, [sp, #20]
24013dac:	781b      	ldrb	r3, [r3, #0]
24013dae:	b378      	cbz	r0, 24013e10 <lv_btnmatrix_set_map+0x1bc>
24013db0:	f10b 0b01 	add.w	fp, fp, #1
24013db4:	b9e3      	cbnz	r3, 24013df0 <lv_btnmatrix_set_map+0x19c>
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
24013db6:	4620      	mov	r0, r4
24013db8:	f7f4 fc2f 	bl	2400861a <lv_obj_get_height>
24013dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
24013dbe:	1bdb      	subs	r3, r3, r7
24013dc0:	4418      	add	r0, r3
24013dc2:	b203      	sxth	r3, r0
24013dc4:	9304      	str	r3, [sp, #16]
24013dc6:	e025      	b.n	24013e14 <lv_btnmatrix_set_map+0x1c0>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
24013dc8:	4651      	mov	r1, sl
24013dca:	f006 fbe9 	bl	2401a5a0 <__strcmp_veneer>
24013dce:	b108      	cbz	r0, 24013dd4 <lv_btnmatrix_set_map+0x180>
            btn_cnt++;
24013dd0:	3501      	adds	r5, #1
24013dd2:	b2ad      	uxth	r5, r5
        i++;
24013dd4:	3701      	adds	r7, #1
24013dd6:	e749      	b.n	24013c6c <lv_btnmatrix_set_map+0x18>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
24013dd8:	461d      	mov	r5, r3
24013dda:	e772      	b.n	24013cc2 <lv_btnmatrix_set_map+0x6e>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
24013ddc:	f006 fbe0 	bl	2401a5a0 <__strcmp_veneer>
24013de0:	495c      	ldr	r1, [pc, #368]	; (24013f54 <lv_btnmatrix_set_map+0x300>)
24013de2:	b918      	cbnz	r0, 24013dec <lv_btnmatrix_set_map+0x198>
24013de4:	f10b 0b01 	add.w	fp, fp, #1
24013de8:	fa5f fb8b 	uxtb.w	fp, fp
    for(li = 0; strlen(map[li]) != 0; li++) {
24013dec:	3501      	adds	r5, #1
24013dee:	e7ac      	b.n	24013d4a <lv_btnmatrix_set_map+0xf6>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
24013df0:	9a03      	ldr	r2, [sp, #12]
24013df2:	f8d9 3008 	ldr.w	r3, [r9, #8]
24013df6:	442a      	add	r2, r5
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
24013df8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
24013dfc:	f003 0307 	and.w	r3, r3, #7
24013e00:	2b01      	cmp	r3, #1
24013e02:	bf2c      	ite	cs
24013e04:	449a      	addcs	sl, r3
24013e06:	f10a 0a01 	addcc.w	sl, sl, #1
24013e0a:	fa1f fa8a 	uxth.w	sl, sl
            btn_cnt++;
24013e0e:	e7be      	b.n	24013d8e <lv_btnmatrix_set_map+0x13a>
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
24013e10:	2b00      	cmp	r3, #0
24013e12:	d0d0      	beq.n	24013db6 <lv_btnmatrix_set_map+0x162>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(btnm);
24013e14:	4620      	mov	r0, r4
24013e16:	f7f4 fc66 	bl	240086e6 <lv_obj_get_base_dir>
24013e1a:	9005      	str	r0, [sp, #20]
        if(btn_cnt != 0) {
24013e1c:	f1b8 0f00 	cmp.w	r8, #0
24013e20:	d074      	beq.n	24013f0c <lv_btnmatrix_set_map+0x2b8>
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
24013e22:	9a02      	ldr	r2, [sp, #8]
24013e24:	f10a 33ff 	add.w	r3, sl, #4294967295
24013e28:	44a8      	add	r8, r5
            unit_act_cnt = 0;
24013e2a:	f04f 0b00 	mov.w	fp, #0
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
24013e2e:	fb13 f302 	smulbb	r3, r3, r2
24013e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
24013e34:	1ad3      	subs	r3, r2, r3
24013e36:	b21b      	sxth	r3, r3
24013e38:	9309      	str	r3, [sp, #36]	; 0x24
            for(i = 0; i < btn_cnt; i++) {
24013e3a:	fa1f f388 	uxth.w	r3, r8
24013e3e:	9310      	str	r3, [sp, #64]	; 0x40
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
24013e40:	9b08      	ldr	r3, [sp, #32]
24013e42:	43db      	mvns	r3, r3
24013e44:	9311      	str	r3, [sp, #68]	; 0x44
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
24013e46:	9b04      	ldr	r3, [sp, #16]
24013e48:	18fb      	adds	r3, r7, r3
24013e4a:	b21b      	sxth	r3, r3
24013e4c:	930b      	str	r3, [sp, #44]	; 0x2c
                uint8_t btn_unit_w = get_button_width(ext->ctrl_bits[btn_i]);
24013e4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
24013e52:	9902      	ldr	r1, [sp, #8]
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
24013e54:	f833 8015 	ldrh.w	r8, [r3, r5, lsl #1]
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
24013e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
24013e5a:	f008 0807 	and.w	r8, r8, #7
                if(base_dir == LV_BIDI_DIR_RTL)  {
24013e5e:	9805      	ldr	r0, [sp, #20]
24013e60:	f1b8 0f01 	cmp.w	r8, #1
24013e64:	bf38      	it	cc
24013e66:	f04f 0801 	movcc.w	r8, #1
24013e6a:	2801      	cmp	r0, #1
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
24013e6c:	fb18 f303 	smulbb	r3, r8, r3
24013e70:	f108 32ff 	add.w	r2, r8, #4294967295
24013e74:	fb93 f3fa 	sdiv	r3, r3, sl
24013e78:	fb12 f201 	smulbb	r2, r2, r1
24013e7c:	441a      	add	r2, r3
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
24013e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24013e80:	fb0b f103 	mul.w	r1, fp, r3
24013e84:	9b02      	ldr	r3, [sp, #8]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
24013e86:	f102 32ff 	add.w	r2, r2, #4294967295
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
24013e8a:	fb13 f30b 	smulbb	r3, r3, fp
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
24013e8e:	b292      	uxth	r2, r2
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
24013e90:	b29b      	uxth	r3, r3
24013e92:	fb91 f1fa 	sdiv	r1, r1, sl
24013e96:	b289      	uxth	r1, r1
                if(base_dir == LV_BIDI_DIR_RTL)  {
24013e98:	d147      	bne.n	24013f2a <lv_btnmatrix_set_map+0x2d6>
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
24013e9a:	4620      	mov	r0, r4
24013e9c:	9213      	str	r2, [sp, #76]	; 0x4c
24013e9e:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
24013ea2:	f7f4 fbb4 	bl	2400860e <lv_obj_get_width>
24013ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
24013ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
24013eaa:	9914      	ldr	r1, [sp, #80]	; 0x50
24013eac:	1ad3      	subs	r3, r2, r3
24013eae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
24013eb0:	1a5b      	subs	r3, r3, r1
24013eb2:	1a9b      	subs	r3, r3, r2
24013eb4:	4403      	add	r3, r0
24013eb6:	b219      	sxth	r1, r3
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
24013eb8:	1853      	adds	r3, r2, r1
24013eba:	2d00      	cmp	r5, #0
24013ebc:	d03a      	beq.n	24013f34 <lv_btnmatrix_set_map+0x2e0>
24013ebe:	9806      	ldr	r0, [sp, #24]
24013ec0:	2800      	cmp	r0, #0
24013ec2:	d137      	bne.n	24013f34 <lv_btnmatrix_set_map+0x2e0>
24013ec4:	9807      	ldr	r0, [sp, #28]
24013ec6:	4281      	cmp	r1, r0
24013ec8:	d002      	beq.n	24013ed0 <lv_btnmatrix_set_map+0x27c>
24013eca:	9805      	ldr	r0, [sp, #20]
24013ecc:	2801      	cmp	r0, #1
24013ece:	d109      	bne.n	24013ee4 <lv_btnmatrix_set_map+0x290>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
24013ed0:	fa01 fc82 	sxtah	ip, r1, r2
24013ed4:	980f      	ldr	r0, [sp, #60]	; 0x3c
24013ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24013ed8:	1a80      	subs	r0, r0, r2
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
24013eda:	4584      	cmp	ip, r0
24013edc:	d12a      	bne.n	24013f34 <lv_btnmatrix_set_map+0x2e0>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
24013ede:	9a05      	ldr	r2, [sp, #20]
24013ee0:	2a01      	cmp	r2, #1
24013ee2:	d127      	bne.n	24013f34 <lv_btnmatrix_set_map+0x2e0>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
24013ee4:	f8d9 0004 	ldr.w	r0, [r9, #4]
24013ee8:	b21b      	sxth	r3, r3
24013eea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24013eec:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
24013ef0:	f930 1c04 	ldrsh.w	r1, [r0, #-4]
24013ef4:	9200      	str	r2, [sp, #0]
24013ef6:	463a      	mov	r2, r7
                btn_i++;
24013ef8:	3501      	adds	r5, #1
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
24013efa:	f7fb f8fd 	bl	2400f0f8 <lv_area_set>
            for(i = 0; i < btn_cnt; i++) {
24013efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
                unit_act_cnt += btn_unit_w;
24013f00:	44d8      	add	r8, fp
                btn_i++;
24013f02:	b2ad      	uxth	r5, r5
                unit_act_cnt += btn_unit_w;
24013f04:	fa1f fb88 	uxth.w	fp, r8
            for(i = 0; i < btn_cnt; i++) {
24013f08:	429d      	cmp	r5, r3
24013f0a:	d1a0      	bne.n	24013e4e <lv_btnmatrix_set_map+0x1fa>
        act_y += btn_h + inner + 1;
24013f0c:	9b02      	ldr	r3, [sp, #8]
24013f0e:	9a04      	ldr	r2, [sp, #16]
24013f10:	3301      	adds	r3, #1
24013f12:	443b      	add	r3, r7
24013f14:	4413      	add	r3, r2
24013f16:	b21f      	sxth	r7, r3
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
24013f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
24013f1a:	681b      	ldr	r3, [r3, #0]
24013f1c:	781b      	ldrb	r3, [r3, #0]
24013f1e:	b193      	cbz	r3, 24013f46 <lv_btnmatrix_set_map+0x2f2>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
24013f20:	9b03      	ldr	r3, [sp, #12]
24013f22:	3301      	adds	r3, #1
24013f24:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    while(1) {
24013f28:	e72e      	b.n	24013d88 <lv_btnmatrix_set_map+0x134>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
24013f2a:	980c      	ldr	r0, [sp, #48]	; 0x30
24013f2c:	4403      	add	r3, r0
24013f2e:	4419      	add	r1, r3
24013f30:	b209      	sxth	r1, r1
24013f32:	e7c1      	b.n	24013eb8 <lv_btnmatrix_set_map+0x264>
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
24013f34:	f8d9 0004 	ldr.w	r0, [r9, #4]
24013f38:	b21b      	sxth	r3, r3
24013f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24013f3c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
24013f40:	9200      	str	r2, [sp, #0]
24013f42:	463a      	mov	r2, r7
24013f44:	e7d8      	b.n	24013ef8 <lv_btnmatrix_set_map+0x2a4>
    lv_obj_invalidate(btnm);
24013f46:	4620      	mov	r0, r4
}
24013f48:	b017      	add	sp, #92	; 0x5c
24013f4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
24013f4e:	f7f4 b849 	b.w	24007fe4 <lv_obj_invalidate>
24013f52:	bf00      	nop
24013f54:	900ff2a2 	.word	0x900ff2a2

24013f58 <lv_btnmatrix_set_ctrl_map>:
{
24013f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
24013f5a:	4605      	mov	r5, r0
24013f5c:	9101      	str	r1, [sp, #4]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013f5e:	f7f5 f8fc 	bl	2400915a <lv_obj_get_ext_attr>
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
24013f62:	8a82      	ldrh	r2, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24013f64:	4604      	mov	r4, r0
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
24013f66:	9901      	ldr	r1, [sp, #4]
24013f68:	0052      	lsls	r2, r2, #1
24013f6a:	6880      	ldr	r0, [r0, #8]
24013f6c:	f7fb fd9e 	bl	2400faac <_lv_memcpy>
    lv_btnmatrix_set_map(btnm, ext->map_p);
24013f70:	6821      	ldr	r1, [r4, #0]
24013f72:	4628      	mov	r0, r5
}
24013f74:	b003      	add	sp, #12
24013f76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_btnmatrix_set_map(btnm, ext->map_p);
24013f7a:	f7ff be6b 	b.w	24013c54 <lv_btnmatrix_set_map>
	...

24013f80 <lv_btnmatrix_create>:
{
24013f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013f82:	460e      	mov	r6, r1
    lv_obj_t * btnm = lv_obj_create(par, copy);
24013f84:	f7f4 f9c6 	bl	24008314 <lv_obj_create>
    if(btnm == NULL) return NULL;
24013f88:	4604      	mov	r4, r0
24013f8a:	b180      	cbz	r0, 24013fae <lv_btnmatrix_create+0x2e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
24013f8c:	4d2c      	ldr	r5, [pc, #176]	; (24014040 <lv_btnmatrix_create+0xc0>)
24013f8e:	682b      	ldr	r3, [r5, #0]
24013f90:	b913      	cbnz	r3, 24013f98 <lv_btnmatrix_create+0x18>
24013f92:	f7f5 f8de 	bl	24009152 <lv_obj_get_signal_cb>
24013f96:	6028      	str	r0, [r5, #0]
    lv_btnmatrix_ext_t * ext = lv_obj_allocate_ext_attr(btnm, sizeof(lv_btnmatrix_ext_t));
24013f98:	2120      	movs	r1, #32
24013f9a:	4620      	mov	r0, r4
24013f9c:	f7f3 ff36 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24013fa0:	2300      	movs	r3, #0
24013fa2:	4605      	mov	r5, r0
24013fa4:	b928      	cbnz	r0, 24013fb2 <lv_btnmatrix_create+0x32>
        lv_obj_del(btnm);
24013fa6:	4620      	mov	r0, r4
        return NULL;
24013fa8:	462c      	mov	r4, r5
        lv_obj_del(btnm);
24013faa:	f7f4 f935 	bl	24008218 <lv_obj_del>
}
24013fae:	4620      	mov	r0, r4
24013fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ext->ctrl_bits      = NULL;
24013fb2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ext->map_p          = NULL;
24013fb6:	6003      	str	r3, [r0, #0]
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
24013fb8:	f04f 33ff 	mov.w	r3, #4294967295
24013fbc:	4a21      	ldr	r2, [pc, #132]	; (24014044 <lv_btnmatrix_create+0xc4>)
    lv_style_list_init(&ext->style_btn);
24013fbe:	f100 070c 	add.w	r7, r0, #12
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
24013fc2:	e9c0 2305 	strd	r2, r3, [r0, #20]
    ext->recolor        = 0;
24013fc6:	7f03      	ldrb	r3, [r0, #28]
24013fc8:	f023 0303 	bic.w	r3, r3, #3
24013fcc:	7703      	strb	r3, [r0, #28]
    lv_style_list_init(&ext->style_btn);
24013fce:	4638      	mov	r0, r7
24013fd0:	f7f6 faf8 	bl	2400a5c4 <lv_style_list_init>
    ext->style_btn.ignore_trans = 1;
24013fd4:	7c6b      	ldrb	r3, [r5, #17]
24013fd6:	f043 0302 	orr.w	r3, r3, #2
24013fda:	746b      	strb	r3, [r5, #17]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
24013fdc:	4d1a      	ldr	r5, [pc, #104]	; (24014048 <lv_btnmatrix_create+0xc8>)
24013fde:	682b      	ldr	r3, [r5, #0]
24013fe0:	b91b      	cbnz	r3, 24013fea <lv_btnmatrix_create+0x6a>
24013fe2:	4620      	mov	r0, r4
24013fe4:	f7f5 f8b7 	bl	24009156 <lv_obj_get_design_cb>
24013fe8:	6028      	str	r0, [r5, #0]
    lv_obj_set_signal_cb(btnm, lv_btnmatrix_signal);
24013fea:	4918      	ldr	r1, [pc, #96]	; (2401404c <lv_btnmatrix_create+0xcc>)
24013fec:	4620      	mov	r0, r4
24013fee:	f7f3 ff03 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btnm, lv_btnmatrix_design);
24013ff2:	4917      	ldr	r1, [pc, #92]	; (24014050 <lv_btnmatrix_create+0xd0>)
24013ff4:	4620      	mov	r0, r4
24013ff6:	f7f3 ff07 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24013ffa:	b976      	cbnz	r6, 2401401a <lv_btnmatrix_create+0x9a>
        lv_btnmatrix_set_map(btnm, lv_btnmatrix_def_map);
24013ffc:	4620      	mov	r0, r4
24013ffe:	4915      	ldr	r1, [pc, #84]	; (24014054 <lv_btnmatrix_create+0xd4>)
24014000:	f7ff fe28 	bl	24013c54 <lv_btnmatrix_set_map>
        lv_obj_set_size(btnm, LV_DPI * 2, LV_DPI * 1);
24014004:	4620      	mov	r0, r4
24014006:	2282      	movs	r2, #130	; 0x82
24014008:	f44f 7182 	mov.w	r1, #260	; 0x104
2401400c:	f7f4 f8b0 	bl	24008170 <lv_obj_set_size>
        lv_theme_apply(btnm, LV_THEME_BTNMATRIX);
24014010:	2105      	movs	r1, #5
24014012:	4620      	mov	r0, r4
24014014:	f7fc ff56 	bl	24010ec4 <lv_theme_apply>
24014018:	e7c9      	b.n	24013fae <lv_btnmatrix_create+0x2e>
        lv_btnmatrix_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
2401401a:	4630      	mov	r0, r6
2401401c:	f7f5 f89d 	bl	2400915a <lv_obj_get_ext_attr>
24014020:	4605      	mov	r5, r0
        lv_btnmatrix_set_map(btnm, copy_ext->map_p);
24014022:	6801      	ldr	r1, [r0, #0]
24014024:	4620      	mov	r0, r4
24014026:	f7ff fe15 	bl	24013c54 <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(btnm, copy_ext->ctrl_bits);
2401402a:	68a9      	ldr	r1, [r5, #8]
2401402c:	4620      	mov	r0, r4
2401402e:	f7ff ff93 	bl	24013f58 <lv_btnmatrix_set_ctrl_map>
        lv_style_list_copy(&ext->style_btn, &copy_ext->style_btn);
24014032:	f105 010c 	add.w	r1, r5, #12
24014036:	4638      	mov	r0, r7
24014038:	f7f6 fd46 	bl	2400aac8 <lv_style_list_copy>
2401403c:	e7b7      	b.n	24013fae <lv_btnmatrix_create+0x2e>
2401403e:	bf00      	nop
24014040:	24035cfc 	.word	0x24035cfc
24014044:	ffff0000 	.word	0xffff0000
24014048:	24035cf8 	.word	0x24035cf8
2401404c:	24014171 	.word	0x24014171
24014050:	240144a5 	.word	0x240144a5
24014054:	2401a6f8 	.word	0x2401a6f8

24014058 <lv_btnmatrix_set_focused_btn>:
{
24014058:	b538      	push	{r3, r4, r5, lr}
2401405a:	460c      	mov	r4, r1
2401405c:	4605      	mov	r5, r0
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
2401405e:	f7f5 f87c 	bl	2400915a <lv_obj_get_ext_attr>
    if(id >= ext->btn_cnt && id != LV_BTNMATRIX_BTN_NONE) return;
24014062:	8a83      	ldrh	r3, [r0, #20]
24014064:	42a3      	cmp	r3, r4
24014066:	d803      	bhi.n	24014070 <lv_btnmatrix_set_focused_btn+0x18>
24014068:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401406c:	429c      	cmp	r4, r3
2401406e:	d108      	bne.n	24014082 <lv_btnmatrix_set_focused_btn+0x2a>
    if(id == ext->btn_id_focused) return;
24014070:	8b03      	ldrh	r3, [r0, #24]
24014072:	42a3      	cmp	r3, r4
24014074:	d005      	beq.n	24014082 <lv_btnmatrix_set_focused_btn+0x2a>
    ext->btn_id_focused = id;
24014076:	8304      	strh	r4, [r0, #24]
    lv_obj_invalidate(btnm);
24014078:	4628      	mov	r0, r5
}
2401407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(btnm);
2401407e:	f7f3 bfb1 	b.w	24007fe4 <lv_obj_invalidate>
}
24014082:	bd38      	pop	{r3, r4, r5, pc}

24014084 <lv_btnmatrix_clear_btn_ctrl>:
{
24014084:	b570      	push	{r4, r5, r6, lr}
24014086:	460c      	mov	r4, r1
24014088:	4605      	mov	r5, r0
2401408a:	4616      	mov	r6, r2
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
2401408c:	f7f5 f865 	bl	2400915a <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
24014090:	8a83      	ldrh	r3, [r0, #20]
24014092:	42a3      	cmp	r3, r4
24014094:	d90c      	bls.n	240140b0 <lv_btnmatrix_clear_btn_ctrl+0x2c>
    ext->ctrl_bits[btn_id] &= (~ctrl);
24014096:	6881      	ldr	r1, [r0, #8]
    invalidate_button_area(btnm, btn_id);
24014098:	4628      	mov	r0, r5
    ext->ctrl_bits[btn_id] &= (~ctrl);
2401409a:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
2401409e:	ea23 0206 	bic.w	r2, r3, r6
240140a2:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
240140a6:	4621      	mov	r1, r4
}
240140a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(btnm, btn_id);
240140ac:	f7ff bcec 	b.w	24013a88 <invalidate_button_area>
}
240140b0:	bd70      	pop	{r4, r5, r6, pc}

240140b2 <lv_btnmatrix_clear_btn_ctrl_all>:
{
240140b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240140b4:	4606      	mov	r6, r0
240140b6:	460f      	mov	r7, r1
    for(i = 0; i < ext->btn_cnt; i++) {
240140b8:	2500      	movs	r5, #0
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
240140ba:	f7f5 f84e 	bl	2400915a <lv_obj_get_ext_attr>
240140be:	4604      	mov	r4, r0
    for(i = 0; i < ext->btn_cnt; i++) {
240140c0:	b2a9      	uxth	r1, r5
240140c2:	8aa3      	ldrh	r3, [r4, #20]
240140c4:	428b      	cmp	r3, r1
240140c6:	d800      	bhi.n	240140ca <lv_btnmatrix_clear_btn_ctrl_all+0x18>
}
240140c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_btnmatrix_clear_btn_ctrl(btnm, i, ctrl);
240140ca:	463a      	mov	r2, r7
240140cc:	4630      	mov	r0, r6
240140ce:	3501      	adds	r5, #1
240140d0:	f7ff ffd8 	bl	24014084 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
240140d4:	e7f4      	b.n	240140c0 <lv_btnmatrix_clear_btn_ctrl_all+0xe>

240140d6 <lv_btnmatrix_set_btn_ctrl>:
{
240140d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240140d8:	460c      	mov	r4, r1
240140da:	4607      	mov	r7, r0
240140dc:	4615      	mov	r5, r2
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
240140de:	f7f5 f83c 	bl	2400915a <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
240140e2:	8a83      	ldrh	r3, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
240140e4:	4606      	mov	r6, r0
    if(btn_id >= ext->btn_cnt) return;
240140e6:	42a3      	cmp	r3, r4
240140e8:	d915      	bls.n	24014116 <lv_btnmatrix_set_btn_ctrl+0x40>
    if(ext->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECK_STATE)) {
240140ea:	7f03      	ldrb	r3, [r0, #28]
240140ec:	079a      	lsls	r2, r3, #30
240140ee:	d506      	bpl.n	240140fe <lv_btnmatrix_set_btn_ctrl+0x28>
240140f0:	062b      	lsls	r3, r5, #24
240140f2:	d504      	bpl.n	240140fe <lv_btnmatrix_set_btn_ctrl+0x28>
        lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
240140f4:	2180      	movs	r1, #128	; 0x80
240140f6:	4638      	mov	r0, r7
240140f8:	f7ff ffdb 	bl	240140b2 <lv_btnmatrix_clear_btn_ctrl_all>
        ext->btn_id_act = btn_id;
240140fc:	8374      	strh	r4, [r6, #26]
    ext->ctrl_bits[btn_id] |= ctrl;
240140fe:	68b3      	ldr	r3, [r6, #8]
    invalidate_button_area(btnm, btn_id);
24014100:	4621      	mov	r1, r4
24014102:	4638      	mov	r0, r7
    ext->ctrl_bits[btn_id] |= ctrl;
24014104:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
24014108:	4315      	orrs	r5, r2
2401410a:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
}
2401410e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    invalidate_button_area(btnm, btn_id);
24014112:	f7ff bcb9 	b.w	24013a88 <invalidate_button_area>
}
24014116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24014118 <lv_btnmatrix_get_active_btn>:
{
24014118:	b508      	push	{r3, lr}
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
2401411a:	f7f5 f81e 	bl	2400915a <lv_obj_get_ext_attr>
}
2401411e:	8b40      	ldrh	r0, [r0, #26]
24014120:	bd08      	pop	{r3, pc}

24014122 <lv_btnmatrix_get_btn_ctrl>:
{
24014122:	b538      	push	{r3, r4, r5, lr}
24014124:	460c      	mov	r4, r1
24014126:	4615      	mov	r5, r2
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24014128:	f7f5 f817 	bl	2400915a <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return false;
2401412c:	8a83      	ldrh	r3, [r0, #20]
2401412e:	42a3      	cmp	r3, r4
24014130:	d907      	bls.n	24014142 <lv_btnmatrix_get_btn_ctrl+0x20>
    return (ext->ctrl_bits[btn_id] & ctrl) ? true : false;
24014132:	6883      	ldr	r3, [r0, #8]
24014134:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
24014138:	421d      	tst	r5, r3
2401413a:	bf14      	ite	ne
2401413c:	2001      	movne	r0, #1
2401413e:	2000      	moveq	r0, #0
}
24014140:	bd38      	pop	{r3, r4, r5, pc}
    if(btn_id >= ext->btn_cnt) return false;
24014142:	2000      	movs	r0, #0
24014144:	e7fc      	b.n	24014140 <lv_btnmatrix_get_btn_ctrl+0x1e>

24014146 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
24014146:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
24014148:	2280      	movs	r2, #128	; 0x80
{
2401414a:	4604      	mov	r4, r0
2401414c:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
2401414e:	f7ff ffe8 	bl	24014122 <lv_btnmatrix_get_btn_ctrl>
24014152:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
24014154:	2180      	movs	r1, #128	; 0x80
24014156:	4620      	mov	r0, r4
24014158:	f7ff ffab 	bl	240140b2 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
2401415c:	b136      	cbz	r6, 2401416c <make_one_button_toggled+0x26>
2401415e:	4629      	mov	r1, r5
24014160:	4620      	mov	r0, r4
24014162:	2280      	movs	r2, #128	; 0x80
}
24014164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
24014168:	f7ff bfb5 	b.w	240140d6 <lv_btnmatrix_set_btn_ctrl>
}
2401416c:	bd70      	pop	{r4, r5, r6, pc}
	...

24014170 <lv_btnmatrix_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
24014170:	2908      	cmp	r1, #8
{
24014172:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
24014176:	4605      	mov	r5, r0
24014178:	4688      	mov	r8, r1
2401417a:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
2401417c:	d11a      	bne.n	240141b4 <lv_btnmatrix_signal+0x44>
        info->result = lv_btnmatrix_get_style(btnm, info->part);
2401417e:	7814      	ldrb	r4, [r2, #0]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24014180:	f7f4 ffeb 	bl	2400915a <lv_obj_get_ext_attr>
    switch(part) {
24014184:	b164      	cbz	r4, 240141a0 <lv_btnmatrix_signal+0x30>
24014186:	2c01      	cmp	r4, #1
24014188:	d012      	beq.n	240141b0 <lv_btnmatrix_signal+0x40>
        info->result = lv_btnmatrix_get_style(btnm, info->part);
2401418a:	2300      	movs	r3, #0
        else return ancestor_signal(btnm, sign, param);
2401418c:	463a      	mov	r2, r7
2401418e:	4641      	mov	r1, r8
24014190:	4628      	mov	r0, r5
        info->result = lv_btnmatrix_get_style(btnm, info->part);
24014192:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(btnm, sign, param);
24014194:	4bb1      	ldr	r3, [pc, #708]	; (2401445c <lv_btnmatrix_signal+0x2ec>)
24014196:	681b      	ldr	r3, [r3, #0]
}
24014198:	b002      	add	sp, #8
2401419a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(btnm, sign, param);
2401419e:	4718      	bx	r3
            style_dsc_p = &btnm->style_list;
240141a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
240141a4:	2601      	movs	r6, #1
        info->result = lv_btnmatrix_get_style(btnm, info->part);
240141a6:	6078      	str	r0, [r7, #4]
}
240141a8:	4630      	mov	r0, r6
240141aa:	b002      	add	sp, #8
240141ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = &ext->style_btn;
240141b0:	300c      	adds	r0, #12
            break;
240141b2:	e7f7      	b.n	240141a4 <lv_btnmatrix_signal+0x34>
    res = ancestor_signal(btnm, sign, param);
240141b4:	4ba9      	ldr	r3, [pc, #676]	; (2401445c <lv_btnmatrix_signal+0x2ec>)
240141b6:	681b      	ldr	r3, [r3, #0]
240141b8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
240141ba:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
240141bc:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
240141be:	d1f3      	bne.n	240141a8 <lv_btnmatrix_signal+0x38>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
240141c0:	f1b8 0f07 	cmp.w	r8, #7
240141c4:	d106      	bne.n	240141d4 <lv_btnmatrix_signal+0x64>
240141c6:	49a6      	ldr	r1, [pc, #664]	; (24014460 <lv_btnmatrix_signal+0x2f0>)
240141c8:	4638      	mov	r0, r7
}
240141ca:	b002      	add	sp, #8
240141cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
240141d0:	f7f4 bff7 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
240141d4:	4628      	mov	r0, r5
240141d6:	f7f4 ffc0 	bl	2400915a <lv_obj_get_ext_attr>
240141da:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
240141dc:	f1b8 0f00 	cmp.w	r8, #0
240141e0:	d10a      	bne.n	240141f8 <lv_btnmatrix_signal+0x88>
        lv_obj_clean_style_list(btnm, LV_BTNMATRIX_PART_BTN);
240141e2:	4631      	mov	r1, r6
240141e4:	4628      	mov	r0, r5
240141e6:	f7f4 fa32 	bl	2400864e <lv_obj_clean_style_list>
        lv_mem_free(ext->button_areas);
240141ea:	6860      	ldr	r0, [r4, #4]
240141ec:	f7fb fbf6 	bl	2400f9dc <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
240141f0:	68a0      	ldr	r0, [r4, #8]
240141f2:	f7fb fbf3 	bl	2400f9dc <lv_mem_free>
240141f6:	e7d7      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
240141f8:	f1a8 0802 	sub.w	r8, r8, #2
240141fc:	f1b8 0f15 	cmp.w	r8, #21
24014200:	d8d2      	bhi.n	240141a8 <lv_btnmatrix_signal+0x38>
24014202:	a301      	add	r3, pc, #4	; (adr r3, 24014208 <lv_btnmatrix_signal+0x98>)
24014204:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
24014208:	24014261 	.word	0x24014261
2401420c:	240141a9 	.word	0x240141a9
24014210:	24014275 	.word	0x24014275
24014214:	240141a9 	.word	0x240141a9
24014218:	240141a9 	.word	0x240141a9
2401421c:	240141a9 	.word	0x240141a9
24014220:	240141a9 	.word	0x240141a9
24014224:	240141a9 	.word	0x240141a9
24014228:	240141a9 	.word	0x240141a9
2401422c:	24014295 	.word	0x24014295
24014230:	24014313 	.word	0x24014313
24014234:	2401444d 	.word	0x2401444d
24014238:	2401439f 	.word	0x2401439f
2401423c:	240141a9 	.word	0x240141a9
24014240:	24014435 	.word	0x24014435
24014244:	240141a9 	.word	0x240141a9
24014248:	240141a9 	.word	0x240141a9
2401424c:	240141a9 	.word	0x240141a9
24014250:	240141a9 	.word	0x240141a9
24014254:	24014465 	.word	0x24014465
24014258:	240141a9 	.word	0x240141a9
2401425c:	24014465 	.word	0x24014465
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
24014260:	4628      	mov	r0, r5
24014262:	f7f4 f9d4 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24014266:	88bb      	ldrh	r3, [r7, #4]
24014268:	883a      	ldrh	r2, [r7, #0]
2401426a:	3301      	adds	r3, #1
2401426c:	1a9b      	subs	r3, r3, r2
2401426e:	b21b      	sxth	r3, r3
24014270:	4298      	cmp	r0, r3
24014272:	d004      	beq.n	2401427e <lv_btnmatrix_signal+0x10e>
            lv_btnmatrix_set_map(btnm, ext->map_p);
24014274:	6821      	ldr	r1, [r4, #0]
24014276:	4628      	mov	r0, r5
24014278:	f7ff fcec 	bl	24013c54 <lv_btnmatrix_set_map>
2401427c:	e794      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
2401427e:	4628      	mov	r0, r5
24014280:	f7f4 f9cb 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24014284:	88fb      	ldrh	r3, [r7, #6]
24014286:	887a      	ldrh	r2, [r7, #2]
24014288:	3301      	adds	r3, #1
2401428a:	1a9b      	subs	r3, r3, r2
2401428c:	b21b      	sxth	r3, r3
2401428e:	4298      	cmp	r0, r3
24014290:	d1f0      	bne.n	24014274 <lv_btnmatrix_signal+0x104>
24014292:	e789      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
        invalidate_button_area(btnm, ext->btn_id_pr);
24014294:	8ac1      	ldrh	r1, [r0, #22]
24014296:	4628      	mov	r0, r5
24014298:	f7ff fbf6 	bl	24013a88 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
2401429c:	f7f2 ff92 	bl	240071c4 <lv_indev_get_act>
240142a0:	f7f2 ff96 	bl	240071d0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
240142a4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
240142a8:	2801      	cmp	r0, #1
240142aa:	d11d      	bne.n	240142e8 <lv_btnmatrix_signal+0x178>
            lv_indev_get_point(param, &p);
240142ac:	4638      	mov	r0, r7
240142ae:	4669      	mov	r1, sp
240142b0:	f7f2 ffbf 	bl	24007232 <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
240142b4:	4669      	mov	r1, sp
240142b6:	4628      	mov	r0, r5
240142b8:	f7ff fc18 	bl	24013aec <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
240142bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(btnm, &p);
240142c0:	4607      	mov	r7, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
240142c2:	4298      	cmp	r0, r3
240142c4:	d010      	beq.n	240142e8 <lv_btnmatrix_signal+0x178>
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
240142c6:	68a3      	ldr	r3, [r4, #8]
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
240142c8:	8ae1      	ldrh	r1, [r4, #22]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
240142ca:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
240142ce:	069a      	lsls	r2, r3, #26
240142d0:	d40a      	bmi.n	240142e8 <lv_btnmatrix_signal+0x178>
240142d2:	0718      	lsls	r0, r3, #28
240142d4:	d408      	bmi.n	240142e8 <lv_btnmatrix_signal+0x178>
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
240142d6:	4628      	mov	r0, r5
240142d8:	f7ff fbd6 	bl	24013a88 <invalidate_button_area>
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
240142dc:	4639      	mov	r1, r7
240142de:	4628      	mov	r0, r5
                    ext->btn_id_pr = btn_pr;
240142e0:	82e7      	strh	r7, [r4, #22]
                    ext->btn_id_act = btn_pr;
240142e2:	8367      	strh	r7, [r4, #26]
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
240142e4:	f7ff fbd0 	bl	24013a88 <invalidate_button_area>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
240142e8:	8ae3      	ldrh	r3, [r4, #22]
240142ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
240142ee:	4293      	cmp	r3, r2
240142f0:	f43f af5a 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
240142f4:	68a2      	ldr	r2, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
240142f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
240142fa:	f412 7f80 	tst.w	r2, #256	; 0x100
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
240142fe:	f47f af53 	bne.w	240141a8 <lv_btnmatrix_signal+0x38>
24014302:	0691      	lsls	r1, r2, #26
24014304:	f53f af50 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
24014308:	0712      	lsls	r2, r2, #28
2401430a:	f53f af4d 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
                uint32_t b = ext->btn_id_act;
2401430e:	9301      	str	r3, [sp, #4]
24014310:	e086      	b.n	24014420 <lv_btnmatrix_signal+0x2b0>
        lv_indev_t * indev = lv_indev_get_act();
24014312:	f7f2 ff57 	bl	240071c4 <lv_indev_get_act>
24014316:	4680      	mov	r8, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
24014318:	f7f2 ff5a 	bl	240071d0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return LV_RES_OK;
2401431c:	2804      	cmp	r0, #4
2401431e:	f43f af43 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
24014322:	2802      	cmp	r0, #2
24014324:	f43f af40 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
        lv_indev_get_point(indev, &p);
24014328:	4640      	mov	r0, r8
2401432a:	4669      	mov	r1, sp
2401432c:	f7f2 ff81 	bl	24007232 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
24014330:	4669      	mov	r1, sp
24014332:	4628      	mov	r0, r5
24014334:	f7ff fbda 	bl	24013aec <get_button_from_point>
        if(btn_pr != ext->btn_id_pr) {
24014338:	8ae1      	ldrh	r1, [r4, #22]
        btn_pr = get_button_from_point(btnm, &p);
2401433a:	4680      	mov	r8, r0
        if(btn_pr != ext->btn_id_pr) {
2401433c:	4281      	cmp	r1, r0
2401433e:	f43f af33 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
            if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
24014342:	f64f 73ff 	movw	r3, #65535	; 0xffff
24014346:	4299      	cmp	r1, r3
24014348:	d002      	beq.n	24014350 <lv_btnmatrix_signal+0x1e0>
                invalidate_button_area(btnm, ext->btn_id_pr);
2401434a:	4628      	mov	r0, r5
2401434c:	f7ff fb9c 	bl	24013a88 <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
24014350:	4638      	mov	r0, r7
            ext->btn_id_pr  = btn_pr;
24014352:	f8a4 8016 	strh.w	r8, [r4, #22]
            ext->btn_id_act = btn_pr;
24014356:	f8a4 801a 	strh.w	r8, [r4, #26]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
2401435a:	f7f2 ff5b 	bl	24007214 <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
2401435e:	f64f 73ff 	movw	r3, #65535	; 0xffff
24014362:	4598      	cmp	r8, r3
24014364:	f43f af20 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
24014368:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
2401436a:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
2401436e:	0699      	lsls	r1, r3, #26
24014370:	f53f af1a 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
24014374:	071a      	lsls	r2, r3, #28
24014376:	f53f af17 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
                invalidate_button_area(btnm, btn_pr);
2401437a:	4641      	mov	r1, r8
2401437c:	4628      	mov	r0, r5
2401437e:	f7ff fb83 	bl	24013a88 <invalidate_button_area>
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
24014382:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
24014384:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
24014388:	05db      	lsls	r3, r3, #23
2401438a:	f53f af0d 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
2401438e:	aa01      	add	r2, sp, #4
24014390:	2110      	movs	r1, #16
24014392:	4628      	mov	r0, r5
                    uint32_t b = btn_pr;
24014394:	f8cd 8004 	str.w	r8, [sp, #4]
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
24014398:	f7f3 fd1e 	bl	24007dd8 <lv_event_send>
2401439c:	e704      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
2401439e:	8ac2      	ldrh	r2, [r0, #22]
240143a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
240143a4:	429a      	cmp	r2, r3
240143a6:	f43f aeff 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
240143aa:	6881      	ldr	r1, [r0, #8]
240143ac:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
240143b0:	065f      	lsls	r7, r3, #25
240143b2:	d512      	bpl.n	240143da <lv_btnmatrix_signal+0x26a>
240143b4:	0698      	lsls	r0, r3, #26
240143b6:	d410      	bmi.n	240143da <lv_btnmatrix_signal+0x26a>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr]) && !ext->one_check) {
240143b8:	061f      	lsls	r7, r3, #24
240143ba:	d538      	bpl.n	2401442e <lv_btnmatrix_signal+0x2be>
240143bc:	7f20      	ldrb	r0, [r4, #28]
240143be:	0780      	lsls	r0, r0, #30
240143c0:	d435      	bmi.n	2401442e <lv_btnmatrix_signal+0x2be>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNMATRIX_CTRL_CHECK_STATE);
240143c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240143c6:	b29b      	uxth	r3, r3
240143c8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
240143cc:	7f23      	ldrb	r3, [r4, #28]
240143ce:	079b      	lsls	r3, r3, #30
240143d0:	d503      	bpl.n	240143da <lv_btnmatrix_signal+0x26a>
240143d2:	8ae1      	ldrh	r1, [r4, #22]
240143d4:	4628      	mov	r0, r5
240143d6:	f7ff feb6 	bl	24014146 <make_one_button_toggled>
            invalidate_button_area(btnm, ext->btn_id_pr);
240143da:	8ae1      	ldrh	r1, [r4, #22]
240143dc:	4628      	mov	r0, r5
240143de:	f7ff fb53 	bl	24013a88 <invalidate_button_area>
            invalidate_button_area(btnm, ext->btn_id_focused);
240143e2:	8b21      	ldrh	r1, [r4, #24]
240143e4:	4628      	mov	r0, r5
240143e6:	f7ff fb4f 	bl	24013a88 <invalidate_button_area>
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
240143ea:	f7f2 feeb 	bl	240071c4 <lv_indev_get_act>
240143ee:	f7f2 feef 	bl	240071d0 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) {
240143f2:	2802      	cmp	r0, #2
240143f4:	d001      	beq.n	240143fa <lv_btnmatrix_signal+0x28a>
240143f6:	2804      	cmp	r0, #4
240143f8:	d101      	bne.n	240143fe <lv_btnmatrix_signal+0x28e>
                ext->btn_id_focused = ext->btn_id_pr;
240143fa:	8ae3      	ldrh	r3, [r4, #22]
240143fc:	8323      	strh	r3, [r4, #24]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
240143fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
24014402:	8b62      	ldrh	r2, [r4, #26]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
24014404:	82e3      	strh	r3, [r4, #22]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
24014406:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
24014408:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
2401440c:	05df      	lsls	r7, r3, #23
2401440e:	f57f aecb 	bpl.w	240141a8 <lv_btnmatrix_signal+0x38>
24014412:	069c      	lsls	r4, r3, #26
24014414:	f53f aec8 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
24014418:	0718      	lsls	r0, r3, #28
2401441a:	f53f aec5 	bmi.w	240141a8 <lv_btnmatrix_signal+0x38>
                uint32_t b = ext->btn_id_act;
2401441e:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
24014420:	aa01      	add	r2, sp, #4
24014422:	2110      	movs	r1, #16
24014424:	4628      	mov	r0, r5
24014426:	f7f3 fcd7 	bl	24007dd8 <lv_event_send>
2401442a:	4606      	mov	r6, r0
2401442c:	e6bc      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
2401442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24014432:	e7c9      	b.n	240143c8 <lv_btnmatrix_signal+0x258>
        if(ext->btn_id_act != LV_BTNMATRIX_BTN_NONE) {
24014434:	8b43      	ldrh	r3, [r0, #26]
24014436:	f64f 72ff 	movw	r2, #65535	; 0xffff
2401443a:	4293      	cmp	r3, r2
2401443c:	f43f aeb4 	beq.w	240141a8 <lv_btnmatrix_signal+0x38>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
24014440:	6882      	ldr	r2, [r0, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
24014442:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
24014446:	f012 0f10 	tst.w	r2, #16
2401444a:	e758      	b.n	240142fe <lv_btnmatrix_signal+0x18e>
        ext->btn_id_pr  = LV_BTNMATRIX_BTN_NONE;
2401444c:	f64f 73ff 	movw	r3, #65535	; 0xffff
24014450:	82c3      	strh	r3, [r0, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
24014452:	8343      	strh	r3, [r0, #26]
        lv_obj_invalidate(btnm);
24014454:	4628      	mov	r0, r5
24014456:	f7f3 fdc5 	bl	24007fe4 <lv_obj_invalidate>
2401445a:	e6a5      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
2401445c:	24035cfc 	.word	0x24035cfc
24014460:	900ff2a4 	.word	0x900ff2a4
        if(ext->btn_id_focused != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_focused);
24014464:	8b01      	ldrh	r1, [r0, #24]
24014466:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401446a:	4299      	cmp	r1, r3
2401446c:	d002      	beq.n	24014474 <lv_btnmatrix_signal+0x304>
2401446e:	4628      	mov	r0, r5
24014470:	f7ff fb0a 	bl	24013a88 <invalidate_button_area>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_pr);
24014474:	8ae1      	ldrh	r1, [r4, #22]
24014476:	f64f 77ff 	movw	r7, #65535	; 0xffff
2401447a:	42b9      	cmp	r1, r7
2401447c:	d002      	beq.n	24014484 <lv_btnmatrix_signal+0x314>
2401447e:	4628      	mov	r0, r5
24014480:	f7ff fb02 	bl	24013a88 <invalidate_button_area>
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
24014484:	f04f 33ff 	mov.w	r3, #4294967295
        ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
24014488:	82e7      	strh	r7, [r4, #22]
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
2401448a:	61a3      	str	r3, [r4, #24]
2401448c:	e68c      	b.n	240141a8 <lv_btnmatrix_signal+0x38>
2401448e:	bf00      	nop

24014490 <lv_btnmatrix_get_align>:
{
24014490:	b508      	push	{r3, lr}
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
24014492:	f7f4 fe62 	bl	2400915a <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
24014496:	7f00      	ldrb	r0, [r0, #28]
24014498:	f3c0 0081 	ubfx	r0, r0, #2, #2
        align = LV_LABEL_ALIGN_LEFT;
2401449c:	2803      	cmp	r0, #3
}
2401449e:	bf08      	it	eq
240144a0:	2000      	moveq	r0, #0
240144a2:	bd08      	pop	{r3, pc}

240144a4 <lv_btnmatrix_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
240144a4:	2a02      	cmp	r2, #2
{
240144a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240144aa:	4604      	mov	r4, r0
240144ac:	ed2d 8b02 	vpush	{d8}
240144b0:	ee08 1a10 	vmov	s16, r1
240144b4:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
    if(mode == LV_DESIGN_COVER_CHK) {
240144b8:	d108      	bne.n	240144cc <lv_btnmatrix_design+0x28>
        return ancestor_design_f(btnm, clip_area, mode);
240144ba:	4bb7      	ldr	r3, [pc, #732]	; (24014798 <lv_btnmatrix_design+0x2f4>)
240144bc:	681b      	ldr	r3, [r3, #0]
}
240144be:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
240144c2:	ecbd 8b02 	vpop	{d8}
240144c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return ancestor_design_f(btnm, clip_area, mode);
240144ca:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
240144cc:	2a00      	cmp	r2, #0
240144ce:	f040 81c9 	bne.w	24014864 <lv_btnmatrix_design+0x3c0>
        ancestor_design_f(btnm, clip_area, mode);
240144d2:	4bb1      	ldr	r3, [pc, #708]	; (24014798 <lv_btnmatrix_design+0x2f4>)
240144d4:	681b      	ldr	r3, [r3, #0]
240144d6:	4798      	blx	r3
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
240144d8:	4620      	mov	r0, r4
240144da:	f7f4 fe3e 	bl	2400915a <lv_obj_get_ext_attr>
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
240144de:	8a83      	ldrh	r3, [r0, #20]
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
240144e0:	4606      	mov	r6, r0
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
240144e2:	2b00      	cmp	r3, #0
240144e4:	f000 81c3 	beq.w	2401486e <lv_btnmatrix_design+0x3ca>
        lv_obj_get_coords(btnm, &area_btnm);
240144e8:	a910      	add	r1, sp, #64	; 0x40
240144ea:	4620      	mov	r0, r4
240144ec:	f7f3 fee7 	bl	240082be <lv_obj_get_coords>
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
240144f0:	4620      	mov	r0, r4
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
240144f2:	f896 801c 	ldrb.w	r8, [r6, #28]
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
240144f6:	f7ff ffcb 	bl	24014490 <lv_btnmatrix_get_align>
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
240144fa:	2801      	cmp	r0, #1
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
240144fc:	f008 0801 	and.w	r8, r8, #1
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
24014500:	f040 80bf 	bne.w	24014682 <lv_btnmatrix_design+0x1de>
24014504:	f048 0804 	orr.w	r8, r8, #4
        btnm->state = LV_STATE_DEFAULT;
24014508:	2700      	movs	r7, #0
        _lv_obj_disable_style_caching(btnm, true);
2401450a:	2101      	movs	r1, #1
2401450c:	4620      	mov	r0, r4
        lv_state_t state_ori = btnm->state;
2401450e:	f894 9037 	ldrb.w	r9, [r4, #55]	; 0x37
        _lv_obj_disable_style_caching(btnm, true);
24014512:	f7f4 f8a5 	bl	24008660 <_lv_obj_disable_style_caching>
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
24014516:	a838      	add	r0, sp, #224	; 0xe0
        btnm->state = LV_STATE_DEFAULT;
24014518:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
2401451c:	f7f9 faa2 	bl	2400da64 <lv_draw_rect_dsc_init>
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
24014520:	a814      	add	r0, sp, #80	; 0x50
24014522:	f7f7 fc8f 	bl	2400be44 <lv_draw_label_dsc_init>
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
24014526:	aa38      	add	r2, sp, #224	; 0xe0
24014528:	2101      	movs	r1, #1
2401452a:	4620      	mov	r0, r4
2401452c:	f7f4 fe57 	bl	240091de <lv_obj_init_draw_rect_dsc>
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
24014530:	aa14      	add	r2, sp, #80	; 0x50
24014532:	2101      	movs	r1, #1
24014534:	4620      	mov	r0, r4
24014536:	f7f4 ffdb 	bl	240094f0 <lv_obj_init_draw_label_dsc>
        _lv_obj_disable_style_caching(btnm, false);
2401453a:	4639      	mov	r1, r7
2401453c:	4620      	mov	r0, r4
        btnm->state = state_ori;
2401453e:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
        draw_label_rel_dsc.flag = txt_flag;
24014542:	f88d 8071 	strb.w	r8, [sp, #113]	; 0x71
        _lv_obj_disable_style_caching(btnm, false);
24014546:	f7f4 f88b 	bl	24008660 <_lv_obj_disable_style_caching>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401454a:	2210      	movs	r2, #16
2401454c:	4639      	mov	r1, r7
2401454e:	4620      	mov	r0, r4
24014550:	f7f4 f91a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24014554:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014556:	900c      	str	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24014558:	4639      	mov	r1, r7
2401455a:	4620      	mov	r0, r4
2401455c:	f7f4 f914 	bl	24008788 <_lv_obj_get_style_int>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
24014560:	f009 0304 	and.w	r3, r9, #4
24014564:	900b      	str	r0, [sp, #44]	; 0x2c
        uint16_t txt_i = 0;
24014566:	9704      	str	r7, [sp, #16]
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
24014568:	930d      	str	r3, [sp, #52]	; 0x34
        bool chk_inited = false;
2401456a:	e9cd 7705 	strd	r7, r7, [sp, #20]
2401456e:	b2bd      	uxth	r5, r7
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
24014570:	8ab3      	ldrh	r3, [r6, #20]
24014572:	42ab      	cmp	r3, r5
24014574:	f240 817b 	bls.w	2401486e <lv_btnmatrix_design+0x3ca>
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
24014578:	f8d6 b000 	ldr.w	fp, [r6]
2401457c:	9b04      	ldr	r3, [sp, #16]
2401457e:	4987      	ldr	r1, [pc, #540]	; (2401479c <lv_btnmatrix_design+0x2f8>)
24014580:	009b      	lsls	r3, r3, #2
24014582:	9307      	str	r3, [sp, #28]
24014584:	9b04      	ldr	r3, [sp, #16]
24014586:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
2401458a:	f006 f809 	bl	2401a5a0 <__strcmp_veneer>
2401458e:	9b04      	ldr	r3, [sp, #16]
24014590:	9308      	str	r3, [sp, #32]
                txt_i++;
24014592:	3301      	adds	r3, #1
24014594:	b29b      	uxth	r3, r3
24014596:	9304      	str	r3, [sp, #16]
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
24014598:	2800      	cmp	r0, #0
2401459a:	d0ef      	beq.n	2401457c <lv_btnmatrix_design+0xd8>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
2401459c:	fa1f fb87 	uxth.w	fp, r7
240145a0:	68b3      	ldr	r3, [r6, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
240145a2:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
240145a6:	071a      	lsls	r2, r3, #28
240145a8:	f100 815a 	bmi.w	24014860 <lv_btnmatrix_design+0x3bc>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
240145ac:	6871      	ldr	r1, [r6, #4]
240145ae:	a812      	add	r0, sp, #72	; 0x48
240145b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
240145b4:	f7ff fa5e 	bl	24013a74 <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
240145b8:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
240145bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
            area_tmp.y1 += area_btnm.y1;
240145c0:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
            area_tmp.x1 += area_btnm.x1;
240145c4:	eb0c 0203 	add.w	r2, ip, r3
            area_tmp.y1 += area_btnm.y1;
240145c8:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            area_tmp.x1 += area_btnm.x1;
240145cc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            area_tmp.y1 += area_btnm.y1;
240145d0:	1842      	adds	r2, r0, r1
240145d2:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
            area_tmp.x2 += area_btnm.x1;
240145d6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
240145da:	4413      	add	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240145dc:	3201      	adds	r2, #1
240145de:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
240145e2:	eba2 020c 	sub.w	r2, r2, ip
            area_tmp.y2 += area_btnm.y1;
240145e6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
240145ea:	b212      	sxth	r2, r2
240145ec:	4419      	add	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240145ee:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240145f0:	920a      	str	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240145f2:	1a1b      	subs	r3, r3, r0
240145f4:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
240145f8:	b21b      	sxth	r3, r3
240145fa:	9309      	str	r3, [sp, #36]	; 0x24
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
240145fc:	68b3      	ldr	r3, [r6, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECK_STATE) ? true : false;
240145fe:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
            lv_state_t btn_state = LV_STATE_DEFAULT;
24014602:	f3c3 1bc0 	ubfx	fp, r3, #7, #1
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
24014606:	069b      	lsls	r3, r3, #26
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
24014608:	8af3      	ldrh	r3, [r6, #22]
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
2401460a:	bf48      	it	mi
2401460c:	f04b 0b20 	orrmi.w	fp, fp, #32
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
24014610:	42ab      	cmp	r3, r5
            if(btn_i == ext->btn_id_focused) {
24014612:	8b33      	ldrh	r3, [r6, #24]
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
24014614:	bf08      	it	eq
24014616:	f04b 0b10 	orreq.w	fp, fp, #16
            if(btn_i == ext->btn_id_focused) {
2401461a:	42ab      	cmp	r3, r5
2401461c:	d136      	bne.n	2401468c <lv_btnmatrix_design+0x1e8>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
2401461e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24014620:	2b00      	cmp	r3, #0
24014622:	f000 812b 	beq.w	2401487c <lv_btnmatrix_design+0x3d8>
24014626:	f04b 0b06 	orr.w	fp, fp, #6
            else if(btn_state == LV_STATE_DISABLED) {
2401462a:	f1bb 0f20 	cmp.w	fp, #32
2401462e:	f040 8085 	bne.w	2401473c <lv_btnmatrix_design+0x298>
                if(!disabled_inited) {
24014632:	9b06      	ldr	r3, [sp, #24]
24014634:	2b00      	cmp	r3, #0
24014636:	f040 80ab 	bne.w	24014790 <lv_btnmatrix_design+0x2ec>
                    _lv_obj_disable_style_caching(btnm, true);
2401463a:	2101      	movs	r1, #1
2401463c:	4620      	mov	r0, r4
                    btnm->state = LV_STATE_DISABLED;
2401463e:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
                draw_label_dsc_act = &draw_label_ina_dsc;
24014642:	ad26      	add	r5, sp, #152	; 0x98
                    _lv_obj_disable_style_caching(btnm, true);
24014644:	f7f4 f80c 	bl	24008660 <_lv_obj_disable_style_caching>
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
24014648:	a862      	add	r0, sp, #392	; 0x188
2401464a:	f7f9 fa0b 	bl	2400da64 <lv_draw_rect_dsc_init>
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
2401464e:	a826      	add	r0, sp, #152	; 0x98
24014650:	f7f7 fbf8 	bl	2400be44 <lv_draw_label_dsc_init>
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
24014654:	aa62      	add	r2, sp, #392	; 0x188
24014656:	2101      	movs	r1, #1
24014658:	4620      	mov	r0, r4
2401465a:	f7f4 fdc0 	bl	240091de <lv_obj_init_draw_rect_dsc>
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
2401465e:	aa26      	add	r2, sp, #152	; 0x98
24014660:	2101      	movs	r1, #1
24014662:	4620      	mov	r0, r4
24014664:	f7f4 ff44 	bl	240094f0 <lv_obj_init_draw_label_dsc>
                    _lv_obj_disable_style_caching(btnm, false);
24014668:	9906      	ldr	r1, [sp, #24]
2401466a:	4620      	mov	r0, r4
                    btnm->state = state_ori;
2401466c:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
                    draw_label_ina_dsc.flag = txt_flag;
24014670:	f88d 80b9 	strb.w	r8, [sp, #185]	; 0xb9
                    _lv_obj_disable_style_caching(btnm, false);
24014674:	f7f3 fff4 	bl	24008660 <_lv_obj_disable_style_caching>
24014678:	2301      	movs	r3, #1
                draw_rect_dsc_act = &draw_rect_ina_dsc;
2401467a:	f50d 7ac4 	add.w	sl, sp, #392	; 0x188
                    _lv_obj_disable_style_caching(btnm, false);
2401467e:	9306      	str	r3, [sp, #24]
24014680:	e030      	b.n	240146e4 <lv_btnmatrix_design+0x240>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
24014682:	2802      	cmp	r0, #2
24014684:	bf08      	it	eq
24014686:	f048 0808 	orreq.w	r8, r8, #8
2401468a:	e73d      	b.n	24014508 <lv_btnmatrix_design+0x64>
            if(btn_state == LV_STATE_DEFAULT) {
2401468c:	f1bb 0f00 	cmp.w	fp, #0
24014690:	d076      	beq.n	24014780 <lv_btnmatrix_design+0x2dc>
            else if(btn_state == LV_STATE_CHECKED) {
24014692:	f1bb 0f01 	cmp.w	fp, #1
24014696:	d1c8      	bne.n	2401462a <lv_btnmatrix_design+0x186>
                if(!chk_inited) {
24014698:	9b05      	ldr	r3, [sp, #20]
2401469a:	2b00      	cmp	r3, #0
2401469c:	d174      	bne.n	24014788 <lv_btnmatrix_design+0x2e4>
                    _lv_obj_disable_style_caching(btnm, true);
2401469e:	4659      	mov	r1, fp
240146a0:	4620      	mov	r0, r4
                    btnm->state = LV_STATE_CHECKED;
240146a2:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
                draw_label_dsc_act = &draw_label_chk_dsc;
240146a6:	ad1d      	add	r5, sp, #116	; 0x74
                    _lv_obj_disable_style_caching(btnm, true);
240146a8:	f7f3 ffda 	bl	24008660 <_lv_obj_disable_style_caching>
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
240146ac:	a84d      	add	r0, sp, #308	; 0x134
240146ae:	f7f9 f9d9 	bl	2400da64 <lv_draw_rect_dsc_init>
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
240146b2:	a81d      	add	r0, sp, #116	; 0x74
240146b4:	f7f7 fbc6 	bl	2400be44 <lv_draw_label_dsc_init>
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
240146b8:	aa4d      	add	r2, sp, #308	; 0x134
240146ba:	4659      	mov	r1, fp
240146bc:	4620      	mov	r0, r4
240146be:	f7f4 fd8e 	bl	240091de <lv_obj_init_draw_rect_dsc>
                draw_rect_dsc_act = &draw_rect_chk_dsc;
240146c2:	f50d 7a9a 	add.w	sl, sp, #308	; 0x134
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
240146c6:	aa1d      	add	r2, sp, #116	; 0x74
240146c8:	4659      	mov	r1, fp
240146ca:	4620      	mov	r0, r4
240146cc:	f7f4 ff10 	bl	240094f0 <lv_obj_init_draw_label_dsc>
                    _lv_obj_disable_style_caching(btnm, false);
240146d0:	9905      	ldr	r1, [sp, #20]
240146d2:	4620      	mov	r0, r4
                    btnm->state = state_ori;
240146d4:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
                    draw_label_chk_dsc.flag = txt_flag;
240146d8:	f88d 8095 	strb.w	r8, [sp, #149]	; 0x95
                    _lv_obj_disable_style_caching(btnm, false);
240146dc:	f7f3 ffc0 	bl	24008660 <_lv_obj_disable_style_caching>
240146e0:	f8cd b014 	str.w	fp, [sp, #20]
            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;
240146e4:	f9ba b012 	ldrsh.w	fp, [sl, #18]
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
240146e8:	f01b 0f10 	tst.w	fp, #16
240146ec:	d06e      	beq.n	240147cc <lv_btnmatrix_design+0x328>
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
240146ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
240146f0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
240146f4:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
240146f8:	4413      	add	r3, r2
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
240146fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
240146fc:	4299      	cmp	r1, r3
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
240146fe:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
24014702:	bf04      	itt	eq
24014704:	f02b 0302 	biceq.w	r3, fp, #2
24014708:	f8aa 3012 	strheq.w	r3, [sl, #18]
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
2401470c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
24014710:	1a9b      	subs	r3, r3, r2
24014712:	9a07      	ldr	r2, [sp, #28]
24014714:	4299      	cmp	r1, r3
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
24014716:	bf02      	ittt	eq
24014718:	f8ba 3012 	ldrheq.w	r3, [sl, #18]
2401471c:	f023 0301 	biceq.w	r3, r3, #1
24014720:	f8aa 3012 	strheq.w	r3, [sl, #18]
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
24014724:	6833      	ldr	r3, [r6, #0]
24014726:	4413      	add	r3, r2
                if(txt_i == 0) { /*First button*/
24014728:	9a08      	ldr	r2, [sp, #32]
2401472a:	2a00      	cmp	r2, #0
2401472c:	d138      	bne.n	240147a0 <lv_btnmatrix_design+0x2fc>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
2401472e:	f8ba 1012 	ldrh.w	r1, [sl, #18]
24014732:	f021 0104 	bic.w	r1, r1, #4
24014736:	f8aa 1012 	strh.w	r1, [sl, #18]
2401473a:	e03a      	b.n	240147b2 <lv_btnmatrix_design+0x30e>
                _lv_obj_disable_style_caching(btnm, true);
2401473c:	2101      	movs	r1, #1
2401473e:	4620      	mov	r0, r4
                btnm->state = btn_state;
24014740:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
                draw_label_dsc_act = &draw_label_tmp_dsc;
24014744:	ad2f      	add	r5, sp, #188	; 0xbc
                _lv_obj_disable_style_caching(btnm, true);
24014746:	f7f3 ff8b 	bl	24008660 <_lv_obj_disable_style_caching>
                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
2401474a:	a877      	add	r0, sp, #476	; 0x1dc
2401474c:	f7f9 f98a 	bl	2400da64 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
24014750:	a82f      	add	r0, sp, #188	; 0xbc
24014752:	f7f7 fb77 	bl	2400be44 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
24014756:	aa77      	add	r2, sp, #476	; 0x1dc
24014758:	2101      	movs	r1, #1
2401475a:	4620      	mov	r0, r4
2401475c:	f7f4 fd3f 	bl	240091de <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
24014760:	aa2f      	add	r2, sp, #188	; 0xbc
24014762:	2101      	movs	r1, #1
24014764:	4620      	mov	r0, r4
24014766:	f7f4 fec3 	bl	240094f0 <lv_obj_init_draw_label_dsc>
                _lv_obj_disable_style_caching(btnm, false);
2401476a:	2100      	movs	r1, #0
2401476c:	4620      	mov	r0, r4
                btnm->state = state_ori;
2401476e:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
                draw_label_tmp_dsc.flag = txt_flag;
24014772:	f88d 80dd 	strb.w	r8, [sp, #221]	; 0xdd
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
24014776:	f50d 7aee 	add.w	sl, sp, #476	; 0x1dc
                _lv_obj_disable_style_caching(btnm, false);
2401477a:	f7f3 ff71 	bl	24008660 <_lv_obj_disable_style_caching>
2401477e:	e7b1      	b.n	240146e4 <lv_btnmatrix_design+0x240>
                draw_label_dsc_act = &draw_label_rel_dsc;
24014780:	ad14      	add	r5, sp, #80	; 0x50
                draw_rect_dsc_act = &draw_rect_rel_dsc;
24014782:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
24014786:	e7ad      	b.n	240146e4 <lv_btnmatrix_design+0x240>
                draw_label_dsc_act = &draw_label_chk_dsc;
24014788:	ad1d      	add	r5, sp, #116	; 0x74
                draw_rect_dsc_act = &draw_rect_chk_dsc;
2401478a:	f50d 7a9a 	add.w	sl, sp, #308	; 0x134
2401478e:	e7a9      	b.n	240146e4 <lv_btnmatrix_design+0x240>
                draw_label_dsc_act = &draw_label_ina_dsc;
24014790:	ad26      	add	r5, sp, #152	; 0x98
                draw_rect_dsc_act = &draw_rect_ina_dsc;
24014792:	f50d 7ac4 	add.w	sl, sp, #392	; 0x188
24014796:	e7a5      	b.n	240146e4 <lv_btnmatrix_design+0x240>
24014798:	24035cf8 	.word	0x24035cf8
2401479c:	900ff2a2 	.word	0x900ff2a2
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
240147a0:	f853 0c04 	ldr.w	r0, [r3, #-4]
240147a4:	4937      	ldr	r1, [pc, #220]	; (24014884 <lv_btnmatrix_design+0x3e0>)
240147a6:	9308      	str	r3, [sp, #32]
240147a8:	f005 fefa 	bl	2401a5a0 <__strcmp_veneer>
240147ac:	9b08      	ldr	r3, [sp, #32]
240147ae:	2800      	cmp	r0, #0
240147b0:	d0bd      	beq.n	2401472e <lv_btnmatrix_design+0x28a>
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
240147b2:	6858      	ldr	r0, [r3, #4]
240147b4:	7803      	ldrb	r3, [r0, #0]
240147b6:	b11b      	cbz	r3, 240147c0 <lv_btnmatrix_design+0x31c>
240147b8:	4932      	ldr	r1, [pc, #200]	; (24014884 <lv_btnmatrix_design+0x3e0>)
240147ba:	f005 fef1 	bl	2401a5a0 <__strcmp_veneer>
240147be:	b928      	cbnz	r0, 240147cc <lv_btnmatrix_design+0x328>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
240147c0:	f8ba 3012 	ldrh.w	r3, [sl, #18]
240147c4:	f023 0308 	bic.w	r3, r3, #8
240147c8:	f8aa 3012 	strh.w	r3, [sl, #18]
            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);
240147cc:	4652      	mov	r2, sl
240147ce:	ee18 1a10 	vmov	r1, s16
240147d2:	a812      	add	r0, sp, #72	; 0x48
240147d4:	f7f9 f96a 	bl	2400daac <lv_draw_rect>
            const char * txt = ext->map_p[txt_i];
240147d8:	6833      	ldr	r3, [r6, #0]
240147da:	9a07      	ldr	r2, [sp, #28]
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
240147dc:	a80f      	add	r0, sp, #60	; 0x3c
            draw_rect_dsc_act->border_side = border_part_ori;
240147de:	f8aa b012 	strh.w	fp, [sl, #18]
            const char * txt = ext->map_p[txt_i];
240147e2:	5899      	ldr	r1, [r3, r2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240147e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
240147e8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
240147ec:	3301      	adds	r3, #1
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
240147ee:	f8cd 8008 	str.w	r8, [sp, #8]
240147f2:	9107      	str	r1, [sp, #28]
240147f4:	1a9b      	subs	r3, r3, r2
240147f6:	b21b      	sxth	r3, r3
240147f8:	9301      	str	r3, [sp, #4]
240147fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
240147fe:	9300      	str	r3, [sp, #0]
24014800:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
24014804:	68aa      	ldr	r2, [r5, #8]
24014806:	f7fc fa4f 	bl	24010ca8 <_lv_txt_get_size>
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
2401480a:	f9bd c03c 	ldrsh.w	ip, [sp, #60]	; 0x3c
2401480e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24014810:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
24014814:	eba3 030c 	sub.w	r3, r3, ip
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
24014818:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
2401481c:	9907      	ldr	r1, [sp, #28]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
2401481e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24014822:	eb02 0263 	add.w	r2, r2, r3, asr #1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
24014826:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014828:	1a1b      	subs	r3, r3, r0
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
2401482a:	b292      	uxth	r2, r2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
2401482c:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
24014830:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
24014834:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
24014838:	4462      	add	r2, ip
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
2401483a:	eb03 036e 	add.w	r3, r3, lr, asr #1
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
2401483e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
24014842:	462a      	mov	r2, r5
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
24014844:	b29b      	uxth	r3, r3
24014846:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
2401484a:	4403      	add	r3, r0
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
2401484c:	a812      	add	r0, sp, #72	; 0x48
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
2401484e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
24014852:	2300      	movs	r3, #0
24014854:	9300      	str	r3, [sp, #0]
24014856:	460b      	mov	r3, r1
24014858:	ee18 1a10 	vmov	r1, s16
2401485c:	f7f7 fb08 	bl	2400be70 <lv_draw_label>
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
24014860:	3701      	adds	r7, #1
24014862:	e684      	b.n	2401456e <lv_btnmatrix_design+0xca>
    else if(mode == LV_DESIGN_DRAW_POST) {
24014864:	2a01      	cmp	r2, #1
24014866:	d102      	bne.n	2401486e <lv_btnmatrix_design+0x3ca>
        ancestor_design_f(btnm, clip_area, mode);
24014868:	4b07      	ldr	r3, [pc, #28]	; (24014888 <lv_btnmatrix_design+0x3e4>)
2401486a:	681b      	ldr	r3, [r3, #0]
2401486c:	4798      	blx	r3
}
2401486e:	2000      	movs	r0, #0
24014870:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
24014874:	ecbd 8b02 	vpop	{d8}
24014878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                btn_state |= LV_STATE_FOCUSED;
2401487c:	f04b 0b02 	orr.w	fp, fp, #2
            else if(btn_state == LV_STATE_CHECKED) {
24014880:	e6d3      	b.n	2401462a <lv_btnmatrix_design+0x186>
24014882:	bf00      	nop
24014884:	900ff2a2 	.word	0x900ff2a2
24014888:	24035cf8 	.word	0x24035cf8

2401488c <lv_area_copy>:
2401488c:	3901      	subs	r1, #1
2401488e:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24014892:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24014896:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
2401489a:	4298      	cmp	r0, r3
2401489c:	d1f9      	bne.n	24014892 <lv_area_copy+0x6>
}
2401489e:	4770      	bx	lr

240148a0 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
240148a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
240148a4:	2101      	movs	r1, #1
{
240148a6:	b089      	sub	sp, #36	; 0x24
240148a8:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
240148aa:	f7f3 ff1e 	bl	240086ea <lv_obj_is_protected>
240148ae:	2800      	cmp	r0, #0
240148b0:	f040 80fa 	bne.w	24014aa8 <lv_cont_refr_autofit+0x208>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
240148b4:	4620      	mov	r0, r4
240148b6:	f7f4 fc50 	bl	2400915a <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
240148ba:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
240148bc:	4606      	mov	r6, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
240148be:	f013 0ff0 	tst.w	r3, #240	; 0xf0
240148c2:	d103      	bne.n	240148cc <lv_cont_refr_autofit+0x2c>
240148c4:	7843      	ldrb	r3, [r0, #1]
240148c6:	0719      	lsls	r1, r3, #28
240148c8:	f000 80ee 	beq.w	24014aa8 <lv_cont_refr_autofit+0x208>

    lv_area_t tight_area;
    lv_area_t ori;
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
240148cc:	4620      	mov	r0, r4

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
240148ce:	f104 0804 	add.w	r8, r4, #4
    lv_obj_t * par               = lv_obj_get_parent(cont);
240148d2:	f7f3 fccb 	bl	2400826c <lv_obj_get_parent>
240148d6:	4607      	mov	r7, r0
    lv_area_copy(&parent_area, &par->coords);
240148d8:	f100 0110 	add.w	r1, r0, #16
240148dc:	a804      	add	r0, sp, #16
240148de:	f7ff ffd5 	bl	2401488c <lv_area_copy>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240148e2:	2212      	movs	r2, #18
240148e4:	2100      	movs	r1, #0
240148e6:	4638      	mov	r0, r7
240148e8:	f7f3 ff4e 	bl	24008788 <_lv_obj_get_style_int>
    parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
240148ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240148f0:	2213      	movs	r2, #19
240148f2:	2100      	movs	r1, #0
240148f4:	4418      	add	r0, r3
240148f6:	f8ad 0010 	strh.w	r0, [sp, #16]
240148fa:	4638      	mov	r0, r7
240148fc:	f7f3 ff44 	bl	24008788 <_lv_obj_get_style_int>
    parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
24014900:	f8bd 3014 	ldrh.w	r3, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014904:	2210      	movs	r2, #16
24014906:	2100      	movs	r1, #0
24014908:	1a18      	subs	r0, r3, r0
2401490a:	f8ad 0014 	strh.w	r0, [sp, #20]
2401490e:	4638      	mov	r0, r7
24014910:	f7f3 ff3a 	bl	24008788 <_lv_obj_get_style_int>
    parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
24014914:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24014918:	2211      	movs	r2, #17
2401491a:	2100      	movs	r1, #0
2401491c:	4418      	add	r0, r3
2401491e:	f8ad 0012 	strh.w	r0, [sp, #18]
24014922:	4638      	mov	r0, r7
24014924:	f7f3 ff30 	bl	24008788 <_lv_obj_get_style_int>
    parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
24014928:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    lv_obj_get_coords(cont, &ori);
2401492c:	a902      	add	r1, sp, #8
    parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
2401492e:	1a18      	subs	r0, r3, r0
24014930:	f8ad 0016 	strh.w	r0, [sp, #22]
    lv_obj_get_coords(cont, &ori);
24014934:	4620      	mov	r0, r4
24014936:	f7f3 fcc2 	bl	240082be <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
2401493a:	4669      	mov	r1, sp
2401493c:	4620      	mov	r0, r4
2401493e:	f7f3 fcbe 	bl	240082be <lv_obj_get_coords>
    bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
24014942:	4640      	mov	r0, r8
24014944:	f7fa ffa7 	bl	2400f896 <_lv_ll_is_empty>
24014948:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
2401494c:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
24014950:	d032      	beq.n	240149b8 <lv_cont_refr_autofit+0x118>
        tight_area.x1 = LV_COORD_MAX;
        tight_area.y1 = LV_COORD_MAX;
        tight_area.x2 = LV_COORD_MIN;
24014952:	4aa7      	ldr	r2, [pc, #668]	; (24014bf0 <lv_cont_refr_autofit+0x350>)
        tight_area.y2 = LV_COORD_MIN;

        _LV_LL_READ(cont->child_ll, child_i) {
24014954:	4640      	mov	r0, r8
        tight_area.x2 = LV_COORD_MIN;
24014956:	4ba7      	ldr	r3, [pc, #668]	; (24014bf4 <lv_cont_refr_autofit+0x354>)
24014958:	e9cd 2300 	strd	r2, r3, [sp]
        _LV_LL_READ(cont->child_ll, child_i) {
2401495c:	f7fa fecc 	bl	2400f6f8 <_lv_ll_get_head>
24014960:	4605      	mov	r5, r0
24014962:	2800      	cmp	r0, #0
24014964:	f040 80a3 	bne.w	24014aae <lv_cont_refr_autofit+0x20e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014968:	4601      	mov	r1, r0
2401496a:	2212      	movs	r2, #18
2401496c:	4620      	mov	r0, r4
2401496e:	f7f3 ff0b 	bl	24008788 <_lv_obj_get_style_int>
                lv_style_int_t mbottom = lv_obj_get_style_margin_bottom(child_i, LV_OBJ_PART_MAIN);
                tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
            }
        }

        tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
24014972:	f8bd 3000 	ldrh.w	r3, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24014976:	2213      	movs	r2, #19
24014978:	4629      	mov	r1, r5
2401497a:	1a18      	subs	r0, r3, r0
2401497c:	f8ad 0000 	strh.w	r0, [sp]
24014980:	4620      	mov	r0, r4
24014982:	f7f3 ff01 	bl	24008788 <_lv_obj_get_style_int>
        tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
24014986:	f8bd 3004 	ldrh.w	r3, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401498a:	2210      	movs	r2, #16
2401498c:	4629      	mov	r1, r5
2401498e:	4418      	add	r0, r3
24014990:	f8ad 0004 	strh.w	r0, [sp, #4]
24014994:	4620      	mov	r0, r4
24014996:	f7f3 fef7 	bl	24008788 <_lv_obj_get_style_int>
        tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
2401499a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401499e:	2211      	movs	r2, #17
240149a0:	4629      	mov	r1, r5
240149a2:	1a18      	subs	r0, r3, r0
240149a4:	f8ad 0002 	strh.w	r0, [sp, #2]
240149a8:	4620      	mov	r0, r4
240149aa:	f7f3 feed 	bl	24008788 <_lv_obj_get_style_int>
        tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
240149ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240149b2:	4418      	add	r0, r3
240149b4:	f8ad 0006 	strh.w	r0, [sp, #6]
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
240149b8:	a902      	add	r1, sp, #8
240149ba:	a806      	add	r0, sp, #24
240149bc:	f7ff ff66 	bl	2401488c <lv_area_copy>

    switch(ext->fit_left) {
240149c0:	7833      	ldrb	r3, [r6, #0]
240149c2:	f3c3 1201 	ubfx	r2, r3, #4, #2
240149c6:	2a02      	cmp	r2, #2
240149c8:	f000 80cb 	beq.w	24014b62 <lv_cont_refr_autofit+0x2c2>
240149cc:	2a03      	cmp	r2, #3
240149ce:	f000 80cb 	beq.w	24014b68 <lv_cont_refr_autofit+0x2c8>
240149d2:	2a01      	cmp	r2, #1
240149d4:	d103      	bne.n	240149de <lv_cont_refr_autofit+0x13e>
        case LV_FIT_TIGHT:
            new_area.x1 = tight_area.x1;
240149d6:	f8bd 2000 	ldrh.w	r2, [sp]
            break;
        case LV_FIT_PARENT:
            new_area.x1 = parent_area.x1;
            break;
        case LV_FIT_MAX:
            new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
240149da:	f8ad 2018 	strh.w	r2, [sp, #24]
            break;
        default:
            break;
    }

    switch(ext->fit_right) {
240149de:	099b      	lsrs	r3, r3, #6
240149e0:	2b02      	cmp	r3, #2
240149e2:	f000 80cd 	beq.w	24014b80 <lv_cont_refr_autofit+0x2e0>
240149e6:	2b03      	cmp	r3, #3
240149e8:	f000 80cd 	beq.w	24014b86 <lv_cont_refr_autofit+0x2e6>
240149ec:	2b01      	cmp	r3, #1
240149ee:	d103      	bne.n	240149f8 <lv_cont_refr_autofit+0x158>
        case LV_FIT_TIGHT:
            new_area.x2 = tight_area.x2;
240149f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            break;
        case LV_FIT_PARENT:
            new_area.x2 = parent_area.x2;
            break;
        case LV_FIT_MAX:
            new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
240149f4:	f8ad 301c 	strh.w	r3, [sp, #28]
            break;
        default:
            break;
    }

    switch(ext->fit_top) {
240149f8:	7873      	ldrb	r3, [r6, #1]
240149fa:	f003 0203 	and.w	r2, r3, #3
240149fe:	2a02      	cmp	r2, #2
24014a00:	f000 80cd 	beq.w	24014b9e <lv_cont_refr_autofit+0x2fe>
24014a04:	2a03      	cmp	r2, #3
24014a06:	f000 80cd 	beq.w	24014ba4 <lv_cont_refr_autofit+0x304>
24014a0a:	2a01      	cmp	r2, #1
24014a0c:	d103      	bne.n	24014a16 <lv_cont_refr_autofit+0x176>
        case LV_FIT_TIGHT:
            new_area.y1 = tight_area.y1;
24014a0e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            break;
        case LV_FIT_PARENT:
            new_area.y1 = parent_area.y1;
            break;
        case LV_FIT_MAX:
            new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
24014a12:	f8ad 201a 	strh.w	r2, [sp, #26]
            break;
        default:
            break;
    }

    switch(ext->fit_bottom) {
24014a16:	f3c3 0381 	ubfx	r3, r3, #2, #2
24014a1a:	2b02      	cmp	r3, #2
24014a1c:	f000 80ce 	beq.w	24014bbc <lv_cont_refr_autofit+0x31c>
24014a20:	2b03      	cmp	r3, #3
24014a22:	f000 80ce 	beq.w	24014bc2 <lv_cont_refr_autofit+0x322>
24014a26:	2b01      	cmp	r3, #1
24014a28:	d103      	bne.n	24014a32 <lv_cont_refr_autofit+0x192>
        case LV_FIT_TIGHT:
            new_area.y2 = tight_area.y2;
24014a2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            break;
        case LV_FIT_PARENT:
            new_area.y2 = parent_area.y2;
            break;
        case LV_FIT_MAX:
            new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
24014a2e:	f8ad 301e 	strh.w	r3, [sp, #30]
        default:
            break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
24014a32:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
24014a36:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
24014a3a:	429a      	cmp	r2, r3
24014a3c:	d111      	bne.n	24014a62 <lv_cont_refr_autofit+0x1c2>
24014a3e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
24014a42:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
24014a46:	429a      	cmp	r2, r3
24014a48:	d10b      	bne.n	24014a62 <lv_cont_refr_autofit+0x1c2>
24014a4a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
24014a4e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
24014a52:	429a      	cmp	r2, r3
24014a54:	d105      	bne.n	24014a62 <lv_cont_refr_autofit+0x1c2>
24014a56:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
24014a5a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
24014a5e:	429a      	cmp	r2, r3
24014a60:	d022      	beq.n	24014aa8 <lv_cont_refr_autofit+0x208>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
24014a62:	4620      	mov	r0, r4
24014a64:	f7f3 fabe 	bl	24007fe4 <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
24014a68:	a906      	add	r1, sp, #24
24014a6a:	f104 0010 	add.w	r0, r4, #16
24014a6e:	f7ff ff0d 	bl	2401488c <lv_area_copy>
        lv_obj_invalidate(cont);
24014a72:	4620      	mov	r0, r4
24014a74:	f7f3 fab6 	bl	24007fe4 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
24014a78:	69e3      	ldr	r3, [r4, #28]
24014a7a:	aa02      	add	r2, sp, #8
24014a7c:	2102      	movs	r1, #2
24014a7e:	4620      	mov	r0, r4
24014a80:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
24014a82:	69fb      	ldr	r3, [r7, #28]
24014a84:	4622      	mov	r2, r4
24014a86:	2101      	movs	r1, #1
24014a88:	4638      	mov	r0, r7
24014a8a:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
24014a8c:	4620      	mov	r0, r4
24014a8e:	f7f3 fdca 	bl	24008626 <lv_obj_get_auto_realign>
24014a92:	b110      	cbz	r0, 24014a9a <lv_cont_refr_autofit+0x1fa>
            lv_obj_realign(cont);
24014a94:	4620      	mov	r0, r4
24014a96:	f7f3 f8fb 	bl	24007c90 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        _LV_LL_READ(cont->child_ll, child_i) {
24014a9a:	4640      	mov	r0, r8
24014a9c:	f7fa fe2c 	bl	2400f6f8 <_lv_ll_get_head>
24014aa0:	4604      	mov	r4, r0
24014aa2:	2800      	cmp	r0, #0
24014aa4:	f040 8099 	bne.w	24014bda <lv_cont_refr_autofit+0x33a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
        }
    }
}
24014aa8:	b009      	add	sp, #36	; 0x24
24014aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
24014aae:	4628      	mov	r0, r5
24014ab0:	f7f3 fdf6 	bl	240086a0 <lv_obj_get_hidden>
24014ab4:	4601      	mov	r1, r0
24014ab6:	2800      	cmp	r0, #0
24014ab8:	d14e      	bne.n	24014b58 <lv_cont_refr_autofit+0x2b8>
            if(ext->fit_left != LV_FIT_PARENT) {
24014aba:	7833      	ldrb	r3, [r6, #0]
24014abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
24014ac0:	2b20      	cmp	r3, #32
24014ac2:	d00d      	beq.n	24014ae0 <lv_cont_refr_autofit+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24014ac4:	2217      	movs	r2, #23
24014ac6:	4628      	mov	r0, r5
24014ac8:	f7f3 fe5e 	bl	24008788 <_lv_obj_get_style_int>
                tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
24014acc:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
24014ad0:	f9bd 2000 	ldrsh.w	r2, [sp]
24014ad4:	1a1b      	subs	r3, r3, r0
24014ad6:	4293      	cmp	r3, r2
24014ad8:	bfa8      	it	ge
24014ada:	4613      	movge	r3, r2
24014adc:	f8ad 3000 	strh.w	r3, [sp]
            if(ext->fit_right != LV_FIT_PARENT) {
24014ae0:	7833      	ldrb	r3, [r6, #0]
24014ae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
24014ae6:	2b80      	cmp	r3, #128	; 0x80
24014ae8:	d00e      	beq.n	24014b08 <lv_cont_refr_autofit+0x268>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24014aea:	2218      	movs	r2, #24
24014aec:	2100      	movs	r1, #0
24014aee:	4628      	mov	r0, r5
24014af0:	f7f3 fe4a 	bl	24008788 <_lv_obj_get_style_int>
                tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
24014af4:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
24014af8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
24014afc:	4403      	add	r3, r0
24014afe:	4293      	cmp	r3, r2
24014b00:	bfb8      	it	lt
24014b02:	4613      	movlt	r3, r2
24014b04:	f8ad 3004 	strh.w	r3, [sp, #4]
            if(ext->fit_top != LV_FIT_PARENT) {
24014b08:	7873      	ldrb	r3, [r6, #1]
24014b0a:	f003 0303 	and.w	r3, r3, #3
24014b0e:	2b02      	cmp	r3, #2
24014b10:	d00e      	beq.n	24014b30 <lv_cont_refr_autofit+0x290>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
24014b12:	2215      	movs	r2, #21
24014b14:	2100      	movs	r1, #0
24014b16:	4628      	mov	r0, r5
24014b18:	f7f3 fe36 	bl	24008788 <_lv_obj_get_style_int>
                tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
24014b1c:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
24014b20:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
24014b24:	1a1b      	subs	r3, r3, r0
24014b26:	4293      	cmp	r3, r2
24014b28:	bfa8      	it	ge
24014b2a:	4613      	movge	r3, r2
24014b2c:	f8ad 3002 	strh.w	r3, [sp, #2]
            if(ext->fit_bottom != LV_FIT_PARENT) {
24014b30:	7873      	ldrb	r3, [r6, #1]
24014b32:	f003 030c 	and.w	r3, r3, #12
24014b36:	2b08      	cmp	r3, #8
24014b38:	d00e      	beq.n	24014b58 <lv_cont_refr_autofit+0x2b8>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24014b3a:	2216      	movs	r2, #22
24014b3c:	2100      	movs	r1, #0
24014b3e:	4628      	mov	r0, r5
24014b40:	f7f3 fe22 	bl	24008788 <_lv_obj_get_style_int>
                tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
24014b44:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
24014b48:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
24014b4c:	4403      	add	r3, r0
24014b4e:	4293      	cmp	r3, r2
24014b50:	bfb8      	it	lt
24014b52:	4613      	movlt	r3, r2
24014b54:	f8ad 3006 	strh.w	r3, [sp, #6]
        _LV_LL_READ(cont->child_ll, child_i) {
24014b58:	4629      	mov	r1, r5
24014b5a:	4640      	mov	r0, r8
24014b5c:	f7fa fdd2 	bl	2400f704 <_lv_ll_get_next>
24014b60:	e6fe      	b.n	24014960 <lv_cont_refr_autofit+0xc0>
            new_area.x1 = parent_area.x1;
24014b62:	f8bd 2010 	ldrh.w	r2, [sp, #16]
24014b66:	e738      	b.n	240149da <lv_cont_refr_autofit+0x13a>
24014b68:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
            new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
24014b6c:	f1b9 0f00 	cmp.w	r9, #0
24014b70:	f43f af33 	beq.w	240149da <lv_cont_refr_autofit+0x13a>
24014b74:	f9bd 1000 	ldrsh.w	r1, [sp]
24014b78:	428a      	cmp	r2, r1
24014b7a:	bfa8      	it	ge
24014b7c:	460a      	movge	r2, r1
24014b7e:	e72c      	b.n	240149da <lv_cont_refr_autofit+0x13a>
            new_area.x2 = parent_area.x2;
24014b80:	f8bd 3014 	ldrh.w	r3, [sp, #20]
24014b84:	e736      	b.n	240149f4 <lv_cont_refr_autofit+0x154>
24014b86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
            new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
24014b8a:	f1b9 0f00 	cmp.w	r9, #0
24014b8e:	f43f af31 	beq.w	240149f4 <lv_cont_refr_autofit+0x154>
24014b92:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
24014b96:	4293      	cmp	r3, r2
24014b98:	bfb8      	it	lt
24014b9a:	4613      	movlt	r3, r2
24014b9c:	e72a      	b.n	240149f4 <lv_cont_refr_autofit+0x154>
            new_area.y1 = parent_area.y1;
24014b9e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
24014ba2:	e736      	b.n	24014a12 <lv_cont_refr_autofit+0x172>
24014ba4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
            new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
24014ba8:	f1b9 0f00 	cmp.w	r9, #0
24014bac:	f43f af31 	beq.w	24014a12 <lv_cont_refr_autofit+0x172>
24014bb0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
24014bb4:	428a      	cmp	r2, r1
24014bb6:	bfa8      	it	ge
24014bb8:	460a      	movge	r2, r1
24014bba:	e72a      	b.n	24014a12 <lv_cont_refr_autofit+0x172>
            new_area.y2 = parent_area.y2;
24014bbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
24014bc0:	e735      	b.n	24014a2e <lv_cont_refr_autofit+0x18e>
24014bc2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
            new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
24014bc6:	f1b9 0f00 	cmp.w	r9, #0
24014bca:	f43f af30 	beq.w	24014a2e <lv_cont_refr_autofit+0x18e>
24014bce:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
24014bd2:	4293      	cmp	r3, r2
24014bd4:	bfb8      	it	lt
24014bd6:	4613      	movlt	r3, r2
24014bd8:	e729      	b.n	24014a2e <lv_cont_refr_autofit+0x18e>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
24014bda:	69e3      	ldr	r3, [r4, #28]
24014bdc:	aa02      	add	r2, sp, #8
24014bde:	2103      	movs	r1, #3
24014be0:	4620      	mov	r0, r4
24014be2:	4798      	blx	r3
        _LV_LL_READ(cont->child_ll, child_i) {
24014be4:	4621      	mov	r1, r4
24014be6:	4640      	mov	r0, r8
24014be8:	f7fa fd8c 	bl	2400f704 <_lv_ll_get_next>
24014bec:	e758      	b.n	24014aa0 <lv_cont_refr_autofit+0x200>
24014bee:	bf00      	nop
24014bf0:	7c187c18 	.word	0x7c187c18
24014bf4:	83e883e8 	.word	0x83e883e8

24014bf8 <lv_cont_create>:
{
24014bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24014bfa:	4607      	mov	r7, r0
24014bfc:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
24014bfe:	f7f3 fb89 	bl	24008314 <lv_obj_create>
    if(cont == NULL) return NULL;
24014c02:	4605      	mov	r5, r0
24014c04:	b1c8      	cbz	r0, 24014c3a <lv_cont_create+0x42>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
24014c06:	4c2a      	ldr	r4, [pc, #168]	; (24014cb0 <lv_cont_create+0xb8>)
24014c08:	6823      	ldr	r3, [r4, #0]
24014c0a:	b913      	cbnz	r3, 24014c12 <lv_cont_create+0x1a>
24014c0c:	f7f4 faa1 	bl	24009152 <lv_obj_get_signal_cb>
24014c10:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
24014c12:	4c28      	ldr	r4, [pc, #160]	; (24014cb4 <lv_cont_create+0xbc>)
24014c14:	6823      	ldr	r3, [r4, #0]
24014c16:	b91b      	cbnz	r3, 24014c20 <lv_cont_create+0x28>
24014c18:	4628      	mov	r0, r5
24014c1a:	f7f4 fa9c 	bl	24009156 <lv_obj_get_design_cb>
24014c1e:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
24014c20:	2102      	movs	r1, #2
24014c22:	4628      	mov	r0, r5
24014c24:	f7f3 f8f2 	bl	24007e0c <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
24014c28:	4628      	mov	r0, r5
24014c2a:	f7f4 fa96 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) {
24014c2e:	4604      	mov	r4, r0
24014c30:	b928      	cbnz	r0, 24014c3e <lv_cont_create+0x46>
        lv_obj_del(cont);
24014c32:	4628      	mov	r0, r5
        return NULL;
24014c34:	4625      	mov	r5, r4
        lv_obj_del(cont);
24014c36:	f7f3 faef 	bl	24008218 <lv_obj_del>
}
24014c3a:	4628      	mov	r0, r5
24014c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ext->layout     = LV_LAYOUT_OFF;
24014c3e:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(cont, lv_cont_signal);
24014c40:	491d      	ldr	r1, [pc, #116]	; (24014cb8 <lv_cont_create+0xc0>)
    ext->layout     = LV_LAYOUT_OFF;
24014c42:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
24014c44:	7843      	ldrb	r3, [r0, #1]
24014c46:	f023 030f 	bic.w	r3, r3, #15
24014c4a:	7043      	strb	r3, [r0, #1]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
24014c4c:	4628      	mov	r0, r5
24014c4e:	f7f3 f8d3 	bl	24007df8 <lv_obj_set_signal_cb>
    if(copy == NULL) {
24014c52:	b936      	cbnz	r6, 24014c62 <lv_cont_create+0x6a>
        if(par != NULL) {
24014c54:	2f00      	cmp	r7, #0
24014c56:	d0f0      	beq.n	24014c3a <lv_cont_create+0x42>
            lv_theme_apply(cont, LV_THEME_CONT);
24014c58:	2107      	movs	r1, #7
24014c5a:	4628      	mov	r0, r5
24014c5c:	f7fc f932 	bl	24010ec4 <lv_theme_apply>
24014c60:	e7eb      	b.n	24014c3a <lv_cont_create+0x42>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24014c62:	4630      	mov	r0, r6
24014c64:	f7f4 fa79 	bl	2400915a <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
24014c68:	7803      	ldrb	r3, [r0, #0]
24014c6a:	7822      	ldrb	r2, [r4, #0]
24014c6c:	f3c3 1301 	ubfx	r3, r3, #4, #2
24014c70:	f363 1205 	bfi	r2, r3, #4, #2
24014c74:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
24014c76:	b2d2      	uxtb	r2, r2
24014c78:	7803      	ldrb	r3, [r0, #0]
24014c7a:	099b      	lsrs	r3, r3, #6
24014c7c:	f363 1287 	bfi	r2, r3, #6, #2
        ext->fit_top             = copy_ext->fit_top;
24014c80:	7863      	ldrb	r3, [r4, #1]
        ext->fit_right           = copy_ext->fit_right;
24014c82:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
24014c84:	7842      	ldrb	r2, [r0, #1]
24014c86:	f362 0301 	bfi	r3, r2, #0, #2
24014c8a:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
24014c8c:	7843      	ldrb	r3, [r0, #1]
24014c8e:	7862      	ldrb	r2, [r4, #1]
24014c90:	f3c3 0381 	ubfx	r3, r3, #2, #2
24014c94:	f363 0283 	bfi	r2, r3, #2, #2
        ext->layout              = copy_ext->layout;
24014c98:	7823      	ldrb	r3, [r4, #0]
        ext->fit_bottom          = copy_ext->fit_bottom;
24014c9a:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
24014c9c:	7802      	ldrb	r2, [r0, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24014c9e:	4628      	mov	r0, r5
        ext->layout              = copy_ext->layout;
24014ca0:	f362 0303 	bfi	r3, r2, #0, #4
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24014ca4:	22ff      	movs	r2, #255	; 0xff
        ext->layout              = copy_ext->layout;
24014ca6:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24014ca8:	4611      	mov	r1, r2
24014caa:	f7f4 f909 	bl	24008ec0 <lv_obj_refresh_style>
24014cae:	e7c4      	b.n	24014c3a <lv_cont_create+0x42>
24014cb0:	24035d04 	.word	0x24035d04
24014cb4:	24035d00 	.word	0x24035d00
24014cb8:	240153e9 	.word	0x240153e9

24014cbc <lv_cont_set_layout>:
{
24014cbc:	b570      	push	{r4, r5, r6, lr}
24014cbe:	460d      	mov	r5, r1
24014cc0:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
24014cc2:	f7f4 fa4a 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
24014cc6:	7803      	ldrb	r3, [r0, #0]
24014cc8:	f003 020f 	and.w	r2, r3, #15
24014ccc:	42aa      	cmp	r2, r5
24014cce:	d009      	beq.n	24014ce4 <lv_cont_set_layout+0x28>
    ext->layout = layout;
24014cd0:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014cd4:	2200      	movs	r2, #0
24014cd6:	2101      	movs	r1, #1
    ext->layout = layout;
24014cd8:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014cda:	4620      	mov	r0, r4
24014cdc:	69e3      	ldr	r3, [r4, #28]
}
24014cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014ce2:	4718      	bx	r3
}
24014ce4:	bd70      	pop	{r4, r5, r6, pc}

24014ce6 <lv_cont_set_fit4>:
{
24014ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24014cea:	4605      	mov	r5, r0
24014cec:	460c      	mov	r4, r1
24014cee:	4690      	mov	r8, r2
24014cf0:	461f      	mov	r7, r3
24014cf2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    lv_obj_invalidate(cont);
24014cf6:	f7f3 f975 	bl	24007fe4 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
24014cfa:	4628      	mov	r0, r5
24014cfc:	f7f4 fa2d 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
24014d00:	7803      	ldrb	r3, [r0, #0]
24014d02:	f3c3 1201 	ubfx	r2, r3, #4, #2
24014d06:	42a2      	cmp	r2, r4
24014d08:	d10b      	bne.n	24014d22 <lv_cont_set_fit4+0x3c>
24014d0a:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
24014d0e:	d108      	bne.n	24014d22 <lv_cont_set_fit4+0x3c>
24014d10:	7843      	ldrb	r3, [r0, #1]
24014d12:	f003 0203 	and.w	r2, r3, #3
24014d16:	42ba      	cmp	r2, r7
24014d18:	d103      	bne.n	24014d22 <lv_cont_set_fit4+0x3c>
24014d1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
24014d1e:	42b3      	cmp	r3, r6
24014d20:	d01d      	beq.n	24014d5e <lv_cont_set_fit4+0x78>
    ext->fit_left   = left;
24014d22:	0124      	lsls	r4, r4, #4
24014d24:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = top;
24014d26:	f007 0703 	and.w	r7, r7, #3
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014d2a:	2101      	movs	r1, #1
    ext->fit_left   = left;
24014d2c:	f004 0430 	and.w	r4, r4, #48	; 0x30
24014d30:	f003 030f 	and.w	r3, r3, #15
24014d34:	ea44 1288 	orr.w	r2, r4, r8, lsl #6
24014d38:	ea42 0403 	orr.w	r4, r2, r3
    ext->fit_top    = top;
24014d3c:	00b2      	lsls	r2, r6, #2
24014d3e:	f002 020c 	and.w	r2, r2, #12
    ext->fit_left   = left;
24014d42:	7004      	strb	r4, [r0, #0]
    ext->fit_top    = top;
24014d44:	ea42 0307 	orr.w	r3, r2, r7
24014d48:	7842      	ldrb	r2, [r0, #1]
24014d4a:	f022 020f 	bic.w	r2, r2, #15
24014d4e:	4313      	orrs	r3, r2
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014d50:	2200      	movs	r2, #0
    ext->fit_top    = top;
24014d52:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014d54:	4628      	mov	r0, r5
24014d56:	69eb      	ldr	r3, [r5, #28]
}
24014d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
24014d5c:	4718      	bx	r3
}
24014d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

24014d62 <lv_cont_get_layout>:
{
24014d62:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
24014d64:	f7f4 f9f9 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->layout;
24014d68:	7800      	ldrb	r0, [r0, #0]
}
24014d6a:	f000 000f 	and.w	r0, r0, #15
24014d6e:	bd08      	pop	{r3, pc}

24014d70 <lv_cont_refr_layout>:
{
24014d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
24014d74:	2101      	movs	r1, #1
{
24014d76:	b08f      	sub	sp, #60	; 0x3c
24014d78:	4683      	mov	fp, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
24014d7a:	f7f3 fcb6 	bl	240086ea <lv_obj_is_protected>
24014d7e:	4605      	mov	r5, r0
24014d80:	2800      	cmp	r0, #0
24014d82:	f040 832e 	bne.w	240153e2 <lv_cont_refr_layout+0x672>
    lv_layout_t type = lv_cont_get_layout(cont);
24014d86:	4658      	mov	r0, fp
24014d88:	f7ff ffeb 	bl	24014d62 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
24014d8c:	4629      	mov	r1, r5
    lv_layout_t type = lv_cont_get_layout(cont);
24014d8e:	4604      	mov	r4, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
24014d90:	4658      	mov	r0, fp
24014d92:	f7f3 fa6d 	bl	24008270 <lv_obj_get_child>
24014d96:	2800      	cmp	r0, #0
24014d98:	f000 8323 	beq.w	240153e2 <lv_cont_refr_layout+0x672>
    if(type == LV_LAYOUT_OFF) return;
24014d9c:	1e60      	subs	r0, r4, #1
24014d9e:	280a      	cmp	r0, #10
24014da0:	f200 831f 	bhi.w	240153e2 <lv_cont_refr_layout+0x672>
24014da4:	e8df f010 	tbh	[pc, r0, lsl #1]
24014da8:	0075000b 	.word	0x0075000b
24014dac:	00750075 	.word	0x00750075
24014db0:	00e700e7 	.word	0x00e700e7
24014db4:	015e00e7 	.word	0x015e00e7
24014db8:	015e015e 	.word	0x015e015e
24014dbc:	0293      	.short	0x0293
    _LV_LL_READ(cont->child_ll, child) {
24014dbe:	f10b 0604 	add.w	r6, fp, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24014dc2:	2214      	movs	r2, #20
24014dc4:	2100      	movs	r1, #0
24014dc6:	4658      	mov	r0, fp
    lv_coord_t h_tot         = 0;
24014dc8:	2400      	movs	r4, #0
24014dca:	f7f3 fcdd 	bl	24008788 <_lv_obj_get_style_int>
24014dce:	4605      	mov	r5, r0
    _LV_LL_READ(cont->child_ll, child) {
24014dd0:	4630      	mov	r0, r6
24014dd2:	f7fa fc91 	bl	2400f6f8 <_lv_ll_get_head>
    uint32_t obj_num         = 0;
24014dd6:	46a0      	mov	r8, r4
    _LV_LL_READ(cont->child_ll, child) {
24014dd8:	4607      	mov	r7, r0
24014dda:	b9df      	cbnz	r7, 24014e14 <lv_cont_refr_layout+0xa4>
    if(obj_num == 0) return;
24014ddc:	f1b8 0f00 	cmp.w	r8, #0
24014de0:	f000 82ff 	beq.w	240153e2 <lv_cont_refr_layout+0x672>
    h_tot -= inner;
24014de4:	1b64      	subs	r4, r4, r5
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
24014de6:	4658      	mov	r0, fp
24014de8:	2101      	movs	r1, #1
    h_tot -= inner;
24014dea:	b2a4      	uxth	r4, r4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
24014dec:	f7f2 ffa1 	bl	24007d32 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014df0:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
24014df2:	0be3      	lsrs	r3, r4, #15
24014df4:	fa03 f484 	sxtah	r4, r3, r4
24014df8:	1064      	asrs	r4, r4, #1
24014dfa:	4264      	negs	r4, r4
24014dfc:	b224      	sxth	r4, r4
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014dfe:	f7fa fc7e 	bl	2400f6fe <_lv_ll_get_tail>
24014e02:	4607      	mov	r7, r0
24014e04:	b9e8      	cbnz	r0, 24014e42 <lv_cont_refr_layout+0xd2>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
24014e06:	2101      	movs	r1, #1
24014e08:	4658      	mov	r0, fp
}
24014e0a:	b00f      	add	sp, #60	; 0x3c
24014e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
24014e10:	f7f2 bf95 	b.w	24007d3e <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
24014e14:	4638      	mov	r0, r7
24014e16:	f7f3 fc43 	bl	240086a0 <lv_obj_get_hidden>
24014e1a:	b960      	cbnz	r0, 24014e36 <lv_cont_refr_layout+0xc6>
24014e1c:	2104      	movs	r1, #4
24014e1e:	4638      	mov	r0, r7
24014e20:	f7f3 fc63 	bl	240086ea <lv_obj_is_protected>
24014e24:	b938      	cbnz	r0, 24014e36 <lv_cont_refr_layout+0xc6>
        h_tot += lv_obj_get_height(child) + inner;
24014e26:	4638      	mov	r0, r7
        obj_num++;
24014e28:	f108 0801 	add.w	r8, r8, #1
        h_tot += lv_obj_get_height(child) + inner;
24014e2c:	f7f3 fbf5 	bl	2400861a <lv_obj_get_height>
24014e30:	4428      	add	r0, r5
24014e32:	4420      	add	r0, r4
24014e34:	b204      	sxth	r4, r0
    _LV_LL_READ(cont->child_ll, child) {
24014e36:	4639      	mov	r1, r7
24014e38:	4630      	mov	r0, r6
24014e3a:	f7fa fc63 	bl	2400f704 <_lv_ll_get_next>
24014e3e:	4607      	mov	r7, r0
24014e40:	e7cb      	b.n	24014dda <lv_cont_refr_layout+0x6a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
24014e42:	4638      	mov	r0, r7
24014e44:	f7f3 fc2c 	bl	240086a0 <lv_obj_get_hidden>
24014e48:	b9f0      	cbnz	r0, 24014e88 <lv_cont_refr_layout+0x118>
24014e4a:	2104      	movs	r1, #4
24014e4c:	4638      	mov	r0, r7
24014e4e:	f7f3 fc4c 	bl	240086ea <lv_obj_is_protected>
24014e52:	4681      	mov	r9, r0
24014e54:	b9c0      	cbnz	r0, 24014e88 <lv_cont_refr_layout+0x118>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
24014e56:	4638      	mov	r0, r7
24014e58:	fa1f f884 	uxth.w	r8, r4
24014e5c:	f7f3 fbdd 	bl	2400861a <lv_obj_get_height>
24014e60:	464b      	mov	r3, r9
24014e62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
24014e66:	4659      	mov	r1, fp
24014e68:	1042      	asrs	r2, r0, #1
24014e6a:	4638      	mov	r0, r7
24014e6c:	fa12 f284 	uxtah	r2, r2, r4
24014e70:	b212      	sxth	r2, r2
24014e72:	9200      	str	r2, [sp, #0]
24014e74:	464a      	mov	r2, r9
24014e76:	f7f3 f939 	bl	240080ec <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner;
24014e7a:	4638      	mov	r0, r7
24014e7c:	f7f3 fbcd 	bl	2400861a <lv_obj_get_height>
24014e80:	4428      	add	r0, r5
24014e82:	4480      	add	r8, r0
24014e84:	fa0f f488 	sxth.w	r4, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014e88:	4639      	mov	r1, r7
24014e8a:	4630      	mov	r0, r6
24014e8c:	f7fa fc3f 	bl	2400f70e <_lv_ll_get_prev>
24014e90:	e7b7      	b.n	24014e02 <lv_cont_refr_layout+0x92>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014e92:	2212      	movs	r2, #18
24014e94:	2100      	movs	r1, #0
24014e96:	4658      	mov	r0, fp
24014e98:	f7f3 fc76 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24014e9c:	2213      	movs	r2, #19
24014e9e:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014ea0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24014ea2:	4658      	mov	r0, fp
24014ea4:	f7f3 fc70 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014ea8:	2210      	movs	r2, #16
24014eaa:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24014eac:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014eae:	4658      	mov	r0, fp
24014eb0:	f7f3 fc6a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24014eb4:	2214      	movs	r2, #20
24014eb6:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014eb8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24014eba:	4658      	mov	r0, fp
24014ebc:	f7f3 fc64 	bl	24008788 <_lv_obj_get_style_int>
24014ec0:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
24014ec2:	4658      	mov	r0, fp
24014ec4:	f7ff ff4d 	bl	24014d62 <lv_cont_get_layout>
    switch(type) {
24014ec8:	2803      	cmp	r0, #3
24014eca:	d050      	beq.n	24014f6e <lv_cont_refr_layout+0x1fe>
24014ecc:	2804      	cmp	r0, #4
24014ece:	d049      	beq.n	24014f64 <lv_cont_refr_layout+0x1f4>
            align     = LV_ALIGN_IN_TOP_LEFT;
24014ed0:	2802      	cmp	r0, #2
24014ed2:	f04f 0801 	mov.w	r8, #1
24014ed6:	bf18      	it	ne
24014ed8:	2600      	movne	r6, #0
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014eda:	f10b 0a04 	add.w	sl, fp, #4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
24014ede:	4658      	mov	r0, fp
24014ee0:	2101      	movs	r1, #1
24014ee2:	f7f2 ff26 	bl	24007d32 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014ee6:	4650      	mov	r0, sl
24014ee8:	f7fa fc09 	bl	2400f6fe <_lv_ll_get_tail>
24014eec:	4604      	mov	r4, r0
24014eee:	2800      	cmp	r0, #0
24014ef0:	d089      	beq.n	24014e06 <lv_cont_refr_layout+0x96>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
24014ef2:	4620      	mov	r0, r4
24014ef4:	f7f3 fbd4 	bl	240086a0 <lv_obj_get_hidden>
24014ef8:	bb78      	cbnz	r0, 24014f5a <lv_cont_refr_layout+0x1ea>
24014efa:	2104      	movs	r1, #4
24014efc:	4620      	mov	r0, r4
24014efe:	f7f3 fbf4 	bl	240086ea <lv_obj_is_protected>
24014f02:	4601      	mov	r1, r0
24014f04:	bb48      	cbnz	r0, 24014f5a <lv_cont_refr_layout+0x1ea>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
24014f06:	2215      	movs	r2, #21
24014f08:	9003      	str	r0, [sp, #12]
24014f0a:	4620      	mov	r0, r4
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
24014f0c:	fa1f f985 	uxth.w	r9, r5
24014f10:	f7f3 fc3a 	bl	24008788 <_lv_obj_get_style_int>
24014f14:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24014f16:	9903      	ldr	r1, [sp, #12]
24014f18:	2216      	movs	r2, #22
24014f1a:	4620      	mov	r0, r4
24014f1c:	fa17 f585 	uxtah	r5, r7, r5
24014f20:	9104      	str	r1, [sp, #16]
24014f22:	f7f3 fc31 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24014f26:	2217      	movs	r2, #23
24014f28:	9904      	ldr	r1, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24014f2a:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24014f2c:	4620      	mov	r0, r4
24014f2e:	f7f3 fc2b 	bl	24008788 <_lv_obj_get_style_int>
24014f32:	4430      	add	r0, r6
24014f34:	b22d      	sxth	r5, r5
24014f36:	4642      	mov	r2, r8
24014f38:	b203      	sxth	r3, r0
24014f3a:	4659      	mov	r1, fp
24014f3c:	4620      	mov	r0, r4
24014f3e:	9500      	str	r5, [sp, #0]
24014f40:	f7f3 f8d4 	bl	240080ec <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
24014f44:	4620      	mov	r0, r4
24014f46:	f7f3 fb68 	bl	2400861a <lv_obj_get_height>
24014f4a:	9b02      	ldr	r3, [sp, #8]
24014f4c:	4418      	add	r0, r3
24014f4e:	9b03      	ldr	r3, [sp, #12]
24014f50:	4438      	add	r0, r7
24014f52:	4418      	add	r0, r3
24014f54:	4481      	add	r9, r0
24014f56:	fa0f f589 	sxth.w	r5, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014f5a:	4621      	mov	r1, r4
24014f5c:	4650      	mov	r0, sl
24014f5e:	f7fa fbd6 	bl	2400f70e <_lv_ll_get_prev>
24014f62:	e7c3      	b.n	24014eec <lv_cont_refr_layout+0x17c>
            hpad_corr = -right;
24014f64:	4264      	negs	r4, r4
            align     = LV_ALIGN_IN_TOP_RIGHT;
24014f66:	f04f 0803 	mov.w	r8, #3
            hpad_corr = -right;
24014f6a:	b226      	sxth	r6, r4
            break;
24014f6c:	e7b5      	b.n	24014eda <lv_cont_refr_layout+0x16a>
    switch(type) {
24014f6e:	2600      	movs	r6, #0
24014f70:	f04f 0802 	mov.w	r8, #2
24014f74:	e7b1      	b.n	24014eda <lv_cont_refr_layout+0x16a>
    lv_layout_t type = lv_cont_get_layout(cont);
24014f76:	4658      	mov	r0, fp
24014f78:	f7ff fef3 	bl	24014d62 <lv_cont_get_layout>
24014f7c:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
24014f7e:	4658      	mov	r0, fp
24014f80:	f7f3 fbb1 	bl	240086e6 <lv_obj_get_base_dir>
    switch(type) {
24014f84:	2c06      	cmp	r4, #6
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
24014f86:	4606      	mov	r6, r0
    switch(type) {
24014f88:	d010      	beq.n	24014fac <lv_cont_refr_layout+0x23c>
24014f8a:	2c07      	cmp	r4, #7
24014f8c:	d059      	beq.n	24015042 <lv_cont_refr_layout+0x2d2>
24014f8e:	2c05      	cmp	r4, #5
24014f90:	d166      	bne.n	24015060 <lv_cont_refr_layout+0x2f0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24014f92:	2210      	movs	r2, #16
24014f94:	2100      	movs	r1, #0
24014f96:	4658      	mov	r0, fp
24014f98:	f7f3 fbf6 	bl	24008788 <_lv_obj_get_style_int>
24014f9c:	4605      	mov	r5, r0
            vpad_corr = 0;
24014f9e:	2e01      	cmp	r6, #1
24014fa0:	bf0c      	ite	eq
24014fa2:	f04f 0803 	moveq.w	r8, #3
24014fa6:	f04f 0801 	movne.w	r8, #1
24014faa:	e007      	b.n	24014fbc <lv_cont_refr_layout+0x24c>
            vpad_corr = 0;
24014fac:	2801      	cmp	r0, #1
24014fae:	f04f 0500 	mov.w	r5, #0
24014fb2:	bf0c      	ite	eq
24014fb4:	f04f 0808 	moveq.w	r8, #8
24014fb8:	f04f 0807 	movne.w	r8, #7
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
24014fbc:	2101      	movs	r1, #1
24014fbe:	4658      	mov	r0, fp
24014fc0:	f7f2 feb7 	bl	24007d32 <lv_obj_add_protect>
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
24014fc4:	2e01      	cmp	r6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014fc6:	f04f 0100 	mov.w	r1, #0
24014fca:	4658      	mov	r0, fp
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24014fcc:	bf0c      	ite	eq
24014fce:	2213      	moveq	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014fd0:	2212      	movne	r2, #18
    _LV_LL_READ_BACK(cont->child_ll, child) {
24014fd2:	f10b 0a04 	add.w	sl, fp, #4
24014fd6:	f7f3 fbd7 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24014fda:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24014fdc:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24014fde:	2100      	movs	r1, #0
24014fe0:	4658      	mov	r0, fp
24014fe2:	f7f3 fbd1 	bl	24008788 <_lv_obj_get_style_int>
24014fe6:	9002      	str	r0, [sp, #8]
24014fe8:	4650      	mov	r0, sl
24014fea:	f7fa fb88 	bl	2400f6fe <_lv_ll_get_tail>
24014fee:	4604      	mov	r4, r0
24014ff0:	2800      	cmp	r0, #0
24014ff2:	f43f af08 	beq.w	24014e06 <lv_cont_refr_layout+0x96>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
24014ff6:	4620      	mov	r0, r4
24014ff8:	f7f3 fb52 	bl	240086a0 <lv_obj_get_hidden>
24014ffc:	b9e0      	cbnz	r0, 24015038 <lv_cont_refr_layout+0x2c8>
24014ffe:	2104      	movs	r1, #4
24015000:	4620      	mov	r0, r4
24015002:	f7f3 fb72 	bl	240086ea <lv_obj_is_protected>
24015006:	b9b8      	cbnz	r0, 24015038 <lv_cont_refr_layout+0x2c8>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
24015008:	2e01      	cmp	r6, #1
2401500a:	fa1f f987 	uxth.w	r9, r7
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
2401500e:	4642      	mov	r2, r8
24015010:	4659      	mov	r1, fp
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
24015012:	bf0c      	ite	eq
24015014:	f1c9 0300 	rsbeq	r3, r9, #0
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
24015018:	463b      	movne	r3, r7
2401501a:	4620      	mov	r0, r4
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
2401501c:	bf06      	itte	eq
2401501e:	9500      	streq	r5, [sp, #0]
24015020:	b21b      	sxtheq	r3, r3
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
24015022:	9500      	strne	r5, [sp, #0]
24015024:	f7f3 f862 	bl	240080ec <lv_obj_align>
        last_cord += lv_obj_get_width(child) + inner;
24015028:	4620      	mov	r0, r4
2401502a:	f7f3 faf0 	bl	2400860e <lv_obj_get_width>
2401502e:	9b02      	ldr	r3, [sp, #8]
24015030:	4418      	add	r0, r3
24015032:	4481      	add	r9, r0
24015034:	fa0f f789 	sxth.w	r7, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
24015038:	4621      	mov	r1, r4
2401503a:	4650      	mov	r0, sl
2401503c:	f7fa fb67 	bl	2400f70e <_lv_ll_get_prev>
24015040:	e7d5      	b.n	24014fee <lv_cont_refr_layout+0x27e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24015042:	2211      	movs	r2, #17
24015044:	2100      	movs	r1, #0
24015046:	4658      	mov	r0, fp
24015048:	f7f3 fb9e 	bl	24008788 <_lv_obj_get_style_int>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
2401504c:	2e01      	cmp	r6, #1
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
2401504e:	f1c0 0000 	rsb	r0, r0, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
24015052:	bf0c      	ite	eq
24015054:	f04f 0806 	moveq.w	r8, #6
24015058:	f04f 0804 	movne.w	r8, #4
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
2401505c:	b205      	sxth	r5, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
2401505e:	e7ad      	b.n	24014fbc <lv_cont_refr_layout+0x24c>
            vpad_corr = 0;
24015060:	2500      	movs	r5, #0
24015062:	e79c      	b.n	24014f9e <lv_cont_refr_layout+0x22e>
    lv_layout_t type = lv_cont_get_layout(cont);
24015064:	4658      	mov	r0, fp
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
24015066:	f10b 0704 	add.w	r7, fp, #4
    lv_layout_t type = lv_cont_get_layout(cont);
2401506a:	f7ff fe7a 	bl	24014d62 <lv_cont_get_layout>
2401506e:	9004      	str	r0, [sp, #16]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
24015070:	4658      	mov	r0, fp
24015072:	f7f3 facc 	bl	2400860e <lv_obj_get_width>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015076:	2210      	movs	r2, #16
24015078:	2100      	movs	r1, #0
2401507a:	9006      	str	r0, [sp, #24]
2401507c:	4658      	mov	r0, fp
2401507e:	f7f3 fb83 	bl	24008788 <_lv_obj_get_style_int>
24015082:	9002      	str	r0, [sp, #8]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
24015084:	4638      	mov	r0, r7
24015086:	f7fa fb3a 	bl	2400f6fe <_lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
2401508a:	4604      	mov	r4, r0
2401508c:	2800      	cmp	r0, #0
2401508e:	f000 81a8 	beq.w	240153e2 <lv_cont_refr_layout+0x672>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
24015092:	2101      	movs	r1, #1
24015094:	4658      	mov	r0, fp
24015096:	f7f2 fe4c 	bl	24007d32 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401509a:	2212      	movs	r2, #18
2401509c:	2100      	movs	r1, #0
2401509e:	4658      	mov	r0, fp
240150a0:	f7f3 fb72 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240150a4:	2213      	movs	r2, #19
240150a6:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240150a8:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240150aa:	4658      	mov	r0, fp
240150ac:	f7f3 fb6c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
240150b0:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240150b2:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
240150b4:	2100      	movs	r1, #0
240150b6:	4658      	mov	r0, fp
240150b8:	f7f3 fb66 	bl	24008788 <_lv_obj_get_style_int>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
240150bc:	9b07      	ldr	r3, [sp, #28]
240150be:	9005      	str	r0, [sp, #20]
240150c0:	441d      	add	r5, r3
240150c2:	b22b      	sxth	r3, r5
240150c4:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t obj_num = 0;
240150c6:	2600      	movs	r6, #0
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
240150c8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
240150cc:	4625      	mov	r5, r4
        lv_coord_t h_row = 0;
240150ce:	9603      	str	r6, [sp, #12]
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
240150d0:	4620      	mov	r0, r4
240150d2:	f7f3 fae5 	bl	240086a0 <lv_obj_get_hidden>
240150d6:	2800      	cmp	r0, #0
240150d8:	d162      	bne.n	240151a0 <lv_cont_refr_layout+0x430>
240150da:	2104      	movs	r1, #4
240150dc:	4620      	mov	r0, r4
240150de:	f7f3 fb04 	bl	240086ea <lv_obj_is_protected>
240150e2:	2800      	cmp	r0, #0
240150e4:	d15c      	bne.n	240151a0 <lv_cont_refr_layout+0x430>
240150e6:	9008      	str	r0, [sp, #32]
                lv_coord_t w = lv_obj_get_width(child_rc);
240150e8:	4620      	mov	r0, r4
240150ea:	f7f3 fa90 	bl	2400860e <lv_obj_get_width>
240150ee:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
240150f0:	2217      	movs	r2, #23
240150f2:	9908      	ldr	r1, [sp, #32]
240150f4:	4620      	mov	r0, r4
240150f6:	f7f3 fb47 	bl	24008788 <_lv_obj_get_style_int>
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
240150fa:	4450      	add	r0, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
240150fc:	2218      	movs	r2, #24
240150fe:	9908      	ldr	r1, [sp, #32]
24015100:	fa1f f980 	uxth.w	r9, r0
24015104:	4620      	mov	r0, r4
24015106:	f7f3 fb3f 	bl	24008788 <_lv_obj_get_style_int>
                if(w_row + w > w_obj) {
2401510a:	9a06      	ldr	r2, [sp, #24]
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
2401510c:	4448      	add	r0, r9
                if(w_row + w > w_obj) {
2401510e:	9908      	ldr	r1, [sp, #32]
24015110:	fa08 f980 	sxtah	r9, r8, r0
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
24015114:	b283      	uxth	r3, r0
                if(w_row + w > w_obj) {
24015116:	4591      	cmp	r9, r2
24015118:	dd1c      	ble.n	24015154 <lv_cont_refr_layout+0x3e4>
                    if(child_rc != NULL && obj_num != 0) {
2401511a:	2e00      	cmp	r6, #0
2401511c:	f000 812d 	beq.w	2401537a <lv_cont_refr_layout+0x60a>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
24015120:	4621      	mov	r1, r4
24015122:	4638      	mov	r0, r7
24015124:	f7fa faee 	bl	2400f704 <_lv_ll_get_next>
24015128:	4604      	mov	r4, r0
        else if(obj_num == 1) {
2401512a:	2e01      	cmp	r6, #1
2401512c:	d143      	bne.n	240151b6 <lv_cont_refr_layout+0x446>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
2401512e:	2215      	movs	r2, #21
24015130:	2100      	movs	r1, #0
24015132:	4628      	mov	r0, r5
24015134:	f7f3 fb28 	bl	24008788 <_lv_obj_get_style_int>
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
24015138:	9b02      	ldr	r3, [sp, #8]
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
2401513a:	2202      	movs	r2, #2
2401513c:	4659      	mov	r1, fp
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
2401513e:	4418      	add	r0, r3
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
24015140:	2300      	movs	r3, #0
24015142:	b200      	sxth	r0, r0
24015144:	9000      	str	r0, [sp, #0]
24015146:	4628      	mov	r0, r5
24015148:	f7f2 ffd0 	bl	240080ec <lv_obj_align>
        if(child_rc == NULL) break;
2401514c:	2c00      	cmp	r4, #0
2401514e:	f040 8132 	bne.w	240153b6 <lv_cont_refr_layout+0x646>
24015152:	e658      	b.n	24014e06 <lv_cont_refr_layout+0x96>
                w_row += w + pinner; /*Add the object width + inner padding*/
24015154:	9a05      	ldr	r2, [sp, #20]
                lv_coord_t h = lv_obj_get_height(child_rc);
24015156:	4620      	mov	r0, r4
24015158:	9108      	str	r1, [sp, #32]
                obj_num++;
2401515a:	3601      	adds	r6, #1
                w_row += w + pinner; /*Add the object width + inner padding*/
2401515c:	4490      	add	r8, r2
2401515e:	4498      	add	r8, r3
                lv_coord_t h = lv_obj_get_height(child_rc);
24015160:	f7f3 fa5b 	bl	2400861a <lv_obj_get_height>
24015164:	4682      	mov	sl, r0
24015166:	2215      	movs	r2, #21
24015168:	9908      	ldr	r1, [sp, #32]
2401516a:	4620      	mov	r0, r4
2401516c:	f7f3 fb0c 	bl	24008788 <_lv_obj_get_style_int>
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
24015170:	4450      	add	r0, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
24015172:	9908      	ldr	r1, [sp, #32]
24015174:	2216      	movs	r2, #22
24015176:	fa1f f980 	uxth.w	r9, r0
2401517a:	4620      	mov	r0, r4
2401517c:	f7f3 fb04 	bl	24008788 <_lv_obj_get_style_int>
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
24015180:	9b03      	ldr	r3, [sp, #12]
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
24015182:	4448      	add	r0, r9
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
24015184:	2108      	movs	r1, #8
                w_row += w + pinner; /*Add the object width + inner padding*/
24015186:	fa0f f888 	sxth.w	r8, r8
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
2401518a:	b200      	sxth	r0, r0
2401518c:	4283      	cmp	r3, r0
2401518e:	bfb8      	it	lt
24015190:	4603      	movlt	r3, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
24015192:	4620      	mov	r0, r4
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
24015194:	9303      	str	r3, [sp, #12]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
24015196:	f7f3 faa8 	bl	240086ea <lv_obj_is_protected>
2401519a:	2800      	cmp	r0, #0
2401519c:	f040 80ea 	bne.w	24015374 <lv_cont_refr_layout+0x604>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
240151a0:	4621      	mov	r1, r4
240151a2:	4638      	mov	r0, r7
240151a4:	f7fa fab3 	bl	2400f70e <_lv_ll_get_prev>
240151a8:	4604      	mov	r4, r0
            if(obj_num == 0)
240151aa:	2e00      	cmp	r6, #0
240151ac:	f000 8114 	beq.w	240153d8 <lv_cont_refr_layout+0x668>
        } while(child_rc != NULL);
240151b0:	2800      	cmp	r0, #0
240151b2:	d18d      	bne.n	240150d0 <lv_cont_refr_layout+0x360>
240151b4:	e7b9      	b.n	2401512a <lv_cont_refr_layout+0x3ba>
            w_row -= pinner * obj_num;
240151b6:	9b05      	ldr	r3, [sp, #20]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
240151b8:	4658      	mov	r0, fp
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
240151ba:	9a06      	ldr	r2, [sp, #24]
            w_row -= pinner * obj_num;
240151bc:	fb13 f306 	smulbb	r3, r3, r6
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
240151c0:	3e01      	subs	r6, #1
            w_row -= pinner * obj_num;
240151c2:	eba8 0303 	sub.w	r3, r8, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
240151c6:	b21b      	sxth	r3, r3
240151c8:	1ad3      	subs	r3, r2, r3
240151ca:	fbb3 f6f6 	udiv	r6, r3, r6
240151ce:	b233      	sxth	r3, r6
240151d0:	9308      	str	r3, [sp, #32]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
240151d2:	f7f3 fa88 	bl	240086e6 <lv_obj_get_base_dir>
240151d6:	2801      	cmp	r0, #1
240151d8:	d074      	beq.n	240152c4 <lv_cont_refr_layout+0x554>
                inv = 1;
240151da:	f04f 0901 	mov.w	r9, #1
                align = LV_ALIGN_IN_TOP_LEFT;
240151de:	46ca      	mov	sl, r9
240151e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
240151e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
240151e8:	4413      	add	r3, r2
240151ea:	b29b      	uxth	r3, r3
240151ec:	930b      	str	r3, [sp, #44]	; 0x2c
240151ee:	e043      	b.n	24015278 <lv_cont_refr_layout+0x508>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
240151f0:	4628      	mov	r0, r5
240151f2:	f7f3 fa55 	bl	240086a0 <lv_obj_get_hidden>
240151f6:	2800      	cmp	r0, #0
240151f8:	d136      	bne.n	24015268 <lv_cont_refr_layout+0x4f8>
240151fa:	2104      	movs	r1, #4
240151fc:	4628      	mov	r0, r5
240151fe:	f7f3 fa74 	bl	240086ea <lv_obj_is_protected>
24015202:	4601      	mov	r1, r0
24015204:	bb80      	cbnz	r0, 24015268 <lv_cont_refr_layout+0x4f8>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24015206:	2217      	movs	r2, #23
24015208:	9009      	str	r0, [sp, #36]	; 0x24
2401520a:	4628      	mov	r0, r5
2401520c:	f7f3 fabc 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24015210:	2218      	movs	r2, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
24015212:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
24015214:	9909      	ldr	r1, [sp, #36]	; 0x24
24015216:	4628      	mov	r0, r5
24015218:	f7f3 fab6 	bl	24008788 <_lv_obj_get_style_int>
                    switch(type) {
2401521c:	9b04      	ldr	r3, [sp, #16]
2401521e:	900a      	str	r0, [sp, #40]	; 0x28
24015220:	2b09      	cmp	r3, #9
24015222:	d02c      	beq.n	2401527e <lv_cont_refr_layout+0x50e>
24015224:	2b0a      	cmp	r3, #10
24015226:	9909      	ldr	r1, [sp, #36]	; 0x24
24015228:	d038      	beq.n	2401529c <lv_cont_refr_layout+0x52c>
2401522a:	2b08      	cmp	r3, #8
2401522c:	d111      	bne.n	24015252 <lv_cont_refr_layout+0x4e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
2401522e:	2215      	movs	r2, #21
24015230:	4628      	mov	r0, r5
24015232:	f7f3 faa9 	bl	24008788 <_lv_obj_get_style_int>
                                         inv * (act_x + mleft),
24015236:	eb08 0306 	add.w	r3, r8, r6
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
2401523a:	9a02      	ldr	r2, [sp, #8]
                            lv_obj_align(child_tmp, cont, align,
2401523c:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
24015240:	4410      	add	r0, r2
                            lv_obj_align(child_tmp, cont, align,
24015242:	b200      	sxth	r0, r0
24015244:	4652      	mov	r2, sl
24015246:	b21b      	sxth	r3, r3
24015248:	4659      	mov	r1, fp
2401524a:	9000      	str	r0, [sp, #0]
2401524c:	4628      	mov	r0, r5
2401524e:	f7f2 ff4d 	bl	240080ec <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
24015252:	4628      	mov	r0, r5
24015254:	f7f3 f9db 	bl	2400860e <lv_obj_get_width>
24015258:	9b08      	ldr	r3, [sp, #32]
2401525a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2401525c:	18c3      	adds	r3, r0, r3
2401525e:	4433      	add	r3, r6
24015260:	4413      	add	r3, r2
24015262:	4443      	add	r3, r8
24015264:	fa0f f883 	sxth.w	r8, r3
                if(child_tmp == child_rc) break;
24015268:	42ac      	cmp	r4, r5
2401526a:	f000 80a5 	beq.w	240153b8 <lv_cont_refr_layout+0x648>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
2401526e:	4629      	mov	r1, r5
24015270:	4638      	mov	r0, r7
24015272:	f7fa fa4c 	bl	2400f70e <_lv_ll_get_prev>
24015276:	4605      	mov	r5, r0
            while(child_tmp != NULL) {
24015278:	2d00      	cmp	r5, #0
2401527a:	d1b9      	bne.n	240151f0 <lv_cont_refr_layout+0x480>
2401527c:	e766      	b.n	2401514c <lv_cont_refr_layout+0x3dc>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
2401527e:	4628      	mov	r0, r5
24015280:	f7f3 f9cb 	bl	2400861a <lv_obj_get_height>
24015284:	9a03      	ldr	r2, [sp, #12]
                                         inv * (act_x + mleft),
24015286:	eb08 0306 	add.w	r3, r8, r6
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
2401528a:	1a10      	subs	r0, r2, r0
2401528c:	9a02      	ldr	r2, [sp, #8]
                            lv_obj_align(child_tmp, cont, align,
2401528e:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
24015292:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
24015296:	eb02 0060 	add.w	r0, r2, r0, asr #1
2401529a:	e7d2      	b.n	24015242 <lv_cont_refr_layout+0x4d2>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
2401529c:	4628      	mov	r0, r5
2401529e:	910d      	str	r1, [sp, #52]	; 0x34
240152a0:	f7f3 f9bb 	bl	2400861a <lv_obj_get_height>
240152a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
240152a6:	2216      	movs	r2, #22
240152a8:	990d      	ldr	r1, [sp, #52]	; 0x34
240152aa:	1a18      	subs	r0, r3, r0
240152ac:	b283      	uxth	r3, r0
240152ae:	4628      	mov	r0, r5
240152b0:	9309      	str	r3, [sp, #36]	; 0x24
240152b2:	f7f3 fa69 	bl	24008788 <_lv_obj_get_style_int>
                                         inv * (act_x + mleft),
240152b6:	eb08 0306 	add.w	r3, r8, r6
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
240152ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
                            lv_obj_align(child_tmp, cont, align,
240152bc:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
240152c0:	1a10      	subs	r0, r2, r0
240152c2:	e7be      	b.n	24015242 <lv_cont_refr_layout+0x4d2>
                inv = -1;
240152c4:	f04f 39ff 	mov.w	r9, #4294967295
                align = LV_ALIGN_IN_TOP_RIGHT;
240152c8:	f04f 0a03 	mov.w	sl, #3
240152cc:	e788      	b.n	240151e0 <lv_cont_refr_layout+0x470>
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
240152ce:	4658      	mov	r0, fp
    _LV_LL_READ_BACK(cont->child_ll, child) {
240152d0:	f10b 0a04 	add.w	sl, fp, #4
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
240152d4:	f7f3 ff15 	bl	24009102 <lv_obj_get_width_fit>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
240152d8:	2214      	movs	r2, #20
240152da:	4681      	mov	r9, r0
240152dc:	2100      	movs	r1, #0
240152de:	4658      	mov	r0, fp
240152e0:	f7f3 fa52 	bl	24008788 <_lv_obj_get_style_int>
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
240152e4:	2100      	movs	r1, #0
240152e6:	4605      	mov	r5, r0
240152e8:	4658      	mov	r0, fp
240152ea:	f7f2 ffc1 	bl	24008270 <lv_obj_get_child>
240152ee:	f7f3 f994 	bl	2400861a <lv_obj_get_height>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
240152f2:	2101      	movs	r1, #1
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
240152f4:	b2ab      	uxth	r3, r5
240152f6:	fa10 f585 	uxtah	r5, r0, r5
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
240152fa:	4658      	mov	r0, fp
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
240152fc:	9302      	str	r3, [sp, #8]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
240152fe:	f7f2 fd18 	bl	24007d32 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24015302:	2212      	movs	r2, #18
24015304:	2100      	movs	r1, #0
24015306:	4658      	mov	r0, fp
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
24015308:	b2ad      	uxth	r5, r5
2401530a:	f7f3 fa3d 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401530e:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24015310:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015312:	2100      	movs	r1, #0
24015314:	4658      	mov	r0, fp
24015316:	f7f3 fa37 	bl	24008788 <_lv_obj_get_style_int>
2401531a:	4606      	mov	r6, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
2401531c:	4650      	mov	r0, sl
    lv_coord_t act_x = left;
2401531e:	4647      	mov	r7, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
24015320:	f7fa f9ed 	bl	2400f6fe <_lv_ll_get_tail>
        if(act_x + obj_w > w_fit + left) {
24015324:	44c1      	add	r9, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
24015326:	4604      	mov	r4, r0
24015328:	2c00      	cmp	r4, #0
2401532a:	f43f ad6c 	beq.w	24014e06 <lv_cont_refr_layout+0x96>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
2401532e:	4620      	mov	r0, r4
24015330:	f7f3 f9b6 	bl	240086a0 <lv_obj_get_hidden>
24015334:	b9c0      	cbnz	r0, 24015368 <lv_cont_refr_layout+0x5f8>
24015336:	2104      	movs	r1, #4
24015338:	4620      	mov	r0, r4
2401533a:	f7f3 f9d6 	bl	240086ea <lv_obj_is_protected>
2401533e:	b998      	cbnz	r0, 24015368 <lv_cont_refr_layout+0x5f8>
        lv_coord_t obj_w = lv_obj_get_width(child);
24015340:	4620      	mov	r0, r4
24015342:	f7f3 f964 	bl	2400860e <lv_obj_get_width>
        if(act_x + obj_w > w_fit + left) {
24015346:	183a      	adds	r2, r7, r0
24015348:	9003      	str	r0, [sp, #12]
        lv_obj_set_pos(child, act_x, act_y);
2401534a:	4620      	mov	r0, r4
        if(act_x + obj_w > w_fit + left) {
2401534c:	454a      	cmp	r2, r9
            act_y += y_ofs;
2401534e:	bfc2      	ittt	gt
24015350:	1976      	addgt	r6, r6, r5
            act_x = left;
24015352:	4647      	movgt	r7, r8
            act_y += y_ofs;
24015354:	b236      	sxthgt	r6, r6
        lv_obj_set_pos(child, act_x, act_y);
24015356:	4639      	mov	r1, r7
24015358:	4632      	mov	r2, r6
2401535a:	f7f2 fe84 	bl	24008066 <lv_obj_set_pos>
        act_x += inner + obj_w;
2401535e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
24015362:	4413      	add	r3, r2
24015364:	443b      	add	r3, r7
24015366:	b21f      	sxth	r7, r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
24015368:	4621      	mov	r1, r4
2401536a:	4650      	mov	r0, sl
2401536c:	f7fa f9cf 	bl	2400f70e <_lv_ll_get_prev>
24015370:	4604      	mov	r4, r0
24015372:	e7d9      	b.n	24015328 <lv_cont_refr_layout+0x5b8>
        if(obj_num == 0) {
24015374:	2e00      	cmp	r6, #0
24015376:	f47f aed8 	bne.w	2401512a <lv_cont_refr_layout+0x3ba>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
2401537a:	2215      	movs	r2, #21
2401537c:	2100      	movs	r1, #0
2401537e:	4620      	mov	r0, r4
24015380:	f7f3 fa02 	bl	24008788 <_lv_obj_get_style_int>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
24015384:	9b02      	ldr	r3, [sp, #8]
24015386:	b285      	uxth	r5, r0
24015388:	2202      	movs	r2, #2
2401538a:	fa13 f080 	uxtah	r0, r3, r0
2401538e:	4659      	mov	r1, fp
24015390:	2300      	movs	r3, #0
24015392:	b200      	sxth	r0, r0
24015394:	9000      	str	r0, [sp, #0]
24015396:	4620      	mov	r0, r4
24015398:	f7f2 fea8 	bl	240080ec <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
2401539c:	4620      	mov	r0, r4
2401539e:	f7f3 f93c 	bl	2400861a <lv_obj_get_height>
                h_row += mtop;
240153a2:	4405      	add	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
240153a4:	2216      	movs	r2, #22
240153a6:	2100      	movs	r1, #0
240153a8:	b2ad      	uxth	r5, r5
240153aa:	4620      	mov	r0, r4
240153ac:	f7f3 f9ec 	bl	24008788 <_lv_obj_get_style_int>
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
240153b0:	4428      	add	r0, r5
240153b2:	b203      	sxth	r3, r0
240153b4:	9303      	str	r3, [sp, #12]
240153b6:	4625      	mov	r5, r4
        act_y += pinner + h_row;           /*y increment*/
240153b8:	9b02      	ldr	r3, [sp, #8]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
240153ba:	4629      	mov	r1, r5
        act_y += pinner + h_row;           /*y increment*/
240153bc:	9a05      	ldr	r2, [sp, #20]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
240153be:	4638      	mov	r0, r7
        act_y += pinner + h_row;           /*y increment*/
240153c0:	4413      	add	r3, r2
240153c2:	9a03      	ldr	r2, [sp, #12]
240153c4:	4413      	add	r3, r2
240153c6:	b21b      	sxth	r3, r3
240153c8:	9302      	str	r3, [sp, #8]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
240153ca:	f7fa f9a0 	bl	2400f70e <_lv_ll_get_prev>
    while(child_rs != NULL) {
240153ce:	4604      	mov	r4, r0
240153d0:	2800      	cmp	r0, #0
240153d2:	f47f ae78 	bne.w	240150c6 <lv_cont_refr_layout+0x356>
240153d6:	e516      	b.n	24014e06 <lv_cont_refr_layout+0x96>
        } while(child_rc != NULL);
240153d8:	2800      	cmp	r0, #0
240153da:	f43f ad14 	beq.w	24014e06 <lv_cont_refr_layout+0x96>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
240153de:	4625      	mov	r5, r4
240153e0:	e676      	b.n	240150d0 <lv_cont_refr_layout+0x360>
}
240153e2:	b00f      	add	sp, #60	; 0x3c
240153e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

240153e8 <lv_cont_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
240153e8:	2908      	cmp	r1, #8
{
240153ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240153ee:	4604      	mov	r4, r0
240153f0:	460f      	mov	r7, r1
240153f2:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
240153f4:	d10e      	bne.n	24015414 <lv_cont_signal+0x2c>
    switch(type) {
240153f6:	7813      	ldrb	r3, [r2, #0]
240153f8:	b133      	cbz	r3, 24015408 <lv_cont_signal+0x20>
        info->result = lv_cont_get_style(cont, info->part);
240153fa:	2300      	movs	r3, #0
240153fc:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(cont, sign, param);
240153fe:	4b23      	ldr	r3, [pc, #140]	; (2401548c <lv_cont_signal+0xa4>)
}
24015400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(cont, sign, param);
24015404:	681b      	ldr	r3, [r3, #0]
24015406:	4718      	bx	r3
            style_dsc_p = &cont->style_list;
24015408:	3428      	adds	r4, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
2401540a:	2601      	movs	r6, #1
        info->result = lv_cont_get_style(cont, info->part);
2401540c:	6054      	str	r4, [r2, #4]
}
2401540e:	4630      	mov	r0, r6
24015410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(cont, sign, param);
24015414:	4b1d      	ldr	r3, [pc, #116]	; (2401548c <lv_cont_signal+0xa4>)
24015416:	681b      	ldr	r3, [r3, #0]
24015418:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
2401541a:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
2401541c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
2401541e:	d1f6      	bne.n	2401540e <lv_cont_signal+0x26>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24015420:	3f01      	subs	r7, #1
24015422:	2f06      	cmp	r7, #6
24015424:	d8f3      	bhi.n	2401540e <lv_cont_signal+0x26>
24015426:	a301      	add	r3, pc, #4	; (adr r3, 2401542c <lv_cont_signal+0x44>)
24015428:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
2401542c:	24015469 	.word	0x24015469
24015430:	24015455 	.word	0x24015455
24015434:	2401546f 	.word	0x2401546f
24015438:	24015469 	.word	0x24015469
2401543c:	2401540f 	.word	0x2401540f
24015440:	2401540f 	.word	0x2401540f
24015444:	24015449 	.word	0x24015449
24015448:	4628      	mov	r0, r5
2401544a:	4911      	ldr	r1, [pc, #68]	; (24015490 <lv_cont_signal+0xa8>)
}
2401544c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24015450:	f7f3 beb7 	b.w	240091c2 <lv_obj_handle_get_type_signal>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
24015454:	4620      	mov	r0, r4
24015456:	f7f3 f8da 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2401545a:	88ab      	ldrh	r3, [r5, #4]
2401545c:	882a      	ldrh	r2, [r5, #0]
2401545e:	3301      	adds	r3, #1
24015460:	1a9b      	subs	r3, r3, r2
24015462:	b21b      	sxth	r3, r3
24015464:	4298      	cmp	r0, r3
24015466:	d006      	beq.n	24015476 <lv_cont_signal+0x8e>
            lv_cont_refr_layout(cont);
24015468:	4620      	mov	r0, r4
2401546a:	f7ff fc81 	bl	24014d70 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
2401546e:	4620      	mov	r0, r4
24015470:	f7ff fa16 	bl	240148a0 <lv_cont_refr_autofit>
24015474:	e7cb      	b.n	2401540e <lv_cont_signal+0x26>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
24015476:	4620      	mov	r0, r4
24015478:	f7f3 f8cf 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2401547c:	88eb      	ldrh	r3, [r5, #6]
2401547e:	886a      	ldrh	r2, [r5, #2]
24015480:	3301      	adds	r3, #1
24015482:	1a9b      	subs	r3, r3, r2
24015484:	b21b      	sxth	r3, r3
24015486:	4298      	cmp	r0, r3
24015488:	d1ee      	bne.n	24015468 <lv_cont_signal+0x80>
2401548a:	e7c0      	b.n	2401540e <lv_cont_signal+0x26>
2401548c:	24035d04 	.word	0x24035d04
24015490:	900ff2ca 	.word	0x900ff2ca

24015494 <lv_cont_get_fit_left>:
{
24015494:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
24015496:	f7f3 fe60 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->fit_left;
2401549a:	7800      	ldrb	r0, [r0, #0]
}
2401549c:	f3c0 1001 	ubfx	r0, r0, #4, #2
240154a0:	bd08      	pop	{r3, pc}

240154a2 <lv_cont_get_fit_right>:
{
240154a2:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
240154a4:	f7f3 fe59 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->fit_right;
240154a8:	7800      	ldrb	r0, [r0, #0]
}
240154aa:	0980      	lsrs	r0, r0, #6
240154ac:	bd08      	pop	{r3, pc}

240154ae <lv_cont_get_fit_top>:
{
240154ae:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
240154b0:	f7f3 fe53 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->fit_top;
240154b4:	7840      	ldrb	r0, [r0, #1]
}
240154b6:	f000 0003 	and.w	r0, r0, #3
240154ba:	bd08      	pop	{r3, pc}

240154bc <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_img_design(lv_obj_t * img, const lv_area_t * clip_area, lv_design_mode_t mode)
{
240154bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240154c0:	4615      	mov	r5, r2
240154c2:	b0af      	sub	sp, #188	; 0xbc
240154c4:	4604      	mov	r4, r0
240154c6:	4688      	mov	r8, r1
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
240154c8:	f7f3 fe47 	bl	2400915a <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
240154cc:	2d02      	cmp	r5, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
240154ce:	4606      	mov	r6, r0
    if(mode == LV_DESIGN_COVER_CHK) {
240154d0:	d16a      	bne.n	240155a8 <lv_img_design+0xec>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
240154d2:	462a      	mov	r2, r5
240154d4:	2100      	movs	r1, #0
240154d6:	4620      	mov	r0, r4
240154d8:	f7f3 f956 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
240154dc:	2800      	cmp	r0, #0
240154de:	f040 82a1 	bne.w	24015a24 <lv_img_design+0x568>

        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
240154e2:	7d33      	ldrb	r3, [r6, #20]
240154e4:	079a      	lsls	r2, r3, #30
240154e6:	d42b      	bmi.n	24015540 <lv_img_design+0x84>

        /*Non true color format might have "holes"*/
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
240154e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
240154ec:	2b20      	cmp	r3, #32
240154ee:	d001      	beq.n	240154f4 <lv_img_design+0x38>
240154f0:	2b08      	cmp	r3, #8
240154f2:	d125      	bne.n	24015540 <lv_img_design+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
240154f4:	f248 02ac 	movw	r2, #32940	; 0x80ac
240154f8:	2100      	movs	r1, #0
240154fa:	4620      	mov	r0, r4
240154fc:	f7f3 fba2 	bl	24008c44 <_lv_obj_get_style_opa>

        /*With not LV_OPA_COVER images acn't cover an area */
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
24015500:	28ff      	cmp	r0, #255	; 0xff
24015502:	d11d      	bne.n	24015540 <lv_img_design+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24015504:	2206      	movs	r2, #6
24015506:	2100      	movs	r1, #0
24015508:	4620      	mov	r0, r4
2401550a:	f7f3 f93d 	bl	24008788 <_lv_obj_get_style_int>

        int32_t angle_final = lv_obj_get_style_transform_angle(img, LV_IMG_PART_MAIN);
        angle_final += ext->angle;
2401550e:	f8b6 900c 	ldrh.w	r9, [r6, #12]

        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
24015512:	eb19 0900 	adds.w	r9, r9, r0
24015516:	d113      	bne.n	24015540 <lv_img_design+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24015518:	2207      	movs	r2, #7
2401551a:	4649      	mov	r1, r9
2401551c:	4620      	mov	r0, r4
2401551e:	f7f3 f933 	bl	24008788 <_lv_obj_get_style_int>

        int32_t zoom_final = lv_obj_get_style_transform_zoom(img, LV_IMG_PART_MAIN);
        zoom_final = (zoom_final * ext->zoom) >> 8;
24015522:	8a77      	ldrh	r7, [r6, #18]
24015524:	4347      	muls	r7, r0
24015526:	123f      	asrs	r7, r7, #8

        if(zoom_final == LV_IMG_ZOOM_NONE) {
24015528:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
2401552c:	d10c      	bne.n	24015548 <lv_img_design+0x8c>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
2401552e:	464a      	mov	r2, r9
24015530:	f104 0110 	add.w	r1, r4, #16
24015534:	4640      	mov	r0, r8
24015536:	f7f9 ff0a 	bl	2400f34e <_lv_area_is_in>
2401553a:	f1c0 0002 	rsb	r0, r0, #2
2401553e:	b2c5      	uxtb	r5, r0
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
        }
    }

    return LV_DESIGN_RES_OK;
}
24015540:	4628      	mov	r0, r5
24015542:	b02f      	add	sp, #188	; 0xbc
24015544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
24015548:	4620      	mov	r0, r4
2401554a:	360e      	adds	r6, #14
2401554c:	b2bf      	uxth	r7, r7
2401554e:	f7f3 f85e 	bl	2400860e <lv_obj_get_width>
24015552:	9003      	str	r0, [sp, #12]
24015554:	4620      	mov	r0, r4
24015556:	f7f3 f860 	bl	2400861a <lv_obj_get_height>
2401555a:	464b      	mov	r3, r9
2401555c:	4602      	mov	r2, r0
2401555e:	9903      	ldr	r1, [sp, #12]
24015560:	a819      	add	r0, sp, #100	; 0x64
24015562:	9601      	str	r6, [sp, #4]
24015564:	9700      	str	r7, [sp, #0]
24015566:	f7f9 f88b 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            a.x1 += img->coords.x1;
2401556a:	8a22      	ldrh	r2, [r4, #16]
2401556c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
24015570:	4640      	mov	r0, r8
            a.y1 += img->coords.y1;
24015572:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
            a.x1 += img->coords.x1;
24015576:	4413      	add	r3, r2
24015578:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
2401557c:	8a63      	ldrh	r3, [r4, #18]
2401557e:	4419      	add	r1, r3
24015580:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
24015584:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
24015588:	440a      	add	r2, r1
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
2401558a:	a919      	add	r1, sp, #100	; 0x64
            a.x2 += img->coords.x1;
2401558c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
24015590:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
24015594:	4413      	add	r3, r2
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
24015596:	464a      	mov	r2, r9
            a.y2 += img->coords.y1;
24015598:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
2401559c:	f7f9 fed7 	bl	2400f34e <_lv_area_is_in>
        return LV_DESIGN_RES_COVER;
240155a0:	2800      	cmp	r0, #0
240155a2:	bf18      	it	ne
240155a4:	2501      	movne	r5, #1
240155a6:	e7cb      	b.n	24015540 <lv_img_design+0x84>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
240155a8:	2d00      	cmp	r5, #0
240155aa:	f040 81ae 	bne.w	2401590a <lv_img_design+0x44e>
        if(ext->h == 0 || ext->w == 0) return true;
240155ae:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
240155b2:	2b00      	cmp	r3, #0
240155b4:	f000 81a7 	beq.w	24015906 <lv_img_design+0x44a>
240155b8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
240155bc:	2b00      	cmp	r3, #0
240155be:	f000 81a2 	beq.w	24015906 <lv_img_design+0x44a>
        lv_draw_rect_dsc_init(&bg_dsc);
240155c2:	a819      	add	r0, sp, #100	; 0x64
240155c4:	f7f8 fa4e 	bl	2400da64 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
240155c8:	aa19      	add	r2, sp, #100	; 0x64
240155ca:	4629      	mov	r1, r5
240155cc:	4620      	mov	r0, r4
240155ce:	f7f3 fe06 	bl	240091de <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
240155d2:	2233      	movs	r2, #51	; 0x33
240155d4:	4629      	mov	r1, r5
240155d6:	4620      	mov	r0, r4
240155d8:	f7f3 f8d6 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
240155dc:	b108      	cbz	r0, 240155e2 <lv_img_design+0x126>
            bg_dsc.border_opa = LV_OPA_TRANSP;
240155de:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
240155e2:	2207      	movs	r2, #7
240155e4:	2100      	movs	r1, #0
240155e6:	4620      	mov	r0, r4
240155e8:	f7f3 f8ce 	bl	24008788 <_lv_obj_get_style_int>
        zoom_final = (zoom_final * ext->zoom) >> 8;
240155ec:	8a77      	ldrh	r7, [r6, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
240155ee:	2206      	movs	r2, #6
240155f0:	2100      	movs	r1, #0
240155f2:	4347      	muls	r7, r0
240155f4:	4620      	mov	r0, r4
240155f6:	f7f3 f8c7 	bl	24008788 <_lv_obj_get_style_int>
        angle_final += ext->angle;
240155fa:	f8b6 900c 	ldrh.w	r9, [r6, #12]
        zoom_final = (zoom_final * ext->zoom) >> 8;
240155fe:	123f      	asrs	r7, r7, #8
        angle_final += ext->angle;
24015600:	4481      	add	r9, r0
        lv_coord_t obj_w = lv_obj_get_width(img);
24015602:	4620      	mov	r0, r4
24015604:	f7f3 f803 	bl	2400860e <lv_obj_get_width>
24015608:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
2401560a:	4620      	mov	r0, r4
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
2401560c:	fa0f fb89 	sxth.w	fp, r9
        lv_coord_t obj_h = lv_obj_get_height(img);
24015610:	f7f3 f803 	bl	2400861a <lv_obj_get_height>
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
24015614:	9905      	ldr	r1, [sp, #20]
24015616:	b2bb      	uxth	r3, r7
24015618:	4602      	mov	r2, r0
        lv_coord_t obj_h = lv_obj_get_height(img);
2401561a:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
2401561c:	a808      	add	r0, sp, #32
2401561e:	9303      	str	r3, [sp, #12]
                                         angle_final, zoom_final, &ext->pivot);
24015620:	f106 030e 	add.w	r3, r6, #14
24015624:	9304      	str	r3, [sp, #16]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
24015626:	9301      	str	r3, [sp, #4]
24015628:	9b03      	ldr	r3, [sp, #12]
2401562a:	9300      	str	r3, [sp, #0]
2401562c:	465b      	mov	r3, fp
2401562e:	f7f9 f827 	bl	2400e680 <_lv_img_buf_get_transformed_area>
        bg_coords.x1 += img->coords.x1;
24015632:	8a22      	ldrh	r2, [r4, #16]
24015634:	f8bd 3020 	ldrh.w	r3, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24015638:	4620      	mov	r0, r4
        bg_coords.y1 += img->coords.y1;
2401563a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        bg_coords.x1 += img->coords.x1;
2401563e:	4413      	add	r3, r2
24015640:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
24015644:	8a63      	ldrh	r3, [r4, #18]
24015646:	4419      	add	r1, r3
24015648:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
2401564c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
24015650:	440a      	add	r2, r1
24015652:	2100      	movs	r1, #0
24015654:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
24015658:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
2401565c:	4413      	add	r3, r2
2401565e:	2212      	movs	r2, #18
24015660:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
24015664:	f7f3 f890 	bl	24008788 <_lv_obj_get_style_int>
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
24015668:	f8bd 3020 	ldrh.w	r3, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2401566c:	2213      	movs	r2, #19
2401566e:	2100      	movs	r1, #0
24015670:	1a18      	subs	r0, r3, r0
24015672:	f8ad 0020 	strh.w	r0, [sp, #32]
24015676:	4620      	mov	r0, r4
24015678:	f7f3 f886 	bl	24008788 <_lv_obj_get_style_int>
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
2401567c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015680:	2210      	movs	r2, #16
24015682:	2100      	movs	r1, #0
24015684:	4418      	add	r0, r3
24015686:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
2401568a:	4620      	mov	r0, r4
2401568c:	f7f3 f87c 	bl	24008788 <_lv_obj_get_style_int>
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
24015690:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24015694:	2211      	movs	r2, #17
24015696:	2100      	movs	r1, #0
24015698:	1a18      	subs	r0, r3, r0
2401569a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
2401569e:	4620      	mov	r0, r4
240156a0:	f7f3 f872 	bl	24008788 <_lv_obj_get_style_int>
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
240156a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
240156a8:	aa19      	add	r2, sp, #100	; 0x64
240156aa:	4641      	mov	r1, r8
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
240156ac:	4418      	add	r0, r3
240156ae:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
240156b2:	a808      	add	r0, sp, #32
240156b4:	f7f8 f9fa 	bl	2400daac <lv_draw_rect>
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
240156b8:	2f00      	cmp	r7, #0
240156ba:	f43f af41 	beq.w	24015540 <lv_img_design+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
240156be:	2202      	movs	r2, #2
240156c0:	2100      	movs	r1, #0
240156c2:	4620      	mov	r0, r4
240156c4:	f7f3 f860 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
240156c8:	b198      	cbz	r0, 240156f2 <lv_img_design+0x236>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
240156ca:	201c      	movs	r0, #28
240156cc:	f7fa fb0a 	bl	2400fce4 <_lv_mem_buf_get>
240156d0:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
240156d2:	2201      	movs	r2, #1
240156d4:	2100      	movs	r1, #0
240156d6:	4620      	mov	r0, r4
240156d8:	f7f3 f856 	bl	24008788 <_lv_obj_get_style_int>
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
240156dc:	a908      	add	r1, sp, #32
240156de:	4602      	mov	r2, r0
240156e0:	2300      	movs	r3, #0
240156e2:	4650      	mov	r0, sl
240156e4:	f7f8 f946 	bl	2400d974 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, img + 8);
240156e8:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
240156ec:	4650      	mov	r0, sl
240156ee:	f7f8 f853 	bl	2400d798 <lv_draw_mask_add>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
240156f2:	7d33      	ldrb	r3, [r6, #20]
240156f4:	f013 0102 	ands.w	r1, r3, #2
240156f8:	f040 80df 	bne.w	240158ba <lv_img_design+0x3fe>
            lv_draw_img_dsc_init(&img_dsc);
240156fc:	a810      	add	r0, sp, #64	; 0x40
240156fe:	9107      	str	r1, [sp, #28]
24015700:	f7f6 fa80 	bl	2400bc04 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
24015704:	aa10      	add	r2, sp, #64	; 0x40
24015706:	9907      	ldr	r1, [sp, #28]
24015708:	4620      	mov	r0, r4
2401570a:	f7f3 ff37 	bl	2400957c <lv_obj_init_draw_img_dsc>
            img_dsc.zoom = zoom_final;
2401570e:	9b03      	ldr	r3, [sp, #12]
24015710:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
24015714:	2b00      	cmp	r3, #0
24015716:	f000 80fa 	beq.w	2401590e <lv_img_design+0x452>
            img_dsc.pivot.x = ext->pivot.x;
2401571a:	89f3      	ldrh	r3, [r6, #14]
            img_dsc.antialias = ext->antialias;
2401571c:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
            img_dsc.pivot.x = ext->pivot.x;
24015720:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
24015724:	8a33      	ldrh	r3, [r6, #16]
            img_dsc.angle = angle_final;
24015726:	f8ad 9042 	strh.w	r9, [sp, #66]	; 0x42
            img_dsc.pivot.y = ext->pivot.y;
2401572a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
2401572e:	7d73      	ldrb	r3, [r6, #21]
24015730:	f3c3 0300 	ubfx	r3, r3, #0, #1
24015734:	f363 0200 	bfi	r2, r3, #0, #1
24015738:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
2401573c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
24015740:	437b      	muls	r3, r7
24015742:	121a      	asrs	r2, r3, #8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
24015744:	f343 230f 	sbfx	r3, r3, #8, #16
24015748:	2b00      	cmp	r3, #0
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
2401574a:	9207      	str	r2, [sp, #28]
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
2401574c:	f340 80df 	ble.w	2401590e <lv_img_design+0x452>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
24015750:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
24015754:	437b      	muls	r3, r7
24015756:	ea4f 2923 	mov.w	r9, r3, asr #8
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
2401575a:	f343 230f 	sbfx	r3, r3, #8, #16
2401575e:	2b00      	cmp	r3, #0
24015760:	f340 80d5 	ble.w	2401590e <lv_img_design+0x452>
            lv_obj_get_coords(img, &zoomed_coords);
24015764:	a90a      	add	r1, sp, #40	; 0x28
24015766:	4620      	mov	r0, r4
24015768:	f7f2 fda9 	bl	240082be <lv_obj_get_coords>
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
2401576c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
24015770:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
24015774:	437b      	muls	r3, r7
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
24015776:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
2401577a:	eb01 2123 	add.w	r1, r1, r3, asr #8
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
2401577e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
24015782:	437b      	muls	r3, r7
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
24015784:	fa0f fe81 	sxth.w	lr, r1
24015788:	fa1f fa81 	uxth.w	sl, r1
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
2401578c:	eb02 2223 	add.w	r2, r2, r3, asr #8
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
24015790:	9b05      	ldr	r3, [sp, #20]
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
24015792:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
24015796:	3b01      	subs	r3, #1
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
24015798:	fa0f fc82 	sxth.w	ip, r2
2401579c:	b290      	uxth	r0, r2
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
2401579e:	437b      	muls	r3, r7
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
240157a0:	f8ad c02a 	strh.w	ip, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
240157a4:	121b      	asrs	r3, r3, #8
240157a6:	fa13 f181 	uxtah	r1, r3, r1
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
240157aa:	9b06      	ldr	r3, [sp, #24]
240157ac:	3b01      	subs	r3, #1
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
240157ae:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
240157b2:	437b      	muls	r3, r7
240157b4:	121b      	asrs	r3, r3, #8
240157b6:	fa13 f282 	uxtah	r2, r3, r2
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
240157ba:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
240157be:	4573      	cmp	r3, lr
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
240157c0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
240157c4:	bfbc      	itt	lt
240157c6:	8933      	ldrhlt	r3, [r6, #8]
240157c8:	ebaa 0a03 	sublt.w	sl, sl, r3
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
240157cc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
240157d0:	bfb8      	it	lt
240157d2:	f8ad a028 	strhlt.w	sl, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
240157d6:	4563      	cmp	r3, ip
240157d8:	bfbe      	ittt	lt
240157da:	8973      	ldrhlt	r3, [r6, #10]
240157dc:	1ac0      	sublt	r0, r0, r3
240157de:	f8ad 002a 	strhlt.w	r0, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
240157e2:	4620      	mov	r0, r4
240157e4:	f7f2 ff13 	bl	2400860e <lv_obj_get_width>
240157e8:	9005      	str	r0, [sp, #20]
240157ea:	4620      	mov	r0, r4
240157ec:	f7f2 ff15 	bl	2400861a <lv_obj_get_height>
240157f0:	9b04      	ldr	r3, [sp, #16]
240157f2:	4602      	mov	r2, r0
240157f4:	9905      	ldr	r1, [sp, #20]
240157f6:	9301      	str	r3, [sp, #4]
240157f8:	a80c      	add	r0, sp, #48	; 0x30
240157fa:	9b03      	ldr	r3, [sp, #12]
240157fc:	9300      	str	r3, [sp, #0]
240157fe:	465b      	mov	r3, fp
24015800:	f7f8 ff3e 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            clip_real.x1 += img->coords.x1;
24015804:	8a23      	ldrh	r3, [r4, #16]
24015806:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
2401580a:	a90c      	add	r1, sp, #48	; 0x30
            clip_real.x1 += img->coords.x1;
2401580c:	441a      	add	r2, r3
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
2401580e:	4608      	mov	r0, r1
            clip_real.x1 += img->coords.x1;
24015810:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
24015814:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
24015818:	4413      	add	r3, r2
            clip_real.y1 += img->coords.y1;
2401581a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
            clip_real.x2 += img->coords.x1;
2401581e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
24015822:	8a63      	ldrh	r3, [r4, #18]
24015824:	441a      	add	r2, r3
24015826:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
2401582a:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
2401582e:	4413      	add	r3, r2
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
24015830:	4642      	mov	r2, r8
            clip_real.y2 += img->coords.y1;
24015832:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
24015836:	f7f9 fc8c 	bl	2400f152 <_lv_area_intersect>
2401583a:	2800      	cmp	r0, #0
2401583c:	d067      	beq.n	2401590e <lv_img_design+0x452>
            coords_tmp.y1 = zoomed_coords.y1;
2401583e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
24015842:	8972      	ldrh	r2, [r6, #10]
            coords_tmp.y1 = zoomed_coords.y1;
24015844:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
24015848:	3b01      	subs	r3, #1
2401584a:	4413      	add	r3, r2
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
2401584c:	b21b      	sxth	r3, r3
2401584e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
24015852:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
24015856:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
2401585a:	429a      	cmp	r2, r3
2401585c:	f6bf ae70 	bge.w	24015540 <lv_img_design+0x84>
                coords_tmp.x1 = zoomed_coords.x1;
24015860:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
24015864:	8932      	ldrh	r2, [r6, #8]
                coords_tmp.x1 = zoomed_coords.x1;
24015866:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
2401586a:	3b01      	subs	r3, #1
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
2401586c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
24015870:	4413      	add	r3, r2
24015872:	b21b      	sxth	r3, r3
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
24015874:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
24015878:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
2401587c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
24015880:	429a      	cmp	r2, r3
24015882:	db0a      	blt.n	2401589a <lv_img_design+0x3de>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
24015884:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
24015888:	fa13 f389 	uxtah	r3, r3, r9
2401588c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
24015890:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
24015894:	fa13 f389 	uxtah	r3, r3, r9
24015898:	e7d8      	b.n	2401584c <lv_img_design+0x390>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
2401589a:	ab10      	add	r3, sp, #64	; 0x40
2401589c:	6832      	ldr	r2, [r6, #0]
2401589e:	a90c      	add	r1, sp, #48	; 0x30
240158a0:	a80e      	add	r0, sp, #56	; 0x38
240158a2:	f7f6 f9d5 	bl	2400bc50 <lv_draw_img>
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
240158a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
240158aa:	4423      	add	r3, r4
240158ac:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
240158b0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
240158b4:	4423      	add	r3, r4
240158b6:	b21b      	sxth	r3, r3
240158b8:	e7dc      	b.n	24015874 <lv_img_design+0x3b8>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
240158ba:	f003 0303 	and.w	r3, r3, #3
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
240158be:	f104 0710 	add.w	r7, r4, #16
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
240158c2:	2b02      	cmp	r3, #2
240158c4:	d118      	bne.n	240158f8 <lv_img_design+0x43c>
            lv_draw_label_dsc_init(&label_dsc);
240158c6:	a810      	add	r0, sp, #64	; 0x40
240158c8:	f7f6 fabc 	bl	2400be44 <lv_draw_label_dsc_init>
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
240158cc:	aa10      	add	r2, sp, #64	; 0x40
240158ce:	4620      	mov	r0, r4
240158d0:	2100      	movs	r1, #0
240158d2:	f7f3 fe0d 	bl	240094f0 <lv_obj_init_draw_label_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
240158d6:	f248 02a9 	movw	r2, #32937	; 0x80a9
240158da:	2100      	movs	r1, #0
240158dc:	4620      	mov	r0, r4
240158de:	f7f2 ff1f 	bl	24008720 <_lv_obj_get_style_color>
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
240158e2:	2300      	movs	r3, #0
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
240158e4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
240158e8:	aa10      	add	r2, sp, #64	; 0x40
240158ea:	9300      	str	r3, [sp, #0]
240158ec:	4641      	mov	r1, r8
240158ee:	6833      	ldr	r3, [r6, #0]
240158f0:	4638      	mov	r0, r7
240158f2:	f7f6 fabd 	bl	2400be70 <lv_draw_label>
240158f6:	e623      	b.n	24015540 <lv_img_design+0x84>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
240158f8:	2300      	movs	r3, #0
240158fa:	4641      	mov	r1, r8
240158fc:	4638      	mov	r0, r7
240158fe:	461a      	mov	r2, r3
24015900:	f7f6 f9a6 	bl	2400bc50 <lv_draw_img>
24015904:	e61c      	b.n	24015540 <lv_img_design+0x84>
        if(ext->h == 0 || ext->w == 0) return true;
24015906:	2501      	movs	r5, #1
24015908:	e61a      	b.n	24015540 <lv_img_design+0x84>
    else if(mode == LV_DESIGN_DRAW_POST) {
2401590a:	2d01      	cmp	r5, #1
2401590c:	d001      	beq.n	24015912 <lv_img_design+0x456>
    return LV_DESIGN_RES_OK;
2401590e:	2500      	movs	r5, #0
24015910:	e616      	b.n	24015540 <lv_img_design+0x84>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
24015912:	2202      	movs	r2, #2
24015914:	2100      	movs	r1, #0
24015916:	4620      	mov	r0, r4
24015918:	f7f2 ff36 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
2401591c:	b128      	cbz	r0, 2401592a <lv_img_design+0x46e>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
2401591e:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
24015922:	f7f7 ff83 	bl	2400d82c <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
24015926:	f7fa f875 	bl	2400fa14 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
2401592a:	2233      	movs	r2, #51	; 0x33
2401592c:	2100      	movs	r1, #0
2401592e:	4620      	mov	r0, r4
24015930:	f7f2 ff2a 	bl	24008788 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
24015934:	2800      	cmp	r0, #0
24015936:	d0ea      	beq.n	2401590e <lv_img_design+0x452>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
24015938:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
2401593a:	a819      	add	r0, sp, #100	; 0x64
2401593c:	f7f8 f892 	bl	2400da64 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
24015940:	aa19      	add	r2, sp, #100	; 0x64
24015942:	4629      	mov	r1, r5
24015944:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
24015946:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
                                             angle_final, zoom_final, &ext->pivot);
2401594a:	360e      	adds	r6, #14
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
2401594c:	f88d 509a 	strb.w	r5, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
24015950:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
24015954:	f7f3 fc43 	bl	240091de <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24015958:	4629      	mov	r1, r5
2401595a:	2207      	movs	r2, #7
2401595c:	4620      	mov	r0, r4
2401595e:	f7f2 ff13 	bl	24008788 <_lv_obj_get_style_int>
            zoom_final = (zoom_final * ext->zoom) >> 8;
24015962:	88b7      	ldrh	r7, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24015964:	4629      	mov	r1, r5
24015966:	2206      	movs	r2, #6
24015968:	4347      	muls	r7, r0
2401596a:	4620      	mov	r0, r4
2401596c:	f7f2 ff0c 	bl	24008788 <_lv_obj_get_style_int>
            angle_final += ext->angle;
24015970:	f836 3c02 	ldrh.w	r3, [r6, #-2]
24015974:	8ae2      	ldrh	r2, [r4, #22]
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
24015976:	f3c7 270f 	ubfx	r7, r7, #8, #16
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2401597a:	8aa1      	ldrh	r1, [r4, #20]
            angle_final += ext->angle;
2401597c:	4418      	add	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2401597e:	3201      	adds	r2, #1
24015980:	8a63      	ldrh	r3, [r4, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24015982:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24015984:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24015986:	8a23      	ldrh	r3, [r4, #16]
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
24015988:	9601      	str	r6, [sp, #4]
2401598a:	1ac9      	subs	r1, r1, r3
2401598c:	b212      	sxth	r2, r2
2401598e:	b203      	sxth	r3, r0
24015990:	9700      	str	r7, [sp, #0]
24015992:	a810      	add	r0, sp, #64	; 0x40
24015994:	b209      	sxth	r1, r1
24015996:	f7f8 fe73 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += img->coords.x1;
2401599a:	8a22      	ldrh	r2, [r4, #16]
2401599c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240159a0:	4620      	mov	r0, r4
            bg_coords.y1 += img->coords.y1;
240159a2:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            bg_coords.x1 += img->coords.x1;
240159a6:	4413      	add	r3, r2
240159a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
240159ac:	8a63      	ldrh	r3, [r4, #18]
240159ae:	4419      	add	r1, r3
240159b0:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
240159b4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
240159b8:	440a      	add	r2, r1
240159ba:	4629      	mov	r1, r5
240159bc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
240159c0:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
240159c4:	4413      	add	r3, r2
240159c6:	2212      	movs	r2, #18
240159c8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
240159cc:	f7f2 fedc 	bl	24008788 <_lv_obj_get_style_int>
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
240159d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240159d4:	4629      	mov	r1, r5
240159d6:	2213      	movs	r2, #19
240159d8:	1a18      	subs	r0, r3, r0
240159da:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
240159de:	4620      	mov	r0, r4
240159e0:	f7f2 fed2 	bl	24008788 <_lv_obj_get_style_int>
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
240159e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240159e8:	4629      	mov	r1, r5
240159ea:	2210      	movs	r2, #16
240159ec:	4418      	add	r0, r3
240159ee:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
240159f2:	4620      	mov	r0, r4
240159f4:	f7f2 fec8 	bl	24008788 <_lv_obj_get_style_int>
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
240159f8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240159fc:	4629      	mov	r1, r5
240159fe:	2211      	movs	r2, #17
24015a00:	1a18      	subs	r0, r3, r0
24015a02:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
24015a06:	4620      	mov	r0, r4
24015a08:	f7f2 febe 	bl	24008788 <_lv_obj_get_style_int>
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
24015a0c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
24015a10:	aa19      	add	r2, sp, #100	; 0x64
24015a12:	4641      	mov	r1, r8
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
24015a14:	4418      	add	r0, r3
24015a16:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
24015a1a:	f104 0010 	add.w	r0, r4, #16
24015a1e:	f7f8 f845 	bl	2400daac <lv_draw_rect>
24015a22:	e58d      	b.n	24015540 <lv_img_design+0x84>
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
24015a24:	2503      	movs	r5, #3
24015a26:	e58b      	b.n	24015540 <lv_img_design+0x84>

24015a28 <lv_img_get_auto_size>:
{
24015a28:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
24015a2a:	f7f3 fb96 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
24015a2e:	7d00      	ldrb	r0, [r0, #20]
}
24015a30:	f3c0 0080 	ubfx	r0, r0, #2, #1
24015a34:	bd08      	pop	{r3, pc}

24015a36 <lv_img_set_src>:
{
24015a36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24015a3a:	4606      	mov	r6, r0
24015a3c:	b089      	sub	sp, #36	; 0x24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
24015a3e:	4608      	mov	r0, r1
{
24015a40:	460f      	mov	r7, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
24015a42:	f7f6 f9df 	bl	2400be04 <lv_img_src_get_type>
24015a46:	4605      	mov	r5, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
24015a48:	4630      	mov	r0, r6
24015a4a:	f7f3 fb86 	bl	2400915a <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
24015a4e:	2d03      	cmp	r5, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
24015a50:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
24015a52:	d111      	bne.n	24015a78 <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
24015a54:	7d03      	ldrb	r3, [r0, #20]
24015a56:	f003 0303 	and.w	r3, r3, #3
24015a5a:	3b01      	subs	r3, #1
24015a5c:	2b01      	cmp	r3, #1
24015a5e:	d802      	bhi.n	24015a66 <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
24015a60:	6800      	ldr	r0, [r0, #0]
24015a62:	f7f9 ffbb 	bl	2400f9dc <lv_mem_free>
        ext->src      = NULL;
24015a66:	2300      	movs	r3, #0
24015a68:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
24015a6a:	7d23      	ldrb	r3, [r4, #20]
24015a6c:	f043 0303 	orr.w	r3, r3, #3
24015a70:	7523      	strb	r3, [r4, #20]
}
24015a72:	b009      	add	sp, #36	; 0x24
24015a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_img_decoder_get_info(src_img, &header);
24015a78:	a906      	add	r1, sp, #24
24015a7a:	4638      	mov	r0, r7
24015a7c:	f7f8 ff5c 	bl	2400e938 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
24015a80:	2d00      	cmp	r5, #0
24015a82:	d13d      	bne.n	24015b00 <lv_img_set_src+0xca>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
24015a84:	7d23      	ldrb	r3, [r4, #20]
24015a86:	f003 0303 	and.w	r3, r3, #3
24015a8a:	3b01      	subs	r3, #1
24015a8c:	2b01      	cmp	r3, #1
24015a8e:	d802      	bhi.n	24015a96 <lv_img_set_src+0x60>
            lv_mem_free(ext->src);
24015a90:	6820      	ldr	r0, [r4, #0]
24015a92:	f7f9 ffa3 	bl	2400f9dc <lv_mem_free>
        ext->src = src_img;
24015a96:	6027      	str	r7, [r4, #0]
    ext->w        = header.w;
24015a98:	9a06      	ldr	r2, [sp, #24]
    ext->src_type = src_type;
24015a9a:	f005 0503 	and.w	r5, r5, #3
    if(lv_img_get_auto_size(img) != false) {
24015a9e:	4630      	mov	r0, r6
    ext->w        = header.w;
24015aa0:	f3c2 238a 	ubfx	r3, r2, #10, #11
    ext->pivot.x = header.w / 2;
24015aa4:	f3c2 22c9 	ubfx	r2, r2, #11, #10
    ext->w        = header.w;
24015aa8:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
24015aaa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ext->pivot.x = header.w / 2;
24015aae:	81e2      	strh	r2, [r4, #14]
    ext->h        = header.h;
24015ab0:	f3c3 114a 	ubfx	r1, r3, #5, #11
    ext->pivot.y = header.h / 2;
24015ab4:	f3c3 1389 	ubfx	r3, r3, #6, #10
    ext->h        = header.h;
24015ab8:	8161      	strh	r1, [r4, #10]
    ext->cf       = header.cf;
24015aba:	f89d 1018 	ldrb.w	r1, [sp, #24]
    ext->pivot.y = header.h / 2;
24015abe:	8223      	strh	r3, [r4, #16]
    ext->cf       = header.cf;
24015ac0:	f3c1 0104 	ubfx	r1, r1, #0, #5
    ext->src_type = src_type;
24015ac4:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
24015ac8:	7d21      	ldrb	r1, [r4, #20]
24015aca:	f001 0104 	and.w	r1, r1, #4
24015ace:	430d      	orrs	r5, r1
24015ad0:	7525      	strb	r5, [r4, #20]
    if(lv_img_get_auto_size(img) != false) {
24015ad2:	f7ff ffa9 	bl	24015a28 <lv_img_get_auto_size>
24015ad6:	b130      	cbz	r0, 24015ae6 <lv_img_set_src+0xb0>
        lv_obj_set_size(img, ext->w, ext->h);
24015ad8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
24015adc:	4630      	mov	r0, r6
24015ade:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
24015ae2:	f7f2 fb45 	bl	24008170 <lv_obj_set_size>
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
24015ae6:	89a3      	ldrh	r3, [r4, #12]
24015ae8:	b91b      	cbnz	r3, 24015af2 <lv_img_set_src+0xbc>
24015aea:	8a63      	ldrh	r3, [r4, #18]
24015aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015af0:	d002      	beq.n	24015af8 <lv_img_set_src+0xc2>
24015af2:	4630      	mov	r0, r6
24015af4:	f7f2 f992 	bl	24007e1c <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(img);
24015af8:	4630      	mov	r0, r6
24015afa:	f7f2 fa73 	bl	24007fe4 <lv_obj_invalidate>
24015afe:	e7b8      	b.n	24015a72 <lv_img_set_src+0x3c>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
24015b00:	1e6b      	subs	r3, r5, #1
24015b02:	b2db      	uxtb	r3, r3
24015b04:	2b01      	cmp	r3, #1
24015b06:	d81f      	bhi.n	24015b48 <lv_img_set_src+0x112>
        if(ext->src != src_img) {
24015b08:	f8d4 8000 	ldr.w	r8, [r4]
24015b0c:	45b8      	cmp	r8, r7
24015b0e:	d01b      	beq.n	24015b48 <lv_img_set_src+0x112>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
24015b10:	7d23      	ldrb	r3, [r4, #20]
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
24015b12:	4638      	mov	r0, r7
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
24015b14:	f003 0303 	and.w	r3, r3, #3
24015b18:	3b01      	subs	r3, #1
            const void * old_src = NULL;
24015b1a:	2b01      	cmp	r3, #1
24015b1c:	bf88      	it	hi
24015b1e:	f04f 0800 	movhi.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
24015b22:	f004 fd45 	bl	2401a5b0 <__strlen_veneer>
24015b26:	3001      	adds	r0, #1
24015b28:	f7f9 ff28 	bl	2400f97c <lv_mem_alloc>
            if(new_str == NULL) return;
24015b2c:	4681      	mov	r9, r0
24015b2e:	2800      	cmp	r0, #0
24015b30:	d09f      	beq.n	24015a72 <lv_img_set_src+0x3c>
            strcpy(new_str, src_img);
24015b32:	4639      	mov	r1, r7
24015b34:	f004 fd1a 	bl	2401a56c <strcpy>
            ext->src = new_str;
24015b38:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
24015b3c:	f1b8 0f00 	cmp.w	r8, #0
24015b40:	d002      	beq.n	24015b48 <lv_img_set_src+0x112>
24015b42:	4640      	mov	r0, r8
24015b44:	f7f9 ff4a 	bl	2400f9dc <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
24015b48:	2d02      	cmp	r5, #2
24015b4a:	d1a5      	bne.n	24015a98 <lv_img_set_src+0x62>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24015b4c:	f248 028e 	movw	r2, #32910	; 0x808e
24015b50:	2100      	movs	r1, #0
24015b52:	4630      	mov	r0, r6
24015b54:	f7f3 f8dc 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24015b58:	f248 0280 	movw	r2, #32896	; 0x8080
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24015b5c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24015b5e:	2100      	movs	r1, #0
24015b60:	4630      	mov	r0, r6
24015b62:	f7f2 fe11 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24015b66:	f248 0281 	movw	r2, #32897	; 0x8081
24015b6a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24015b6c:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24015b6e:	4630      	mov	r0, r6
24015b70:	f7f2 fe0a 	bl	24008788 <_lv_obj_get_style_int>
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
24015b74:	f647 4218 	movw	r2, #31768	; 0x7c18
24015b78:	2300      	movs	r3, #0
24015b7a:	9000      	str	r0, [sp, #0]
24015b7c:	4639      	mov	r1, r7
24015b7e:	a807      	add	r0, sp, #28
24015b80:	e9cd 2301 	strd	r2, r3, [sp, #4]
24015b84:	9b05      	ldr	r3, [sp, #20]
24015b86:	4642      	mov	r2, r8
24015b88:	f7fb f88e 	bl	24010ca8 <_lv_txt_get_size>
        header.w = size.x;
24015b8c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
24015b90:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
24015b94:	f3c2 020a 	ubfx	r2, r2, #0, #11
24015b98:	055b      	lsls	r3, r3, #21
24015b9a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
24015b9e:	9a06      	ldr	r2, [sp, #24]
24015ba0:	f3c2 0209 	ubfx	r2, r2, #0, #10
24015ba4:	4313      	orrs	r3, r2
24015ba6:	9306      	str	r3, [sp, #24]
24015ba8:	e776      	b.n	24015a98 <lv_img_set_src+0x62>
	...

24015bac <lv_img_create>:
{
24015bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24015bb0:	4607      	mov	r7, r0
24015bb2:	460e      	mov	r6, r1
    lv_obj_t * img = lv_obj_create(par, copy);
24015bb4:	f7f2 fbae 	bl	24008314 <lv_obj_create>
    if(img == NULL) return NULL;
24015bb8:	4605      	mov	r5, r0
24015bba:	b188      	cbz	r0, 24015be0 <lv_img_create+0x34>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
24015bbc:	4c3c      	ldr	r4, [pc, #240]	; (24015cb0 <lv_img_create+0x104>)
24015bbe:	6823      	ldr	r3, [r4, #0]
24015bc0:	b913      	cbnz	r3, 24015bc8 <lv_img_create+0x1c>
24015bc2:	f7f3 fac6 	bl	24009152 <lv_obj_get_signal_cb>
24015bc6:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
24015bc8:	2118      	movs	r1, #24
24015bca:	4628      	mov	r0, r5
24015bcc:	f7f2 f91e 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24015bd0:	f04f 0800 	mov.w	r8, #0
24015bd4:	4604      	mov	r4, r0
24015bd6:	b930      	cbnz	r0, 24015be6 <lv_img_create+0x3a>
        lv_obj_del(img);
24015bd8:	4628      	mov	r0, r5
        return NULL;
24015bda:	4625      	mov	r5, r4
        lv_obj_del(img);
24015bdc:	f7f2 fb1c 	bl	24008218 <lv_obj_del>
}
24015be0:	4628      	mov	r0, r5
24015be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
24015be6:	7d03      	ldrb	r3, [r0, #20]
    ext->src       = NULL;
24015be8:	f8c0 8000 	str.w	r8, [r0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
24015bec:	f003 0304 	and.w	r3, r3, #4
24015bf0:	f043 0303 	orr.w	r3, r3, #3
24015bf4:	7503      	strb	r3, [r0, #20]
    ext->w         = lv_obj_get_width(img);
24015bf6:	4628      	mov	r0, r5
24015bf8:	f7f2 fd09 	bl	2400860e <lv_obj_get_width>
24015bfc:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
24015bfe:	4628      	mov	r0, r5
24015c00:	f7f2 fd0b 	bl	2400861a <lv_obj_get_height>
    ext->pivot.y = 0;
24015c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_obj_set_signal_cb(img, lv_img_signal);
24015c08:	492a      	ldr	r1, [pc, #168]	; (24015cb4 <lv_img_create+0x108>)
    ext->pivot.y = 0;
24015c0a:	6123      	str	r3, [r4, #16]
    ext->auto_size = 1;
24015c0c:	8aa3      	ldrh	r3, [r4, #20]
    ext->h         = lv_obj_get_height(img);
24015c0e:	8160      	strh	r0, [r4, #10]
    lv_obj_set_signal_cb(img, lv_img_signal);
24015c10:	4628      	mov	r0, r5
    ext->auto_size = 1;
24015c12:	f423 7382 	bic.w	r3, r3, #260	; 0x104
    ext->offset.x  = 0;
24015c16:	f8c4 8004 	str.w	r8, [r4, #4]
    ext->angle = 0;
24015c1a:	f8c4 800c 	str.w	r8, [r4, #12]
    ext->auto_size = 1;
24015c1e:	f043 0304 	orr.w	r3, r3, #4
24015c22:	82a3      	strh	r3, [r4, #20]
    lv_obj_set_signal_cb(img, lv_img_signal);
24015c24:	f7f2 f8e8 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(img, lv_img_design);
24015c28:	4923      	ldr	r1, [pc, #140]	; (24015cb8 <lv_img_create+0x10c>)
24015c2a:	4628      	mov	r0, r5
24015c2c:	f7f2 f8ec 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24015c30:	b9a6      	cbnz	r6, 24015c5c <lv_img_create+0xb0>
        lv_theme_apply(img, LV_THEME_IMAGE);
24015c32:	2108      	movs	r1, #8
24015c34:	4628      	mov	r0, r5
24015c36:	f7fb f945 	bl	24010ec4 <lv_theme_apply>
        lv_obj_set_click(img, false);
24015c3a:	4631      	mov	r1, r6
24015c3c:	4628      	mov	r0, r5
24015c3e:	f7f2 f83c 	bl	24007cba <lv_obj_set_click>
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
24015c42:	2101      	movs	r1, #1
24015c44:	4628      	mov	r0, r5
24015c46:	f7f2 f831 	bl	24007cac <lv_obj_set_adv_hittest>
        if(par != NULL) {
24015c4a:	7d23      	ldrb	r3, [r4, #20]
24015c4c:	b11f      	cbz	r7, 24015c56 <lv_img_create+0xaa>
            ext->auto_size = 1;
24015c4e:	f043 0304 	orr.w	r3, r3, #4
            ext->auto_size = 0;
24015c52:	7523      	strb	r3, [r4, #20]
24015c54:	e7c4      	b.n	24015be0 <lv_img_create+0x34>
24015c56:	f367 0382 	bfi	r3, r7, #2, #1
24015c5a:	e7fa      	b.n	24015c52 <lv_img_create+0xa6>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24015c5c:	4630      	mov	r0, r6
24015c5e:	f7f3 fa7c 	bl	2400915a <lv_obj_get_ext_attr>
        ext->auto_size     = copy_ext->auto_size;
24015c62:	7d03      	ldrb	r3, [r0, #20]
24015c64:	7d22      	ldrb	r2, [r4, #20]
24015c66:	f3c3 0380 	ubfx	r3, r3, #2, #1
24015c6a:	f363 0282 	bfi	r2, r3, #2, #1
24015c6e:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
24015c70:	8a43      	ldrh	r3, [r0, #18]
        ext->antialias     = copy_ext->antialias;
24015c72:	7d42      	ldrb	r2, [r0, #21]
        ext->zoom          = copy_ext->zoom;
24015c74:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
24015c76:	8983      	ldrh	r3, [r0, #12]
24015c78:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
24015c7a:	7d63      	ldrb	r3, [r4, #21]
24015c7c:	f362 0300 	bfi	r3, r2, #0, #1
24015c80:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
24015c82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        lv_img_set_src(img, copy_ext->src);
24015c86:	6801      	ldr	r1, [r0, #0]
        ext->offset.x     = copy_ext->offset.x;
24015c88:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
24015c8a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
24015c8e:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
24015c90:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
24015c94:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
24015c96:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        lv_img_set_src(img, copy_ext->src);
24015c9a:	4628      	mov	r0, r5
        ext->pivot.y     = copy_ext->pivot.y;
24015c9c:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
24015c9e:	f7ff feca 	bl	24015a36 <lv_img_set_src>
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24015ca2:	22ff      	movs	r2, #255	; 0xff
24015ca4:	4628      	mov	r0, r5
24015ca6:	4611      	mov	r1, r2
24015ca8:	f7f3 f90a 	bl	24008ec0 <lv_obj_refresh_style>
24015cac:	e798      	b.n	24015be0 <lv_img_create+0x34>
24015cae:	bf00      	nop
24015cb0:	24035d08 	.word	0x24035d08
24015cb4:	24015cbd 	.word	0x24015cbd
24015cb8:	240154bd 	.word	0x240154bd

24015cbc <lv_img_signal>:
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
24015cbc:	2908      	cmp	r1, #8
{
24015cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24015cc2:	4604      	mov	r4, r0
24015cc4:	b087      	sub	sp, #28
24015cc6:	4688      	mov	r8, r1
24015cc8:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24015cca:	d110      	bne.n	24015cee <lv_img_signal+0x32>


static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
24015ccc:	7813      	ldrb	r3, [r2, #0]
24015cce:	b13b      	cbz	r3, 24015ce0 <lv_img_signal+0x24>
        info->result = lv_img_get_style(img, info->part);
24015cd0:	2300      	movs	r3, #0
24015cd2:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(img, sign, param);
24015cd4:	4b9c      	ldr	r3, [pc, #624]	; (24015f48 <lv_img_signal+0x28c>)
24015cd6:	681b      	ldr	r3, [r3, #0]
}
24015cd8:	b007      	add	sp, #28
24015cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else return ancestor_signal(img, sign, param);
24015cde:	4718      	bx	r3
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
24015ce0:	3428      	adds	r4, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
24015ce2:	2601      	movs	r6, #1
        info->result = lv_img_get_style(img, info->part);
24015ce4:	6054      	str	r4, [r2, #4]
}
24015ce6:	4630      	mov	r0, r6
24015ce8:	b007      	add	sp, #28
24015cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res = ancestor_signal(img, sign, param);
24015cee:	4b96      	ldr	r3, [pc, #600]	; (24015f48 <lv_img_signal+0x28c>)
24015cf0:	681b      	ldr	r3, [r3, #0]
24015cf2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24015cf4:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
24015cf6:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
24015cf8:	d1f5      	bne.n	24015ce6 <lv_img_signal+0x2a>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24015cfa:	f1b8 0f07 	cmp.w	r8, #7
24015cfe:	d106      	bne.n	24015d0e <lv_img_signal+0x52>
24015d00:	4992      	ldr	r1, [pc, #584]	; (24015f4c <lv_img_signal+0x290>)
24015d02:	4638      	mov	r0, r7
}
24015d04:	b007      	add	sp, #28
24015d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24015d0a:	f7f3 ba5a 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
24015d0e:	4620      	mov	r0, r4
24015d10:	f7f3 fa23 	bl	2400915a <lv_obj_get_ext_attr>
24015d14:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
24015d16:	f1b8 0f00 	cmp.w	r8, #0
24015d1a:	d10f      	bne.n	24015d3c <lv_img_signal+0x80>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
24015d1c:	7d03      	ldrb	r3, [r0, #20]
24015d1e:	f003 0303 	and.w	r3, r3, #3
24015d22:	3b01      	subs	r3, #1
24015d24:	2b01      	cmp	r3, #1
24015d26:	d8de      	bhi.n	24015ce6 <lv_img_signal+0x2a>
            lv_mem_free(ext->src);
24015d28:	6800      	ldr	r0, [r0, #0]
24015d2a:	f7f9 fe57 	bl	2400f9dc <lv_mem_free>
            ext->src_type = LV_IMG_SRC_UNKNOWN;
24015d2e:	7d2b      	ldrb	r3, [r5, #20]
            ext->src      = NULL;
24015d30:	f8c5 8000 	str.w	r8, [r5]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
24015d34:	f043 0303 	orr.w	r3, r3, #3
24015d38:	752b      	strb	r3, [r5, #20]
24015d3a:	e7d4      	b.n	24015ce6 <lv_img_signal+0x2a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
24015d3c:	f1b8 0f04 	cmp.w	r8, #4
24015d40:	d109      	bne.n	24015d56 <lv_img_signal+0x9a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
24015d42:	7d03      	ldrb	r3, [r0, #20]
24015d44:	f003 0303 	and.w	r3, r3, #3
24015d48:	2b02      	cmp	r3, #2
24015d4a:	d1cc      	bne.n	24015ce6 <lv_img_signal+0x2a>
            lv_img_set_src(img, ext->src);
24015d4c:	6801      	ldr	r1, [r0, #0]
24015d4e:	4620      	mov	r0, r4
24015d50:	f7ff fe71 	bl	24015a36 <lv_img_set_src>
24015d54:	e7c7      	b.n	24015ce6 <lv_img_signal+0x2a>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
24015d56:	f1b8 0f06 	cmp.w	r8, #6
24015d5a:	d178      	bne.n	24015e4e <lv_img_signal+0x192>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24015d5c:	2207      	movs	r2, #7
24015d5e:	2100      	movs	r1, #0
24015d60:	4620      	mov	r0, r4
24015d62:	f7f2 fd11 	bl	24008788 <_lv_obj_get_style_int>
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
24015d66:	f8b5 9012 	ldrh.w	r9, [r5, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24015d6a:	4642      	mov	r2, r8
24015d6c:	2100      	movs	r1, #0
24015d6e:	fb00 f909 	mul.w	r9, r0, r9
24015d72:	4620      	mov	r0, r4
24015d74:	f7f2 fd08 	bl	24008788 <_lv_obj_get_style_int>
        transf_angle += ext->angle;
24015d78:	89ab      	ldrh	r3, [r5, #12]
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
24015d7a:	ea4f 2929 	mov.w	r9, r9, asr #8
        transf_angle += ext->angle;
24015d7e:	4418      	add	r0, r3
24015d80:	fa0f fa80 	sxth.w	sl, r0
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
24015d84:	f1ba 0f00 	cmp.w	sl, #0
24015d88:	d104      	bne.n	24015d94 <lv_img_signal+0xd8>
24015d8a:	fa0f f389 	sxth.w	r3, r9
24015d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015d92:	d033      	beq.n	24015dfc <lv_img_signal+0x140>
            lv_coord_t w = lv_obj_get_width(img);
24015d94:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
24015d96:	350e      	adds	r5, #14
            lv_coord_t w = lv_obj_get_width(img);
24015d98:	f7f2 fc39 	bl	2400860e <lv_obj_get_width>
24015d9c:	4680      	mov	r8, r0
            lv_coord_t h = lv_obj_get_height(img);
24015d9e:	4620      	mov	r0, r4
24015da0:	f7f2 fc3b 	bl	2400861a <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
24015da4:	4641      	mov	r1, r8
24015da6:	fa1f f389 	uxth.w	r3, r9
24015daa:	4602      	mov	r2, r0
            lv_coord_t h = lv_obj_get_height(img);
24015dac:	4607      	mov	r7, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
24015dae:	9501      	str	r5, [sp, #4]
24015db0:	9300      	str	r3, [sp, #0]
24015db2:	a804      	add	r0, sp, #16
24015db4:	4653      	mov	r3, sl
24015db6:	f7f8 fc63 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
24015dba:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
24015dbe:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
24015dc2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
24015dc6:	1acb      	subs	r3, r1, r3
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
24015dc8:	1a8a      	subs	r2, r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
24015dca:	428b      	cmp	r3, r1
24015dcc:	bfb8      	it	lt
24015dce:	460b      	movlt	r3, r1
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
24015dd0:	b21b      	sxth	r3, r3
24015dd2:	4293      	cmp	r3, r2
24015dd4:	bfb8      	it	lt
24015dd6:	4613      	movlt	r3, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
24015dd8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
24015ddc:	440a      	add	r2, r1
24015dde:	b21b      	sxth	r3, r3
24015de0:	eba2 0208 	sub.w	r2, r2, r8
24015de4:	4293      	cmp	r3, r2
24015de6:	bfb8      	it	lt
24015de8:	4613      	movlt	r3, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
24015dea:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
24015dee:	440a      	add	r2, r1
24015df0:	b21b      	sxth	r3, r3
24015df2:	1bd2      	subs	r2, r2, r7
24015df4:	4293      	cmp	r3, r2
24015df6:	bfb8      	it	lt
24015df8:	4613      	movlt	r3, r2
24015dfa:	8663      	strh	r3, [r4, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24015dfc:	2212      	movs	r2, #18
24015dfe:	2100      	movs	r1, #0
24015e00:	4620      	mov	r0, r4
24015e02:	f7f2 fcc1 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24015e06:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24015e08:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24015e0a:	2100      	movs	r1, #0
24015e0c:	4620      	mov	r0, r4
24015e0e:	f7f2 fcbb 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015e12:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24015e14:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015e16:	2100      	movs	r1, #0
24015e18:	4620      	mov	r0, r4
24015e1a:	f7f2 fcb5 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24015e1e:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24015e20:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24015e22:	2100      	movs	r1, #0
24015e24:	4620      	mov	r0, r4
24015e26:	f7f2 fcaf 	bl	24008788 <_lv_obj_get_style_int>
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
24015e2a:	42bd      	cmp	r5, r7
24015e2c:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
24015e30:	bfb8      	it	lt
24015e32:	463d      	movlt	r5, r7
24015e34:	b22d      	sxth	r5, r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
24015e36:	42ab      	cmp	r3, r5
24015e38:	bfb8      	it	lt
24015e3a:	462b      	movlt	r3, r5
24015e3c:	4543      	cmp	r3, r8
24015e3e:	bfb8      	it	lt
24015e40:	4643      	movlt	r3, r8
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
24015e42:	b21b      	sxth	r3, r3
24015e44:	4298      	cmp	r0, r3
24015e46:	bfb8      	it	lt
24015e48:	4618      	movlt	r0, r3
24015e4a:	8660      	strh	r0, [r4, #50]	; 0x32
24015e4c:	e74b      	b.n	24015ce6 <lv_img_signal+0x2a>
    else if(sign == LV_SIGNAL_HIT_TEST) {
24015e4e:	f1b8 0f0a 	cmp.w	r8, #10
24015e52:	f47f af48 	bne.w	24015ce6 <lv_img_signal+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24015e56:	2207      	movs	r2, #7
24015e58:	2100      	movs	r1, #0
24015e5a:	4620      	mov	r0, r4
24015e5c:	f7f2 fc94 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24015e60:	2206      	movs	r2, #6
24015e62:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
24015e64:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
24015e66:	4620      	mov	r0, r4
        zoom = (zoom * ext->zoom) >> 8;
24015e68:	f8b5 b012 	ldrh.w	fp, [r5, #18]
24015e6c:	f7f2 fc8c 	bl	24008788 <_lv_obj_get_style_int>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
24015e70:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
24015e74:	4682      	mov	sl, r0
24015e76:	4620      	mov	r0, r4
24015e78:	9303      	str	r3, [sp, #12]
        angle += ext->angle;
24015e7a:	f8b5 900c 	ldrh.w	r9, [r5, #12]
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
24015e7e:	f7f2 fbc6 	bl	2400860e <lv_obj_get_width>
24015e82:	9b03      	ldr	r3, [sp, #12]
24015e84:	4283      	cmp	r3, r0
24015e86:	d159      	bne.n	24015f3c <lv_img_signal+0x280>
24015e88:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
24015e8c:	4620      	mov	r0, r4
24015e8e:	9303      	str	r3, [sp, #12]
24015e90:	f7f2 fbc3 	bl	2400861a <lv_obj_get_height>
24015e94:	9b03      	ldr	r3, [sp, #12]
24015e96:	4283      	cmp	r3, r0
24015e98:	d150      	bne.n	24015f3c <lv_img_signal+0x280>
        zoom = (zoom * ext->zoom) >> 8;
24015e9a:	fb0b f208 	mul.w	r2, fp, r8
        angle += ext->angle;
24015e9e:	eb09 080a 	add.w	r8, r9, sl
        zoom = (zoom * ext->zoom) >> 8;
24015ea2:	ea4f 2b22 	mov.w	fp, r2, asr #8
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
24015ea6:	f342 220f 	sbfx	r2, r2, #8, #16
        angle += ext->angle;
24015eaa:	fa0f f888 	sxth.w	r8, r8
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
24015eae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24015eb2:	d114      	bne.n	24015ede <lv_img_signal+0x222>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
24015eb4:	f1b8 0f00 	cmp.w	r8, #0
24015eb8:	d111      	bne.n	24015ede <lv_img_signal+0x222>
24015eba:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
24015ebe:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
24015ec2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24015ec6:	ebb2 0f63 	cmp.w	r2, r3, asr #1
24015eca:	d108      	bne.n	24015ede <lv_img_signal+0x222>
24015ecc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
24015ed0:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
24015ed4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24015ed8:	ebb2 0f63 	cmp.w	r2, r3, asr #1
24015edc:	d02e      	beq.n	24015f3c <lv_img_signal+0x280>
            lv_coord_t w = lv_obj_get_width(img);
24015ede:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
24015ee0:	350e      	adds	r5, #14
            lv_coord_t w = lv_obj_get_width(img);
24015ee2:	f7f2 fb94 	bl	2400860e <lv_obj_get_width>
24015ee6:	9003      	str	r0, [sp, #12]
            lv_coord_t h = lv_obj_get_height(img);
24015ee8:	4620      	mov	r0, r4
24015eea:	f7f2 fb96 	bl	2400861a <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
24015eee:	9903      	ldr	r1, [sp, #12]
24015ef0:	fa1f f38b 	uxth.w	r3, fp
            lv_coord_t h = lv_obj_get_height(img);
24015ef4:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
24015ef6:	9501      	str	r5, [sp, #4]
24015ef8:	a804      	add	r0, sp, #16
24015efa:	9300      	str	r3, [sp, #0]
24015efc:	4643      	mov	r3, r8
24015efe:	f7f8 fbbf 	bl	2400e680 <_lv_img_buf_get_transformed_area>
            coords.x1 += img->coords.x1;
24015f02:	8a22      	ldrh	r2, [r4, #16]
24015f04:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
24015f08:	a804      	add	r0, sp, #16
            coords.y1 += img->coords.y1;
24015f0a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
            coords.x1 += img->coords.x1;
24015f0e:	4413      	add	r3, r2
24015f10:	f8ad 3010 	strh.w	r3, [sp, #16]
            coords.y1 += img->coords.y1;
24015f14:	8a63      	ldrh	r3, [r4, #18]
24015f16:	4419      	add	r1, r3
24015f18:	f8ad 1012 	strh.w	r1, [sp, #18]
            coords.x2 += img->coords.x1;
24015f1c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
24015f20:	440a      	add	r2, r1
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
24015f22:	6839      	ldr	r1, [r7, #0]
            coords.x2 += img->coords.x1;
24015f24:	f8ad 2014 	strh.w	r2, [sp, #20]
            coords.y2 += img->coords.y1;
24015f28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
24015f2c:	4413      	add	r3, r2
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
24015f2e:	2200      	movs	r2, #0
            coords.y2 += img->coords.y1;
24015f30:	f8ad 3016 	strh.w	r3, [sp, #22]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
24015f34:	f7f9 f959 	bl	2400f1ea <_lv_area_is_point_on>
            info->result = lv_obj_is_point_on_coords(img, info->point);
24015f38:	7138      	strb	r0, [r7, #4]
24015f3a:	e6d4      	b.n	24015ce6 <lv_img_signal+0x2a>
24015f3c:	6839      	ldr	r1, [r7, #0]
24015f3e:	4620      	mov	r0, r4
24015f40:	f7f3 f90d 	bl	2400915e <lv_obj_is_point_on_coords>
24015f44:	e7f8      	b.n	24015f38 <lv_img_signal+0x27c>
24015f46:	bf00      	nop
24015f48:	24035d08 	.word	0x24035d08
24015f4c:	900ff2d2 	.word	0x900ff2d2

24015f50 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
24015f50:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015f52:	f7f3 f902 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
24015f56:	7c43      	ldrb	r3, [r0, #17]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015f58:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
24015f5a:	07db      	lsls	r3, r3, #31
24015f5c:	d503      	bpl.n	24015f66 <lv_label_dot_tmp_free+0x16>
24015f5e:	6840      	ldr	r0, [r0, #4]
24015f60:	b108      	cbz	r0, 24015f66 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
24015f62:	f7f9 fd3b 	bl	2400f9dc <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
24015f66:	7c63      	ldrb	r3, [r4, #17]
24015f68:	f36f 0300 	bfc	r3, #0, #1
24015f6c:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
24015f6e:	2300      	movs	r3, #0
24015f70:	6063      	str	r3, [r4, #4]
}
24015f72:	bd10      	pop	{r4, pc}

24015f74 <lv_label_revert_dots>:
{
24015f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015f76:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015f78:	f7f3 f8ef 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
24015f7c:	7c03      	ldrb	r3, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015f7e:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
24015f80:	f003 0307 	and.w	r3, r3, #7
24015f84:	2b02      	cmp	r3, #2
24015f86:	d12a      	bne.n	24015fde <lv_label_revert_dots+0x6a>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
24015f88:	6881      	ldr	r1, [r0, #8]
24015f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
24015f8e:	4299      	cmp	r1, r3
24015f90:	d025      	beq.n	24015fde <lv_label_revert_dots+0x6a>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
24015f92:	4b14      	ldr	r3, [pc, #80]	; (24015fe4 <lv_label_revert_dots+0x70>)
24015f94:	3903      	subs	r1, #3
24015f96:	6800      	ldr	r0, [r0, #0]
24015f98:	681b      	ldr	r3, [r3, #0]
24015f9a:	4798      	blx	r3
24015f9c:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015f9e:	4628      	mov	r0, r5
24015fa0:	f7f3 f8db 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
24015fa4:	7c42      	ldrb	r2, [r0, #17]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015fa6:	4603      	mov	r3, r0
    if(ext->dot_tmp_alloc) {
24015fa8:	07d2      	lsls	r2, r2, #31
    while(ext->text[byte_i + i] != '\0') {
24015faa:	f04f 0200 	mov.w	r2, #0
        return ext->dot.tmp_ptr;
24015fae:	bf4c      	ite	mi
24015fb0:	6843      	ldrmi	r3, [r0, #4]
        return ext->dot.tmp;
24015fb2:	3304      	addpl	r3, #4
    while(ext->text[byte_i + i] != '\0') {
24015fb4:	fa57 f182 	uxtab	r1, r7, r2
24015fb8:	6826      	ldr	r6, [r4, #0]
24015fba:	b2d0      	uxtb	r0, r2
24015fbc:	3201      	adds	r2, #1
24015fbe:	f816 e001 	ldrb.w	lr, [r6, r1]
24015fc2:	eb06 0c01 	add.w	ip, r6, r1
        ext->text[byte_i + i] = dot_tmp[i];
24015fc6:	5c18      	ldrb	r0, [r3, r0]
    while(ext->text[byte_i + i] != '\0') {
24015fc8:	f1be 0f00 	cmp.w	lr, #0
24015fcc:	d108      	bne.n	24015fe0 <lv_label_revert_dots+0x6c>
    ext->text[byte_i + i] = dot_tmp[i];
24015fce:	f88c 0000 	strb.w	r0, [ip]
    lv_label_dot_tmp_free(label);
24015fd2:	4628      	mov	r0, r5
24015fd4:	f7ff ffbc 	bl	24015f50 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
24015fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
24015fdc:	60a3      	str	r3, [r4, #8]
}
24015fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
24015fe0:	5470      	strb	r0, [r6, r1]
        i++;
24015fe2:	e7e7      	b.n	24015fb4 <lv_label_revert_dots+0x40>
24015fe4:	2401a6dc 	.word	0x2401a6dc

24015fe8 <lv_label_set_dot_tmp>:
{
24015fe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
24015fea:	4606      	mov	r6, r0
24015fec:	4615      	mov	r5, r2
24015fee:	9101      	str	r1, [sp, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24015ff0:	f7f3 f8b3 	bl	2400915a <lv_obj_get_ext_attr>
24015ff4:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
24015ff6:	4630      	mov	r0, r6
24015ff8:	f7ff ffaa 	bl	24015f50 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
24015ffc:	2d04      	cmp	r5, #4
24015ffe:	9901      	ldr	r1, [sp, #4]
24016000:	d912      	bls.n	24016028 <lv_label_set_dot_tmp+0x40>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
24016002:	1c68      	adds	r0, r5, #1
24016004:	f7f9 fcba 	bl	2400f97c <lv_mem_alloc>
24016008:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
2401600a:	b158      	cbz	r0, 24016024 <lv_label_set_dot_tmp+0x3c>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
2401600c:	462a      	mov	r2, r5
2401600e:	9901      	ldr	r1, [sp, #4]
24016010:	f7f9 fd4c 	bl	2400faac <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
24016014:	6863      	ldr	r3, [r4, #4]
24016016:	2200      	movs	r2, #0
24016018:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
2401601a:	7c63      	ldrb	r3, [r4, #17]
2401601c:	f043 0301 	orr.w	r3, r3, #1
24016020:	7463      	strb	r3, [r4, #17]
    return true;
24016022:	2001      	movs	r0, #1
}
24016024:	b002      	add	sp, #8
24016026:	bd70      	pop	{r4, r5, r6, pc}
        ext->dot_tmp_alloc = false;
24016028:	7c63      	ldrb	r3, [r4, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
2401602a:	462a      	mov	r2, r5
2401602c:	1d20      	adds	r0, r4, #4
        ext->dot_tmp_alloc = false;
2401602e:	f36f 0300 	bfc	r3, #0, #1
24016032:	7463      	strb	r3, [r4, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
24016034:	f7f9 fd3a 	bl	2400faac <_lv_memcpy>
24016038:	e7f3      	b.n	24016022 <lv_label_set_dot_tmp+0x3a>

2401603a <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
2401603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401603e:	4605      	mov	r5, r0
24016040:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
24016042:	f7f2 f93c 	bl	240082be <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24016046:	2212      	movs	r2, #18
24016048:	2100      	movs	r1, #0
2401604a:	4628      	mov	r0, r5
2401604c:	f7f2 fb9c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24016050:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24016052:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24016054:	2100      	movs	r1, #0
24016056:	4628      	mov	r0, r5
24016058:	f7f2 fb96 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401605c:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2401605e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24016060:	2100      	movs	r1, #0
24016062:	4628      	mov	r0, r5
24016064:	f7f2 fb90 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24016068:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401606a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401606c:	2100      	movs	r1, #0
2401606e:	4628      	mov	r0, r5
24016070:	f7f2 fb8a 	bl	24008788 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
24016074:	8823      	ldrh	r3, [r4, #0]
24016076:	441f      	add	r7, r3
    area->x2 -= right;
24016078:	88a3      	ldrh	r3, [r4, #4]
2401607a:	eba3 0308 	sub.w	r3, r3, r8
    area->x1 += left;
2401607e:	8027      	strh	r7, [r4, #0]
    area->x2 -= right;
24016080:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
24016082:	8863      	ldrh	r3, [r4, #2]
24016084:	441e      	add	r6, r3
    area->y2 -= bottom;
24016086:	88e3      	ldrh	r3, [r4, #6]
24016088:	1a18      	subs	r0, r3, r0
    area->y1 += top;
2401608a:	8066      	strh	r6, [r4, #2]
    area->y2 -= bottom;
2401608c:	80e0      	strh	r0, [r4, #6]
}
2401608e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

24016092 <lv_label_set_align>:
{
24016092:	b538      	push	{r3, r4, r5, lr}
24016094:	460c      	mov	r4, r1
24016096:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016098:	f7f3 f85f 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->align == align) return;
2401609c:	7c03      	ldrb	r3, [r0, #16]
2401609e:	f3c3 1201 	ubfx	r2, r3, #4, #2
240160a2:	42a2      	cmp	r2, r4
240160a4:	d007      	beq.n	240160b6 <lv_label_set_align+0x24>
    ext->align = align;
240160a6:	f364 1305 	bfi	r3, r4, #4, #2
240160aa:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
240160ac:	4628      	mov	r0, r5
}
240160ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
240160b2:	f7f1 bf97 	b.w	24007fe4 <lv_obj_invalidate>
}
240160b6:	bd38      	pop	{r3, r4, r5, pc}

240160b8 <lv_label_get_text>:
{
240160b8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240160ba:	f7f3 f84e 	bl	2400915a <lv_obj_get_ext_attr>
}
240160be:	6800      	ldr	r0, [r0, #0]
240160c0:	bd08      	pop	{r3, pc}

240160c2 <lv_label_get_long_mode>:
{
240160c2:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240160c4:	f7f3 f849 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->long_mode;
240160c8:	7c00      	ldrb	r0, [r0, #16]
}
240160ca:	f000 0007 	and.w	r0, r0, #7
240160ce:	bd08      	pop	{r3, pc}

240160d0 <lv_label_get_align>:
{
240160d0:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240160d2:	f7f3 f842 	bl	2400915a <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
240160d6:	7c00      	ldrb	r0, [r0, #16]
240160d8:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
240160dc:	2803      	cmp	r0, #3
}
240160de:	bf08      	it	eq
240160e0:	2000      	moveq	r0, #0
240160e2:	bd08      	pop	{r3, pc}

240160e4 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
240160e4:	2a02      	cmp	r2, #2
{
240160e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240160ea:	4606      	mov	r6, r0
240160ec:	b0aa      	sub	sp, #168	; 0xa8
240160ee:	4688      	mov	r8, r1
240160f0:	4617      	mov	r7, r2
    if(mode == LV_DESIGN_COVER_CHK)
240160f2:	f000 80f1 	beq.w	240162d8 <lv_label_design+0x1f4>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
240160f6:	2a00      	cmp	r2, #0
240160f8:	f040 80f7 	bne.w	240162ea <lv_label_design+0x206>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240160fc:	f7f3 f82d 	bl	2400915a <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
24016100:	2204      	movs	r2, #4
24016102:	4639      	mov	r1, r7
24016104:	4604      	mov	r4, r0
24016106:	4630      	mov	r0, r6
24016108:	f7f2 fb3e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
2401610c:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
2401610e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
24016110:	4639      	mov	r1, r7
24016112:	4630      	mov	r0, r6
24016114:	f7f2 fb38 	bl	24008788 <_lv_obj_get_style_int>
        *d8 = *s8;
24016118:	6971      	ldr	r1, [r6, #20]
2401611a:	4603      	mov	r3, r0
2401611c:	aa06      	add	r2, sp, #24
2401611e:	6930      	ldr	r0, [r6, #16]
24016120:	c203      	stmia	r2!, {r0, r1}
        bg_coords.x1 -= w;
24016122:	b2a8      	uxth	r0, r5
24016124:	f8bd 2018 	ldrh.w	r2, [sp, #24]
24016128:	1a12      	subs	r2, r2, r0
2401612a:	f8ad 2018 	strh.w	r2, [sp, #24]
        bg_coords.x2 += w;
2401612e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
24016132:	4410      	add	r0, r2
24016134:	f8ad 001c 	strh.w	r0, [sp, #28]
        bg_coords.y1 -= h;
24016138:	b298      	uxth	r0, r3
2401613a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
2401613e:	1a1b      	subs	r3, r3, r0
24016140:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
24016144:	f8bd 301e 	ldrh.w	r3, [sp, #30]
24016148:	4418      	add	r0, r3
2401614a:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
2401614e:	a815      	add	r0, sp, #84	; 0x54
24016150:	f7f7 fc88 	bl	2400da64 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
24016154:	aa15      	add	r2, sp, #84	; 0x54
24016156:	4639      	mov	r1, r7
24016158:	4630      	mov	r0, r6
2401615a:	f7f3 f840 	bl	240091de <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
2401615e:	aa15      	add	r2, sp, #84	; 0x54
24016160:	4641      	mov	r1, r8
24016162:	a806      	add	r0, sp, #24
24016164:	f7f7 fca2 	bl	2400daac <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
24016168:	a908      	add	r1, sp, #32
2401616a:	4630      	mov	r0, r6
2401616c:	f7ff ff65 	bl	2401603a <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
24016170:	aa08      	add	r2, sp, #32
24016172:	4641      	mov	r1, r8
24016174:	a80a      	add	r0, sp, #40	; 0x28
24016176:	f7f8 ffec 	bl	2400f152 <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
2401617a:	2800      	cmp	r0, #0
2401617c:	f000 80ac 	beq.w	240162d8 <lv_label_design+0x1f4>
        lv_label_align_t align = lv_label_get_align(label);
24016180:	4630      	mov	r0, r6
24016182:	f7ff ffa5 	bl	240160d0 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
24016186:	7c23      	ldrb	r3, [r4, #16]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
24016188:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
2401618c:	061a      	lsls	r2, r3, #24
2401618e:	bf48      	it	mi
24016190:	f045 0502 	orrmi.w	r5, r5, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
24016194:	075b      	lsls	r3, r3, #29
24016196:	bf08      	it	eq
24016198:	f045 0510 	orreq.w	r5, r5, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
2401619c:	2801      	cmp	r0, #1
2401619e:	f040 809f 	bne.w	240162e0 <lv_label_design+0x1fc>
240161a2:	f045 0504 	orr.w	r5, r5, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
240161a6:	a80c      	add	r0, sp, #48	; 0x30
240161a8:	f7f5 fe4c 	bl	2400be44 <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
240161ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
240161b0:	aa0c      	add	r2, sp, #48	; 0x30
240161b2:	2100      	movs	r1, #0
240161b4:	4630      	mov	r0, r6
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
240161b6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
        label_draw_dsc.ofs_x = ext->offset.x;
240161ba:	89a3      	ldrh	r3, [r4, #12]
240161bc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
240161c0:	89e3      	ldrh	r3, [r4, #14]
        label_draw_dsc.flag = flag;
240161c2:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        label_draw_dsc.ofs_y = ext->offset.y;
240161c6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
240161ca:	f7f3 f991 	bl	240094f0 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
240161ce:	7c23      	ldrb	r3, [r4, #16]
240161d0:	f003 0207 	and.w	r2, r3, #7
240161d4:	3a03      	subs	r2, #3
240161d6:	2a01      	cmp	r2, #1
240161d8:	d824      	bhi.n	24016224 <lv_label_design+0x140>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
240161da:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
240161de:	2b10      	cmp	r3, #16
240161e0:	d001      	beq.n	240161e6 <lv_label_design+0x102>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
240161e2:	2b20      	cmp	r3, #32
240161e4:	d11e      	bne.n	24016224 <lv_label_design+0x140>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
240161e6:	f647 4318 	movw	r3, #31768	; 0x7c18
240161ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
240161ec:	9502      	str	r5, [sp, #8]
240161ee:	a805      	add	r0, sp, #20
240161f0:	9301      	str	r3, [sp, #4]
240161f2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
240161f6:	9300      	str	r3, [sp, #0]
240161f8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
240161fc:	6821      	ldr	r1, [r4, #0]
240161fe:	f7fa fd53 	bl	24010ca8 <_lv_txt_get_size>
24016202:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
24016206:	f8bd 2020 	ldrh.w	r2, [sp, #32]
2401620a:	3301      	adds	r3, #1
2401620c:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
2401620e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
24016212:	b21b      	sxth	r3, r3
24016214:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
24016216:	bfc2      	ittt	gt
24016218:	f89d 3051 	ldrbgt.w	r3, [sp, #81]	; 0x51
2401621c:	f023 030c 	bicgt.w	r3, r3, #12
24016220:	f88d 3051 	strbgt.w	r3, [sp, #81]	; 0x51
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
24016224:	2600      	movs	r6, #0
24016226:	aa0c      	add	r2, sp, #48	; 0x30
24016228:	a90a      	add	r1, sp, #40	; 0x28
2401622a:	a808      	add	r0, sp, #32
2401622c:	9600      	str	r6, [sp, #0]
2401622e:	6823      	ldr	r3, [r4, #0]
24016230:	f7f5 fe1e 	bl	2400be70 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
24016234:	7c23      	ldrb	r3, [r4, #16]
24016236:	f003 0307 	and.w	r3, r3, #7
2401623a:	2b04      	cmp	r3, #4
2401623c:	d14c      	bne.n	240162d8 <lv_label_design+0x1f4>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
2401623e:	f647 4318 	movw	r3, #31768	; 0x7c18
24016242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
24016244:	9502      	str	r5, [sp, #8]
24016246:	a805      	add	r0, sp, #20
24016248:	9301      	str	r3, [sp, #4]
2401624a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
2401624e:	9300      	str	r3, [sp, #0]
24016250:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
24016254:	6821      	ldr	r1, [r4, #0]
24016256:	f7fa fd27 	bl	24010ca8 <_lv_txt_get_size>
2401625a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
2401625e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
24016262:	3201      	adds	r2, #1
            if(size.x > lv_area_get_width(&txt_coords)) {
24016264:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
24016268:	1a52      	subs	r2, r2, r1
2401626a:	b212      	sxth	r2, r2
2401626c:	4293      	cmp	r3, r2
2401626e:	dd16      	ble.n	2401629e <lv_label_design+0x1ba>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
24016270:	89a2      	ldrh	r2, [r4, #12]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
24016272:	980e      	ldr	r0, [sp, #56]	; 0x38
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
24016274:	4413      	add	r3, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
24016276:	2220      	movs	r2, #32
24016278:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
2401627a:	b29d      	uxth	r5, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
2401627c:	f7f8 fc1a 	bl	2400eab4 <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
24016280:	89e3      	ldrh	r3, [r4, #14]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
24016282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
24016286:	9600      	str	r6, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y;
24016288:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
2401628c:	aa0c      	add	r2, sp, #48	; 0x30
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
2401628e:	4405      	add	r5, r0
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
24016290:	6823      	ldr	r3, [r4, #0]
24016292:	a90a      	add	r1, sp, #40	; 0x28
24016294:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
24016296:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
2401629a:	f7f5 fde9 	bl	2400be70 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2401629e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
240162a2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
240162a6:	3301      	adds	r3, #1
            if(size.y > lv_area_get_height(&txt_coords)) {
240162a8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
240162ac:	1a5b      	subs	r3, r3, r1
240162ae:	b21b      	sxth	r3, r3
240162b0:	429a      	cmp	r2, r3
240162b2:	dd11      	ble.n	240162d8 <lv_label_design+0x1f4>
                label_draw_dsc.ofs_x = ext->offset.x;
240162b4:	89a3      	ldrh	r3, [r4, #12]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
240162b6:	a90a      	add	r1, sp, #40	; 0x28
240162b8:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_x = ext->offset.x;
240162ba:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
240162be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
240162c0:	891b      	ldrh	r3, [r3, #8]
240162c2:	441a      	add	r2, r3
240162c4:	89e3      	ldrh	r3, [r4, #14]
240162c6:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
240162c8:	2300      	movs	r3, #0
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
240162ca:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
240162ce:	aa0c      	add	r2, sp, #48	; 0x30
240162d0:	9300      	str	r3, [sp, #0]
240162d2:	6823      	ldr	r3, [r4, #0]
240162d4:	f7f5 fdcc 	bl	2400be70 <lv_draw_label>
}
240162d8:	4638      	mov	r0, r7
240162da:	b02a      	add	sp, #168	; 0xa8
240162dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
240162e0:	2802      	cmp	r0, #2
240162e2:	bf08      	it	eq
240162e4:	f045 0508 	orreq.w	r5, r5, #8
240162e8:	e75d      	b.n	240161a6 <lv_label_design+0xc2>
    return LV_DESIGN_RES_OK;
240162ea:	2700      	movs	r7, #0
240162ec:	e7f4      	b.n	240162d8 <lv_label_design+0x1f4>

240162ee <lv_label_get_recolor>:
{
240162ee:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240162f0:	f7f2 ff33 	bl	2400915a <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
240162f4:	7c00      	ldrb	r0, [r0, #16]
}
240162f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
240162fa:	bd08      	pop	{r3, pc}

240162fc <lv_label_get_letter_pos>:
{
240162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016300:	ed2d 8b02 	vpush	{d8}
24016304:	b08b      	sub	sp, #44	; 0x2c
24016306:	4606      	mov	r6, r0
24016308:	9106      	str	r1, [sp, #24]
2401630a:	9203      	str	r2, [sp, #12]
    const char * txt         = lv_label_get_text(label);
2401630c:	f7ff fed4 	bl	240160b8 <lv_label_get_text>
24016310:	4604      	mov	r4, r0
    lv_label_align_t align = lv_label_get_align(label);
24016312:	4630      	mov	r0, r6
24016314:	f7ff fedc 	bl	240160d0 <lv_label_get_align>
24016318:	4680      	mov	r8, r0
    if(txt[0] == '\0') {
2401631a:	7823      	ldrb	r3, [r4, #0]
2401631c:	b9cb      	cbnz	r3, 24016352 <lv_label_get_letter_pos+0x56>
        pos->y = 0;
2401631e:	9a03      	ldr	r2, [sp, #12]
        switch(align) {
24016320:	2801      	cmp	r0, #1
        pos->y = 0;
24016322:	8053      	strh	r3, [r2, #2]
        switch(align) {
24016324:	d00e      	beq.n	24016344 <lv_label_get_letter_pos+0x48>
24016326:	2802      	cmp	r0, #2
24016328:	d006      	beq.n	24016338 <lv_label_get_letter_pos+0x3c>
2401632a:	b900      	cbnz	r0, 2401632e <lv_label_get_letter_pos+0x32>
                pos->x = 0;
2401632c:	8010      	strh	r0, [r2, #0]
}
2401632e:	b00b      	add	sp, #44	; 0x2c
24016330:	ecbd 8b02 	vpop	{d8}
24016334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_width(label);
24016338:	4630      	mov	r0, r6
2401633a:	f7f2 f968 	bl	2400860e <lv_obj_get_width>
                pos->x = lv_obj_get_width(label) / 2;
2401633e:	9b03      	ldr	r3, [sp, #12]
24016340:	8018      	strh	r0, [r3, #0]
                break;
24016342:	e7f4      	b.n	2401632e <lv_label_get_letter_pos+0x32>
                pos->x = lv_obj_get_width(label) / 2;
24016344:	4630      	mov	r0, r6
24016346:	f7f2 f962 	bl	2400860e <lv_obj_get_width>
2401634a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
2401634e:	1040      	asrs	r0, r0, #1
24016350:	e7f5      	b.n	2401633e <lv_label_get_letter_pos+0x42>
    get_txt_coords(label, &txt_coords);
24016352:	a908      	add	r1, sp, #32
24016354:	4630      	mov	r0, r6
24016356:	f7ff fe70 	bl	2401603a <get_txt_coords>
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
2401635a:	4630      	mov	r0, r6
2401635c:	f7f2 fefd 	bl	2400915a <lv_obj_get_ext_attr>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24016360:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
24016364:	f8bd 2020 	ldrh.w	r2, [sp, #32]
24016368:	4605      	mov	r5, r0
2401636a:	3301      	adds	r3, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
2401636c:	2100      	movs	r1, #0
2401636e:	4630      	mov	r0, r6
24016370:	1a9b      	subs	r3, r3, r2
24016372:	f248 028e 	movw	r2, #32910	; 0x808e
24016376:	b21b      	sxth	r3, r3
24016378:	ee08 3a10 	vmov	s16, r3
2401637c:	f7f2 fcc8 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016380:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24016384:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016386:	2100      	movs	r1, #0
24016388:	4630      	mov	r0, r6
2401638a:	f7f2 f9fd 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
2401638e:	f248 0280 	movw	r2, #32896	; 0x8080
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016392:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24016394:	2100      	movs	r1, #0
24016396:	4630      	mov	r0, r6
24016398:	f7f2 f9f6 	bl	24008788 <_lv_obj_get_style_int>
2401639c:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
240163a0:	4683      	mov	fp, r0
240163a2:	9304      	str	r3, [sp, #16]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
240163a4:	7c2b      	ldrb	r3, [r5, #16]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
240163a6:	f3c3 1580 	ubfx	r5, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
240163aa:	061a      	lsls	r2, r3, #24
240163ac:	bf48      	it	mi
240163ae:	f045 0502 	orrmi.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
240163b2:	075b      	lsls	r3, r3, #29
240163b4:	bf08      	it	eq
240163b6:	f045 0510 	orreq.w	r5, r5, #16
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
240163ba:	f1b8 0f01 	cmp.w	r8, #1
240163be:	d155      	bne.n	2401646c <lv_label_get_letter_pos+0x170>
240163c0:	f045 0504 	orr.w	r5, r5, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
240163c4:	4b41      	ldr	r3, [pc, #260]	; (240164cc <lv_label_get_letter_pos+0x1d0>)
240163c6:	4620      	mov	r0, r4
240163c8:	9906      	ldr	r1, [sp, #24]
240163ca:	681b      	ldr	r3, [r3, #0]
240163cc:	4798      	blx	r3
    lv_coord_t y             = 0;
240163ce:	2300      	movs	r3, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
240163d0:	4606      	mov	r6, r0
    uint32_t line_start      = 0;
240163d2:	461f      	mov	r7, r3
    lv_coord_t y             = 0;
240163d4:	9302      	str	r3, [sp, #8]
        y += letter_height + line_space;
240163d6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
240163da:	4413      	add	r3, r2
240163dc:	9307      	str	r3, [sp, #28]
    while(txt[new_line_start] != '\0') {
240163de:	5de3      	ldrb	r3, [r4, r7]
240163e0:	19e0      	adds	r0, r4, r7
240163e2:	2b00      	cmp	r3, #0
240163e4:	d148      	bne.n	24016478 <lv_label_get_letter_pos+0x17c>
240163e6:	46b9      	mov	r9, r7
    if(byte_id > 0) {
240163e8:	b186      	cbz	r6, 2401640c <lv_label_get_letter_pos+0x110>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
240163ea:	19a3      	adds	r3, r4, r6
240163ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
240163f0:	2b0a      	cmp	r3, #10
240163f2:	d001      	beq.n	240163f8 <lv_label_get_letter_pos+0xfc>
240163f4:	2b0d      	cmp	r3, #13
240163f6:	d109      	bne.n	2401640c <lv_label_get_letter_pos+0x110>
240163f8:	5da3      	ldrb	r3, [r4, r6]
240163fa:	b93b      	cbnz	r3, 2401640c <lv_label_get_letter_pos+0x110>
            y += letter_height + line_space;
240163fc:	4637      	mov	r7, r6
240163fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
24016402:	4413      	add	r3, r2
24016404:	9a02      	ldr	r2, [sp, #8]
24016406:	4413      	add	r3, r2
24016408:	b21b      	sxth	r3, r3
2401640a:	9302      	str	r3, [sp, #8]
    bidi_txt = &txt[line_start];
2401640c:	443c      	add	r4, r7
    lv_coord_t x = _lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
2401640e:	465b      	mov	r3, fp
24016410:	1bf1      	subs	r1, r6, r7
24016412:	4652      	mov	r2, sl
24016414:	4620      	mov	r0, r4
24016416:	9500      	str	r5, [sp, #0]
24016418:	f7fa fb14 	bl	24010a44 <_lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
2401641c:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t x = _lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
2401641e:	4606      	mov	r6, r0
    if(char_id != line_start) x += letter_space;
24016420:	429f      	cmp	r7, r3
24016422:	bf1c      	itt	ne
24016424:	445e      	addne	r6, fp
24016426:	b236      	sxthne	r6, r6
    if(align == LV_LABEL_ALIGN_CENTER) {
24016428:	f1b8 0f01 	cmp.w	r8, #1
2401642c:	d13a      	bne.n	240164a4 <lv_label_get_letter_pos+0x1a8>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
2401642e:	465b      	mov	r3, fp
24016430:	4652      	mov	r2, sl
24016432:	eba9 0107 	sub.w	r1, r9, r7
24016436:	4620      	mov	r0, r4
24016438:	9500      	str	r5, [sp, #0]
2401643a:	f7fa fb03 	bl	24010a44 <_lv_txt_get_width>
2401643e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
24016442:	f8bd 2020 	ldrh.w	r2, [sp, #32]
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
24016446:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
2401644a:	3301      	adds	r3, #1
2401644c:	f340 004f 	sbfx	r0, r0, #1, #16
24016450:	1a9b      	subs	r3, r3, r2
24016452:	f3c3 32c0 	ubfx	r2, r3, #15, #1
24016456:	fa02 f383 	sxtah	r3, r2, r3
2401645a:	ebc0 0063 	rsb	r0, r0, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
2401645e:	4430      	add	r0, r6
24016460:	b206      	sxth	r6, r0
    pos->x = x;
24016462:	9b03      	ldr	r3, [sp, #12]
    pos->y = y;
24016464:	9a02      	ldr	r2, [sp, #8]
    pos->x = x;
24016466:	801e      	strh	r6, [r3, #0]
    pos->y = y;
24016468:	805a      	strh	r2, [r3, #2]
2401646a:	e760      	b.n	2401632e <lv_label_get_letter_pos+0x32>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
2401646c:	f1b8 0f02 	cmp.w	r8, #2
24016470:	bf08      	it	eq
24016472:	f045 0508 	orreq.w	r5, r5, #8
24016476:	e7a5      	b.n	240163c4 <lv_label_get_letter_pos+0xc8>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
24016478:	ee18 3a10 	vmov	r3, s16
2401647c:	465a      	mov	r2, fp
2401647e:	4651      	mov	r1, sl
24016480:	9500      	str	r5, [sp, #0]
24016482:	f7fa fb2f 	bl	24010ae4 <_lv_txt_get_next_line>
24016486:	eb07 0900 	add.w	r9, r7, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
2401648a:	454e      	cmp	r6, r9
2401648c:	d3ac      	bcc.n	240163e8 <lv_label_get_letter_pos+0xec>
2401648e:	f814 3009 	ldrb.w	r3, [r4, r9]
24016492:	2b00      	cmp	r3, #0
24016494:	d0a8      	beq.n	240163e8 <lv_label_get_letter_pos+0xec>
        y += letter_height + line_space;
24016496:	9b02      	ldr	r3, [sp, #8]
24016498:	464f      	mov	r7, r9
2401649a:	9a07      	ldr	r2, [sp, #28]
2401649c:	4413      	add	r3, r2
2401649e:	b21b      	sxth	r3, r3
240164a0:	9302      	str	r3, [sp, #8]
        line_start = new_line_start;
240164a2:	e79c      	b.n	240163de <lv_label_get_letter_pos+0xe2>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
240164a4:	f1b8 0f02 	cmp.w	r8, #2
240164a8:	d1db      	bne.n	24016462 <lv_label_get_letter_pos+0x166>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
240164aa:	465b      	mov	r3, fp
240164ac:	4652      	mov	r2, sl
240164ae:	eba9 0107 	sub.w	r1, r9, r7
240164b2:	4620      	mov	r0, r4
240164b4:	9500      	str	r5, [sp, #0]
240164b6:	f7fa fac5 	bl	24010a44 <_lv_txt_get_width>
240164ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
240164be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
240164c2:	3301      	adds	r3, #1
240164c4:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
240164c6:	b21b      	sxth	r3, r3
240164c8:	1a18      	subs	r0, r3, r0
240164ca:	e7c8      	b.n	2401645e <lv_label_get_letter_pos+0x162>
240164cc:	2401a6dc 	.word	0x2401a6dc

240164d0 <lv_label_get_letter_on>:
{
240164d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
240164d4:	f9b1 3000 	ldrsh.w	r3, [r1]
{
240164d8:	460c      	mov	r4, r1
240164da:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240164dc:	2212      	movs	r2, #18
240164de:	2100      	movs	r1, #0
240164e0:	ed2d 8b02 	vpush	{d8}
240164e4:	b08d      	sub	sp, #52	; 0x34
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
240164e6:	9304      	str	r3, [sp, #16]
240164e8:	f7f2 f94e 	bl	24008788 <_lv_obj_get_style_int>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
240164ec:	8864      	ldrh	r4, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240164ee:	2210      	movs	r2, #16
240164f0:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240164f2:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240164f4:	4630      	mov	r0, r6
240164f6:	f7f2 f947 	bl	24008788 <_lv_obj_get_style_int>
240164fa:	1a20      	subs	r0, r4, r0
    get_txt_coords(label, &txt_coords);
240164fc:	a90a      	add	r1, sp, #40	; 0x28
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
240164fe:	b203      	sxth	r3, r0
    get_txt_coords(label, &txt_coords);
24016500:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
24016502:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
24016504:	f7ff fd99 	bl	2401603a <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
24016508:	4630      	mov	r0, r6
2401650a:	f7ff fdd5 	bl	240160b8 <lv_label_get_text>
2401650e:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
24016510:	4630      	mov	r0, r6
24016512:	f7f2 fe22 	bl	2400915a <lv_obj_get_ext_attr>
24016516:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
2401651a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
2401651e:	4605      	mov	r5, r0
24016520:	3301      	adds	r3, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24016522:	2100      	movs	r1, #0
24016524:	4630      	mov	r0, r6
24016526:	1a9b      	subs	r3, r3, r2
24016528:	f248 028e 	movw	r2, #32910	; 0x808e
2401652c:	b21b      	sxth	r3, r3
2401652e:	ee08 3a90 	vmov	s17, r3
24016532:	f7f2 fbed 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016536:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
2401653a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
2401653c:	2100      	movs	r1, #0
2401653e:	4630      	mov	r0, r6
24016540:	f7f2 f922 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24016544:	f248 0280 	movw	r2, #32896	; 0x8080
24016548:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
2401654a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
2401654c:	4630      	mov	r0, r6
2401654e:	f7f2 f91b 	bl	24008788 <_lv_obj_get_style_int>
24016552:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
24016556:	ee08 0a10 	vmov	s16, r0
    lv_label_align_t align = lv_label_get_align(label);
2401655a:	4630      	mov	r0, r6
2401655c:	9303      	str	r3, [sp, #12]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
2401655e:	7c2b      	ldrb	r3, [r5, #16]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
24016560:	f3c3 1580 	ubfx	r5, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
24016564:	061a      	lsls	r2, r3, #24
24016566:	bf48      	it	mi
24016568:	f045 0502 	orrmi.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
2401656c:	075b      	lsls	r3, r3, #29
2401656e:	bf08      	it	eq
24016570:	f045 0510 	orreq.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
24016574:	f7ff fdac 	bl	240160d0 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
24016578:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
2401657a:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
2401657c:	d108      	bne.n	24016590 <lv_label_get_letter_on+0xc0>
2401657e:	f045 0504 	orr.w	r5, r5, #4
        y += letter_height + line_space;
24016582:	9b03      	ldr	r3, [sp, #12]
{
24016584:	f04f 0b00 	mov.w	fp, #0
        y += letter_height + line_space;
24016588:	4423      	add	r3, r4
{
2401658a:	465e      	mov	r6, fp
        y += letter_height + line_space;
2401658c:	9307      	str	r3, [sp, #28]
2401658e:	e07e      	b.n	2401668e <lv_label_get_letter_on+0x1be>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
24016590:	2802      	cmp	r0, #2
24016592:	d1f6      	bne.n	24016582 <lv_label_get_letter_on+0xb2>
24016594:	f045 0508 	orr.w	r5, r5, #8
24016598:	e7f3      	b.n	24016582 <lv_label_get_letter_on+0xb2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
2401659a:	ee18 3a90 	vmov	r3, s17
2401659e:	ee18 2a10 	vmov	r2, s16
240165a2:	4651      	mov	r1, sl
240165a4:	4640      	mov	r0, r8
240165a6:	9500      	str	r5, [sp, #0]
240165a8:	f7fa fa9c 	bl	24010ae4 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
240165ac:	9b03      	ldr	r3, [sp, #12]
240165ae:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
240165b0:	1834      	adds	r4, r6, r0
        if(pos.y <= y + letter_height) {
240165b2:	445b      	add	r3, fp
240165b4:	429a      	cmp	r2, r3
240165b6:	dc65      	bgt.n	24016684 <lv_label_get_letter_on+0x1b4>
            letter = _lv_txt_encoded_prev(txt, &tmp);
240165b8:	4b52      	ldr	r3, [pc, #328]	; (24016704 <lv_label_get_letter_on+0x234>)
240165ba:	a909      	add	r1, sp, #36	; 0x24
240165bc:	4638      	mov	r0, r7
            uint32_t tmp = new_line_start;
240165be:	9409      	str	r4, [sp, #36]	; 0x24
            letter = _lv_txt_encoded_prev(txt, &tmp);
240165c0:	681b      	ldr	r3, [r3, #0]
240165c2:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
240165c4:	280a      	cmp	r0, #10
240165c6:	d002      	beq.n	240165ce <lv_label_get_letter_on+0xfe>
240165c8:	5d3b      	ldrb	r3, [r7, r4]
240165ca:	b903      	cbnz	r3, 240165ce <lv_label_get_letter_on+0xfe>
240165cc:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
240165ce:	f1b9 0f01 	cmp.w	r9, #1
240165d2:	d163      	bne.n	2401669c <lv_label_get_letter_on+0x1cc>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
240165d4:	ee18 3a10 	vmov	r3, s16
240165d8:	4652      	mov	r2, sl
240165da:	1ba1      	subs	r1, r4, r6
240165dc:	4640      	mov	r0, r8
240165de:	9500      	str	r5, [sp, #0]
240165e0:	f7fa fa30 	bl	24010a44 <_lv_txt_get_width>
240165e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
240165e8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
240165ec:	3301      	adds	r3, #1
240165ee:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
240165f0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
240165f4:	fa02 f283 	sxtah	r2, r2, r3
240165f8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
240165fc:	105b      	asrs	r3, r3, #1
240165fe:	ebc3 0362 	rsb	r3, r3, r2, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
24016602:	fa0f f983 	sxth.w	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
24016606:	2200      	movs	r2, #0
24016608:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    uint32_t i = 0;
2401660c:	9209      	str	r2, [sp, #36]	; 0x24
    if(new_line_start > 0) {
2401660e:	b34c      	cbz	r4, 24016664 <lv_label_get_letter_on+0x194>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
24016610:	9b04      	ldr	r3, [sp, #16]
24016612:	9906      	ldr	r1, [sp, #24]
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
24016614:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 2401670c <lv_label_get_letter_on+0x23c>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
24016618:	1a59      	subs	r1, r3, r1
2401661a:	b20b      	sxth	r3, r1
    uint32_t i_act = i;
2401661c:	e9cd 2303 	strd	r2, r3, [sp, #12]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24016620:	f005 0301 	and.w	r3, r5, #1
24016624:	9305      	str	r3, [sp, #20]
        while(i + line_start < new_line_start) {
24016626:	9a09      	ldr	r2, [sp, #36]	; 0x24
24016628:	4432      	add	r2, r6
2401662a:	42a2      	cmp	r2, r4
2401662c:	d21a      	bcs.n	24016664 <lv_label_get_letter_on+0x194>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
2401662e:	f8db 2000 	ldr.w	r2, [fp]
24016632:	a909      	add	r1, sp, #36	; 0x24
24016634:	4640      	mov	r0, r8
24016636:	4790      	blx	r2
24016638:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
2401663a:	9809      	ldr	r0, [sp, #36]	; 0x24
2401663c:	2100      	movs	r1, #0
2401663e:	f8db 2000 	ldr.w	r2, [fp]
24016642:	4440      	add	r0, r8
24016644:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
24016646:	9b05      	ldr	r3, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
24016648:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
2401664a:	2b00      	cmp	r3, #0
2401664c:	d13c      	bne.n	240166c8 <lv_label_get_letter_on+0x1f8>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
2401664e:	4629      	mov	r1, r5
24016650:	4650      	mov	r0, sl
24016652:	f7f8 fa2f 	bl	2400eab4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
24016656:	9b04      	ldr	r3, [sp, #16]
24016658:	fa09 f280 	sxtah	r2, r9, r0
2401665c:	4293      	cmp	r3, r2
2401665e:	da3f      	bge.n	240166e0 <lv_label_get_letter_on+0x210>
                i = i_act;
24016660:	9b03      	ldr	r3, [sp, #12]
24016662:	9309      	str	r3, [sp, #36]	; 0x24
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
24016664:	4d28      	ldr	r5, [pc, #160]	; (24016708 <lv_label_get_letter_on+0x238>)
24016666:	4640      	mov	r0, r8
24016668:	9909      	ldr	r1, [sp, #36]	; 0x24
2401666a:	682b      	ldr	r3, [r5, #0]
2401666c:	4798      	blx	r3
2401666e:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
24016670:	682b      	ldr	r3, [r5, #0]
24016672:	4631      	mov	r1, r6
24016674:	4638      	mov	r0, r7
24016676:	4798      	blx	r3
}
24016678:	4420      	add	r0, r4
2401667a:	b00d      	add	sp, #52	; 0x34
2401667c:	ecbd 8b02 	vpop	{d8}
24016680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
24016684:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
24016686:	4626      	mov	r6, r4
24016688:	449b      	add	fp, r3
2401668a:	fa0f fb8b 	sxth.w	fp, fp
    while(txt[line_start] != '\0') {
2401668e:	5dbb      	ldrb	r3, [r7, r6]
24016690:	eb07 0806 	add.w	r8, r7, r6
24016694:	2b00      	cmp	r3, #0
24016696:	d180      	bne.n	2401659a <lv_label_get_letter_on+0xca>
24016698:	4634      	mov	r4, r6
2401669a:	e798      	b.n	240165ce <lv_label_get_letter_on+0xfe>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
2401669c:	f1b9 0f02 	cmp.w	r9, #2
240166a0:	d10f      	bne.n	240166c2 <lv_label_get_letter_on+0x1f2>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
240166a2:	ee18 3a10 	vmov	r3, s16
240166a6:	4652      	mov	r2, sl
240166a8:	1ba1      	subs	r1, r4, r6
240166aa:	4640      	mov	r0, r8
240166ac:	9500      	str	r5, [sp, #0]
240166ae:	f7fa f9c9 	bl	24010a44 <_lv_txt_get_width>
240166b2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
240166b6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
240166ba:	3301      	adds	r3, #1
240166bc:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
240166be:	1a1b      	subs	r3, r3, r0
240166c0:	e79f      	b.n	24016602 <lv_label_get_letter_on+0x132>
    lv_coord_t x = 0;
240166c2:	f04f 0900 	mov.w	r9, #0
240166c6:	e79e      	b.n	24016606 <lv_label_get_letter_on+0x136>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
240166c8:	9909      	ldr	r1, [sp, #36]	; 0x24
240166ca:	9006      	str	r0, [sp, #24]
240166cc:	f10d 0023 	add.w	r0, sp, #35	; 0x23
240166d0:	f818 1001 	ldrb.w	r1, [r8, r1]
240166d4:	f7fa f99a 	bl	24010a0c <_lv_txt_is_cmd>
240166d8:	9a06      	ldr	r2, [sp, #24]
240166da:	2800      	cmp	r0, #0
240166dc:	d0b7      	beq.n	2401664e <lv_label_get_letter_on+0x17e>
240166de:	e7a2      	b.n	24016626 <lv_label_get_letter_on+0x156>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
240166e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
240166e2:	1991      	adds	r1, r2, r6
240166e4:	42a1      	cmp	r1, r4
240166e6:	d0bb      	beq.n	24016660 <lv_label_get_letter_on+0x190>
240166e8:	19b9      	adds	r1, r7, r6
240166ea:	9b03      	ldr	r3, [sp, #12]
240166ec:	5cc9      	ldrb	r1, [r1, r3]
240166ee:	2900      	cmp	r1, #0
240166f0:	d0b6      	beq.n	24016660 <lv_label_get_letter_on+0x190>
            x += letter_space;
240166f2:	ee18 3a10 	vmov	r3, s16
            i_act = i;
240166f6:	9203      	str	r2, [sp, #12]
            x += letter_space;
240166f8:	444b      	add	r3, r9
240166fa:	4418      	add	r0, r3
240166fc:	fa0f f980 	sxth.w	r9, r0
            i_act = i;
24016700:	e791      	b.n	24016626 <lv_label_get_letter_on+0x156>
24016702:	bf00      	nop
24016704:	2401a6e8 	.word	0x2401a6e8
24016708:	2401a6e0 	.word	0x2401a6e0
2401670c:	2401a6e4 	.word	0x2401a6e4

24016710 <lv_label_refr_text>:
{
24016710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016714:	b08d      	sub	sp, #52	; 0x34
24016716:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016718:	f7f2 fd1f 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
2401671c:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
2401671e:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
24016720:	2b00      	cmp	r3, #0
24016722:	d065      	beq.n	240167f0 <lv_label_refr_text+0xe0>
    get_txt_coords(label, &txt_coords);
24016724:	a90a      	add	r1, sp, #40	; 0x28
24016726:	4628      	mov	r0, r5
24016728:	f7ff fc87 	bl	2401603a <get_txt_coords>
2401672c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
24016730:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24016734:	f248 028e 	movw	r2, #32910	; 0x808e
24016738:	f108 0801 	add.w	r8, r8, #1
2401673c:	2100      	movs	r1, #0
2401673e:	4628      	mov	r0, r5
24016740:	eba8 0803 	sub.w	r8, r8, r3
24016744:	f7f2 fae4 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016748:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
2401674c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
2401674e:	2100      	movs	r1, #0
24016750:	4628      	mov	r0, r5
24016752:	f7f2 f819 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
24016756:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24016758:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
2401675a:	f248 0280 	movw	r2, #32896	; 0x8080
2401675e:	4628      	mov	r0, r5
24016760:	fa0f f888 	sxth.w	r8, r8
24016764:	f7f2 f810 	bl	24008788 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
24016768:	7c22      	ldrb	r2, [r4, #16]
2401676a:	4681      	mov	r9, r0
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
2401676c:	9600      	str	r6, [sp, #0]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
2401676e:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
24016772:	0611      	lsls	r1, r2, #24
24016774:	bf48      	it	mi
24016776:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
2401677a:	0752      	lsls	r2, r2, #29
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
2401677c:	463a      	mov	r2, r7
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
2401677e:	bf08      	it	eq
24016780:	f043 0310 	orreq.w	r3, r3, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
24016784:	e9cd 8301 	strd	r8, r3, [sp, #4]
24016788:	4603      	mov	r3, r0
2401678a:	6821      	ldr	r1, [r4, #0]
2401678c:	a807      	add	r0, sp, #28
2401678e:	f7fa fa8b 	bl	24010ca8 <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
24016792:	7c21      	ldrb	r1, [r4, #16]
24016794:	f011 0107 	ands.w	r1, r1, #7
24016798:	d12d      	bne.n	240167f6 <lv_label_refr_text+0xe6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401679a:	2212      	movs	r2, #18
2401679c:	4628      	mov	r0, r5
2401679e:	9105      	str	r1, [sp, #20]
240167a0:	f7f1 fff2 	bl	24008788 <_lv_obj_get_style_int>
240167a4:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240167a6:	2213      	movs	r2, #19
240167a8:	9905      	ldr	r1, [sp, #20]
240167aa:	4628      	mov	r0, r5
240167ac:	f7f1 ffec 	bl	24008788 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
240167b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
240167b4:	4420      	add	r0, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240167b6:	2210      	movs	r2, #16
240167b8:	9905      	ldr	r1, [sp, #20]
240167ba:	4418      	add	r0, r3
240167bc:	f8ad 001c 	strh.w	r0, [sp, #28]
240167c0:	4628      	mov	r0, r5
240167c2:	f7f1 ffe1 	bl	24008788 <_lv_obj_get_style_int>
240167c6:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240167c8:	2211      	movs	r2, #17
240167ca:	9905      	ldr	r1, [sp, #20]
240167cc:	4628      	mov	r0, r5
240167ce:	f7f1 ffdb 	bl	24008788 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
240167d2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
240167d6:	1822      	adds	r2, r4, r0
        lv_obj_set_size(label, size.x, size.y);
240167d8:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
240167dc:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
240167de:	441a      	add	r2, r3
240167e0:	b212      	sxth	r2, r2
240167e2:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_obj_set_size(label, size.x, size.y);
240167e6:	f7f1 fcc3 	bl	24008170 <lv_obj_set_size>
    lv_obj_invalidate(label);
240167ea:	4628      	mov	r0, r5
240167ec:	f7f1 fbfa 	bl	24007fe4 <lv_obj_invalidate>
}
240167f0:	b00d      	add	sp, #52	; 0x34
240167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
240167f6:	2901      	cmp	r1, #1
240167f8:	f000 8094 	beq.w	24016924 <lv_label_refr_text+0x214>
240167fc:	2902      	cmp	r1, #2
240167fe:	d1f4      	bne.n	240167ea <lv_label_refr_text+0xda>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24016800:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
24016804:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
24016808:	3301      	adds	r3, #1
2401680a:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
2401680c:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
24016810:	b21b      	sxth	r3, r3
24016812:	429a      	cmp	r2, r3
24016814:	dc03      	bgt.n	2401681e <lv_label_refr_text+0x10e>
            ext->dot_end = LV_LABEL_DOT_END_INV;
24016816:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401681a:	60a3      	str	r3, [r4, #8]
2401681c:	e7e5      	b.n	240167ea <lv_label_refr_text+0xda>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
2401681e:	4b4c      	ldr	r3, [pc, #304]	; (24016950 <lv_label_refr_text+0x240>)
24016820:	6820      	ldr	r0, [r4, #0]
24016822:	681b      	ldr	r3, [r3, #0]
24016824:	4798      	blx	r3
24016826:	2803      	cmp	r0, #3
24016828:	d9f5      	bls.n	24016816 <lv_label_refr_text+0x106>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2401682a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
2401682e:	222e      	movs	r2, #46	; 0x2e
24016830:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
24016834:	4638      	mov	r0, r7
24016836:	f108 0801 	add.w	r8, r8, #1
2401683a:	4611      	mov	r1, r2
2401683c:	eba8 0803 	sub.w	r8, r8, r3
24016840:	f7f8 f938 	bl	2400eab4 <lv_font_get_glyph_width>
24016844:	4448      	add	r0, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24016846:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
2401684a:	fa1f f888 	uxth.w	r8, r8
                _lv_txt_encoded_prev(ext->text, &byte_id);
2401684e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 2401695c <lv_label_refr_text+0x24c>
            p.x = lv_area_get_width(&txt_coords) -
24016852:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
24016856:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
2401685a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
2401685e:	3301      	adds	r3, #1
24016860:	4480      	add	r8, r0
24016862:	1a9b      	subs	r3, r3, r2
24016864:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
24016868:	f8ad 8020 	strh.w	r8, [sp, #32]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
2401686c:	1990      	adds	r0, r2, r6
2401686e:	b299      	uxth	r1, r3
            y_overed = p.y %
24016870:	b21b      	sxth	r3, r3
24016872:	fb93 f7f0 	sdiv	r7, r3, r0
24016876:	fb00 3317 	mls	r3, r0, r7, r3
            if(y_overed >= lv_font_get_line_height(font)) {
2401687a:	b218      	sxth	r0, r3
2401687c:	4290      	cmp	r0, r2
                p.y -= line_space;
2401687e:	bfb4      	ite	lt
24016880:	1b88      	sublt	r0, r1, r6
                p.y += lv_font_get_line_height(font);
24016882:	1888      	addge	r0, r1, r2
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
24016884:	a908      	add	r1, sp, #32
                p.y -= line_space;
24016886:	1ac0      	subs	r0, r0, r3
24016888:	b200      	sxth	r0, r0
2401688a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
2401688e:	4628      	mov	r0, r5
24016890:	f7ff fe1e 	bl	240164d0 <lv_label_get_letter_on>
            size_t txt_len = strlen(ext->text);
24016894:	6827      	ldr	r7, [r4, #0]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
24016896:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
24016898:	4638      	mov	r0, r7
2401689a:	f003 fe89 	bl	2401a5b0 <__strlen_veneer>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
2401689e:	4b2d      	ldr	r3, [pc, #180]	; (24016954 <lv_label_refr_text+0x244>)
            size_t txt_len = strlen(ext->text);
240168a0:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
240168a2:	4631      	mov	r1, r6
240168a4:	681b      	ldr	r3, [r3, #0]
240168a6:	4638      	mov	r0, r7
240168a8:	4798      	blx	r3
240168aa:	9009      	str	r0, [sp, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
240168ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
                _lv_txt_encoded_prev(ext->text, &byte_id);
240168ae:	6820      	ldr	r0, [r4, #0]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
240168b0:	f107 0a03 	add.w	sl, r7, #3
240168b4:	45c2      	cmp	sl, r8
240168b6:	d82f      	bhi.n	24016918 <lv_label_refr_text+0x208>
240168b8:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
240168bc:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
240168c0:	4b25      	ldr	r3, [pc, #148]	; (24016958 <lv_label_refr_text+0x248>)
                _lv_txt_encoded_next(ext->text, &byte_id);
240168c2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 24016960 <lv_label_refr_text+0x250>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
240168c6:	9909      	ldr	r1, [sp, #36]	; 0x24
240168c8:	6820      	ldr	r0, [r4, #0]
240168ca:	681a      	ldr	r2, [r3, #0]
240168cc:	4408      	add	r0, r1
240168ce:	4790      	blx	r2
240168d0:	4448      	add	r0, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
240168d2:	f8db 2000 	ldr.w	r2, [fp]
240168d6:	a909      	add	r1, sp, #36	; 0x24
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
240168d8:	fa5f f980 	uxtb.w	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
240168dc:	6820      	ldr	r0, [r4, #0]
240168de:	4790      	blx	r2
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
240168e0:	f1b8 0801 	subs.w	r8, r8, #1
240168e4:	4b1c      	ldr	r3, [pc, #112]	; (24016958 <lv_label_refr_text+0x248>)
240168e6:	d1ee      	bne.n	240168c6 <lv_label_refr_text+0x1b6>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
240168e8:	6821      	ldr	r1, [r4, #0]
240168ea:	464a      	mov	r2, r9
240168ec:	4628      	mov	r0, r5
240168ee:	4439      	add	r1, r7
240168f0:	f7ff fb7a 	bl	24015fe8 <lv_label_set_dot_tmp>
240168f4:	2800      	cmp	r0, #0
240168f6:	f43f af78 	beq.w	240167ea <lv_label_refr_text+0xda>
                    ext->text[byte_id_ori + i] = '.';
240168fa:	6823      	ldr	r3, [r4, #0]
240168fc:	222e      	movs	r2, #46	; 0x2e
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
240168fe:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
24016900:	55da      	strb	r2, [r3, r7]
24016902:	6823      	ldr	r3, [r4, #0]
24016904:	443b      	add	r3, r7
24016906:	705a      	strb	r2, [r3, #1]
24016908:	6823      	ldr	r3, [r4, #0]
2401690a:	443b      	add	r3, r7
2401690c:	709a      	strb	r2, [r3, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
2401690e:	6823      	ldr	r3, [r4, #0]
24016910:	f803 800a 	strb.w	r8, [r3, sl]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
24016914:	60a6      	str	r6, [r4, #8]
24016916:	e768      	b.n	240167ea <lv_label_refr_text+0xda>
                _lv_txt_encoded_prev(ext->text, &byte_id);
24016918:	f8d9 3000 	ldr.w	r3, [r9]
2401691c:	a909      	add	r1, sp, #36	; 0x24
                letter_id--;
2401691e:	3e01      	subs	r6, #1
                _lv_txt_encoded_prev(ext->text, &byte_id);
24016920:	4798      	blx	r3
                letter_id--;
24016922:	e7c3      	b.n	240168ac <lv_label_refr_text+0x19c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24016924:	2210      	movs	r2, #16
24016926:	2100      	movs	r1, #0
24016928:	4628      	mov	r0, r5
2401692a:	f7f1 ff2d 	bl	24008788 <_lv_obj_get_style_int>
2401692e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24016930:	2211      	movs	r2, #17
24016932:	2100      	movs	r1, #0
24016934:	4628      	mov	r0, r5
24016936:	f7f1 ff27 	bl	24008788 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
2401693a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
2401693e:	1821      	adds	r1, r4, r0
        lv_obj_set_height(label, size.y);
24016940:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
24016942:	4419      	add	r1, r3
24016944:	b209      	sxth	r1, r1
24016946:	f8ad 101e 	strh.w	r1, [sp, #30]
        lv_obj_set_height(label, size.y);
2401694a:	f7f1 fc5a 	bl	24008202 <lv_obj_set_height>
2401694e:	e74c      	b.n	240167ea <lv_label_refr_text+0xda>
24016950:	2401a6f0 	.word	0x2401a6f0
24016954:	2401a6dc 	.word	0x2401a6dc
24016958:	2401a6ec 	.word	0x2401a6ec
2401695c:	2401a6e8 	.word	0x2401a6e8
24016960:	2401a6e4 	.word	0x2401a6e4

24016964 <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
24016964:	2908      	cmp	r1, #8
{
24016966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401696a:	4604      	mov	r4, r0
2401696c:	460e      	mov	r6, r1
2401696e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24016970:	d10e      	bne.n	24016990 <lv_label_signal+0x2c>
    switch(type) {
24016972:	7813      	ldrb	r3, [r2, #0]
24016974:	b133      	cbz	r3, 24016984 <lv_label_signal+0x20>
        info->result = lv_label_get_style(label, info->part);
24016976:	2300      	movs	r3, #0
24016978:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
2401697a:	4b25      	ldr	r3, [pc, #148]	; (24016a10 <lv_label_signal+0xac>)
}
2401697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
24016980:	681b      	ldr	r3, [r3, #0]
24016982:	4718      	bx	r3
            style_dsc_p = &label->style_list;
24016984:	3428      	adds	r4, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
24016986:	2701      	movs	r7, #1
        info->result = lv_label_get_style(label, info->part);
24016988:	6054      	str	r4, [r2, #4]
}
2401698a:	4638      	mov	r0, r7
2401698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
24016990:	4b1f      	ldr	r3, [pc, #124]	; (24016a10 <lv_label_signal+0xac>)
24016992:	681b      	ldr	r3, [r3, #0]
24016994:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24016996:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
24016998:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
2401699a:	d1f6      	bne.n	2401698a <lv_label_signal+0x26>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
2401699c:	2e07      	cmp	r6, #7
2401699e:	d105      	bne.n	240169ac <lv_label_signal+0x48>
240169a0:	4628      	mov	r0, r5
240169a2:	491c      	ldr	r1, [pc, #112]	; (24016a14 <lv_label_signal+0xb0>)
}
240169a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
240169a8:	f7f2 bc0b 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
240169ac:	4620      	mov	r0, r4
240169ae:	f7f2 fbd4 	bl	2400915a <lv_obj_get_ext_attr>
240169b2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
240169b4:	b966      	cbnz	r6, 240169d0 <lv_label_signal+0x6c>
        if(ext->static_txt == 0) {
240169b6:	7c03      	ldrb	r3, [r0, #16]
240169b8:	f013 0508 	ands.w	r5, r3, #8
240169bc:	d104      	bne.n	240169c8 <lv_label_signal+0x64>
            lv_mem_free(ext->text);
240169be:	6800      	ldr	r0, [r0, #0]
240169c0:	f7f9 f80c 	bl	2400f9dc <lv_mem_free>
            ext->text = NULL;
240169c4:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
240169c8:	4620      	mov	r0, r4
240169ca:	f7ff fac1 	bl	24015f50 <lv_label_dot_tmp_free>
240169ce:	e7dc      	b.n	2401698a <lv_label_signal+0x26>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
240169d0:	2e04      	cmp	r6, #4
240169d2:	d106      	bne.n	240169e2 <lv_label_signal+0x7e>
        lv_label_revert_dots(label);
240169d4:	4620      	mov	r0, r4
240169d6:	f7ff facd 	bl	24015f74 <lv_label_revert_dots>
        lv_label_refr_text(label);
240169da:	4620      	mov	r0, r4
240169dc:	f7ff fe98 	bl	24016710 <lv_label_refr_text>
240169e0:	e7d3      	b.n	2401698a <lv_label_signal+0x26>
    else if(sign == LV_SIGNAL_COORD_CHG) {
240169e2:	2e02      	cmp	r6, #2
240169e4:	d1d1      	bne.n	2401698a <lv_label_signal+0x26>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240169e6:	8a23      	ldrh	r3, [r4, #16]
240169e8:	8aa2      	ldrh	r2, [r4, #20]
240169ea:	8829      	ldrh	r1, [r5, #0]
240169ec:	1ad2      	subs	r2, r2, r3
240169ee:	88ab      	ldrh	r3, [r5, #4]
240169f0:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
240169f2:	b292      	uxth	r2, r2
240169f4:	b29b      	uxth	r3, r3
240169f6:	429a      	cmp	r2, r3
240169f8:	d1ec      	bne.n	240169d4 <lv_label_signal+0x70>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240169fa:	8a63      	ldrh	r3, [r4, #18]
240169fc:	8ae2      	ldrh	r2, [r4, #22]
240169fe:	8869      	ldrh	r1, [r5, #2]
24016a00:	1ad2      	subs	r2, r2, r3
24016a02:	88eb      	ldrh	r3, [r5, #6]
24016a04:	1a5b      	subs	r3, r3, r1
24016a06:	b292      	uxth	r2, r2
24016a08:	b29b      	uxth	r3, r3
24016a0a:	429a      	cmp	r2, r3
24016a0c:	d1e2      	bne.n	240169d4 <lv_label_signal+0x70>
24016a0e:	e7bc      	b.n	2401698a <lv_label_signal+0x26>
24016a10:	24035d0c 	.word	0x24035d0c
24016a14:	900ff2d9 	.word	0x900ff2d9

24016a18 <lv_label_set_text>:
{
24016a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24016a1c:	4607      	mov	r7, r0
24016a1e:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
24016a20:	f7f1 fae0 	bl	24007fe4 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016a24:	4638      	mov	r0, r7
24016a26:	f7f2 fb98 	bl	2400915a <lv_obj_get_ext_attr>
24016a2a:	6806      	ldr	r6, [r0, #0]
24016a2c:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
24016a2e:	2d00      	cmp	r5, #0
24016a30:	bf08      	it	eq
24016a32:	4635      	moveq	r5, r6
    if(ext->text == text && ext->static_txt == 0) {
24016a34:	42ae      	cmp	r6, r5
24016a36:	d10d      	bne.n	24016a54 <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
24016a38:	4630      	mov	r0, r6
24016a3a:	f003 fdb9 	bl	2401a5b0 <__strlen_veneer>
    if(ext->text == text && ext->static_txt == 0) {
24016a3e:	7c23      	ldrb	r3, [r4, #16]
24016a40:	071b      	lsls	r3, r3, #28
24016a42:	d411      	bmi.n	24016a68 <lv_label_set_text+0x50>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
24016a44:	1c41      	adds	r1, r0, #1
24016a46:	4630      	mov	r0, r6
24016a48:	f7f9 f920 	bl	2400fc8c <lv_mem_realloc>
24016a4c:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
24016a4e:	b9d8      	cbnz	r0, 24016a88 <lv_label_set_text+0x70>
}
24016a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
24016a54:	b146      	cbz	r6, 24016a68 <lv_label_set_text+0x50>
24016a56:	7c03      	ldrb	r3, [r0, #16]
24016a58:	f013 0808 	ands.w	r8, r3, #8
24016a5c:	d104      	bne.n	24016a68 <lv_label_set_text+0x50>
            lv_mem_free(ext->text);
24016a5e:	4630      	mov	r0, r6
24016a60:	f7f8 ffbc 	bl	2400f9dc <lv_mem_free>
            ext->text = NULL;
24016a64:	f8c4 8000 	str.w	r8, [r4]
        size_t len = strlen(text) + 1;
24016a68:	4628      	mov	r0, r5
24016a6a:	f003 fda1 	bl	2401a5b0 <__strlen_veneer>
        ext->text = lv_mem_alloc(len);
24016a6e:	3001      	adds	r0, #1
24016a70:	f7f8 ff84 	bl	2400f97c <lv_mem_alloc>
24016a74:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
24016a76:	2800      	cmp	r0, #0
24016a78:	d0ea      	beq.n	24016a50 <lv_label_set_text+0x38>
        strcpy(ext->text, text);
24016a7a:	4629      	mov	r1, r5
24016a7c:	f003 fd76 	bl	2401a56c <strcpy>
        ext->static_txt = 0;
24016a80:	7c23      	ldrb	r3, [r4, #16]
24016a82:	f36f 03c3 	bfc	r3, #3, #1
24016a86:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
24016a88:	4638      	mov	r0, r7
}
24016a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_refr_text(label);
24016a8e:	f7ff be3f 	b.w	24016710 <lv_label_refr_text>
	...

24016a94 <lv_label_ins_text>:
{
24016a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24016a98:	4607      	mov	r7, r0
24016a9a:	460c      	mov	r4, r1
24016a9c:	4690      	mov	r8, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016a9e:	f7f2 fb5c 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->static_txt != 0) return;
24016aa2:	7c03      	ldrb	r3, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016aa4:	4605      	mov	r5, r0
    if(ext->static_txt != 0) return;
24016aa6:	071b      	lsls	r3, r3, #28
24016aa8:	d425      	bmi.n	24016af6 <lv_label_ins_text+0x62>
    lv_obj_invalidate(label);
24016aaa:	4638      	mov	r0, r7
24016aac:	f7f1 fa9a 	bl	24007fe4 <lv_obj_invalidate>
    size_t old_len = strlen(ext->text);
24016ab0:	f8d5 9000 	ldr.w	r9, [r5]
24016ab4:	4648      	mov	r0, r9
24016ab6:	f003 fd7b 	bl	2401a5b0 <__strlen_veneer>
24016aba:	4606      	mov	r6, r0
    size_t ins_len = strlen(txt);
24016abc:	4640      	mov	r0, r8
24016abe:	f003 fd77 	bl	2401a5b0 <__strlen_veneer>
    size_t new_len = ins_len + old_len;
24016ac2:	1831      	adds	r1, r6, r0
    ext->text        = lv_mem_realloc(ext->text, new_len + 1);
24016ac4:	4648      	mov	r0, r9
24016ac6:	3101      	adds	r1, #1
24016ac8:	f7f9 f8e0 	bl	2400fc8c <lv_mem_realloc>
24016acc:	6028      	str	r0, [r5, #0]
    if(ext->text == NULL) return;
24016ace:	b190      	cbz	r0, 24016af6 <lv_label_ins_text+0x62>
    if(pos == LV_LABEL_POS_LAST) {
24016ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
24016ad4:	429c      	cmp	r4, r3
24016ad6:	d103      	bne.n	24016ae0 <lv_label_ins_text+0x4c>
        pos = _lv_txt_get_encoded_length(ext->text);
24016ad8:	4b08      	ldr	r3, [pc, #32]	; (24016afc <lv_label_ins_text+0x68>)
24016ada:	681b      	ldr	r3, [r3, #0]
24016adc:	4798      	blx	r3
24016ade:	4604      	mov	r4, r0
    _lv_txt_ins(ext->text, pos, txt);
24016ae0:	4621      	mov	r1, r4
24016ae2:	6828      	ldr	r0, [r5, #0]
24016ae4:	4642      	mov	r2, r8
24016ae6:	f7fa f93b 	bl	24010d60 <_lv_txt_ins>
    lv_label_set_text(label, NULL);
24016aea:	4638      	mov	r0, r7
24016aec:	2100      	movs	r1, #0
}
24016aee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_label_set_text(label, NULL);
24016af2:	f7ff bf91 	b.w	24016a18 <lv_label_set_text>
}
24016af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24016afa:	bf00      	nop
24016afc:	2401a6f0 	.word	0x2401a6f0

24016b00 <lv_label_set_text_fmt>:
{
24016b00:	b40e      	push	{r1, r2, r3}
24016b02:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
24016b04:	4605      	mov	r5, r0
24016b06:	9f07      	ldr	r7, [sp, #28]
    lv_obj_invalidate(label);
24016b08:	f7f1 fa6c 	bl	24007fe4 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016b0c:	4628      	mov	r0, r5
24016b0e:	f7f2 fb24 	bl	2400915a <lv_obj_get_ext_attr>
24016b12:	4604      	mov	r4, r0
    if(fmt == NULL) {
24016b14:	b93f      	cbnz	r7, 24016b26 <lv_label_set_text_fmt+0x26>
    lv_label_refr_text(label);
24016b16:	4628      	mov	r0, r5
24016b18:	f7ff fdfa 	bl	24016710 <lv_label_refr_text>
}
24016b1c:	b002      	add	sp, #8
24016b1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
24016b22:	b003      	add	sp, #12
24016b24:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
24016b26:	6800      	ldr	r0, [r0, #0]
24016b28:	b130      	cbz	r0, 24016b38 <lv_label_set_text_fmt+0x38>
24016b2a:	7c23      	ldrb	r3, [r4, #16]
24016b2c:	f013 0608 	ands.w	r6, r3, #8
24016b30:	d102      	bne.n	24016b38 <lv_label_set_text_fmt+0x38>
        lv_mem_free(ext->text);
24016b32:	f7f8 ff53 	bl	2400f9dc <lv_mem_free>
        ext->text = NULL;
24016b36:	6026      	str	r6, [r4, #0]
    va_start(args, fmt);
24016b38:	a908      	add	r1, sp, #32
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
24016b3a:	4638      	mov	r0, r7
    va_start(args, fmt);
24016b3c:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
24016b3e:	f7fa f939 	bl	24010db4 <_lv_txt_set_text_vfmt>
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
24016b42:	7c23      	ldrb	r3, [r4, #16]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
24016b44:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
24016b46:	f36f 03c3 	bfc	r3, #3, #1
24016b4a:	7423      	strb	r3, [r4, #16]
24016b4c:	e7e3      	b.n	24016b16 <lv_label_set_text_fmt+0x16>

24016b4e <lv_label_set_text_static>:
{
24016b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016b50:	4607      	mov	r7, r0
24016b52:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016b54:	f7f2 fb01 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
24016b58:	7c03      	ldrb	r3, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016b5a:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
24016b5c:	f013 0608 	ands.w	r6, r3, #8
24016b60:	d104      	bne.n	24016b6c <lv_label_set_text_static+0x1e>
24016b62:	6800      	ldr	r0, [r0, #0]
24016b64:	b110      	cbz	r0, 24016b6c <lv_label_set_text_static+0x1e>
        lv_mem_free(ext->text);
24016b66:	f7f8 ff39 	bl	2400f9dc <lv_mem_free>
        ext->text = NULL;
24016b6a:	6026      	str	r6, [r4, #0]
    if(text != NULL) {
24016b6c:	b125      	cbz	r5, 24016b78 <lv_label_set_text_static+0x2a>
        ext->static_txt = 1;
24016b6e:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
24016b70:	6025      	str	r5, [r4, #0]
        ext->static_txt = 1;
24016b72:	f043 0308 	orr.w	r3, r3, #8
24016b76:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
24016b78:	4638      	mov	r0, r7
}
24016b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
24016b7e:	f7ff bdc7 	b.w	24016710 <lv_label_refr_text>

24016b82 <lv_label_set_long_mode>:
{
24016b82:	b570      	push	{r4, r5, r6, lr}
24016b84:	460e      	mov	r6, r1
24016b86:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016b88:	f7f2 fae7 	bl	2400915a <lv_obj_get_ext_attr>
    ext->offset.x = 0;
24016b8c:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
24016b8e:	1ef2      	subs	r2, r6, #3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016b90:	4604      	mov	r4, r0
    ext->offset.x = 0;
24016b92:	60c3      	str	r3, [r0, #12]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
24016b94:	2a02      	cmp	r2, #2
24016b96:	7c03      	ldrb	r3, [r0, #16]
24016b98:	bf8c      	ite	hi
24016b9a:	2200      	movhi	r2, #0
24016b9c:	2201      	movls	r2, #1
24016b9e:	f362 13c7 	bfi	r3, r2, #7, #1
24016ba2:	7403      	strb	r3, [r0, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
24016ba4:	f003 0307 	and.w	r3, r3, #7
24016ba8:	2b02      	cmp	r3, #2
24016baa:	d107      	bne.n	24016bbc <lv_label_set_long_mode+0x3a>
24016bac:	6882      	ldr	r2, [r0, #8]
24016bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
24016bb2:	429a      	cmp	r2, r3
24016bb4:	d002      	beq.n	24016bbc <lv_label_set_long_mode+0x3a>
        lv_label_revert_dots(label);
24016bb6:	4628      	mov	r0, r5
24016bb8:	f7ff f9dc 	bl	24015f74 <lv_label_revert_dots>
    ext->long_mode = long_mode;
24016bbc:	7c23      	ldrb	r3, [r4, #16]
    lv_label_refr_text(label);
24016bbe:	4628      	mov	r0, r5
    ext->long_mode = long_mode;
24016bc0:	f366 0302 	bfi	r3, r6, #0, #3
24016bc4:	7423      	strb	r3, [r4, #16]
}
24016bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
24016bca:	f7ff bda1 	b.w	24016710 <lv_label_refr_text>

24016bce <lv_label_set_recolor>:
{
24016bce:	b538      	push	{r3, r4, r5, lr}
24016bd0:	460c      	mov	r4, r1
24016bd2:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
24016bd4:	f7f2 fac1 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
24016bd8:	7c03      	ldrb	r3, [r0, #16]
24016bda:	f3c3 1280 	ubfx	r2, r3, #6, #1
24016bde:	42a2      	cmp	r2, r4
24016be0:	d007      	beq.n	24016bf2 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
24016be2:	f364 1386 	bfi	r3, r4, #6, #1
24016be6:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
24016be8:	4628      	mov	r0, r5
}
24016bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
24016bee:	f7ff bd8f 	b.w	24016710 <lv_label_refr_text>
}
24016bf2:	bd38      	pop	{r3, r4, r5, pc}

24016bf4 <lv_label_create>:
{
24016bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
24016bf6:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
24016bf8:	f7f1 fb8c 	bl	24008314 <lv_obj_create>
    if(new_label == NULL) return NULL;
24016bfc:	4604      	mov	r4, r0
24016bfe:	b918      	cbnz	r0, 24016c08 <lv_label_create+0x14>
24016c00:	2400      	movs	r4, #0
}
24016c02:	4620      	mov	r0, r4
24016c04:	b003      	add	sp, #12
24016c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
24016c08:	4d4f      	ldr	r5, [pc, #316]	; (24016d48 <lv_label_create+0x154>)
24016c0a:	682b      	ldr	r3, [r5, #0]
24016c0c:	b913      	cbnz	r3, 24016c14 <lv_label_create+0x20>
24016c0e:	f7f2 faa0 	bl	24009152 <lv_obj_get_signal_cb>
24016c12:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
24016c14:	2114      	movs	r1, #20
24016c16:	4620      	mov	r0, r4
24016c18:	f7f1 f8f8 	bl	24007e0c <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
24016c1c:	4620      	mov	r0, r4
24016c1e:	f7f2 fa9c 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) {
24016c22:	2300      	movs	r3, #0
24016c24:	4605      	mov	r5, r0
24016c26:	b918      	cbnz	r0, 24016c30 <lv_label_create+0x3c>
        lv_obj_del(new_label);
24016c28:	4620      	mov	r0, r4
24016c2a:	f7f1 faf5 	bl	24008218 <lv_obj_del>
        return NULL;
24016c2e:	e7e7      	b.n	24016c00 <lv_label_create+0xc>
    ext->dot_end    = LV_LABEL_DOT_END_INV;
24016c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
    lv_obj_set_design_cb(new_label, lv_label_design);
24016c34:	4945      	ldr	r1, [pc, #276]	; (24016d4c <lv_label_create+0x158>)
    ext->dot.tmp_ptr   = NULL;
24016c36:	e9c0 3300 	strd	r3, r3, [r0]
    ext->offset.x = 0;
24016c3a:	e9c0 2302 	strd	r2, r3, [r0, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
24016c3e:	8a03      	ldrh	r3, [r0, #16]
24016c40:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
24016c44:	f023 0301 	bic.w	r3, r3, #1
24016c48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
24016c4c:	8203      	strh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
24016c4e:	4620      	mov	r0, r4
24016c50:	f7f1 f8da 	bl	24007e08 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
24016c54:	493e      	ldr	r1, [pc, #248]	; (24016d50 <lv_label_create+0x15c>)
24016c56:	4620      	mov	r0, r4
24016c58:	f7f1 f8ce 	bl	24007df8 <lv_obj_set_signal_cb>
    if(copy == NULL) {
24016c5c:	b987      	cbnz	r7, 24016c80 <lv_label_create+0x8c>
        lv_theme_apply(new_label, LV_THEME_LABEL);
24016c5e:	4620      	mov	r0, r4
24016c60:	210a      	movs	r1, #10
24016c62:	f7fa f92f 	bl	24010ec4 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
24016c66:	4639      	mov	r1, r7
24016c68:	4620      	mov	r0, r4
24016c6a:	f7f1 f826 	bl	24007cba <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
24016c6e:	4639      	mov	r1, r7
24016c70:	4620      	mov	r0, r4
24016c72:	f7ff ff86 	bl	24016b82 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
24016c76:	4937      	ldr	r1, [pc, #220]	; (24016d54 <lv_label_create+0x160>)
24016c78:	4620      	mov	r0, r4
24016c7a:	f7ff fecd 	bl	24016a18 <lv_label_set_text>
24016c7e:	e7c0      	b.n	24016c02 <lv_label_create+0xe>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24016c80:	4638      	mov	r0, r7
24016c82:	f7f2 fa6a 	bl	2400915a <lv_obj_get_ext_attr>
24016c86:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
24016c88:	4638      	mov	r0, r7
24016c8a:	f7ff fa1a 	bl	240160c2 <lv_label_get_long_mode>
24016c8e:	4601      	mov	r1, r0
24016c90:	4620      	mov	r0, r4
24016c92:	f7ff ff76 	bl	24016b82 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
24016c96:	4638      	mov	r0, r7
24016c98:	f7ff fb29 	bl	240162ee <lv_label_get_recolor>
24016c9c:	4601      	mov	r1, r0
24016c9e:	4620      	mov	r0, r4
24016ca0:	f7ff ff95 	bl	24016bce <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
24016ca4:	4638      	mov	r0, r7
24016ca6:	f7ff fa13 	bl	240160d0 <lv_label_get_align>
24016caa:	4601      	mov	r1, r0
24016cac:	4620      	mov	r0, r4
24016cae:	f7ff f9f0 	bl	24016092 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
24016cb2:	7c33      	ldrb	r3, [r6, #16]
            lv_label_set_text(new_label, lv_label_get_text(copy));
24016cb4:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
24016cb6:	071a      	lsls	r2, r3, #28
24016cb8:	d439      	bmi.n	24016d2e <lv_label_create+0x13a>
            lv_label_set_text(new_label, lv_label_get_text(copy));
24016cba:	f7ff f9fd 	bl	240160b8 <lv_label_get_text>
24016cbe:	4601      	mov	r1, r0
24016cc0:	4620      	mov	r0, r4
24016cc2:	f7ff fea9 	bl	24016a18 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
24016cc6:	7c33      	ldrb	r3, [r6, #16]
24016cc8:	f003 0307 	and.w	r3, r3, #7
24016ccc:	2b02      	cmp	r3, #2
24016cce:	d115      	bne.n	24016cfc <lv_label_create+0x108>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
24016cd0:	682f      	ldr	r7, [r5, #0]
24016cd2:	6830      	ldr	r0, [r6, #0]
24016cd4:	f7f8 fe90 	bl	2400f9f8 <_lv_mem_get_size>
24016cd8:	4601      	mov	r1, r0
24016cda:	4638      	mov	r0, r7
24016cdc:	f7f8 ffd6 	bl	2400fc8c <lv_mem_realloc>
24016ce0:	4607      	mov	r7, r0
24016ce2:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
24016ce4:	2800      	cmp	r0, #0
24016ce6:	d08b      	beq.n	24016c00 <lv_label_create+0xc>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
24016ce8:	6831      	ldr	r1, [r6, #0]
24016cea:	4608      	mov	r0, r1
24016cec:	9101      	str	r1, [sp, #4]
24016cee:	f7f8 fe83 	bl	2400f9f8 <_lv_mem_get_size>
24016cf2:	9901      	ldr	r1, [sp, #4]
24016cf4:	4602      	mov	r2, r0
24016cf6:	4638      	mov	r0, r7
24016cf8:	f7f8 fed8 	bl	2400faac <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
24016cfc:	7c73      	ldrb	r3, [r6, #17]
24016cfe:	07db      	lsls	r3, r3, #31
24016d00:	d51c      	bpl.n	24016d3c <lv_label_create+0x148>
24016d02:	6870      	ldr	r0, [r6, #4]
24016d04:	b1d0      	cbz	r0, 24016d3c <lv_label_create+0x148>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
24016d06:	f003 fc53 	bl	2401a5b0 <__strlen_veneer>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
24016d0a:	6869      	ldr	r1, [r5, #4]
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
24016d0c:	4602      	mov	r2, r0
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
24016d0e:	4620      	mov	r0, r4
24016d10:	f7ff f96a 	bl	24015fe8 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
24016d14:	7c72      	ldrb	r2, [r6, #17]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24016d16:	4620      	mov	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
24016d18:	7c6b      	ldrb	r3, [r5, #17]
24016d1a:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24016d1e:	22ff      	movs	r2, #255	; 0xff
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
24016d20:	746b      	strb	r3, [r5, #17]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24016d22:	4611      	mov	r1, r2
        ext->dot_end       = copy_ext->dot_end;
24016d24:	68b3      	ldr	r3, [r6, #8]
24016d26:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24016d28:	f7f2 f8ca 	bl	24008ec0 <lv_obj_refresh_style>
24016d2c:	e769      	b.n	24016c02 <lv_label_create+0xe>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
24016d2e:	f7ff f9c3 	bl	240160b8 <lv_label_get_text>
24016d32:	4601      	mov	r1, r0
24016d34:	4620      	mov	r0, r4
24016d36:	f7ff ff0a 	bl	24016b4e <lv_label_set_text_static>
24016d3a:	e7c4      	b.n	24016cc6 <lv_label_create+0xd2>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
24016d3c:	2204      	movs	r2, #4
24016d3e:	18b1      	adds	r1, r6, r2
24016d40:	18a8      	adds	r0, r5, r2
24016d42:	f7f8 feb3 	bl	2400faac <_lv_memcpy>
24016d46:	e7e5      	b.n	24016d14 <lv_label_create+0x120>
24016d48:	24035d0c 	.word	0x24035d0c
24016d4c:	240160e5 	.word	0x240160e5
24016d50:	24016965 	.word	0x24016965
24016d54:	900ff2e2 	.word	0x900ff2e2

24016d58 <lv_obj_get_style_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24016d58:	2213      	movs	r2, #19
24016d5a:	f7f1 bd15 	b.w	24008788 <_lv_obj_get_style_int>

24016d5e <lv_obj_get_style_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24016d5e:	2211      	movs	r2, #17
24016d60:	f7f1 bd12 	b.w	24008788 <_lv_obj_get_style_int>

24016d64 <refr_ext_draw_pad>:
        lv_obj_invalidate_area(page, &sb_area_tmp);
    }
}

static void refr_ext_draw_pad(lv_obj_t * page)
{
24016d64:	b538      	push	{r3, r4, r5, lr}
24016d66:	4604      	mov	r4, r0
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
24016d68:	2101      	movs	r1, #1
24016d6a:	f7ff fff8 	bl	24016d5e <lv_obj_get_style_pad_bottom>
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
24016d6e:	2101      	movs	r1, #1
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
24016d70:	4605      	mov	r5, r0
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
24016d72:	4620      	mov	r0, r4
24016d74:	f7ff fff0 	bl	24016d58 <lv_obj_get_style_pad_right>

    /*Ensure ext. size for the scrollbars if they are out of the page*/
    if(page->ext_draw_pad < (-sb_right)) page->ext_draw_pad = -sb_right;
24016d78:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
24016d7c:	4240      	negs	r0, r0
24016d7e:	4283      	cmp	r3, r0
24016d80:	bfb8      	it	lt
24016d82:	8660      	strhlt	r0, [r4, #50]	; 0x32
    if(page->ext_draw_pad < (-sb_bottom)) page->ext_draw_pad = -sb_bottom;
24016d84:	4268      	negs	r0, r5
24016d86:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
24016d8a:	4283      	cmp	r3, r0
24016d8c:	bfb8      	it	lt
24016d8e:	8660      	strhlt	r0, [r4, #50]	; 0x32
}
24016d90:	bd38      	pop	{r3, r4, r5, pc}

24016d92 <scrl_def_event_cb>:
{
24016d92:	b538      	push	{r3, r4, r5, lr}
24016d94:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
24016d96:	f7f1 fa69 	bl	2400826c <lv_obj_get_parent>
24016d9a:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
24016d9c:	2c0a      	cmp	r4, #10
24016d9e:	d808      	bhi.n	24016db2 <scrl_def_event_cb+0x20>
        lv_event_send(page, event, lv_event_get_data());
24016da0:	f7f1 f824 	bl	24007dec <lv_event_get_data>
24016da4:	4621      	mov	r1, r4
24016da6:	4602      	mov	r2, r0
24016da8:	4628      	mov	r0, r5
}
24016daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
24016dae:	f7f1 b813 	b.w	24007dd8 <lv_event_send>
}
24016db2:	bd38      	pop	{r3, r4, r5, pc}

24016db4 <lv_obj_get_style_pad_top.constprop.0>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24016db4:	2210      	movs	r2, #16
24016db6:	2100      	movs	r1, #0
24016db8:	f7f1 bce6 	b.w	24008788 <_lv_obj_get_style_int>

24016dbc <lv_area_copy>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
24016dbc:	3901      	subs	r1, #1
24016dbe:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24016dc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24016dc6:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
24016dca:	4298      	cmp	r0, r3
24016dcc:	d1f9      	bne.n	24016dc2 <lv_area_copy+0x6>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
24016dce:	4770      	bx	lr

24016dd0 <lv_page_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
24016dd0:	2a02      	cmp	r2, #2
{
24016dd2:	b570      	push	{r4, r5, r6, lr}
24016dd4:	4605      	mov	r5, r0
24016dd6:	b09a      	sub	sp, #104	; 0x68
24016dd8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
24016dda:	d105      	bne.n	24016de8 <lv_page_design+0x18>
        return ancestor_design(page, clip_area, mode);
24016ddc:	4b40      	ldr	r3, [pc, #256]	; (24016ee0 <lv_page_design+0x110>)
24016dde:	681b      	ldr	r3, [r3, #0]
}
24016de0:	b01a      	add	sp, #104	; 0x68
24016de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return ancestor_design(page, clip_area, mode);
24016de6:	4718      	bx	r3
    if(mode == LV_DESIGN_DRAW_MAIN) {
24016de8:	2a00      	cmp	r2, #0
24016dea:	d0f7      	beq.n	24016ddc <lv_page_design+0xc>
    else if(mode == LV_DESIGN_DRAW_POST) {
24016dec:	2a01      	cmp	r2, #1
24016dee:	d149      	bne.n	24016e84 <lv_page_design+0xb4>
        ancestor_design(page, clip_area, mode);
24016df0:	4b3b      	ldr	r3, [pc, #236]	; (24016ee0 <lv_page_design+0x110>)
24016df2:	681b      	ldr	r3, [r3, #0]
24016df4:	4798      	blx	r3
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
24016df6:	4628      	mov	r0, r5
24016df8:	f7f2 f9af 	bl	2400915a <lv_obj_get_ext_attr>
24016dfc:	4604      	mov	r4, r0
        lv_area_copy(&sb_hor_area, &ext->scrlbar.hor_area);
24016dfe:	f100 0110 	add.w	r1, r0, #16
24016e02:	a801      	add	r0, sp, #4
24016e04:	f7ff ffda 	bl	24016dbc <lv_area_copy>
        sb_hor_area.x1 += page->coords.x1;
24016e08:	8a2a      	ldrh	r2, [r5, #16]
24016e0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
24016e0e:	a803      	add	r0, sp, #12
        sb_hor_area.y1 += page->coords.y1;
24016e10:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        sb_hor_area.x1 += page->coords.x1;
24016e14:	4413      	add	r3, r2
24016e16:	f8ad 3004 	strh.w	r3, [sp, #4]
        sb_hor_area.y1 += page->coords.y1;
24016e1a:	8a6b      	ldrh	r3, [r5, #18]
24016e1c:	4419      	add	r1, r3
24016e1e:	f8ad 1006 	strh.w	r1, [sp, #6]
        sb_hor_area.x2 += page->coords.x1;
24016e22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
24016e26:	440a      	add	r2, r1
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
24016e28:	f104 0118 	add.w	r1, r4, #24
        sb_hor_area.x2 += page->coords.x1;
24016e2c:	f8ad 2008 	strh.w	r2, [sp, #8]
        sb_hor_area.y2 += page->coords.y1;
24016e30:	f8bd 200a 	ldrh.w	r2, [sp, #10]
24016e34:	4413      	add	r3, r2
24016e36:	f8ad 300a 	strh.w	r3, [sp, #10]
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
24016e3a:	f7ff ffbf 	bl	24016dbc <lv_area_copy>
        sb_ver_area.x1 += page->coords.x1;
24016e3e:	8a2a      	ldrh	r2, [r5, #16]
24016e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        sb_ver_area.y1 += page->coords.y1;
24016e44:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        sb_ver_area.x1 += page->coords.x1;
24016e48:	4413      	add	r3, r2
24016e4a:	f8ad 300c 	strh.w	r3, [sp, #12]
        sb_ver_area.y1 += page->coords.y1;
24016e4e:	8a6b      	ldrh	r3, [r5, #18]
24016e50:	4419      	add	r1, r3
24016e52:	f8ad 100e 	strh.w	r1, [sp, #14]
        sb_ver_area.x2 += page->coords.x1;
24016e56:	f8bd 1010 	ldrh.w	r1, [sp, #16]
24016e5a:	440a      	add	r2, r1
24016e5c:	f8ad 2010 	strh.w	r2, [sp, #16]
        sb_ver_area.y2 += page->coords.y1;
24016e60:	f8bd 2012 	ldrh.w	r2, [sp, #18]
24016e64:	4413      	add	r3, r2
24016e66:	f8ad 3012 	strh.w	r3, [sp, #18]
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
24016e6a:	f894 3020 	ldrb.w	r3, [r4, #32]
24016e6e:	07da      	lsls	r2, r3, #31
24016e70:	d40b      	bmi.n	24016e8a <lv_page_design+0xba>
           (ext->scrlbar.ver_draw && _lv_area_is_on(&sb_ver_area, clip_area))) {
24016e72:	f894 3020 	ldrb.w	r3, [r4, #32]
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
24016e76:	079b      	lsls	r3, r3, #30
24016e78:	d504      	bpl.n	24016e84 <lv_page_design+0xb4>
           (ext->scrlbar.ver_draw && _lv_area_is_on(&sb_ver_area, clip_area))) {
24016e7a:	4631      	mov	r1, r6
24016e7c:	a803      	add	r0, sp, #12
24016e7e:	f7f8 fa49 	bl	2400f314 <_lv_area_is_on>
24016e82:	b940      	cbnz	r0, 24016e96 <lv_page_design+0xc6>
}
24016e84:	2000      	movs	r0, #0
24016e86:	b01a      	add	sp, #104	; 0x68
24016e88:	bd70      	pop	{r4, r5, r6, pc}
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
24016e8a:	4631      	mov	r1, r6
24016e8c:	a801      	add	r0, sp, #4
24016e8e:	f7f8 fa41 	bl	2400f314 <_lv_area_is_on>
24016e92:	2800      	cmp	r0, #0
24016e94:	d0ed      	beq.n	24016e72 <lv_page_design+0xa2>
            lv_draw_rect_dsc_init(&rect_dsc);
24016e96:	a805      	add	r0, sp, #20
24016e98:	f7f6 fde4 	bl	2400da64 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(page, LV_PAGE_PART_SCROLLBAR, &rect_dsc);
24016e9c:	4628      	mov	r0, r5
24016e9e:	aa05      	add	r2, sp, #20
24016ea0:	2101      	movs	r1, #1
24016ea2:	f7f2 f99c 	bl	240091de <lv_obj_init_draw_rect_dsc>
            if(ext->scrlbar.hor_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
24016ea6:	f894 3020 	ldrb.w	r3, [r4, #32]
24016eaa:	07d8      	lsls	r0, r3, #31
24016eac:	d40d      	bmi.n	24016eca <lv_page_design+0xfa>
            if(ext->scrlbar.ver_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
24016eae:	f894 3020 	ldrb.w	r3, [r4, #32]
24016eb2:	079a      	lsls	r2, r3, #30
24016eb4:	d5e6      	bpl.n	24016e84 <lv_page_design+0xb4>
24016eb6:	f3c3 0382 	ubfx	r3, r3, #2, #3
24016eba:	075b      	lsls	r3, r3, #29
24016ebc:	d4e2      	bmi.n	24016e84 <lv_page_design+0xb4>
                lv_draw_rect(&sb_ver_area, clip_area, &rect_dsc);
24016ebe:	aa05      	add	r2, sp, #20
24016ec0:	4631      	mov	r1, r6
24016ec2:	a803      	add	r0, sp, #12
24016ec4:	f7f6 fdf2 	bl	2400daac <lv_draw_rect>
24016ec8:	e7dc      	b.n	24016e84 <lv_page_design+0xb4>
            if(ext->scrlbar.hor_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
24016eca:	f3c3 0382 	ubfx	r3, r3, #2, #3
24016ece:	0759      	lsls	r1, r3, #29
24016ed0:	d4ed      	bmi.n	24016eae <lv_page_design+0xde>
                lv_draw_rect(&sb_hor_area, clip_area, &rect_dsc);
24016ed2:	aa05      	add	r2, sp, #20
24016ed4:	4631      	mov	r1, r6
24016ed6:	a801      	add	r0, sp, #4
24016ed8:	f7f6 fde8 	bl	2400daac <lv_draw_rect>
24016edc:	e7e7      	b.n	24016eae <lv_page_design+0xde>
24016ede:	bf00      	nop
24016ee0:	24035d10 	.word	0x24035d10

24016ee4 <scrlbar_refresh>:
{
24016ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016ee8:	ed2d 8b02 	vpush	{d8}
24016eec:	b091      	sub	sp, #68	; 0x44
24016eee:	4605      	mov	r5, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
24016ef0:	f7f2 f933 	bl	2400915a <lv_obj_get_ext_attr>
    lv_obj_t * scrl          = ext->scrl;
24016ef4:	6843      	ldr	r3, [r0, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
24016ef6:	4604      	mov	r4, r0
    lv_obj_t * scrl          = ext->scrl;
24016ef8:	ee08 3a10 	vmov	s16, r3
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
24016efc:	4618      	mov	r0, r3
24016efe:	f7f1 fb86 	bl	2400860e <lv_obj_get_width>
24016f02:	4680      	mov	r8, r0
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
24016f04:	ee18 0a10 	vmov	r0, s16
24016f08:	f7f1 fb87 	bl	2400861a <lv_obj_get_height>
24016f0c:	9003      	str	r0, [sp, #12]
    lv_coord_t obj_w  = lv_obj_get_width(page);
24016f0e:	4628      	mov	r0, r5
24016f10:	f7f1 fb7d 	bl	2400860e <lv_obj_get_width>
24016f14:	4681      	mov	r9, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
24016f16:	4628      	mov	r0, r5
24016f18:	f7f1 fb7f 	bl	2400861a <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
24016f1c:	2203      	movs	r2, #3
24016f1e:	2101      	movs	r1, #1
24016f20:	9000      	str	r0, [sp, #0]
24016f22:	4628      	mov	r0, r5
24016f24:	f7f1 fc30 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
24016f28:	2101      	movs	r1, #1
24016f2a:	9002      	str	r0, [sp, #8]
24016f2c:	4628      	mov	r0, r5
24016f2e:	f7ff ff13 	bl	24016d58 <lv_obj_get_style_pad_right>
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
24016f32:	2101      	movs	r1, #1
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
24016f34:	9005      	str	r0, [sp, #20]
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
24016f36:	4628      	mov	r0, r5
24016f38:	f7ff ff11 	bl	24016d5e <lv_obj_get_style_pad_bottom>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24016f3c:	2212      	movs	r2, #18
24016f3e:	2100      	movs	r1, #0
24016f40:	9006      	str	r0, [sp, #24]
24016f42:	4628      	mov	r0, r5
24016f44:	f7f1 fc20 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t bg_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
24016f48:	2100      	movs	r1, #0
24016f4a:	9001      	str	r0, [sp, #4]
24016f4c:	4628      	mov	r0, r5
24016f4e:	f7ff ff03 	bl	24016d58 <lv_obj_get_style_pad_right>
24016f52:	9007      	str	r0, [sp, #28]
    lv_style_int_t bg_top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
24016f54:	4628      	mov	r0, r5
24016f56:	f7ff ff2d 	bl	24016db4 <lv_obj_get_style_pad_top.constprop.0>
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
24016f5a:	2100      	movs	r1, #0
    lv_style_int_t bg_top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
24016f5c:	9008      	str	r0, [sp, #32]
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
24016f5e:	4628      	mov	r0, r5
24016f60:	f7ff fefd 	bl	24016d5e <lv_obj_get_style_pad_bottom>
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_OFF) return;
24016f64:	f894 3020 	ldrb.w	r3, [r4, #32]
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
24016f68:	9009      	str	r0, [sp, #36]	; 0x24
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_OFF) return;
24016f6a:	f013 021c 	ands.w	r2, r3, #28
24016f6e:	f000 80f9 	beq.w	24017164 <scrlbar_refresh+0x280>
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_ON) {
24016f72:	2a04      	cmp	r2, #4
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.hor_area);
24016f74:	f104 0a10 	add.w	sl, r4, #16
        ext->scrlbar.hor_draw = 1;
24016f78:	bf02      	ittt	eq
24016f7a:	f023 0303 	biceq.w	r3, r3, #3
24016f7e:	f043 0303 	orreq.w	r3, r3, #3
24016f82:	f884 3020 	strbeq.w	r3, [r4, #32]
    if(ext->scrlbar.hor_draw != 0) {
24016f86:	f894 3020 	ldrb.w	r3, [r4, #32]
24016f8a:	07d9      	lsls	r1, r3, #31
24016f8c:	d51d      	bpl.n	24016fca <scrlbar_refresh+0xe6>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.hor_area);
24016f8e:	4651      	mov	r1, sl
24016f90:	a80e      	add	r0, sp, #56	; 0x38
24016f92:	f7ff ff13 	bl	24016dbc <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
24016f96:	8a2a      	ldrh	r2, [r5, #16]
24016f98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        lv_obj_invalidate_area(page, &sb_area_tmp);
24016f9c:	4628      	mov	r0, r5
        sb_area_tmp.y1 += page->coords.y1;
24016f9e:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
24016fa2:	4413      	add	r3, r2
24016fa4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
24016fa8:	8a6b      	ldrh	r3, [r5, #18]
24016faa:	4419      	add	r1, r3
24016fac:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
24016fb0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
24016fb4:	440a      	add	r2, r1
        lv_obj_invalidate_area(page, &sb_area_tmp);
24016fb6:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.x2 += page->coords.x1;
24016fb8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
24016fbc:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
24016fc0:	4413      	add	r3, r2
24016fc2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
24016fc6:	f7f0 fffb 	bl	24007fc0 <lv_obj_invalidate_area>
    if(ext->scrlbar.ver_draw != 0) {
24016fca:	f894 3020 	ldrb.w	r3, [r4, #32]
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.ver_area);
24016fce:	f104 0b18 	add.w	fp, r4, #24
    if(ext->scrlbar.ver_draw != 0) {
24016fd2:	079a      	lsls	r2, r3, #30
24016fd4:	d51d      	bpl.n	24017012 <scrlbar_refresh+0x12e>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.ver_area);
24016fd6:	4659      	mov	r1, fp
24016fd8:	a80e      	add	r0, sp, #56	; 0x38
24016fda:	f7ff feef 	bl	24016dbc <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
24016fde:	8a2a      	ldrh	r2, [r5, #16]
24016fe0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        lv_obj_invalidate_area(page, &sb_area_tmp);
24016fe4:	4628      	mov	r0, r5
        sb_area_tmp.y1 += page->coords.y1;
24016fe6:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
24016fea:	4413      	add	r3, r2
24016fec:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
24016ff0:	8a6b      	ldrh	r3, [r5, #18]
24016ff2:	4419      	add	r1, r3
24016ff4:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
24016ff8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
24016ffc:	440a      	add	r2, r1
        lv_obj_invalidate_area(page, &sb_area_tmp);
24016ffe:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.x2 += page->coords.x1;
24017000:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
24017004:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
24017008:	4413      	add	r3, r2
2401700a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
2401700e:	f7f0 ffd7 	bl	24007fc0 <lv_obj_invalidate_area>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(sb_width, sb_right);
24017012:	9f05      	ldr	r7, [sp, #20]
24017014:	9b02      	ldr	r3, [sp, #8]
                         obj_h - sb_width - sb_bottom);
24017016:	9a06      	ldr	r2, [sp, #24]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(sb_width, sb_right);
24017018:	429f      	cmp	r7, r3
    if(scrl_w <= obj_w - bg_left - bg_right) {
2401701a:	9907      	ldr	r1, [sp, #28]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(sb_width, sb_right);
2401701c:	bfb8      	it	lt
2401701e:	461f      	movlt	r7, r3
        lv_area_set_width(&ext->scrlbar.hor_area, obj_w - 2 * sb_hor_pad);
24017020:	fa1f f389 	uxth.w	r3, r9
24017024:	9304      	str	r3, [sp, #16]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(sb_width, sb_right);
24017026:	b23e      	sxth	r6, r7
                         obj_h - sb_width - sb_bottom);
24017028:	f8bd 3000 	ldrh.w	r3, [sp]
        lv_area_set_width(&ext->scrlbar.hor_area, obj_w - 2 * sb_hor_pad);
2401702c:	b2bf      	uxth	r7, r7
                         obj_h - sb_width - sb_bottom);
2401702e:	930a      	str	r3, [sp, #40]	; 0x28
24017030:	f8bd 3008 	ldrh.w	r3, [sp, #8]
24017034:	930b      	str	r3, [sp, #44]	; 0x2c
24017036:	9b02      	ldr	r3, [sp, #8]
24017038:	fa12 f283 	uxtah	r2, r2, r3
2401703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2401703e:	1a9a      	subs	r2, r3, r2
    if(scrl_w <= obj_w - bg_left - bg_right) {
24017040:	9b01      	ldr	r3, [sp, #4]
24017042:	eba9 0303 	sub.w	r3, r9, r3
        _lv_area_set_pos(&ext->scrlbar.hor_area, sb_hor_pad,
24017046:	b212      	sxth	r2, r2
    if(scrl_w <= obj_w - bg_left - bg_right) {
24017048:	1a5b      	subs	r3, r3, r1
2401704a:	4598      	cmp	r8, r3
2401704c:	f300 808f 	bgt.w	2401716e <scrlbar_refresh+0x28a>
        lv_area_set_width(&ext->scrlbar.hor_area, obj_w - 2 * sb_hor_pad);
24017050:	9b04      	ldr	r3, [sp, #16]
24017052:	4650      	mov	r0, sl
24017054:	9207      	str	r2, [sp, #28]
24017056:	eba3 0147 	sub.w	r1, r3, r7, lsl #1
2401705a:	b209      	sxth	r1, r1
2401705c:	f7f8 f853 	bl	2400f106 <lv_area_set_width>
        _lv_area_set_pos(&ext->scrlbar.hor_area, sb_hor_pad,
24017060:	9a07      	ldr	r2, [sp, #28]
24017062:	4631      	mov	r1, r6
24017064:	4650      	mov	r0, sl
24017066:	f7f8 f858 	bl	2400f11a <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
2401706a:	f894 3020 	ldrb.w	r3, [r4, #32]
2401706e:	f003 0218 	and.w	r2, r3, #24
24017072:	2a08      	cmp	r2, #8
24017074:	d103      	bne.n	2401707e <scrlbar_refresh+0x19a>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.hor_draw = 0;
24017076:	f36f 0300 	bfc	r3, #0, #1
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO) ext->scrlbar.hor_draw = 1;
2401707a:	f884 3020 	strb.w	r3, [r4, #32]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(sb_width, sb_bottom);
2401707e:	9f06      	ldr	r7, [sp, #24]
24017080:	9b02      	ldr	r3, [sp, #8]
                         obj_w - sb_width - sb_right, sb_ver_pad);
24017082:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(sb_width, sb_bottom);
24017084:	429f      	cmp	r7, r3
24017086:	bfb8      	it	lt
24017088:	461f      	movlt	r7, r3
                         obj_w - sb_width - sb_right, sb_ver_pad);
2401708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2401708c:	4413      	add	r3, r2
    if(scrl_h <= obj_h - bg_top - bg_bottom) {
2401708e:	9a08      	ldr	r2, [sp, #32]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(sb_width, sb_bottom);
24017090:	b23e      	sxth	r6, r7
                         obj_w - sb_width - sb_right, sb_ver_pad);
24017092:	4698      	mov	r8, r3
24017094:	9b04      	ldr	r3, [sp, #16]
        lv_area_set_height(&ext->scrlbar.ver_area, obj_h - 2 * sb_ver_pad);
24017096:	b2bf      	uxth	r7, r7
                         obj_w - sb_width - sb_right, sb_ver_pad);
24017098:	eba3 0808 	sub.w	r8, r3, r8
    if(scrl_h <= obj_h - bg_top - bg_bottom) {
2401709c:	9b00      	ldr	r3, [sp, #0]
2401709e:	1a9b      	subs	r3, r3, r2
240170a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
        _lv_area_set_pos(&ext->scrlbar.ver_area,
240170a2:	fa0f f888 	sxth.w	r8, r8
    if(scrl_h <= obj_h - bg_top - bg_bottom) {
240170a6:	1a9b      	subs	r3, r3, r2
240170a8:	9a03      	ldr	r2, [sp, #12]
240170aa:	429a      	cmp	r2, r3
240170ac:	f300 80b5 	bgt.w	2401721a <scrlbar_refresh+0x336>
        lv_area_set_height(&ext->scrlbar.ver_area, obj_h - 2 * sb_ver_pad);
240170b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240170b2:	4658      	mov	r0, fp
240170b4:	eba3 0147 	sub.w	r1, r3, r7, lsl #1
240170b8:	b209      	sxth	r1, r1
240170ba:	f7f8 f829 	bl	2400f110 <lv_area_set_height>
        _lv_area_set_pos(&ext->scrlbar.ver_area,
240170be:	4632      	mov	r2, r6
240170c0:	4641      	mov	r1, r8
240170c2:	4658      	mov	r0, fp
240170c4:	f7f8 f829 	bl	2400f11a <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
240170c8:	f894 3020 	ldrb.w	r3, [r4, #32]
240170cc:	f003 0218 	and.w	r2, r3, #24
240170d0:	2a08      	cmp	r2, #8
240170d2:	d103      	bne.n	240170dc <scrlbar_refresh+0x1f8>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.ver_draw = 0;
240170d4:	f36f 0341 	bfc	r3, #1, #1
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO) ext->scrlbar.ver_draw = 1;
240170d8:	f884 3020 	strb.w	r3, [r4, #32]
    if(ext->scrlbar.hor_draw != 0) {
240170dc:	f894 3020 	ldrb.w	r3, [r4, #32]
240170e0:	07da      	lsls	r2, r3, #31
240170e2:	d51d      	bpl.n	24017120 <scrlbar_refresh+0x23c>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.hor_area);
240170e4:	4651      	mov	r1, sl
240170e6:	a80e      	add	r0, sp, #56	; 0x38
240170e8:	f7ff fe68 	bl	24016dbc <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
240170ec:	8a2a      	ldrh	r2, [r5, #16]
240170ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        lv_obj_invalidate_area(page, &sb_area_tmp);
240170f2:	4628      	mov	r0, r5
        sb_area_tmp.y1 += page->coords.y1;
240170f4:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
240170f8:	4413      	add	r3, r2
240170fa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
240170fe:	8a6b      	ldrh	r3, [r5, #18]
24017100:	4419      	add	r1, r3
24017102:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
24017106:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
2401710a:	440a      	add	r2, r1
        lv_obj_invalidate_area(page, &sb_area_tmp);
2401710c:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.x2 += page->coords.x1;
2401710e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
24017112:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
24017116:	4413      	add	r3, r2
24017118:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
2401711c:	f7f0 ff50 	bl	24007fc0 <lv_obj_invalidate_area>
    if(ext->scrlbar.ver_draw != 0) {
24017120:	f894 3020 	ldrb.w	r3, [r4, #32]
24017124:	079b      	lsls	r3, r3, #30
24017126:	d51d      	bpl.n	24017164 <scrlbar_refresh+0x280>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.ver_area);
24017128:	4659      	mov	r1, fp
2401712a:	a80e      	add	r0, sp, #56	; 0x38
2401712c:	f7ff fe46 	bl	24016dbc <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
24017130:	8a2a      	ldrh	r2, [r5, #16]
24017132:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        lv_obj_invalidate_area(page, &sb_area_tmp);
24017136:	4628      	mov	r0, r5
        sb_area_tmp.y1 += page->coords.y1;
24017138:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
2401713c:	4413      	add	r3, r2
2401713e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
24017142:	8a6b      	ldrh	r3, [r5, #18]
24017144:	4419      	add	r1, r3
24017146:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
2401714a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
2401714e:	440a      	add	r2, r1
        lv_obj_invalidate_area(page, &sb_area_tmp);
24017150:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.x2 += page->coords.x1;
24017152:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
24017156:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
2401715a:	4413      	add	r3, r2
2401715c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
24017160:	f7f0 ff2e 	bl	24007fc0 <lv_obj_invalidate_area>
}
24017164:	b011      	add	sp, #68	; 0x44
24017166:	ecbd 8b02 	vpop	{d8}
2401716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + bg_left + bg_right);
2401716e:	0073      	lsls	r3, r6, #1
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
24017170:	4650      	mov	r0, sl
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + bg_left + bg_right);
24017172:	eba9 0646 	sub.w	r6, r9, r6, lsl #1
24017176:	920d      	str	r2, [sp, #52]	; 0x34
24017178:	930c      	str	r3, [sp, #48]	; 0x30
2401717a:	9b01      	ldr	r3, [sp, #4]
2401717c:	fb09 f606 	mul.w	r6, r9, r6
24017180:	4498      	add	r8, r3
24017182:	9b07      	ldr	r3, [sp, #28]
24017184:	4498      	add	r8, r3
24017186:	fb96 f6f8 	sdiv	r6, r6, r8
2401718a:	b236      	sxth	r6, r6
                         (scrl_w + bg_left + bg_right - obj_w),
2401718c:	eba8 0809 	sub.w	r8, r8, r9
24017190:	2e10      	cmp	r6, #16
24017192:	bfb8      	it	lt
24017194:	2610      	movlt	r6, #16
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
24017196:	4631      	mov	r1, r6
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
24017198:	eba9 0606 	sub.w	r6, r9, r6
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
2401719c:	f7f7 ffb3 	bl	2400f106 <lv_area_set_width>
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
240171a0:	ee18 0a10 	vmov	r0, s16
240171a4:	f7f1 f891 	bl	240082ca <lv_obj_get_x>
240171a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        _lv_area_set_pos(&ext->scrlbar.hor_area,
240171aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
240171ac:	1af6      	subs	r6, r6, r3
240171ae:	9b01      	ldr	r3, [sp, #4]
240171b0:	1a18      	subs	r0, r3, r0
240171b2:	4346      	muls	r6, r0
        _lv_area_set_pos(&ext->scrlbar.hor_area,
240171b4:	4650      	mov	r0, sl
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
240171b6:	fb96 f6f8 	sdiv	r6, r6, r8
                         sb_hor_pad +
240171ba:	19b9      	adds	r1, r7, r6
        _lv_area_set_pos(&ext->scrlbar.hor_area,
240171bc:	b209      	sxth	r1, r1
240171be:	f7f7 ffac 	bl	2400f11a <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO) ext->scrlbar.hor_draw = 1;
240171c2:	f894 3020 	ldrb.w	r3, [r4, #32]
240171c6:	f003 021c 	and.w	r2, r3, #28
240171ca:	2a0c      	cmp	r2, #12
240171cc:	d102      	bne.n	240171d4 <scrlbar_refresh+0x2f0>
240171ce:	f043 0301 	orr.w	r3, r3, #1
240171d2:	e752      	b.n	2401707a <scrlbar_refresh+0x196>
        else if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
240171d4:	2a08      	cmp	r2, #8
240171d6:	f47f af52 	bne.w	2401707e <scrlbar_refresh+0x19a>
            lv_indev_t * indev = lv_indev_get_next(NULL);
240171da:	2000      	movs	r0, #0
                indev = lv_indev_get_next(indev);
240171dc:	f7f7 ff24 	bl	2400f028 <lv_indev_get_next>
240171e0:	4606      	mov	r6, r0
            while(indev) {
240171e2:	2800      	cmp	r0, #0
240171e4:	f43f af4b 	beq.w	2401707e <scrlbar_refresh+0x19a>
                if(indev->driver.type == LV_INDEV_TYPE_POINTER && (indev->proc.types.pointer.drag_dir & LV_DRAG_DIR_HOR)) {
240171e8:	7833      	ldrb	r3, [r6, #0]
240171ea:	2b01      	cmp	r3, #1
240171ec:	d113      	bne.n	24017216 <scrlbar_refresh+0x332>
240171ee:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
240171f2:	075b      	lsls	r3, r3, #29
240171f4:	d50f      	bpl.n	24017216 <scrlbar_refresh+0x332>
                    lv_obj_t * drag_obj = indev->proc.types.pointer.act_obj;
240171f6:	6b70      	ldr	r0, [r6, #52]	; 0x34
                    while(drag_obj && drag_obj->drag_parent) drag_obj = lv_obj_get_parent(drag_obj);
240171f8:	b168      	cbz	r0, 24017216 <scrlbar_refresh+0x332>
240171fa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
240171fe:	071f      	lsls	r7, r3, #28
24017200:	d406      	bmi.n	24017210 <scrlbar_refresh+0x32c>
                    if(drag_obj && drag_obj == scrl) {
24017202:	ee18 3a10 	vmov	r3, s16
24017206:	4298      	cmp	r0, r3
24017208:	d105      	bne.n	24017216 <scrlbar_refresh+0x332>
                        ext->scrlbar.hor_draw = 1;
2401720a:	f894 3020 	ldrb.w	r3, [r4, #32]
2401720e:	e7de      	b.n	240171ce <scrlbar_refresh+0x2ea>
                    while(drag_obj && drag_obj->drag_parent) drag_obj = lv_obj_get_parent(drag_obj);
24017210:	f7f1 f82c 	bl	2400826c <lv_obj_get_parent>
24017214:	e7f0      	b.n	240171f8 <scrlbar_refresh+0x314>
                indev = lv_indev_get_next(indev);
24017216:	4630      	mov	r0, r6
24017218:	e7e0      	b.n	240171dc <scrlbar_refresh+0x2f8>
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + bg_top + bg_bottom);
2401721a:	0073      	lsls	r3, r6, #1
2401721c:	9a08      	ldr	r2, [sp, #32]
        lv_area_set_height(&ext->scrlbar.ver_area, size_tmp);
2401721e:	4658      	mov	r0, fp
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + bg_top + bg_bottom);
24017220:	9302      	str	r3, [sp, #8]
24017222:	9b03      	ldr	r3, [sp, #12]
24017224:	4413      	add	r3, r2
24017226:	4699      	mov	r9, r3
24017228:	9b09      	ldr	r3, [sp, #36]	; 0x24
2401722a:	4499      	add	r9, r3
2401722c:	9b00      	ldr	r3, [sp, #0]
2401722e:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
24017232:	435e      	muls	r6, r3
24017234:	fb96 f6f9 	sdiv	r6, r6, r9
24017238:	b236      	sxth	r6, r6
2401723a:	2e10      	cmp	r6, #16
2401723c:	bfb8      	it	lt
2401723e:	2610      	movlt	r6, #16
        lv_area_set_height(&ext->scrlbar.ver_area, size_tmp);
24017240:	4631      	mov	r1, r6
24017242:	f7f7 ff65 	bl	2400f110 <lv_area_set_height>
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
24017246:	ee18 0a10 	vmov	r0, s16
2401724a:	f7f1 f851 	bl	240082f0 <lv_obj_get_y>
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
2401724e:	9b00      	ldr	r3, [sp, #0]
        _lv_area_set_pos(&ext->scrlbar.ver_area,
24017250:	4641      	mov	r1, r8
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
24017252:	1b9e      	subs	r6, r3, r6
24017254:	9b02      	ldr	r3, [sp, #8]
24017256:	1af6      	subs	r6, r6, r3
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
24017258:	9b01      	ldr	r3, [sp, #4]
2401725a:	1a18      	subs	r0, r3, r0
                         (scrl_h + bg_top + bg_bottom - obj_h));
2401725c:	9b00      	ldr	r3, [sp, #0]
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
2401725e:	4346      	muls	r6, r0
                         (scrl_h + bg_top + bg_bottom - obj_h));
24017260:	eba9 0903 	sub.w	r9, r9, r3
        _lv_area_set_pos(&ext->scrlbar.ver_area,
24017264:	4658      	mov	r0, fp
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
24017266:	fb96 f6f9 	sdiv	r6, r6, r9
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
2401726a:	19ba      	adds	r2, r7, r6
        _lv_area_set_pos(&ext->scrlbar.ver_area,
2401726c:	b212      	sxth	r2, r2
2401726e:	f7f7 ff54 	bl	2400f11a <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO) ext->scrlbar.ver_draw = 1;
24017272:	f894 3020 	ldrb.w	r3, [r4, #32]
24017276:	f003 021c 	and.w	r2, r3, #28
2401727a:	2a0c      	cmp	r2, #12
2401727c:	d102      	bne.n	24017284 <scrlbar_refresh+0x3a0>
2401727e:	f043 0302 	orr.w	r3, r3, #2
24017282:	e729      	b.n	240170d8 <scrlbar_refresh+0x1f4>
        else if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
24017284:	2a08      	cmp	r2, #8
24017286:	f47f af29 	bne.w	240170dc <scrlbar_refresh+0x1f8>
            lv_indev_t * indev = lv_indev_get_next(NULL);
2401728a:	2000      	movs	r0, #0
                indev = lv_indev_get_next(indev);
2401728c:	f7f7 fecc 	bl	2400f028 <lv_indev_get_next>
24017290:	4606      	mov	r6, r0
            while(indev) {
24017292:	2800      	cmp	r0, #0
24017294:	f43f af22 	beq.w	240170dc <scrlbar_refresh+0x1f8>
                if(indev->driver.type == LV_INDEV_TYPE_POINTER && (indev->proc.types.pointer.drag_dir & LV_DRAG_DIR_VER)) {
24017298:	7833      	ldrb	r3, [r6, #0]
2401729a:	2b01      	cmp	r3, #1
2401729c:	d115      	bne.n	240172ca <scrlbar_refresh+0x3e6>
2401729e:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
240172a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
240172a6:	0798      	lsls	r0, r3, #30
240172a8:	d50f      	bpl.n	240172ca <scrlbar_refresh+0x3e6>
                    lv_obj_t * drag_obj = indev->proc.types.pointer.act_obj;
240172aa:	6b70      	ldr	r0, [r6, #52]	; 0x34
                    while(drag_obj && drag_obj->drag_parent) drag_obj = lv_obj_get_parent(drag_obj);
240172ac:	b168      	cbz	r0, 240172ca <scrlbar_refresh+0x3e6>
240172ae:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
240172b2:	0719      	lsls	r1, r3, #28
240172b4:	d406      	bmi.n	240172c4 <scrlbar_refresh+0x3e0>
                    if(drag_obj && drag_obj == scrl) {
240172b6:	ee18 3a10 	vmov	r3, s16
240172ba:	4298      	cmp	r0, r3
240172bc:	d105      	bne.n	240172ca <scrlbar_refresh+0x3e6>
                        ext->scrlbar.ver_draw = 1;
240172be:	f894 3020 	ldrb.w	r3, [r4, #32]
240172c2:	e7dc      	b.n	2401727e <scrlbar_refresh+0x39a>
                    while(drag_obj && drag_obj->drag_parent) drag_obj = lv_obj_get_parent(drag_obj);
240172c4:	f7f0 ffd2 	bl	2400826c <lv_obj_get_parent>
240172c8:	e7f0      	b.n	240172ac <scrlbar_refresh+0x3c8>
                indev = lv_indev_get_next(indev);
240172ca:	4630      	mov	r0, r6
240172cc:	e7de      	b.n	2401728c <scrlbar_refresh+0x3a8>

240172ce <lv_page_set_scrollbar_mode>:
{
240172ce:	b538      	push	{r3, r4, r5, lr}
240172d0:	460c      	mov	r4, r1
240172d2:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
240172d4:	f7f1 ff41 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->scrlbar.mode == sb_mode) return;
240172d8:	f890 3020 	ldrb.w	r3, [r0, #32]
240172dc:	f3c3 0382 	ubfx	r3, r3, #2, #3
240172e0:	42a3      	cmp	r3, r4
240172e2:	d01f      	beq.n	24017324 <lv_page_set_scrollbar_mode+0x56>
    if(sb_mode == LV_SCROLLBAR_MODE_HIDE)
240172e4:	2c04      	cmp	r4, #4
240172e6:	d111      	bne.n	2401730c <lv_page_set_scrollbar_mode+0x3e>
        ext->scrlbar.mode |= LV_SCROLLBAR_MODE_HIDE; /*Set the hidden flag*/
240172e8:	f043 0104 	orr.w	r1, r3, #4
    ext->scrlbar.hor_draw = 0;
240172ec:	f890 3020 	ldrb.w	r3, [r0, #32]
240172f0:	f023 031f 	bic.w	r3, r3, #31
240172f4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
240172f8:	f880 3020 	strb.w	r3, [r0, #32]
    scrlbar_refresh(page);
240172fc:	4628      	mov	r0, r5
240172fe:	f7ff fdf1 	bl	24016ee4 <scrlbar_refresh>
    lv_obj_invalidate(page);
24017302:	4628      	mov	r0, r5
}
24017304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
24017308:	f7f0 be6c 	b.w	24007fe4 <lv_obj_invalidate>
    else if(sb_mode == LV_SCROLLBAR_MODE_UNHIDE)
2401730c:	2c08      	cmp	r4, #8
2401730e:	d102      	bne.n	24017316 <lv_page_set_scrollbar_mode+0x48>
        ext->scrlbar.mode &= (~LV_SCROLLBAR_MODE_HIDE); /*Clear the hidden flag*/
24017310:	f003 0103 	and.w	r1, r3, #3
24017314:	e7ea      	b.n	240172ec <lv_page_set_scrollbar_mode+0x1e>
        if(ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) sb_mode |= LV_SCROLLBAR_MODE_HIDE;
24017316:	075b      	lsls	r3, r3, #29
24017318:	bf48      	it	mi
2401731a:	f044 0404 	orrmi.w	r4, r4, #4
        ext->scrlbar.mode = sb_mode;
2401731e:	f004 0107 	and.w	r1, r4, #7
24017322:	e7e3      	b.n	240172ec <lv_page_set_scrollbar_mode+0x1e>
}
24017324:	bd38      	pop	{r3, r4, r5, pc}
	...

24017328 <lv_page_create>:
{
24017328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
2401732c:	460e      	mov	r6, r1
    lv_obj_t * page = lv_cont_create(par, copy);
2401732e:	f7fd fc63 	bl	24014bf8 <lv_cont_create>
    if(page == NULL) return NULL;
24017332:	4605      	mov	r5, r0
24017334:	b1b8      	cbz	r0, 24017366 <lv_page_create+0x3e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(page);
24017336:	4c47      	ldr	r4, [pc, #284]	; (24017454 <lv_page_create+0x12c>)
24017338:	6823      	ldr	r3, [r4, #0]
2401733a:	b913      	cbnz	r3, 24017342 <lv_page_create+0x1a>
2401733c:	f7f1 ff09 	bl	24009152 <lv_obj_get_signal_cb>
24017340:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(page);
24017342:	4c45      	ldr	r4, [pc, #276]	; (24017458 <lv_page_create+0x130>)
24017344:	6823      	ldr	r3, [r4, #0]
24017346:	b91b      	cbnz	r3, 24017350 <lv_page_create+0x28>
24017348:	4628      	mov	r0, r5
2401734a:	f7f1 ff04 	bl	24009156 <lv_obj_get_design_cb>
2401734e:	6020      	str	r0, [r4, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(page, sizeof(lv_page_ext_t));
24017350:	212c      	movs	r1, #44	; 0x2c
24017352:	4628      	mov	r0, r5
24017354:	f7f0 fd5a 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24017358:	2700      	movs	r7, #0
2401735a:	4604      	mov	r4, r0
2401735c:	b938      	cbnz	r0, 2401736e <lv_page_create+0x46>
        lv_obj_del(page);
2401735e:	4628      	mov	r0, r5
        return NULL;
24017360:	4625      	mov	r5, r4
        lv_obj_del(page);
24017362:	f7f0 ff59 	bl	24008218 <lv_obj_del>
}
24017366:	4628      	mov	r0, r5
24017368:	b002      	add	sp, #8
2401736a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_list_init(&ext->scrlbar.style);
2401736e:	f100 0808 	add.w	r8, r0, #8
    ext->scrl        = NULL;
24017372:	6047      	str	r7, [r0, #4]
    lv_style_list_init(&ext->scrlbar.style);
24017374:	4640      	mov	r0, r8
24017376:	f7f3 f925 	bl	2400a5c4 <lv_style_list_init>
    ext->scrlbar.hor_draw = 0;
2401737a:	f894 3020 	ldrb.w	r3, [r4, #32]
    ext->scroll_prop_obj = NULL;
2401737e:	6267      	str	r7, [r4, #36]	; 0x24
    ext->scrlbar.hor_draw = 0;
24017380:	f023 031f 	bic.w	r3, r3, #31
24017384:	f043 030c 	orr.w	r3, r3, #12
24017388:	f884 3020 	strb.w	r3, [r4, #32]
    ext->scroll_prop    = 0;
2401738c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
24017390:	f367 0300 	bfi	r3, r7, #0, #1
24017394:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(copy == NULL) {
24017398:	2e00      	cmp	r6, #0
2401739a:	d139      	bne.n	24017410 <lv_page_create+0xe8>
        ext->scrl = lv_cont_create(page, NULL);
2401739c:	4631      	mov	r1, r6
2401739e:	4628      	mov	r0, r5
240173a0:	f7fd fc2a 	bl	24014bf8 <lv_cont_create>
        lv_obj_set_focus_parent(ext->scrl, true);
240173a4:	2101      	movs	r1, #1
        ext->scrl = lv_cont_create(page, NULL);
240173a6:	6060      	str	r0, [r4, #4]
        lv_obj_set_focus_parent(ext->scrl, true);
240173a8:	f7f0 fcbc 	bl	24007d24 <lv_obj_set_focus_parent>
        lv_obj_set_drag(ext->scrl, true);
240173ac:	2101      	movs	r1, #1
240173ae:	6860      	ldr	r0, [r4, #4]
240173b0:	f7f0 fc8a 	bl	24007cc8 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
240173b4:	2101      	movs	r1, #1
240173b6:	6860      	ldr	r0, [r4, #4]
240173b8:	f7f0 fca6 	bl	24007d08 <lv_obj_set_drag_throw>
        lv_obj_add_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
240173bc:	2112      	movs	r1, #18
240173be:	6860      	ldr	r0, [r4, #4]
240173c0:	f7f0 fcb7 	bl	24007d32 <lv_obj_add_protect>
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
240173c4:	2303      	movs	r3, #3
240173c6:	4619      	mov	r1, r3
240173c8:	9300      	str	r3, [sp, #0]
240173ca:	461a      	mov	r2, r3
240173cc:	6860      	ldr	r0, [r4, #4]
240173ce:	f7fd fc8a 	bl	24014ce6 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
240173d2:	4922      	ldr	r1, [pc, #136]	; (2401745c <lv_page_create+0x134>)
240173d4:	6860      	ldr	r0, [r4, #4]
240173d6:	f7f0 fcb9 	bl	24007d4c <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
240173da:	4921      	ldr	r1, [pc, #132]	; (24017460 <lv_page_create+0x138>)
240173dc:	6860      	ldr	r0, [r4, #4]
240173de:	f7f0 fd0b 	bl	24007df8 <lv_obj_set_signal_cb>
        lv_obj_set_signal_cb(page, lv_page_signal);
240173e2:	4920      	ldr	r1, [pc, #128]	; (24017464 <lv_page_create+0x13c>)
240173e4:	4628      	mov	r0, r5
240173e6:	f7f0 fd07 	bl	24007df8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(page, lv_page_design);
240173ea:	491f      	ldr	r1, [pc, #124]	; (24017468 <lv_page_create+0x140>)
240173ec:	4628      	mov	r0, r5
240173ee:	f7f0 fd0b 	bl	24007e08 <lv_obj_set_design_cb>
        lv_page_set_scrollbar_mode(page, ext->scrlbar.mode);
240173f2:	f894 1020 	ldrb.w	r1, [r4, #32]
240173f6:	4628      	mov	r0, r5
240173f8:	f3c1 0182 	ubfx	r1, r1, #2, #3
240173fc:	f7ff ff67 	bl	240172ce <lv_page_set_scrollbar_mode>
        lv_theme_apply(page, LV_THEME_PAGE);
24017400:	210b      	movs	r1, #11
24017402:	4628      	mov	r0, r5
24017404:	f7f9 fd5e 	bl	24010ec4 <lv_theme_apply>
    scrlbar_refresh(page);
24017408:	4628      	mov	r0, r5
2401740a:	f7ff fd6b 	bl	24016ee4 <scrlbar_refresh>
    return page;
2401740e:	e7aa      	b.n	24017366 <lv_page_create+0x3e>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24017410:	4630      	mov	r0, r6
24017412:	f7f1 fea2 	bl	2400915a <lv_obj_get_ext_attr>
24017416:	4606      	mov	r6, r0
        ext->scrl                = lv_cont_create(page, copy_ext->scrl);
24017418:	6841      	ldr	r1, [r0, #4]
2401741a:	4628      	mov	r0, r5
2401741c:	f7fd fbec 	bl	24014bf8 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
24017420:	490f      	ldr	r1, [pc, #60]	; (24017460 <lv_page_create+0x138>)
        ext->scrl                = lv_cont_create(page, copy_ext->scrl);
24017422:	6060      	str	r0, [r4, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
24017424:	f7f0 fce8 	bl	24007df8 <lv_obj_set_signal_cb>
        lv_style_list_copy(&ext->scrlbar.style, &copy_ext->scrlbar.style);
24017428:	f106 0108 	add.w	r1, r6, #8
2401742c:	4640      	mov	r0, r8
2401742e:	f7f3 fb4b 	bl	2400aac8 <lv_style_list_copy>
        lv_obj_set_signal_cb(page, lv_page_signal);
24017432:	4628      	mov	r0, r5
24017434:	490b      	ldr	r1, [pc, #44]	; (24017464 <lv_page_create+0x13c>)
24017436:	f7f0 fcdf 	bl	24007df8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(page, lv_page_design);
2401743a:	4628      	mov	r0, r5
2401743c:	490a      	ldr	r1, [pc, #40]	; (24017468 <lv_page_create+0x140>)
2401743e:	f7f0 fce3 	bl	24007e08 <lv_obj_set_design_cb>
        lv_page_set_scrollbar_mode(page, copy_ext->scrlbar.mode);
24017442:	f896 1020 	ldrb.w	r1, [r6, #32]
24017446:	4628      	mov	r0, r5
24017448:	f3c1 0182 	ubfx	r1, r1, #2, #3
2401744c:	f7ff ff3f 	bl	240172ce <lv_page_set_scrollbar_mode>
24017450:	e7da      	b.n	24017408 <lv_page_create+0xe0>
24017452:	bf00      	nop
24017454:	24035d14 	.word	0x24035d14
24017458:	24035d10 	.word	0x24035d10
2401745c:	24016d93 	.word	0x24016d93
24017460:	24017941 	.word	0x24017941
24017464:	240174a1 	.word	0x240174a1
24017468:	24016dd1 	.word	0x24016dd1

2401746c <lv_page_set_scroll_propagation>:
{
2401746c:	b538      	push	{r3, r4, r5, lr}
2401746e:	460d      	mov	r5, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
24017470:	f7f1 fe73 	bl	2400915a <lv_obj_get_ext_attr>
24017474:	4604      	mov	r4, r0
    if(en) lv_obj_set_drag_dir(ext->scrl, LV_DRAG_DIR_ONE);
24017476:	b155      	cbz	r5, 2401748e <lv_page_set_scroll_propagation+0x22>
24017478:	2104      	movs	r1, #4
    else lv_obj_set_drag_dir(ext->scrl, LV_DRAG_DIR_BOTH);
2401747a:	6860      	ldr	r0, [r4, #4]
2401747c:	f7f0 fc32 	bl	24007ce4 <lv_obj_set_drag_dir>
    ext->scroll_prop    = en ? 1 : 0;
24017480:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
24017484:	f365 0300 	bfi	r3, r5, #0, #1
24017488:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
2401748c:	bd38      	pop	{r3, r4, r5, pc}
    else lv_obj_set_drag_dir(ext->scrl, LV_DRAG_DIR_BOTH);
2401748e:	2103      	movs	r1, #3
24017490:	e7f3      	b.n	2401747a <lv_page_set_scroll_propagation+0xe>

24017492 <lv_page_set_edge_flash>:
}
24017492:	4770      	bx	lr

24017494 <lv_page_get_scrollable>:
{
24017494:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
24017496:	f7f1 fe60 	bl	2400915a <lv_obj_get_ext_attr>
}
2401749a:	6840      	ldr	r0, [r0, #4]
2401749c:	bd08      	pop	{r3, pc}
	...

240174a0 <lv_page_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
240174a0:	2908      	cmp	r1, #8
{
240174a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240174a6:	4604      	mov	r4, r0
240174a8:	b085      	sub	sp, #20
240174aa:	460f      	mov	r7, r1
240174ac:	4616      	mov	r6, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
240174ae:	d124      	bne.n	240174fa <lv_page_signal+0x5a>
        info->result = lv_page_get_style(page, info->part);
240174b0:	7815      	ldrb	r5, [r2, #0]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
240174b2:	f7f1 fe52 	bl	2400915a <lv_obj_get_ext_attr>
    switch(part) {
240174b6:	2d01      	cmp	r5, #1
240174b8:	d01d      	beq.n	240174f6 <lv_page_signal+0x56>
240174ba:	2d40      	cmp	r5, #64	; 0x40
240174bc:	d016      	beq.n	240174ec <lv_page_signal+0x4c>
240174be:	b155      	cbz	r5, 240174d6 <lv_page_signal+0x36>
        info->result = lv_page_get_style(page, info->part);
240174c0:	2300      	movs	r3, #0
240174c2:	6073      	str	r3, [r6, #4]
        else return ancestor_signal(page, sign, param);
240174c4:	4b94      	ldr	r3, [pc, #592]	; (24017718 <lv_page_signal+0x278>)
240174c6:	4632      	mov	r2, r6
240174c8:	2108      	movs	r1, #8
240174ca:	4620      	mov	r0, r4
240174cc:	681b      	ldr	r3, [r3, #0]
}
240174ce:	b005      	add	sp, #20
240174d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else return ancestor_signal(page, sign, param);
240174d4:	4718      	bx	r3
            style_dsc_p = &page->style_list;
240174d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
        info->result = lv_page_get_style(page, info->part);
240174da:	6070      	str	r0, [r6, #4]
        if(info->result != NULL) return LV_RES_OK;
240174dc:	2800      	cmp	r0, #0
240174de:	d0f1      	beq.n	240174c4 <lv_page_signal+0x24>
        return LV_RES_OK;
240174e0:	f04f 0801 	mov.w	r8, #1
}
240174e4:	4640      	mov	r0, r8
240174e6:	b005      	add	sp, #20
240174e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            style_dsc_p = lv_obj_get_style_list(ext->scrl, LV_CONT_PART_MAIN);
240174ec:	2100      	movs	r1, #0
240174ee:	6840      	ldr	r0, [r0, #4]
240174f0:	f7f1 f89b 	bl	2400862a <lv_obj_get_style_list>
            break;
240174f4:	e7f1      	b.n	240174da <lv_page_signal+0x3a>
            style_dsc_p = &ext->scrlbar.style;
240174f6:	3008      	adds	r0, #8
            break;
240174f8:	e7ef      	b.n	240174da <lv_page_signal+0x3a>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
240174fa:	2909      	cmp	r1, #9
240174fc:	d109      	bne.n	24017512 <lv_page_signal+0x72>
        if(info->part == LV_PAGE_PART_SCROLLABLE) info->result = lv_obj_get_state(lv_page_get_scrollable(page),
240174fe:	7811      	ldrb	r1, [r2, #0]
24017500:	2940      	cmp	r1, #64	; 0x40
24017502:	d102      	bne.n	2401750a <lv_page_signal+0x6a>
24017504:	f7ff ffc6 	bl	24017494 <lv_page_get_scrollable>
24017508:	2100      	movs	r1, #0
        else info->result = lv_obj_get_state(page, info->part);
2401750a:	f7f1 f8f5 	bl	240086f8 <lv_obj_get_state>
2401750e:	7070      	strb	r0, [r6, #1]
24017510:	e7e6      	b.n	240174e0 <lv_page_signal+0x40>
    res = ancestor_signal(page, sign, param);
24017512:	4b81      	ldr	r3, [pc, #516]	; (24017718 <lv_page_signal+0x278>)
24017514:	681b      	ldr	r3, [r3, #0]
24017516:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24017518:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
2401751a:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
2401751c:	d1e2      	bne.n	240174e4 <lv_page_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
2401751e:	2f07      	cmp	r7, #7
24017520:	d106      	bne.n	24017530 <lv_page_signal+0x90>
24017522:	497e      	ldr	r1, [pc, #504]	; (2401771c <lv_page_signal+0x27c>)
24017524:	4630      	mov	r0, r6
}
24017526:	b005      	add	sp, #20
24017528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
2401752c:	f7f1 be49 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
24017530:	4620      	mov	r0, r4
24017532:	f7f1 fe12 	bl	2400915a <lv_obj_get_ext_attr>
24017536:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
24017538:	b99f      	cbnz	r7, 24017562 <lv_page_signal+0xc2>
        if(ext->scroll_prop) {
2401753a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
2401753e:	07d9      	lsls	r1, r3, #31
24017540:	d50a      	bpl.n	24017558 <lv_page_signal+0xb8>
            lv_obj_t * parent_page = lv_obj_get_parent(lv_obj_get_parent(page));
24017542:	4620      	mov	r0, r4
24017544:	f7f0 fe92 	bl	2400826c <lv_obj_get_parent>
24017548:	f7f0 fe90 	bl	2400826c <lv_obj_get_parent>
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(parent_page);
2401754c:	f7f1 fe05 	bl	2400915a <lv_obj_get_ext_attr>
            if(parent_ext->scroll_prop_obj == page) {
24017550:	6a43      	ldr	r3, [r0, #36]	; 0x24
24017552:	42a3      	cmp	r3, r4
                parent_ext->scroll_prop_obj = NULL;
24017554:	bf08      	it	eq
24017556:	6247      	streq	r7, [r0, #36]	; 0x24
        lv_obj_clean_style_list(page, LV_PAGE_PART_SCROLLBAR);
24017558:	2101      	movs	r1, #1
2401755a:	4620      	mov	r0, r4
2401755c:	f7f1 f877 	bl	2400864e <lv_obj_clean_style_list>
24017560:	e7c0      	b.n	240174e4 <lv_page_signal+0x44>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
24017562:	3f01      	subs	r7, #1
24017564:	2f05      	cmp	r7, #5
24017566:	d8bd      	bhi.n	240174e4 <lv_page_signal+0x44>
24017568:	a301      	add	r3, pc, #4	; (adr r3, 24017570 <lv_page_signal+0xd0>)
2401756a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
2401756e:	bf00      	nop
24017570:	24017589 	.word	0x24017589
24017574:	240176c9 	.word	0x240176c9
24017578:	240174e5 	.word	0x240174e5
2401757c:	24017693 	.word	0x24017693
24017580:	240174e5 	.word	0x240174e5
24017584:	240176c1 	.word	0x240176c1
        if(ext->scrl == NULL) return LV_RES_OK;
24017588:	6843      	ldr	r3, [r0, #4]
2401758a:	2b00      	cmp	r3, #0
2401758c:	d0a8      	beq.n	240174e0 <lv_page_signal+0x40>
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
    return lv_cont_get_fit_left(lv_page_get_scrollable(page));
2401758e:	4620      	mov	r0, r4
24017590:	f7ff ff80 	bl	24017494 <lv_page_get_scrollable>
24017594:	f7fd ff7e 	bl	24015494 <lv_cont_get_fit_left>
24017598:	4683      	mov	fp, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_right(const lv_obj_t * page)
{
    return lv_cont_get_fit_right(lv_page_get_scrollable(page));
2401759a:	4620      	mov	r0, r4
2401759c:	f7ff ff7a 	bl	24017494 <lv_page_get_scrollable>
240175a0:	f7fd ff7f 	bl	240154a2 <lv_cont_get_fit_right>
240175a4:	9002      	str	r0, [sp, #8]
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
    return lv_cont_get_fit_top(lv_page_get_scrollable(page));
240175a6:	4620      	mov	r0, r4
240175a8:	f7ff ff74 	bl	24017494 <lv_page_get_scrollable>
240175ac:	f7fd ff7f 	bl	240154ae <lv_cont_get_fit_top>
240175b0:	4606      	mov	r6, r0
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(page);
240175b2:	4620      	mov	r0, r4
240175b4:	f7f1 f897 	bl	240086e6 <lv_obj_get_base_dir>
240175b8:	2212      	movs	r2, #18
240175ba:	2100      	movs	r1, #0
240175bc:	4682      	mov	sl, r0
240175be:	6868      	ldr	r0, [r5, #4]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_MAX)) {
240175c0:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
240175c4:	f7f1 f8e0 	bl	24008788 <_lv_obj_get_style_int>
        lv_style_int_t scrl_right = lv_obj_get_style_pad_right(ext->scrl, LV_CONT_PART_MAIN);
240175c8:	2100      	movs	r1, #0
240175ca:	4681      	mov	r9, r0
240175cc:	6868      	ldr	r0, [r5, #4]
240175ce:	f7ff fbc3 	bl	24016d58 <lv_obj_get_style_pad_right>
240175d2:	9001      	str	r0, [sp, #4]
        lv_style_int_t scrl_top = lv_obj_get_style_pad_top(ext->scrl, LV_CONT_PART_MAIN);
240175d4:	6868      	ldr	r0, [r5, #4]
240175d6:	f7ff fbed 	bl	24016db4 <lv_obj_get_style_pad_top.constprop.0>
        child = lv_obj_get_child(page, NULL);
240175da:	2100      	movs	r1, #0
        lv_style_int_t scrl_top = lv_obj_get_style_pad_top(ext->scrl, LV_CONT_PART_MAIN);
240175dc:	4680      	mov	r8, r0
        child = lv_obj_get_child(page, NULL);
240175de:	4620      	mov	r0, r4
240175e0:	f7f0 fe46 	bl	24008270 <lv_obj_get_child>
240175e4:	4607      	mov	r7, r0
        while(child != NULL) {
240175e6:	2f00      	cmp	r7, #0
240175e8:	f43f af7a 	beq.w	240174e0 <lv_page_signal+0x40>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
240175ec:	2102      	movs	r1, #2
240175ee:	4638      	mov	r0, r7
240175f0:	f7f1 f87b 	bl	240086ea <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
240175f4:	4639      	mov	r1, r7
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
240175f6:	2800      	cmp	r0, #0
240175f8:	d146      	bne.n	24017688 <lv_page_signal+0x1e8>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
240175fa:	4620      	mov	r0, r4
240175fc:	f7f0 fe38 	bl	24008270 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1)  &&
24017600:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
24017604:	4602      	mov	r2, r0
                if((tmp->coords.x1 == page->coords.x1)  &&
24017606:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
2401760a:	4281      	cmp	r1, r0
2401760c:	d125      	bne.n	2401765a <lv_page_signal+0x1ba>
2401760e:	f00b 0cfd 	and.w	ip, fp, #253	; 0xfd
24017612:	f1bc 0f01 	cmp.w	ip, #1
24017616:	d120      	bne.n	2401765a <lv_page_signal+0x1ba>
                   (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_MAX) &&
24017618:	f1ba 0f01 	cmp.w	sl, #1
2401761c:	d01d      	beq.n	2401765a <lv_page_signal+0x1ba>
                    tmp->coords.x1 += scrl_left;
2401761e:	fa11 f189 	uxtah	r1, r1, r9
24017622:	8239      	strh	r1, [r7, #16]
                    tmp->coords.x2 += scrl_left;
24017624:	8ab9      	ldrh	r1, [r7, #20]
24017626:	fa11 f189 	uxtah	r1, r1, r9
                    tmp->coords.x2 -= scrl_right;
2401762a:	82b9      	strh	r1, [r7, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_MAX)) {
2401762c:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
24017630:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
24017634:	4281      	cmp	r1, r0
24017636:	d108      	bne.n	2401764a <lv_page_signal+0x1aa>
24017638:	2e01      	cmp	r6, #1
2401763a:	d106      	bne.n	2401764a <lv_page_signal+0x1aa>
                    tmp->coords.y1 += scrl_top;
2401763c:	fa11 f188 	uxtah	r1, r1, r8
24017640:	8279      	strh	r1, [r7, #18]
                    tmp->coords.y2 += scrl_top;
24017642:	8af9      	ldrh	r1, [r7, #22]
24017644:	fa11 f188 	uxtah	r1, r1, r8
24017648:	82f9      	strh	r1, [r7, #22]
                lv_obj_set_parent(tmp, ext->scrl);
2401764a:	4638      	mov	r0, r7
2401764c:	6869      	ldr	r1, [r5, #4]
2401764e:	9203      	str	r2, [sp, #12]
24017650:	f7f0 ffae 	bl	240085b0 <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
24017654:	9a03      	ldr	r2, [sp, #12]
24017656:	4617      	mov	r7, r2
24017658:	e7c5      	b.n	240175e6 <lv_page_signal+0x146>
                else if((tmp->coords.x2 == page->coords.x2) &&
2401765a:	f9b7 c014 	ldrsh.w	ip, [r7, #20]
2401765e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
24017662:	4561      	cmp	r1, ip
24017664:	d1e2      	bne.n	2401762c <lv_page_signal+0x18c>
24017666:	9b02      	ldr	r3, [sp, #8]
24017668:	f003 0cfd 	and.w	ip, r3, #253	; 0xfd
2401766c:	f1bc 0f01 	cmp.w	ip, #1
24017670:	d1dc      	bne.n	2401762c <lv_page_signal+0x18c>
                        && base_dir == LV_BIDI_DIR_RTL) {
24017672:	f1ba 0f01 	cmp.w	sl, #1
24017676:	d1d9      	bne.n	2401762c <lv_page_signal+0x18c>
                    tmp->coords.x1 -= scrl_right;
24017678:	f8bd c004 	ldrh.w	ip, [sp, #4]
2401767c:	eba0 000c 	sub.w	r0, r0, ip
                    tmp->coords.x2 -= scrl_right;
24017680:	eba1 010c 	sub.w	r1, r1, ip
                    tmp->coords.x1 -= scrl_right;
24017684:	8238      	strh	r0, [r7, #16]
                    tmp->coords.x2 -= scrl_right;
24017686:	e7d0      	b.n	2401762a <lv_page_signal+0x18a>
                child = lv_obj_get_child(page, child);
24017688:	4620      	mov	r0, r4
2401768a:	f7f0 fdf1 	bl	24008270 <lv_obj_get_child>
2401768e:	4607      	mov	r7, r0
24017690:	e7a9      	b.n	240175e6 <lv_page_signal+0x146>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
24017692:	2203      	movs	r2, #3
24017694:	2101      	movs	r1, #1
24017696:	4620      	mov	r0, r4
24017698:	f7f1 f876 	bl	24008788 <_lv_obj_get_style_int>
2401769c:	4601      	mov	r1, r0
        lv_area_set_height(&ext->scrlbar.hor_area, sb_width);
2401769e:	9001      	str	r0, [sp, #4]
240176a0:	f105 0010 	add.w	r0, r5, #16
240176a4:	f7f7 fd34 	bl	2400f110 <lv_area_set_height>
        lv_area_set_width(&ext->scrlbar.ver_area, sb_width);
240176a8:	9901      	ldr	r1, [sp, #4]
240176aa:	f105 0018 	add.w	r0, r5, #24
240176ae:	f7f7 fd2a 	bl	2400f106 <lv_area_set_width>
        if(ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) scrlbar_refresh(page);
240176b2:	f895 3020 	ldrb.w	r3, [r5, #32]
240176b6:	079a      	lsls	r2, r3, #30
240176b8:	d002      	beq.n	240176c0 <lv_page_signal+0x220>
240176ba:	4620      	mov	r0, r4
240176bc:	f7ff fc12 	bl	24016ee4 <scrlbar_refresh>
        refr_ext_draw_pad(page);
240176c0:	4620      	mov	r0, r4
240176c2:	f7ff fb4f 	bl	24016d64 <refr_ext_draw_pad>
240176c6:	e70d      	b.n	240174e4 <lv_page_signal+0x44>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
240176c8:	6843      	ldr	r3, [r0, #4]
240176ca:	2b00      	cmp	r3, #0
240176cc:	f43f af08 	beq.w	240174e0 <lv_page_signal+0x40>
240176d0:	4620      	mov	r0, r4
240176d2:	f7f0 ff9c 	bl	2400860e <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240176d6:	88b3      	ldrh	r3, [r6, #4]
240176d8:	8832      	ldrh	r2, [r6, #0]
240176da:	3301      	adds	r3, #1
240176dc:	1a9b      	subs	r3, r3, r2
240176de:	b21b      	sxth	r3, r3
240176e0:	4298      	cmp	r0, r3
240176e2:	d00e      	beq.n	24017702 <lv_page_signal+0x262>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_COORD_CHG, &ext->scrl->coords);
240176e4:	6868      	ldr	r0, [r5, #4]
240176e6:	2102      	movs	r1, #2
240176e8:	69c3      	ldr	r3, [r0, #28]
240176ea:	f100 0210 	add.w	r2, r0, #16
240176ee:	4798      	blx	r3
            if(ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) scrlbar_refresh(page);
240176f0:	f895 3020 	ldrb.w	r3, [r5, #32]
240176f4:	079b      	lsls	r3, r3, #30
240176f6:	f43f aef3 	beq.w	240174e0 <lv_page_signal+0x40>
240176fa:	4620      	mov	r0, r4
240176fc:	f7ff fbf2 	bl	24016ee4 <scrlbar_refresh>
24017700:	e6f0      	b.n	240174e4 <lv_page_signal+0x44>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
24017702:	4620      	mov	r0, r4
24017704:	f7f0 ff89 	bl	2400861a <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24017708:	88f3      	ldrh	r3, [r6, #6]
2401770a:	8872      	ldrh	r2, [r6, #2]
2401770c:	3301      	adds	r3, #1
2401770e:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
24017710:	b21b      	sxth	r3, r3
24017712:	4298      	cmp	r0, r3
24017714:	d1e6      	bne.n	240176e4 <lv_page_signal+0x244>
24017716:	e6e3      	b.n	240174e0 <lv_page_signal+0x40>
24017718:	24035d14 	.word	0x24035d14
2401771c:	900ff2e7 	.word	0x900ff2e7

24017720 <scrl_reposition>:
{
24017720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017724:	b087      	sub	sp, #28
24017726:	4607      	mov	r7, r0
    lv_obj_t * scrl = lv_page_get_scrollable(page);
24017728:	f7ff feb4 	bl	24017494 <lv_page_get_scrollable>
2401772c:	4680      	mov	r8, r0
    lv_coord_t new_x = lv_obj_get_x(scrl);
2401772e:	f7f0 fdcc 	bl	240082ca <lv_obj_get_x>
24017732:	4604      	mov	r4, r0
    lv_coord_t new_y = lv_obj_get_y(scrl);
24017734:	4640      	mov	r0, r8
24017736:	f7f0 fddb 	bl	240082f0 <lv_obj_get_y>
    lv_obj_get_coords(scrl, &scrl_coords);
2401773a:	a904      	add	r1, sp, #16
    lv_coord_t new_y = lv_obj_get_y(scrl);
2401773c:	9000      	str	r0, [sp, #0]
    lv_obj_get_coords(scrl, &scrl_coords);
2401773e:	4640      	mov	r0, r8
24017740:	f7f0 fdbd 	bl	240082be <lv_obj_get_coords>
    lv_obj_get_coords(page, &page_coords);
24017744:	4638      	mov	r0, r7
24017746:	a902      	add	r1, sp, #8
24017748:	f7f0 fdb9 	bl	240082be <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401774c:	2212      	movs	r2, #18
2401774e:	2100      	movs	r1, #0
24017750:	4638      	mov	r0, r7
24017752:	f7f1 f819 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
24017756:	2100      	movs	r1, #0
24017758:	4606      	mov	r6, r0
2401775a:	4638      	mov	r0, r7
2401775c:	f7ff fafc 	bl	24016d58 <lv_obj_get_style_pad_right>
24017760:	4681      	mov	r9, r0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
24017762:	4638      	mov	r0, r7
24017764:	f7ff fb26 	bl	24016db4 <lv_obj_get_style_pad_top.constprop.0>
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
24017768:	2100      	movs	r1, #0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
2401776a:	4605      	mov	r5, r0
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
2401776c:	4638      	mov	r0, r7
2401776e:	f7ff faf6 	bl	24016d5e <lv_obj_get_style_pad_bottom>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24017772:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
24017776:	f8bd b014 	ldrh.w	fp, [sp, #20]
2401777a:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
2401777e:	9301      	str	r3, [sp, #4]
24017780:	f10b 0201 	add.w	r2, fp, #1
24017784:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
24017788:	f8bd 1010 	ldrh.w	r1, [sp, #16]
2401778c:	ebac 0703 	sub.w	r7, ip, r3
24017790:	f9bd a010 	ldrsh.w	sl, [sp, #16]
24017794:	1a52      	subs	r2, r2, r1
24017796:	b2bf      	uxth	r7, r7
    if(lv_area_get_width(&scrl_coords) + left + right <= lv_area_get_width(&page_coords)) {
24017798:	fa06 f282 	sxtah	r2, r6, r2
2401779c:	f107 0e01 	add.w	lr, r7, #1
240177a0:	444a      	add	r2, r9
240177a2:	fa0f fe8e 	sxth.w	lr, lr
240177a6:	4572      	cmp	r2, lr
240177a8:	dc29      	bgt.n	240177fe <scrl_reposition+0xde>
        if(scrl_coords.x1 != page_coords.x1 + left) {
240177aa:	4433      	add	r3, r6
            new_x  = left;
240177ac:	459a      	cmp	sl, r3
240177ae:	bf16      	itet	ne
240177b0:	4634      	movne	r4, r6
240177b2:	f04f 0c00 	moveq.w	ip, #0
240177b6:	f04f 0c01 	movne.w	ip, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240177ba:	f8bd a016 	ldrh.w	sl, [sp, #22]
240177be:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
240177c2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
240177c6:	f10a 0201 	add.w	r2, sl, #1
240177ca:	f8bd 1012 	ldrh.w	r1, [sp, #18]
240177ce:	1afe      	subs	r6, r7, r3
240177d0:	f9bd b016 	ldrsh.w	fp, [sp, #22]
240177d4:	1a52      	subs	r2, r2, r1
240177d6:	f9bd 9012 	ldrsh.w	r9, [sp, #18]
240177da:	b2b6      	uxth	r6, r6
    if(lv_area_get_height(&scrl_coords) + top + bottom <= lv_area_get_height(&page_coords)) {
240177dc:	fa05 f282 	sxtah	r2, r5, r2
240177e0:	f106 0e01 	add.w	lr, r6, #1
240177e4:	4402      	add	r2, r0
240177e6:	fa0f fe8e 	sxth.w	lr, lr
240177ea:	4572      	cmp	r2, lr
240177ec:	dc1e      	bgt.n	2401782c <scrl_reposition+0x10c>
        if(scrl_coords.y1 != page_coords.y1 + top) {
240177ee:	442b      	add	r3, r5
240177f0:	4599      	cmp	r9, r3
240177f2:	d123      	bne.n	2401783c <scrl_reposition+0x11c>
    if(refr_x || refr_y) {
240177f4:	f1bc 0f00 	cmp.w	ip, #0
240177f8:	d025      	beq.n	24017846 <scrl_reposition+0x126>
240177fa:	9d00      	ldr	r5, [sp, #0]
240177fc:	e01e      	b.n	2401783c <scrl_reposition+0x11c>
        if(scrl_coords.x2 < page_coords.x2 - right) {
240177fe:	ebac 0c09 	sub.w	ip, ip, r9
24017802:	9a01      	ldr	r2, [sp, #4]
24017804:	4562      	cmp	r2, ip
24017806:	da08      	bge.n	2401781a <scrl_reposition+0xfa>
            new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - right; /* Right align */
24017808:	eba7 070b 	sub.w	r7, r7, fp
            refr_x = true;
2401780c:	f04f 0c01 	mov.w	ip, #1
            new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - right; /* Right align */
24017810:	4439      	add	r1, r7
24017812:	eba1 0109 	sub.w	r1, r1, r9
24017816:	b20c      	sxth	r4, r1
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_RIGHT);
24017818:	e7cf      	b.n	240177ba <scrl_reposition+0x9a>
        else if(scrl_coords.x1 > page_coords.x1 + left) {
2401781a:	4433      	add	r3, r6
            new_x  = left; /*Left align*/
2401781c:	459a      	cmp	sl, r3
2401781e:	bfca      	itet	gt
24017820:	4634      	movgt	r4, r6
24017822:	f04f 0c00 	movle.w	ip, #0
24017826:	f04f 0c01 	movgt.w	ip, #1
2401782a:	e7c6      	b.n	240177ba <scrl_reposition+0x9a>
        if(scrl_coords.y2 < page_coords.y2 - bottom) {
2401782c:	1a3f      	subs	r7, r7, r0
2401782e:	45bb      	cmp	fp, r7
24017830:	da0c      	bge.n	2401784c <scrl_reposition+0x12c>
            new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - bottom; /* Bottom align */
24017832:	eba6 060a 	sub.w	r6, r6, sl
24017836:	4431      	add	r1, r6
24017838:	1a09      	subs	r1, r1, r0
2401783a:	b20d      	sxth	r5, r1
        lv_obj_set_pos(scrl, new_x, new_y);
2401783c:	462a      	mov	r2, r5
2401783e:	4621      	mov	r1, r4
24017840:	4640      	mov	r0, r8
24017842:	f7f0 fc10 	bl	24008066 <lv_obj_set_pos>
}
24017846:	b007      	add	sp, #28
24017848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(scrl_coords.y1 > page_coords.y1 + top) {
2401784c:	442b      	add	r3, r5
2401784e:	4599      	cmp	r9, r3
24017850:	ddd0      	ble.n	240177f4 <scrl_reposition+0xd4>
24017852:	e7f3      	b.n	2401783c <scrl_reposition+0x11c>

24017854 <lv_page_get_edge_flash>:
}
24017854:	2000      	movs	r0, #0
24017856:	4770      	bx	lr

24017858 <lv_page_get_width_fit>:
{
24017858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401785c:	4607      	mov	r7, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
2401785e:	f7f1 fc7c 	bl	2400915a <lv_obj_get_ext_attr>
24017862:	2212      	movs	r2, #18
24017864:	4605      	mov	r5, r0
24017866:	2100      	movs	r1, #0
24017868:	4638      	mov	r0, r7
2401786a:	f7f0 ff8d 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t bg_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
2401786e:	2100      	movs	r1, #0
24017870:	4604      	mov	r4, r0
24017872:	4638      	mov	r0, r7
24017874:	f7ff fa70 	bl	24016d58 <lv_obj_get_style_pad_right>
24017878:	4680      	mov	r8, r0
2401787a:	2212      	movs	r2, #18
2401787c:	2100      	movs	r1, #0
2401787e:	6868      	ldr	r0, [r5, #4]
    return lv_obj_get_width(page) - bg_left - bg_right - scrl_left - scrl_right;
24017880:	4444      	add	r4, r8
24017882:	f7f0 ff81 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t scrl_right = lv_obj_get_style_pad_right(ext->scrl, LV_CONT_PART_MAIN);
24017886:	2100      	movs	r1, #0
24017888:	4606      	mov	r6, r0
2401788a:	6868      	ldr	r0, [r5, #4]
2401788c:	f7ff fa64 	bl	24016d58 <lv_obj_get_style_pad_right>
24017890:	4605      	mov	r5, r0
    return lv_obj_get_width(page) - bg_left - bg_right - scrl_left - scrl_right;
24017892:	4638      	mov	r0, r7
24017894:	f7f0 febb 	bl	2400860e <lv_obj_get_width>
24017898:	1b03      	subs	r3, r0, r4
2401789a:	1b9b      	subs	r3, r3, r6
2401789c:	1b58      	subs	r0, r3, r5
}
2401789e:	b200      	sxth	r0, r0
240178a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

240178a4 <lv_page_on_edge>:
{
240178a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
240178a8:	4605      	mov	r5, r0
240178aa:	460c      	mov	r4, r1
    lv_obj_t * scrl               = lv_page_get_scrollable(page);
240178ac:	f7ff fdf2 	bl	24017494 <lv_page_get_scrollable>
    lv_obj_get_coords(scrl, &scrl_coords);
240178b0:	a902      	add	r1, sp, #8
240178b2:	f7f0 fd04 	bl	240082be <lv_obj_get_coords>
    lv_obj_get_coords(page, &page_coords);
240178b6:	4628      	mov	r0, r5
240178b8:	4669      	mov	r1, sp
240178ba:	f7f0 fd00 	bl	240082be <lv_obj_get_coords>
240178be:	2212      	movs	r2, #18
240178c0:	2100      	movs	r1, #0
240178c2:	4628      	mov	r0, r5
240178c4:	f7f0 ff60 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
240178c8:	2100      	movs	r1, #0
240178ca:	4607      	mov	r7, r0
240178cc:	4628      	mov	r0, r5
240178ce:	f7ff fa43 	bl	24016d58 <lv_obj_get_style_pad_right>
240178d2:	4606      	mov	r6, r0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
240178d4:	4628      	mov	r0, r5
240178d6:	f7ff fa6d 	bl	24016db4 <lv_obj_get_style_pad_top.constprop.0>
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
240178da:	2100      	movs	r1, #0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
240178dc:	4680      	mov	r8, r0
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
240178de:	4628      	mov	r0, r5
240178e0:	f7ff fa3d 	bl	24016d5e <lv_obj_get_style_pad_bottom>
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + top) return true;
240178e4:	07a5      	lsls	r5, r4, #30
240178e6:	d506      	bpl.n	240178f6 <lv_page_on_edge+0x52>
240178e8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
240178ec:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
240178f0:	4443      	add	r3, r8
240178f2:	429a      	cmp	r2, r3
240178f4:	d01f      	beq.n	24017936 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_BOTTOM) && scrl_coords.y2 == page_coords.y2 - bottom) return true;
240178f6:	0721      	lsls	r1, r4, #28
240178f8:	d506      	bpl.n	24017908 <lv_page_on_edge+0x64>
240178fa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
240178fe:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
24017902:	1a18      	subs	r0, r3, r0
24017904:	4282      	cmp	r2, r0
24017906:	d016      	beq.n	24017936 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_LEFT) && scrl_coords.x1 == page_coords.x1 + left) return true;
24017908:	07e2      	lsls	r2, r4, #31
2401790a:	d506      	bpl.n	2401791a <lv_page_on_edge+0x76>
2401790c:	f9bd 3000 	ldrsh.w	r3, [sp]
24017910:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
24017914:	19d8      	adds	r0, r3, r7
24017916:	4282      	cmp	r2, r0
24017918:	d00d      	beq.n	24017936 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_RIGHT) && scrl_coords.x2 == page_coords.x2 - right) return true;
2401791a:	f014 0404 	ands.w	r4, r4, #4
2401791e:	d00c      	beq.n	2401793a <lv_page_on_edge+0x96>
24017920:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
24017924:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
24017928:	1ba0      	subs	r0, r4, r6
2401792a:	1ac3      	subs	r3, r0, r3
2401792c:	4258      	negs	r0, r3
2401792e:	4158      	adcs	r0, r3
}
24017930:	b004      	add	sp, #16
24017932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + top) return true;
24017936:	2001      	movs	r0, #1
24017938:	e7fa      	b.n	24017930 <lv_page_on_edge+0x8c>
    return false;
2401793a:	4620      	mov	r0, r4
2401793c:	e7f8      	b.n	24017930 <lv_page_on_edge+0x8c>
	...

24017940 <lv_page_scrollable_signal>:
        return ancestor_signal(scrl, sign, param);
24017940:	4b8b      	ldr	r3, [pc, #556]	; (24017b70 <lv_page_scrollable_signal+0x230>)
    if(sign == LV_SIGNAL_GET_STYLE) {
24017942:	2908      	cmp	r1, #8
{
24017944:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_signal(scrl, sign, param);
24017948:	681b      	ldr	r3, [r3, #0]
{
2401794a:	4681      	mov	r9, r0
2401794c:	460e      	mov	r6, r1
2401794e:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24017950:	d103      	bne.n	2401795a <lv_page_scrollable_signal+0x1a>
}
24017952:	b002      	add	sp, #8
24017954:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_signal(scrl, sign, param);
24017958:	4718      	bx	r3
    res = ancestor_signal(scrl, sign, param);
2401795a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
2401795c:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
2401795e:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
24017960:	f040 8093 	bne.w	24017a8a <lv_page_scrollable_signal+0x14a>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
24017964:	2e07      	cmp	r6, #7
24017966:	d106      	bne.n	24017976 <lv_page_scrollable_signal+0x36>
24017968:	4982      	ldr	r1, [pc, #520]	; (24017b74 <lv_page_scrollable_signal+0x234>)
2401796a:	4638      	mov	r0, r7
}
2401796c:	b002      	add	sp, #8
2401796e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
24017972:	f7f1 bc26 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_obj_t * page               = lv_obj_get_parent(scrl);
24017976:	4648      	mov	r0, r9
24017978:	f7f0 fc78 	bl	2400826c <lv_obj_get_parent>
2401797c:	4604      	mov	r4, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
2401797e:	f7f1 fbec 	bl	2400915a <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_COORD_CHG) {
24017982:	2e02      	cmp	r6, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
24017984:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
24017986:	f040 8084 	bne.w	24017a92 <lv_page_scrollable_signal+0x152>
        lv_obj_t * page_parent = lv_obj_get_parent(page);
2401798a:	4620      	mov	r0, r4
2401798c:	f7f0 fc6e 	bl	2400826c <lv_obj_get_parent>
24017990:	4682      	mov	sl, r0
        lv_indev_t * indev = lv_indev_get_act();
24017992:	f7ef fc17 	bl	240071c4 <lv_indev_get_act>
        if(page_ext->scroll_prop  && indev) {
24017996:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
        lv_indev_t * indev = lv_indev_get_act();
2401799a:	4606      	mov	r6, r0
        if(page_ext->scroll_prop  && indev) {
2401799c:	07db      	lsls	r3, r3, #31
2401799e:	d552      	bpl.n	24017a46 <lv_page_scrollable_signal+0x106>
240179a0:	2800      	cmp	r0, #0
240179a2:	d050      	beq.n	24017a46 <lv_page_scrollable_signal+0x106>
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(lv_obj_get_parent(page_parent));
240179a4:	4650      	mov	r0, sl
240179a6:	f7f0 fc61 	bl	2400826c <lv_obj_get_parent>
240179aa:	f7f1 fbd6 	bl	2400915a <lv_obj_get_ext_attr>
            if(parent_ext->scroll_prop_obj == NULL) {
240179ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(lv_obj_get_parent(page_parent));
240179b0:	4682      	mov	sl, r0
            if(parent_ext->scroll_prop_obj == NULL) {
240179b2:	2b00      	cmp	r3, #0
240179b4:	d147      	bne.n	24017a46 <lv_page_scrollable_signal+0x106>
                if((lv_indev_is_dragging(indev) == false || page_ext->scroll_prop_obj) && (drag_sum->y || drag_sum->x)) {
240179b6:	4630      	mov	r0, r6
240179b8:	f7ef fc50 	bl	2400725c <lv_indev_is_dragging>
240179bc:	b110      	cbz	r0, 240179c4 <lv_page_scrollable_signal+0x84>
240179be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
240179c0:	2b00      	cmp	r3, #0
240179c2:	d040      	beq.n	24017a46 <lv_page_scrollable_signal+0x106>
240179c4:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
240179c8:	2b00      	cmp	r3, #0
240179ca:	d110      	bne.n	240179ee <lv_page_scrollable_signal+0xae>
240179cc:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
240179d0:	b3cb      	cbz	r3, 24017a46 <lv_page_scrollable_signal+0x106>
                    if((drag_sum->x > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_LEFT)) ||
240179d2:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
240179d6:	2b00      	cmp	r3, #0
240179d8:	dc25      	bgt.n	24017a26 <lv_page_scrollable_signal+0xe6>
240179da:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
240179de:	2b00      	cmp	r3, #0
240179e0:	da31      	bge.n	24017a46 <lv_page_scrollable_signal+0x106>
                       (drag_sum->x < 0 && lv_page_on_edge(page, LV_PAGE_EDGE_RIGHT))) {
240179e2:	2104      	movs	r1, #4
240179e4:	4620      	mov	r0, r4
240179e6:	f7ff ff5d 	bl	240178a4 <lv_page_on_edge>
240179ea:	bb10      	cbnz	r0, 24017a32 <lv_page_scrollable_signal+0xf2>
240179ec:	e02b      	b.n	24017a46 <lv_page_scrollable_signal+0x106>
                    if((drag_sum->y > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_TOP)) ||
240179ee:	dc09      	bgt.n	24017a04 <lv_page_scrollable_signal+0xc4>
240179f0:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
240179f4:	2b00      	cmp	r3, #0
240179f6:	daec      	bge.n	240179d2 <lv_page_scrollable_signal+0x92>
                       (drag_sum->y < 0 && lv_page_on_edge(page, LV_PAGE_EDGE_BOTTOM))) {
240179f8:	2108      	movs	r1, #8
240179fa:	4620      	mov	r0, r4
240179fc:	f7ff ff52 	bl	240178a4 <lv_page_on_edge>
24017a00:	b930      	cbnz	r0, 24017a10 <lv_page_scrollable_signal+0xd0>
24017a02:	e7e6      	b.n	240179d2 <lv_page_scrollable_signal+0x92>
                    if((drag_sum->y > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_TOP)) ||
24017a04:	2102      	movs	r1, #2
24017a06:	4620      	mov	r0, r4
24017a08:	f7ff ff4c 	bl	240178a4 <lv_page_on_edge>
24017a0c:	2800      	cmp	r0, #0
24017a0e:	d0ef      	beq.n	240179f0 <lv_page_scrollable_signal+0xb0>
                        lv_obj_set_drag_parent(page, true);
24017a10:	2101      	movs	r1, #1
24017a12:	4620      	mov	r0, r4
24017a14:	f7f0 f97f 	bl	24007d16 <lv_obj_set_drag_parent>
                        lv_obj_set_drag_parent(scrl, true);
24017a18:	2101      	movs	r1, #1
24017a1a:	4648      	mov	r0, r9
24017a1c:	f7f0 f97b 	bl	24007d16 <lv_obj_set_drag_parent>
                        parent_ext->scroll_prop_obj = page;
24017a20:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
24017a24:	e7d5      	b.n	240179d2 <lv_page_scrollable_signal+0x92>
                    if((drag_sum->x > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_LEFT)) ||
24017a26:	2101      	movs	r1, #1
24017a28:	4620      	mov	r0, r4
24017a2a:	f7ff ff3b 	bl	240178a4 <lv_page_on_edge>
24017a2e:	2800      	cmp	r0, #0
24017a30:	d0d3      	beq.n	240179da <lv_page_scrollable_signal+0x9a>
                        lv_obj_set_drag_parent(page, true);
24017a32:	2101      	movs	r1, #1
24017a34:	4620      	mov	r0, r4
24017a36:	f7f0 f96e 	bl	24007d16 <lv_obj_set_drag_parent>
                        lv_obj_set_drag_parent(scrl, true);
24017a3a:	2101      	movs	r1, #1
24017a3c:	4648      	mov	r0, r9
24017a3e:	f7f0 f96a 	bl	24007d16 <lv_obj_set_drag_parent>
                        parent_ext->scroll_prop_obj = page;
24017a42:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
        scrl_reposition(page);
24017a46:	4620      	mov	r0, r4
24017a48:	f7ff fe6a 	bl	24017720 <scrl_reposition>
        lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
24017a4c:	4620      	mov	r0, r4
24017a4e:	f7f1 fb84 	bl	2400915a <lv_obj_get_ext_attr>
        if((ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) ||
24017a52:	f890 3020 	ldrb.w	r3, [r0, #32]
24017a56:	079d      	lsls	r5, r3, #30
24017a58:	d003      	beq.n	24017a62 <lv_page_scrollable_signal+0x122>
            scrlbar_refresh(page);
24017a5a:	4620      	mov	r0, r4
24017a5c:	f7ff fa42 	bl	24016ee4 <scrlbar_refresh>
24017a60:	e013      	b.n	24017a8a <lv_page_scrollable_signal+0x14a>
           (lv_obj_get_width(scrl) != lv_area_get_width(param) || lv_obj_get_height(scrl) != lv_area_get_height(param))) {
24017a62:	4648      	mov	r0, r9
24017a64:	f7f0 fdd3 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24017a68:	88bb      	ldrh	r3, [r7, #4]
24017a6a:	883a      	ldrh	r2, [r7, #0]
24017a6c:	3301      	adds	r3, #1
24017a6e:	1a9b      	subs	r3, r3, r2
        if((ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) ||
24017a70:	b21b      	sxth	r3, r3
24017a72:	4298      	cmp	r0, r3
24017a74:	d1f1      	bne.n	24017a5a <lv_page_scrollable_signal+0x11a>
           (lv_obj_get_width(scrl) != lv_area_get_width(param) || lv_obj_get_height(scrl) != lv_area_get_height(param))) {
24017a76:	4648      	mov	r0, r9
24017a78:	f7f0 fdcf 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24017a7c:	88fb      	ldrh	r3, [r7, #6]
24017a7e:	887a      	ldrh	r2, [r7, #2]
24017a80:	3301      	adds	r3, #1
24017a82:	1a9b      	subs	r3, r3, r2
24017a84:	b21b      	sxth	r3, r3
24017a86:	4298      	cmp	r0, r3
24017a88:	d1e7      	bne.n	24017a5a <lv_page_scrollable_signal+0x11a>
}
24017a8a:	4640      	mov	r0, r8
24017a8c:	b002      	add	sp, #8
24017a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(sign == LV_SIGNAL_STYLE_CHG) {
24017a92:	2e11      	cmp	r6, #17
24017a94:	d065      	beq.n	24017b62 <lv_page_scrollable_signal+0x222>
24017a96:	d808      	bhi.n	24017aaa <lv_page_scrollable_signal+0x16a>
24017a98:	2e00      	cmp	r6, #0
24017a9a:	f000 80f8 	beq.w	24017c8e <lv_page_scrollable_signal+0x34e>
24017a9e:	2e04      	cmp	r6, #4
24017aa0:	d1f3      	bne.n	24017a8a <lv_page_scrollable_signal+0x14a>
        scrl_reposition(page);
24017aa2:	4620      	mov	r0, r4
24017aa4:	f7ff fe3c 	bl	24017720 <scrl_reposition>
        scrlbar_refresh(page);
24017aa8:	e7d7      	b.n	24017a5a <lv_page_scrollable_signal+0x11a>
24017aaa:	2e13      	cmp	r6, #19
24017aac:	d1ed      	bne.n	24017a8a <lv_page_scrollable_signal+0x14a>
        if(page_ext->scroll_prop_obj) {
24017aae:	6a47      	ldr	r7, [r0, #36]	; 0x24
24017ab0:	2f00      	cmp	r7, #0
24017ab2:	d161      	bne.n	24017b78 <lv_page_scrollable_signal+0x238>
        if(page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
24017ab4:	f895 3020 	ldrb.w	r3, [r5, #32]
24017ab8:	f003 021c 	and.w	r2, r3, #28
24017abc:	2a08      	cmp	r2, #8
24017abe:	d1e4      	bne.n	24017a8a <lv_page_scrollable_signal+0x14a>
            if(page_ext->scrlbar.hor_draw) {
24017ac0:	07da      	lsls	r2, r3, #31
24017ac2:	d524      	bpl.n	24017b0e <lv_page_scrollable_signal+0x1ce>
                lv_area_copy(&sb_area_tmp, &page_ext->scrlbar.hor_area);
24017ac4:	f105 0110 	add.w	r1, r5, #16
24017ac8:	4668      	mov	r0, sp
24017aca:	f7ff f977 	bl	24016dbc <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
24017ace:	8a22      	ldrh	r2, [r4, #16]
24017ad0:	f8bd 3000 	ldrh.w	r3, [sp]
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017ad4:	4620      	mov	r0, r4
                sb_area_tmp.y1 += page->coords.y1;
24017ad6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                sb_area_tmp.x1 += page->coords.x1;
24017ada:	4413      	add	r3, r2
24017adc:	f8ad 3000 	strh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
24017ae0:	8a63      	ldrh	r3, [r4, #18]
24017ae2:	4419      	add	r1, r3
24017ae4:	f8ad 1002 	strh.w	r1, [sp, #2]
                sb_area_tmp.x2 += page->coords.x1;
24017ae8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
24017aec:	440a      	add	r2, r1
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017aee:	4669      	mov	r1, sp
                sb_area_tmp.x2 += page->coords.x1;
24017af0:	f8ad 2004 	strh.w	r2, [sp, #4]
                sb_area_tmp.y2 += page->coords.y1;
24017af4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24017af8:	4413      	add	r3, r2
24017afa:	f8ad 3006 	strh.w	r3, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017afe:	f7f0 fa5f 	bl	24007fc0 <lv_obj_invalidate_area>
                page_ext->scrlbar.hor_draw = 0;
24017b02:	f895 3020 	ldrb.w	r3, [r5, #32]
24017b06:	f36f 0300 	bfc	r3, #0, #1
24017b0a:	f885 3020 	strb.w	r3, [r5, #32]
            if(page_ext->scrlbar.ver_draw) {
24017b0e:	f895 3020 	ldrb.w	r3, [r5, #32]
24017b12:	079b      	lsls	r3, r3, #30
24017b14:	d5b9      	bpl.n	24017a8a <lv_page_scrollable_signal+0x14a>
                lv_area_copy(&sb_area_tmp, &page_ext->scrlbar.ver_area);
24017b16:	f105 0118 	add.w	r1, r5, #24
24017b1a:	4668      	mov	r0, sp
24017b1c:	f7ff f94e 	bl	24016dbc <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
24017b20:	8a22      	ldrh	r2, [r4, #16]
24017b22:	f8bd 3000 	ldrh.w	r3, [sp]
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017b26:	4620      	mov	r0, r4
                sb_area_tmp.y1 += page->coords.y1;
24017b28:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                sb_area_tmp.x1 += page->coords.x1;
24017b2c:	4413      	add	r3, r2
24017b2e:	f8ad 3000 	strh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
24017b32:	8a63      	ldrh	r3, [r4, #18]
24017b34:	4419      	add	r1, r3
24017b36:	f8ad 1002 	strh.w	r1, [sp, #2]
                sb_area_tmp.x2 += page->coords.x1;
24017b3a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
24017b3e:	440a      	add	r2, r1
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017b40:	4669      	mov	r1, sp
                sb_area_tmp.x2 += page->coords.x1;
24017b42:	f8ad 2004 	strh.w	r2, [sp, #4]
                sb_area_tmp.y2 += page->coords.y1;
24017b46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24017b4a:	4413      	add	r3, r2
24017b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
24017b50:	f7f0 fa36 	bl	24007fc0 <lv_obj_invalidate_area>
                page_ext->scrlbar.ver_draw = 0;
24017b54:	f895 3020 	ldrb.w	r3, [r5, #32]
24017b58:	f36f 0341 	bfc	r3, #1, #1
24017b5c:	f885 3020 	strb.w	r3, [r5, #32]
24017b60:	e793      	b.n	24017a8a <lv_page_scrollable_signal+0x14a>
        if(page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
24017b62:	f890 3020 	ldrb.w	r3, [r0, #32]
24017b66:	f003 031c 	and.w	r3, r3, #28
24017b6a:	2b08      	cmp	r3, #8
24017b6c:	d18d      	bne.n	24017a8a <lv_page_scrollable_signal+0x14a>
24017b6e:	e774      	b.n	24017a5a <lv_page_scrollable_signal+0x11a>
24017b70:	24035d14 	.word	0x24035d14
24017b74:	900ff2a3 	.word	0x900ff2a3
            lv_page_ext_t * scroller_page_ext      = lv_obj_get_ext_attr(scroller_page);
24017b78:	4638      	mov	r0, r7
24017b7a:	f7f1 faee 	bl	2400915a <lv_obj_get_ext_attr>
            page_ext->scroll_prop_obj = NULL;
24017b7e:	2100      	movs	r1, #0
            lv_page_ext_t * scroller_page_ext      = lv_obj_get_ext_attr(scroller_page);
24017b80:	4606      	mov	r6, r0
            lv_obj_set_drag_parent(scroller_page, false);
24017b82:	4638      	mov	r0, r7
            page_ext->scroll_prop_obj = NULL;
24017b84:	6269      	str	r1, [r5, #36]	; 0x24
            lv_obj_set_drag_parent(scroller_page, false);
24017b86:	f7f0 f8c6 	bl	24007d16 <lv_obj_set_drag_parent>
            lv_obj_set_drag_parent(lv_page_get_scrollable(scroller_page), false);
24017b8a:	4638      	mov	r0, r7
24017b8c:	f7ff fc82 	bl	24017494 <lv_page_get_scrollable>
24017b90:	2100      	movs	r1, #0
24017b92:	f7f0 f8c0 	bl	24007d16 <lv_obj_set_drag_parent>
            if(scroller_page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
24017b96:	f896 3020 	ldrb.w	r3, [r6, #32]
24017b9a:	f003 021c 	and.w	r2, r3, #28
24017b9e:	2a08      	cmp	r2, #8
24017ba0:	d14f      	bne.n	24017c42 <lv_page_scrollable_signal+0x302>
                if(scroller_page_ext->scrlbar.hor_draw) {
24017ba2:	07d8      	lsls	r0, r3, #31
24017ba4:	d524      	bpl.n	24017bf0 <lv_page_scrollable_signal+0x2b0>
                    lv_area_copy(&sb_area_tmp, &scroller_page_ext->scrlbar.hor_area);
24017ba6:	f106 0110 	add.w	r1, r6, #16
24017baa:	4668      	mov	r0, sp
24017bac:	f7ff f906 	bl	24016dbc <lv_area_copy>
                    sb_area_tmp.x1 += scroller_page->coords.x1;
24017bb0:	8a3a      	ldrh	r2, [r7, #16]
24017bb2:	f8bd 3000 	ldrh.w	r3, [sp]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017bb6:	4638      	mov	r0, r7
                    sb_area_tmp.y1 += scroller_page->coords.y1;
24017bb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                    sb_area_tmp.x1 += scroller_page->coords.x1;
24017bbc:	4413      	add	r3, r2
24017bbe:	f8ad 3000 	strh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
24017bc2:	8a7b      	ldrh	r3, [r7, #18]
24017bc4:	4419      	add	r1, r3
24017bc6:	f8ad 1002 	strh.w	r1, [sp, #2]
                    sb_area_tmp.x2 += scroller_page->coords.x1;
24017bca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
24017bce:	440a      	add	r2, r1
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017bd0:	4669      	mov	r1, sp
                    sb_area_tmp.x2 += scroller_page->coords.x1;
24017bd2:	f8ad 2004 	strh.w	r2, [sp, #4]
                    sb_area_tmp.y2 += scroller_page->coords.y1;
24017bd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24017bda:	4413      	add	r3, r2
24017bdc:	f8ad 3006 	strh.w	r3, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017be0:	f7f0 f9ee 	bl	24007fc0 <lv_obj_invalidate_area>
                    scroller_page_ext->scrlbar.hor_draw = 0;
24017be4:	f896 3020 	ldrb.w	r3, [r6, #32]
24017be8:	f36f 0300 	bfc	r3, #0, #1
24017bec:	f886 3020 	strb.w	r3, [r6, #32]
                if(scroller_page_ext->scrlbar.ver_draw) {
24017bf0:	f896 3020 	ldrb.w	r3, [r6, #32]
24017bf4:	0799      	lsls	r1, r3, #30
24017bf6:	d524      	bpl.n	24017c42 <lv_page_scrollable_signal+0x302>
                    lv_area_copy(&sb_area_tmp, &scroller_page_ext->scrlbar.ver_area);
24017bf8:	f106 0118 	add.w	r1, r6, #24
24017bfc:	4668      	mov	r0, sp
24017bfe:	f7ff f8dd 	bl	24016dbc <lv_area_copy>
                    sb_area_tmp.x1 += scroller_page->coords.x1;
24017c02:	8a3a      	ldrh	r2, [r7, #16]
24017c04:	f8bd 3000 	ldrh.w	r3, [sp]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017c08:	4638      	mov	r0, r7
                    sb_area_tmp.y1 += scroller_page->coords.y1;
24017c0a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                    sb_area_tmp.x1 += scroller_page->coords.x1;
24017c0e:	4413      	add	r3, r2
24017c10:	f8ad 3000 	strh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
24017c14:	8a7b      	ldrh	r3, [r7, #18]
24017c16:	4419      	add	r1, r3
24017c18:	f8ad 1002 	strh.w	r1, [sp, #2]
                    sb_area_tmp.x2 += scroller_page->coords.x1;
24017c1c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
24017c20:	440a      	add	r2, r1
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017c22:	4669      	mov	r1, sp
                    sb_area_tmp.x2 += scroller_page->coords.x1;
24017c24:	f8ad 2004 	strh.w	r2, [sp, #4]
                    sb_area_tmp.y2 += scroller_page->coords.y1;
24017c28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24017c2c:	4413      	add	r3, r2
24017c2e:	f8ad 3006 	strh.w	r3, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
24017c32:	f7f0 f9c5 	bl	24007fc0 <lv_obj_invalidate_area>
                    scroller_page_ext->scrlbar.ver_draw = 0;
24017c36:	f896 3020 	ldrb.w	r3, [r6, #32]
24017c3a:	f36f 0341 	bfc	r3, #1, #1
24017c3e:	f886 3020 	strb.w	r3, [r6, #32]
                scroller_ext->scroll_prop_obj = NULL;
24017c42:	f04f 0900 	mov.w	r9, #0
            lv_page_ext_t * scroller_ext = lv_obj_get_ext_attr(scroller_page);
24017c46:	4638      	mov	r0, r7
24017c48:	f7f1 fa87 	bl	2400915a <lv_obj_get_ext_attr>
            while(scroller_ext->scroll_prop_obj) {
24017c4c:	6a47      	ldr	r7, [r0, #36]	; 0x24
24017c4e:	2f00      	cmp	r7, #0
24017c50:	f43f af30 	beq.w	24017ab4 <lv_page_scrollable_signal+0x174>
                lv_obj_set_drag_parent(scroller_page, false);
24017c54:	2100      	movs	r1, #0
                scroller_ext->scroll_prop_obj = NULL;
24017c56:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
                lv_obj_set_drag_parent(scroller_page, false);
24017c5a:	4638      	mov	r0, r7
24017c5c:	f7f0 f85b 	bl	24007d16 <lv_obj_set_drag_parent>
                lv_obj_set_drag_parent(lv_page_get_scrollable(scroller_page), false);
24017c60:	4638      	mov	r0, r7
24017c62:	f7ff fc17 	bl	24017494 <lv_page_get_scrollable>
24017c66:	2100      	movs	r1, #0
24017c68:	f7f0 f855 	bl	24007d16 <lv_obj_set_drag_parent>
                if(scroller_page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
24017c6c:	f896 3020 	ldrb.w	r3, [r6, #32]
24017c70:	f003 021c 	and.w	r2, r3, #28
24017c74:	2a08      	cmp	r2, #8
24017c76:	d106      	bne.n	24017c86 <lv_page_scrollable_signal+0x346>
                    scroller_page_ext->scrlbar.hor_draw = 0;
24017c78:	f023 0303 	bic.w	r3, r3, #3
                    lv_obj_invalidate(scroller_page);
24017c7c:	4638      	mov	r0, r7
                    scroller_page_ext->scrlbar.hor_draw = 0;
24017c7e:	f886 3020 	strb.w	r3, [r6, #32]
                    lv_obj_invalidate(scroller_page);
24017c82:	f7f0 f9af 	bl	24007fe4 <lv_obj_invalidate>
                scroller_ext = lv_obj_get_ext_attr(scroller_page);
24017c86:	4638      	mov	r0, r7
24017c88:	f7f1 fa67 	bl	2400915a <lv_obj_get_ext_attr>
24017c8c:	e7de      	b.n	24017c4c <lv_page_scrollable_signal+0x30c>
        page_ext->scrl = NULL;
24017c8e:	6046      	str	r6, [r0, #4]
24017c90:	e6fb      	b.n	24017a8a <lv_page_scrollable_signal+0x14a>
24017c92:	bf00      	nop

24017c94 <lv_spinbox_signal>:
 */
static lv_res_t lv_spinbox_signal(lv_obj_t * spinbox, lv_signal_t sign, void * param)
{

    lv_res_t res = LV_RES_OK;
    if(sign == LV_SIGNAL_GET_STYLE) {
24017c94:	2908      	cmp	r1, #8
{
24017c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24017c9a:	4605      	mov	r5, r0
24017c9c:	460c      	mov	r4, r1
24017c9e:	4616      	mov	r6, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24017ca0:	d117      	bne.n	24017cd2 <lv_spinbox_signal+0x3e>
        lv_get_style_info_t * info = param;
        info->result = lv_spinbox_get_style(spinbox, info->part);
24017ca2:	7817      	ldrb	r7, [r2, #0]
 */
static lv_style_list_t * lv_spinbox_get_style(lv_obj_t * ta, uint8_t part)
{
    LV_ASSERT_OBJ(ta, LV_OBJX_NAME);

    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(ta);
24017ca4:	f7f1 fa59 	bl	2400915a <lv_obj_get_ext_attr>
    lv_style_list_t * style_dsc_p;

    switch(part) {
24017ca8:	b15f      	cbz	r7, 24017cc2 <lv_spinbox_signal+0x2e>
24017caa:	2f03      	cmp	r7, #3
24017cac:	d00f      	beq.n	24017cce <lv_spinbox_signal+0x3a>
        info->result = lv_spinbox_get_style(spinbox, info->part);
24017cae:	2300      	movs	r3, #0
        else return ancestor_signal(spinbox, sign, param);
24017cb0:	4632      	mov	r2, r6
24017cb2:	4621      	mov	r1, r4
24017cb4:	4628      	mov	r0, r5
        info->result = lv_spinbox_get_style(spinbox, info->part);
24017cb6:	6073      	str	r3, [r6, #4]
        else return ancestor_signal(spinbox, sign, param);
24017cb8:	4b33      	ldr	r3, [pc, #204]	; (24017d88 <lv_spinbox_signal+0xf4>)
}
24017cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(spinbox, sign, param);
24017cbe:	681b      	ldr	r3, [r3, #0]
24017cc0:	4718      	bx	r3
        case LV_SPINBOX_PART_BG:
            style_dsc_p = &ta->style_list;
24017cc2:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_spinbox_get_style(spinbox, info->part);
24017cc6:	6070      	str	r0, [r6, #4]
    return res;
24017cc8:	2001      	movs	r0, #1
}
24017cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            break;
        case LV_SPINBOX_PART_CURSOR:
            style_dsc_p = &ext->ta.cursor.style;
24017cce:	304c      	adds	r0, #76	; 0x4c
            break;
24017cd0:	e7f9      	b.n	24017cc6 <lv_spinbox_signal+0x32>
    if(sign != LV_SIGNAL_CONTROL) {
24017cd2:	2918      	cmp	r1, #24
24017cd4:	d0f8      	beq.n	24017cc8 <lv_spinbox_signal+0x34>
        res = ancestor_signal(spinbox, sign, param);
24017cd6:	4b2c      	ldr	r3, [pc, #176]	; (24017d88 <lv_spinbox_signal+0xf4>)
24017cd8:	681b      	ldr	r3, [r3, #0]
24017cda:	4798      	blx	r3
        if(res != LV_RES_OK) return res;
24017cdc:	2801      	cmp	r0, #1
24017cde:	d1f4      	bne.n	24017cca <lv_spinbox_signal+0x36>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24017ce0:	2c07      	cmp	r4, #7
24017ce2:	d105      	bne.n	24017cf0 <lv_spinbox_signal+0x5c>
24017ce4:	4630      	mov	r0, r6
24017ce6:	4929      	ldr	r1, [pc, #164]	; (24017d8c <lv_spinbox_signal+0xf8>)
}
24017ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24017cec:	f7f1 ba69 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    else if(sign == LV_SIGNAL_RELEASED) {
24017cf0:	2c0e      	cmp	r4, #14
24017cf2:	d1e9      	bne.n	24017cc8 <lv_spinbox_signal+0x34>
        lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017cf4:	4628      	mov	r0, r5
24017cf6:	f7f1 fa30 	bl	2400915a <lv_obj_get_ext_attr>
24017cfa:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
24017cfc:	f7ef fa62 	bl	240071c4 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
24017d00:	f7ef fa66 	bl	240071d0 <lv_indev_get_type>
24017d04:	2804      	cmp	r0, #4
24017d06:	d0df      	beq.n	24017cc8 <lv_spinbox_signal+0x34>
            const char * txt = lv_textarea_get_text(spinbox);
24017d08:	4628      	mov	r0, r5
24017d0a:	f001 fb68 	bl	240193de <lv_textarea_get_text>
24017d0e:	4606      	mov	r6, r0
            size_t txt_len = strlen(txt);
24017d10:	f002 fc4e 	bl	2401a5b0 <__strlen_veneer>
            if(txt[ext->ta.cursor.pos] == '.') {
24017d14:	6da1      	ldr	r1, [r4, #88]	; 0x58
24017d16:	5c73      	ldrb	r3, [r6, r1]
24017d18:	2b2e      	cmp	r3, #46	; 0x2e
24017d1a:	d125      	bne.n	24017d68 <lv_spinbox_signal+0xd4>
                lv_textarea_cursor_left(spinbox);
24017d1c:	4628      	mov	r0, r5
24017d1e:	f002 fa29 	bl	2401a174 <lv_textarea_cursor_left>
            if(ext->ta.cursor.pos > ext->dec_point_pos && ext->dec_point_pos != 0) cp--;
24017d22:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
            uint16_t cp = ext->ta.cursor.pos;
24017d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
            size_t len = ext->digit_count - 1;
24017d28:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
            if(ext->ta.cursor.pos > ext->dec_point_pos && ext->dec_point_pos != 0) cp--;
24017d2c:	f3c1 1543 	ubfx	r5, r1, #5, #4
            uint16_t cp = ext->ta.cursor.pos;
24017d30:	b282      	uxth	r2, r0
            size_t len = ext->digit_count - 1;
24017d32:	f3c3 0343 	ubfx	r3, r3, #1, #4
            if(ext->ta.cursor.pos > ext->dec_point_pos && ext->dec_point_pos != 0) cp--;
24017d36:	42a8      	cmp	r0, r5
            size_t len = ext->digit_count - 1;
24017d38:	f103 33ff 	add.w	r3, r3, #4294967295
            if(ext->ta.cursor.pos > ext->dec_point_pos && ext->dec_point_pos != 0) cp--;
24017d3c:	d904      	bls.n	24017d48 <lv_spinbox_signal+0xb4>
24017d3e:	f401 71f0 	and.w	r1, r1, #480	; 0x1e0
24017d42:	b109      	cbz	r1, 24017d48 <lv_spinbox_signal+0xb4>
24017d44:	3a01      	subs	r2, #1
24017d46:	b292      	uxth	r2, r2
            uint32_t pos = len - cp;
24017d48:	1a9b      	subs	r3, r3, r2
            if(ext->range_min < 0) pos++;
24017d4a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
            for(i = 0; i < pos; i++) ext->step *= 10;
24017d4c:	2100      	movs	r1, #0
24017d4e:	250a      	movs	r5, #10
            if(ext->range_min < 0) pos++;
24017d50:	2a00      	cmp	r2, #0
            for(i = 0; i < pos; i++) ext->step *= 10;
24017d52:	f04f 0201 	mov.w	r2, #1
            if(ext->range_min < 0) pos++;
24017d56:	bfb8      	it	lt
24017d58:	3301      	addlt	r3, #1
            for(i = 0; i < pos; i++) ext->step *= 10;
24017d5a:	b288      	uxth	r0, r1
24017d5c:	3101      	adds	r1, #1
24017d5e:	4283      	cmp	r3, r0
24017d60:	d810      	bhi.n	24017d84 <lv_spinbox_signal+0xf0>
24017d62:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
24017d66:	e7af      	b.n	24017cc8 <lv_spinbox_signal+0x34>
            else if(ext->ta.cursor.pos == (uint32_t)txt_len) {
24017d68:	4281      	cmp	r1, r0
24017d6a:	d104      	bne.n	24017d76 <lv_spinbox_signal+0xe2>
                lv_textarea_set_cursor_pos(spinbox, txt_len - 1);
24017d6c:	3901      	subs	r1, #1
                lv_textarea_set_cursor_pos(spinbox, 1);
24017d6e:	4628      	mov	r0, r5
24017d70:	f001 fc50 	bl	24019614 <lv_textarea_set_cursor_pos>
24017d74:	e7d5      	b.n	24017d22 <lv_spinbox_signal+0x8e>
            else if(ext->ta.cursor.pos == 0 && ext->range_min < 0) {
24017d76:	2900      	cmp	r1, #0
24017d78:	d1d3      	bne.n	24017d22 <lv_spinbox_signal+0x8e>
24017d7a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
24017d7c:	2b00      	cmp	r3, #0
24017d7e:	dad0      	bge.n	24017d22 <lv_spinbox_signal+0x8e>
                lv_textarea_set_cursor_pos(spinbox, 1);
24017d80:	2101      	movs	r1, #1
24017d82:	e7f4      	b.n	24017d6e <lv_spinbox_signal+0xda>
            for(i = 0; i < pos; i++) ext->step *= 10;
24017d84:	436a      	muls	r2, r5
24017d86:	e7e8      	b.n	24017d5a <lv_spinbox_signal+0xc6>
24017d88:	24035d1c 	.word	0x24035d1c
24017d8c:	900ff2ef 	.word	0x900ff2ef

24017d90 <lv_spinbox_updatevalue>:
    }

    return style_dsc_p;
}
static void lv_spinbox_updatevalue(lv_obj_t * spinbox)
{
24017d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24017d94:	b097      	sub	sp, #92	; 0x5c
24017d96:	4606      	mov	r6, r0
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017d98:	f7f1 f9df 	bl	2400915a <lv_obj_get_ext_attr>
24017d9c:	4604      	mov	r4, r0

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    _lv_memset_00(buf, sizeof(buf));
24017d9e:	2112      	movs	r1, #18
24017da0:	a801      	add	r0, sp, #4
24017da2:	f7f8 f82d 	bl	2400fe00 <_lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(ext->range_min < 0) {  // hide sign if there are only positive values
24017da6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
24017da8:	2b00      	cmp	r3, #0
24017daa:	da63      	bge.n	24017e74 <lv_spinbox_updatevalue+0xe4>
        /*Add the sign*/
        (*buf_p) = ext->value >= 0 ? '+' : '-';
24017dac:	6f63      	ldr	r3, [r4, #116]	; 0x74
    uint8_t cur_shift_left = 0;
24017dae:	2700      	movs	r7, #0
        buf_p++;
24017db0:	f10d 0205 	add.w	r2, sp, #5
        (*buf_p) = ext->value >= 0 ? '+' : '-';
24017db4:	2b00      	cmp	r3, #0
24017db6:	bfac      	ite	ge
24017db8:	232b      	movge	r3, #43	; 0x2b
24017dba:	232d      	movlt	r3, #45	; 0x2d
24017dbc:	f88d 3004 	strb.w	r3, [sp, #4]
        cur_shift_left++;
    }

    int32_t i;
    /*padding left*/
    for(i = 0; i < ext->digit_padding_left; i++) {
24017dc0:	4615      	mov	r5, r2
        (*buf_p) = ' ';
24017dc2:	2020      	movs	r0, #32
    for(i = 0; i < ext->digit_padding_left; i++) {
24017dc4:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
24017dc8:	1aa9      	subs	r1, r5, r2
24017dca:	f3c3 0343 	ubfx	r3, r3, #1, #4
24017dce:	428b      	cmp	r3, r1
24017dd0:	dc53      	bgt.n	24017e7a <lv_spinbox_updatevalue+0xea>
        buf_p++;
    }

    char digits[64];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    _lv_utils_num_to_str(ext->value < 0 ? -ext->value : ext->value, digits);
24017dd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
24017dd4:	f10d 0918 	add.w	r9, sp, #24
24017dd8:	2800      	cmp	r0, #0
24017dda:	4649      	mov	r1, r9
24017ddc:	bfb8      	it	lt
24017dde:	4240      	neglt	r0, r0
24017de0:	f7f9 f805 	bl	24010dee <_lv_utils_num_to_str>

    /*Add leading zeros*/
    int lz_cnt = ext->digit_count - (int)strlen(digits);
24017de4:	f894 8084 	ldrb.w	r8, [r4, #132]	; 0x84
24017de8:	4648      	mov	r0, r9
24017dea:	f3c8 0843 	ubfx	r8, r8, #1, #4
24017dee:	f002 fbdf 	bl	2401a5b0 <__strlen_veneer>
24017df2:	eba8 0200 	sub.w	r2, r8, r0
    if(lz_cnt > 0) {
24017df6:	2a00      	cmp	r2, #0
24017df8:	dd0a      	ble.n	24017e10 <lv_spinbox_updatevalue+0x80>
24017dfa:	3001      	adds	r0, #1
24017dfc:	4448      	add	r0, r9
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
24017dfe:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
24017e02:	4548      	cmp	r0, r9
            digits[i + lz_cnt] = digits[i];
24017e04:	5483      	strb	r3, [r0, r2]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
24017e06:	d1fa      	bne.n	24017dfe <lv_spinbox_updatevalue+0x6e>
        }
        for(i = 0; i < lz_cnt; i++) {
            digits[i] = '0';
24017e08:	2130      	movs	r1, #48	; 0x30
24017e0a:	4648      	mov	r0, r9
24017e0c:	f002 fb6a 	bl	2401a4e4 <memset>
        }
    }

    int32_t intDigits;
    intDigits = (ext->dec_point_pos == 0) ? ext->digit_count : ext->dec_point_pos;
24017e10:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
24017e14:	f403 72f0 	and.w	r2, r3, #480	; 0x1e0
24017e18:	b10a      	cbz	r2, 24017e1e <lv_spinbox_updatevalue+0x8e>
24017e1a:	f3c3 1843 	ubfx	r8, r3, #5, #4

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
24017e1e:	4649      	mov	r1, r9
24017e20:	2300      	movs	r3, #0
24017e22:	4543      	cmp	r3, r8
24017e24:	d002      	beq.n	24017e2c <lv_spinbox_updatevalue+0x9c>
24017e26:	f811 2b01 	ldrb.w	r2, [r1], #1
24017e2a:	bb4a      	cbnz	r2, 24017e80 <lv_spinbox_updatevalue+0xf0>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(ext->dec_point_pos != 0) {
24017e2c:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
24017e30:	f402 72f0 	and.w	r2, r2, #480	; 0x1e0
24017e34:	bb42      	cbnz	r2, 24017e88 <lv_spinbox_updatevalue+0xf8>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(spinbox, (char *)buf);
24017e36:	a901      	add	r1, sp, #4
24017e38:	4630      	mov	r0, r6
24017e3a:	f002 f91b 	bl	2401a074 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = ext->step;
    uint8_t cur_pos = (uint8_t)ext->digit_count;
24017e3e:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
    int32_t step    = ext->step;
24017e42:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    while(step >= 10) {
        step /= 10;
24017e46:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)ext->digit_count;
24017e48:	f3c1 0143 	ubfx	r1, r1, #1, #4
    while(step >= 10) {
24017e4c:	2b09      	cmp	r3, #9
24017e4e:	dc2c      	bgt.n	24017eaa <lv_spinbox_updatevalue+0x11a>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
24017e50:	4541      	cmp	r1, r8

    cur_pos += (ext->digit_padding_left - cur_shift_left);
24017e52:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85

    lv_textarea_set_cursor_pos(spinbox, cur_pos);
24017e56:	4630      	mov	r0, r6
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
24017e58:	bfc8      	it	gt
24017e5a:	3101      	addgt	r1, #1
    cur_pos += (ext->digit_padding_left - cur_shift_left);
24017e5c:	f3c3 0343 	ubfx	r3, r3, #1, #4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
24017e60:	bfc8      	it	gt
24017e62:	b2c9      	uxtbgt	r1, r1
    cur_pos += (ext->digit_padding_left - cur_shift_left);
24017e64:	1bdb      	subs	r3, r3, r7
24017e66:	4419      	add	r1, r3
    lv_textarea_set_cursor_pos(spinbox, cur_pos);
24017e68:	b2c9      	uxtb	r1, r1
24017e6a:	f001 fbd3 	bl	24019614 <lv_textarea_set_cursor_pos>
}
24017e6e:	b017      	add	sp, #92	; 0x5c
24017e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cur_shift_left++;
24017e74:	2701      	movs	r7, #1
    char * buf_p = buf;
24017e76:	aa01      	add	r2, sp, #4
24017e78:	e7a2      	b.n	24017dc0 <lv_spinbox_updatevalue+0x30>
        (*buf_p) = ' ';
24017e7a:	f805 0b01 	strb.w	r0, [r5], #1
    for(i = 0; i < ext->digit_padding_left; i++) {
24017e7e:	e7a1      	b.n	24017dc4 <lv_spinbox_updatevalue+0x34>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
24017e80:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
24017e82:	f805 2b01 	strb.w	r2, [r5], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
24017e86:	e7cc      	b.n	24017e22 <lv_spinbox_updatevalue+0x92>
        (*buf_p) = '.';
24017e88:	222e      	movs	r2, #46	; 0x2e
24017e8a:	f805 2b01 	strb.w	r2, [r5], #1
        for(/*Leave i*/; i < ext->digit_count && digits[i] != '\0'; i++) {
24017e8e:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
24017e92:	f3c2 0243 	ubfx	r2, r2, #1, #4
24017e96:	429a      	cmp	r2, r3
24017e98:	ddcd      	ble.n	24017e36 <lv_spinbox_updatevalue+0xa6>
24017e9a:	f819 2003 	ldrb.w	r2, [r9, r3]
24017e9e:	2a00      	cmp	r2, #0
24017ea0:	d0c9      	beq.n	24017e36 <lv_spinbox_updatevalue+0xa6>
24017ea2:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
24017ea4:	f805 2b01 	strb.w	r2, [r5], #1
        for(/*Leave i*/; i < ext->digit_count && digits[i] != '\0'; i++) {
24017ea8:	e7f1      	b.n	24017e8e <lv_spinbox_updatevalue+0xfe>
        cur_pos--;
24017eaa:	3901      	subs	r1, #1
        step /= 10;
24017eac:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
24017eb0:	b2c9      	uxtb	r1, r1
24017eb2:	e7cb      	b.n	24017e4c <lv_spinbox_updatevalue+0xbc>

24017eb4 <lv_spinbox_set_rollover>:
{
24017eb4:	b510      	push	{r4, lr}
24017eb6:	460c      	mov	r4, r1
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017eb8:	f7f1 f94f 	bl	2400915a <lv_obj_get_ext_attr>
    ext->rollover = b;
24017ebc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
24017ec0:	f364 0300 	bfi	r3, r4, #0, #1
24017ec4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
}
24017ec8:	bd10      	pop	{r4, pc}

24017eca <lv_spinbox_set_value>:
{
24017eca:	b538      	push	{r3, r4, r5, lr}
24017ecc:	4605      	mov	r5, r0
24017ece:	460c      	mov	r4, r1
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017ed0:	f7f1 f943 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) return;
24017ed4:	b168      	cbz	r0, 24017ef2 <lv_spinbox_set_value+0x28>
    ext->value = i;
24017ed6:	6f83      	ldr	r3, [r0, #120]	; 0x78
24017ed8:	429c      	cmp	r4, r3
24017eda:	bfa8      	it	ge
24017edc:	461c      	movge	r4, r3
24017ede:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
24017ee0:	429c      	cmp	r4, r3
24017ee2:	bfac      	ite	ge
24017ee4:	6744      	strge	r4, [r0, #116]	; 0x74
24017ee6:	6743      	strlt	r3, [r0, #116]	; 0x74
    lv_spinbox_updatevalue(spinbox);
24017ee8:	4628      	mov	r0, r5
}
24017eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(spinbox);
24017eee:	f7ff bf4f 	b.w	24017d90 <lv_spinbox_updatevalue>
}
24017ef2:	bd38      	pop	{r3, r4, r5, pc}

24017ef4 <lv_spinbox_set_digit_format>:
{
24017ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24017ef8:	4606      	mov	r6, r0
24017efa:	4688      	mov	r8, r1
24017efc:	4617      	mov	r7, r2
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017efe:	f7f1 f92c 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) return;
24017f02:	4604      	mov	r4, r0
24017f04:	b388      	cbz	r0, 24017f6a <lv_spinbox_set_digit_format+0x76>
    if(digit_count > LV_SPINBOX_MAX_DIGIT_COUNT) digit_count = LV_SPINBOX_MAX_DIGIT_COUNT;
24017f06:	4645      	mov	r5, r8
24017f08:	2d0a      	cmp	r5, #10
24017f0a:	bf28      	it	cs
24017f0c:	250a      	movcs	r5, #10
    if(separator_position >= digit_count) separator_position = 0;
24017f0e:	42bd      	cmp	r5, r7
24017f10:	bf98      	it	ls
24017f12:	2700      	movls	r7, #0
    if(digit_count < LV_SPINBOX_MAX_DIGIT_COUNT) {
24017f14:	f1b8 0f09 	cmp.w	r8, #9
24017f18:	d816      	bhi.n	24017f48 <lv_spinbox_set_digit_format+0x54>
        int64_t max_val = _lv_pow(10, digit_count);
24017f1a:	b26a      	sxtb	r2, r5
24017f1c:	200a      	movs	r0, #10
24017f1e:	2100      	movs	r1, #0
24017f20:	f7f7 fcd6 	bl	2400f8d0 <_lv_pow>
        if(ext->range_max > max_val - 1) ext->range_max = max_val - 1;
24017f24:	6fa2      	ldr	r2, [r4, #120]	; 0x78
24017f26:	17d3      	asrs	r3, r2, #31
24017f28:	4282      	cmp	r2, r0
24017f2a:	418b      	sbcs	r3, r1
24017f2c:	bfa4      	itt	ge
24017f2e:	f100 33ff 	addge.w	r3, r0, #4294967295
24017f32:	67a3      	strge	r3, [r4, #120]	; 0x78
        if(ext->range_min < - max_val  + 1) ext->range_min = - max_val  + 1;
24017f34:	f1d0 0001 	rsbs	r0, r0, #1
24017f38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
24017f3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24017f3e:	17da      	asrs	r2, r3, #31
24017f40:	4283      	cmp	r3, r0
24017f42:	418a      	sbcs	r2, r1
24017f44:	bfb8      	it	lt
24017f46:	67e0      	strlt	r0, [r4, #124]	; 0x7c
    ext->digit_count   = digit_count;
24017f48:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
24017f4c:	f007 070f 	and.w	r7, r7, #15
24017f50:	006d      	lsls	r5, r5, #1
    lv_spinbox_updatevalue(spinbox);
24017f52:	4630      	mov	r0, r6
    ext->digit_count   = digit_count;
24017f54:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
24017f58:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
24017f5c:	431d      	orrs	r5, r3
24017f5e:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
}
24017f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_spinbox_updatevalue(spinbox);
24017f66:	f7ff bf13 	b.w	24017d90 <lv_spinbox_updatevalue>
}
24017f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

24017f6e <lv_spinbox_set_step>:
{
24017f6e:	b538      	push	{r3, r4, r5, lr}
24017f70:	4604      	mov	r4, r0
24017f72:	460d      	mov	r5, r1
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017f74:	f7f1 f8f1 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) return;
24017f78:	b130      	cbz	r0, 24017f88 <lv_spinbox_set_step+0x1a>
    ext->step = step;
24017f7a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    lv_spinbox_updatevalue(spinbox);
24017f7e:	4620      	mov	r0, r4
}
24017f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(spinbox);
24017f84:	f7ff bf04 	b.w	24017d90 <lv_spinbox_updatevalue>
}
24017f88:	bd38      	pop	{r3, r4, r5, pc}

24017f8a <lv_spinbox_set_range>:
{
24017f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24017f8c:	4605      	mov	r5, r0
24017f8e:	460f      	mov	r7, r1
24017f90:	4616      	mov	r6, r2
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24017f92:	f7f1 f8e2 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext == NULL) return;
24017f96:	4604      	mov	r4, r0
24017f98:	b1a8      	cbz	r0, 24017fc6 <lv_spinbox_set_range+0x3c>
    if(ext->value > ext->range_max) {
24017f9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
24017f9c:	42b3      	cmp	r3, r6
    ext->range_min = range_min;
24017f9e:	e9c0 671e 	strd	r6, r7, [r0, #120]	; 0x78
    if(ext->value > ext->range_max) {
24017fa2:	dd03      	ble.n	24017fac <lv_spinbox_set_range+0x22>
        ext->value = ext->range_max;
24017fa4:	6746      	str	r6, [r0, #116]	; 0x74
        lv_obj_invalidate(spinbox);
24017fa6:	4628      	mov	r0, r5
24017fa8:	f7f0 f81c 	bl	24007fe4 <lv_obj_invalidate>
    if(ext->value < ext->range_min) {
24017fac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
24017fae:	6f62      	ldr	r2, [r4, #116]	; 0x74
24017fb0:	429a      	cmp	r2, r3
24017fb2:	da03      	bge.n	24017fbc <lv_spinbox_set_range+0x32>
        lv_obj_invalidate(spinbox);
24017fb4:	4628      	mov	r0, r5
        ext->value = ext->range_min;
24017fb6:	6763      	str	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(spinbox);
24017fb8:	f7f0 f814 	bl	24007fe4 <lv_obj_invalidate>
    lv_spinbox_updatevalue(spinbox);
24017fbc:	4628      	mov	r0, r5
}
24017fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_spinbox_updatevalue(spinbox);
24017fc2:	f7ff bee5 	b.w	24017d90 <lv_spinbox_updatevalue>
}
24017fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24017fc8 <lv_spinbox_create>:
{
24017fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24017fcc:	460e      	mov	r6, r1
    lv_obj_t * spinbox = lv_textarea_create(par, copy);
24017fce:	f001 fe03 	bl	24019bd8 <lv_textarea_create>
    if(spinbox == NULL) return NULL;
24017fd2:	4604      	mov	r4, r0
24017fd4:	b140      	cbz	r0, 24017fe8 <lv_spinbox_create+0x20>
    lv_spinbox_ext_t * ext = lv_obj_allocate_ext_attr(spinbox, sizeof(lv_spinbox_ext_t));
24017fd6:	2188      	movs	r1, #136	; 0x88
24017fd8:	f7ef ff18 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24017fdc:	4605      	mov	r5, r0
24017fde:	b930      	cbnz	r0, 24017fee <lv_spinbox_create+0x26>
        lv_obj_del(spinbox);
24017fe0:	4620      	mov	r0, r4
        return NULL;
24017fe2:	462c      	mov	r4, r5
        lv_obj_del(spinbox);
24017fe4:	f7f0 f918 	bl	24008218 <lv_obj_del>
}
24017fe8:	4620      	mov	r0, r4
24017fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(spinbox);
24017fee:	4f38      	ldr	r7, [pc, #224]	; (240180d0 <lv_spinbox_create+0x108>)
24017ff0:	683b      	ldr	r3, [r7, #0]
24017ff2:	b91b      	cbnz	r3, 24017ffc <lv_spinbox_create+0x34>
24017ff4:	4620      	mov	r0, r4
24017ff6:	f7f1 f8ac 	bl	24009152 <lv_obj_get_signal_cb>
24017ffa:	6038      	str	r0, [r7, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(spinbox);
24017ffc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 240180e0 <lv_spinbox_create+0x118>
24018000:	f8d8 3000 	ldr.w	r3, [r8]
24018004:	b923      	cbnz	r3, 24018010 <lv_spinbox_create+0x48>
24018006:	4620      	mov	r0, r4
24018008:	f7f1 f8a5 	bl	24009156 <lv_obj_get_design_cb>
2401800c:	f8c8 0000 	str.w	r0, [r8]
    ext->range_max          = 99999;
24018010:	2200      	movs	r2, #0
24018012:	4b30      	ldr	r3, [pc, #192]	; (240180d4 <lv_spinbox_create+0x10c>)
    ext->step               = 1;
24018014:	2701      	movs	r7, #1
    lv_obj_set_signal_cb(spinbox, lv_spinbox_signal);
24018016:	4930      	ldr	r1, [pc, #192]	; (240180d8 <lv_spinbox_create+0x110>)
24018018:	4620      	mov	r0, r4
    ext->range_max          = 99999;
2401801a:	e9c5 231d 	strd	r2, r3, [r5, #116]	; 0x74
    ext->step               = 1;
2401801e:	4b2f      	ldr	r3, [pc, #188]	; (240180dc <lv_spinbox_create+0x114>)
24018020:	e9c5 371f 	strd	r3, r7, [r5, #124]	; 0x7c
    ext->rollover           = false;
24018024:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
24018028:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
2401802c:	f023 031f 	bic.w	r3, r3, #31
24018030:	f043 030a 	orr.w	r3, r3, #10
24018034:	f8a5 3084 	strh.w	r3, [r5, #132]	; 0x84
    lv_obj_set_signal_cb(spinbox, lv_spinbox_signal);
24018038:	f7ef fede 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(spinbox, ancestor_design); /*Leave the Text area's design function*/
2401803c:	f8d8 1000 	ldr.w	r1, [r8]
24018040:	4620      	mov	r0, r4
24018042:	f7ef fee1 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24018046:	b9ce      	cbnz	r6, 2401807c <lv_spinbox_create+0xb4>
        lv_obj_set_click(lv_page_get_scrollable(spinbox), false);
24018048:	4620      	mov	r0, r4
2401804a:	f7ff fa23 	bl	24017494 <lv_page_get_scrollable>
2401804e:	4631      	mov	r1, r6
24018050:	f7ef fe33 	bl	24007cba <lv_obj_set_click>
        lv_textarea_set_one_line(spinbox, true);
24018054:	4639      	mov	r1, r7
24018056:	4620      	mov	r0, r4
24018058:	f001 fd4a 	bl	24019af0 <lv_textarea_set_one_line>
        lv_textarea_set_cursor_click_pos(spinbox, true);
2401805c:	4639      	mov	r1, r7
2401805e:	4620      	mov	r0, r4
24018060:	f001 f9b2 	bl	240193c8 <lv_textarea_set_cursor_click_pos>
        lv_obj_set_width(spinbox, LV_DPI);
24018064:	2182      	movs	r1, #130	; 0x82
24018066:	4620      	mov	r0, r4
24018068:	f7f0 f8c4 	bl	240081f4 <lv_obj_set_width>
        lv_theme_apply(spinbox, LV_THEME_SPINBOX);
2401806c:	210d      	movs	r1, #13
2401806e:	4620      	mov	r0, r4
24018070:	f7f8 ff28 	bl	24010ec4 <lv_theme_apply>
    lv_spinbox_updatevalue(spinbox);
24018074:	4620      	mov	r0, r4
24018076:	f7ff fe8b 	bl	24017d90 <lv_spinbox_updatevalue>
    return spinbox;
2401807a:	e7b5      	b.n	24017fe8 <lv_spinbox_create+0x20>
        lv_spinbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
2401807c:	4630      	mov	r0, r6
2401807e:	f7f1 f86c 	bl	2400915a <lv_obj_get_ext_attr>
24018082:	4605      	mov	r5, r0
        lv_spinbox_set_value(spinbox, copy_ext->value);
24018084:	6f41      	ldr	r1, [r0, #116]	; 0x74
24018086:	4620      	mov	r0, r4
24018088:	f7ff ff1f 	bl	24017eca <lv_spinbox_set_value>
        lv_spinbox_set_digit_format(spinbox, (uint8_t)copy_ext->digit_count, (uint8_t)copy_ext->dec_point_pos);
2401808c:	f8b5 2084 	ldrh.w	r2, [r5, #132]	; 0x84
24018090:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
24018094:	4620      	mov	r0, r4
24018096:	f3c2 1243 	ubfx	r2, r2, #5, #4
2401809a:	f3c1 0143 	ubfx	r1, r1, #1, #4
2401809e:	f7ff ff29 	bl	24017ef4 <lv_spinbox_set_digit_format>
        lv_spinbox_set_range(spinbox, copy_ext->range_min, copy_ext->range_max);
240180a2:	4620      	mov	r0, r4
240180a4:	e9d5 211e 	ldrd	r2, r1, [r5, #120]	; 0x78
240180a8:	f7ff ff6f 	bl	24017f8a <lv_spinbox_set_range>
        lv_spinbox_set_step(spinbox, copy_ext->step);
240180ac:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
240180b0:	4620      	mov	r0, r4
240180b2:	f7ff ff5c 	bl	24017f6e <lv_spinbox_set_step>
        lv_spinbox_set_rollover(spinbox, copy_ext->rollover);
240180b6:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
240180ba:	4620      	mov	r0, r4
240180bc:	f001 0101 	and.w	r1, r1, #1
240180c0:	f7ff fef8 	bl	24017eb4 <lv_spinbox_set_rollover>
        lv_obj_refresh_style(spinbox, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
240180c4:	22ff      	movs	r2, #255	; 0xff
240180c6:	4620      	mov	r0, r4
240180c8:	4611      	mov	r1, r2
240180ca:	f7f0 fef9 	bl	24008ec0 <lv_obj_refresh_style>
240180ce:	e7d1      	b.n	24018074 <lv_spinbox_create+0xac>
240180d0:	24035d1c 	.word	0x24035d1c
240180d4:	0001869f 	.word	0x0001869f
240180d8:	24017c95 	.word	0x24017c95
240180dc:	fffe7961 	.word	0xfffe7961
240180e0:	24035d18 	.word	0x24035d18

240180e4 <lv_spinbox_get_value>:
{
240180e4:	b508      	push	{r3, lr}
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
240180e6:	f7f1 f838 	bl	2400915a <lv_obj_get_ext_attr>
}
240180ea:	6f40      	ldr	r0, [r0, #116]	; 0x74
240180ec:	bd08      	pop	{r3, pc}

240180ee <lv_spinbox_increment>:
{
240180ee:	b538      	push	{r3, r4, r5, lr}
240180f0:	4604      	mov	r4, r0
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
240180f2:	f7f1 f832 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->value + ext->step <= ext->range_max) {
240180f6:	6f42      	ldr	r2, [r0, #116]	; 0x74
240180f8:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
240180fc:	6f83      	ldr	r3, [r0, #120]	; 0x78
240180fe:	1855      	adds	r5, r2, r1
24018100:	429d      	cmp	r5, r3
24018102:	dc0d      	bgt.n	24018120 <lv_spinbox_increment+0x32>
        if((ext->value + ext->step) > 0 && ext->value < 0) ext->value = -ext->value;
24018104:	2d00      	cmp	r5, #0
24018106:	dd03      	ble.n	24018110 <lv_spinbox_increment+0x22>
24018108:	2a00      	cmp	r2, #0
2401810a:	bfbc      	itt	lt
2401810c:	4252      	neglt	r2, r2
2401810e:	6742      	strlt	r2, [r0, #116]	; 0x74
        ext->value += ext->step;
24018110:	6f43      	ldr	r3, [r0, #116]	; 0x74
24018112:	440b      	add	r3, r1
24018114:	6743      	str	r3, [r0, #116]	; 0x74
    lv_spinbox_updatevalue(spinbox);
24018116:	4620      	mov	r0, r4
}
24018118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(spinbox);
2401811c:	f7ff be38 	b.w	24017d90 <lv_spinbox_updatevalue>
        if((ext->rollover) && (ext->value == ext->range_max))
24018120:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
24018124:	07c9      	lsls	r1, r1, #31
24018126:	d5f5      	bpl.n	24018114 <lv_spinbox_increment+0x26>
24018128:	429a      	cmp	r2, r3
            ext->value = ext->range_min;
2401812a:	bf08      	it	eq
2401812c:	6fc3      	ldreq	r3, [r0, #124]	; 0x7c
2401812e:	e7f1      	b.n	24018114 <lv_spinbox_increment+0x26>

24018130 <lv_spinbox_decrement>:
{
24018130:	b538      	push	{r3, r4, r5, lr}
24018132:	4604      	mov	r4, r0
    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
24018134:	f7f1 f811 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->value - ext->step >= ext->range_min) {
24018138:	6f42      	ldr	r2, [r0, #116]	; 0x74
2401813a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
2401813e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
24018140:	1a55      	subs	r5, r2, r1
24018142:	429d      	cmp	r5, r3
24018144:	db0d      	blt.n	24018162 <lv_spinbox_decrement+0x32>
        if((ext->value - ext->step) < 0 && ext->value > 0) ext->value = -ext->value;
24018146:	2d00      	cmp	r5, #0
24018148:	da03      	bge.n	24018152 <lv_spinbox_decrement+0x22>
2401814a:	2a00      	cmp	r2, #0
2401814c:	bfc4      	itt	gt
2401814e:	4252      	neggt	r2, r2
24018150:	6742      	strgt	r2, [r0, #116]	; 0x74
        ext->value -= ext->step;
24018152:	6f43      	ldr	r3, [r0, #116]	; 0x74
24018154:	1a5b      	subs	r3, r3, r1
24018156:	6743      	str	r3, [r0, #116]	; 0x74
    lv_spinbox_updatevalue(spinbox);
24018158:	4620      	mov	r0, r4
}
2401815a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(spinbox);
2401815e:	f7ff be17 	b.w	24017d90 <lv_spinbox_updatevalue>
        if((ext->rollover) && (ext->value == ext->range_min))
24018162:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
24018166:	07c9      	lsls	r1, r1, #31
24018168:	d5f5      	bpl.n	24018156 <lv_spinbox_decrement+0x26>
2401816a:	429a      	cmp	r2, r3
            ext->value = ext->range_max;
2401816c:	bf08      	it	eq
2401816e:	6f83      	ldreq	r3, [r0, #120]	; 0x78
24018170:	e7f1      	b.n	24018156 <lv_spinbox_decrement+0x26>
	...

24018174 <lv_switch_design>:
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_switch_design(lv_obj_t * sw, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
24018174:	2a02      	cmp	r2, #2
{
24018176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401817a:	4604      	mov	r4, r0
2401817c:	b099      	sub	sp, #100	; 0x64
2401817e:	460e      	mov	r6, r1
24018180:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
24018182:	d07d      	beq.n	24018280 <lv_switch_design+0x10c>
        return LV_DESIGN_RES_NOT_COVER;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
24018184:	2a00      	cmp	r2, #0
24018186:	f040 8087 	bne.w	24018298 <lv_switch_design+0x124>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(sw);
2401818a:	f7f0 faac 	bl	240086e6 <lv_obj_get_base_dir>

        /*The ancestor design function will draw the background and the indicator.
         * It also sets ext->bar.indic_area*/
        ancestor_design(sw, clip_area, mode);
2401818e:	4b47      	ldr	r3, [pc, #284]	; (240182ac <lv_switch_design+0x138>)
24018190:	462a      	mov	r2, r5
24018192:	4631      	mov	r1, r6
24018194:	681b      	ldr	r3, [r3, #0]
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(sw);
24018196:	4680      	mov	r8, r0
        ancestor_design(sw, clip_area, mode);
24018198:	4620      	mov	r0, r4
2401819a:	4798      	blx	r3

        lv_switch_ext_t * ext = lv_obj_get_ext_attr(sw);
2401819c:	4620      	mov	r0, r4
2401819e:	f7f0 ffdc 	bl	2400915a <lv_obj_get_ext_attr>
240181a2:	4682      	mov	sl, r0

        lv_coord_t objw = lv_obj_get_width(sw);
240181a4:	4620      	mov	r0, r4
240181a6:	f7f0 fa32 	bl	2400860e <lv_obj_get_width>
240181aa:	4681      	mov	r9, r0
        lv_coord_t objh = lv_obj_get_height(sw);
240181ac:	4620      	mov	r0, r4
240181ae:	f7f0 fa34 	bl	2400861a <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240181b2:	2212      	movs	r2, #18
240181b4:	4607      	mov	r7, r0
240181b6:	4629      	mov	r1, r5
240181b8:	4620      	mov	r0, r4
240181ba:	f7f0 fae5 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240181be:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240181c0:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240181c2:	4629      	mov	r1, r5
240181c4:	4620      	mov	r0, r4
240181c6:	f7f0 fadf 	bl	24008788 <_lv_obj_get_style_int>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240181ca:	f8ba 100c 	ldrh.w	r1, [sl, #12]
240181ce:	f8ba 2008 	ldrh.w	r2, [sl, #8]
        lv_area_t knob_area;

        lv_style_int_t bg_left = lv_obj_get_style_pad_left(sw,   LV_SWITCH_PART_BG);
        lv_style_int_t bg_right = lv_obj_get_style_pad_right(sw,  LV_SWITCH_PART_BG);

        lv_coord_t max_indic_w = objw - bg_left - bg_right;
240181d2:	4458      	add	r0, fp
240181d4:	1c4b      	adds	r3, r1, #1
        lv_coord_t act_indic_w = lv_area_get_width(&ext->bar.indic_area);
        if(base_dir != LV_BIDI_DIR_RTL) {
240181d6:	f1b8 0f01 	cmp.w	r8, #1
        lv_coord_t max_indic_w = objw - bg_left - bg_right;
240181da:	eba9 0c00 	sub.w	ip, r9, r0
240181de:	eba3 0302 	sub.w	r3, r3, r2
240181e2:	fa0f fc8c 	sxth.w	ip, ip
240181e6:	b21b      	sxth	r3, r3
        if(base_dir != LV_BIDI_DIR_RTL) {
240181e8:	fb07 f303 	mul.w	r3, r7, r3
            knob_area.x1 = ext->bar.indic_area.x2 - ((act_indic_w * knob_size) / max_indic_w);
240181ec:	fb93 f3fc 	sdiv	r3, r3, ip
        if(base_dir != LV_BIDI_DIR_RTL) {
240181f0:	d04a      	beq.n	24018288 <lv_switch_design+0x114>
            knob_area.x1 = ext->bar.indic_area.x2 - ((act_indic_w * knob_size) / max_indic_w);
240181f2:	1acb      	subs	r3, r1, r3
240181f4:	b29b      	uxth	r3, r3
240181f6:	f8ad 3004 	strh.w	r3, [sp, #4]
            knob_area.x2 = knob_area.x1 + knob_size;
240181fa:	443b      	add	r3, r7
240181fc:	f8ad 3008 	strh.w	r3, [sp, #8]
        else {
            knob_area.x2 = ext->bar.indic_area.x1 + ((act_indic_w * knob_size) / max_indic_w);
            knob_area.x1 = knob_area.x2 - knob_size;
        }

        knob_area.y1 = sw->coords.y1;
24018200:	8a63      	ldrh	r3, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018202:	2212      	movs	r2, #18
24018204:	2102      	movs	r1, #2
24018206:	4620      	mov	r0, r4
24018208:	f8ad 3006 	strh.w	r3, [sp, #6]
        knob_area.y2 = sw->coords.y2;
2401820c:	8ae3      	ldrh	r3, [r4, #22]
2401820e:	f8ad 300a 	strh.w	r3, [sp, #10]
24018212:	f7f0 fab9 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24018216:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018218:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2401821a:	2102      	movs	r1, #2
2401821c:	4620      	mov	r0, r4
2401821e:	f7f0 fab3 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24018222:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24018224:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24018226:	2102      	movs	r1, #2
24018228:	4620      	mov	r0, r4
2401822a:	f7f0 faad 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401822e:	2211      	movs	r2, #17
24018230:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24018232:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24018234:	4620      	mov	r0, r4
24018236:	f7f0 faa7 	bl	24008788 <_lv_obj_get_style_int>
        lv_style_int_t knob_right = lv_obj_get_style_pad_right(sw,  LV_SWITCH_PART_KNOB);
        lv_style_int_t knob_top = lv_obj_get_style_pad_top(sw,    LV_SWITCH_PART_KNOB);
        lv_style_int_t knob_bottom = lv_obj_get_style_pad_bottom(sw, LV_SWITCH_PART_KNOB);

        /*Apply the paddings on the knob area*/
        knob_area.x1 -= knob_left;
2401823a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401823e:	eba3 0309 	sub.w	r3, r3, r9
24018242:	f8ad 3004 	strh.w	r3, [sp, #4]
        knob_area.x2 += knob_right;
24018246:	f8bd 3008 	ldrh.w	r3, [sp, #8]
2401824a:	441f      	add	r7, r3
        knob_area.y1 -= knob_top;
2401824c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24018250:	eba3 0308 	sub.w	r3, r3, r8
        knob_area.x2 += knob_right;
24018254:	f8ad 7008 	strh.w	r7, [sp, #8]
        knob_area.y1 -= knob_top;
24018258:	f8ad 3006 	strh.w	r3, [sp, #6]
        knob_area.y2 += knob_bottom;
2401825c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
24018260:	4418      	add	r0, r3
24018262:	f8ad 000a 	strh.w	r0, [sp, #10]

        lv_draw_rect_dsc_t knob_rect_dsc;
        lv_draw_rect_dsc_init(&knob_rect_dsc);
24018266:	a803      	add	r0, sp, #12
24018268:	f7f5 fbfc 	bl	2400da64 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(sw, LV_SWITCH_PART_KNOB, &knob_rect_dsc);
2401826c:	aa03      	add	r2, sp, #12
2401826e:	2102      	movs	r1, #2
24018270:	4620      	mov	r0, r4
24018272:	f7f0 ffb4 	bl	240091de <lv_obj_init_draw_rect_dsc>

        lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
24018276:	aa03      	add	r2, sp, #12
24018278:	4631      	mov	r1, r6
2401827a:	a801      	add	r0, sp, #4
2401827c:	f7f5 fc16 	bl	2400daac <lv_draw_rect>
    else if(mode == LV_DESIGN_DRAW_POST) {
        return ancestor_design(sw, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
}
24018280:	4628      	mov	r0, r5
24018282:	b019      	add	sp, #100	; 0x64
24018284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            knob_area.x2 = ext->bar.indic_area.x1 + ((act_indic_w * knob_size) / max_indic_w);
24018288:	4413      	add	r3, r2
2401828a:	b29b      	uxth	r3, r3
2401828c:	f8ad 3008 	strh.w	r3, [sp, #8]
            knob_area.x1 = knob_area.x2 - knob_size;
24018290:	1bdb      	subs	r3, r3, r7
24018292:	f8ad 3004 	strh.w	r3, [sp, #4]
24018296:	e7b3      	b.n	24018200 <lv_switch_design+0x8c>
    else if(mode == LV_DESIGN_DRAW_POST) {
24018298:	2a01      	cmp	r2, #1
2401829a:	d105      	bne.n	240182a8 <lv_switch_design+0x134>
        return ancestor_design(sw, clip_area, mode);
2401829c:	4b03      	ldr	r3, [pc, #12]	; (240182ac <lv_switch_design+0x138>)
2401829e:	681b      	ldr	r3, [r3, #0]
}
240182a0:	b019      	add	sp, #100	; 0x64
240182a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return ancestor_design(sw, clip_area, mode);
240182a6:	4718      	bx	r3
    return LV_DESIGN_RES_OK;
240182a8:	2500      	movs	r5, #0
240182aa:	e7e9      	b.n	24018280 <lv_switch_design+0x10c>
240182ac:	24035d20 	.word	0x24035d20

240182b0 <lv_switch_create>:
{
240182b0:	b570      	push	{r4, r5, r6, lr}
240182b2:	460e      	mov	r6, r1
    lv_obj_t * sw = lv_bar_create(par, copy);
240182b4:	f7fb fa3e 	bl	24013734 <lv_bar_create>
    if(sw == NULL) return NULL;
240182b8:	4604      	mov	r4, r0
240182ba:	b1b0      	cbz	r0, 240182ea <lv_switch_create+0x3a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(sw);
240182bc:	4d3a      	ldr	r5, [pc, #232]	; (240183a8 <lv_switch_create+0xf8>)
240182be:	682b      	ldr	r3, [r5, #0]
240182c0:	b913      	cbnz	r3, 240182c8 <lv_switch_create+0x18>
240182c2:	f7f0 ff46 	bl	24009152 <lv_obj_get_signal_cb>
240182c6:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(sw);
240182c8:	4d38      	ldr	r5, [pc, #224]	; (240183ac <lv_switch_create+0xfc>)
240182ca:	682b      	ldr	r3, [r5, #0]
240182cc:	b91b      	cbnz	r3, 240182d6 <lv_switch_create+0x26>
240182ce:	4620      	mov	r0, r4
240182d0:	f7f0 ff41 	bl	24009156 <lv_obj_get_design_cb>
240182d4:	6028      	str	r0, [r5, #0]
    lv_switch_ext_t * ext = lv_obj_allocate_ext_attr(sw, sizeof(lv_switch_ext_t));
240182d6:	2124      	movs	r1, #36	; 0x24
240182d8:	4620      	mov	r0, r4
240182da:	f7ef fd97 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
240182de:	4605      	mov	r5, r0
240182e0:	b928      	cbnz	r0, 240182ee <lv_switch_create+0x3e>
        lv_obj_del(sw);
240182e2:	4620      	mov	r0, r4
        return NULL;
240182e4:	462c      	mov	r4, r5
        lv_obj_del(sw);
240182e6:	f7ef ff97 	bl	24008218 <lv_obj_del>
}
240182ea:	4620      	mov	r0, r4
240182ec:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_list_init(&ext->style_knob);
240182ee:	351c      	adds	r5, #28
240182f0:	4628      	mov	r0, r5
240182f2:	f7f2 f967 	bl	2400a5c4 <lv_style_list_init>
    lv_obj_set_signal_cb(sw, lv_switch_signal);
240182f6:	492e      	ldr	r1, [pc, #184]	; (240183b0 <lv_switch_create+0x100>)
240182f8:	4620      	mov	r0, r4
240182fa:	f7ef fd7d 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(sw, lv_switch_design);
240182fe:	492d      	ldr	r1, [pc, #180]	; (240183b4 <lv_switch_create+0x104>)
24018300:	4620      	mov	r0, r4
24018302:	f7ef fd81 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24018306:	2e00      	cmp	r6, #0
24018308:	d140      	bne.n	2401838c <lv_switch_create+0xdc>
        lv_obj_set_click(sw, true);
2401830a:	2101      	movs	r1, #1
2401830c:	4620      	mov	r0, r4
2401830e:	f7ef fcd4 	bl	24007cba <lv_obj_set_click>
        lv_obj_add_protect(sw, LV_PROTECT_PRESS_LOST);
24018312:	2110      	movs	r1, #16
24018314:	4620      	mov	r0, r4
24018316:	f7ef fd0c 	bl	24007d32 <lv_obj_add_protect>
        lv_obj_set_size(sw, LV_DPX(60), LV_DPX(35));
2401831a:	4630      	mov	r0, r6
2401831c:	f7f6 fd6a 	bl	2400edf4 <lv_disp_get_dpi>
24018320:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
24018324:	009b      	lsls	r3, r3, #2
24018326:	2bef      	cmp	r3, #239	; 0xef
24018328:	dd2c      	ble.n	24018384 <lv_switch_create+0xd4>
2401832a:	4630      	mov	r0, r6
2401832c:	2550      	movs	r5, #80	; 0x50
2401832e:	f7f6 fd61 	bl	2400edf4 <lv_disp_get_dpi>
24018332:	233c      	movs	r3, #60	; 0x3c
24018334:	fb00 5503 	mla	r5, r0, r3, r5
24018338:	23a0      	movs	r3, #160	; 0xa0
2401833a:	fb95 f5f3 	sdiv	r5, r5, r3
2401833e:	b22d      	sxth	r5, r5
24018340:	2000      	movs	r0, #0
24018342:	f7f6 fd57 	bl	2400edf4 <lv_disp_get_dpi>
24018346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
2401834a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
2401834e:	28ef      	cmp	r0, #239	; 0xef
24018350:	dd1a      	ble.n	24018388 <lv_switch_create+0xd8>
24018352:	2000      	movs	r0, #0
24018354:	f7f6 fd4e 	bl	2400edf4 <lv_disp_get_dpi>
24018358:	2323      	movs	r3, #35	; 0x23
2401835a:	2250      	movs	r2, #80	; 0x50
2401835c:	fb00 2203 	mla	r2, r0, r3, r2
24018360:	23a0      	movs	r3, #160	; 0xa0
24018362:	fb92 f2f3 	sdiv	r2, r2, r3
24018366:	b212      	sxth	r2, r2
24018368:	4629      	mov	r1, r5
2401836a:	4620      	mov	r0, r4
2401836c:	f7ef ff00 	bl	24008170 <lv_obj_set_size>
        lv_bar_set_range(sw, 0, 1);
24018370:	4620      	mov	r0, r4
24018372:	2201      	movs	r2, #1
24018374:	2100      	movs	r1, #0
24018376:	f7fb fa64 	bl	24013842 <lv_bar_set_range>
        lv_theme_apply(sw, LV_THEME_SWITCH);
2401837a:	210f      	movs	r1, #15
2401837c:	4620      	mov	r0, r4
2401837e:	f7f8 fda1 	bl	24010ec4 <lv_theme_apply>
24018382:	e7b2      	b.n	240182ea <lv_switch_create+0x3a>
        lv_obj_set_size(sw, LV_DPX(60), LV_DPX(35));
24018384:	2501      	movs	r5, #1
24018386:	e7db      	b.n	24018340 <lv_switch_create+0x90>
24018388:	2201      	movs	r2, #1
2401838a:	e7ed      	b.n	24018368 <lv_switch_create+0xb8>
        lv_switch_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
2401838c:	4630      	mov	r0, r6
2401838e:	f7f0 fee4 	bl	2400915a <lv_obj_get_ext_attr>
        lv_style_list_copy(&ext->style_knob, &copy_ext->style_knob);
24018392:	f100 011c 	add.w	r1, r0, #28
24018396:	4628      	mov	r0, r5
24018398:	f7f2 fb96 	bl	2400aac8 <lv_style_list_copy>
        lv_obj_refresh_style(sw, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
2401839c:	22ff      	movs	r2, #255	; 0xff
2401839e:	4620      	mov	r0, r4
240183a0:	4611      	mov	r1, r2
240183a2:	f7f0 fd8d 	bl	24008ec0 <lv_obj_refresh_style>
240183a6:	e7a0      	b.n	240182ea <lv_switch_create+0x3a>
240183a8:	24035d24 	.word	0x24035d24
240183ac:	24035d20 	.word	0x24035d20
240183b0:	24018401 	.word	0x24018401
240183b4:	24018175 	.word	0x24018175

240183b8 <lv_switch_on>:
{
240183b8:	b510      	push	{r4, lr}
240183ba:	4604      	mov	r4, r0
    if(lv_bar_get_value(sw) == 1)
240183bc:	f7fb fa34 	bl	24013828 <lv_bar_get_value>
240183c0:	2801      	cmp	r0, #1
240183c2:	d00a      	beq.n	240183da <lv_switch_on+0x22>
    lv_bar_set_value(sw, 1, anim);
240183c4:	4620      	mov	r0, r4
240183c6:	2101      	movs	r1, #1
240183c8:	2200      	movs	r2, #0
240183ca:	f7fb f991 	bl	240136f0 <lv_bar_set_value>
    lv_obj_add_state(sw, LV_STATE_CHECKED);
240183ce:	4620      	mov	r0, r4
240183d0:	2101      	movs	r1, #1
}
240183d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_state(sw, LV_STATE_CHECKED);
240183d6:	f7f1 baea 	b.w	240099ae <lv_obj_add_state>
}
240183da:	bd10      	pop	{r4, pc}

240183dc <lv_switch_off>:
{
240183dc:	b510      	push	{r4, lr}
240183de:	4604      	mov	r4, r0
    if(lv_bar_get_value(sw) == 0)
240183e0:	f7fb fa22 	bl	24013828 <lv_bar_get_value>
240183e4:	b150      	cbz	r0, 240183fc <lv_switch_off+0x20>
    lv_bar_set_value(sw, 0, anim);
240183e6:	2200      	movs	r2, #0
240183e8:	4620      	mov	r0, r4
240183ea:	4611      	mov	r1, r2
240183ec:	f7fb f980 	bl	240136f0 <lv_bar_set_value>
    lv_obj_clear_state(sw, LV_STATE_CHECKED);
240183f0:	4620      	mov	r0, r4
240183f2:	2101      	movs	r1, #1
}
240183f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_clear_state(sw, LV_STATE_CHECKED);
240183f8:	f7f1 bae3 	b.w	240099c2 <lv_obj_clear_state>
}
240183fc:	bd10      	pop	{r4, pc}
	...

24018400 <lv_switch_signal>:
 */
static lv_res_t lv_switch_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
    lv_res_t res;

    if(sign == LV_SIGNAL_GET_STYLE) {
24018400:	2908      	cmp	r1, #8
{
24018402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24018406:	4606      	mov	r6, r0
24018408:	460c      	mov	r4, r1
2401840a:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
2401840c:	d11c      	bne.n	24018448 <lv_switch_signal+0x48>
        lv_get_style_info_t * info = param;
        info->result = lv_switch_get_style(sw, info->part);
2401840e:	7815      	ldrb	r5, [r2, #0]

static lv_style_list_t * lv_switch_get_style(lv_obj_t * sw, uint8_t part)
{
    LV_ASSERT_OBJ(sw, LV_OBJX_NAME);

    lv_switch_ext_t * ext = lv_obj_get_ext_attr(sw);
24018410:	f7f0 fea3 	bl	2400915a <lv_obj_get_ext_attr>
    lv_style_list_t * style_dsc_p;

    switch(part) {
24018414:	2d01      	cmp	r5, #1
24018416:	d013      	beq.n	24018440 <lv_switch_signal+0x40>
24018418:	2d02      	cmp	r5, #2
2401841a:	d013      	beq.n	24018444 <lv_switch_signal+0x44>
2401841c:	b14d      	cbz	r5, 24018432 <lv_switch_signal+0x32>
        info->result = lv_switch_get_style(sw, info->part);
2401841e:	2300      	movs	r3, #0
        else return ancestor_signal(sw, sign, param);
24018420:	463a      	mov	r2, r7
24018422:	4621      	mov	r1, r4
24018424:	4630      	mov	r0, r6
        info->result = lv_switch_get_style(sw, info->part);
24018426:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(sw, sign, param);
24018428:	4b42      	ldr	r3, [pc, #264]	; (24018534 <lv_switch_signal+0x134>)
}
2401842a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        else return ancestor_signal(sw, sign, param);
2401842e:	681b      	ldr	r3, [r3, #0]
24018430:	4718      	bx	r3
        case LV_SWITCH_PART_BG:
            style_dsc_p = &sw->style_list;
24018432:	f106 0028 	add.w	r0, r6, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
24018436:	2501      	movs	r5, #1
        info->result = lv_switch_get_style(sw, info->part);
24018438:	6078      	str	r0, [r7, #4]
}
2401843a:	4628      	mov	r0, r5
2401843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            break;
        case LV_SWITCH_PART_INDIC:
            style_dsc_p = &ext->bar.style_indic;
24018440:	3014      	adds	r0, #20
            break;
24018442:	e7f8      	b.n	24018436 <lv_switch_signal+0x36>
        case LV_SWITCH_PART_KNOB:
            style_dsc_p = &ext->style_knob;
24018444:	301c      	adds	r0, #28
            break;
24018446:	e7f6      	b.n	24018436 <lv_switch_signal+0x36>
        res = ancestor_signal(sw, sign, param);
24018448:	4b3a      	ldr	r3, [pc, #232]	; (24018534 <lv_switch_signal+0x134>)
    if(sign == LV_SIGNAL_GET_TYPE) {
2401844a:	2907      	cmp	r1, #7
        res = ancestor_signal(sw, sign, param);
2401844c:	681b      	ldr	r3, [r3, #0]
    if(sign == LV_SIGNAL_GET_TYPE) {
2401844e:	d109      	bne.n	24018464 <lv_switch_signal+0x64>
        res = ancestor_signal(sw, sign, param);
24018450:	4798      	blx	r3
        if(res != LV_RES_OK) return res;
24018452:	2801      	cmp	r0, #1
        res = ancestor_signal(sw, sign, param);
24018454:	4605      	mov	r5, r0
        if(res != LV_RES_OK) return res;
24018456:	d1f0      	bne.n	2401843a <lv_switch_signal+0x3a>
        return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24018458:	4638      	mov	r0, r7
2401845a:	4937      	ldr	r1, [pc, #220]	; (24018538 <lv_switch_signal+0x138>)
}
2401845c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24018460:	f7f0 beaf 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    res = ancestor_signal(sw, sign, param);
24018464:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24018466:	2801      	cmp	r0, #1
    res = ancestor_signal(sw, sign, param);
24018468:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
2401846a:	d1e6      	bne.n	2401843a <lv_switch_signal+0x3a>
    if(sign == LV_SIGNAL_CLEANUP) {
2401846c:	b924      	cbnz	r4, 24018478 <lv_switch_signal+0x78>
        lv_obj_clean_style_list(sw, LV_SWITCH_PART_KNOB);
2401846e:	2102      	movs	r1, #2
24018470:	4630      	mov	r0, r6
24018472:	f7f0 f8ec 	bl	2400864e <lv_obj_clean_style_list>
24018476:	e7e0      	b.n	2401843a <lv_switch_signal+0x3a>
    else if(sign == LV_SIGNAL_RELEASED) {
24018478:	2c0e      	cmp	r4, #14
2401847a:	d114      	bne.n	240184a6 <lv_switch_signal+0xa6>
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_switch_get_state(const lv_obj_t * sw)
{
    return lv_bar_get_value(sw) == 1 ? true : false;
2401847c:	4630      	mov	r0, r6
2401847e:	f7fb f9d3 	bl	24013828 <lv_bar_get_value>
        if(lv_switch_get_state(sw)) lv_switch_off(sw, LV_ANIM_ON);
24018482:	2801      	cmp	r0, #1
24018484:	4601      	mov	r1, r0
24018486:	d109      	bne.n	2401849c <lv_switch_signal+0x9c>
24018488:	4630      	mov	r0, r6
2401848a:	f7ff ffa7 	bl	240183dc <lv_switch_off>
        res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, NULL);
2401848e:	4630      	mov	r0, r6
24018490:	2200      	movs	r2, #0
24018492:	2110      	movs	r1, #16
}
24018494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, NULL);
24018498:	f7ef bc9e 	b.w	24007dd8 <lv_event_send>
        else lv_switch_on(sw, LV_ANIM_ON);
2401849c:	4629      	mov	r1, r5
2401849e:	4630      	mov	r0, r6
240184a0:	f7ff ff8a 	bl	240183b8 <lv_switch_on>
240184a4:	e7f3      	b.n	2401848e <lv_switch_signal+0x8e>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
240184a6:	2c06      	cmp	r4, #6
240184a8:	d1c7      	bne.n	2401843a <lv_switch_signal+0x3a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240184aa:	2212      	movs	r2, #18
240184ac:	2102      	movs	r1, #2
240184ae:	4630      	mov	r0, r6
240184b0:	f7f0 f96a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240184b4:	2213      	movs	r2, #19
240184b6:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240184b8:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240184ba:	4630      	mov	r0, r6
240184bc:	f7f0 f964 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240184c0:	2210      	movs	r2, #16
240184c2:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240184c4:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240184c6:	4630      	mov	r0, r6
240184c8:	f7f0 f95e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240184cc:	2211      	movs	r2, #17
240184ce:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240184d0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240184d2:	4630      	mov	r0, r6
240184d4:	f7f0 f958 	bl	24008788 <_lv_obj_get_style_int>
240184d8:	4607      	mov	r7, r0
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(sw), lv_obj_get_height(sw)) >> 1;
240184da:	4630      	mov	r0, r6
240184dc:	f7f0 f897 	bl	2400860e <lv_obj_get_width>
240184e0:	4682      	mov	sl, r0
240184e2:	4630      	mov	r0, r6
240184e4:	f7f0 f899 	bl	2400861a <lv_obj_get_height>
240184e8:	4582      	cmp	sl, r0
240184ea:	4630      	mov	r0, r6
240184ec:	da1f      	bge.n	2401852e <lv_switch_signal+0x12e>
240184ee:	f7f0 f88e 	bl	2400860e <lv_obj_get_width>
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
240184f2:	454c      	cmp	r4, r9
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(sw), lv_obj_get_height(sw)) >> 1;
240184f4:	f340 034f 	sbfx	r3, r0, #1, #16
        knob_size += lv_obj_get_draw_rect_ext_pad_size(sw, LV_SWITCH_PART_KNOB);
240184f8:	f04f 0102 	mov.w	r1, #2
240184fc:	4630      	mov	r0, r6
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
240184fe:	bfb8      	it	lt
24018500:	464c      	movlt	r4, r9
24018502:	b224      	sxth	r4, r4
24018504:	4544      	cmp	r4, r8
24018506:	bfb8      	it	lt
24018508:	4644      	movlt	r4, r8
2401850a:	b224      	sxth	r4, r4
2401850c:	42bc      	cmp	r4, r7
2401850e:	bfb8      	it	lt
24018510:	463c      	movlt	r4, r7
        knob_size += 2;         /*For rounding error*/
24018512:	3402      	adds	r4, #2
24018514:	441c      	add	r4, r3
        knob_size += lv_obj_get_draw_rect_ext_pad_size(sw, LV_SWITCH_PART_KNOB);
24018516:	f7f1 fa5e 	bl	240099d6 <lv_obj_get_draw_rect_ext_pad_size>
        sw->ext_draw_pad = LV_MATH_MAX(sw->ext_draw_pad, knob_size);
2401851a:	f9b6 3032 	ldrsh.w	r3, [r6, #50]	; 0x32
        knob_size += 2;         /*For rounding error*/
2401851e:	b2a4      	uxth	r4, r4
        knob_size += lv_obj_get_draw_rect_ext_pad_size(sw, LV_SWITCH_PART_KNOB);
24018520:	4404      	add	r4, r0
        sw->ext_draw_pad = LV_MATH_MAX(sw->ext_draw_pad, knob_size);
24018522:	b224      	sxth	r4, r4
24018524:	42a3      	cmp	r3, r4
24018526:	bfb8      	it	lt
24018528:	4623      	movlt	r3, r4
2401852a:	8673      	strh	r3, [r6, #50]	; 0x32
2401852c:	e785      	b.n	2401843a <lv_switch_signal+0x3a>
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(sw), lv_obj_get_height(sw)) >> 1;
2401852e:	f7f0 f874 	bl	2400861a <lv_obj_get_height>
24018532:	e7de      	b.n	240184f2 <lv_switch_signal+0xf2>
24018534:	24035d24 	.word	0x24035d24
24018538:	900ff2fa 	.word	0x900ff2fa

2401853c <lv_tabview_set_tab_act>:
 * @param tabview pointer to Tab view object
 * @param id index of a tab to load
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_tabview_set_tab_act(lv_obj_t * tabview, uint16_t id, lv_anim_enable_t anim)
{
2401853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24018540:	460d      	mov	r5, r1
24018542:	4607      	mov	r7, r0
    LV_ASSERT_OBJ(tabview, LV_OBJX_NAME);

#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018544:	f7f0 fe09 	bl	2400915a <lv_obj_get_ext_attr>

    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
24018548:	8ac3      	ldrh	r3, [r0, #22]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
2401854a:	4604      	mov	r4, r0

    lv_btnmatrix_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_CHECK_STATE);
2401854c:	8a81      	ldrh	r1, [r0, #20]
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
2401854e:	42ab      	cmp	r3, r5
    lv_btnmatrix_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_CHECK_STATE);
24018550:	f04f 0280 	mov.w	r2, #128	; 0x80
24018554:	6800      	ldr	r0, [r0, #0]
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
24018556:	bf9c      	itt	ls
24018558:	f103 33ff 	addls.w	r3, r3, #4294967295
2401855c:	b29d      	uxthls	r5, r3
    lv_btnmatrix_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_CHECK_STATE);
2401855e:	f7fb fd91 	bl	24014084 <lv_btnmatrix_clear_btn_ctrl>

    ext->tab_cur = id;

    if(lv_obj_get_base_dir(tabview) == LV_BIDI_DIR_RTL) {
24018562:	4638      	mov	r0, r7
    ext->tab_cur = id;
24018564:	82a5      	strh	r5, [r4, #20]
    if(lv_obj_get_base_dir(tabview) == LV_BIDI_DIR_RTL) {
24018566:	f7f0 f8be 	bl	240086e6 <lv_obj_get_base_dir>
2401856a:	2801      	cmp	r0, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
2401856c:	f04f 0214 	mov.w	r2, #20
24018570:	f04f 0140 	mov.w	r1, #64	; 0x40
        id = (ext->tab_cnt - (id + 1));
24018574:	bf08      	it	eq
24018576:	8ae3      	ldrheq	r3, [r4, #22]
24018578:	68a0      	ldr	r0, [r4, #8]
2401857a:	bf02      	ittt	eq
2401857c:	f103 33ff 	addeq.w	r3, r3, #4294967295
24018580:	1b5b      	subeq	r3, r3, r5
24018582:	b29d      	uxtheq	r5, r3
24018584:	f7f0 f900 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018588:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
2401858a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401858c:	2140      	movs	r1, #64	; 0x40
2401858e:	68a0      	ldr	r0, [r4, #8]
24018590:	f7f0 f8fa 	bl	24008788 <_lv_obj_get_style_int>

    lv_coord_t cont_x;
    lv_style_int_t scrl_inner = lv_obj_get_style_pad_inner(ext->content, LV_PAGE_PART_SCROLLABLE);
    lv_style_int_t scrl_left = lv_obj_get_style_pad_left(ext->content, LV_PAGE_PART_SCROLLABLE);

    switch(ext->btns_pos) {
24018594:	7e23      	ldrb	r3, [r4, #24]
24018596:	4680      	mov	r8, r0
        default: /*default case is prevented in lv_tabview_set_btns_pos(), but here for safety*/
        case LV_TABVIEW_TAB_POS_NONE:
        case LV_TABVIEW_TAB_POS_TOP:
        case LV_TABVIEW_TAB_POS_BOTTOM:
            cont_x = -(lv_obj_get_width(tabview) * id + scrl_inner * id + scrl_left);
24018598:	4638      	mov	r0, r7
    switch(ext->btns_pos) {
2401859a:	f003 0307 	and.w	r3, r3, #7
2401859e:	3b03      	subs	r3, #3
240185a0:	2b01      	cmp	r3, #1
240185a2:	d91d      	bls.n	240185e0 <lv_tabview_set_tab_act+0xa4>
            cont_x = -(lv_obj_get_width(tabview) * id + scrl_inner * id + scrl_left);
240185a4:	f7f0 f833 	bl	2400860e <lv_obj_get_width>
240185a8:	4448      	add	r0, r9
240185aa:	fb10 8005 	smlabb	r0, r0, r5, r8
            break;
        case LV_TABVIEW_TAB_POS_LEFT:
        case LV_TABVIEW_TAB_POS_RIGHT:
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + scrl_inner * id + scrl_left);
240185ae:	4246      	negs	r6, r0
            break;
    }

    if(anim == LV_ANIM_OFF || lv_tabview_get_anim_time(tabview) == 0) {
        lv_obj_set_x(lv_page_get_scrollable(ext->content), cont_x);
240185b0:	68a0      	ldr	r0, [r4, #8]
240185b2:	f7fe ff6f 	bl	24017494 <lv_page_get_scrollable>
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + scrl_inner * id + scrl_left);
240185b6:	b236      	sxth	r6, r6
        lv_obj_set_x(lv_page_get_scrollable(ext->content), cont_x);
240185b8:	4631      	mov	r1, r6
240185ba:	f7ef fea1 	bl	24008300 <lv_obj_set_x>

    lv_style_int_t btns_bg_inner = 0;
    lv_style_int_t btns_bg_left = 0;
    lv_style_int_t btns_bg_top = 0;

    switch(ext->btns_pos) {
240185be:	7e21      	ldrb	r1, [r4, #24]
240185c0:	f001 0107 	and.w	r1, r1, #7
240185c4:	2902      	cmp	r1, #2
240185c6:	d816      	bhi.n	240185f6 <lv_tabview_set_tab_act+0xba>
240185c8:	b9e1      	cbnz	r1, 24018604 <lv_tabview_set_tab_act+0xc8>

#if LV_USE_ANIMATION
    if(anim == LV_ANIM_OFF || ext->anim_time == 0)
#endif
    {
        switch(ext->btns_pos) {
240185ca:	7e23      	ldrb	r3, [r4, #24]
240185cc:	f003 0307 	and.w	r3, r3, #7
240185d0:	2b02      	cmp	r3, #2
240185d2:	d83c      	bhi.n	2401864e <lv_tabview_set_tab_act+0x112>
240185d4:	2b00      	cmp	r3, #0
240185d6:	d03f      	beq.n	24018658 <lv_tabview_set_tab_act+0x11c>
            default: /*default case is prevented in lv_tabview_set_btns_pos(), but here for safety*/
            case LV_TABVIEW_TAB_POS_NONE:
                break;
            case LV_TABVIEW_TAB_POS_TOP:
            case LV_TABVIEW_TAB_POS_BOTTOM:
                lv_obj_set_x(ext->indic, indic_pos);
240185d8:	6860      	ldr	r0, [r4, #4]
240185da:	f7ef fe91 	bl	24008300 <lv_obj_set_x>
                break;
240185de:	e03b      	b.n	24018658 <lv_tabview_set_tab_act+0x11c>
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + scrl_inner * id + scrl_left);
240185e0:	f7f0 f815 	bl	2400860e <lv_obj_get_width>
240185e4:	4606      	mov	r6, r0
240185e6:	6820      	ldr	r0, [r4, #0]
240185e8:	f7f0 f811 	bl	2400860e <lv_obj_get_width>
240185ec:	1a36      	subs	r6, r6, r0
240185ee:	444e      	add	r6, r9
240185f0:	fb16 8005 	smlabb	r0, r6, r5, r8
240185f4:	e7db      	b.n	240185ae <lv_tabview_set_tab_act+0x72>
    switch(ext->btns_pos) {
240185f6:	1d4b      	adds	r3, r1, #5
240185f8:	f003 0307 	and.w	r3, r3, #7
240185fc:	2b01      	cmp	r3, #1
240185fe:	d916      	bls.n	2401862e <lv_tabview_set_tab_act+0xf2>
24018600:	2100      	movs	r1, #0
24018602:	e7e2      	b.n	240185ca <lv_tabview_set_tab_act+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24018604:	2214      	movs	r2, #20
24018606:	2141      	movs	r1, #65	; 0x41
24018608:	4638      	mov	r0, r7
2401860a:	f7f0 f8bd 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401860e:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
24018610:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018612:	2141      	movs	r1, #65	; 0x41
24018614:	4638      	mov	r0, r7
24018616:	f7f0 f8b7 	bl	24008788 <_lv_obj_get_style_int>
2401861a:	4606      	mov	r6, r0
            indic_size = lv_obj_get_width(ext->indic);
2401861c:	6860      	ldr	r0, [r4, #4]
2401861e:	f7ef fff6 	bl	2400860e <lv_obj_get_width>
            indic_pos  = btns_bg_top + id * (indic_size + btns_bg_inner);
24018622:	eb00 0308 	add.w	r3, r0, r8
24018626:	fb13 6105 	smlabb	r1, r3, r5, r6
2401862a:	b209      	sxth	r1, r1
            break;
2401862c:	e7cd      	b.n	240185ca <lv_tabview_set_tab_act+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
2401862e:	2214      	movs	r2, #20
24018630:	2141      	movs	r1, #65	; 0x41
24018632:	4638      	mov	r0, r7
24018634:	f7f0 f8a8 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24018638:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
2401863a:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401863c:	2141      	movs	r1, #65	; 0x41
2401863e:	4638      	mov	r0, r7
24018640:	f7f0 f8a2 	bl	24008788 <_lv_obj_get_style_int>
24018644:	4606      	mov	r6, r0
            indic_size = lv_obj_get_height(ext->indic);
24018646:	6860      	ldr	r0, [r4, #4]
24018648:	f7ef ffe7 	bl	2400861a <lv_obj_get_height>
2401864c:	e7e9      	b.n	24018622 <lv_tabview_set_tab_act+0xe6>
        switch(ext->btns_pos) {
2401864e:	3305      	adds	r3, #5
24018650:	f003 0307 	and.w	r3, r3, #7
24018654:	2b01      	cmp	r3, #1
24018656:	d906      	bls.n	24018666 <lv_tabview_set_tab_act+0x12a>

        lv_anim_start(&a);
    }
#endif

    lv_btnmatrix_set_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_CHECK_STATE);
24018658:	8aa1      	ldrh	r1, [r4, #20]
2401865a:	2280      	movs	r2, #128	; 0x80
2401865c:	6820      	ldr	r0, [r4, #0]
}
2401865e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_btnmatrix_set_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_CHECK_STATE);
24018662:	f7fb bd38 	b.w	240140d6 <lv_btnmatrix_set_btn_ctrl>
                lv_obj_set_y(ext->indic, indic_pos);
24018666:	6860      	ldr	r0, [r4, #4]
24018668:	f7ef fe37 	bl	240082da <lv_obj_set_y>
                break;
2401866c:	e7f4      	b.n	24018658 <lv_tabview_set_tab_act+0x11c>
	...

24018670 <tabview_realign>:
/**
 * Realign and resize the elements of Tab view
 * @param tabview pointer to a Tab view object
 */
static void tabview_realign(lv_obj_t * tabview)
{
24018670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24018674:	4604      	mov	r4, r0
24018676:	b087      	sub	sp, #28
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018678:	f7f0 fd6f 	bl	2400915a <lv_obj_get_ext_attr>
2401867c:	9002      	str	r0, [sp, #8]
}


static void refr_btns_size(lv_obj_t * tabview)
{
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
2401867e:	4620      	mov	r0, r4
24018680:	f7f0 fd6b 	bl	2400915a <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018684:	2212      	movs	r2, #18
24018686:	4607      	mov	r7, r0
24018688:	2141      	movs	r1, #65	; 0x41
2401868a:	4620      	mov	r0, r4
2401868c:	f7f0 f87c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24018690:	2213      	movs	r2, #19
24018692:	2141      	movs	r1, #65	; 0x41
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24018694:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24018696:	4620      	mov	r0, r4
24018698:	f7f0 f876 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401869c:	2210      	movs	r2, #16
2401869e:	2141      	movs	r1, #65	; 0x41
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240186a0:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240186a2:	4620      	mov	r0, r4
240186a4:	f7f0 f870 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186a8:	2211      	movs	r2, #17
240186aa:	2141      	movs	r1, #65	; 0x41
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240186ac:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186ae:	4620      	mov	r0, r4
240186b0:	f7f0 f86a 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240186b4:	2212      	movs	r2, #18
240186b6:	2142      	movs	r1, #66	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186b8:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240186ba:	4620      	mov	r0, r4
240186bc:	f7f0 f864 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240186c0:	2213      	movs	r2, #19
240186c2:	2142      	movs	r1, #66	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
240186c4:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240186c6:	4620      	mov	r0, r4
240186c8:	f7f0 f85e 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240186cc:	2210      	movs	r2, #16
240186ce:	2142      	movs	r1, #66	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240186d0:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240186d2:	4620      	mov	r0, r4
240186d4:	f7f0 f858 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186d8:	2211      	movs	r2, #17
240186da:	2142      	movs	r1, #66	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240186dc:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186de:	4620      	mov	r0, r4
240186e0:	f7f0 f852 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240186e4:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
240186e8:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
240186ea:	2142      	movs	r1, #66	; 0x42
240186ec:	4620      	mov	r0, r4
240186ee:	f7f0 fb0f 	bl	24008d10 <_lv_obj_get_style_ptr>

    /*Set the tabs height/width*/
    lv_coord_t btns_w;
    lv_coord_t btns_h;

    switch(ext->btns_pos) {
240186f2:	7e3b      	ldrb	r3, [r7, #24]
240186f4:	4680      	mov	r8, r0
240186f6:	f003 0307 	and.w	r3, r3, #7
240186fa:	2b02      	cmp	r3, #2
240186fc:	d810      	bhi.n	24018720 <tabview_realign+0xb0>
240186fe:	b1a3      	cbz	r3, 2401872a <tabview_realign+0xba>
            lv_obj_set_hidden(ext->btns, true);
            break;
        case LV_TABVIEW_TAB_POS_TOP:
        case LV_TABVIEW_TAB_POS_BOTTOM:
            lv_obj_set_hidden(ext->btns, false);
            btns_h = lv_font_get_line_height(font) + tab_top + tab_bottom + tab_bg_top + tab_bg_bottom;
24018700:	445d      	add	r5, fp
            lv_obj_set_hidden(ext->btns, false);
24018702:	2100      	movs	r1, #0
24018704:	6838      	ldr	r0, [r7, #0]
            btns_h = lv_font_get_line_height(font) + tab_top + tab_bottom + tab_bg_top + tab_bg_bottom;
24018706:	4455      	add	r5, sl
            lv_obj_set_hidden(ext->btns, false);
24018708:	f7ef fd15 	bl	24008136 <lv_obj_set_hidden>
            btns_h = lv_font_get_line_height(font) + tab_top + tab_bottom + tab_bg_top + tab_bg_bottom;
2401870c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
            btns_w = lv_obj_get_width(tabview);
24018710:	4620      	mov	r0, r4
            btns_h = lv_font_get_line_height(font) + tab_top + tab_bottom + tab_bg_top + tab_bg_bottom;
24018712:	444d      	add	r5, r9
24018714:	441d      	add	r5, r3
            btns_w = lv_obj_get_width(tabview);
24018716:	f7ef ff7a 	bl	2400860e <lv_obj_get_width>
2401871a:	4606      	mov	r6, r0
            btns_h = lv_font_get_line_height(font) + tab_top + tab_bottom + tab_bg_top + tab_bg_bottom;
2401871c:	b22d      	sxth	r5, r5

            break;
2401871e:	e00a      	b.n	24018736 <tabview_realign+0xc6>
    switch(ext->btns_pos) {
24018720:	3305      	adds	r3, #5
24018722:	f003 0307 	and.w	r3, r3, #7
24018726:	2b01      	cmp	r3, #1
24018728:	d966      	bls.n	240187f8 <tabview_realign+0x188>
            btns_h = 0;
2401872a:	2500      	movs	r5, #0
            lv_obj_set_hidden(ext->btns, true);
2401872c:	2101      	movs	r1, #1
2401872e:	6838      	ldr	r0, [r7, #0]
            btns_w = 0;
24018730:	462e      	mov	r6, r5
            lv_obj_set_hidden(ext->btns, true);
24018732:	f7ef fd00 	bl	24008136 <lv_obj_set_hidden>
                     tab_left + tab_right + tab_bg_left + tab_bg_right;
            btns_h = lv_obj_get_height(tabview);
            break;
    }

    lv_obj_set_size(ext->btns, btns_w, btns_h);
24018736:	6838      	ldr	r0, [r7, #0]
24018738:	462a      	mov	r2, r5
2401873a:	4631      	mov	r1, r6
2401873c:	f7ef fd18 	bl	24008170 <lv_obj_set_size>
}

static void refr_content_size(lv_obj_t * tabview)
{
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018740:	4620      	mov	r0, r4
24018742:	f7f0 fd0a 	bl	2400915a <lv_obj_get_ext_attr>
    lv_coord_t cont_w;
    lv_coord_t cont_h;

    switch(ext->btns_pos) {
24018746:	7e03      	ldrb	r3, [r0, #24]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018748:	4607      	mov	r7, r0
    switch(ext->btns_pos) {
2401874a:	f003 0307 	and.w	r3, r3, #7
2401874e:	2b02      	cmp	r3, #2
24018750:	d868      	bhi.n	24018824 <tabview_realign+0x1b4>
24018752:	2b00      	cmp	r3, #0
24018754:	d06b      	beq.n	2401882e <tabview_realign+0x1be>
            cont_w = lv_obj_get_width(tabview);
            cont_h = lv_obj_get_height(tabview);
            break;
        case LV_TABVIEW_TAB_POS_TOP:
        case LV_TABVIEW_TAB_POS_BOTTOM:
            cont_w = lv_obj_get_width(tabview);
24018756:	4620      	mov	r0, r4
24018758:	f7ef ff59 	bl	2400860e <lv_obj_get_width>
2401875c:	4606      	mov	r6, r0
            cont_h = lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns);
2401875e:	4620      	mov	r0, r4
24018760:	f7ef ff5b 	bl	2400861a <lv_obj_get_height>
24018764:	4605      	mov	r5, r0
24018766:	6838      	ldr	r0, [r7, #0]
24018768:	f7ef ff57 	bl	2400861a <lv_obj_get_height>
2401876c:	1a28      	subs	r0, r5, r0
2401876e:	b205      	sxth	r5, r0
            cont_w = lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns);
            cont_h = lv_obj_get_height(tabview);
            break;
    }

    lv_obj_set_size(ext->content, cont_w, cont_h);
24018770:	462a      	mov	r2, r5
24018772:	68b8      	ldr	r0, [r7, #8]
24018774:	4631      	mov	r1, r6
    cont_h -= bg_top + bg_bottom;
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
    lv_obj_t * pages = lv_obj_get_child(content_scrl, NULL);
    while(pages != NULL) {
        /*Be sure adjust only the pages (user can other things)*/
        if(lv_obj_get_signal_cb(pages) == page_signal) {
24018776:	f8df 920c 	ldr.w	r9, [pc, #524]	; 24018984 <tabview_realign+0x314>
    lv_obj_set_size(ext->content, cont_w, cont_h);
2401877a:	f7ef fcf9 	bl	24008170 <lv_obj_set_size>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401877e:	2210      	movs	r2, #16
24018780:	2140      	movs	r1, #64	; 0x40
24018782:	4620      	mov	r0, r4
24018784:	f7f0 f800 	bl	24008788 <_lv_obj_get_style_int>
24018788:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401878a:	2211      	movs	r2, #17
2401878c:	2140      	movs	r1, #64	; 0x40
2401878e:	4620      	mov	r0, r4
24018790:	f7ef fffa 	bl	24008788 <_lv_obj_get_style_int>
    cont_h -= bg_top + bg_bottom;
24018794:	4440      	add	r0, r8
24018796:	1a2d      	subs	r5, r5, r0
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
24018798:	68b8      	ldr	r0, [r7, #8]
2401879a:	f7fe fe7b 	bl	24017494 <lv_page_get_scrollable>
    lv_obj_t * pages = lv_obj_get_child(content_scrl, NULL);
2401879e:	2100      	movs	r1, #0
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
240187a0:	4680      	mov	r8, r0
    cont_h -= bg_top + bg_bottom;
240187a2:	b22d      	sxth	r5, r5
    lv_obj_t * pages = lv_obj_get_child(content_scrl, NULL);
240187a4:	f7ef fd64 	bl	24008270 <lv_obj_get_child>
240187a8:	4607      	mov	r7, r0
    while(pages != NULL) {
240187aa:	2f00      	cmp	r7, #0
240187ac:	d152      	bne.n	24018854 <tabview_realign+0x1e4>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
240187ae:	4620      	mov	r0, r4
240187b0:	f7f0 fcd3 	bl	2400915a <lv_obj_get_ext_attr>
240187b4:	4606      	mov	r6, r0
    lv_btnmatrix_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
240187b6:	6800      	ldr	r0, [r0, #0]
240187b8:	f7f0 fccf 	bl	2400915a <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
240187bc:	2203      	movs	r2, #3
240187be:	4605      	mov	r5, r0
240187c0:	2143      	movs	r1, #67	; 0x43
240187c2:	4620      	mov	r0, r4
240187c4:	f7ef ffe0 	bl	24008788 <_lv_obj_get_style_int>
    switch(ext->btns_pos) {
240187c8:	7e33      	ldrb	r3, [r6, #24]
240187ca:	4680      	mov	r8, r0
240187cc:	f003 0307 	and.w	r3, r3, #7
240187d0:	2b02      	cmp	r3, #2
240187d2:	d851      	bhi.n	24018878 <tabview_realign+0x208>
240187d4:	2b00      	cmp	r3, #0
240187d6:	d054      	beq.n	24018882 <tabview_realign+0x212>
            lv_obj_set_hidden(ext->indic, false);
240187d8:	4639      	mov	r1, r7
240187da:	6870      	ldr	r0, [r6, #4]
240187dc:	f7ef fcab 	bl	24008136 <lv_obj_set_hidden>
            if(ext->tab_cnt) {
240187e0:	8af3      	ldrh	r3, [r6, #22]
240187e2:	2b00      	cmp	r3, #0
240187e4:	d051      	beq.n	2401888a <tabview_realign+0x21a>
                indic_w = lv_area_get_width(&btnm_ext->button_areas[0]);
240187e6:	686a      	ldr	r2, [r5, #4]
                indic_h = indic_size;
240187e8:	4645      	mov	r5, r8
240187ea:	8893      	ldrh	r3, [r2, #4]
240187ec:	8812      	ldrh	r2, [r2, #0]
240187ee:	3301      	adds	r3, #1
240187f0:	1a9b      	subs	r3, r3, r2
                indic_w = lv_area_get_width(&btnm_ext->button_areas[0]);
240187f2:	fa0f f883 	sxth.w	r8, r3
240187f6:	e04a      	b.n	2401888e <tabview_realign+0x21e>
            lv_obj_set_hidden(ext->btns, false);
240187f8:	2100      	movs	r1, #0
240187fa:	6838      	ldr	r0, [r7, #0]
240187fc:	f7ef fc9b 	bl	24008136 <lv_obj_set_hidden>
            btns_w = lv_font_get_glyph_width(font, 'A', '\0') +
24018800:	2200      	movs	r2, #0
24018802:	2141      	movs	r1, #65	; 0x41
24018804:	4640      	mov	r0, r8
24018806:	f7f6 f955 	bl	2400eab4 <lv_font_get_glyph_width>
                     tab_left + tab_right + tab_bg_left + tab_bg_right;
2401880a:	9b05      	ldr	r3, [sp, #20]
2401880c:	441e      	add	r6, r3
2401880e:	9b03      	ldr	r3, [sp, #12]
24018810:	441e      	add	r6, r3
24018812:	9b04      	ldr	r3, [sp, #16]
24018814:	441e      	add	r6, r3
24018816:	4430      	add	r0, r6
            btns_w = lv_font_get_glyph_width(font, 'A', '\0') +
24018818:	b206      	sxth	r6, r0
            btns_h = lv_obj_get_height(tabview);
2401881a:	4620      	mov	r0, r4
2401881c:	f7ef fefd 	bl	2400861a <lv_obj_get_height>
24018820:	4605      	mov	r5, r0
            break;
24018822:	e788      	b.n	24018736 <tabview_realign+0xc6>
    switch(ext->btns_pos) {
24018824:	3305      	adds	r3, #5
24018826:	f003 0307 	and.w	r3, r3, #7
2401882a:	2b01      	cmp	r3, #1
2401882c:	d908      	bls.n	24018840 <tabview_realign+0x1d0>
            cont_w = lv_obj_get_width(tabview);
2401882e:	4620      	mov	r0, r4
24018830:	f7ef feed 	bl	2400860e <lv_obj_get_width>
24018834:	4606      	mov	r6, r0
            cont_h = lv_obj_get_height(tabview);
24018836:	4620      	mov	r0, r4
24018838:	f7ef feef 	bl	2400861a <lv_obj_get_height>
2401883c:	4605      	mov	r5, r0
            break;
2401883e:	e797      	b.n	24018770 <tabview_realign+0x100>
            cont_w = lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns);
24018840:	4620      	mov	r0, r4
24018842:	f7ef fee4 	bl	2400860e <lv_obj_get_width>
24018846:	4606      	mov	r6, r0
24018848:	6838      	ldr	r0, [r7, #0]
2401884a:	f7ef fee0 	bl	2400860e <lv_obj_get_width>
2401884e:	1a36      	subs	r6, r6, r0
24018850:	b236      	sxth	r6, r6
24018852:	e7f0      	b.n	24018836 <tabview_realign+0x1c6>
        if(lv_obj_get_signal_cb(pages) == page_signal) {
24018854:	4638      	mov	r0, r7
24018856:	f7f0 fc7c 	bl	24009152 <lv_obj_get_signal_cb>
2401885a:	f8d9 3000 	ldr.w	r3, [r9]
2401885e:	4283      	cmp	r3, r0
24018860:	d104      	bne.n	2401886c <tabview_realign+0x1fc>
            lv_obj_set_size(pages, cont_w, cont_h);
24018862:	462a      	mov	r2, r5
24018864:	4631      	mov	r1, r6
24018866:	4638      	mov	r0, r7
24018868:	f7ef fc82 	bl	24008170 <lv_obj_set_size>
        }
        pages = lv_obj_get_child(content_scrl, pages);
2401886c:	4639      	mov	r1, r7
2401886e:	4640      	mov	r0, r8
24018870:	f7ef fcfe 	bl	24008270 <lv_obj_get_child>
24018874:	4607      	mov	r7, r0
24018876:	e798      	b.n	240187aa <tabview_realign+0x13a>
    switch(ext->btns_pos) {
24018878:	3305      	adds	r3, #5
2401887a:	f003 0307 	and.w	r3, r3, #7
2401887e:	2b01      	cmp	r3, #1
24018880:	d91d      	bls.n	240188be <tabview_realign+0x24e>
            lv_obj_set_hidden(ext->indic, true);
24018882:	2101      	movs	r1, #1
24018884:	6870      	ldr	r0, [r6, #4]
24018886:	f7ef fc56 	bl	24008136 <lv_obj_set_hidden>
                indic_h = 0;
2401888a:	2500      	movs	r5, #0
                indic_w = 0;
2401888c:	46a8      	mov	r8, r5
    lv_obj_set_width(ext->indic, indic_w);
2401888e:	6870      	ldr	r0, [r6, #4]
24018890:	4641      	mov	r1, r8
24018892:	f7ef fcaf 	bl	240081f4 <lv_obj_set_width>
    lv_obj_set_height(ext->indic, indic_h);
24018896:	4629      	mov	r1, r5
24018898:	6870      	ldr	r0, [r6, #4]
2401889a:	2600      	movs	r6, #0
2401889c:	f7ef fcb1 	bl	24008202 <lv_obj_set_height>
    }
}

static void refr_align(lv_obj_t * tabview)
{
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
240188a0:	4620      	mov	r0, r4
240188a2:	f7f0 fc5a 	bl	2400915a <lv_obj_get_ext_attr>

    switch(ext->btns_pos) {
240188a6:	7e03      	ldrb	r3, [r0, #24]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
240188a8:	4605      	mov	r5, r0
        default: /*default case is prevented in lv_tabview_set_btns_pos(), but here for safety*/
        case LV_TABVIEW_TAB_POS_NONE:
            lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
240188aa:	9600      	str	r6, [sp, #0]
    switch(ext->btns_pos) {
240188ac:	f003 0307 	and.w	r3, r3, #7
240188b0:	3b01      	subs	r3, #1
240188b2:	2b03      	cmp	r3, #3
240188b4:	d811      	bhi.n	240188da <tabview_realign+0x26a>
240188b6:	e8df f003 	tbb	[pc, r3]
240188ba:	321f      	.short	0x321f
240188bc:	5843      	.short	0x5843
            lv_obj_set_hidden(ext->indic, false);
240188be:	4639      	mov	r1, r7
240188c0:	6870      	ldr	r0, [r6, #4]
240188c2:	f7ef fc38 	bl	24008136 <lv_obj_set_hidden>
            if(ext->tab_cnt) {
240188c6:	8af3      	ldrh	r3, [r6, #22]
240188c8:	2b00      	cmp	r3, #0
240188ca:	d0de      	beq.n	2401888a <tabview_realign+0x21a>
                indic_h = lv_area_get_height(&btnm_ext->button_areas[0]);
240188cc:	686b      	ldr	r3, [r5, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240188ce:	88dd      	ldrh	r5, [r3, #6]
240188d0:	885b      	ldrh	r3, [r3, #2]
240188d2:	3501      	adds	r5, #1
240188d4:	1aed      	subs	r5, r5, r3
240188d6:	b22d      	sxth	r5, r5
240188d8:	e7d9      	b.n	2401888e <tabview_realign+0x21e>
            lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
240188da:	2300      	movs	r3, #0
240188dc:	2201      	movs	r2, #1
240188de:	6880      	ldr	r0, [r0, #8]
240188e0:	4619      	mov	r1, r3
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
            break;
        case LV_TABVIEW_TAB_POS_RIGHT:
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
            lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, 0, 0);
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
240188e2:	f7ef fc03 	bl	240080ec <lv_obj_align>
    lv_tabview_set_tab_act(tabview, ext->tab_cur, LV_ANIM_OFF);
240188e6:	9b02      	ldr	r3, [sp, #8]
240188e8:	2200      	movs	r2, #0
240188ea:	4620      	mov	r0, r4
240188ec:	8a99      	ldrh	r1, [r3, #20]
}
240188ee:	b007      	add	sp, #28
240188f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_tabview_set_tab_act(tabview, ext->tab_cur, LV_ANIM_OFF);
240188f4:	f7ff be22 	b.w	2401853c <lv_tabview_set_tab_act>
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
240188f8:	2300      	movs	r3, #0
240188fa:	2201      	movs	r2, #1
240188fc:	6800      	ldr	r0, [r0, #0]
240188fe:	4619      	mov	r1, r3
24018900:	f7ef fbf4 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
24018904:	9600      	str	r6, [sp, #0]
24018906:	2300      	movs	r3, #0
24018908:	220c      	movs	r2, #12
2401890a:	6829      	ldr	r1, [r5, #0]
2401890c:	68a8      	ldr	r0, [r5, #8]
2401890e:	f7ef fbed 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
24018912:	2300      	movs	r3, #0
24018914:	2204      	movs	r2, #4
24018916:	9600      	str	r6, [sp, #0]
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
24018918:	e9d5 1000 	ldrd	r1, r0, [r5]
2401891c:	e7e1      	b.n	240188e2 <tabview_realign+0x272>
            lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
2401891e:	2300      	movs	r3, #0
24018920:	2201      	movs	r2, #1
24018922:	6880      	ldr	r0, [r0, #8]
24018924:	4619      	mov	r1, r3
24018926:	f7ef fbe1 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
2401892a:	9600      	str	r6, [sp, #0]
2401892c:	2300      	movs	r3, #0
2401892e:	220c      	movs	r2, #12
24018930:	68a9      	ldr	r1, [r5, #8]
24018932:	6828      	ldr	r0, [r5, #0]
            lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, 0, 0);
24018934:	f7ef fbda 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
24018938:	2300      	movs	r3, #0
2401893a:	2201      	movs	r2, #1
2401893c:	9600      	str	r6, [sp, #0]
2401893e:	e7eb      	b.n	24018918 <tabview_realign+0x2a8>
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
24018940:	2300      	movs	r3, #0
24018942:	2201      	movs	r2, #1
24018944:	6800      	ldr	r0, [r0, #0]
24018946:	4619      	mov	r1, r3
24018948:	f7ef fbd0 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, lv_obj_get_width(ext->btns), 0);
2401894c:	68af      	ldr	r7, [r5, #8]
2401894e:	6828      	ldr	r0, [r5, #0]
24018950:	f7ef fe5d 	bl	2400860e <lv_obj_get_width>
24018954:	2201      	movs	r2, #1
24018956:	4603      	mov	r3, r0
24018958:	4621      	mov	r1, r4
2401895a:	4638      	mov	r0, r7
2401895c:	9600      	str	r6, [sp, #0]
2401895e:	f7ef fbc5 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
24018962:	2300      	movs	r3, #0
24018964:	2203      	movs	r2, #3
24018966:	9600      	str	r6, [sp, #0]
24018968:	e7d6      	b.n	24018918 <tabview_realign+0x2a8>
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
2401896a:	2300      	movs	r3, #0
2401896c:	2203      	movs	r2, #3
2401896e:	6800      	ldr	r0, [r0, #0]
24018970:	4619      	mov	r1, r3
24018972:	f7ef fbbb 	bl	240080ec <lv_obj_align>
            lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, 0, 0);
24018976:	9600      	str	r6, [sp, #0]
24018978:	2300      	movs	r3, #0
2401897a:	2201      	movs	r2, #1
2401897c:	4621      	mov	r1, r4
2401897e:	68a8      	ldr	r0, [r5, #8]
24018980:	e7d8      	b.n	24018934 <tabview_realign+0x2c4>
24018982:	bf00      	nop
24018984:	24035d30 	.word	0x24035d30

24018988 <lv_tabview_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
24018988:	2908      	cmp	r1, #8
{
2401898a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401898e:	4607      	mov	r7, r0
24018990:	460e      	mov	r6, r1
24018992:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24018994:	d12f      	bne.n	240189f6 <lv_tabview_signal+0x6e>
        info->result = lv_tabview_get_style(tabview, info->part);
24018996:	7814      	ldrb	r4, [r2, #0]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018998:	f7f0 fbdf 	bl	2400915a <lv_obj_get_ext_attr>
    switch(part) {
2401899c:	b1a4      	cbz	r4, 240189c8 <lv_tabview_signal+0x40>
2401899e:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
240189a2:	2b03      	cmp	r3, #3
240189a4:	d806      	bhi.n	240189b4 <lv_tabview_signal+0x2c>
240189a6:	3c41      	subs	r4, #65	; 0x41
240189a8:	2c02      	cmp	r4, #2
240189aa:	d817      	bhi.n	240189dc <lv_tabview_signal+0x54>
240189ac:	e8df f004 	tbb	[pc, r4]
240189b0:	1e1b      	.short	0x1e1b
240189b2:	20          	.byte	0x20
240189b3:	00          	.byte	0x00
        info->result = lv_tabview_get_style(tabview, info->part);
240189b4:	2300      	movs	r3, #0
240189b6:	606b      	str	r3, [r5, #4]
        else return ancestor_signal(tabview, sign, param);
240189b8:	4b63      	ldr	r3, [pc, #396]	; (24018b48 <lv_tabview_signal+0x1c0>)
240189ba:	462a      	mov	r2, r5
240189bc:	4638      	mov	r0, r7
240189be:	2108      	movs	r1, #8
240189c0:	681b      	ldr	r3, [r3, #0]
}
240189c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        else return ancestor_signal(tabview, sign, param);
240189c6:	4718      	bx	r3
            style_dsc_p = &tabview->style_list;
240189c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
        info->result = lv_tabview_get_style(tabview, info->part);
240189cc:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
240189ce:	2800      	cmp	r0, #0
240189d0:	d0f2      	beq.n	240189b8 <lv_tabview_signal+0x30>
        return LV_RES_OK;
240189d2:	f04f 0801 	mov.w	r8, #1
}
240189d6:	4640      	mov	r0, r8
240189d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            style_dsc_p = lv_obj_get_style_list(ext->content, LV_PAGE_PART_SCROLLABLE);
240189dc:	2140      	movs	r1, #64	; 0x40
240189de:	6880      	ldr	r0, [r0, #8]
            style_dsc_p = lv_obj_get_style_list(ext->indic, LV_OBJ_PART_MAIN);
240189e0:	f7ef fe23 	bl	2400862a <lv_obj_get_style_list>
            break;
240189e4:	e7f2      	b.n	240189cc <lv_tabview_signal+0x44>
            style_dsc_p = lv_obj_get_style_list(ext->btns, LV_BTNMATRIX_PART_BG);
240189e6:	2100      	movs	r1, #0
            style_dsc_p = lv_obj_get_style_list(ext->btns, LV_BTNMATRIX_PART_BTN);
240189e8:	6800      	ldr	r0, [r0, #0]
240189ea:	e7f9      	b.n	240189e0 <lv_tabview_signal+0x58>
240189ec:	2101      	movs	r1, #1
240189ee:	e7fb      	b.n	240189e8 <lv_tabview_signal+0x60>
            style_dsc_p = lv_obj_get_style_list(ext->indic, LV_OBJ_PART_MAIN);
240189f0:	2100      	movs	r1, #0
240189f2:	6840      	ldr	r0, [r0, #4]
240189f4:	e7f4      	b.n	240189e0 <lv_tabview_signal+0x58>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
240189f6:	2909      	cmp	r1, #9
240189f8:	d117      	bne.n	24018a2a <lv_tabview_signal+0xa2>
        lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
240189fa:	f7f0 fbae 	bl	2400915a <lv_obj_get_ext_attr>
        if(info->part == LV_TABVIEW_PART_TAB_BG) info->result = lv_obj_get_state(ext->btns, LV_BTNMATRIX_PART_BG);
240189fe:	7829      	ldrb	r1, [r5, #0]
24018a00:	2941      	cmp	r1, #65	; 0x41
24018a02:	d105      	bne.n	24018a10 <lv_tabview_signal+0x88>
24018a04:	2100      	movs	r1, #0
24018a06:	6800      	ldr	r0, [r0, #0]
24018a08:	f7ef fe76 	bl	240086f8 <lv_obj_get_state>
24018a0c:	7068      	strb	r0, [r5, #1]
24018a0e:	e7e0      	b.n	240189d2 <lv_tabview_signal+0x4a>
        else if(info->part == LV_TABVIEW_PART_TAB_BTN) info->result = lv_obj_get_state(ext->btns, LV_BTNMATRIX_PART_BTN);
24018a10:	2942      	cmp	r1, #66	; 0x42
24018a12:	d101      	bne.n	24018a18 <lv_tabview_signal+0x90>
24018a14:	2101      	movs	r1, #1
24018a16:	e7f6      	b.n	24018a06 <lv_tabview_signal+0x7e>
        else if(info->part == LV_TABVIEW_PART_INDIC) info->result = lv_obj_get_state(ext->indic, LV_OBJ_PART_MAIN);
24018a18:	2943      	cmp	r1, #67	; 0x43
24018a1a:	d102      	bne.n	24018a22 <lv_tabview_signal+0x9a>
24018a1c:	2100      	movs	r1, #0
24018a1e:	6840      	ldr	r0, [r0, #4]
24018a20:	e7f2      	b.n	24018a08 <lv_tabview_signal+0x80>
        else if(info->part == LV_TABVIEW_PART_BG_SCROLLABLE) info->result = lv_obj_get_state(ext->content,
24018a22:	2940      	cmp	r1, #64	; 0x40
24018a24:	d1d5      	bne.n	240189d2 <lv_tabview_signal+0x4a>
24018a26:	6880      	ldr	r0, [r0, #8]
24018a28:	e7ee      	b.n	24018a08 <lv_tabview_signal+0x80>
    res = ancestor_signal(tabview, sign, param);
24018a2a:	4b47      	ldr	r3, [pc, #284]	; (24018b48 <lv_tabview_signal+0x1c0>)
24018a2c:	681b      	ldr	r3, [r3, #0]
24018a2e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24018a30:	2801      	cmp	r0, #1
    res = ancestor_signal(tabview, sign, param);
24018a32:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
24018a34:	d1cf      	bne.n	240189d6 <lv_tabview_signal+0x4e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24018a36:	2e07      	cmp	r6, #7
24018a38:	d105      	bne.n	24018a46 <lv_tabview_signal+0xbe>
24018a3a:	4628      	mov	r0, r5
24018a3c:	4943      	ldr	r1, [pc, #268]	; (24018b4c <lv_tabview_signal+0x1c4>)
}
24018a3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24018a42:	f7f0 bbbe 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018a46:	4638      	mov	r0, r7
24018a48:	f7f0 fb87 	bl	2400915a <lv_obj_get_ext_attr>
24018a4c:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
24018a4e:	2e00      	cmp	r6, #0
24018a50:	d048      	beq.n	24018ae4 <lv_tabview_signal+0x15c>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
24018a52:	2e04      	cmp	r6, #4
24018a54:	d148      	bne.n	24018ae8 <lv_tabview_signal+0x160>
        lv_signal_send(ext->btns, LV_SIGNAL_STYLE_CHG, NULL);
24018a56:	2200      	movs	r2, #0
24018a58:	4631      	mov	r1, r6
24018a5a:	6800      	ldr	r0, [r0, #0]
24018a5c:	f7ef f9ce 	bl	24007dfc <lv_signal_send>
            tabview_realign(tabview);
24018a60:	4638      	mov	r0, r7
24018a62:	f7ff fe05 	bl	24018670 <tabview_realign>
24018a66:	e013      	b.n	24018a90 <lv_tabview_signal+0x108>
        for(i = 0; ext->tab_name_ptr[i][0] != '\0' && ext->tab_name_ptr[i][0] != '\n'; i++) lv_mem_free(ext->tab_name_ptr[i]);
24018a68:	f7f6 ffb8 	bl	2400f9dc <lv_mem_free>
24018a6c:	fa5f f289 	uxtb.w	r2, r9
24018a70:	68e3      	ldr	r3, [r4, #12]
24018a72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
24018a76:	7802      	ldrb	r2, [r0, #0]
24018a78:	b11a      	cbz	r2, 24018a82 <lv_tabview_signal+0xfa>
24018a7a:	2a0a      	cmp	r2, #10
24018a7c:	f109 0901 	add.w	r9, r9, #1
24018a80:	d1f2      	bne.n	24018a68 <lv_tabview_signal+0xe0>
        lv_mem_free(ext->tab_name_ptr);
24018a82:	4618      	mov	r0, r3
24018a84:	f7f6 ffaa 	bl	2400f9dc <lv_mem_free>
        ext->tab_name_ptr = NULL;
24018a88:	2300      	movs	r3, #0
24018a8a:	60e3      	str	r3, [r4, #12]
        ext->btns         = NULL; /*These objects were children so they are already invalid*/
24018a8c:	6023      	str	r3, [r4, #0]
        ext->content      = NULL;
24018a8e:	60a3      	str	r3, [r4, #8]
    if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS ||
24018a90:	4b2f      	ldr	r3, [pc, #188]	; (24018b50 <lv_tabview_signal+0x1c8>)
24018a92:	4133      	asrs	r3, r6
24018a94:	07d9      	lsls	r1, r3, #31
24018a96:	d49c      	bmi.n	240189d2 <lv_tabview_signal+0x4a>
        ext->btns->signal_cb(ext->btns, sign, param);
24018a98:	6820      	ldr	r0, [r4, #0]
24018a9a:	462a      	mov	r2, r5
24018a9c:	4631      	mov	r1, r6
24018a9e:	69c3      	ldr	r3, [r0, #28]
24018aa0:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
24018aa2:	2e16      	cmp	r6, #22
24018aa4:	d13e      	bne.n	24018b24 <lv_tabview_signal+0x19c>
            lv_btnmatrix_set_focused_btn(ext->btns, ext->tab_cur);
24018aa6:	8aa1      	ldrh	r1, [r4, #20]
24018aa8:	6820      	ldr	r0, [r4, #0]
24018aaa:	f7fb fad5 	bl	24014058 <lv_btnmatrix_set_focused_btn>
            lv_state_t state = lv_obj_get_state(tabview, LV_TABVIEW_PART_BG);
24018aae:	2100      	movs	r1, #0
24018ab0:	4638      	mov	r0, r7
24018ab2:	f7ef fe21 	bl	240086f8 <lv_obj_get_state>
24018ab6:	4605      	mov	r5, r0
                lv_obj_set_state(ext->btns, LV_STATE_FOCUSED);
24018ab8:	2102      	movs	r1, #2
24018aba:	6820      	ldr	r0, [r4, #0]
            if(state & LV_STATE_FOCUSED) {
24018abc:	07aa      	lsls	r2, r5, #30
24018abe:	d535      	bpl.n	24018b2c <lv_tabview_signal+0x1a4>
                lv_obj_set_state(ext->btns, LV_STATE_FOCUSED);
24018ac0:	f7f0 feb7 	bl	24009832 <lv_obj_set_state>
                lv_obj_set_state(ext->indic, LV_STATE_FOCUSED);
24018ac4:	2102      	movs	r1, #2
24018ac6:	6860      	ldr	r0, [r4, #4]
24018ac8:	f7f0 feb3 	bl	24009832 <lv_obj_set_state>
            if(state & LV_STATE_EDITED) {
24018acc:	076b      	lsls	r3, r5, #29
                lv_obj_set_state(ext->btns, LV_STATE_EDITED);
24018ace:	6820      	ldr	r0, [r4, #0]
24018ad0:	f04f 0104 	mov.w	r1, #4
            if(state & LV_STATE_EDITED) {
24018ad4:	d531      	bpl.n	24018b3a <lv_tabview_signal+0x1b2>
                lv_obj_set_state(ext->btns, LV_STATE_EDITED);
24018ad6:	f7f0 feac 	bl	24009832 <lv_obj_set_state>
                lv_obj_set_state(ext->indic, LV_STATE_EDITED);
24018ada:	2104      	movs	r1, #4
24018adc:	6860      	ldr	r0, [r4, #4]
24018ade:	f7f0 fea8 	bl	24009832 <lv_obj_set_state>
24018ae2:	e778      	b.n	240189d6 <lv_tabview_signal+0x4e>
24018ae4:	46b1      	mov	r9, r6
24018ae6:	e7c1      	b.n	24018a6c <lv_tabview_signal+0xe4>
    else if(sign == LV_SIGNAL_COORD_CHG) {
24018ae8:	2e02      	cmp	r6, #2
24018aea:	d003      	beq.n	24018af4 <lv_tabview_signal+0x16c>
    if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS ||
24018aec:	2e17      	cmp	r6, #23
24018aee:	f63f af70 	bhi.w	240189d2 <lv_tabview_signal+0x4a>
24018af2:	e7cd      	b.n	24018a90 <lv_tabview_signal+0x108>
        if(ext->content != NULL && (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
24018af4:	6883      	ldr	r3, [r0, #8]
24018af6:	2b00      	cmp	r3, #0
24018af8:	d0ca      	beq.n	24018a90 <lv_tabview_signal+0x108>
24018afa:	4638      	mov	r0, r7
24018afc:	f7ef fd87 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24018b00:	88ab      	ldrh	r3, [r5, #4]
24018b02:	882a      	ldrh	r2, [r5, #0]
24018b04:	3301      	adds	r3, #1
24018b06:	1a9b      	subs	r3, r3, r2
24018b08:	b21b      	sxth	r3, r3
24018b0a:	4298      	cmp	r0, r3
24018b0c:	d1a8      	bne.n	24018a60 <lv_tabview_signal+0xd8>
                                    lv_obj_get_height(tabview) != lv_area_get_height(param))) {
24018b0e:	4638      	mov	r0, r7
24018b10:	f7ef fd83 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24018b14:	88eb      	ldrh	r3, [r5, #6]
24018b16:	886a      	ldrh	r2, [r5, #2]
24018b18:	3301      	adds	r3, #1
24018b1a:	1a9b      	subs	r3, r3, r2
        if(ext->content != NULL && (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
24018b1c:	b21b      	sxth	r3, r3
24018b1e:	4298      	cmp	r0, r3
24018b20:	d19e      	bne.n	24018a60 <lv_tabview_signal+0xd8>
24018b22:	e7b5      	b.n	24018a90 <lv_tabview_signal+0x108>
        if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS) {
24018b24:	2e17      	cmp	r6, #23
24018b26:	f47f af54 	bne.w	240189d2 <lv_tabview_signal+0x4a>
24018b2a:	e7c0      	b.n	24018aae <lv_tabview_signal+0x126>
                lv_obj_clear_state(ext->btns, LV_STATE_FOCUSED);
24018b2c:	f7f0 ff49 	bl	240099c2 <lv_obj_clear_state>
                lv_obj_clear_state(ext->indic, LV_STATE_FOCUSED);
24018b30:	2102      	movs	r1, #2
24018b32:	6860      	ldr	r0, [r4, #4]
24018b34:	f7f0 ff45 	bl	240099c2 <lv_obj_clear_state>
24018b38:	e7c8      	b.n	24018acc <lv_tabview_signal+0x144>
                lv_obj_clear_state(ext->btns, LV_STATE_EDITED);
24018b3a:	f7f0 ff42 	bl	240099c2 <lv_obj_clear_state>
                lv_obj_clear_state(ext->indic, LV_STATE_EDITED);
24018b3e:	2104      	movs	r1, #4
24018b40:	6860      	ldr	r0, [r4, #4]
24018b42:	f7f0 ff3e 	bl	240099c2 <lv_obj_clear_state>
24018b46:	e746      	b.n	240189d6 <lv_tabview_signal+0x4e>
24018b48:	24035d2c 	.word	0x24035d2c
24018b4c:	900ff304 	.word	0x900ff304
24018b50:	ff3fb7ff 	.word	0xff3fb7ff

24018b54 <lv_tabview_add_tab>:
{
24018b54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
24018b58:	4607      	mov	r7, r0
24018b5a:	4688      	mov	r8, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018b5c:	f7f0 fafd 	bl	2400915a <lv_obj_get_ext_attr>
    lv_obj_t * h = lv_page_create(ext->content, NULL);
24018b60:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018b62:	4604      	mov	r4, r0
    lv_obj_t * h = lv_page_create(ext->content, NULL);
24018b64:	6880      	ldr	r0, [r0, #8]
24018b66:	f7fe fbdf 	bl	24017328 <lv_page_create>
24018b6a:	4605      	mov	r5, r0
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
24018b6c:	4638      	mov	r0, r7
    if(page_signal == NULL) page_signal = lv_obj_get_signal_cb(h);
24018b6e:	4e42      	ldr	r6, [pc, #264]	; (24018c78 <lv_tabview_add_tab+0x124>)
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
24018b70:	f7ef fd4d 	bl	2400860e <lv_obj_get_width>
24018b74:	9003      	str	r0, [sp, #12]
24018b76:	68a0      	ldr	r0, [r4, #8]
24018b78:	f7ef fd4f 	bl	2400861a <lv_obj_get_height>
24018b7c:	9903      	ldr	r1, [sp, #12]
24018b7e:	4602      	mov	r2, r0
24018b80:	4628      	mov	r0, r5
24018b82:	f7ef faf5 	bl	24008170 <lv_obj_set_size>
    lv_page_set_scrollbar_mode(h, LV_SCROLLBAR_MODE_AUTO);
24018b86:	2103      	movs	r1, #3
24018b88:	4628      	mov	r0, r5
24018b8a:	f7fe fba0 	bl	240172ce <lv_page_set_scrollbar_mode>
    lv_page_set_scroll_propagation(h, true);
24018b8e:	2101      	movs	r1, #1
24018b90:	4628      	mov	r0, r5
24018b92:	f7fe fc6b 	bl	2401746c <lv_page_set_scroll_propagation>
    lv_cont_set_fit4(lv_page_get_scrollable(page), left, right, top, bottom);
24018b96:	4628      	mov	r0, r5
24018b98:	f7fe fc7c 	bl	24017494 <lv_page_get_scrollable>
24018b9c:	2300      	movs	r3, #0
24018b9e:	2203      	movs	r2, #3
24018ba0:	4619      	mov	r1, r3
24018ba2:	9200      	str	r2, [sp, #0]
24018ba4:	f7fc f89f 	bl	24014ce6 <lv_cont_set_fit4>
    lv_theme_apply(h, LV_THEME_TABVIEW_PAGE);
24018ba8:	2112      	movs	r1, #18
24018baa:	4628      	mov	r0, r5
24018bac:	f7f8 f98a 	bl	24010ec4 <lv_theme_apply>
    if(page_signal == NULL) page_signal = lv_obj_get_signal_cb(h);
24018bb0:	6833      	ldr	r3, [r6, #0]
24018bb2:	b91b      	cbnz	r3, 24018bbc <lv_tabview_add_tab+0x68>
24018bb4:	4628      	mov	r0, r5
24018bb6:	f7f0 facc 	bl	24009152 <lv_obj_get_signal_cb>
24018bba:	6030      	str	r0, [r6, #0]
    name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
24018bbc:	4640      	mov	r0, r8
24018bbe:	f001 fcf7 	bl	2401a5b0 <__strlen_veneer>
24018bc2:	3001      	adds	r0, #1
24018bc4:	f7f6 feda 	bl	2400f97c <lv_mem_alloc>
    if(name_dm == NULL) return NULL;
24018bc8:	4606      	mov	r6, r0
24018bca:	b920      	cbnz	r0, 24018bd6 <lv_tabview_add_tab+0x82>
24018bcc:	2500      	movs	r5, #0
}
24018bce:	4628      	mov	r0, r5
24018bd0:	b004      	add	sp, #16
24018bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    strcpy(name_dm, name);
24018bd6:	4641      	mov	r1, r8
24018bd8:	f001 fcc8 	bl	2401a56c <strcpy>
    switch(ext->btns_pos) {
24018bdc:	7e23      	ldrb	r3, [r4, #24]
    ext->tab_cnt++;
24018bde:	8ae1      	ldrh	r1, [r4, #22]
    switch(ext->btns_pos) {
24018be0:	f003 0307 	and.w	r3, r3, #7
    ext->tab_cnt++;
24018be4:	3101      	adds	r1, #1
    switch(ext->btns_pos) {
24018be6:	3b03      	subs	r3, #3
    ext->tab_cnt++;
24018be8:	b289      	uxth	r1, r1
    switch(ext->btns_pos) {
24018bea:	2b01      	cmp	r3, #1
    ext->tab_cnt++;
24018bec:	82e1      	strh	r1, [r4, #22]
    switch(ext->btns_pos) {
24018bee:	d92c      	bls.n	24018c4a <lv_tabview_add_tab+0xf6>
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
24018bf0:	3101      	adds	r1, #1
24018bf2:	68e0      	ldr	r0, [r4, #12]
24018bf4:	0089      	lsls	r1, r1, #2
24018bf6:	f7f7 f849 	bl	2400fc8c <lv_mem_realloc>
24018bfa:	60e0      	str	r0, [r4, #12]
            if(ext->tab_name_ptr == NULL) return NULL;
24018bfc:	2800      	cmp	r0, #0
24018bfe:	d0e5      	beq.n	24018bcc <lv_tabview_add_tab+0x78>
            ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
24018c00:	8ae3      	ldrh	r3, [r4, #22]
24018c02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
24018c06:	3b01      	subs	r3, #1
24018c08:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
            ext->tab_name_ptr[ext->tab_cnt]     = "";
24018c0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24018c10:	4b1a      	ldr	r3, [pc, #104]	; (24018c7c <lv_tabview_add_tab+0x128>)
24018c12:	6043      	str	r3, [r0, #4]
    btnm_ext->map_p          = NULL;
24018c14:	2600      	movs	r6, #0
    lv_btnmatrix_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
24018c16:	6820      	ldr	r0, [r4, #0]
24018c18:	f7f0 fa9f 	bl	2400915a <lv_obj_get_ext_attr>
    lv_btnmatrix_set_map(ext->btns, ext->tab_name_ptr);
24018c1c:	68e1      	ldr	r1, [r4, #12]
    btnm_ext->map_p          = NULL;
24018c1e:	6006      	str	r6, [r0, #0]
    lv_btnmatrix_set_map(ext->btns, ext->tab_name_ptr);
24018c20:	6820      	ldr	r0, [r4, #0]
24018c22:	f7fb f817 	bl	24013c54 <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNMATRIX_CTRL_NO_REPEAT);
24018c26:	8aa1      	ldrh	r1, [r4, #20]
24018c28:	2210      	movs	r2, #16
24018c2a:	6820      	ldr	r0, [r4, #0]
24018c2c:	f7fb fa53 	bl	240140d6 <lv_btnmatrix_set_btn_ctrl>
    if(ext->tab_cnt == 1)  ext->tab_cur = 0;
24018c30:	8ae3      	ldrh	r3, [r4, #22]
    tabview_realign(tabview); /*Set the size of the pages, tab buttons and indicator*/
24018c32:	4638      	mov	r0, r7
    if(ext->tab_cnt == 1)  ext->tab_cur = 0;
24018c34:	2b01      	cmp	r3, #1
24018c36:	bf08      	it	eq
24018c38:	82a6      	strheq	r6, [r4, #20]
    tabview_realign(tabview); /*Set the size of the pages, tab buttons and indicator*/
24018c3a:	f7ff fd19 	bl	24018670 <tabview_realign>
    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
24018c3e:	2200      	movs	r2, #0
24018c40:	8aa1      	ldrh	r1, [r4, #20]
24018c42:	4638      	mov	r0, r7
24018c44:	f7ff fc7a 	bl	2401853c <lv_tabview_set_tab_act>
    return h;
24018c48:	e7c1      	b.n	24018bce <lv_tabview_add_tab+0x7a>
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt * 2));
24018c4a:	00c9      	lsls	r1, r1, #3
24018c4c:	68e0      	ldr	r0, [r4, #12]
24018c4e:	f7f7 f81d 	bl	2400fc8c <lv_mem_realloc>
24018c52:	60e0      	str	r0, [r4, #12]
            if(ext->tab_name_ptr == NULL) return NULL;
24018c54:	2800      	cmp	r0, #0
24018c56:	d0b9      	beq.n	24018bcc <lv_tabview_add_tab+0x78>
            if(ext->tab_cnt == 1) {
24018c58:	8ae1      	ldrh	r1, [r4, #22]
24018c5a:	4a08      	ldr	r2, [pc, #32]	; (24018c7c <lv_tabview_add_tab+0x128>)
24018c5c:	2901      	cmp	r1, #1
                ext->tab_name_ptr[ext->tab_cnt * 2 - 3] = "\n";
24018c5e:	bf1b      	ittet	ne
24018c60:	eb00 03c1 	addne.w	r3, r0, r1, lsl #3
24018c64:	4906      	ldrne	r1, [pc, #24]	; (24018c80 <lv_tabview_add_tab+0x12c>)
                ext->tab_name_ptr[1] = "";
24018c66:	e9c0 6200 	strdeq	r6, r2, [r0]
                ext->tab_name_ptr[ext->tab_cnt * 2 - 2] = name_dm;
24018c6a:	e943 1603 	strdne	r1, r6, [r3, #-12]
                ext->tab_name_ptr[ext->tab_cnt * 2 - 1] = "";
24018c6e:	bf18      	it	ne
24018c70:	f843 2c04 	strne.w	r2, [r3, #-4]
24018c74:	e7ce      	b.n	24018c14 <lv_tabview_add_tab+0xc0>
24018c76:	bf00      	nop
24018c78:	24035d30 	.word	0x24035d30
24018c7c:	900ff2a3 	.word	0x900ff2a3
24018c80:	900ff2a2 	.word	0x900ff2a2

24018c84 <lv_tabview_set_btns_pos>:
    if(btns_pos != LV_TABVIEW_TAB_POS_NONE &&
24018c84:	2904      	cmp	r1, #4
{
24018c86:	b538      	push	{r3, r4, r5, lr}
24018c88:	4605      	mov	r5, r0
24018c8a:	460c      	mov	r4, r1
    if(btns_pos != LV_TABVIEW_TAB_POS_NONE &&
24018c8c:	d80a      	bhi.n	24018ca4 <lv_tabview_set_btns_pos+0x20>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018c8e:	f7f0 fa64 	bl	2400915a <lv_obj_get_ext_attr>
    ext->btns_pos = btns_pos;
24018c92:	7e03      	ldrb	r3, [r0, #24]
24018c94:	f364 0302 	bfi	r3, r4, #0, #3
24018c98:	7603      	strb	r3, [r0, #24]
    tabview_realign(tabview);
24018c9a:	4628      	mov	r0, r5
}
24018c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tabview_realign(tabview);
24018ca0:	f7ff bce6 	b.w	24018670 <tabview_realign>
}
24018ca4:	bd38      	pop	{r3, r4, r5, pc}

24018ca6 <lv_tabview_get_tab_act>:
{
24018ca6:	b508      	push	{r3, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018ca8:	f7f0 fa57 	bl	2400915a <lv_obj_get_ext_attr>
}
24018cac:	8a80      	ldrh	r0, [r0, #20]
24018cae:	bd08      	pop	{r3, pc}

24018cb0 <tab_btnm_event_cb>:
    if(event != LV_EVENT_CLICKED) return;
24018cb0:	2906      	cmp	r1, #6
{
24018cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
24018cb4:	4605      	mov	r5, r0
    if(event != LV_EVENT_CLICKED) return;
24018cb6:	d12c      	bne.n	24018d12 <tab_btnm_event_cb+0x62>
    uint16_t btn_id = lv_btnmatrix_get_active_btn(tab_btnm);
24018cb8:	f7fb fa2e 	bl	24014118 <lv_btnmatrix_get_active_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
24018cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t btn_id = lv_btnmatrix_get_active_btn(tab_btnm);
24018cc0:	4604      	mov	r4, r0
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
24018cc2:	4298      	cmp	r0, r3
24018cc4:	d025      	beq.n	24018d12 <tab_btnm_event_cb+0x62>
    if(lv_btnmatrix_get_btn_ctrl(tab_btnm, btn_id, LV_BTNMATRIX_CTRL_DISABLED)) return;
24018cc6:	4601      	mov	r1, r0
24018cc8:	2220      	movs	r2, #32
24018cca:	4628      	mov	r0, r5
24018ccc:	f7fb fa29 	bl	24014122 <lv_btnmatrix_get_btn_ctrl>
24018cd0:	b9f8      	cbnz	r0, 24018d12 <tab_btnm_event_cb+0x62>
    lv_btnmatrix_clear_btn_ctrl_all(tab_btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
24018cd2:	4628      	mov	r0, r5
24018cd4:	2180      	movs	r1, #128	; 0x80
24018cd6:	f7fb f9ec 	bl	240140b2 <lv_btnmatrix_clear_btn_ctrl_all>
    lv_btnmatrix_set_btn_ctrl(tab_btnm, btn_id, LV_BTNMATRIX_CTRL_CHECK_STATE);
24018cda:	2280      	movs	r2, #128	; 0x80
24018cdc:	4621      	mov	r1, r4
24018cde:	4628      	mov	r0, r5
24018ce0:	f7fb f9f9 	bl	240140d6 <lv_btnmatrix_set_btn_ctrl>
    lv_obj_t * tabview = lv_obj_get_parent(tab_btnm);
24018ce4:	4628      	mov	r0, r5
24018ce6:	f7ef fac1 	bl	2400826c <lv_obj_get_parent>
24018cea:	4605      	mov	r5, r0
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
24018cec:	f7ff ffdb 	bl	24018ca6 <lv_tabview_get_tab_act>
    lv_tabview_set_tab_act(tabview, btn_id, LV_ANIM_ON);
24018cf0:	2201      	movs	r2, #1
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
24018cf2:	4606      	mov	r6, r0
    lv_tabview_set_tab_act(tabview, btn_id, LV_ANIM_ON);
24018cf4:	4621      	mov	r1, r4
24018cf6:	4628      	mov	r0, r5
24018cf8:	f7ff fc20 	bl	2401853c <lv_tabview_set_tab_act>
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
24018cfc:	4628      	mov	r0, r5
24018cfe:	f7ff ffd2 	bl	24018ca6 <lv_tabview_get_tab_act>
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
24018d02:	42b0      	cmp	r0, r6
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
24018d04:	9001      	str	r0, [sp, #4]
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
24018d06:	d004      	beq.n	24018d12 <tab_btnm_event_cb+0x62>
24018d08:	aa01      	add	r2, sp, #4
24018d0a:	2110      	movs	r1, #16
24018d0c:	4628      	mov	r0, r5
24018d0e:	f7ef f863 	bl	24007dd8 <lv_event_send>
}
24018d12:	b002      	add	sp, #8
24018d14:	bd70      	pop	{r4, r5, r6, pc}
	...

24018d18 <lv_tabview_get_tab>:
{
24018d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
24018d1a:	460d      	mov	r5, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018d1c:	f7f0 fa1d 	bl	2400915a <lv_obj_get_ext_attr>
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
24018d20:	6880      	ldr	r0, [r0, #8]
    uint16_t i             = 0;
24018d22:	2400      	movs	r4, #0
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
24018d24:	f7fe fbb6 	bl	24017494 <lv_page_get_scrollable>
    lv_obj_t * page        = lv_obj_get_child_back(content_scrl, NULL);
24018d28:	2100      	movs	r1, #0
    lv_obj_t * content_scrl = lv_page_get_scrollable(ext->content);
24018d2a:	4606      	mov	r6, r0
        if(lv_obj_get_signal_cb(page) == page_signal) i++;
24018d2c:	4f0b      	ldr	r7, [pc, #44]	; (24018d5c <lv_tabview_get_tab+0x44>)
    lv_obj_t * page        = lv_obj_get_child_back(content_scrl, NULL);
24018d2e:	f7ef fac0 	bl	240082b2 <lv_obj_get_child_back>
24018d32:	4601      	mov	r1, r0
        if(lv_obj_get_signal_cb(page) == page_signal) i++;
24018d34:	4608      	mov	r0, r1
    while(page != NULL && i != id) {
24018d36:	b109      	cbz	r1, 24018d3c <lv_tabview_get_tab+0x24>
24018d38:	42ac      	cmp	r4, r5
24018d3a:	d101      	bne.n	24018d40 <lv_tabview_get_tab+0x28>
}
24018d3c:	b003      	add	sp, #12
24018d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(lv_obj_get_signal_cb(page) == page_signal) i++;
24018d40:	9101      	str	r1, [sp, #4]
24018d42:	f7f0 fa06 	bl	24009152 <lv_obj_get_signal_cb>
24018d46:	683b      	ldr	r3, [r7, #0]
24018d48:	9901      	ldr	r1, [sp, #4]
24018d4a:	4283      	cmp	r3, r0
        page = lv_obj_get_child_back(content_scrl, page);
24018d4c:	4630      	mov	r0, r6
        if(lv_obj_get_signal_cb(page) == page_signal) i++;
24018d4e:	bf04      	itt	eq
24018d50:	3401      	addeq	r4, #1
24018d52:	b2a4      	uxtheq	r4, r4
        page = lv_obj_get_child_back(content_scrl, page);
24018d54:	f7ef faad 	bl	240082b2 <lv_obj_get_child_back>
24018d58:	4601      	mov	r1, r0
24018d5a:	e7eb      	b.n	24018d34 <lv_tabview_get_tab+0x1c>
24018d5c:	24035d30 	.word	0x24035d30

24018d60 <tabview_scrl_signal>:
{
24018d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_scrl_signal(tabview_scrl, sign, param);
24018d64:	4b49      	ldr	r3, [pc, #292]	; (24018e8c <tabview_scrl_signal+0x12c>)
{
24018d66:	4605      	mov	r5, r0
24018d68:	460c      	mov	r4, r1
24018d6a:	4617      	mov	r7, r2
    res = ancestor_scrl_signal(tabview_scrl, sign, param);
24018d6c:	681b      	ldr	r3, [r3, #0]
24018d6e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24018d70:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(tabview_scrl, sign, param);
24018d72:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
24018d74:	f040 8081 	bne.w	24018e7a <tabview_scrl_signal+0x11a>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
24018d78:	2c07      	cmp	r4, #7
24018d7a:	d106      	bne.n	24018d8a <tabview_scrl_signal+0x2a>
24018d7c:	4944      	ldr	r1, [pc, #272]	; (24018e90 <tabview_scrl_signal+0x130>)
24018d7e:	4638      	mov	r0, r7
}
24018d80:	b004      	add	sp, #16
24018d82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
24018d86:	f7f0 ba1c 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_obj_t * cont    = lv_obj_get_parent(tabview_scrl);
24018d8a:	4628      	mov	r0, r5
24018d8c:	f7ef fa6e 	bl	2400826c <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
24018d90:	f7ef fa6c 	bl	2400826c <lv_obj_get_parent>
    if(sign == LV_SIGNAL_DRAG_THROW_BEGIN) {
24018d94:	2c12      	cmp	r4, #18
    lv_obj_t * tabview = lv_obj_get_parent(cont);
24018d96:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_DRAG_THROW_BEGIN) {
24018d98:	d16f      	bne.n	24018e7a <tabview_scrl_signal+0x11a>
        lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
24018d9a:	f7f0 f9de 	bl	2400915a <lv_obj_get_ext_attr>
24018d9e:	4607      	mov	r7, r0
        lv_indev_t * indev = lv_indev_get_act();
24018da0:	f7ee fa10 	bl	240071c4 <lv_indev_get_act>
24018da4:	4606      	mov	r6, r0
        lv_indev_get_point(indev, &point_act);
24018da6:	a901      	add	r1, sp, #4
24018da8:	f7ee fa43 	bl	24007232 <lv_indev_get_point>
        lv_indev_get_vect(indev, &vect);
24018dac:	a902      	add	r1, sp, #8
24018dae:	4630      	mov	r0, r6
24018db0:	f7ee fa61 	bl	24007276 <lv_indev_get_vect>
        while(vect.x != 0) {
24018db4:	2200      	movs	r2, #0
24018db6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
            vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
24018dba:	2164      	movs	r1, #100	; 0x64
        lv_coord_t x_predict = 0;
24018dbc:	4614      	mov	r4, r2
        while(vect.x != 0) {
24018dbe:	bb63      	cbnz	r3, 24018e1a <tabview_scrl_signal+0xba>
24018dc0:	b10a      	cbz	r2, 24018dc6 <tabview_scrl_signal+0x66>
24018dc2:	f8ad 3008 	strh.w	r3, [sp, #8]
        res = lv_indev_finish_drag(indev);
24018dc6:	4630      	mov	r0, r6
24018dc8:	f7ee fa65 	bl	24007296 <lv_indev_finish_drag>
        if(res != LV_RES_OK) return res;
24018dcc:	2801      	cmp	r0, #1
        res = lv_indev_finish_drag(indev);
24018dce:	4606      	mov	r6, r0
        if(res != LV_RES_OK) return res;
24018dd0:	d153      	bne.n	24018e7a <tabview_scrl_signal+0x11a>
        lv_obj_t * tab_page = lv_tabview_get_tab(tabview, ext->tab_cur);
24018dd2:	8ab9      	ldrh	r1, [r7, #20]
24018dd4:	4628      	mov	r0, r5
24018dd6:	f7ff ff9f 	bl	24018d18 <lv_tabview_get_tab>
        if(tab_page == NULL) return LV_RES_OK;
24018dda:	2800      	cmp	r0, #0
24018ddc:	d04d      	beq.n	24018e7a <tabview_scrl_signal+0x11a>
        lv_coord_t page_x1  = tab_page->coords.x1 - tabview->coords.x1 + x_predict;
24018dde:	8a2b      	ldrh	r3, [r5, #16]
24018de0:	eba4 0803 	sub.w	r8, r4, r3
24018de4:	8a03      	ldrh	r3, [r0, #16]
        lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabview);
24018de6:	4628      	mov	r0, r5
        lv_coord_t page_x1  = tab_page->coords.x1 - tabview->coords.x1 + x_predict;
24018de8:	4498      	add	r8, r3
        lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabview);
24018dea:	f7ef fc10 	bl	2400860e <lv_obj_get_width>
24018dee:	4682      	mov	sl, r0
        lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
24018df0:	4628      	mov	r0, r5
24018df2:	f7ef fc0c 	bl	2400860e <lv_obj_get_width>
        lv_coord_t page_x1  = tab_page->coords.x1 - tabview->coords.x1 + x_predict;
24018df6:	fa1f f888 	uxth.w	r8, r8
        lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
24018dfa:	eb00 79d0 	add.w	r9, r0, r0, lsr #31
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(tabview);
24018dfe:	4628      	mov	r0, r5
24018e00:	f7ef fc71 	bl	240086e6 <lv_obj_get_base_dir>
        int16_t tab_cur = ext->tab_cur;
24018e04:	8abc      	ldrh	r4, [r7, #20]
        lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
24018e06:	f349 094f 	sbfx	r9, r9, #1, #16
        if(page_x1 > treshold) {
24018e0a:	fa0f f388 	sxth.w	r3, r8
24018e0e:	454b      	cmp	r3, r9
24018e10:	dd0e      	ble.n	24018e30 <tabview_scrl_signal+0xd0>
            if(base_dir != LV_BIDI_DIR_RTL) tab_cur--;
24018e12:	2801      	cmp	r0, #1
24018e14:	d037      	beq.n	24018e86 <tabview_scrl_signal+0x126>
            else tab_cur --;
24018e16:	3c01      	subs	r4, #1
24018e18:	e00f      	b.n	24018e3a <tabview_scrl_signal+0xda>
            x_predict += vect.x;
24018e1a:	441c      	add	r4, r3
            vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
24018e1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24018e20:	2201      	movs	r2, #1
24018e22:	eb03 1343 	add.w	r3, r3, r3, lsl #5
            x_predict += vect.x;
24018e26:	b224      	sxth	r4, r4
            vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
24018e28:	fb93 f3f1 	sdiv	r3, r3, r1
24018e2c:	b21b      	sxth	r3, r3
24018e2e:	e7c6      	b.n	24018dbe <tabview_scrl_signal+0x5e>
        lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabview);
24018e30:	44d0      	add	r8, sl
        else if(page_x2 < treshold) {
24018e32:	fa0f f888 	sxth.w	r8, r8
24018e36:	45c8      	cmp	r8, r9
24018e38:	db23      	blt.n	24018e82 <tabview_scrl_signal+0x122>
        if(tab_cur > ext->tab_cnt - 1) tab_cur = ext->tab_cnt - 1;
24018e3a:	8afb      	ldrh	r3, [r7, #22]
            else tab_cur --;
24018e3c:	b224      	sxth	r4, r4
        uint32_t id_prev = lv_tabview_get_tab_act(tabview);
24018e3e:	4628      	mov	r0, r5
        if(tab_cur > ext->tab_cnt - 1) tab_cur = ext->tab_cnt - 1;
24018e40:	42a3      	cmp	r3, r4
24018e42:	bfdc      	itt	le
24018e44:	f103 33ff 	addle.w	r3, r3, #4294967295
24018e48:	b21c      	sxthle	r4, r3
        uint32_t id_prev = lv_tabview_get_tab_act(tabview);
24018e4a:	f7ff ff2c 	bl	24018ca6 <lv_tabview_get_tab_act>
        lv_tabview_set_tab_act(tabview, tab_cur, LV_ANIM_ON);
24018e4e:	2201      	movs	r2, #1
24018e50:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
        uint32_t id_prev = lv_tabview_get_tab_act(tabview);
24018e54:	9003      	str	r0, [sp, #12]
        lv_tabview_set_tab_act(tabview, tab_cur, LV_ANIM_ON);
24018e56:	4628      	mov	r0, r5
24018e58:	b289      	uxth	r1, r1
24018e5a:	f7ff fb6f 	bl	2401853c <lv_tabview_set_tab_act>
        uint32_t id_new = lv_tabview_get_tab_act(tabview);
24018e5e:	4628      	mov	r0, r5
24018e60:	f7ff ff21 	bl	24018ca6 <lv_tabview_get_tab_act>
        if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_prev);
24018e64:	9b03      	ldr	r3, [sp, #12]
24018e66:	4298      	cmp	r0, r3
24018e68:	d007      	beq.n	24018e7a <tabview_scrl_signal+0x11a>
24018e6a:	aa03      	add	r2, sp, #12
24018e6c:	2110      	movs	r1, #16
24018e6e:	4628      	mov	r0, r5
24018e70:	f7ee ffb2 	bl	24007dd8 <lv_event_send>
        if(res != LV_RES_OK) return res;
24018e74:	2801      	cmp	r0, #1
24018e76:	bf18      	it	ne
24018e78:	4606      	movne	r6, r0
}
24018e7a:	4630      	mov	r0, r6
24018e7c:	b004      	add	sp, #16
24018e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(base_dir != LV_BIDI_DIR_RTL) tab_cur++;
24018e82:	2801      	cmp	r0, #1
24018e84:	d0c7      	beq.n	24018e16 <tabview_scrl_signal+0xb6>
24018e86:	3401      	adds	r4, #1
24018e88:	e7d7      	b.n	24018e3a <tabview_scrl_signal+0xda>
24018e8a:	bf00      	nop
24018e8c:	24035d28 	.word	0x24035d28
24018e90:	900ff2a3 	.word	0x900ff2a3

24018e94 <lv_tabview_create>:
{
24018e94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
24018e98:	4680      	mov	r8, r0
24018e9a:	460f      	mov	r7, r1
    lv_obj_t * tabview = lv_obj_create(par, copy);
24018e9c:	f7ef fa3a 	bl	24008314 <lv_obj_create>
    if(tabview == NULL) return NULL;
24018ea0:	4605      	mov	r5, r0
24018ea2:	b920      	cbnz	r0, 24018eae <lv_tabview_create+0x1a>
24018ea4:	2400      	movs	r4, #0
}
24018ea6:	4620      	mov	r0, r4
24018ea8:	b002      	add	sp, #8
24018eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(tabview);
24018eae:	4c8b      	ldr	r4, [pc, #556]	; (240190dc <lv_tabview_create+0x248>)
24018eb0:	6823      	ldr	r3, [r4, #0]
24018eb2:	b913      	cbnz	r3, 24018eba <lv_tabview_create+0x26>
24018eb4:	f7f0 f94d 	bl	24009152 <lv_obj_get_signal_cb>
24018eb8:	6020      	str	r0, [r4, #0]
    lv_tabview_ext_t * ext = lv_obj_allocate_ext_attr(tabview, sizeof(lv_tabview_ext_t));
24018eba:	211c      	movs	r1, #28
24018ebc:	4628      	mov	r0, r5
24018ebe:	f7ee ffa5 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24018ec2:	4604      	mov	r4, r0
24018ec4:	b918      	cbnz	r0, 24018ece <lv_tabview_create+0x3a>
        lv_obj_del(tabview);
24018ec6:	4628      	mov	r0, r5
24018ec8:	f7ef f9a6 	bl	24008218 <lv_obj_del>
        return NULL;
24018ecc:	e7eb      	b.n	24018ea6 <lv_tabview_create+0x12>
    ext->btns_pos     = LV_TABVIEW_TAB_POS_TOP;
24018ece:	7e03      	ldrb	r3, [r0, #24]
24018ed0:	2201      	movs	r2, #1
    ext->content      = NULL;
24018ed2:	2600      	movs	r6, #0
    lv_obj_set_signal_cb(tabview, lv_tabview_signal);
24018ed4:	4982      	ldr	r1, [pc, #520]	; (240190e0 <lv_tabview_create+0x24c>)
    ext->btns_pos     = LV_TABVIEW_TAB_POS_TOP;
24018ed6:	f362 0302 	bfi	r3, r2, #0, #3
    ext->btns         = NULL;
24018eda:	6006      	str	r6, [r0, #0]
    ext->btns_pos     = LV_TABVIEW_TAB_POS_TOP;
24018edc:	7603      	strb	r3, [r0, #24]
    ext->indic        = NULL;
24018ede:	e9c0 6601 	strd	r6, r6, [r0, #4]
    ext->tab_cur      = 0;
24018ee2:	e9c0 6604 	strd	r6, r6, [r0, #16]
    lv_obj_set_signal_cb(tabview, lv_tabview_signal);
24018ee6:	4628      	mov	r0, r5
24018ee8:	f7ee ff86 	bl	24007df8 <lv_obj_set_signal_cb>
    if(copy == NULL) {
24018eec:	2f00      	cmp	r7, #0
24018eee:	d171      	bne.n	24018fd4 <lv_tabview_create+0x140>
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
24018ef0:	2004      	movs	r0, #4
24018ef2:	f7f6 fd43 	bl	2400f97c <lv_mem_alloc>
24018ef6:	60e0      	str	r0, [r4, #12]
        if(ext->tab_name_ptr == NULL) return NULL;
24018ef8:	2800      	cmp	r0, #0
24018efa:	d0d3      	beq.n	24018ea4 <lv_tabview_create+0x10>
        ext->tab_name_ptr[0] = "";
24018efc:	4b79      	ldr	r3, [pc, #484]	; (240190e4 <lv_tabview_create+0x250>)
24018efe:	6003      	str	r3, [r0, #0]
        if(par) {
24018f00:	f1b8 0f00 	cmp.w	r8, #0
24018f04:	d05e      	beq.n	24018fc4 <lv_tabview_create+0x130>
            w = lv_obj_get_width_fit(lv_obj_get_parent(tabview));
24018f06:	4628      	mov	r0, r5
24018f08:	f7ef f9b0 	bl	2400826c <lv_obj_get_parent>
24018f0c:	f7f0 f8f9 	bl	24009102 <lv_obj_get_width_fit>
24018f10:	4606      	mov	r6, r0
            h = lv_obj_get_height_fit(lv_obj_get_parent(tabview));
24018f12:	4628      	mov	r0, r5
24018f14:	f7ef f9aa 	bl	2400826c <lv_obj_get_parent>
24018f18:	f7f0 f907 	bl	2400912a <lv_obj_get_height_fit>
        lv_obj_set_size(tabview, w, h);
24018f1c:	4602      	mov	r2, r0
24018f1e:	4631      	mov	r1, r6
24018f20:	4628      	mov	r0, r5
        if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrollable(ext->content));
24018f22:	4e71      	ldr	r6, [pc, #452]	; (240190e8 <lv_tabview_create+0x254>)
        lv_obj_set_size(tabview, w, h);
24018f24:	f7ef f924 	bl	24008170 <lv_obj_set_size>
        ext->content = lv_page_create(tabview, NULL);
24018f28:	2100      	movs	r1, #0
24018f2a:	4628      	mov	r0, r5
24018f2c:	f7fe f9fc 	bl	24017328 <lv_page_create>
        ext->btns    = lv_btnmatrix_create(tabview, NULL);
24018f30:	2100      	movs	r1, #0
        ext->content = lv_page_create(tabview, NULL);
24018f32:	60a0      	str	r0, [r4, #8]
        ext->btns    = lv_btnmatrix_create(tabview, NULL);
24018f34:	4628      	mov	r0, r5
24018f36:	f7fb f823 	bl	24013f80 <lv_btnmatrix_create>
        ext->indic   = lv_obj_create(ext->btns, NULL);
24018f3a:	2100      	movs	r1, #0
        ext->btns    = lv_btnmatrix_create(tabview, NULL);
24018f3c:	6020      	str	r0, [r4, #0]
        ext->indic   = lv_obj_create(ext->btns, NULL);
24018f3e:	f7ef f9e9 	bl	24008314 <lv_obj_create>
        if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrollable(ext->content));
24018f42:	6833      	ldr	r3, [r6, #0]
        ext->indic   = lv_obj_create(ext->btns, NULL);
24018f44:	6060      	str	r0, [r4, #4]
        if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrollable(ext->content));
24018f46:	b92b      	cbnz	r3, 24018f54 <lv_tabview_create+0xc0>
24018f48:	68a0      	ldr	r0, [r4, #8]
24018f4a:	f7fe faa3 	bl	24017494 <lv_page_get_scrollable>
24018f4e:	f7f0 f900 	bl	24009152 <lv_obj_get_signal_cb>
24018f52:	6030      	str	r0, [r6, #0]
        lv_obj_set_signal_cb(lv_page_get_scrollable(ext->content), tabview_scrl_signal);
24018f54:	68a0      	ldr	r0, [r4, #8]
24018f56:	f7fe fa9d 	bl	24017494 <lv_page_get_scrollable>
24018f5a:	4964      	ldr	r1, [pc, #400]	; (240190ec <lv_tabview_create+0x258>)
24018f5c:	f7ee ff4c 	bl	24007df8 <lv_obj_set_signal_cb>
        lv_btnmatrix_set_map(ext->btns, tab_def);
24018f60:	4963      	ldr	r1, [pc, #396]	; (240190f0 <lv_tabview_create+0x25c>)
24018f62:	6820      	ldr	r0, [r4, #0]
24018f64:	f7fa fe76 	bl	24013c54 <lv_btnmatrix_set_map>
        lv_obj_set_event_cb(ext->btns, tab_btnm_event_cb);
24018f68:	4962      	ldr	r1, [pc, #392]	; (240190f4 <lv_tabview_create+0x260>)
24018f6a:	6820      	ldr	r0, [r4, #0]
24018f6c:	f7ee feee 	bl	24007d4c <lv_obj_set_event_cb>
        lv_obj_set_click(ext->indic, false);
24018f70:	2100      	movs	r1, #0
24018f72:	6860      	ldr	r0, [r4, #4]
24018f74:	f7ee fea1 	bl	24007cba <lv_obj_set_click>
        lv_obj_set_drag_dir(lv_page_get_scrollable(ext->content), LV_DRAG_DIR_ONE);
24018f78:	68a0      	ldr	r0, [r4, #8]
24018f7a:	f7fe fa8b 	bl	24017494 <lv_page_get_scrollable>
24018f7e:	2104      	movs	r1, #4
24018f80:	f7ee feb0 	bl	24007ce4 <lv_obj_set_drag_dir>
    lv_cont_set_fit2(lv_page_get_scrollable(page), hor, ver);
24018f84:	68a0      	ldr	r0, [r4, #8]
24018f86:	f7fe fa85 	bl	24017494 <lv_page_get_scrollable>
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
24018f8a:	2302      	movs	r3, #2
24018f8c:	2201      	movs	r2, #1
24018f8e:	9300      	str	r3, [sp, #0]
24018f90:	4611      	mov	r1, r2
24018f92:	f7fb fea8 	bl	24014ce6 <lv_cont_set_fit4>
    lv_cont_set_layout(lv_page_get_scrollable(page), layout);
24018f96:	68a0      	ldr	r0, [r4, #8]
24018f98:	f7fe fa7c 	bl	24017494 <lv_page_get_scrollable>
24018f9c:	2105      	movs	r1, #5
24018f9e:	f7fb fe8d 	bl	24014cbc <lv_cont_set_layout>
        lv_page_set_scrollbar_mode(ext->content, LV_SCROLLBAR_MODE_OFF);
24018fa2:	2100      	movs	r1, #0
24018fa4:	68a0      	ldr	r0, [r4, #8]
24018fa6:	f7fe f992 	bl	240172ce <lv_page_set_scrollbar_mode>
        lv_obj_clean_style_list(ext->content, LV_PAGE_PART_BG);
24018faa:	2100      	movs	r1, #0
24018fac:	68a0      	ldr	r0, [r4, #8]
24018fae:	f7ef fb4e 	bl	2400864e <lv_obj_clean_style_list>
        lv_theme_apply(tabview, LV_THEME_TABVIEW);
24018fb2:	2111      	movs	r1, #17
24018fb4:	4628      	mov	r0, r5
24018fb6:	f7f7 ff85 	bl	24010ec4 <lv_theme_apply>
    tabview_realign(tabview);
24018fba:	4628      	mov	r0, r5
    return tabview;
24018fbc:	462c      	mov	r4, r5
    tabview_realign(tabview);
24018fbe:	f7ff fb57 	bl	24018670 <tabview_realign>
    return tabview;
24018fc2:	e770      	b.n	24018ea6 <lv_tabview_create+0x12>
            w = lv_disp_get_hor_res(NULL);
24018fc4:	4640      	mov	r0, r8
24018fc6:	f7f5 fef1 	bl	2400edac <lv_disp_get_hor_res>
24018fca:	4606      	mov	r6, r0
            h = lv_disp_get_ver_res(NULL);
24018fcc:	4640      	mov	r0, r8
24018fce:	f7f5 feff 	bl	2400edd0 <lv_disp_get_ver_res>
24018fd2:	e7a3      	b.n	24018f1c <lv_tabview_create+0x88>
        lv_tabview_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24018fd4:	4638      	mov	r0, r7
24018fd6:	f7f0 f8c0 	bl	2400915a <lv_obj_get_ext_attr>
24018fda:	4680      	mov	r8, r0
        ext->btns                   = lv_btnmatrix_create(tabview, copy_ext->btns);
24018fdc:	6801      	ldr	r1, [r0, #0]
24018fde:	4628      	mov	r0, r5
        ext->point_last.x           = 0;
24018fe0:	6126      	str	r6, [r4, #16]
        ext->btns                   = lv_btnmatrix_create(tabview, copy_ext->btns);
24018fe2:	f7fa ffcd 	bl	24013f80 <lv_btnmatrix_create>
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
24018fe6:	f8d8 1004 	ldr.w	r1, [r8, #4]
        ext->btns                   = lv_btnmatrix_create(tabview, copy_ext->btns);
24018fea:	6020      	str	r0, [r4, #0]
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
24018fec:	f7ef f992 	bl	24008314 <lv_obj_create>
        ext->content                = lv_page_create(tabview, copy_ext->content);
24018ff0:	f8d8 1008 	ldr.w	r1, [r8, #8]
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
24018ff4:	6060      	str	r0, [r4, #4]
        ext->content                = lv_page_create(tabview, copy_ext->content);
24018ff6:	4628      	mov	r0, r5
24018ff8:	f7fe f996 	bl	24017328 <lv_page_create>
24018ffc:	60a0      	str	r0, [r4, #8]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
24018ffe:	2004      	movs	r0, #4
24019000:	f7f6 fcbc 	bl	2400f97c <lv_mem_alloc>
24019004:	4601      	mov	r1, r0
24019006:	60e0      	str	r0, [r4, #12]
        if(ext->tab_name_ptr == NULL) return NULL;
24019008:	2800      	cmp	r0, #0
2401900a:	f43f af4b 	beq.w	24018ea4 <lv_tabview_create+0x10>
        ext->tab_name_ptr[0] = "";
2401900e:	4b35      	ldr	r3, [pc, #212]	; (240190e4 <lv_tabview_create+0x250>)
24019010:	6003      	str	r3, [r0, #0]
        lv_btnmatrix_set_map(ext->btns, ext->tab_name_ptr);
24019012:	6820      	ldr	r0, [r4, #0]
24019014:	f7fa fe1e 	bl	24013c54 <lv_btnmatrix_set_map>
        lv_style_list_copy(lv_obj_get_style_list(tabview, LV_TABVIEW_PART_BG_SCROLLABLE), lv_obj_get_style_list(copy,
24019018:	2140      	movs	r1, #64	; 0x40
2401901a:	4628      	mov	r0, r5
2401901c:	f7ef fb05 	bl	2400862a <lv_obj_get_style_list>
24019020:	4604      	mov	r4, r0
24019022:	2140      	movs	r1, #64	; 0x40
24019024:	4638      	mov	r0, r7
24019026:	f7ef fb00 	bl	2400862a <lv_obj_get_style_list>
2401902a:	4601      	mov	r1, r0
2401902c:	4620      	mov	r0, r4
2401902e:	f7f1 fd4b 	bl	2400aac8 <lv_style_list_copy>
        lv_style_list_copy(lv_obj_get_style_list(tabview, LV_TABVIEW_PART_TAB_BG), lv_obj_get_style_list(copy,
24019032:	2141      	movs	r1, #65	; 0x41
24019034:	4628      	mov	r0, r5
24019036:	f7ef faf8 	bl	2400862a <lv_obj_get_style_list>
2401903a:	4604      	mov	r4, r0
2401903c:	2141      	movs	r1, #65	; 0x41
2401903e:	4638      	mov	r0, r7
24019040:	f7ef faf3 	bl	2400862a <lv_obj_get_style_list>
24019044:	4601      	mov	r1, r0
24019046:	4620      	mov	r0, r4
24019048:	f7f1 fd3e 	bl	2400aac8 <lv_style_list_copy>
        lv_style_list_copy(lv_obj_get_style_list(tabview, LV_TABVIEW_PART_TAB_BTN), lv_obj_get_style_list(copy,
2401904c:	2142      	movs	r1, #66	; 0x42
2401904e:	4628      	mov	r0, r5
24019050:	f7ef faeb 	bl	2400862a <lv_obj_get_style_list>
24019054:	4604      	mov	r4, r0
24019056:	2142      	movs	r1, #66	; 0x42
24019058:	4638      	mov	r0, r7
2401905a:	f7ef fae6 	bl	2400862a <lv_obj_get_style_list>
2401905e:	4601      	mov	r1, r0
24019060:	4620      	mov	r0, r4
24019062:	f7f1 fd31 	bl	2400aac8 <lv_style_list_copy>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
24019066:	fa1f f986 	uxth.w	r9, r6
2401906a:	f8b8 3016 	ldrh.w	r3, [r8, #22]
2401906e:	454b      	cmp	r3, r9
24019070:	d805      	bhi.n	2401907e <lv_tabview_create+0x1ea>
        lv_obj_refresh_style(tabview, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24019072:	22ff      	movs	r2, #255	; 0xff
24019074:	4628      	mov	r0, r5
24019076:	4611      	mov	r1, r2
24019078:	f7ef ff22 	bl	24008ec0 <lv_obj_refresh_style>
2401907c:	e79d      	b.n	24018fba <lv_tabview_create+0x126>
            lv_obj_t * new_tab = lv_tabview_add_tab(tabview, copy_ext->tab_name_ptr[i]);
2401907e:	b2b2      	uxth	r2, r6
24019080:	f8d8 300c 	ldr.w	r3, [r8, #12]
24019084:	4628      	mov	r0, r5
24019086:	3601      	adds	r6, #1
24019088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
2401908c:	f7ff fd62 	bl	24018b54 <lv_tabview_add_tab>
24019090:	4604      	mov	r4, r0
            lv_obj_t * copy_tab = lv_tabview_get_tab(copy, i);
24019092:	4649      	mov	r1, r9
24019094:	4638      	mov	r0, r7
24019096:	f7ff fe3f 	bl	24018d18 <lv_tabview_get_tab>
            lv_style_list_copy(lv_obj_get_style_list(new_tab, LV_PAGE_PART_SCROLLABLE), lv_obj_get_style_list(copy_tab,
2401909a:	2140      	movs	r1, #64	; 0x40
            lv_obj_t * copy_tab = lv_tabview_get_tab(copy, i);
2401909c:	4681      	mov	r9, r0
            lv_style_list_copy(lv_obj_get_style_list(new_tab, LV_PAGE_PART_SCROLLABLE), lv_obj_get_style_list(copy_tab,
2401909e:	4620      	mov	r0, r4
240190a0:	f7ef fac3 	bl	2400862a <lv_obj_get_style_list>
240190a4:	4682      	mov	sl, r0
240190a6:	2140      	movs	r1, #64	; 0x40
240190a8:	4648      	mov	r0, r9
240190aa:	f7ef fabe 	bl	2400862a <lv_obj_get_style_list>
240190ae:	4601      	mov	r1, r0
240190b0:	4650      	mov	r0, sl
240190b2:	f7f1 fd09 	bl	2400aac8 <lv_style_list_copy>
            lv_style_list_copy(lv_obj_get_style_list(new_tab, LV_PAGE_PART_SCROLLBAR), lv_obj_get_style_list(copy_tab,
240190b6:	2101      	movs	r1, #1
240190b8:	4620      	mov	r0, r4
240190ba:	f7ef fab6 	bl	2400862a <lv_obj_get_style_list>
240190be:	4682      	mov	sl, r0
240190c0:	2101      	movs	r1, #1
240190c2:	4648      	mov	r0, r9
240190c4:	f7ef fab1 	bl	2400862a <lv_obj_get_style_list>
240190c8:	4601      	mov	r1, r0
240190ca:	4650      	mov	r0, sl
240190cc:	f7f1 fcfc 	bl	2400aac8 <lv_style_list_copy>
            lv_obj_refresh_style(new_tab, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
240190d0:	22ff      	movs	r2, #255	; 0xff
240190d2:	4620      	mov	r0, r4
240190d4:	4611      	mov	r1, r2
240190d6:	f7ef fef3 	bl	24008ec0 <lv_obj_refresh_style>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
240190da:	e7c4      	b.n	24019066 <lv_tabview_create+0x1d2>
240190dc:	24035d2c 	.word	0x24035d2c
240190e0:	24018989 	.word	0x24018989
240190e4:	900ff2a3 	.word	0x900ff2a3
240190e8:	24035d28 	.word	0x24035d28
240190ec:	24018d61 	.word	0x24018d61
240190f0:	2401a714 	.word	0x2401a714
240190f4:	24018cb1 	.word	0x24018cb1

240190f8 <lv_textarea_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_textarea_design(lv_obj_t * ta, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
240190f8:	2a02      	cmp	r2, #2
{
240190fa:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
240190fc:	d104      	bne.n	24019108 <lv_textarea_design+0x10>
        /*Return false if the object is not covers the mask_p area*/
        return ancestor_design(ta, clip_area, mode);
240190fe:	4b07      	ldr	r3, [pc, #28]	; (2401911c <lv_textarea_design+0x24>)
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(ta, clip_area, mode);
    }
    return LV_DESIGN_RES_OK;
}
24019100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(ta, clip_area, mode);
24019104:	681b      	ldr	r3, [r3, #0]
24019106:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
24019108:	b91a      	cbnz	r2, 24019112 <lv_textarea_design+0x1a>
        ancestor_design(ta, clip_area, mode);
2401910a:	4b04      	ldr	r3, [pc, #16]	; (2401911c <lv_textarea_design+0x24>)
2401910c:	681b      	ldr	r3, [r3, #0]
2401910e:	4798      	blx	r3
24019110:	e001      	b.n	24019116 <lv_textarea_design+0x1e>
    else if(mode == LV_DESIGN_DRAW_POST) {
24019112:	2a01      	cmp	r2, #1
24019114:	d0f9      	beq.n	2401910a <lv_textarea_design+0x12>
}
24019116:	2000      	movs	r0, #0
24019118:	bd10      	pop	{r4, pc}
2401911a:	bf00      	nop
2401911c:	24035d34 	.word	0x24035d34

24019120 <lv_page_set_scrollable_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrollable_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
24019120:	b537      	push	{r0, r1, r2, r4, r5, lr}
24019122:	4614      	mov	r4, r2
24019124:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrollable(page), hor, ver);
24019126:	f7fe f9b5 	bl	24017494 <lv_page_get_scrollable>
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
2401912a:	4623      	mov	r3, r4
2401912c:	462a      	mov	r2, r5
2401912e:	4629      	mov	r1, r5
24019130:	9400      	str	r4, [sp, #0]
24019132:	f7fb fdd8 	bl	24014ce6 <lv_cont_set_fit4>
}
24019136:	b003      	add	sp, #12
24019138:	bd30      	pop	{r4, r5, pc}

2401913a <lv_area_copy>:
    while(len) {
2401913a:	3901      	subs	r1, #1
2401913c:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
24019140:	f811 2f01 	ldrb.w	r2, [r1, #1]!
24019144:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
24019148:	4298      	cmp	r0, r3
2401914a:	d1f9      	bne.n	24019140 <lv_area_copy+0x6>
}
2401914c:	4770      	bx	lr
	...

24019150 <lv_textarea_scrollable_design>:
 * @return return true/false, depends on 'mode'
 */
static lv_design_res_t lv_textarea_scrollable_design(lv_obj_t * scrl, const lv_area_t * clip_area,
                                                     lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
24019150:	2a02      	cmp	r2, #2
{
24019152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24019156:	4680      	mov	r8, r0
24019158:	b0a6      	sub	sp, #152	; 0x98
2401915a:	460f      	mov	r7, r1
    if(mode == LV_DESIGN_COVER_CHK) {
2401915c:	d105      	bne.n	2401916a <lv_textarea_scrollable_design+0x1a>
        /*Return false if the object is not covers the mask_p area*/
        return scrl_design(scrl, clip_area, mode);
2401915e:	4b5e      	ldr	r3, [pc, #376]	; (240192d8 <lv_textarea_scrollable_design+0x188>)
24019160:	681b      	ldr	r3, [r3, #0]
            lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
        }
    }

    return LV_DESIGN_RES_OK;
}
24019162:	b026      	add	sp, #152	; 0x98
24019164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return scrl_design(scrl, clip_area, mode);
24019168:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
2401916a:	b932      	cbnz	r2, 2401917a <lv_textarea_scrollable_design+0x2a>
        scrl_design(scrl, clip_area, mode);
2401916c:	4b5a      	ldr	r3, [pc, #360]	; (240192d8 <lv_textarea_scrollable_design+0x188>)
2401916e:	681b      	ldr	r3, [r3, #0]
24019170:	4798      	blx	r3
}
24019172:	2000      	movs	r0, #0
24019174:	b026      	add	sp, #152	; 0x98
24019176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(mode == LV_DESIGN_DRAW_POST) {
2401917a:	2a01      	cmp	r2, #1
2401917c:	d1f9      	bne.n	24019172 <lv_textarea_scrollable_design+0x22>
        scrl_design(scrl, clip_area, mode);
2401917e:	4b56      	ldr	r3, [pc, #344]	; (240192d8 <lv_textarea_scrollable_design+0x188>)
24019180:	681b      	ldr	r3, [r3, #0]
24019182:	4798      	blx	r3
        lv_obj_t * ta     = lv_obj_get_parent(scrl);
24019184:	4640      	mov	r0, r8
24019186:	f7ef f871 	bl	2400826c <lv_obj_get_parent>
2401918a:	4605      	mov	r5, r0
        lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
2401918c:	f7ef ffe5 	bl	2400915a <lv_obj_get_ext_attr>
24019190:	4604      	mov	r4, r0
        const char * txt = lv_label_get_text(ext->label);
24019192:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
24019194:	f7fc ff90 	bl	240160b8 <lv_label_get_text>
        if(txt[0] == '\0' && ext->placeholder_txt && ext->placeholder_txt[0] != 0) {
24019198:	7803      	ldrb	r3, [r0, #0]
        const char * txt = lv_label_get_text(ext->label);
2401919a:	4606      	mov	r6, r0
        if(txt[0] == '\0' && ext->placeholder_txt && ext->placeholder_txt[0] != 0) {
2401919c:	bb33      	cbnz	r3, 240191ec <lv_textarea_scrollable_design+0x9c>
2401919e:	6b23      	ldr	r3, [r4, #48]	; 0x30
240191a0:	b323      	cbz	r3, 240191ec <lv_textarea_scrollable_design+0x9c>
240191a2:	781b      	ldrb	r3, [r3, #0]
240191a4:	b313      	cbz	r3, 240191ec <lv_textarea_scrollable_design+0x9c>
            lv_draw_label_dsc_init(&ph_dsc);
240191a6:	a811      	add	r0, sp, #68	; 0x44
240191a8:	f7f2 fe4c 	bl	2400be44 <lv_draw_label_dsc_init>
            lv_obj_init_draw_label_dsc(ta, LV_TEXTAREA_PART_PLACEHOLDER, &ph_dsc);
240191ac:	aa11      	add	r2, sp, #68	; 0x44
240191ae:	2104      	movs	r1, #4
240191b0:	4628      	mov	r0, r5
240191b2:	f7f0 f99d 	bl	240094f0 <lv_obj_init_draw_label_dsc>
            switch(lv_label_get_align(ext->label)) {
240191b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
240191b8:	f7fc ff8a 	bl	240160d0 <lv_label_get_align>
240191bc:	2801      	cmp	r0, #1
240191be:	d07f      	beq.n	240192c0 <lv_textarea_scrollable_design+0x170>
240191c0:	2802      	cmp	r0, #2
240191c2:	f000 8084 	beq.w	240192ce <lv_textarea_scrollable_design+0x17e>
            if(ext->one_line) ph_dsc.flag |= LV_TXT_FLAG_EXPAND;
240191c6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
            lv_draw_label(&scrl->coords, clip_area, &ph_dsc, ext->placeholder_txt, NULL);
240191ca:	aa11      	add	r2, sp, #68	; 0x44
240191cc:	4639      	mov	r1, r7
240191ce:	f108 0010 	add.w	r0, r8, #16
            if(ext->one_line) ph_dsc.flag |= LV_TXT_FLAG_EXPAND;
240191d2:	079b      	lsls	r3, r3, #30
240191d4:	bf42      	ittt	mi
240191d6:	f89d 3065 	ldrbmi.w	r3, [sp, #101]	; 0x65
240191da:	f043 0302 	orrmi.w	r3, r3, #2
240191de:	f88d 3065 	strbmi.w	r3, [sp, #101]	; 0x65
            lv_draw_label(&scrl->coords, clip_area, &ph_dsc, ext->placeholder_txt, NULL);
240191e2:	2300      	movs	r3, #0
240191e4:	9300      	str	r3, [sp, #0]
240191e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
240191e8:	f7f2 fe42 	bl	2400be70 <lv_draw_label>
        if(ext->cursor.hidden || ext->cursor.state == 0) {
240191ec:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
240191f0:	f003 0303 	and.w	r3, r3, #3
240191f4:	2b01      	cmp	r3, #1
240191f6:	d1bc      	bne.n	24019172 <lv_textarea_scrollable_design+0x22>
        lv_draw_rect_dsc_init(&cur_dsc);
240191f8:	a811      	add	r0, sp, #68	; 0x44
        char letter_buf[8] = {0};
240191fa:	f04f 0800 	mov.w	r8, #0
        lv_draw_rect_dsc_init(&cur_dsc);
240191fe:	f7f4 fc31 	bl	2400da64 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(ta, LV_TEXTAREA_PART_CURSOR, &cur_dsc);
24019202:	aa11      	add	r2, sp, #68	; 0x44
24019204:	2103      	movs	r1, #3
24019206:	4628      	mov	r0, r5
24019208:	f7ef ffe9 	bl	240091de <lv_obj_init_draw_rect_dsc>
        lv_area_copy(&cur_area, &ext->cursor.area);
2401920c:	f104 015e 	add.w	r1, r4, #94	; 0x5e
24019210:	a804      	add	r0, sp, #16
24019212:	f7ff ff92 	bl	2401913a <lv_area_copy>
        cur_area.x1 += ext->label->coords.x1;
24019216:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24019218:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        lv_draw_rect(&cur_area, clip_area, &cur_dsc);
2401921c:	a804      	add	r0, sp, #16
        cur_area.x1 += ext->label->coords.x1;
2401921e:	8a0a      	ldrh	r2, [r1, #16]
24019220:	4413      	add	r3, r2
24019222:	f8ad 3010 	strh.w	r3, [sp, #16]
        cur_area.y1 += ext->label->coords.y1;
24019226:	8a4b      	ldrh	r3, [r1, #18]
24019228:	f8bd 1012 	ldrh.w	r1, [sp, #18]
2401922c:	4419      	add	r1, r3
2401922e:	f8ad 1012 	strh.w	r1, [sp, #18]
        cur_area.x2 += ext->label->coords.x1;
24019232:	f8bd 1014 	ldrh.w	r1, [sp, #20]
24019236:	440a      	add	r2, r1
        lv_draw_rect(&cur_area, clip_area, &cur_dsc);
24019238:	4639      	mov	r1, r7
        cur_area.x2 += ext->label->coords.x1;
2401923a:	f8ad 2014 	strh.w	r2, [sp, #20]
        cur_area.y2 += ext->label->coords.y1;
2401923e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
24019242:	4413      	add	r3, r2
        lv_draw_rect(&cur_area, clip_area, &cur_dsc);
24019244:	aa11      	add	r2, sp, #68	; 0x44
        cur_area.y2 += ext->label->coords.y1;
24019246:	f8ad 3016 	strh.w	r3, [sp, #22]
        lv_draw_rect(&cur_area, clip_area, &cur_dsc);
2401924a:	f7f4 fc2f 	bl	2400daac <lv_draw_rect>
        _lv_memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
2401924e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24019250:	4b22      	ldr	r3, [pc, #136]	; (240192dc <lv_textarea_scrollable_design+0x18c>)
24019252:	4431      	add	r1, r6
24019254:	681b      	ldr	r3, [r3, #0]
24019256:	4608      	mov	r0, r1
24019258:	9103      	str	r1, [sp, #12]
        char letter_buf[8] = {0};
2401925a:	e9cd 8806 	strd	r8, r8, [sp, #24]
        _lv_memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
2401925e:	4798      	blx	r3
24019260:	9903      	ldr	r1, [sp, #12]
24019262:	4602      	mov	r2, r0
24019264:	a806      	add	r0, sp, #24
24019266:	f7f6 fc21 	bl	2400faac <_lv_memcpy>
        if(cur_dsc.bg_opa == LV_OPA_COVER) {
2401926a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
2401926e:	2bff      	cmp	r3, #255	; 0xff
24019270:	f47f af7f 	bne.w	24019172 <lv_textarea_scrollable_design+0x22>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019274:	2212      	movs	r2, #18
24019276:	2103      	movs	r1, #3
24019278:	4628      	mov	r0, r5
2401927a:	f7ef fa85 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
2401927e:	2210      	movs	r2, #16
24019280:	2103      	movs	r1, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019282:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019284:	4628      	mov	r0, r5
24019286:	f7ef fa7f 	bl	24008788 <_lv_obj_get_style_int>
            cur_area.x1 += left;
2401928a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
2401928e:	441c      	add	r4, r3
            cur_area.y1 += top;
24019290:	f8bd 3012 	ldrh.w	r3, [sp, #18]
24019294:	4418      	add	r0, r3
            cur_area.x1 += left;
24019296:	f8ad 4010 	strh.w	r4, [sp, #16]
            cur_area.y1 += top;
2401929a:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_label_dsc_init(&cur_label_dsc);
2401929e:	a808      	add	r0, sp, #32
240192a0:	f7f2 fdd0 	bl	2400be44 <lv_draw_label_dsc_init>
            lv_obj_init_draw_label_dsc(ta, LV_TEXTAREA_PART_CURSOR, &cur_label_dsc);
240192a4:	aa08      	add	r2, sp, #32
240192a6:	4628      	mov	r0, r5
240192a8:	2103      	movs	r1, #3
240192aa:	f7f0 f921 	bl	240094f0 <lv_obj_init_draw_label_dsc>
            lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
240192ae:	ab06      	add	r3, sp, #24
240192b0:	aa08      	add	r2, sp, #32
240192b2:	4639      	mov	r1, r7
240192b4:	a804      	add	r0, sp, #16
240192b6:	f8cd 8000 	str.w	r8, [sp]
240192ba:	f7f2 fdd9 	bl	2400be70 <lv_draw_label>
            return LV_DESIGN_RES_OK; /*The cursor is not visible now*/
240192be:	e758      	b.n	24019172 <lv_textarea_scrollable_design+0x22>
                    ph_dsc.flag |= LV_TXT_FLAG_CENTER;
240192c0:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
240192c4:	f043 0304 	orr.w	r3, r3, #4
                    ph_dsc.flag |= LV_TXT_FLAG_RIGHT;
240192c8:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
                    break;
240192cc:	e77b      	b.n	240191c6 <lv_textarea_scrollable_design+0x76>
                    ph_dsc.flag |= LV_TXT_FLAG_RIGHT;
240192ce:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
240192d2:	f043 0308 	orr.w	r3, r3, #8
240192d6:	e7f7      	b.n	240192c8 <lv_textarea_scrollable_design+0x178>
240192d8:	24035d3c 	.word	0x24035d3c
240192dc:	2401a6ec 	.word	0x2401a6ec

240192e0 <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
240192e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
240192e4:	4605      	mov	r5, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
240192e6:	f7ef ff38 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
240192ea:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
240192ee:	4607      	mov	r7, r0
    if(ext->pwd_mode != 0) {
240192f0:	07db      	lsls	r3, r3, #31
240192f2:	d535      	bpl.n	24019360 <pwd_char_hider+0x80>
        char * txt  = lv_label_get_text(ext->label);
240192f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
240192f6:	f7fc fedf 	bl	240160b8 <lv_label_get_text>
        int32_t enc_len = _lv_txt_get_encoded_length(txt);
240192fa:	4b1e      	ldr	r3, [pc, #120]	; (24019374 <pwd_char_hider+0x94>)
240192fc:	681b      	ldr	r3, [r3, #0]
240192fe:	4798      	blx	r3
        if(enc_len == 0) return;
24019300:	4604      	mov	r4, r0
24019302:	b368      	cbz	r0, 24019360 <pwd_char_hider+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019304:	f248 028e 	movw	r2, #32910	; 0x808e
24019308:	2100      	movs	r1, #0
2401930a:	4628      	mov	r0, r5
        else bullet = "*";

        size_t bullet_len = strlen(bullet);
        char * txt_tmp = _lv_mem_buf_get(enc_len * bullet_len + 1);
        int32_t i;
        for(i = 0; i < enc_len; i++) {
2401930c:	f04f 0900 	mov.w	r9, #0
24019310:	f7ef fcfe 	bl	24008d10 <_lv_obj_get_style_ptr>
        has_bullet = lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0);
24019314:	a901      	add	r1, sp, #4
24019316:	2300      	movs	r3, #0
24019318:	f242 0222 	movw	r2, #8226	; 0x2022
2401931c:	f7f5 fbc4 	bl	2400eaa8 <lv_font_get_glyph_dsc>
        else bullet = "*";
24019320:	4a15      	ldr	r2, [pc, #84]	; (24019378 <pwd_char_hider+0x98>)
24019322:	4b16      	ldr	r3, [pc, #88]	; (2401937c <pwd_char_hider+0x9c>)
24019324:	2800      	cmp	r0, #0
24019326:	bf14      	ite	ne
24019328:	4690      	movne	r8, r2
2401932a:	4698      	moveq	r8, r3
        size_t bullet_len = strlen(bullet);
2401932c:	4640      	mov	r0, r8
2401932e:	f001 f93f 	bl	2401a5b0 <__strlen_veneer>
24019332:	4606      	mov	r6, r0
        char * txt_tmp = _lv_mem_buf_get(enc_len * bullet_len + 1);
24019334:	4360      	muls	r0, r4
24019336:	3001      	adds	r0, #1
24019338:	f7f6 fcd4 	bl	2400fce4 <_lv_mem_buf_get>
2401933c:	4605      	mov	r5, r0
        for(i = 0; i < enc_len; i++) {
2401933e:	4682      	mov	sl, r0
24019340:	45a1      	cmp	r9, r4
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
24019342:	4650      	mov	r0, sl
        for(i = 0; i < enc_len; i++) {
24019344:	44b2      	add	sl, r6
24019346:	db0e      	blt.n	24019366 <pwd_char_hider+0x86>
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
24019348:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        }

        txt_tmp[i * bullet_len] = '\0';
2401934c:	2300      	movs	r3, #0

        lv_label_set_text(ext->label, txt_tmp);
2401934e:	4629      	mov	r1, r5
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
24019350:	4374      	muls	r4, r6
        txt_tmp[i * bullet_len] = '\0';
24019352:	552b      	strb	r3, [r5, r4]
        lv_label_set_text(ext->label, txt_tmp);
24019354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
24019356:	f7fd fb5f 	bl	24016a18 <lv_label_set_text>
        _lv_mem_buf_release(txt_tmp);
2401935a:	4628      	mov	r0, r5
2401935c:	f7f6 fb5a 	bl	2400fa14 <_lv_mem_buf_release>
    }
}
24019360:	b004      	add	sp, #16
24019362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
24019366:	4632      	mov	r2, r6
24019368:	4641      	mov	r1, r8
        for(i = 0; i < enc_len; i++) {
2401936a:	f109 0901 	add.w	r9, r9, #1
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
2401936e:	f7f6 fb9d 	bl	2400faac <_lv_memcpy>
        for(i = 0; i < enc_len; i++) {
24019372:	e7e5      	b.n	24019340 <pwd_char_hider+0x60>
24019374:	2401a6f0 	.word	0x2401a6f0
24019378:	900ff30f 	.word	0x900ff30f
2401937c:	900ff313 	.word	0x900ff313

24019380 <lv_textarea_set_placeholder_text>:
{
24019380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24019382:	460e      	mov	r6, r1
24019384:	4607      	mov	r7, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019386:	f7ef fee8 	bl	2400915a <lv_obj_get_ext_attr>
2401938a:	4605      	mov	r5, r0
    size_t txt_len = strlen(txt);
2401938c:	4630      	mov	r0, r6
2401938e:	f001 f90f 	bl	2401a5b0 <__strlen_veneer>
    if(txt_len == 0) {
24019392:	4604      	mov	r4, r0
24019394:	6b28      	ldr	r0, [r5, #48]	; 0x30
24019396:	b944      	cbnz	r4, 240193aa <lv_textarea_set_placeholder_text+0x2a>
        if(ext->placeholder_txt) {
24019398:	b110      	cbz	r0, 240193a0 <lv_textarea_set_placeholder_text+0x20>
            lv_mem_free(ext->placeholder_txt);
2401939a:	f7f6 fb1f 	bl	2400f9dc <lv_mem_free>
            ext->placeholder_txt = NULL;
2401939e:	632c      	str	r4, [r5, #48]	; 0x30
    lv_obj_invalidate(ta);
240193a0:	4638      	mov	r0, r7
}
240193a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(ta);
240193a6:	f7ee be1d 	b.w	24007fe4 <lv_obj_invalidate>
            ext->placeholder_txt = lv_mem_alloc(txt_len + 1);
240193aa:	1c61      	adds	r1, r4, #1
        if(ext->placeholder_txt == NULL) {
240193ac:	b940      	cbnz	r0, 240193c0 <lv_textarea_set_placeholder_text+0x40>
            ext->placeholder_txt = lv_mem_alloc(txt_len + 1);
240193ae:	4608      	mov	r0, r1
240193b0:	f7f6 fae4 	bl	2400f97c <lv_mem_alloc>
240193b4:	6328      	str	r0, [r5, #48]	; 0x30
        if(ext->placeholder_txt == NULL) {
240193b6:	b130      	cbz	r0, 240193c6 <lv_textarea_set_placeholder_text+0x46>
        strcpy(ext->placeholder_txt, txt);
240193b8:	4631      	mov	r1, r6
240193ba:	f001 f8d7 	bl	2401a56c <strcpy>
240193be:	e7ef      	b.n	240193a0 <lv_textarea_set_placeholder_text+0x20>
            ext->placeholder_txt = lv_mem_realloc(ext->placeholder_txt, txt_len + 1);
240193c0:	f7f6 fc64 	bl	2400fc8c <lv_mem_realloc>
240193c4:	e7f6      	b.n	240193b4 <lv_textarea_set_placeholder_text+0x34>
}
240193c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240193c8 <lv_textarea_set_cursor_click_pos>:
{
240193c8:	b510      	push	{r4, lr}
240193ca:	460c      	mov	r4, r1
    lv_textarea_ext_t * ext     = lv_obj_get_ext_attr(ta);
240193cc:	f7ef fec5 	bl	2400915a <lv_obj_get_ext_attr>
    ext->cursor.click_pos = en ? 1 : 0;
240193d0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
240193d4:	f364 0382 	bfi	r3, r4, #2, #1
240193d8:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
}
240193dc:	bd10      	pop	{r4, pc}

240193de <lv_textarea_get_text>:
{
240193de:	b508      	push	{r3, lr}
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
240193e0:	f7ef febb 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
240193e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
240193e8:	07db      	lsls	r3, r3, #31
240193ea:	d404      	bmi.n	240193f6 <lv_textarea_get_text+0x18>
        txt = lv_label_get_text(ext->label);
240193ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
240193ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        txt = lv_label_get_text(ext->label);
240193f2:	f7fc be61 	b.w	240160b8 <lv_label_get_text>
}
240193f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
240193f8:	bd08      	pop	{r3, pc}

240193fa <lv_textarea_get_label>:
{
240193fa:	b508      	push	{r3, lr}
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
240193fc:	f7ef fead 	bl	2400915a <lv_obj_get_ext_attr>
}
24019400:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
24019402:	bd08      	pop	{r3, pc}

24019404 <lv_textarea_get_cursor_pos>:
{
24019404:	b508      	push	{r3, lr}
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019406:	f7ef fea8 	bl	2400915a <lv_obj_get_ext_attr>
}
2401940a:	6d80      	ldr	r0, [r0, #88]	; 0x58
2401940c:	bd08      	pop	{r3, pc}
	...

24019410 <refr_cursor_area>:
    }
}


static void refr_cursor_area(lv_obj_t * ta)
{
24019410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24019414:	4604      	mov	r4, r0
24019416:	b08b      	sub	sp, #44	; 0x2c
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019418:	f7ef fe9f 	bl	2400915a <lv_obj_get_ext_attr>
2401941c:	f248 028e 	movw	r2, #32910	; 0x808e
24019420:	4605      	mov	r5, r0
24019422:	2100      	movs	r1, #0
24019424:	4620      	mov	r0, r4
24019426:	f7ef fc73 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
2401942a:	f248 0281 	movw	r2, #32897	; 0x8081
2401942e:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019430:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24019432:	4620      	mov	r0, r4
24019434:	f7ef f9a8 	bl	24008788 <_lv_obj_get_style_int>
24019438:	9003      	str	r0, [sp, #12]

    const lv_font_t * font = lv_obj_get_style_text_font(ta, LV_TEXTAREA_PART_BG);
    lv_style_int_t line_space = lv_obj_get_style_text_line_space(ta, LV_TEXTAREA_PART_BG);

    uint32_t cur_pos = lv_textarea_get_cursor_pos(ta);
2401943a:	4620      	mov	r0, r4
2401943c:	f7ff ffe2 	bl	24019404 <lv_textarea_get_cursor_pos>
24019440:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ext->label);
24019442:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019444:	f7fc fe38 	bl	240160b8 <lv_label_get_text>

    uint32_t byte_pos;
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
24019448:	4b6e      	ldr	r3, [pc, #440]	; (24019604 <refr_cursor_area+0x1f4>)
2401944a:	4631      	mov	r1, r6
    const char * txt = lv_label_get_text(ext->label);
2401944c:	9002      	str	r0, [sp, #8]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
2401944e:	681b      	ldr	r3, [r3, #0]
24019450:	4798      	blx	r3

    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
24019452:	9b02      	ldr	r3, [sp, #8]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
24019454:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
24019456:	2100      	movs	r1, #0
24019458:	eb03 0b00 	add.w	fp, r3, r0
2401945c:	4b6a      	ldr	r3, [pc, #424]	; (24019608 <refr_cursor_area+0x1f8>)
2401945e:	4658      	mov	r0, fp
24019460:	681b      	ldr	r3, [r3, #0]
24019462:	4798      	blx	r3
24019464:	f9b8 3008 	ldrsh.w	r3, [r8, #8]

    lv_coord_t letter_h = lv_font_get_line_height(font);

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
24019468:	280d      	cmp	r0, #13
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
2401946a:	4681      	mov	r9, r0
2401946c:	9301      	str	r3, [sp, #4]
    if(letter == '\0' || letter == '\n' || letter == '\r') {
2401946e:	f200 80c4 	bhi.w	240195fa <refr_cursor_area+0x1ea>
24019472:	4a66      	ldr	r2, [pc, #408]	; (2401960c <refr_cursor_area+0x1fc>)
24019474:	4102      	asrs	r2, r0
24019476:	f012 0201 	ands.w	r2, r2, #1
2401947a:	f040 80be 	bne.w	240195fa <refr_cursor_area+0x1ea>
        letter_w = lv_font_get_glyph_width(font, ' ', '\0');
2401947e:	2120      	movs	r1, #32
    }
    else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
24019480:	4640      	mov	r0, r8
24019482:	f7f5 fb17 	bl	2400eab4 <lv_font_get_glyph_width>
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
24019486:	aa05      	add	r2, sp, #20
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
24019488:	fa0f fa80 	sxth.w	sl, r0
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
2401948c:	4631      	mov	r1, r6
2401948e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019490:	f7fc ff34 	bl	240162fc <lv_label_get_letter_pos>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
24019494:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019496:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
2401949a:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
       lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
2401949e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
240194a2:	440a      	add	r2, r1
240194a4:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
        letter_pos.y += letter_h + line_space;
240194a8:	9301      	str	r3, [sp, #4]
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
240194aa:	4452      	add	r2, sl
240194ac:	428a      	cmp	r2, r1
240194ae:	dd30      	ble.n	24019512 <refr_cursor_area+0x102>
240194b0:	f895 1070 	ldrb.w	r1, [r5, #112]	; 0x70
240194b4:	f011 0602 	ands.w	r6, r1, #2
240194b8:	d12b      	bne.n	24019512 <refr_cursor_area+0x102>
       lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
240194ba:	f7fc fe09 	bl	240160d0 <lv_label_get_align>
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
240194be:	2802      	cmp	r0, #2
240194c0:	d027      	beq.n	24019512 <refr_cursor_area+0x102>
        letter_pos.y += letter_h + line_space;
240194c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
240194c6:	9a03      	ldr	r2, [sp, #12]
        letter_pos.x = 0;
240194c8:	f8ad 6014 	strh.w	r6, [sp, #20]
        letter_pos.y += letter_h + line_space;
240194cc:	441a      	add	r2, r3
240194ce:	4613      	mov	r3, r2
240194d0:	9a01      	ldr	r2, [sp, #4]
240194d2:	4413      	add	r3, r2
240194d4:	f8ad 3016 	strh.w	r3, [sp, #22]

        if(letter != '\0') {
240194d8:	f1b9 0f00 	cmp.w	r9, #0
240194dc:	d012      	beq.n	24019504 <refr_cursor_area+0xf4>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
240194de:	4b4c      	ldr	r3, [pc, #304]	; (24019610 <refr_cursor_area+0x200>)
240194e0:	4658      	mov	r0, fp
240194e2:	681b      	ldr	r3, [r3, #0]
240194e4:	4798      	blx	r3
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
240194e6:	4b48      	ldr	r3, [pc, #288]	; (24019608 <refr_cursor_area+0x1f8>)
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
240194e8:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
240194ea:	9802      	ldr	r0, [sp, #8]
240194ec:	4631      	mov	r1, r6
240194ee:	681b      	ldr	r3, [r3, #0]
240194f0:	4438      	add	r0, r7
240194f2:	4798      	blx	r3
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
240194f4:	280d      	cmp	r0, #13
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
240194f6:	4601      	mov	r1, r0
        if(letter == '\0' || letter == '\n' || letter == '\r') {
240194f8:	f200 8082 	bhi.w	24019600 <refr_cursor_area+0x1f0>
240194fc:	4b43      	ldr	r3, [pc, #268]	; (2401960c <refr_cursor_area+0x1fc>)
240194fe:	4103      	asrs	r3, r0
24019500:	07db      	lsls	r3, r3, #31
24019502:	d47d      	bmi.n	24019600 <refr_cursor_area+0x1f0>
            letter_w = lv_font_get_glyph_width(font, ' ', '\0');
24019504:	2200      	movs	r2, #0
24019506:	2120      	movs	r1, #32
        }
        else {
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
24019508:	4640      	mov	r0, r8
2401950a:	f7f5 fad3 	bl	2400eab4 <lv_font_get_glyph_width>
2401950e:	fa0f fa80 	sxth.w	sl, r0
        }
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ext->cursor.txt_byte_pos = byte_pos;
24019512:	66af      	str	r7, [r5, #104]	; 0x68
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019514:	2210      	movs	r2, #16
24019516:	2103      	movs	r1, #3
24019518:	4620      	mov	r0, r4
2401951a:	f7ef f935 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401951e:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019520:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019522:	2103      	movs	r1, #3
24019524:	4620      	mov	r0, r4
24019526:	f7ef f92f 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401952a:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
2401952c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401952e:	2103      	movs	r1, #3
24019530:	4620      	mov	r0, r4
24019532:	f7ef f929 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
24019536:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019538:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2401953a:	2103      	movs	r1, #3
2401953c:	4620      	mov	r0, r4
2401953e:	f7ef f923 	bl	24008788 <_lv_obj_get_style_int>
    lv_style_int_t left = lv_obj_get_style_pad_left(ta, LV_TEXTAREA_PART_CURSOR);
    lv_style_int_t right = lv_obj_get_style_pad_right(ta, LV_TEXTAREA_PART_CURSOR);

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
    cur_area.y1 = letter_pos.y - top;
24019542:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    cur_area.x2 = letter_pos.x + right + letter_w;
    cur_area.y2 = letter_pos.y + bottom + letter_h;
24019546:	9e01      	ldr	r6, [sp, #4]
    cur_area.x2 = letter_pos.x + right + letter_w;
24019548:	4450      	add	r0, sl
    cur_area.x1 = letter_pos.x - left;
2401954a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
2401954e:	1bcf      	subs	r7, r1, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h;
24019550:	440e      	add	r6, r1
    cur_area.x1 = letter_pos.x - left;
24019552:	eba2 0808 	sub.w	r8, r2, r8
    cur_area.x2 = letter_pos.x + right + letter_w;
24019556:	4402      	add	r2, r0
    cur_area.y2 = letter_pos.y + bottom + letter_h;
24019558:	eb06 0009 	add.w	r0, r6, r9

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ext->cursor.area);
2401955c:	f105 065e 	add.w	r6, r5, #94	; 0x5e
    cur_area.x2 = letter_pos.x + right + letter_w;
24019560:	f8ad 201c 	strh.w	r2, [sp, #28]
    lv_area_copy(&area_tmp, &ext->cursor.area);
24019564:	4631      	mov	r1, r6
    cur_area.y2 = letter_pos.y + bottom + letter_h;
24019566:	f8ad 001e 	strh.w	r0, [sp, #30]
    lv_area_copy(&area_tmp, &ext->cursor.area);
2401956a:	a808      	add	r0, sp, #32
    cur_area.x1 = letter_pos.x - left;
2401956c:	f8ad 8018 	strh.w	r8, [sp, #24]
    cur_area.y1 = letter_pos.y - top;
24019570:	f8ad 701a 	strh.w	r7, [sp, #26]
    lv_area_copy(&area_tmp, &ext->cursor.area);
24019574:	f7ff fde1 	bl	2401913a <lv_area_copy>
    area_tmp.x1 += ext->label->coords.x1;
24019578:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_obj_invalidate_area(ta, &area_tmp);
2401957a:	4620      	mov	r0, r4
    area_tmp.x1 += ext->label->coords.x1;
2401957c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
24019580:	8a0a      	ldrh	r2, [r1, #16]
24019582:	4413      	add	r3, r2
24019584:	f8ad 3020 	strh.w	r3, [sp, #32]
    area_tmp.y1 += ext->label->coords.y1;
24019588:	8a4b      	ldrh	r3, [r1, #18]
2401958a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
2401958e:	4419      	add	r1, r3
24019590:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    area_tmp.x2 += ext->label->coords.x1;
24019594:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
24019598:	440a      	add	r2, r1
    lv_obj_invalidate_area(ta, &area_tmp);
2401959a:	a908      	add	r1, sp, #32
    area_tmp.x2 += ext->label->coords.x1;
2401959c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    area_tmp.y2 += ext->label->coords.y1;
240195a0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
240195a4:	4413      	add	r3, r2
240195a6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_obj_invalidate_area(ta, &area_tmp);
240195aa:	f7ee fd09 	bl	24007fc0 <lv_obj_invalidate_area>

    lv_area_copy(&ext->cursor.area, &cur_area);
240195ae:	a906      	add	r1, sp, #24
240195b0:	4630      	mov	r0, r6
240195b2:	f7ff fdc2 	bl	2401913a <lv_area_copy>

    lv_area_copy(&area_tmp, &ext->cursor.area);
240195b6:	4631      	mov	r1, r6
240195b8:	a808      	add	r0, sp, #32
240195ba:	f7ff fdbe 	bl	2401913a <lv_area_copy>
    area_tmp.x1 += ext->label->coords.x1;
240195be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
240195c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_obj_invalidate_area(ta, &area_tmp);
240195c4:	4620      	mov	r0, r4
    area_tmp.x1 += ext->label->coords.x1;
240195c6:	8a0a      	ldrh	r2, [r1, #16]
240195c8:	4413      	add	r3, r2
240195ca:	f8ad 3020 	strh.w	r3, [sp, #32]
    area_tmp.y1 += ext->label->coords.y1;
240195ce:	8a4b      	ldrh	r3, [r1, #18]
240195d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
240195d4:	4419      	add	r1, r3
240195d6:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    area_tmp.x2 += ext->label->coords.x1;
240195da:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
240195de:	440a      	add	r2, r1
    lv_obj_invalidate_area(ta, &area_tmp);
240195e0:	a908      	add	r1, sp, #32
    area_tmp.x2 += ext->label->coords.x1;
240195e2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    area_tmp.y2 += ext->label->coords.y1;
240195e6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
240195ea:	4413      	add	r3, r2
240195ec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_obj_invalidate_area(ta, &area_tmp);
240195f0:	f7ee fce6 	bl	24007fc0 <lv_obj_invalidate_area>
}
240195f4:	b00b      	add	sp, #44	; 0x2c
240195f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
240195fa:	2200      	movs	r2, #0
240195fc:	4649      	mov	r1, r9
240195fe:	e73f      	b.n	24019480 <refr_cursor_area+0x70>
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
24019600:	2200      	movs	r2, #0
24019602:	e781      	b.n	24019508 <refr_cursor_area+0xf8>
24019604:	2401a6dc 	.word	0x2401a6dc
24019608:	2401a6e4 	.word	0x2401a6e4
2401960c:	ffffdbfe 	.word	0xffffdbfe
24019610:	2401a6ec 	.word	0x2401a6ec

24019614 <lv_textarea_set_cursor_pos>:
{
24019614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24019618:	b086      	sub	sp, #24
2401961a:	460e      	mov	r6, r1
2401961c:	4605      	mov	r5, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
2401961e:	f7ef fd9c 	bl	2400915a <lv_obj_get_ext_attr>
    if((uint32_t)ext->cursor.pos == (uint32_t)pos) return;
24019622:	6d83      	ldr	r3, [r0, #88]	; 0x58
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019624:	4607      	mov	r7, r0
    if((uint32_t)ext->cursor.pos == (uint32_t)pos) return;
24019626:	42b3      	cmp	r3, r6
24019628:	f000 8094 	beq.w	24019754 <lv_textarea_set_cursor_pos+0x140>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ext->label));
2401962c:	4b4b      	ldr	r3, [pc, #300]	; (2401975c <lv_textarea_set_cursor_pos+0x148>)
2401962e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
24019630:	681c      	ldr	r4, [r3, #0]
24019632:	f7fc fd41 	bl	240160b8 <lv_label_get_text>
24019636:	47a0      	blx	r4
    if(pos < 0) pos = len + pos;
24019638:	2e00      	cmp	r6, #0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
2401963a:	4604      	mov	r4, r0
    if(pos < 0) pos = len + pos;
2401963c:	bfb8      	it	lt
2401963e:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
24019640:	42b0      	cmp	r0, r6
24019642:	db04      	blt.n	2401964e <lv_textarea_set_cursor_pos+0x3a>
24019644:	f647 73ff 	movw	r3, #32767	; 0x7fff
24019648:	429e      	cmp	r6, r3
2401964a:	bf18      	it	ne
2401964c:	4634      	movne	r4, r6
    ext->cursor.pos = pos;
2401964e:	65bc      	str	r4, [r7, #88]	; 0x58
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
24019650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
24019652:	f7ee fe0b 	bl	2400826c <lv_obj_get_parent>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019656:	f248 028e 	movw	r2, #32910	; 0x808e
2401965a:	4680      	mov	r8, r0
2401965c:	2100      	movs	r1, #0
2401965e:	4628      	mov	r0, r5
24019660:	f7ef fb56 	bl	24008d10 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019664:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019666:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019668:	2100      	movs	r1, #0
2401966a:	4628      	mov	r0, r5
2401966c:	f7ef f88c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019670:	2211      	movs	r2, #17
24019672:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019674:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019676:	4628      	mov	r0, r5
24019678:	f7ef f886 	bl	24008788 <_lv_obj_get_style_int>
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
2401967c:	aa01      	add	r2, sp, #4
2401967e:	4621      	mov	r1, r4
24019680:	4681      	mov	r9, r0
24019682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
24019684:	f7fc fe3a 	bl	240162fc <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
24019688:	a904      	add	r1, sp, #16
2401968a:	4628      	mov	r0, r5
2401968c:	f7ee fe17 	bl	240082be <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
24019690:	a902      	add	r1, sp, #8
24019692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
24019694:	f7ee fe13 	bl	240082be <lv_obj_get_coords>
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
24019698:	4640      	mov	r0, r8
2401969a:	f9ba 4008 	ldrsh.w	r4, [sl, #8]
2401969e:	f7ee fe27 	bl	240082f0 <lv_obj_get_y>
240196a2:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
240196a6:	42c8      	cmn	r0, r1
240196a8:	d504      	bpl.n	240196b4 <lv_textarea_set_cursor_pos+0xa0>
        lv_obj_set_y(label_par, -cur_pos.y + top);
240196aa:	1a71      	subs	r1, r6, r1
240196ac:	4640      	mov	r0, r8
240196ae:	b209      	sxth	r1, r1
240196b0:	f7ee fe13 	bl	240082da <lv_obj_set_y>
    if(label_cords.y1 + cur_pos.y + font_h + bottom > ta_cords.y2) {
240196b4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
240196b8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
240196bc:	4413      	add	r3, r2
240196be:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
240196c2:	4423      	add	r3, r4
240196c4:	444b      	add	r3, r9
240196c6:	4293      	cmp	r3, r2
240196c8:	dd0c      	ble.n	240196e4 <lv_textarea_set_cursor_pos+0xd0>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) + font_h + top + bottom));
240196ca:	4628      	mov	r0, r5
240196cc:	444e      	add	r6, r9
240196ce:	f7ee ffa4 	bl	2400861a <lv_obj_get_height>
240196d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240196d6:	441e      	add	r6, r3
240196d8:	4426      	add	r6, r4
240196da:	1b80      	subs	r0, r0, r6
240196dc:	b201      	sxth	r1, r0
240196de:	4640      	mov	r0, r8
240196e0:	f7ee fdfb 	bl	240082da <lv_obj_set_y>
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
240196e4:	4640      	mov	r0, r8
240196e6:	f7ee fdf0 	bl	240082ca <lv_obj_get_x>
240196ea:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
240196ee:	4408      	add	r0, r1
240196f0:	4284      	cmp	r4, r0
240196f2:	dd04      	ble.n	240196fe <lv_textarea_set_cursor_pos+0xea>
        lv_obj_set_x(label_par, -cur_pos.x + font_h);
240196f4:	1a61      	subs	r1, r4, r1
240196f6:	4640      	mov	r0, r8
240196f8:	b209      	sxth	r1, r1
240196fa:	f7ee fe01 	bl	24008300 <lv_obj_set_x>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
240196fe:	2213      	movs	r2, #19
24019700:	2100      	movs	r1, #0
24019702:	4628      	mov	r0, r5
24019704:	f7ef f840 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019708:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
2401970a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
2401970c:	2100      	movs	r1, #0
2401970e:	4628      	mov	r0, r5
24019710:	f7ef f83a 	bl	24008788 <_lv_obj_get_style_int>
    if(label_cords.x1 + cur_pos.x + font_h + right > ta_cords.x2) {
24019714:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
24019718:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
2401971c:	4681      	mov	r9, r0
2401971e:	4413      	add	r3, r2
24019720:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
24019724:	4423      	add	r3, r4
24019726:	4433      	add	r3, r6
24019728:	4293      	cmp	r3, r2
2401972a:	dd0c      	ble.n	24019746 <lv_textarea_set_cursor_pos+0x132>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) + font_h + left + right));
2401972c:	4628      	mov	r0, r5
2401972e:	f7ee ff6e 	bl	2400860e <lv_obj_get_width>
24019732:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24019736:	441c      	add	r4, r3
24019738:	444c      	add	r4, r9
2401973a:	4434      	add	r4, r6
2401973c:	1b00      	subs	r0, r0, r4
2401973e:	b201      	sxth	r1, r0
24019740:	4640      	mov	r0, r8
24019742:	f7ee fddd 	bl	24008300 <lv_obj_set_x>
    ext->cursor.valid_x = cur_pos.x;
24019746:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    refr_cursor_area(ta);
2401974a:	4628      	mov	r0, r5
    ext->cursor.valid_x = cur_pos.x;
2401974c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    refr_cursor_area(ta);
24019750:	f7ff fe5e 	bl	24019410 <refr_cursor_area>
}
24019754:	b006      	add	sp, #24
24019756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2401975a:	bf00      	nop
2401975c:	2401a6f0 	.word	0x2401a6f0

24019760 <update_cursor_position_on_click>:

static void update_cursor_position_on_click(lv_obj_t * ta, lv_signal_t sign, lv_indev_t * click_source)
{
24019760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24019764:	4607      	mov	r7, r0
24019766:	b086      	sub	sp, #24
24019768:	4688      	mov	r8, r1

    if(click_source == NULL) return;
2401976a:	4615      	mov	r5, r2
2401976c:	2a00      	cmp	r2, #0
2401976e:	d045      	beq.n	240197fc <update_cursor_position_on_click+0x9c>

    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019770:	f7ef fcf3 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->cursor.click_pos == 0) return;
24019774:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019778:	4606      	mov	r6, r0
    if(ext->cursor.click_pos == 0) return;
2401977a:	074b      	lsls	r3, r1, #29
2401977c:	d53e      	bpl.n	240197fc <update_cursor_position_on_click+0x9c>
    if(ext->cursor.hidden) return;
2401977e:	f011 0402 	ands.w	r4, r1, #2
24019782:	d13b      	bne.n	240197fc <update_cursor_position_on_click+0x9c>

    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
24019784:	4628      	mov	r0, r5
24019786:	f7ed fd23 	bl	240071d0 <lv_indev_get_type>
2401978a:	2802      	cmp	r0, #2
2401978c:	d036      	beq.n	240197fc <update_cursor_position_on_click+0x9c>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
2401978e:	4628      	mov	r0, r5
24019790:	f7ed fd1e 	bl	240071d0 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
24019794:	2804      	cmp	r0, #4
24019796:	d031      	beq.n	240197fc <update_cursor_position_on_click+0x9c>
        return;
    }

    lv_area_t label_coords;
    lv_obj_get_coords(ext->label, &label_coords);
24019798:	a904      	add	r1, sp, #16
2401979a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
2401979c:	f7ee fd8f 	bl	240082be <lv_obj_get_coords>

    lv_point_t point_act, vect_act;
    lv_indev_get_point(click_source, &point_act);
240197a0:	a901      	add	r1, sp, #4
240197a2:	4628      	mov	r0, r5
240197a4:	f7ed fd45 	bl	24007232 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
240197a8:	a902      	add	r1, sp, #8
240197aa:	4628      	mov	r0, r5
240197ac:	f7ed fd63 	bl	24007276 <lv_indev_get_vect>

    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
240197b0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
240197b4:	2a00      	cmp	r2, #0
240197b6:	db21      	blt.n	240197fc <update_cursor_position_on_click+0x9c>
240197b8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
240197bc:	2b00      	cmp	r3, #0
240197be:	db1d      	blt.n	240197fc <update_cursor_position_on_click+0x9c>
    lv_point_t rel_pos;
    rel_pos.x = point_act.x - label_coords.x1;
240197c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    rel_pos.y = point_act.y - label_coords.y1;

    lv_coord_t label_width = lv_obj_get_width(ext->label);
240197c4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    rel_pos.x = point_act.x - label_coords.x1;
240197c6:	1a52      	subs	r2, r2, r1
240197c8:	f8ad 200c 	strh.w	r2, [sp, #12]
    rel_pos.y = point_act.y - label_coords.y1;
240197cc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
240197d0:	1a9b      	subs	r3, r3, r2
240197d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_coord_t label_width = lv_obj_get_width(ext->label);
240197d6:	f7ee ff1a 	bl	2400860e <lv_obj_get_width>
            ext->text_sel_in_prog = 0;
        }
    }
#else
    /*Check if the click happened on the left side of the area outside the label*/
    if(rel_pos.x < 0) {
240197da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
240197de:	2b00      	cmp	r3, #0
240197e0:	db0f      	blt.n	24019802 <update_cursor_position_on_click+0xa2>
        char_id_at_click = 0;
    }
    /*Check if the click happened on the right side of the area outside the label*/
    else if(rel_pos.x >= label_width) {
240197e2:	4283      	cmp	r3, r0
240197e4:	da0f      	bge.n	24019806 <update_cursor_position_on_click+0xa6>
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
    }
    else {
        char_id_at_click = lv_label_get_letter_on(ext->label, &rel_pos);
240197e6:	a903      	add	r1, sp, #12
240197e8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
240197ea:	f7fc fe71 	bl	240164d0 <lv_label_get_letter_on>
240197ee:	b281      	uxth	r1, r0
    }

    if(sign == LV_SIGNAL_PRESSED) lv_textarea_set_cursor_pos(ta, char_id_at_click);
240197f0:	f1b8 0f0b 	cmp.w	r8, #11
240197f4:	d102      	bne.n	240197fc <update_cursor_position_on_click+0x9c>
240197f6:	4638      	mov	r0, r7
240197f8:	f7ff ff0c 	bl	24019614 <lv_textarea_set_cursor_pos>
#endif
}
240197fc:	b006      	add	sp, #24
240197fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char_id_at_click = 0;
24019802:	4621      	mov	r1, r4
24019804:	e7f4      	b.n	240197f0 <update_cursor_position_on_click+0x90>
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
24019806:	f647 71ff 	movw	r1, #32767	; 0x7fff
2401980a:	e7f1      	b.n	240197f0 <update_cursor_position_on_click+0x90>

2401980c <lv_textarea_scrollable_signal>:
{
2401980c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = scrl_signal(scrl, sign, param);
24019810:	4b36      	ldr	r3, [pc, #216]	; (240198ec <lv_textarea_scrollable_signal+0xe0>)
{
24019812:	4681      	mov	r9, r0
24019814:	460e      	mov	r6, r1
24019816:	4614      	mov	r4, r2
    res = scrl_signal(scrl, sign, param);
24019818:	681b      	ldr	r3, [r3, #0]
2401981a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
2401981c:	2801      	cmp	r0, #1
    res = scrl_signal(scrl, sign, param);
2401981e:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
24019820:	d127      	bne.n	24019872 <lv_textarea_scrollable_signal+0x66>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
24019822:	2e07      	cmp	r6, #7
24019824:	d105      	bne.n	24019832 <lv_textarea_scrollable_signal+0x26>
24019826:	4620      	mov	r0, r4
24019828:	4931      	ldr	r1, [pc, #196]	; (240198f0 <lv_textarea_scrollable_signal+0xe4>)
}
2401982a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
2401982e:	f7ef bcc8 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_obj_t * ta     = lv_obj_get_parent(scrl);
24019832:	4648      	mov	r0, r9
24019834:	f7ee fd1a 	bl	2400826c <lv_obj_get_parent>
24019838:	4605      	mov	r5, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
2401983a:	f7ef fc8e 	bl	2400915a <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
2401983e:	2e06      	cmp	r6, #6
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019840:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
24019842:	d119      	bne.n	24019878 <lv_textarea_scrollable_signal+0x6c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24019844:	f248 0281 	movw	r2, #32897	; 0x8081
24019848:	2100      	movs	r1, #0
2401984a:	4628      	mov	r0, r5
2401984c:	f7ee ff9c 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019850:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
24019854:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019856:	2100      	movs	r1, #0
24019858:	4628      	mov	r0, r5
2401985a:	f7ef fa59 	bl	24008d10 <_lv_obj_get_style_ptr>
        scrl->ext_draw_pad             = LV_MATH_MAX(scrl->ext_draw_pad, line_space + font_h);
2401985e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
24019862:	1918      	adds	r0, r3, r4
24019864:	f9b9 3032 	ldrsh.w	r3, [r9, #50]	; 0x32
24019868:	4298      	cmp	r0, r3
2401986a:	bfb8      	it	lt
2401986c:	4618      	movlt	r0, r3
2401986e:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
}
24019872:	4640      	mov	r0, r8
24019874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(sign == LV_SIGNAL_COORD_CHG) {
24019878:	2e02      	cmp	r6, #2
2401987a:	d12c      	bne.n	240198d6 <lv_textarea_scrollable_signal+0xca>
        if(ext->label) {
2401987c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2401987e:	2b00      	cmp	r3, #0
24019880:	d0f7      	beq.n	24019872 <lv_textarea_scrollable_signal+0x66>
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
24019882:	4648      	mov	r0, r9
24019884:	f7ee fec3 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
24019888:	88a3      	ldrh	r3, [r4, #4]
2401988a:	8822      	ldrh	r2, [r4, #0]
2401988c:	3301      	adds	r3, #1
2401988e:	1a9b      	subs	r3, r3, r2
24019890:	b21b      	sxth	r3, r3
24019892:	4298      	cmp	r0, r3
24019894:	d014      	beq.n	240198c0 <lv_textarea_scrollable_signal+0xb4>
                lv_obj_set_width(ext->label, lv_page_get_width_fit(ta));
24019896:	6afc      	ldr	r4, [r7, #44]	; 0x2c
24019898:	4628      	mov	r0, r5
2401989a:	f7fd ffdd 	bl	24017858 <lv_page_get_width_fit>
2401989e:	4601      	mov	r1, r0
240198a0:	4620      	mov	r0, r4
240198a2:	f7ee fca7 	bl	240081f4 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, 0, 0);
240198a6:	2200      	movs	r2, #0
240198a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
240198aa:	4611      	mov	r1, r2
240198ac:	f7ee fbdb 	bl	24008066 <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/
240198b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
240198b2:	2100      	movs	r1, #0
240198b4:	f7fd f8b0 	bl	24016a18 <lv_label_set_text>
                refr_cursor_area(ta);
240198b8:	4628      	mov	r0, r5
240198ba:	f7ff fda9 	bl	24019410 <refr_cursor_area>
240198be:	e7d8      	b.n	24019872 <lv_textarea_scrollable_signal+0x66>
               lv_obj_get_height(scrl) != lv_area_get_height(param)) {
240198c0:	4648      	mov	r0, r9
240198c2:	f7ee feaa 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
240198c6:	88e3      	ldrh	r3, [r4, #6]
240198c8:	8862      	ldrh	r2, [r4, #2]
240198ca:	3301      	adds	r3, #1
240198cc:	1a9b      	subs	r3, r3, r2
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
240198ce:	b21b      	sxth	r3, r3
240198d0:	4298      	cmp	r0, r3
240198d2:	d1e0      	bne.n	24019896 <lv_textarea_scrollable_signal+0x8a>
240198d4:	e7cd      	b.n	24019872 <lv_textarea_scrollable_signal+0x66>
    else if(sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESS_LOST ||
240198d6:	f1a6 030b 	sub.w	r3, r6, #11
240198da:	2b03      	cmp	r3, #3
240198dc:	d8c9      	bhi.n	24019872 <lv_textarea_scrollable_signal+0x66>
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
240198de:	4622      	mov	r2, r4
240198e0:	4631      	mov	r1, r6
240198e2:	4628      	mov	r0, r5
240198e4:	f7ff ff3c 	bl	24019760 <update_cursor_position_on_click>
240198e8:	e7c3      	b.n	24019872 <lv_textarea_scrollable_signal+0x66>
240198ea:	bf00      	nop
240198ec:	24035d40 	.word	0x24035d40
240198f0:	900ff2a3 	.word	0x900ff2a3

240198f4 <lv_textarea_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
240198f4:	2908      	cmp	r1, #8
{
240198f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
240198fa:	4604      	mov	r4, r0
240198fc:	460f      	mov	r7, r1
240198fe:	4616      	mov	r6, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
24019900:	d123      	bne.n	2401994a <lv_textarea_signal+0x56>
        info->result = lv_textarea_get_style(ta, info->part);
24019902:	7815      	ldrb	r5, [r2, #0]
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019904:	f7ef fc29 	bl	2400915a <lv_obj_get_ext_attr>
    switch(part) {
24019908:	2d04      	cmp	r5, #4
2401990a:	d804      	bhi.n	24019916 <lv_textarea_signal+0x22>
2401990c:	e8df f005 	tbb	[pc, r5]
24019910:	1903170e 	.word	0x1903170e
24019914:	1b          	.byte	0x1b
24019915:	00          	.byte	0x00
        info->result = lv_textarea_get_style(ta, info->part);
24019916:	2300      	movs	r3, #0
        else return ancestor_signal(ta, sign, param);
24019918:	4632      	mov	r2, r6
2401991a:	2108      	movs	r1, #8
2401991c:	4620      	mov	r0, r4
        info->result = lv_textarea_get_style(ta, info->part);
2401991e:	6073      	str	r3, [r6, #4]
        else return ancestor_signal(ta, sign, param);
24019920:	4b56      	ldr	r3, [pc, #344]	; (24019a7c <lv_textarea_signal+0x188>)
24019922:	681b      	ldr	r3, [r3, #0]
}
24019924:	b003      	add	sp, #12
24019926:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return ancestor_signal(ta, sign, param);
2401992a:	4718      	bx	r3
            style_dsc_p = &ta->style_list;
2401992c:	f104 0028 	add.w	r0, r4, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
24019930:	f04f 0801 	mov.w	r8, #1
        info->result = lv_textarea_get_style(ta, info->part);
24019934:	6070      	str	r0, [r6, #4]
}
24019936:	4640      	mov	r0, r8
24019938:	b003      	add	sp, #12
2401993a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            style_dsc_p = &ext->page.scrlbar.style;
2401993e:	3008      	adds	r0, #8
            break;
24019940:	e7f6      	b.n	24019930 <lv_textarea_signal+0x3c>
            style_dsc_p = &ext->cursor.style;
24019942:	304c      	adds	r0, #76	; 0x4c
            break;
24019944:	e7f4      	b.n	24019930 <lv_textarea_signal+0x3c>
            style_dsc_p = &ext->style_placeholder;
24019946:	3034      	adds	r0, #52	; 0x34
            break;
24019948:	e7f2      	b.n	24019930 <lv_textarea_signal+0x3c>
        return ancestor_signal(ta, sign, param);
2401994a:	4b4c      	ldr	r3, [pc, #304]	; (24019a7c <lv_textarea_signal+0x188>)
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
2401994c:	2909      	cmp	r1, #9
        return ancestor_signal(ta, sign, param);
2401994e:	681b      	ldr	r3, [r3, #0]
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
24019950:	d0e8      	beq.n	24019924 <lv_textarea_signal+0x30>
    res = ancestor_signal(ta, sign, param);
24019952:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
24019954:	2801      	cmp	r0, #1
    res = ancestor_signal(ta, sign, param);
24019956:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
24019958:	d1ed      	bne.n	24019936 <lv_textarea_signal+0x42>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
2401995a:	2f07      	cmp	r7, #7
2401995c:	d106      	bne.n	2401996c <lv_textarea_signal+0x78>
2401995e:	4948      	ldr	r1, [pc, #288]	; (24019a80 <lv_textarea_signal+0x18c>)
24019960:	4630      	mov	r0, r6
}
24019962:	b003      	add	sp, #12
24019964:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
24019968:	f7ef bc2b 	b.w	240091c2 <lv_obj_handle_get_type_signal>
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
2401996c:	4620      	mov	r0, r4
2401996e:	f7ef fbf4 	bl	2400915a <lv_obj_get_ext_attr>
24019972:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
24019974:	b99f      	cbnz	r7, 2401999e <lv_textarea_signal+0xaa>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
24019976:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
24019978:	b108      	cbz	r0, 2401997e <lv_textarea_signal+0x8a>
2401997a:	f7f6 f82f 	bl	2400f9dc <lv_mem_free>
        if(ext->placeholder_txt != NULL) lv_mem_free(ext->placeholder_txt);
2401997e:	6b28      	ldr	r0, [r5, #48]	; 0x30
24019980:	b108      	cbz	r0, 24019986 <lv_textarea_signal+0x92>
24019982:	f7f6 f82b 	bl	2400f9dc <lv_mem_free>
        ext->pwd_tmp = NULL;
24019986:	2300      	movs	r3, #0
        lv_obj_clean_style_list(ta, LV_TEXTAREA_PART_CURSOR);
24019988:	4620      	mov	r0, r4
2401998a:	2103      	movs	r1, #3
        ext->pwd_tmp = NULL;
2401998c:	63eb      	str	r3, [r5, #60]	; 0x3c
        ext->placeholder_txt = NULL;
2401998e:	632b      	str	r3, [r5, #48]	; 0x30
        lv_obj_clean_style_list(ta, LV_TEXTAREA_PART_CURSOR);
24019990:	f7ee fe5d 	bl	2400864e <lv_obj_clean_style_list>
        lv_obj_clean_style_list(ta, LV_TEXTAREA_PART_PLACEHOLDER);
24019994:	2104      	movs	r1, #4
24019996:	4620      	mov	r0, r4
24019998:	f7ee fe59 	bl	2400864e <lv_obj_clean_style_list>
2401999c:	e7cb      	b.n	24019936 <lv_textarea_signal+0x42>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
2401999e:	2f04      	cmp	r7, #4
240199a0:	d023      	beq.n	240199ea <lv_textarea_signal+0xf6>
240199a2:	d818      	bhi.n	240199d6 <lv_textarea_signal+0xe2>
240199a4:	2f02      	cmp	r7, #2
240199a6:	d1c6      	bne.n	24019936 <lv_textarea_signal+0x42>
        if(ext->label) {
240199a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
240199aa:	2b00      	cmp	r3, #0
240199ac:	d0c3      	beq.n	24019936 <lv_textarea_signal+0x42>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
240199ae:	4620      	mov	r0, r4
240199b0:	f7ee fe2d 	bl	2400860e <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
240199b4:	88b3      	ldrh	r3, [r6, #4]
240199b6:	8832      	ldrh	r2, [r6, #0]
240199b8:	3301      	adds	r3, #1
240199ba:	1a9b      	subs	r3, r3, r2
240199bc:	b21b      	sxth	r3, r3
240199be:	4298      	cmp	r0, r3
240199c0:	d050      	beq.n	24019a64 <lv_textarea_signal+0x170>
                lv_obj_set_width(ext->label, lv_page_get_width_fit(ta));
240199c2:	6aee      	ldr	r6, [r5, #44]	; 0x2c
240199c4:	4620      	mov	r0, r4
240199c6:	f7fd ff47 	bl	24017858 <lv_page_get_width_fit>
240199ca:	4601      	mov	r1, r0
240199cc:	4630      	mov	r0, r6
240199ce:	f7ee fc11 	bl	240081f4 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, 0, 0);
240199d2:	2200      	movs	r2, #0
240199d4:	e041      	b.n	24019a5a <lv_textarea_signal+0x166>
240199d6:	f1a7 030b 	sub.w	r3, r7, #11
240199da:	2b03      	cmp	r3, #3
240199dc:	d8ab      	bhi.n	24019936 <lv_textarea_signal+0x42>
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
240199de:	4632      	mov	r2, r6
240199e0:	4639      	mov	r1, r7
240199e2:	4620      	mov	r0, r4
240199e4:	f7ff febc 	bl	24019760 <update_cursor_position_on_click>
240199e8:	e7a5      	b.n	24019936 <lv_textarea_signal+0x42>
        if(ext->label) {
240199ea:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
240199ec:	2e00      	cmp	r6, #0
240199ee:	d0a2      	beq.n	24019936 <lv_textarea_signal+0x42>
            if(ext->one_line) {
240199f0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
240199f4:	f012 0202 	ands.w	r2, r2, #2
240199f8:	d026      	beq.n	24019a48 <lv_textarea_signal+0x154>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
240199fa:	2210      	movs	r2, #16
240199fc:	2100      	movs	r1, #0
240199fe:	4620      	mov	r0, r4
24019a00:	f7ee fec2 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019a04:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019a06:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019a08:	2100      	movs	r1, #0
24019a0a:	4620      	mov	r0, r4
24019a0c:	f7ee febc 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019a10:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019a14:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019a16:	2100      	movs	r1, #0
24019a18:	4620      	mov	r0, r4
24019a1a:	f7ef f979 	bl	24008d10 <_lv_obj_get_style_ptr>
24019a1e:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
                lv_obj_set_height(ext->label, font_h);
24019a22:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019a24:	4649      	mov	r1, r9
24019a26:	f7ee fbec 	bl	24008202 <lv_obj_set_height>
                lv_obj_set_height(ta, font_h + top + bottom);
24019a2a:	19f0      	adds	r0, r6, r7
24019a2c:	eb00 0109 	add.w	r1, r0, r9
24019a30:	4620      	mov	r0, r4
24019a32:	b209      	sxth	r1, r1
24019a34:	f7ee fbe5 	bl	24008202 <lv_obj_set_height>
            lv_label_set_text(ext->label, NULL);
24019a38:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019a3a:	2100      	movs	r1, #0
24019a3c:	f7fc ffec 	bl	24016a18 <lv_label_set_text>
            refr_cursor_area(ta);
24019a40:	4620      	mov	r0, r4
24019a42:	f7ff fce5 	bl	24019410 <refr_cursor_area>
24019a46:	e776      	b.n	24019936 <lv_textarea_signal+0x42>
                lv_obj_set_width(ext->label, lv_page_get_width_fit(ta));
24019a48:	4620      	mov	r0, r4
24019a4a:	9201      	str	r2, [sp, #4]
24019a4c:	f7fd ff04 	bl	24017858 <lv_page_get_width_fit>
24019a50:	4601      	mov	r1, r0
24019a52:	4630      	mov	r0, r6
24019a54:	f7ee fbce 	bl	240081f4 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, 0, 0); /*Be sure the Label is in the correct position*/
24019a58:	9a01      	ldr	r2, [sp, #4]
24019a5a:	4611      	mov	r1, r2
24019a5c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019a5e:	f7ee fb02 	bl	24008066 <lv_obj_set_pos>
24019a62:	e7e9      	b.n	24019a38 <lv_textarea_signal+0x144>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
24019a64:	4620      	mov	r0, r4
24019a66:	f7ee fdd8 	bl	2400861a <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
24019a6a:	88f3      	ldrh	r3, [r6, #6]
24019a6c:	8872      	ldrh	r2, [r6, #2]
24019a6e:	3301      	adds	r3, #1
24019a70:	1a9b      	subs	r3, r3, r2
24019a72:	b21b      	sxth	r3, r3
24019a74:	4298      	cmp	r0, r3
24019a76:	d1a4      	bne.n	240199c2 <lv_textarea_signal+0xce>
24019a78:	e75d      	b.n	24019936 <lv_textarea_signal+0x42>
24019a7a:	bf00      	nop
24019a7c:	24035d38 	.word	0x24035d38
24019a80:	900ff315 	.word	0x900ff315

24019a84 <lv_textarea_set_text_align>:
{
24019a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24019a86:	4604      	mov	r4, r0
24019a88:	460d      	mov	r5, r1
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019a8a:	f7ef fb66 	bl	2400915a <lv_obj_get_ext_attr>
24019a8e:	4607      	mov	r7, r0
    lv_obj_t * label  = lv_textarea_get_label(ta);
24019a90:	4620      	mov	r0, r4
24019a92:	f7ff fcb2 	bl	240193fa <lv_textarea_get_label>
    if(!ext->one_line) {
24019a96:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
    lv_obj_t * label  = lv_textarea_get_label(ta);
24019a9a:	4606      	mov	r6, r0
    if(!ext->one_line) {
24019a9c:	079b      	lsls	r3, r3, #30
24019a9e:	d407      	bmi.n	24019ab0 <lv_textarea_set_text_align+0x2c>
        lv_label_set_align(label, align);
24019aa0:	4629      	mov	r1, r5
            lv_label_set_align(label, align);
24019aa2:	f7fc faf6 	bl	24016092 <lv_label_set_align>
    refr_cursor_area(ta);
24019aa6:	4620      	mov	r0, r4
}
24019aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    refr_cursor_area(ta);
24019aac:	f7ff bcb0 	b.w	24019410 <refr_cursor_area>
        if(align == LV_LABEL_ALIGN_LEFT) {
24019ab0:	b955      	cbnz	r5, 24019ac8 <lv_textarea_set_text_align+0x44>
            lv_label_set_long_mode(label, LV_LABEL_LONG_EXPAND);
24019ab2:	4629      	mov	r1, r5
24019ab4:	f7fd f865 	bl	24016b82 <lv_label_set_long_mode>
            lv_page_set_scrollable_fit2(ta, LV_FIT_MAX, LV_FIT_PARENT);
24019ab8:	2103      	movs	r1, #3
24019aba:	4620      	mov	r0, r4
24019abc:	2202      	movs	r2, #2
24019abe:	f7ff fb2f 	bl	24019120 <lv_page_set_scrollable_fit2>
            lv_label_set_align(label, align);
24019ac2:	4629      	mov	r1, r5
24019ac4:	4630      	mov	r0, r6
24019ac6:	e7ec      	b.n	24019aa2 <lv_textarea_set_text_align+0x1e>
            lv_label_set_long_mode(label, LV_LABEL_LONG_CROP);
24019ac8:	2105      	movs	r1, #5
24019aca:	f7fd f85a 	bl	24016b82 <lv_label_set_long_mode>
            lv_obj_set_width(label, lv_page_get_width_fit(ta));
24019ace:	4620      	mov	r0, r4
24019ad0:	f7fd fec2 	bl	24017858 <lv_page_get_width_fit>
24019ad4:	4601      	mov	r1, r0
24019ad6:	4630      	mov	r0, r6
24019ad8:	f7ee fb8c 	bl	240081f4 <lv_obj_set_width>
            lv_label_set_align(label, align);
24019adc:	4629      	mov	r1, r5
24019ade:	4630      	mov	r0, r6
24019ae0:	f7fc fad7 	bl	24016092 <lv_label_set_align>
            lv_page_set_scrollable_fit2(ta, LV_FIT_PARENT, LV_FIT_PARENT);
24019ae4:	2202      	movs	r2, #2
24019ae6:	4620      	mov	r0, r4
24019ae8:	4611      	mov	r1, r2
24019aea:	f7ff fb19 	bl	24019120 <lv_page_set_scrollable_fit2>
24019aee:	e7da      	b.n	24019aa6 <lv_textarea_set_text_align+0x22>

24019af0 <lv_textarea_set_one_line>:
{
24019af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24019af4:	460e      	mov	r6, r1
24019af6:	4604      	mov	r4, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019af8:	f7ef fb2f 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->one_line == en) return;
24019afc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019b00:	4605      	mov	r5, r0
    if(ext->one_line == en) return;
24019b02:	f3c3 0340 	ubfx	r3, r3, #1, #1
24019b06:	42b3      	cmp	r3, r6
24019b08:	d064      	beq.n	24019bd4 <lv_textarea_set_one_line+0xe4>
    lv_label_align_t old_align = lv_label_get_align(ext->label);
24019b0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
24019b0c:	f7fc fae0 	bl	240160d0 <lv_label_get_align>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019b10:	2210      	movs	r2, #16
24019b12:	4680      	mov	r8, r0
    if(en) {
24019b14:	b3d6      	cbz	r6, 24019b8c <lv_textarea_set_one_line+0x9c>
24019b16:	2100      	movs	r1, #0
24019b18:	4620      	mov	r0, r4
24019b1a:	f7ee fe35 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019b1e:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019b20:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019b22:	2100      	movs	r1, #0
24019b24:	4620      	mov	r0, r4
24019b26:	f7ee fe2f 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019b2a:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
24019b2c:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019b2e:	2100      	movs	r1, #0
24019b30:	4620      	mov	r0, r4
24019b32:	f7ee fe29 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019b36:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019b3a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
24019b3c:	2100      	movs	r1, #0
24019b3e:	4620      	mov	r0, r4
        lv_obj_set_height(ta, font_h + top + bottom);
24019b40:	443e      	add	r6, r7
24019b42:	f7ef f8e5 	bl	24008d10 <_lv_obj_get_style_ptr>
        ext->one_line = 1;
24019b46:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
24019b4a:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
        lv_page_set_scrollable_fit2(ta, LV_FIT_MAX, LV_FIT_PARENT);
24019b4e:	2202      	movs	r2, #2
        ext->one_line = 1;
24019b50:	f043 0302 	orr.w	r3, r3, #2
        lv_page_set_scrollable_fit2(ta, LV_FIT_MAX, LV_FIT_PARENT);
24019b54:	2103      	movs	r1, #3
        lv_obj_set_height(ta, font_h + top + bottom);
24019b56:	4456      	add	r6, sl
        lv_page_set_scrollable_fit2(ta, LV_FIT_MAX, LV_FIT_PARENT);
24019b58:	4620      	mov	r0, r4
        ext->one_line = 1;
24019b5a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        lv_page_set_scrollable_fit2(ta, LV_FIT_MAX, LV_FIT_PARENT);
24019b5e:	f7ff fadf 	bl	24019120 <lv_page_set_scrollable_fit2>
        lv_obj_set_height(ta, font_h + top + bottom);
24019b62:	4620      	mov	r0, r4
24019b64:	b231      	sxth	r1, r6
24019b66:	f7ee fb4c 	bl	24008202 <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
24019b6a:	2100      	movs	r1, #0
24019b6c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019b6e:	f7fd f808 	bl	24016b82 <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrollable(ta), left, top);
24019b72:	4620      	mov	r0, r4
24019b74:	f7fd fc8e 	bl	24017494 <lv_page_get_scrollable>
24019b78:	463a      	mov	r2, r7
24019b7a:	4649      	mov	r1, r9
        lv_obj_set_pos(lv_page_get_scrollable(ta), left, top);
24019b7c:	f7ee fa73 	bl	24008066 <lv_obj_set_pos>
    lv_textarea_set_text_align(ta, old_align);
24019b80:	4641      	mov	r1, r8
24019b82:	4620      	mov	r0, r4
}
24019b84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_textarea_set_text_align(ta, old_align);
24019b88:	f7ff bf7c 	b.w	24019a84 <lv_textarea_set_text_align>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019b8c:	4631      	mov	r1, r6
24019b8e:	4620      	mov	r0, r4
24019b90:	f7ee fdfa 	bl	24008788 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019b94:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
24019b96:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
24019b98:	4631      	mov	r1, r6
24019b9a:	4620      	mov	r0, r4
24019b9c:	f7ee fdf4 	bl	24008788 <_lv_obj_get_style_int>
        ext->one_line = 0;
24019ba0:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
        lv_page_set_scrollable_fit2(ta, LV_FIT_PARENT, LV_FIT_TIGHT);
24019ba4:	2201      	movs	r2, #1
24019ba6:	4607      	mov	r7, r0
        ext->one_line = 0;
24019ba8:	f366 0341 	bfi	r3, r6, #1, #1
        lv_page_set_scrollable_fit2(ta, LV_FIT_PARENT, LV_FIT_TIGHT);
24019bac:	2102      	movs	r1, #2
24019bae:	4620      	mov	r0, r4
        ext->one_line = 0;
24019bb0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        lv_page_set_scrollable_fit2(ta, LV_FIT_PARENT, LV_FIT_TIGHT);
24019bb4:	f7ff fab4 	bl	24019120 <lv_page_set_scrollable_fit2>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
24019bb8:	2101      	movs	r1, #1
24019bba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019bbc:	f7fc ffe1 	bl	24016b82 <lv_label_set_long_mode>
        lv_obj_set_height(ta, LV_TEXTAREA_DEF_HEIGHT);
24019bc0:	2182      	movs	r1, #130	; 0x82
24019bc2:	4620      	mov	r0, r4
24019bc4:	f7ee fb1d 	bl	24008202 <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrollable(ta), left, top);
24019bc8:	4620      	mov	r0, r4
24019bca:	f7fd fc63 	bl	24017494 <lv_page_get_scrollable>
24019bce:	464a      	mov	r2, r9
24019bd0:	4639      	mov	r1, r7
24019bd2:	e7d3      	b.n	24019b7c <lv_textarea_set_one_line+0x8c>
}
24019bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24019bd8 <lv_textarea_create>:
{
24019bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24019bdc:	460f      	mov	r7, r1
    lv_obj_t * ta = lv_page_create(par, copy);
24019bde:	f7fd fba3 	bl	24017328 <lv_page_create>
    if(ta == NULL) return NULL;
24019be2:	4605      	mov	r5, r0
24019be4:	b920      	cbnz	r0, 24019bf0 <lv_textarea_create+0x18>
24019be6:	2500      	movs	r5, #0
}
24019be8:	4628      	mov	r0, r5
24019bea:	b003      	add	sp, #12
24019bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(ta);
24019bf0:	4c76      	ldr	r4, [pc, #472]	; (24019dcc <lv_textarea_create+0x1f4>)
24019bf2:	6823      	ldr	r3, [r4, #0]
24019bf4:	b913      	cbnz	r3, 24019bfc <lv_textarea_create+0x24>
24019bf6:	f7ef faac 	bl	24009152 <lv_obj_get_signal_cb>
24019bfa:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(ta);
24019bfc:	4c74      	ldr	r4, [pc, #464]	; (24019dd0 <lv_textarea_create+0x1f8>)
24019bfe:	6823      	ldr	r3, [r4, #0]
24019c00:	b91b      	cbnz	r3, 24019c0a <lv_textarea_create+0x32>
24019c02:	4628      	mov	r0, r5
24019c04:	f7ef faa7 	bl	24009156 <lv_obj_get_design_cb>
24019c08:	6020      	str	r0, [r4, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrollable(ta));
24019c0a:	4c72      	ldr	r4, [pc, #456]	; (24019dd4 <lv_textarea_create+0x1fc>)
24019c0c:	6823      	ldr	r3, [r4, #0]
24019c0e:	b92b      	cbnz	r3, 24019c1c <lv_textarea_create+0x44>
24019c10:	4628      	mov	r0, r5
24019c12:	f7fd fc3f 	bl	24017494 <lv_page_get_scrollable>
24019c16:	f7ef fa9c 	bl	24009152 <lv_obj_get_signal_cb>
24019c1a:	6020      	str	r0, [r4, #0]
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_cb(lv_page_get_scrollable(ta));
24019c1c:	4c6e      	ldr	r4, [pc, #440]	; (24019dd8 <lv_textarea_create+0x200>)
24019c1e:	6823      	ldr	r3, [r4, #0]
24019c20:	b92b      	cbnz	r3, 24019c2e <lv_textarea_create+0x56>
24019c22:	4628      	mov	r0, r5
24019c24:	f7fd fc36 	bl	24017494 <lv_page_get_scrollable>
24019c28:	f7ef fa95 	bl	24009156 <lv_obj_get_design_cb>
24019c2c:	6020      	str	r0, [r4, #0]
    lv_textarea_ext_t * ext = lv_obj_allocate_ext_attr(ta, sizeof(lv_textarea_ext_t));
24019c2e:	2174      	movs	r1, #116	; 0x74
24019c30:	4628      	mov	r0, r5
24019c32:	f7ee f8eb 	bl	24007e0c <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
24019c36:	2600      	movs	r6, #0
24019c38:	4604      	mov	r4, r0
24019c3a:	b918      	cbnz	r0, 24019c44 <lv_textarea_create+0x6c>
        lv_obj_del(ta);
24019c3c:	4628      	mov	r0, r5
24019c3e:	f7ee faeb 	bl	24008218 <lv_obj_del>
        return NULL;
24019c42:	e7d0      	b.n	24019be6 <lv_textarea_create+0xe>
    ext->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
24019c44:	f240 53dc 	movw	r3, #1500	; 0x5dc
    lv_style_list_init(&ext->cursor.style);
24019c48:	f100 094c 	add.w	r9, r0, #76	; 0x4c
    lv_style_list_init(&ext->style_placeholder);
24019c4c:	f104 0834 	add.w	r8, r4, #52	; 0x34
    ext->pwd_tmp           = NULL;
24019c50:	63c6      	str	r6, [r0, #60]	; 0x3c
    ext->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
24019c52:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    ext->cursor.blink_time = LV_TEXTAREA_DEF_CURSOR_BLINK_TIME;
24019c56:	f44f 73c8 	mov.w	r3, #400	; 0x190
    ext->cursor.pos        = 0;
24019c5a:	6586      	str	r6, [r0, #88]	; 0x58
    ext->cursor.blink_time = LV_TEXTAREA_DEF_CURSOR_BLINK_TIME;
24019c5c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    ext->cursor.state      = 1;
24019c60:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    ext->cursor.valid_x    = 0;
24019c64:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54
    ext->cursor.state      = 1;
24019c68:	f023 0307 	bic.w	r3, r3, #7
24019c6c:	f043 0305 	orr.w	r3, r3, #5
24019c70:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    ext->pwd_mode          = 0;
24019c74:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
24019c78:	f023 0303 	bic.w	r3, r3, #3
    ext->max_length        = 0;
24019c7c:	e9c0 6610 	strd	r6, r6, [r0, #64]	; 0x40
    ext->pwd_mode          = 0;
24019c80:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    ext->placeholder_txt = NULL;
24019c84:	e9c0 660b 	strd	r6, r6, [r0, #44]	; 0x2c
    lv_style_list_init(&ext->cursor.style);
24019c88:	4648      	mov	r0, r9
24019c8a:	f7f0 fc9b 	bl	2400a5c4 <lv_style_list_init>
    lv_style_list_init(&ext->style_placeholder);
24019c8e:	4640      	mov	r0, r8
24019c90:	f7f0 fc98 	bl	2400a5c4 <lv_style_list_init>
    lv_obj_set_signal_cb(ta, lv_textarea_signal);
24019c94:	4951      	ldr	r1, [pc, #324]	; (24019ddc <lv_textarea_create+0x204>)
24019c96:	4628      	mov	r0, r5
    ext->pwd_show_time     = 0;
24019c98:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    ext->cursor.blink_time = 0;
24019c9c:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    lv_obj_set_signal_cb(ta, lv_textarea_signal);
24019ca0:	f7ee f8aa 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrollable(ta), lv_textarea_scrollable_signal);
24019ca4:	4628      	mov	r0, r5
24019ca6:	f7fd fbf5 	bl	24017494 <lv_page_get_scrollable>
24019caa:	494d      	ldr	r1, [pc, #308]	; (24019de0 <lv_textarea_create+0x208>)
24019cac:	f7ee f8a4 	bl	24007df8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(ta, lv_textarea_design);
24019cb0:	494c      	ldr	r1, [pc, #304]	; (24019de4 <lv_textarea_create+0x20c>)
24019cb2:	4628      	mov	r0, r5
24019cb4:	f7ee f8a8 	bl	24007e08 <lv_obj_set_design_cb>
    if(copy == NULL) {
24019cb8:	bb67      	cbnz	r7, 24019d14 <lv_textarea_create+0x13c>
        lv_page_set_scrollable_fit2(ta, LV_FIT_PARENT, LV_FIT_TIGHT);
24019cba:	2201      	movs	r2, #1
24019cbc:	4628      	mov	r0, r5
24019cbe:	2102      	movs	r1, #2
24019cc0:	f7ff fa2e 	bl	24019120 <lv_page_set_scrollable_fit2>
        ext->label = lv_label_create(ta, NULL);
24019cc4:	4639      	mov	r1, r7
24019cc6:	4628      	mov	r0, r5
24019cc8:	f7fc ff94 	bl	24016bf4 <lv_label_create>
        lv_obj_set_design_cb(ext->page.scrl, lv_textarea_scrollable_design);
24019ccc:	4946      	ldr	r1, [pc, #280]	; (24019de8 <lv_textarea_create+0x210>)
        ext->label = lv_label_create(ta, NULL);
24019cce:	62e0      	str	r0, [r4, #44]	; 0x2c
        lv_obj_set_design_cb(ext->page.scrl, lv_textarea_scrollable_design);
24019cd0:	6860      	ldr	r0, [r4, #4]
24019cd2:	f7ee f899 	bl	24007e08 <lv_obj_set_design_cb>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
24019cd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24019cd8:	2101      	movs	r1, #1
24019cda:	f7fc ff52 	bl	24016b82 <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
24019cde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24019ce0:	4942      	ldr	r1, [pc, #264]	; (24019dec <lv_textarea_create+0x214>)
24019ce2:	f7fc fe99 	bl	24016a18 <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
24019ce6:	4639      	mov	r1, r7
24019ce8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24019cea:	f7ed ffe6 	bl	24007cba <lv_obj_set_click>
        lv_obj_set_size(ta, LV_TEXTAREA_DEF_WIDTH, LV_TEXTAREA_DEF_HEIGHT);
24019cee:	2282      	movs	r2, #130	; 0x82
24019cf0:	4628      	mov	r0, r5
24019cf2:	f44f 7182 	mov.w	r1, #260	; 0x104
24019cf6:	f7ee fa3b 	bl	24008170 <lv_obj_set_size>
 * @param ta pointer to a text area object
 * @param sb_mode the new mode from 'lv_scrollbar_mode_t' enum
 */
static inline void lv_textarea_set_scrollbar_mode(lv_obj_t * ta, lv_scrollbar_mode_t mode)
{
    lv_page_set_scrollbar_mode(ta, mode);
24019cfa:	4628      	mov	r0, r5
24019cfc:	2102      	movs	r1, #2
24019cfe:	f7fd fae6 	bl	240172ce <lv_page_set_scrollbar_mode>
        lv_obj_reset_style_list(ta, LV_PAGE_PART_SCROLLABLE);
24019d02:	4628      	mov	r0, r5
24019d04:	2140      	movs	r1, #64	; 0x40
24019d06:	f7ef f97e 	bl	24009006 <lv_obj_reset_style_list>
        lv_theme_apply(ta, LV_THEME_TEXTAREA);
24019d0a:	2113      	movs	r1, #19
24019d0c:	4628      	mov	r0, r5
24019d0e:	f7f7 f8d9 	bl	24010ec4 <lv_theme_apply>
24019d12:	e769      	b.n	24019be8 <lv_textarea_create+0x10>
        lv_obj_set_design_cb(ext->page.scrl, lv_textarea_scrollable_design);
24019d14:	4934      	ldr	r1, [pc, #208]	; (24019de8 <lv_textarea_create+0x210>)
24019d16:	6860      	ldr	r0, [r4, #4]
24019d18:	f7ee f876 	bl	24007e08 <lv_obj_set_design_cb>
        lv_textarea_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
24019d1c:	4638      	mov	r0, r7
24019d1e:	f7ef fa1c 	bl	2400915a <lv_obj_get_ext_attr>
24019d22:	4606      	mov	r6, r0
        ext->label             = lv_label_create(ta, copy_ext->label);
24019d24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24019d26:	4628      	mov	r0, r5
24019d28:	f7fc ff64 	bl	24016bf4 <lv_label_create>
        ext->pwd_mode          = copy_ext->pwd_mode;
24019d2c:	f896 2070 	ldrb.w	r2, [r6, #112]	; 0x70
24019d30:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        lv_style_list_copy(&ext->cursor.style, &copy_ext->cursor.style);
24019d34:	f106 014c 	add.w	r1, r6, #76	; 0x4c
        ext->label             = lv_label_create(ta, copy_ext->label);
24019d38:	62e0      	str	r0, [r4, #44]	; 0x2c
        lv_style_list_copy(&ext->cursor.style, &copy_ext->cursor.style);
24019d3a:	4648      	mov	r0, r9
        ext->pwd_mode          = copy_ext->pwd_mode;
24019d3c:	f362 0300 	bfi	r3, r2, #0, #1
        ext->cursor.hidden    = copy_ext->cursor.hidden;
24019d40:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
        ext->pwd_mode          = copy_ext->pwd_mode;
24019d44:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        ext->accepted_chars    = copy_ext->accepted_chars;
24019d48:	6c33      	ldr	r3, [r6, #64]	; 0x40
24019d4a:	6423      	str	r3, [r4, #64]	; 0x40
        ext->max_length        = copy_ext->max_length;
24019d4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
24019d4e:	6463      	str	r3, [r4, #68]	; 0x44
        ext->cursor.pos        = copy_ext->cursor.pos;
24019d50:	6db3      	ldr	r3, [r6, #88]	; 0x58
24019d52:	65a3      	str	r3, [r4, #88]	; 0x58
        ext->cursor.valid_x    = copy_ext->cursor.valid_x;
24019d54:	f9b6 3054 	ldrsh.w	r3, [r6, #84]	; 0x54
24019d58:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        ext->cursor.hidden    = copy_ext->cursor.hidden;
24019d5c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
24019d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
24019d64:	f363 0241 	bfi	r2, r3, #1, #1
24019d68:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
        lv_style_list_copy(&ext->cursor.style, &copy_ext->cursor.style);
24019d6c:	f7f0 feac 	bl	2400aac8 <lv_style_list_copy>
        lv_style_list_copy(&ext->style_placeholder, &copy_ext->style_placeholder);
24019d70:	f106 0134 	add.w	r1, r6, #52	; 0x34
24019d74:	4640      	mov	r0, r8
24019d76:	f7f0 fea7 	bl	2400aac8 <lv_style_list_copy>
        if(ext->pwd_mode != 0) pwd_char_hider(ta);
24019d7a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
24019d7e:	07da      	lsls	r2, r3, #31
24019d80:	d502      	bpl.n	24019d88 <lv_textarea_create+0x1b0>
24019d82:	4628      	mov	r0, r5
24019d84:	f7ff faac 	bl	240192e0 <pwd_char_hider>
        if(copy_ext->placeholder_txt) {
24019d88:	6b31      	ldr	r1, [r6, #48]	; 0x30
24019d8a:	b111      	cbz	r1, 24019d92 <lv_textarea_create+0x1ba>
            lv_textarea_set_placeholder_text(ta, copy_ext->placeholder_txt);
24019d8c:	4628      	mov	r0, r5
24019d8e:	f7ff faf7 	bl	24019380 <lv_textarea_set_placeholder_text>
        if(copy_ext->pwd_tmp) {
24019d92:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
24019d94:	b160      	cbz	r0, 24019db0 <lv_textarea_create+0x1d8>
            uint32_t len = _lv_mem_get_size(copy_ext->pwd_tmp);
24019d96:	f7f5 fe2f 	bl	2400f9f8 <_lv_mem_get_size>
24019d9a:	9001      	str	r0, [sp, #4]
            ext->pwd_tmp = lv_mem_alloc(len);
24019d9c:	f7f5 fdee 	bl	2400f97c <lv_mem_alloc>
24019da0:	63e0      	str	r0, [r4, #60]	; 0x3c
            if(ext->pwd_tmp == NULL) return NULL;
24019da2:	2800      	cmp	r0, #0
24019da4:	f43f af1f 	beq.w	24019be6 <lv_textarea_create+0xe>
            _lv_memcpy(ext->pwd_tmp, copy_ext->pwd_tmp, len);
24019da8:	9a01      	ldr	r2, [sp, #4]
24019daa:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
24019dac:	f7f5 fe7e 	bl	2400faac <_lv_memcpy>
        if(copy_ext->one_line) lv_textarea_set_one_line(ta, true);
24019db0:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
24019db4:	079b      	lsls	r3, r3, #30
24019db6:	d503      	bpl.n	24019dc0 <lv_textarea_create+0x1e8>
24019db8:	2101      	movs	r1, #1
24019dba:	4628      	mov	r0, r5
24019dbc:	f7ff fe98 	bl	24019af0 <lv_textarea_set_one_line>
        lv_obj_refresh_style(ta, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
24019dc0:	22ff      	movs	r2, #255	; 0xff
24019dc2:	4628      	mov	r0, r5
24019dc4:	4611      	mov	r1, r2
24019dc6:	f7ef f87b 	bl	24008ec0 <lv_obj_refresh_style>
24019dca:	e70d      	b.n	24019be8 <lv_textarea_create+0x10>
24019dcc:	24035d38 	.word	0x24035d38
24019dd0:	24035d34 	.word	0x24035d34
24019dd4:	24035d40 	.word	0x24035d40
24019dd8:	24035d3c 	.word	0x24035d3c
24019ddc:	240198f5 	.word	0x240198f5
24019de0:	2401980d 	.word	0x2401980d
24019de4:	240190f9 	.word	0x240190f9
24019de8:	24019151 	.word	0x24019151
24019dec:	900ff321 	.word	0x900ff321

24019df0 <lv_textarea_get_accepted_chars>:
{
24019df0:	b508      	push	{r3, lr}
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019df2:	f7ef f9b2 	bl	2400915a <lv_obj_get_ext_attr>
}
24019df6:	6c00      	ldr	r0, [r0, #64]	; 0x40
24019df8:	bd08      	pop	{r3, pc}

24019dfa <lv_textarea_get_max_length>:
{
24019dfa:	b508      	push	{r3, lr}
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019dfc:	f7ef f9ad 	bl	2400915a <lv_obj_get_ext_attr>
}
24019e00:	6c40      	ldr	r0, [r0, #68]	; 0x44
24019e02:	bd08      	pop	{r3, pc}

24019e04 <lv_textarea_add_text>:
{
24019e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24019e08:	4604      	mov	r4, r0
24019e0a:	460e      	mov	r6, r1
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019e0c:	f7ef f9a5 	bl	2400915a <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
24019e10:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019e14:	4605      	mov	r5, r0
    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
24019e16:	07da      	lsls	r2, r3, #31
24019e18:	d502      	bpl.n	24019e20 <lv_textarea_add_text+0x1c>
24019e1a:	4620      	mov	r0, r4
24019e1c:	f7ff fa60 	bl	240192e0 <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(ta) || lv_textarea_get_max_length(ta)) {
24019e20:	4620      	mov	r0, r4
24019e22:	f7ff ffe5 	bl	24019df0 <lv_textarea_get_accepted_chars>
24019e26:	b150      	cbz	r0, 24019e3e <lv_textarea_add_text+0x3a>
        uint32_t i = 0;
24019e28:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
24019e2a:	4d36      	ldr	r5, [pc, #216]	; (24019f04 <lv_textarea_add_text+0x100>)
            lv_textarea_add_char(ta, _lv_txt_unicode_to_encoded(c));
24019e2c:	4f36      	ldr	r7, [pc, #216]	; (24019f08 <lv_textarea_add_text+0x104>)
        uint32_t i = 0;
24019e2e:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
24019e30:	9b01      	ldr	r3, [sp, #4]
24019e32:	5cf3      	ldrb	r3, [r6, r3]
24019e34:	2b00      	cmp	r3, #0
24019e36:	d159      	bne.n	24019eec <lv_textarea_add_text+0xe8>
}
24019e38:	b003      	add	sp, #12
24019e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(lv_textarea_get_accepted_chars(ta) || lv_textarea_get_max_length(ta)) {
24019e3e:	4620      	mov	r0, r4
24019e40:	f7ff ffdb 	bl	24019dfa <lv_textarea_get_max_length>
24019e44:	4607      	mov	r7, r0
24019e46:	2800      	cmp	r0, #0
24019e48:	d1ee      	bne.n	24019e28 <lv_textarea_add_text+0x24>
    lv_res_t res = insert_handler(ta, txt);
24019e4a:	4631      	mov	r1, r6
24019e4c:	4620      	mov	r0, r4
24019e4e:	f000 f85f 	bl	24019f10 <insert_handler>
    if(res != LV_RES_OK) return;
24019e52:	2801      	cmp	r0, #1
24019e54:	d1f0      	bne.n	24019e38 <lv_textarea_add_text+0x34>
 * @param ta pointer to a Text area
 * @return true or false
 */
static inline bool lv_textarea_get_edge_flash(lv_obj_t * ta)
{
    return lv_page_get_edge_flash(ta);
24019e56:	4620      	mov	r0, r4
24019e58:	f7fd fcfc 	bl	24017854 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
24019e5c:	4639      	mov	r1, r7
    return lv_page_get_edge_flash(ta);
24019e5e:	4680      	mov	r8, r0
    lv_page_set_edge_flash(ta, en);
24019e60:	4620      	mov	r0, r4
24019e62:	f7fd fb16 	bl	24017492 <lv_page_set_edge_flash>
    if(ext->placeholder_txt) {
24019e66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24019e68:	b13b      	cbz	r3, 24019e7a <lv_textarea_add_text+0x76>
        const char * txt_act = lv_label_get_text(ext->label);
24019e6a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019e6c:	f7fc f924 	bl	240160b8 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(ta);
24019e70:	7803      	ldrb	r3, [r0, #0]
24019e72:	b913      	cbnz	r3, 24019e7a <lv_textarea_add_text+0x76>
24019e74:	4620      	mov	r0, r4
24019e76:	f7ee f8b5 	bl	24007fe4 <lv_obj_invalidate>
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
24019e7a:	4632      	mov	r2, r6
24019e7c:	6da9      	ldr	r1, [r5, #88]	; 0x58
24019e7e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019e80:	f7fc fe08 	bl	24016a94 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
24019e84:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
24019e88:	07db      	lsls	r3, r3, #31
24019e8a:	d517      	bpl.n	24019ebc <lv_textarea_add_text+0xb8>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
24019e8c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
24019e90:	4648      	mov	r0, r9
24019e92:	f000 fb8d 	bl	2401a5b0 <__strlen_veneer>
24019e96:	4607      	mov	r7, r0
24019e98:	4630      	mov	r0, r6
24019e9a:	f000 fb89 	bl	2401a5b0 <__strlen_veneer>
24019e9e:	4407      	add	r7, r0
24019ea0:	4648      	mov	r0, r9
24019ea2:	1c79      	adds	r1, r7, #1
24019ea4:	f7f5 fef2 	bl	2400fc8c <lv_mem_realloc>
24019ea8:	63e8      	str	r0, [r5, #60]	; 0x3c
        if(ext->pwd_tmp == NULL) return;
24019eaa:	2800      	cmp	r0, #0
24019eac:	d0c4      	beq.n	24019e38 <lv_textarea_add_text+0x34>
        _lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
24019eae:	4632      	mov	r2, r6
24019eb0:	6da9      	ldr	r1, [r5, #88]	; 0x58
24019eb2:	f7f6 ff55 	bl	24010d60 <_lv_txt_ins>
        pwd_char_hider(ta);
24019eb6:	4620      	mov	r0, r4
24019eb8:	f7ff fa12 	bl	240192e0 <pwd_char_hider>
    lv_textarea_set_cursor_pos(ta, lv_textarea_get_cursor_pos(ta) + _lv_txt_get_encoded_length(txt));
24019ebc:	4620      	mov	r0, r4
24019ebe:	f7ff faa1 	bl	24019404 <lv_textarea_get_cursor_pos>
24019ec2:	4b12      	ldr	r3, [pc, #72]	; (24019f0c <lv_textarea_add_text+0x108>)
24019ec4:	4605      	mov	r5, r0
24019ec6:	4630      	mov	r0, r6
24019ec8:	681b      	ldr	r3, [r3, #0]
24019eca:	4798      	blx	r3
24019ecc:	1829      	adds	r1, r5, r0
24019ece:	4620      	mov	r0, r4
24019ed0:	f7ff fba0 	bl	24019614 <lv_textarea_set_cursor_pos>
24019ed4:	4641      	mov	r1, r8
24019ed6:	4620      	mov	r0, r4
24019ed8:	f7fd fadb 	bl	24017492 <lv_page_set_edge_flash>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
24019edc:	2200      	movs	r2, #0
24019ede:	2110      	movs	r1, #16
24019ee0:	4620      	mov	r0, r4
}
24019ee2:	b003      	add	sp, #12
24019ee4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
24019ee8:	f7ed bf76 	b.w	24007dd8 <lv_event_send>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
24019eec:	a901      	add	r1, sp, #4
24019eee:	682b      	ldr	r3, [r5, #0]
24019ef0:	4630      	mov	r0, r6
24019ef2:	4798      	blx	r3
            lv_textarea_add_char(ta, _lv_txt_unicode_to_encoded(c));
24019ef4:	683b      	ldr	r3, [r7, #0]
24019ef6:	4798      	blx	r3
24019ef8:	4601      	mov	r1, r0
24019efa:	4620      	mov	r0, r4
24019efc:	f000 f826 	bl	24019f4c <lv_textarea_add_char>
24019f00:	e796      	b.n	24019e30 <lv_textarea_add_text+0x2c>
24019f02:	bf00      	nop
24019f04:	2401a6e4 	.word	0x2401a6e4
24019f08:	2401a6f4 	.word	0x2401a6f4
24019f0c:	2401a6f0 	.word	0x2401a6f0

24019f10 <insert_handler>:

static lv_res_t insert_handler(lv_obj_t * ta, const char * txt)
{
24019f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ta_insert_replace = NULL;
24019f12:	4c0d      	ldr	r4, [pc, #52]	; (24019f48 <insert_handler+0x38>)
24019f14:	2700      	movs	r7, #0
    lv_event_send(ta, LV_EVENT_INSERT, txt);
24019f16:	460a      	mov	r2, r1
{
24019f18:	460d      	mov	r5, r1
    lv_event_send(ta, LV_EVENT_INSERT, txt);
24019f1a:	2111      	movs	r1, #17
    ta_insert_replace = NULL;
24019f1c:	6027      	str	r7, [r4, #0]
{
24019f1e:	4606      	mov	r6, r0
    lv_event_send(ta, LV_EVENT_INSERT, txt);
24019f20:	f7ed ff5a 	bl	24007dd8 <lv_event_send>
    if(ta_insert_replace) {
24019f24:	6824      	ldr	r4, [r4, #0]
24019f26:	b164      	cbz	r4, 24019f42 <insert_handler+0x32>
        if(ta_insert_replace[0] == '\0') return LV_RES_INV; /*Drop this text*/
24019f28:	7820      	ldrb	r0, [r4, #0]
24019f2a:	b148      	cbz	r0, 24019f40 <insert_handler+0x30>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, txt)) {
24019f2c:	4629      	mov	r1, r5
24019f2e:	4620      	mov	r0, r4
24019f30:	f000 fb36 	bl	2401a5a0 <__strcmp_veneer>
24019f34:	b128      	cbz	r0, 24019f42 <insert_handler+0x32>
            lv_textarea_add_text(ta, ta_insert_replace);
24019f36:	4630      	mov	r0, r6
24019f38:	4621      	mov	r1, r4
24019f3a:	f7ff ff63 	bl	24019e04 <lv_textarea_add_text>
            return LV_RES_INV;
24019f3e:	4638      	mov	r0, r7
        }
    }

    return LV_RES_OK;
}
24019f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_OK;
24019f42:	2001      	movs	r0, #1
24019f44:	e7fc      	b.n	24019f40 <insert_handler+0x30>
24019f46:	bf00      	nop
24019f48:	24035d44 	.word	0x24035d44

24019f4c <lv_textarea_add_char>:
{
24019f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24019f50:	b087      	sub	sp, #28
24019f52:	4604      	mov	r4, r0
24019f54:	9101      	str	r1, [sp, #4]
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019f56:	f7ef f900 	bl	2400915a <lv_obj_get_ext_attr>
    u32_buf[0] = c;
24019f5a:	9b01      	ldr	r3, [sp, #4]
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019f5c:	4605      	mov	r5, r0
    lv_res_t res = insert_handler(ta, letter_buf);
24019f5e:	a904      	add	r1, sp, #16
24019f60:	4620      	mov	r0, r4
    u32_buf[0] = c;
24019f62:	9304      	str	r3, [sp, #16]
    u32_buf[1] = 0;
24019f64:	2300      	movs	r3, #0
24019f66:	9305      	str	r3, [sp, #20]
    lv_res_t res = insert_handler(ta, letter_buf);
24019f68:	f7ff ffd2 	bl	24019f10 <insert_handler>
    if(res != LV_RES_OK) return;
24019f6c:	2801      	cmp	r0, #1
24019f6e:	d169      	bne.n	2401a044 <lv_textarea_add_char+0xf8>
    if(ext->one_line && (c == '\n' || c == '\r')) {
24019f70:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
24019f74:	0799      	lsls	r1, r3, #30
24019f76:	d504      	bpl.n	24019f82 <lv_textarea_add_char+0x36>
24019f78:	9b01      	ldr	r3, [sp, #4]
24019f7a:	2b0a      	cmp	r3, #10
24019f7c:	d062      	beq.n	2401a044 <lv_textarea_add_char+0xf8>
24019f7e:	2b0d      	cmp	r3, #13
24019f80:	d060      	beq.n	2401a044 <lv_textarea_add_char+0xf8>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
24019f82:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2401a070 <lv_textarea_add_char+0x124>
24019f86:	2100      	movs	r1, #0
24019f88:	a801      	add	r0, sp, #4
24019f8a:	f8d8 3000 	ldr.w	r3, [r8]
24019f8e:	4798      	blx	r3
24019f90:	4607      	mov	r7, r0
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
24019f92:	4620      	mov	r0, r4
24019f94:	f7ef f8e1 	bl	2400915a <lv_obj_get_ext_attr>
24019f98:	4606      	mov	r6, r0
    if(ext->accepted_chars == NULL && ext->max_length == 0) return true;
24019f9a:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
24019f9e:	2a00      	cmp	r2, #0
24019fa0:	d145      	bne.n	2401a02e <lv_textarea_add_char+0xe2>
24019fa2:	2b00      	cmp	r3, #0
24019fa4:	d144      	bne.n	2401a030 <lv_textarea_add_char+0xe4>
    return lv_page_get_edge_flash(ta);
24019fa6:	4620      	mov	r0, r4
24019fa8:	f7fd fc54 	bl	24017854 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
24019fac:	2100      	movs	r1, #0
    return lv_page_get_edge_flash(ta);
24019fae:	4606      	mov	r6, r0
    lv_page_set_edge_flash(ta, en);
24019fb0:	4620      	mov	r0, r4
24019fb2:	f7fd fa6e 	bl	24017492 <lv_page_set_edge_flash>
    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
24019fb6:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
24019fba:	07da      	lsls	r2, r3, #31
24019fbc:	d502      	bpl.n	24019fc4 <lv_textarea_add_char+0x78>
24019fbe:	4620      	mov	r0, r4
24019fc0:	f7ff f98e 	bl	240192e0 <pwd_char_hider>
    if(ext->placeholder_txt) {
24019fc4:	e9d5 030b 	ldrd	r0, r3, [r5, #44]	; 0x2c
24019fc8:	b133      	cbz	r3, 24019fd8 <lv_textarea_add_char+0x8c>
        const char * txt = lv_label_get_text(ext->label);
24019fca:	f7fc f875 	bl	240160b8 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(ta);
24019fce:	7803      	ldrb	r3, [r0, #0]
24019fd0:	b913      	cbnz	r3, 24019fd8 <lv_textarea_add_char+0x8c>
24019fd2:	4620      	mov	r0, r4
24019fd4:	f7ee f806 	bl	24007fe4 <lv_obj_invalidate>
    lv_label_ins_text(ext->label, ext->cursor.pos, letter_buf); /*Insert the character*/
24019fd8:	aa04      	add	r2, sp, #16
24019fda:	6da9      	ldr	r1, [r5, #88]	; 0x58
24019fdc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
24019fde:	f7fc fd59 	bl	24016a94 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
24019fe2:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
24019fe6:	07db      	lsls	r3, r3, #31
24019fe8:	d510      	bpl.n	2401a00c <lv_textarea_add_char+0xc0>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2); /*+2: the new char + \0 */
24019fea:	6bef      	ldr	r7, [r5, #60]	; 0x3c
24019fec:	4638      	mov	r0, r7
24019fee:	f000 fadf 	bl	2401a5b0 <__strlen_veneer>
24019ff2:	1c81      	adds	r1, r0, #2
24019ff4:	4638      	mov	r0, r7
24019ff6:	f7f5 fe49 	bl	2400fc8c <lv_mem_realloc>
24019ffa:	63e8      	str	r0, [r5, #60]	; 0x3c
        if(ext->pwd_tmp == NULL) return;
24019ffc:	b310      	cbz	r0, 2401a044 <lv_textarea_add_char+0xf8>
        _lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
24019ffe:	aa04      	add	r2, sp, #16
2401a000:	6da9      	ldr	r1, [r5, #88]	; 0x58
2401a002:	f7f6 fead 	bl	24010d60 <_lv_txt_ins>
        pwd_char_hider(ta);
2401a006:	4620      	mov	r0, r4
2401a008:	f7ff f96a 	bl	240192e0 <pwd_char_hider>
    lv_textarea_set_cursor_pos(ta, lv_textarea_get_cursor_pos(ta) + 1);
2401a00c:	4620      	mov	r0, r4
2401a00e:	f7ff f9f9 	bl	24019404 <lv_textarea_get_cursor_pos>
2401a012:	1c41      	adds	r1, r0, #1
2401a014:	4620      	mov	r0, r4
2401a016:	f7ff fafd 	bl	24019614 <lv_textarea_set_cursor_pos>
2401a01a:	4631      	mov	r1, r6
2401a01c:	4620      	mov	r0, r4
2401a01e:	f7fd fa38 	bl	24017492 <lv_page_set_edge_flash>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
2401a022:	2200      	movs	r2, #0
2401a024:	2110      	movs	r1, #16
2401a026:	4620      	mov	r0, r4
2401a028:	f7ed fed6 	bl	24007dd8 <lv_event_send>
2401a02c:	e00a      	b.n	2401a044 <lv_textarea_add_char+0xf8>
    if(ext->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(ta)) >= ext->max_length) {
2401a02e:	b17b      	cbz	r3, 2401a050 <lv_textarea_add_char+0x104>
2401a030:	4b0e      	ldr	r3, [pc, #56]	; (2401a06c <lv_textarea_add_char+0x120>)
2401a032:	4620      	mov	r0, r4
2401a034:	f8d3 9000 	ldr.w	r9, [r3]
2401a038:	f7ff f9d1 	bl	240193de <lv_textarea_get_text>
2401a03c:	47c8      	blx	r9
2401a03e:	6c73      	ldr	r3, [r6, #68]	; 0x44
2401a040:	4298      	cmp	r0, r3
2401a042:	d302      	bcc.n	2401a04a <lv_textarea_add_char+0xfe>
}
2401a044:	b007      	add	sp, #28
2401a046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ext->accepted_chars) {
2401a04a:	6c33      	ldr	r3, [r6, #64]	; 0x40
2401a04c:	2b00      	cmp	r3, #0
2401a04e:	d0aa      	beq.n	24019fa6 <lv_textarea_add_char+0x5a>
        uint32_t i = 0;
2401a050:	2300      	movs	r3, #0
2401a052:	9303      	str	r3, [sp, #12]
        while(ext->accepted_chars[i] != '\0') {
2401a054:	6c30      	ldr	r0, [r6, #64]	; 0x40
2401a056:	9b03      	ldr	r3, [sp, #12]
2401a058:	5cc3      	ldrb	r3, [r0, r3]
2401a05a:	2b00      	cmp	r3, #0
2401a05c:	d0f2      	beq.n	2401a044 <lv_textarea_add_char+0xf8>
            uint32_t a = _lv_txt_encoded_next(ext->accepted_chars, &i);
2401a05e:	f8d8 3000 	ldr.w	r3, [r8]
2401a062:	a903      	add	r1, sp, #12
2401a064:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
2401a066:	4287      	cmp	r7, r0
2401a068:	d1f4      	bne.n	2401a054 <lv_textarea_add_char+0x108>
2401a06a:	e79c      	b.n	24019fa6 <lv_textarea_add_char+0x5a>
2401a06c:	2401a6f0 	.word	0x2401a6f0
2401a070:	2401a6e4 	.word	0x2401a6e4

2401a074 <lv_textarea_set_text>:
{
2401a074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
2401a078:	4605      	mov	r5, r0
2401a07a:	460e      	mov	r6, r1
    lv_textarea_ext_t * ext = lv_obj_get_ext_attr(ta);
2401a07c:	f7ef f86d 	bl	2400915a <lv_obj_get_ext_attr>
2401a080:	4604      	mov	r4, r0
    if(lv_textarea_get_accepted_chars(ta) || lv_textarea_get_max_length(ta)) {
2401a082:	4628      	mov	r0, r5
2401a084:	f7ff feb4 	bl	24019df0 <lv_textarea_get_accepted_chars>
2401a088:	2800      	cmp	r0, #0
2401a08a:	d04b      	beq.n	2401a124 <lv_textarea_set_text+0xb0>
        lv_label_set_text(ext->label, "");
2401a08c:	4936      	ldr	r1, [pc, #216]	; (2401a168 <lv_textarea_set_text+0xf4>)
2401a08e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
2401a090:	f7fc fcc2 	bl	24016a18 <lv_label_set_text>
        lv_textarea_set_cursor_pos(ta, LV_TEXTAREA_CURSOR_LAST);
2401a094:	f647 71ff 	movw	r1, #32767	; 0x7fff
2401a098:	4628      	mov	r0, r5
2401a09a:	f7ff fabb 	bl	24019614 <lv_textarea_set_cursor_pos>
        if(ext->pwd_mode != 0) {
2401a09e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
2401a0a2:	f013 0f01 	tst.w	r3, #1
2401a0a6:	f04f 0300 	mov.w	r3, #0
2401a0aa:	d14a      	bne.n	2401a142 <lv_textarea_set_text+0xce>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
2401a0ac:	4f2f      	ldr	r7, [pc, #188]	; (2401a16c <lv_textarea_set_text+0xf8>)
            lv_textarea_add_char(ta, _lv_txt_unicode_to_encoded(c));
2401a0ae:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2401a170 <lv_textarea_set_text+0xfc>
        uint32_t i = 0;
2401a0b2:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
2401a0b4:	9b01      	ldr	r3, [sp, #4]
2401a0b6:	5cf3      	ldrb	r3, [r6, r3]
2401a0b8:	2b00      	cmp	r3, #0
2401a0ba:	d145      	bne.n	2401a148 <lv_textarea_set_text+0xd4>
    if(ext->placeholder_txt) {
2401a0bc:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
2401a0c0:	b133      	cbz	r3, 2401a0d0 <lv_textarea_set_text+0x5c>
        const char * txt_act = lv_label_get_text(ext->label);
2401a0c2:	f7fb fff9 	bl	240160b8 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(ta);
2401a0c6:	7803      	ldrb	r3, [r0, #0]
2401a0c8:	b913      	cbnz	r3, 2401a0d0 <lv_textarea_set_text+0x5c>
2401a0ca:	4628      	mov	r0, r5
2401a0cc:	f7ed ff8a 	bl	24007fe4 <lv_obj_invalidate>
    if(lv_obj_get_width(ext->label) == 0) {
2401a0d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
2401a0d2:	f7ee fa9c 	bl	2400860e <lv_obj_get_width>
2401a0d6:	b950      	cbnz	r0, 2401a0ee <lv_textarea_set_text+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
2401a0d8:	2103      	movs	r1, #3
2401a0da:	2230      	movs	r2, #48	; 0x30
2401a0dc:	4628      	mov	r0, r5
2401a0de:	f7ee fb53 	bl	24008788 <_lv_obj_get_style_int>
        lv_obj_set_width(ext->label, border_width == 0 ? 1 : border_width);
2401a0e2:	1e01      	subs	r1, r0, #0
2401a0e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
2401a0e6:	bf08      	it	eq
2401a0e8:	2101      	moveq	r1, #1
2401a0ea:	f7ee f883 	bl	240081f4 <lv_obj_set_width>
    if(ext->pwd_mode != 0) {
2401a0ee:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
2401a0f2:	07db      	lsls	r3, r3, #31
2401a0f4:	d50e      	bpl.n	2401a114 <lv_textarea_set_text+0xa0>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
2401a0f6:	4630      	mov	r0, r6
2401a0f8:	f000 fa5a 	bl	2401a5b0 <__strlen_veneer>
2401a0fc:	1c41      	adds	r1, r0, #1
2401a0fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2401a100:	f7f5 fdc4 	bl	2400fc8c <lv_mem_realloc>
2401a104:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(ext->pwd_tmp == NULL) return;
2401a106:	b358      	cbz	r0, 2401a160 <lv_textarea_set_text+0xec>
        strcpy(ext->pwd_tmp, txt);
2401a108:	4631      	mov	r1, r6
2401a10a:	f000 fa2f 	bl	2401a56c <strcpy>
        pwd_char_hider(ta);
2401a10e:	4628      	mov	r0, r5
2401a110:	f7ff f8e6 	bl	240192e0 <pwd_char_hider>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
2401a114:	2200      	movs	r2, #0
2401a116:	2110      	movs	r1, #16
2401a118:	4628      	mov	r0, r5
}
2401a11a:	b002      	add	sp, #8
2401a11c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
2401a120:	f7ed be5a 	b.w	24007dd8 <lv_event_send>
    if(lv_textarea_get_accepted_chars(ta) || lv_textarea_get_max_length(ta)) {
2401a124:	4628      	mov	r0, r5
2401a126:	f7ff fe68 	bl	24019dfa <lv_textarea_get_max_length>
2401a12a:	2800      	cmp	r0, #0
2401a12c:	d1ae      	bne.n	2401a08c <lv_textarea_set_text+0x18>
        lv_label_set_text(ext->label, txt);
2401a12e:	4631      	mov	r1, r6
2401a130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
2401a132:	f7fc fc71 	bl	24016a18 <lv_label_set_text>
        lv_textarea_set_cursor_pos(ta, LV_TEXTAREA_CURSOR_LAST);
2401a136:	f647 71ff 	movw	r1, #32767	; 0x7fff
2401a13a:	4628      	mov	r0, r5
2401a13c:	f7ff fa6a 	bl	24019614 <lv_textarea_set_cursor_pos>
2401a140:	e7bc      	b.n	2401a0bc <lv_textarea_set_text+0x48>
            ext->pwd_tmp[0] = '\0'; /*Clear the password too*/
2401a142:	6be2      	ldr	r2, [r4, #60]	; 0x3c
2401a144:	7013      	strb	r3, [r2, #0]
2401a146:	e7b1      	b.n	2401a0ac <lv_textarea_set_text+0x38>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
2401a148:	a901      	add	r1, sp, #4
2401a14a:	683b      	ldr	r3, [r7, #0]
2401a14c:	4630      	mov	r0, r6
2401a14e:	4798      	blx	r3
            lv_textarea_add_char(ta, _lv_txt_unicode_to_encoded(c));
2401a150:	f8d8 3000 	ldr.w	r3, [r8]
2401a154:	4798      	blx	r3
2401a156:	4601      	mov	r1, r0
2401a158:	4628      	mov	r0, r5
2401a15a:	f7ff fef7 	bl	24019f4c <lv_textarea_add_char>
2401a15e:	e7a9      	b.n	2401a0b4 <lv_textarea_set_text+0x40>
}
2401a160:	b002      	add	sp, #8
2401a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2401a166:	bf00      	nop
2401a168:	900ff2a3 	.word	0x900ff2a3
2401a16c:	2401a6e4 	.word	0x2401a6e4
2401a170:	2401a6f4 	.word	0x2401a6f4

2401a174 <lv_textarea_cursor_left>:
{
2401a174:	b510      	push	{r4, lr}
2401a176:	4604      	mov	r4, r0
    uint32_t cp = lv_textarea_get_cursor_pos(ta);
2401a178:	f7ff f944 	bl	24019404 <lv_textarea_get_cursor_pos>
    if(cp > 0) {
2401a17c:	b128      	cbz	r0, 2401a18a <lv_textarea_cursor_left+0x16>
        lv_textarea_set_cursor_pos(ta, cp);
2401a17e:	1e41      	subs	r1, r0, #1
2401a180:	4620      	mov	r0, r4
}
2401a182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_textarea_set_cursor_pos(ta, cp);
2401a186:	f7ff ba45 	b.w	24019614 <lv_textarea_set_cursor_pos>
}
2401a18a:	bd10      	pop	{r4, pc}

2401a18c <setScreenSize>:
static uint16_t displayHeight;
static bool pressed = false;

void setScreenSize(uint16_t x, uint16_t y)
{
	displayWidth = x;
2401a18c:	4b02      	ldr	r3, [pc, #8]	; (2401a198 <setScreenSize+0xc>)
2401a18e:	8018      	strh	r0, [r3, #0]
	displayHeight = y;
2401a190:	4b02      	ldr	r3, [pc, #8]	; (2401a19c <setScreenSize+0x10>)
2401a192:	8019      	strh	r1, [r3, #0]
}
2401a194:	4770      	bx	lr
2401a196:	bf00      	nop
2401a198:	24035d4a 	.word	0x24035d4a
2401a19c:	24035d48 	.word	0x24035d48

2401a1a0 <setRotation>:

void setRotation(uint8_t n)
{
	rotation = n % 4;
2401a1a0:	f000 0003 	and.w	r0, r0, #3
2401a1a4:	4b01      	ldr	r3, [pc, #4]	; (2401a1ac <setRotation+0xc>)
2401a1a6:	7018      	strb	r0, [r3, #0]
}
2401a1a8:	4770      	bx	lr
2401a1aa:	bf00      	nop
2401a1ac:	2401a718 	.word	0x2401a718

2401a1b0 <setOffset>:

void setOffset(uint8_t xOffset, uint8_t yOffset)
{
	offset.x = xOffset;
2401a1b0:	4b01      	ldr	r3, [pc, #4]	; (2401a1b8 <setOffset+0x8>)
2401a1b2:	8018      	strh	r0, [r3, #0]
	offset.y = yOffset;
2401a1b4:	8059      	strh	r1, [r3, #2]
}
2401a1b6:	4770      	bx	lr
2401a1b8:	24035d4c 	.word	0x24035d4c

2401a1bc <setThreshold>:

void setThreshold(uint16_t th)
{
	threshold = th;
2401a1bc:	4b01      	ldr	r3, [pc, #4]	; (2401a1c4 <setThreshold+0x8>)
2401a1be:	8018      	strh	r0, [r3, #0]
}
2401a1c0:	4770      	bx	lr
2401a1c2:	bf00      	nop
2401a1c4:	24035d5a 	.word	0x24035d5a

2401a1c8 <getTouchFlag>:
}

bool getTouchFlag()
{
	return pressed;
}
2401a1c8:	4b01      	ldr	r3, [pc, #4]	; (2401a1d0 <getTouchFlag+0x8>)
2401a1ca:	7818      	ldrb	r0, [r3, #0]
2401a1cc:	4770      	bx	lr
2401a1ce:	bf00      	nop
2401a1d0:	24035d58 	.word	0x24035d58

2401a1d4 <transferReceive>:
{
    HAL_SPI_Transmit(&hspi2, &dataSend, 1, 30);
}

uint16_t transferReceive(uint8_t dataSend)
{
2401a1d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t dataReceive[3];
	uint16_t result;

    HAL_SPI_TransmitReceive(&hspi2, &dataSend, dataReceive, 3, 30);
2401a1d6:	231e      	movs	r3, #30
{
2401a1d8:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(&hspi2, &dataSend, dataReceive, 3, 30);
2401a1dc:	aa05      	add	r2, sp, #20
2401a1de:	f10d 010f 	add.w	r1, sp, #15
2401a1e2:	9300      	str	r3, [sp, #0]
2401a1e4:	2303      	movs	r3, #3
2401a1e6:	4805      	ldr	r0, [pc, #20]	; (2401a1fc <transferReceive+0x28>)
2401a1e8:	f7ea ff06 	bl	24004ff8 <HAL_SPI_TransmitReceive>

	result = ((uint16_t)dataReceive[1] << 8) | (uint16_t)dataReceive[2];
2401a1ec:	f8bd 0015 	ldrh.w	r0, [sp, #21]
2401a1f0:	ba40      	rev16	r0, r0
	return result;
}
2401a1f2:	b280      	uxth	r0, r0
2401a1f4:	b007      	add	sp, #28
2401a1f6:	f85d fb04 	ldr.w	pc, [sp], #4
2401a1fa:	bf00      	nop
2401a1fc:	2402d850 	.word	0x2402d850

2401a200 <isTouched>:
{
2401a200:	b538      	push	{r3, r4, r5, lr}
	pressed = false;
2401a202:	4d0c      	ldr	r5, [pc, #48]	; (2401a234 <isTouched+0x34>)
2401a204:	2300      	movs	r3, #0
	Z1 = transferReceive(0xB1) >> 3;
2401a206:	20b1      	movs	r0, #177	; 0xb1
	pressed = false;
2401a208:	702b      	strb	r3, [r5, #0]
	Z1 = transferReceive(0xB1) >> 3;
2401a20a:	f7ff ffe3 	bl	2401a1d4 <transferReceive>
2401a20e:	4604      	mov	r4, r0
	Z2 = transferReceive(0xC1) >> 3;
2401a210:	20c1      	movs	r0, #193	; 0xc1
2401a212:	f7ff ffdf 	bl	2401a1d4 <transferReceive>
	if (Z1 - Z2 + 4095 > threshold) {pressed = true;}
2401a216:	f3c0 00cf 	ubfx	r0, r0, #3, #16
2401a21a:	f3c4 04cf 	ubfx	r4, r4, #3, #16
2401a21e:	4b06      	ldr	r3, [pc, #24]	; (2401a238 <isTouched+0x38>)
2401a220:	1a24      	subs	r4, r4, r0
2401a222:	881b      	ldrh	r3, [r3, #0]
2401a224:	f604 74fe 	addw	r4, r4, #4094	; 0xffe
2401a228:	429c      	cmp	r4, r3
2401a22a:	bfa4      	itt	ge
2401a22c:	2301      	movge	r3, #1
2401a22e:	702b      	strbge	r3, [r5, #0]
}
2401a230:	7828      	ldrb	r0, [r5, #0]
2401a232:	bd38      	pop	{r3, r4, r5, pc}
2401a234:	24035d58 	.word	0x24035d58
2401a238:	24035d5a 	.word	0x24035d5a

2401a23c <getPoint>:
{
2401a23c:	b570      	push	{r4, r5, r6, lr}
	data[0] = transferReceive(0xD1/* Y */) >> 3;
2401a23e:	20d1      	movs	r0, #209	; 0xd1
2401a240:	f7ff ffc8 	bl	2401a1d4 <transferReceive>
2401a244:	4604      	mov	r4, r0
	data[1] = transferReceive(0x91/* X */) >> 3;
2401a246:	2091      	movs	r0, #145	; 0x91
2401a248:	f7ff ffc4 	bl	2401a1d4 <transferReceive>
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a24c:	4b26      	ldr	r3, [pc, #152]	; (2401a2e8 <getPoint+0xac>)
2401a24e:	4a27      	ldr	r2, [pc, #156]	; (2401a2ec <getPoint+0xb0>)
2401a250:	f3c4 04cb 	ubfx	r4, r4, #3, #12
2401a254:	881d      	ldrh	r5, [r3, #0]
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a256:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a25a:	8813      	ldrh	r3, [r2, #0]
2401a25c:	ee07 5a10 	vmov	s14, r5
2401a260:	eddf 6a23 	vldr	s13, [pc, #140]	; 2401a2f0 <getPoint+0xb4>
2401a264:	1ae4      	subs	r4, r4, r3
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a266:	8852      	ldrh	r2, [r2, #2]
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a268:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a26c:	4921      	ldr	r1, [pc, #132]	; (2401a2f4 <getPoint+0xb8>)
2401a26e:	ee07 4a90 	vmov	s15, r4
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a272:	1a82      	subs	r2, r0, r2
   switch (rotation) {
2401a274:	4820      	ldr	r0, [pc, #128]	; (2401a2f8 <getPoint+0xbc>)
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   switch (rotation) {
2401a27a:	7800      	ldrb	r0, [r0, #0]
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a27c:	ee67 7a87 	vmul.f32	s15, s15, s14
2401a280:	ee87 7aa6 	vdiv.f32	s14, s15, s13
2401a284:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a288:	ee07 2a10 	vmov	s14, r2
2401a28c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a290:	ee17 3a90 	vmov	r3, s15
2401a294:	b29c      	uxth	r4, r3
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a296:	4b19      	ldr	r3, [pc, #100]	; (2401a2fc <getPoint+0xc0>)
2401a298:	881b      	ldrh	r3, [r3, #0]
	point.x = (float)(point.x-offset.x)*displayWidth/3600;
2401a29a:	800c      	strh	r4, [r1, #0]
	point.y = (float)(point.y-offset.y)*displayHeight/3600;
2401a29c:	ee07 3a90 	vmov	s15, r3
2401a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a2a4:	ee27 7a27 	vmul.f32	s14, s14, s15
2401a2a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401a2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401a2b0:	ee17 2a90 	vmov	r2, s15
2401a2b4:	b292      	uxth	r2, r2
2401a2b6:	804a      	strh	r2, [r1, #2]
   switch (rotation) {
2401a2b8:	2804      	cmp	r0, #4
2401a2ba:	d810      	bhi.n	2401a2de <getPoint+0xa2>
2401a2bc:	e8df f000 	tbb	[pc, r0]
2401a2c0:	11080b03 	.word	0x11080b03
2401a2c4:	0c          	.byte	0x0c
2401a2c5:	00          	.byte	0x00
			 point.x = displayHeight - point.y;
2401a2c6:	1a9b      	subs	r3, r3, r2
2401a2c8:	b29b      	uxth	r3, r3
2401a2ca:	800b      	strh	r3, [r1, #0]
			point.y = displayHeight - point.y;
2401a2cc:	804b      	strh	r3, [r1, #2]
}
2401a2ce:	e002      	b.n	2401a2d6 <getPoint+0x9a>
			point.x = point.y;
2401a2d0:	800a      	strh	r2, [r1, #0]
			point.y = displayWidth - point.x;
2401a2d2:	1aaa      	subs	r2, r5, r2
2401a2d4:	804a      	strh	r2, [r1, #2]
}
2401a2d6:	bd70      	pop	{r4, r5, r6, pc}
			point.x = displayWidth - point.x;
2401a2d8:	1b2c      	subs	r4, r5, r4
2401a2da:	800c      	strh	r4, [r1, #0]
			break;
2401a2dc:	e7fb      	b.n	2401a2d6 <getPoint+0x9a>
			point.x = displayWidth - point.x;
2401a2de:	1b2d      	subs	r5, r5, r4
2401a2e0:	800d      	strh	r5, [r1, #0]
			point.y = displayHeight - point.y;
2401a2e2:	1a9b      	subs	r3, r3, r2
2401a2e4:	e7f2      	b.n	2401a2cc <getPoint+0x90>
2401a2e6:	bf00      	nop
2401a2e8:	24035d4a 	.word	0x24035d4a
2401a2ec:	24035d4c 	.word	0x24035d4c
2401a2f0:	45610000 	.word	0x45610000
2401a2f4:	24035d52 	.word	0x24035d52
2401a2f8:	2401a718 	.word	0x2401a718
2401a2fc:	24035d48 	.word	0x24035d48

2401a300 <touchUpdate>:
{
2401a300:	b538      	push	{r3, r4, r5, lr}
2401a302:	4604      	mov	r4, r0
2401a304:	4d07      	ldr	r5, [pc, #28]	; (2401a324 <touchUpdate+0x24>)
	if (isTouched())
2401a306:	f7ff ff7b 	bl	2401a200 <isTouched>
2401a30a:	b138      	cbz	r0, 2401a31c <touchUpdate+0x1c>
	   	   getPoint();
2401a30c:	f7ff ff96 	bl	2401a23c <getPoint>
	return point;
2401a310:	682b      	ldr	r3, [r5, #0]
}
2401a312:	4620      	mov	r0, r4
	return point;
2401a314:	6023      	str	r3, [r4, #0]
2401a316:	88ab      	ldrh	r3, [r5, #4]
2401a318:	80a3      	strh	r3, [r4, #4]
}
2401a31a:	bd38      	pop	{r3, r4, r5, pc}
		   point.x = 0;
2401a31c:	8028      	strh	r0, [r5, #0]
		   point.y = 0;
2401a31e:	8068      	strh	r0, [r5, #2]
2401a320:	e7f6      	b.n	2401a310 <touchUpdate+0x10>
2401a322:	bf00      	nop
2401a324:	24035d52 	.word	0x24035d52

2401a328 <malloc>:
2401a328:	4b02      	ldr	r3, [pc, #8]	; (2401a334 <malloc+0xc>)
2401a32a:	4601      	mov	r1, r0
2401a32c:	6818      	ldr	r0, [r3, #0]
2401a32e:	f000 b823 	b.w	2401a378 <_malloc_r>
2401a332:	bf00      	nop
2401a334:	2401a768 	.word	0x2401a768

2401a338 <sbrk_aligned>:
2401a338:	b570      	push	{r4, r5, r6, lr}
2401a33a:	4e0e      	ldr	r6, [pc, #56]	; (2401a374 <sbrk_aligned+0x3c>)
2401a33c:	460c      	mov	r4, r1
2401a33e:	6831      	ldr	r1, [r6, #0]
2401a340:	4605      	mov	r5, r0
2401a342:	b911      	cbnz	r1, 2401a34a <sbrk_aligned+0x12>
2401a344:	f000 f8d6 	bl	2401a4f4 <_sbrk_r>
2401a348:	6030      	str	r0, [r6, #0]
2401a34a:	4621      	mov	r1, r4
2401a34c:	4628      	mov	r0, r5
2401a34e:	f000 f8d1 	bl	2401a4f4 <_sbrk_r>
2401a352:	1c43      	adds	r3, r0, #1
2401a354:	d00a      	beq.n	2401a36c <sbrk_aligned+0x34>
2401a356:	1cc4      	adds	r4, r0, #3
2401a358:	f024 0403 	bic.w	r4, r4, #3
2401a35c:	42a0      	cmp	r0, r4
2401a35e:	d007      	beq.n	2401a370 <sbrk_aligned+0x38>
2401a360:	1a21      	subs	r1, r4, r0
2401a362:	4628      	mov	r0, r5
2401a364:	f000 f8c6 	bl	2401a4f4 <_sbrk_r>
2401a368:	3001      	adds	r0, #1
2401a36a:	d101      	bne.n	2401a370 <sbrk_aligned+0x38>
2401a36c:	f04f 34ff 	mov.w	r4, #4294967295
2401a370:	4620      	mov	r0, r4
2401a372:	bd70      	pop	{r4, r5, r6, pc}
2401a374:	24035d60 	.word	0x24035d60

2401a378 <_malloc_r>:
2401a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2401a37c:	1ccd      	adds	r5, r1, #3
2401a37e:	f025 0503 	bic.w	r5, r5, #3
2401a382:	3508      	adds	r5, #8
2401a384:	2d0c      	cmp	r5, #12
2401a386:	bf38      	it	cc
2401a388:	250c      	movcc	r5, #12
2401a38a:	2d00      	cmp	r5, #0
2401a38c:	4607      	mov	r7, r0
2401a38e:	db01      	blt.n	2401a394 <_malloc_r+0x1c>
2401a390:	42a9      	cmp	r1, r5
2401a392:	d905      	bls.n	2401a3a0 <_malloc_r+0x28>
2401a394:	230c      	movs	r3, #12
2401a396:	603b      	str	r3, [r7, #0]
2401a398:	2600      	movs	r6, #0
2401a39a:	4630      	mov	r0, r6
2401a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2401a3a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2401a474 <_malloc_r+0xfc>
2401a3a4:	f000 f868 	bl	2401a478 <__malloc_lock>
2401a3a8:	f8d8 3000 	ldr.w	r3, [r8]
2401a3ac:	461c      	mov	r4, r3
2401a3ae:	bb5c      	cbnz	r4, 2401a408 <_malloc_r+0x90>
2401a3b0:	4629      	mov	r1, r5
2401a3b2:	4638      	mov	r0, r7
2401a3b4:	f7ff ffc0 	bl	2401a338 <sbrk_aligned>
2401a3b8:	1c43      	adds	r3, r0, #1
2401a3ba:	4604      	mov	r4, r0
2401a3bc:	d155      	bne.n	2401a46a <_malloc_r+0xf2>
2401a3be:	f8d8 4000 	ldr.w	r4, [r8]
2401a3c2:	4626      	mov	r6, r4
2401a3c4:	2e00      	cmp	r6, #0
2401a3c6:	d145      	bne.n	2401a454 <_malloc_r+0xdc>
2401a3c8:	2c00      	cmp	r4, #0
2401a3ca:	d048      	beq.n	2401a45e <_malloc_r+0xe6>
2401a3cc:	6823      	ldr	r3, [r4, #0]
2401a3ce:	4631      	mov	r1, r6
2401a3d0:	4638      	mov	r0, r7
2401a3d2:	eb04 0903 	add.w	r9, r4, r3
2401a3d6:	f000 f88d 	bl	2401a4f4 <_sbrk_r>
2401a3da:	4581      	cmp	r9, r0
2401a3dc:	d13f      	bne.n	2401a45e <_malloc_r+0xe6>
2401a3de:	6821      	ldr	r1, [r4, #0]
2401a3e0:	1a6d      	subs	r5, r5, r1
2401a3e2:	4629      	mov	r1, r5
2401a3e4:	4638      	mov	r0, r7
2401a3e6:	f7ff ffa7 	bl	2401a338 <sbrk_aligned>
2401a3ea:	3001      	adds	r0, #1
2401a3ec:	d037      	beq.n	2401a45e <_malloc_r+0xe6>
2401a3ee:	6823      	ldr	r3, [r4, #0]
2401a3f0:	442b      	add	r3, r5
2401a3f2:	6023      	str	r3, [r4, #0]
2401a3f4:	f8d8 3000 	ldr.w	r3, [r8]
2401a3f8:	2b00      	cmp	r3, #0
2401a3fa:	d038      	beq.n	2401a46e <_malloc_r+0xf6>
2401a3fc:	685a      	ldr	r2, [r3, #4]
2401a3fe:	42a2      	cmp	r2, r4
2401a400:	d12b      	bne.n	2401a45a <_malloc_r+0xe2>
2401a402:	2200      	movs	r2, #0
2401a404:	605a      	str	r2, [r3, #4]
2401a406:	e00f      	b.n	2401a428 <_malloc_r+0xb0>
2401a408:	6822      	ldr	r2, [r4, #0]
2401a40a:	1b52      	subs	r2, r2, r5
2401a40c:	d41f      	bmi.n	2401a44e <_malloc_r+0xd6>
2401a40e:	2a0b      	cmp	r2, #11
2401a410:	d917      	bls.n	2401a442 <_malloc_r+0xca>
2401a412:	1961      	adds	r1, r4, r5
2401a414:	42a3      	cmp	r3, r4
2401a416:	6025      	str	r5, [r4, #0]
2401a418:	bf18      	it	ne
2401a41a:	6059      	strne	r1, [r3, #4]
2401a41c:	6863      	ldr	r3, [r4, #4]
2401a41e:	bf08      	it	eq
2401a420:	f8c8 1000 	streq.w	r1, [r8]
2401a424:	5162      	str	r2, [r4, r5]
2401a426:	604b      	str	r3, [r1, #4]
2401a428:	4638      	mov	r0, r7
2401a42a:	f104 060b 	add.w	r6, r4, #11
2401a42e:	f000 f829 	bl	2401a484 <__malloc_unlock>
2401a432:	f026 0607 	bic.w	r6, r6, #7
2401a436:	1d23      	adds	r3, r4, #4
2401a438:	1af2      	subs	r2, r6, r3
2401a43a:	d0ae      	beq.n	2401a39a <_malloc_r+0x22>
2401a43c:	1b9b      	subs	r3, r3, r6
2401a43e:	50a3      	str	r3, [r4, r2]
2401a440:	e7ab      	b.n	2401a39a <_malloc_r+0x22>
2401a442:	42a3      	cmp	r3, r4
2401a444:	6862      	ldr	r2, [r4, #4]
2401a446:	d1dd      	bne.n	2401a404 <_malloc_r+0x8c>
2401a448:	f8c8 2000 	str.w	r2, [r8]
2401a44c:	e7ec      	b.n	2401a428 <_malloc_r+0xb0>
2401a44e:	4623      	mov	r3, r4
2401a450:	6864      	ldr	r4, [r4, #4]
2401a452:	e7ac      	b.n	2401a3ae <_malloc_r+0x36>
2401a454:	4634      	mov	r4, r6
2401a456:	6876      	ldr	r6, [r6, #4]
2401a458:	e7b4      	b.n	2401a3c4 <_malloc_r+0x4c>
2401a45a:	4613      	mov	r3, r2
2401a45c:	e7cc      	b.n	2401a3f8 <_malloc_r+0x80>
2401a45e:	230c      	movs	r3, #12
2401a460:	603b      	str	r3, [r7, #0]
2401a462:	4638      	mov	r0, r7
2401a464:	f000 f80e 	bl	2401a484 <__malloc_unlock>
2401a468:	e797      	b.n	2401a39a <_malloc_r+0x22>
2401a46a:	6025      	str	r5, [r4, #0]
2401a46c:	e7dc      	b.n	2401a428 <_malloc_r+0xb0>
2401a46e:	605b      	str	r3, [r3, #4]
2401a470:	deff      	udf	#255	; 0xff
2401a472:	bf00      	nop
2401a474:	24035d5c 	.word	0x24035d5c

2401a478 <__malloc_lock>:
2401a478:	4801      	ldr	r0, [pc, #4]	; (2401a480 <__malloc_lock+0x8>)
2401a47a:	f000 b875 	b.w	2401a568 <__retarget_lock_acquire_recursive>
2401a47e:	bf00      	nop
2401a480:	24035ea0 	.word	0x24035ea0

2401a484 <__malloc_unlock>:
2401a484:	4801      	ldr	r0, [pc, #4]	; (2401a48c <__malloc_unlock+0x8>)
2401a486:	f000 b870 	b.w	2401a56a <__retarget_lock_release_recursive>
2401a48a:	bf00      	nop
2401a48c:	24035ea0 	.word	0x24035ea0

2401a490 <memcmp>:
2401a490:	b510      	push	{r4, lr}
2401a492:	3901      	subs	r1, #1
2401a494:	4402      	add	r2, r0
2401a496:	4290      	cmp	r0, r2
2401a498:	d101      	bne.n	2401a49e <memcmp+0xe>
2401a49a:	2000      	movs	r0, #0
2401a49c:	e005      	b.n	2401a4aa <memcmp+0x1a>
2401a49e:	7803      	ldrb	r3, [r0, #0]
2401a4a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
2401a4a4:	42a3      	cmp	r3, r4
2401a4a6:	d001      	beq.n	2401a4ac <memcmp+0x1c>
2401a4a8:	1b18      	subs	r0, r3, r4
2401a4aa:	bd10      	pop	{r4, pc}
2401a4ac:	3001      	adds	r0, #1
2401a4ae:	e7f2      	b.n	2401a496 <memcmp+0x6>

2401a4b0 <memmove>:
2401a4b0:	4288      	cmp	r0, r1
2401a4b2:	b510      	push	{r4, lr}
2401a4b4:	eb01 0402 	add.w	r4, r1, r2
2401a4b8:	d902      	bls.n	2401a4c0 <memmove+0x10>
2401a4ba:	4284      	cmp	r4, r0
2401a4bc:	4623      	mov	r3, r4
2401a4be:	d807      	bhi.n	2401a4d0 <memmove+0x20>
2401a4c0:	1e43      	subs	r3, r0, #1
2401a4c2:	42a1      	cmp	r1, r4
2401a4c4:	d008      	beq.n	2401a4d8 <memmove+0x28>
2401a4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
2401a4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
2401a4ce:	e7f8      	b.n	2401a4c2 <memmove+0x12>
2401a4d0:	4402      	add	r2, r0
2401a4d2:	4601      	mov	r1, r0
2401a4d4:	428a      	cmp	r2, r1
2401a4d6:	d100      	bne.n	2401a4da <memmove+0x2a>
2401a4d8:	bd10      	pop	{r4, pc}
2401a4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2401a4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
2401a4e2:	e7f7      	b.n	2401a4d4 <memmove+0x24>

2401a4e4 <memset>:
2401a4e4:	4402      	add	r2, r0
2401a4e6:	4603      	mov	r3, r0
2401a4e8:	4293      	cmp	r3, r2
2401a4ea:	d100      	bne.n	2401a4ee <memset+0xa>
2401a4ec:	4770      	bx	lr
2401a4ee:	f803 1b01 	strb.w	r1, [r3], #1
2401a4f2:	e7f9      	b.n	2401a4e8 <memset+0x4>

2401a4f4 <_sbrk_r>:
2401a4f4:	b538      	push	{r3, r4, r5, lr}
2401a4f6:	4d06      	ldr	r5, [pc, #24]	; (2401a510 <_sbrk_r+0x1c>)
2401a4f8:	2300      	movs	r3, #0
2401a4fa:	4604      	mov	r4, r0
2401a4fc:	4608      	mov	r0, r1
2401a4fe:	602b      	str	r3, [r5, #0]
2401a500:	f7e6 fc7c 	bl	24000dfc <_sbrk>
2401a504:	1c43      	adds	r3, r0, #1
2401a506:	d102      	bne.n	2401a50e <_sbrk_r+0x1a>
2401a508:	682b      	ldr	r3, [r5, #0]
2401a50a:	b103      	cbz	r3, 2401a50e <_sbrk_r+0x1a>
2401a50c:	6023      	str	r3, [r4, #0]
2401a50e:	bd38      	pop	{r3, r4, r5, pc}
2401a510:	24035e9c 	.word	0x24035e9c

2401a514 <__errno>:
2401a514:	4b01      	ldr	r3, [pc, #4]	; (2401a51c <__errno+0x8>)
2401a516:	6818      	ldr	r0, [r3, #0]
2401a518:	4770      	bx	lr
2401a51a:	bf00      	nop
2401a51c:	2401a768 	.word	0x2401a768

2401a520 <__libc_init_array>:
2401a520:	b570      	push	{r4, r5, r6, lr}
2401a522:	4d0d      	ldr	r5, [pc, #52]	; (2401a558 <__libc_init_array+0x38>)
2401a524:	4c0d      	ldr	r4, [pc, #52]	; (2401a55c <__libc_init_array+0x3c>)
2401a526:	1b64      	subs	r4, r4, r5
2401a528:	10a4      	asrs	r4, r4, #2
2401a52a:	2600      	movs	r6, #0
2401a52c:	42a6      	cmp	r6, r4
2401a52e:	d109      	bne.n	2401a544 <__libc_init_array+0x24>
2401a530:	4d0b      	ldr	r5, [pc, #44]	; (2401a560 <__libc_init_array+0x40>)
2401a532:	4c0c      	ldr	r4, [pc, #48]	; (2401a564 <__libc_init_array+0x44>)
2401a534:	f000 f830 	bl	2401a598 <___init_veneer>
2401a538:	1b64      	subs	r4, r4, r5
2401a53a:	10a4      	asrs	r4, r4, #2
2401a53c:	2600      	movs	r6, #0
2401a53e:	42a6      	cmp	r6, r4
2401a540:	d105      	bne.n	2401a54e <__libc_init_array+0x2e>
2401a542:	bd70      	pop	{r4, r5, r6, pc}
2401a544:	f855 3b04 	ldr.w	r3, [r5], #4
2401a548:	4798      	blx	r3
2401a54a:	3601      	adds	r6, #1
2401a54c:	e7ee      	b.n	2401a52c <__libc_init_array+0xc>
2401a54e:	f855 3b04 	ldr.w	r3, [r5], #4
2401a552:	4798      	blx	r3
2401a554:	3601      	adds	r6, #1
2401a556:	e7f2      	b.n	2401a53e <__libc_init_array+0x1e>
2401a558:	900ff334 	.word	0x900ff334
2401a55c:	900ff334 	.word	0x900ff334
2401a560:	900ff334 	.word	0x900ff334
2401a564:	900ff338 	.word	0x900ff338

2401a568 <__retarget_lock_acquire_recursive>:
2401a568:	4770      	bx	lr

2401a56a <__retarget_lock_release_recursive>:
2401a56a:	4770      	bx	lr

2401a56c <strcpy>:
2401a56c:	4603      	mov	r3, r0
2401a56e:	f811 2b01 	ldrb.w	r2, [r1], #1
2401a572:	f803 2b01 	strb.w	r2, [r3], #1
2401a576:	2a00      	cmp	r2, #0
2401a578:	d1f9      	bne.n	2401a56e <strcpy+0x2>
2401a57a:	4770      	bx	lr

2401a57c <memcpy>:
2401a57c:	440a      	add	r2, r1
2401a57e:	4291      	cmp	r1, r2
2401a580:	f100 33ff 	add.w	r3, r0, #4294967295
2401a584:	d100      	bne.n	2401a588 <memcpy+0xc>
2401a586:	4770      	bx	lr
2401a588:	b510      	push	{r4, lr}
2401a58a:	f811 4b01 	ldrb.w	r4, [r1], #1
2401a58e:	f803 4f01 	strb.w	r4, [r3, #1]!
2401a592:	4291      	cmp	r1, r2
2401a594:	d1f9      	bne.n	2401a58a <memcpy+0xe>
2401a596:	bd10      	pop	{r4, pc}

2401a598 <___init_veneer>:
2401a598:	f85f f000 	ldr.w	pc, [pc]	; 2401a59c <___init_veneer+0x4>
2401a59c:	900006a1 	.word	0x900006a1

2401a5a0 <__strcmp_veneer>:
2401a5a0:	f85f f000 	ldr.w	pc, [pc]	; 2401a5a4 <__strcmp_veneer+0x4>
2401a5a4:	90000381 	.word	0x90000381

2401a5a8 <____aeabi_uldivmod_veneer>:
2401a5a8:	f85f f000 	ldr.w	pc, [pc]	; 2401a5ac <____aeabi_uldivmod_veneer+0x4>
2401a5ac:	900003a5 	.word	0x900003a5

2401a5b0 <__strlen_veneer>:
2401a5b0:	f85f f000 	ldr.w	pc, [pc]	; 2401a5b4 <__strlen_veneer+0x4>
2401a5b4:	90000395 	.word	0x90000395

Disassembly of section .data:

2401a5b8 <SystemCoreClock>:
2401a5b8:	03d09000                                ....

2401a5bc <SystemD2Clock>:
2401a5bc:	03d09000                                ....

2401a5c0 <uwTickFreq>:
2401a5c0:	00000001                                ....

2401a5c4 <uwTickPrio>:
2401a5c4:	00000010                                ....

2401a5c8 <font_dsc>:
2401a5c8:	900d6d24 900d684c 900d6824 900d9a6c     $m..Lh..$h..l...
2401a5d8:	50020010 00000000 00000000 00000000     ...P............

2401a5e8 <lv_font_montserrat_14>:
2401a5e8:	2400ebf5 2400ebc1 00030010 0001ff00     ...$...$........
2401a5f8:	2401a5c8                                ...$

2401a5fc <font_dsc>:
2401a5fc:	900da128 900d9c50 900d9c28 900dfb50     (...P...(...P...
2401a60c:	50020010 00000000 00000000 00000000     ...P............

2401a61c <lv_font_montserrat_22>:
2401a61c:	2400ebf5 2400ebc1 00040018 0001fe00     ...$...$........
2401a62c:	2401a5fc                                ...$

2401a630 <font_dsc>:
2401a630:	900e020c 900dfd34 900dfd0c 900e6890     ....4........h..
2401a640:	50020010 00000000 00000000 00000000     ...P............

2401a650 <lv_font_montserrat_24>:
2401a650:	2400ebf5 2400ebc1 0005001b 0001fe00     ...$...$........
2401a660:	2401a630                                0..$

2401a664 <font_dsc>:
2401a664:	900e6f4c 900e6a74 900e6a4c 900ee5c8     Lo..tj..Lj......
2401a674:	50020010 00000000 00000000 00000000     ...P............

2401a684 <lv_font_montserrat_26>:
2401a684:	2400ebf5 2400ebc1 0005001d 0001fe00     ...$...$........
2401a694:	2401a664                                d..$

2401a698 <font_dsc>:
2401a698:	900eec84 900ee7ac 900ee784 900ff0cc     ................
2401a6a8:	50020010 00000000 00000000 00000000     ...P............

2401a6b8 <lv_font_montserrat_40>:
2401a6b8:	2400ebf5 2400ebc1 0008002c 0002fd00     ...$...$,.......
2401a6c8:	2401a698                                ...$

2401a6cc <mem_buf_small>:
2401a6cc:	2402dc6c 00000010 2402dc7c 00000010     l..$....|..$....

2401a6dc <_lv_txt_encoded_get_byte_id>:
2401a6dc:	240108f1                                ...$

2401a6e0 <_lv_txt_encoded_get_char_id>:
2401a6e0:	24010929                                )..$

2401a6e4 <_lv_txt_encoded_next>:
2401a6e4:	240107d9                                ...$

2401a6e8 <_lv_txt_encoded_prev>:
2401a6e8:	240108a9                                ...$

2401a6ec <_lv_txt_encoded_size>:
2401a6ec:	240107a3                                ...$

2401a6f0 <_lv_txt_get_encoded_length>:
2401a6f0:	24010951                                Q..$

2401a6f4 <_lv_txt_unicode_to_encoded>:
2401a6f4:	24010979                                y..$

2401a6f8 <lv_btnmatrix_def_map>:
2401a6f8:	900ff2b1 900ff2b6 900ff2bb 900ff2a2     ................
2401a708:	900ff2c0 900ff2c5 900ff2a3              ............

2401a714 <tab_def>:
2401a714:	900ff2a3                                ....

2401a718 <rotation>:
2401a718:	00000001                                ....

2401a71c <_impure_data>:
2401a71c:	00000000 24035d64 24035dcc 24035e34     ....d].$.].$4^.$
	...

2401a768 <_impure_ptr>:
2401a768:	2401a71c                                ...$

2401a76c <lv_task_handler>:
{
2401a76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
2401a770:	4e4f      	ldr	r6, [pc, #316]	; (2401a8b0 <lv_task_handler+0x144>)
2401a772:	2001      	movs	r0, #1
2401a774:	7834      	ldrb	r4, [r6, #0]
2401a776:	b924      	cbnz	r4, 2401a782 <lv_task_handler+0x16>
    if(lv_task_run == false) {
2401a778:	4b4e      	ldr	r3, [pc, #312]	; (2401a8b4 <lv_task_handler+0x148>)
    already_running = true;
2401a77a:	7030      	strb	r0, [r6, #0]
    if(lv_task_run == false) {
2401a77c:	781b      	ldrb	r3, [r3, #0]
2401a77e:	b91b      	cbnz	r3, 2401a788 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
2401a780:	7033      	strb	r3, [r6, #0]
}
2401a782:	b003      	add	sp, #12
2401a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
2401a788:	f8df 9148 	ldr.w	r9, [pc, #328]	; 2401a8d4 <lv_task_handler+0x168>
        task_deleted             = false;
2401a78c:	46a3      	mov	fp, r4
2401a78e:	4f4a      	ldr	r7, [pc, #296]	; (2401a8b8 <lv_task_handler+0x14c>)
    handler_start = lv_tick_get();
2401a790:	f7f4 fc84 	bl	2400f09c <lv_tick_get>
2401a794:	f8c9 0000 	str.w	r0, [r9]
        task_created             = false;
2401a798:	f8df 813c 	ldr.w	r8, [pc, #316]	; 2401a8d8 <lv_task_handler+0x16c>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a79c:	4d47      	ldr	r5, [pc, #284]	; (2401a8bc <lv_task_handler+0x150>)
            if(task_list_changed) {
2401a79e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 2401a8dc <lv_task_handler+0x170>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a7a2:	4847      	ldr	r0, [pc, #284]	; (2401a8c0 <lv_task_handler+0x154>)
        task_deleted             = false;
2401a7a4:	f887 b000 	strb.w	fp, [r7]
        task_created             = false;
2401a7a8:	f888 b000 	strb.w	fp, [r8]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a7ac:	f7f4 ffa4 	bl	2400f6f8 <_lv_ll_get_head>
2401a7b0:	6028      	str	r0, [r5, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
2401a7b2:	6829      	ldr	r1, [r5, #0]
2401a7b4:	b191      	cbz	r1, 2401a7dc <lv_task_handler+0x70>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
2401a7b6:	4842      	ldr	r0, [pc, #264]	; (2401a8c0 <lv_task_handler+0x154>)
2401a7b8:	f7f4 ffa4 	bl	2400f704 <_lv_ll_get_next>
2401a7bc:	9001      	str	r0, [sp, #4]
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
2401a7be:	6828      	ldr	r0, [r5, #0]
2401a7c0:	7d03      	ldrb	r3, [r0, #20]
2401a7c2:	f013 0207 	ands.w	r2, r3, #7
2401a7c6:	d009      	beq.n	2401a7dc <lv_task_handler+0x70>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
2401a7c8:	42a0      	cmp	r0, r4
2401a7ca:	d04d      	beq.n	2401a868 <lv_task_handler+0xfc>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
2401a7cc:	2a05      	cmp	r2, #5
2401a7ce:	d136      	bne.n	2401a83e <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
2401a7d0:	f7f5 ff72 	bl	240106b8 <lv_task_exec>
            if(task_created || task_deleted) {
2401a7d4:	f898 3000 	ldrb.w	r3, [r8]
2401a7d8:	2b00      	cmp	r3, #0
2401a7da:	d05e      	beq.n	2401a89a <lv_task_handler+0x12e>
    busy_time += lv_tick_elaps(handler_start);
2401a7dc:	4d39      	ldr	r5, [pc, #228]	; (2401a8c4 <lv_task_handler+0x158>)
2401a7de:	f8d9 0000 	ldr.w	r0, [r9]
2401a7e2:	f7f4 fc69 	bl	2400f0b8 <lv_tick_elaps>
2401a7e6:	682b      	ldr	r3, [r5, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
2401a7e8:	4c37      	ldr	r4, [pc, #220]	; (2401a8c8 <lv_task_handler+0x15c>)
    busy_time += lv_tick_elaps(handler_start);
2401a7ea:	4418      	add	r0, r3
2401a7ec:	6028      	str	r0, [r5, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
2401a7ee:	6820      	ldr	r0, [r4, #0]
2401a7f0:	f7f4 fc62 	bl	2400f0b8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
2401a7f4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
2401a7f8:	d314      	bcc.n	2401a824 <lv_task_handler+0xb8>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
2401a7fa:	682b      	ldr	r3, [r5, #0]
2401a7fc:	2264      	movs	r2, #100	; 0x64
2401a7fe:	4353      	muls	r3, r2
2401a800:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
2401a804:	fbb3 f3f2 	udiv	r3, r3, r2
2401a808:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
2401a80a:	4a30      	ldr	r2, [pc, #192]	; (2401a8cc <lv_task_handler+0x160>)
2401a80c:	2b64      	cmp	r3, #100	; 0x64
2401a80e:	bf96      	itet	ls
2401a810:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
2401a814:	2300      	movhi	r3, #0
2401a816:	b2db      	uxtbls	r3, r3
2401a818:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
2401a81a:	2300      	movs	r3, #0
2401a81c:	602b      	str	r3, [r5, #0]
        idle_period_start = lv_tick_get();
2401a81e:	f7f4 fc3d 	bl	2400f09c <lv_tick_get>
2401a822:	6020      	str	r0, [r4, #0]
    time_till_next = LV_NO_TASK_READY;
2401a824:	f04f 33ff 	mov.w	r3, #4294967295
2401a828:	4d29      	ldr	r5, [pc, #164]	; (2401a8d0 <lv_task_handler+0x164>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a82a:	4825      	ldr	r0, [pc, #148]	; (2401a8c0 <lv_task_handler+0x154>)
    time_till_next = LV_NO_TASK_READY;
2401a82c:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a82e:	f7f4 ff63 	bl	2400f6f8 <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
2401a832:	4f23      	ldr	r7, [pc, #140]	; (2401a8c0 <lv_task_handler+0x154>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
2401a834:	4604      	mov	r4, r0
    while(next) {
2401a836:	b9dc      	cbnz	r4, 2401a870 <lv_task_handler+0x104>
    return time_till_next;
2401a838:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
2401a83a:	7034      	strb	r4, [r6, #0]
    return time_till_next;
2401a83c:	e7a1      	b.n	2401a782 <lv_task_handler+0x16>
            else if(task_interrupter) {
2401a83e:	b134      	cbz	r4, 2401a84e <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
2401a840:	7d22      	ldrb	r2, [r4, #20]
2401a842:	f003 0307 	and.w	r3, r3, #7
2401a846:	f002 0207 	and.w	r2, r2, #7
2401a84a:	4293      	cmp	r3, r2
2401a84c:	d9c2      	bls.n	2401a7d4 <lv_task_handler+0x68>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
2401a84e:	f7f5 ff33 	bl	240106b8 <lv_task_exec>
2401a852:	2800      	cmp	r0, #0
2401a854:	d0be      	beq.n	2401a7d4 <lv_task_handler+0x68>
                    if(!task_created && !task_deleted) {
2401a856:	f898 3000 	ldrb.w	r3, [r8]
2401a85a:	2b00      	cmp	r3, #0
2401a85c:	d1be      	bne.n	2401a7dc <lv_task_handler+0x70>
2401a85e:	783b      	ldrb	r3, [r7, #0]
2401a860:	2b00      	cmp	r3, #0
2401a862:	d1bb      	bne.n	2401a7dc <lv_task_handler+0x70>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
2401a864:	682c      	ldr	r4, [r5, #0]
    } while(!end_flag);
2401a866:	e797      	b.n	2401a798 <lv_task_handler+0x2c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
2401a868:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
2401a86a:	9b01      	ldr	r3, [sp, #4]
2401a86c:	602b      	str	r3, [r5, #0]
2401a86e:	e7a0      	b.n	2401a7b2 <lv_task_handler+0x46>
        if(next->prio != LV_TASK_PRIO_OFF) {
2401a870:	7d23      	ldrb	r3, [r4, #20]
2401a872:	075b      	lsls	r3, r3, #29
2401a874:	d00b      	beq.n	2401a88e <lv_task_handler+0x122>
    uint32_t elp = lv_tick_elaps(task->last_run);
2401a876:	6860      	ldr	r0, [r4, #4]
2401a878:	f7f4 fc1e 	bl	2400f0b8 <lv_tick_elaps>
    if(elp >= task->period)
2401a87c:	6823      	ldr	r3, [r4, #0]
2401a87e:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
2401a880:	bf34      	ite	cc
2401a882:	1a18      	subcc	r0, r3, r0
        return 0;
2401a884:	2000      	movcs	r0, #0
            if(delay < time_till_next)
2401a886:	682b      	ldr	r3, [r5, #0]
2401a888:	4283      	cmp	r3, r0
                time_till_next = delay;
2401a88a:	bf88      	it	hi
2401a88c:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
2401a88e:	4621      	mov	r1, r4
2401a890:	4638      	mov	r0, r7
2401a892:	f7f4 ff37 	bl	2400f704 <_lv_ll_get_next>
2401a896:	4604      	mov	r4, r0
2401a898:	e7cd      	b.n	2401a836 <lv_task_handler+0xca>
            if(task_created || task_deleted) {
2401a89a:	783b      	ldrb	r3, [r7, #0]
2401a89c:	2b00      	cmp	r3, #0
2401a89e:	d19d      	bne.n	2401a7dc <lv_task_handler+0x70>
            if(task_list_changed) {
2401a8a0:	f89a 2000 	ldrb.w	r2, [sl]
2401a8a4:	2a00      	cmp	r2, #0
2401a8a6:	d0e0      	beq.n	2401a86a <lv_task_handler+0xfe>
                task_interrupter = NULL;
2401a8a8:	461c      	mov	r4, r3
                task_list_changed = false;
2401a8aa:	f88a 3000 	strb.w	r3, [sl]
    } while(!end_flag);
2401a8ae:	e773      	b.n	2401a798 <lv_task_handler+0x2c>
2401a8b0:	24035c98 	.word	0x24035c98
2401a8b4:	24035cac 	.word	0x24035cac
2401a8b8:	24035cae 	.word	0x24035cae
2401a8bc:	2402dc58 	.word	0x2402dc58
2401a8c0:	2402dc5c 	.word	0x2402dc5c
2401a8c4:	24035c9c 	.word	0x24035c9c
2401a8c8:	24035ca8 	.word	0x24035ca8
2401a8cc:	24035ca4 	.word	0x24035ca4
2401a8d0:	24035cb0 	.word	0x24035cb0
2401a8d4:	24035ca0 	.word	0x24035ca0
2401a8d8:	24035cad 	.word	0x24035cad
2401a8dc:	24035caf 	.word	0x24035caf
