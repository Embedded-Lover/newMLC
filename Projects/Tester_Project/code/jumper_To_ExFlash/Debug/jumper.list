
jumper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  24000000  08005ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2400006c  08005f30  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400023c  08005f30  0002023c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cdad  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000205d  00000000  00000000  0002ce8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a28  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000078d  00000000  00000000  0002f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000306a0  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d796  00000000  00000000  0006073d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134741  00000000  00000000  0006ded3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002f14  00000000  00000000  001a2614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001a5528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005e2c 	.word	0x08005e2c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	08005e2c 	.word	0x08005e2c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003a6:	4b31      	ldr	r3, [pc, #196]	; (800046c <MX_GPIO_Init+0xdc>)
 80003a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <MX_GPIO_Init+0xdc>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_GPIO_Init+0xdc>)
 80003b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <MX_GPIO_Init+0xdc>)
 80003c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <MX_GPIO_Init+0xdc>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_GPIO_Init+0xdc>)
 80003d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_GPIO_Init+0xdc>)
 80003e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003e8:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_GPIO_Init+0xdc>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_GPIO_Init+0xdc>)
 80003f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_GPIO_Init+0xdc>)
 8000402:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000406:	4a19      	ldr	r2, [pc, #100]	; (800046c <MX_GPIO_Init+0xdc>)
 8000408:	f043 0302 	orr.w	r3, r3, #2
 800040c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_GPIO_Init+0xdc>)
 8000412:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_GPIO_Init+0xdc>)
 8000420:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <MX_GPIO_Init+0xdc>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_GPIO_Init+0xdc>)
 8000430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2104      	movs	r1, #4
 8000440:	480b      	ldr	r0, [pc, #44]	; (8000470 <MX_GPIO_Init+0xe0>)
 8000442:	f001 f815 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000446:	2304      	movs	r3, #4
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	4619      	mov	r1, r3
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_GPIO_Init+0xe0>)
 800045e:	f000 fd4d 	bl	8000efc <HAL_GPIO_Init>

}
 8000462:	bf00      	nop
 8000464:	3728      	adds	r7, #40	; 0x28
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58024400 	.word	0x58024400
 8000470:	58020000 	.word	0x58020000

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 fba5 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f833 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f7ff ff85 	bl	8000390 <MX_GPIO_Init>
  MX_OCTOSPI1_Init();
 8000486:	f000 f8a9 	bl	80005dc <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
	//
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2104      	movs	r1, #4
 800048e:	4812      	ldr	r0, [pc, #72]	; (80004d8 <main+0x64>)
 8000490:	f000 ffee 	bl	8001470 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 fc28 	bl	8000cec <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2104      	movs	r1, #4
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <main+0x64>)
 80004a2:	f000 ffe5 	bl	8001470 <HAL_GPIO_WritePin>
	//

	//if(OSPI_W25Qxx_Test()){while(1);}

	OSPI_W25Qxx_Init();
 80004a6:	f004 fcdd 	bl	8004e64 <OSPI_W25Qxx_Init>
	OSPI_W25Qxx_MemoryMappedMode();
 80004aa:	f004 fd3d 	bl	8004f28 <OSPI_W25Qxx_MemoryMappedMode>
	SysTick->CTRL = 0;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <main+0x68>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
	JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <main+0x6c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <main+0x70>)
 80004bc:	601a      	str	r2, [r3, #0]
	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80004be:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f383 8808 	msr	MSP, r3
}
 80004cc:	bf00      	nop
	JumpToApplication();
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <main+0x70>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x60>
 80004d6:	bf00      	nop
 80004d8:	58020000 	.word	0x58020000
 80004dc:	e000e010 	.word	0xe000e010
 80004e0:	90000004 	.word	0x90000004
 80004e4:	24000088 	.word	0x24000088

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	224c      	movs	r2, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 fe77 	bl	80051ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f004 fe71 	bl	80051ea <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <SystemClock_Config+0xe0>)
 800050a:	f04f 32ff 	mov.w	r2, #4294967295
 800050e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000512:	2002      	movs	r0, #2
 8000514:	f002 f98c 	bl	8002830 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <SystemClock_Config+0xe4>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <SystemClock_Config+0xe4>)
 8000522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xe4>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000534:	bf00      	nop
 8000536:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xe4>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000542:	d1f8      	bne.n	8000536 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	2302      	movs	r3, #2
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800055a:	2323      	movs	r3, #35	; 0x23
 800055c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000566:	2302      	movs	r3, #2
 8000568:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800056a:	230c      	movs	r3, #12
 800056c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056e:	2300      	movs	r3, #0
 8000570:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	4618      	mov	r0, r3
 800057c:	f002 f992 	bl	80028a4 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000586:	f000 f823 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	233f      	movs	r3, #63	; 0x3f
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800059a:	2340      	movs	r3, #64	; 0x40
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2106      	movs	r1, #6
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fda9 	bl	8003108 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005bc:	f000 f808 	bl	80005d0 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3770      	adds	r7, #112	; 0x70
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58024400 	.word	0x58024400
 80005cc:	58024800 	.word	0x58024800

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 80005f4:	4a27      	ldr	r2, [pc, #156]	; (8000694 <MX_OCTOSPI1_Init+0xb8>)
 80005f6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800060c:	2220      	movs	r2, #32
 800060e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000612:	2201      	movs	r2, #1
 8000614:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800062a:	2201      	movs	r2, #1
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000642:	2208      	movs	r2, #8
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 8000654:	f000 ff26 	bl	80014a4 <HAL_OSPI_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 800065e:	f7ff ffb7 	bl	80005d0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800066a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800066e:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	f241 3288 	movw	r2, #5000	; 0x1388
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_OCTOSPI1_Init+0xb4>)
 800067a:	f001 f985 	bl	8001988 <HAL_OSPIM_Config>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8000684:	f7ff ffa4 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2400008c 	.word	0x2400008c
 8000694:	52005000 	.word	0x52005000

08000698 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0be      	sub	sp, #248	; 0xf8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	22c0      	movs	r2, #192	; 0xc0
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fd96 	bl	80051ea <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a5d      	ldr	r2, [pc, #372]	; (8000838 <HAL_OSPI_MspInit+0x1a0>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f040 80b2 	bne.w	800082e <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80006ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f842 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80006ea:	f7ff ff71 	bl	80005d0 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80006ee:	4b53      	ldr	r3, [pc, #332]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 80006f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80006f4:	4a51      	ldr	r2, [pc, #324]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 80006f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006fa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80006fe:	4b4f      	ldr	r3, [pc, #316]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000700:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800070c:	4b4b      	ldr	r3, [pc, #300]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800070e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000712:	4a4a      	ldr	r2, [pc, #296]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800071c:	4b47      	ldr	r3, [pc, #284]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800071e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b44      	ldr	r3, [pc, #272]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800072c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000730:	4a42      	ldr	r2, [pc, #264]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800073c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b3c      	ldr	r3, [pc, #240]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800074a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074e:	4a3b      	ldr	r2, [pc, #236]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800075a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000768:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076c:	4a33      	ldr	r2, [pc, #204]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <HAL_OSPI_MspInit+0x1a4>)
 8000778:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000784:	2304      	movs	r3, #4
 8000786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800079c:	2309      	movs	r3, #9
 800079e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <HAL_OSPI_MspInit+0x1a8>)
 80007aa:	f000 fba7 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ae:	2304      	movs	r3, #4
 80007b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80007c6:	2309      	movs	r3, #9
 80007c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <HAL_OSPI_MspInit+0x1ac>)
 80007d4:	f000 fb92 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80007d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80007f2:	2309      	movs	r3, #9
 80007f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <HAL_OSPI_MspInit+0x1b0>)
 8000800:	f000 fb7c 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800081c:	230a      	movs	r3, #10
 800081e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000826:	4619      	mov	r1, r3
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <HAL_OSPI_MspInit+0x1ac>)
 800082a:	f000 fb67 	bl	8000efc <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	37f8      	adds	r7, #248	; 0xf8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	52005000 	.word	0x52005000
 800083c:	58024400 	.word	0x58024400
 8000840:	58021000 	.word	0x58021000
 8000844:	58020400 	.word	0x58020400
 8000848:	58020c00 	.word	0x58020c00

0800084c <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <HAL_OSPI_MspDeInit+0x54>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d11c      	bne.n	8000898 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_OSPI_MspDeInit+0x58>)
 8000860:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_OSPI_MspDeInit+0x58>)
 8000866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800086a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_OSPI_MspDeInit+0x58>)
 8000870:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <HAL_OSPI_MspDeInit+0x58>)
 8000876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800087a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800087e:	2104      	movs	r1, #4
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <HAL_OSPI_MspDeInit+0x5c>)
 8000882:	f000 fceb 	bl	800125c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8000886:	2144      	movs	r1, #68	; 0x44
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <HAL_OSPI_MspDeInit+0x60>)
 800088a:	f000 fce7 	bl	800125c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 800088e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <HAL_OSPI_MspDeInit+0x64>)
 8000894:	f000 fce2 	bl	800125c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	52005000 	.word	0x52005000
 80008a4:	58024400 	.word	0x58024400
 80008a8:	58021000 	.word	0x58021000
 80008ac:	58020400 	.word	0x58020400
 80008b0:	58020c00 	.word	0x58020c00

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_MspInit+0x30>)
 80008bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x30>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x30>)
 80008cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	58024400 	.word	0x58024400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f9ba 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e00a      	b.n	8000964 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094e:	f3af 8000 	nop.w
 8000952:	4601      	mov	r1, r0
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	b2ca      	uxtb	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf0      	blt.n	800094e <_read+0x12>
  }

  return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e009      	b.n	800099c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf1      	blt.n	8000988 <_write+0x12>
  }
  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_close>:

int _close(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d6:	605a      	str	r2, [r3, #4]
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_isatty>:

int _isatty(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f004 fc1e 	bl	8005288 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24100000 	.word	0x24100000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	240000e8 	.word	0x240000e8
 8000a80:	24000240 	.word	0x24000240

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a88:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <SystemInit+0xd0>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <SystemInit+0xd0>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <SystemInit+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d807      	bhi.n	8000ab4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <SystemInit+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f023 030f 	bic.w	r3, r3, #15
 8000aac:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <SystemInit+0xd4>)
 8000aae:	f043 0303 	orr.w	r3, r3, #3
 8000ab2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SystemInit+0xd8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <SystemInit+0xd8>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemInit+0xd8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <SystemInit+0xd8>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4924      	ldr	r1, [pc, #144]	; (8000b5c <SystemInit+0xd8>)
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <SystemInit+0xdc>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <SystemInit+0xd4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <SystemInit+0xd4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f023 030f 	bic.w	r3, r3, #15
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <SystemInit+0xd4>)
 8000ae8:	f043 0303 	orr.w	r3, r3, #3
 8000aec:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <SystemInit+0xd8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <SystemInit+0xd8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <SystemInit+0xd8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <SystemInit+0xd8>)
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <SystemInit+0xe0>)
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <SystemInit+0xd8>)
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <SystemInit+0xe4>)
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <SystemInit+0xd8>)
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <SystemInit+0xe8>)
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <SystemInit+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0xd8>)
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <SystemInit+0xe8>)
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <SystemInit+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <SystemInit+0xd8>)
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <SystemInit+0xe8>)
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0xd8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0xd8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0xd8>)
 8000b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SystemInit+0xec>)
 8000b44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	52002000 	.word	0x52002000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b64:	02020200 	.word	0x02020200
 8000b68:	01ff0000 	.word	0x01ff0000
 8000b6c:	01010280 	.word	0x01010280
 8000b70:	52004000 	.word	0x52004000

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b78:	f7ff ff84 	bl	8000a84 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f004 fb77 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fc65 	bl	8000474 <main>
  bx  lr
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000bb8:	08005ec4 	.word	0x08005ec4
  ldr r2, =_sbss
 8000bbc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000bc0:	2400023c 	.word	0x2400023c

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f962 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000bd4:	f002 fc4e 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_Init+0x68>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	4913      	ldr	r1, [pc, #76]	; (8000c34 <HAL_Init+0x6c>)
 8000be6:	5ccb      	ldrb	r3, [r1, r3]
 8000be8:	f003 031f 	and.w	r3, r3, #31
 8000bec:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_Init+0x68>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_Init+0x6c>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_Init+0x70>)
 8000c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_Init+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f814 	bl	8000c40 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e002      	b.n	8000c28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff fe47 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400
 8000c34:	08005e78 	.word	0x08005e78
 8000c38:	24000004 	.word	0x24000004
 8000c3c:	24000000 	.word	0x24000000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e021      	b.n	8000c98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_InitTick+0x64>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f939 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f911 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x68>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2400000c 	.word	0x2400000c
 8000ca4:	24000000 	.word	0x24000000
 8000ca8:	24000008 	.word	0x24000008

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2400000c 	.word	0x2400000c
 8000cd0:	240000ec 	.word	0x240000ec

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	240000ec 	.word	0x240000ec

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400000c 	.word	0x2400000c

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	05fa0000 	.word	0x05fa0000

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff47 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff5e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffb2 	bl	8000e54 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f0a:	4b89      	ldr	r3, [pc, #548]	; (8001130 <HAL_GPIO_Init+0x234>)
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f0e:	e194      	b.n	800123a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8186 	beq.w	8001234 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d005      	beq.n	8000f40 <HAL_GPIO_Init+0x44>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d017      	beq.n	8000fde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	69b9      	ldr	r1, [r7, #24]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80e0 	beq.w	8001234 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <HAL_GPIO_Init+0x238>)
 8001076:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800107a:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <HAL_GPIO_Init+0x238>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_GPIO_Init+0x238>)
 8001086:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a29      	ldr	r2, [pc, #164]	; (8001138 <HAL_GPIO_Init+0x23c>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <HAL_GPIO_Init+0x240>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d052      	beq.n	8001164 <HAL_GPIO_Init+0x268>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_GPIO_Init+0x244>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d031      	beq.n	800112a <HAL_GPIO_Init+0x22e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_GPIO_Init+0x248>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x22a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x24c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x226>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <HAL_GPIO_Init+0x250>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x222>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_GPIO_Init+0x254>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x258>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x21a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_GPIO_Init+0x25c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x216>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_GPIO_Init+0x260>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x212>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_GPIO_Init+0x264>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20e>
 8001106:	2309      	movs	r3, #9
 8001108:	e02d      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800110a:	230a      	movs	r3, #10
 800110c:	e02b      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800110e:	2308      	movs	r3, #8
 8001110:	e029      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 8001112:	2307      	movs	r3, #7
 8001114:	e027      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 8001116:	2306      	movs	r3, #6
 8001118:	e025      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800111a:	2305      	movs	r3, #5
 800111c:	e023      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800111e:	2304      	movs	r3, #4
 8001120:	e021      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 8001122:	2303      	movs	r3, #3
 8001124:	e01f      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 8001126:	2302      	movs	r3, #2
 8001128:	e01d      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800112a:	2301      	movs	r3, #1
 800112c:	e01b      	b.n	8001166 <HAL_GPIO_Init+0x26a>
 800112e:	bf00      	nop
 8001130:	58000080 	.word	0x58000080
 8001134:	58024400 	.word	0x58024400
 8001138:	58000400 	.word	0x58000400
 800113c:	58020000 	.word	0x58020000
 8001140:	58020400 	.word	0x58020400
 8001144:	58020800 	.word	0x58020800
 8001148:	58020c00 	.word	0x58020c00
 800114c:	58021000 	.word	0x58021000
 8001150:	58021400 	.word	0x58021400
 8001154:	58021800 	.word	0x58021800
 8001158:	58021c00 	.word	0x58021c00
 800115c:	58022000 	.word	0x58022000
 8001160:	58022400 	.word	0x58022400
 8001164:	2300      	movs	r3, #0
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001176:	4938      	ldr	r1, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x35c>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	3301      	adds	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	f47f ae63 	bne.w	8000f10 <HAL_GPIO_Init+0x14>
  }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3724      	adds	r7, #36	; 0x24
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	58000400 	.word	0x58000400

0800125c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800126a:	4b75      	ldr	r3, [pc, #468]	; (8001440 <HAL_GPIO_DeInit+0x1e4>)
 800126c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800126e:	e0d9      	b.n	8001424 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4013      	ands	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80cc 	beq.w	800141e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a6f      	ldr	r2, [pc, #444]	; (8001444 <HAL_GPIO_DeInit+0x1e8>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a67      	ldr	r2, [pc, #412]	; (8001448 <HAL_GPIO_DeInit+0x1ec>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d037      	beq.n	8001320 <HAL_GPIO_DeInit+0xc4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_GPIO_DeInit+0x1f0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d031      	beq.n	800131c <HAL_GPIO_DeInit+0xc0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_GPIO_DeInit+0x1f4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d02b      	beq.n	8001318 <HAL_GPIO_DeInit+0xbc>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <HAL_GPIO_DeInit+0x1f8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d025      	beq.n	8001314 <HAL_GPIO_DeInit+0xb8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a63      	ldr	r2, [pc, #396]	; (8001458 <HAL_GPIO_DeInit+0x1fc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d01f      	beq.n	8001310 <HAL_GPIO_DeInit+0xb4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a62      	ldr	r2, [pc, #392]	; (800145c <HAL_GPIO_DeInit+0x200>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <HAL_GPIO_DeInit+0xb0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a61      	ldr	r2, [pc, #388]	; (8001460 <HAL_GPIO_DeInit+0x204>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <HAL_GPIO_DeInit+0xac>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a60      	ldr	r2, [pc, #384]	; (8001464 <HAL_GPIO_DeInit+0x208>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_DeInit+0xa8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	; (8001468 <HAL_GPIO_DeInit+0x20c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_DeInit+0xa4>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a5e      	ldr	r2, [pc, #376]	; (800146c <HAL_GPIO_DeInit+0x210>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_DeInit+0xa0>
 80012f8:	2309      	movs	r3, #9
 80012fa:	e012      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 80012fc:	230a      	movs	r3, #10
 80012fe:	e010      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001300:	2308      	movs	r3, #8
 8001302:	e00e      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001304:	2307      	movs	r3, #7
 8001306:	e00c      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001308:	2306      	movs	r3, #6
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 800130c:	2305      	movs	r3, #5
 800130e:	e008      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_DeInit+0xc6>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d136      	bne.n	80013a0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135c:	4013      	ands	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136e:	4013      	ands	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_GPIO_DeInit+0x1e8>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	43da      	mvns	r2, r3
 8001392:	482c      	ldr	r0, [pc, #176]	; (8001444 <HAL_GPIO_DeInit+0x1e8>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	400a      	ands	r2, r1
 800139a:	3302      	adds	r3, #2
 800139c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2103      	movs	r1, #3
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	08d2      	lsrs	r2, r2, #3
 80013d4:	4019      	ands	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2103      	movs	r1, #3
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2103      	movs	r1, #3
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f af1f 	bne.w	8001270 <HAL_GPIO_DeInit+0x14>
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	58000080 	.word	0x58000080
 8001444:	58000400 	.word	0x58000400
 8001448:	58020000 	.word	0x58020000
 800144c:	58020400 	.word	0x58020400
 8001450:	58020800 	.word	0x58020800
 8001454:	58020c00 	.word	0x58020c00
 8001458:	58021000 	.word	0x58021000
 800145c:	58021400 	.word	0x58021400
 8001460:	58021800 	.word	0x58021800
 8001464:	58021c00 	.word	0x58021c00
 8001468:	58022000 	.word	0x58022000
 800146c:	58022400 	.word	0x58022400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fc10 	bl	8000cd4 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e0a5      	b.n	800160e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 809e 	bne.w	800160e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff f8e0 	bl	8000698 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80014d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fa43 	bl	8001968 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <HAL_OSPI_Init+0x174>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68d1      	ldr	r1, [r2, #12]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6912      	ldr	r2, [r2, #16]
 80014f4:	3a01      	subs	r2, #1
 80014f6:	0412      	lsls	r2, r2, #16
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6952      	ldr	r2, [r2, #20]
 80014fe:	3a01      	subs	r2, #1
 8001500:	0212      	lsls	r2, r2, #8
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001508:	4311      	orrs	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	69d2      	ldr	r2, [r2, #28]
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001548:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	021a      	lsls	r2, r3, #8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fef1 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d146      	bne.n	800160e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015b6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d107      	bne.n	80015f6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0202 	orr.w	r2, r2, #2
 80015f4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015fe:	d103      	bne.n	8001608 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	651a      	str	r2, [r3, #80]	; 0x50
 8001606:	e002      	b.n	800160e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	f8e0f8f4 	.word	0xf8e0f8f4

0800161c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e015      	b.n	8001660 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0202 	bic.w	r2, r2, #2
 8001652:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff f8f9 	bl	800084c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b08a      	sub	sp, #40	; 0x28
 800166e:	af02      	add	r7, sp, #8
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001676:	f7ff fb2d 	bl	8000cd4 <HAL_GetTick>
 800167a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001686:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d104      	bne.n	8001698 <HAL_OSPI_Command+0x2e>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001696:	d115      	bne.n	80016c4 <HAL_OSPI_Command+0x5a>
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b14      	cmp	r3, #20
 800169c:	d107      	bne.n	80016ae <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d00e      	beq.n	80016c4 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d00a      	beq.n	80016c4 <HAL_OSPI_Command+0x5a>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b24      	cmp	r3, #36	; 0x24
 80016b2:	d15b      	bne.n	800176c <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d003      	beq.n	80016c4 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d153      	bne.n	800176c <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fe42 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d14c      	bne.n	8001778 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fe6e 	bl	80023c8 <OSPI_ConfigCmd>
 80016ec:	4603      	mov	r3, r0
 80016ee:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d140      	bne.n	8001778 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2201      	movs	r2, #1
 8001706:	2102      	movs	r1, #2
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fe25 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800171a:	e02d      	b.n	8001778 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2204      	movs	r2, #4
 8001728:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800172a:	e025      	b.n	8001778 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001738:	2b24      	cmp	r3, #36	; 0x24
 800173a:	d103      	bne.n	8001744 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2204      	movs	r2, #4
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8001742:	e019      	b.n	8001778 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2214      	movs	r2, #20
 8001748:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800174a:	e015      	b.n	8001778 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d111      	bne.n	8001778 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001758:	2b14      	cmp	r3, #20
 800175a:	d103      	bne.n	8001764 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2204      	movs	r2, #4
 8001760:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8001762:	e009      	b.n	8001778 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800176a:	e005      	b.n	8001778 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2210      	movs	r2, #16
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
 8001776:	e000      	b.n	800177a <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001778:	bf00      	nop
  }

  /* Return function status */
  return status;
 800177a:	7ffb      	ldrb	r3, [r7, #31]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af02      	add	r7, sp, #8
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff faa0 	bl	8000cd4 <HAL_GetTick>
 8001794:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3350      	adds	r3, #80	; 0x50
 800179c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80017ae:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2208      	movs	r2, #8
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
 80017c2:	e07c      	b.n	80018be <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d172      	bne.n	80018b2 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017f8:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001802:	d104      	bne.n	800180e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	649a      	str	r2, [r3, #72]	; 0x48
 800180c:	e011      	b.n	8001832 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	649a      	str	r2, [r3, #72]	; 0x48
 8001826:	e004      	b.n	8001832 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	2201      	movs	r2, #1
 800183a:	2106      	movs	r1, #6
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fd8b 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8001848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184c:	2b00      	cmp	r3, #0
 800184e:	d114      	bne.n	800187a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	7812      	ldrb	r2, [r2, #0]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1dc      	bne.n	8001832 <HAL_OSPI_Receive+0xae>
 8001878:	e000      	b.n	800187c <HAL_OSPI_Receive+0xf8>
          break;
 800187a:	bf00      	nop

      if (status == HAL_OK)
 800187c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11c      	bne.n	80018be <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	2201      	movs	r2, #1
 800188c:	2102      	movs	r1, #2
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd62 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800189a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10d      	bne.n	80018be <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2202      	movs	r2, #2
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	651a      	str	r2, [r3, #80]	; 0x50
 80018b0:	e005      	b.n	80018be <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2210      	movs	r2, #16
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018d6:	f7ff f9fd 	bl	8000cd4 <HAL_GetTick>
 80018da:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d134      	bne.n	800194e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fd31 	bl	8002358 <OSPI_WaitFlagStateUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12b      	bne.n	8001958 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2288      	movs	r2, #136	; 0x88
 8001904:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b08      	cmp	r3, #8
 800190c:	d111      	bne.n	8001932 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	6852      	ldr	r2, [r2, #4]
 8001916:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2210      	movs	r2, #16
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001930:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_OSPI_MemoryMapped+0x98>)
 800193a:	4013      	ands	r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e004      	b.n	8001958 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2210      	movs	r2, #16
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	cffffff7 	.word	0xcffffff7

08001968 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a9d      	ldr	r2, [pc, #628]	; (8001c1c <HAL_OSPIM_Config+0x294>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d105      	bne.n	80019b6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80019b4:	e004      	b.n	80019c0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80019b6:	2301      	movs	r3, #1
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019c6:	e01d      	b.n	8001a04 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80019c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2d8      	uxtb	r0, r3
 80019d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80019d4:	f107 0114 	add.w	r1, r7, #20
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	4619      	mov	r1, r3
 80019e4:	f000 fe6a 	bl	80026bc <OSPIM_GetConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2208      	movs	r2, #8
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80019fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019fe:	3301      	adds	r3, #1
 8001a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001a04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d9dd      	bls.n	80019c8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8001a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f040 8495 	bne.w	8002340 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001a16:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_OSPIM_Config+0x294>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001a22:	4b7e      	ldr	r3, [pc, #504]	; (8001c1c <HAL_OSPIM_Config+0x294>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7d      	ldr	r2, [pc, #500]	; (8001c1c <HAL_OSPIM_Config+0x294>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8001a2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001a3a:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <HAL_OSPIM_Config+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_OSPIM_Config+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a75      	ldr	r2, [pc, #468]	; (8001c20 <HAL_OSPIM_Config+0x298>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8001a52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8001a5e:	4971      	ldr	r1, [pc, #452]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	3350      	adds	r3, #80	; 0x50
 8001a6c:	443b      	add	r3, r7
 8001a6e:	3b34      	subs	r3, #52	; 0x34
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	486a      	ldr	r0, [pc, #424]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	3350      	adds	r3, #80	; 0x50
 8001a88:	443b      	add	r3, r7
 8001a8a:	3b34      	subs	r3, #52	; 0x34
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4403      	add	r3, r0
 8001a98:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8001a9a:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80c0 	beq.w	8001c28 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8001ab4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8162 	bne.w	8001d82 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8001abe:	4959      	ldr	r1, [pc, #356]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001ac0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	3350      	adds	r3, #80	; 0x50
 8001ace:	443b      	add	r3, r7
 8001ad0:	3b3c      	subs	r3, #60	; 0x3c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	4851      	ldr	r0, [pc, #324]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001ade:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	3350      	adds	r3, #80	; 0x50
 8001aec:	443b      	add	r3, r7
 8001aee:	3b3c      	subs	r3, #60	; 0x3c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f041 0202 	orr.w	r2, r1, #2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4403      	add	r3, r0
 8001afc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001afe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3350      	adds	r3, #80	; 0x50
 8001b0c:	443b      	add	r3, r7
 8001b0e:	3b38      	subs	r3, #56	; 0x38
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01f      	beq.n	8001b56 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8001b16:	4943      	ldr	r1, [pc, #268]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001b18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	3350      	adds	r3, #80	; 0x50
 8001b26:	443b      	add	r3, r7
 8001b28:	3b38      	subs	r3, #56	; 0x38
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	483b      	ldr	r0, [pc, #236]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001b36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	3350      	adds	r3, #80	; 0x50
 8001b44:	443b      	add	r3, r7
 8001b46:	3b38      	subs	r3, #56	; 0x38
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f041 0220 	orr.w	r2, r1, #32
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4403      	add	r3, r0
 8001b54:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001b56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	3350      	adds	r3, #80	; 0x50
 8001b64:	443b      	add	r3, r7
 8001b66:	3b30      	subs	r3, #48	; 0x30
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d023      	beq.n	8001bb6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8001b6e:	492d      	ldr	r1, [pc, #180]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001b70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	3350      	adds	r3, #80	; 0x50
 8001b7e:	443b      	add	r3, r7
 8001b80:	3b30      	subs	r3, #48	; 0x30
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	4824      	ldr	r0, [pc, #144]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001b92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	3350      	adds	r3, #80	; 0x50
 8001ba0:	443b      	add	r3, r7
 8001ba2:	3b30      	subs	r3, #48	; 0x30
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4403      	add	r3, r0
 8001bb4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3350      	adds	r3, #80	; 0x50
 8001bc4:	443b      	add	r3, r7
 8001bc6:	3b2c      	subs	r3, #44	; 0x2c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80d9 	beq.w	8001d82 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8001bd0:	4914      	ldr	r1, [pc, #80]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001bd2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	3350      	adds	r3, #80	; 0x50
 8001be0:	443b      	add	r3, r7
 8001be2:	3b2c      	subs	r3, #44	; 0x2c
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <HAL_OSPIM_Config+0x29c>)
 8001bf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	3350      	adds	r3, #80	; 0x50
 8001c02:	443b      	add	r3, r7
 8001c04:	3b2c      	subs	r3, #44	; 0x2c
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4403      	add	r3, r0
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	e0b3      	b.n	8001d82 <HAL_OSPIM_Config+0x3fa>
 8001c1a:	bf00      	nop
 8001c1c:	52005000 	.word	0x52005000
 8001c20:	5200a000 	.word	0x5200a000
 8001c24:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8001c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	3350      	adds	r3, #80	; 0x50
 8001c34:	443b      	add	r3, r7
 8001c36:	3b3c      	subs	r3, #60	; 0x3c
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a1 	beq.w	8001d82 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8001c40:	4993      	ldr	r1, [pc, #588]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	3350      	adds	r3, #80	; 0x50
 8001c4e:	443b      	add	r3, r7
 8001c50:	3b3c      	subs	r3, #60	; 0x3c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	488c      	ldr	r0, [pc, #560]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	3350      	adds	r3, #80	; 0x50
 8001c6a:	443b      	add	r3, r7
 8001c6c:	3b3c      	subs	r3, #60	; 0x3c
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	f021 0201 	bic.w	r2, r1, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4403      	add	r3, r0
 8001c7a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	3350      	adds	r3, #80	; 0x50
 8001c88:	443b      	add	r3, r7
 8001c8a:	3b38      	subs	r3, #56	; 0x38
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01d      	beq.n	8001cce <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001c92:	497f      	ldr	r1, [pc, #508]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	3350      	adds	r3, #80	; 0x50
 8001ca0:	443b      	add	r3, r7
 8001ca2:	3b38      	subs	r3, #56	; 0x38
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	4878      	ldr	r0, [pc, #480]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	3350      	adds	r3, #80	; 0x50
 8001cbc:	443b      	add	r3, r7
 8001cbe:	3b38      	subs	r3, #56	; 0x38
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f021 0210 	bic.w	r2, r1, #16
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4403      	add	r3, r0
 8001ccc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	3350      	adds	r3, #80	; 0x50
 8001cda:	443b      	add	r3, r7
 8001cdc:	3b30      	subs	r3, #48	; 0x30
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d021      	beq.n	8001d28 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001ce4:	496a      	ldr	r1, [pc, #424]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	3350      	adds	r3, #80	; 0x50
 8001cf2:	443b      	add	r3, r7
 8001cf4:	3b30      	subs	r3, #48	; 0x30
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	4862      	ldr	r0, [pc, #392]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	3350      	adds	r3, #80	; 0x50
 8001d12:	443b      	add	r3, r7
 8001d14:	3b30      	subs	r3, #48	; 0x30
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4403      	add	r3, r0
 8001d26:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	3350      	adds	r3, #80	; 0x50
 8001d34:	443b      	add	r3, r7
 8001d36:	3b2c      	subs	r3, #44	; 0x2c
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d021      	beq.n	8001d82 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001d3e:	4954      	ldr	r1, [pc, #336]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	3350      	adds	r3, #80	; 0x50
 8001d4c:	443b      	add	r3, r7
 8001d4e:	3b2c      	subs	r3, #44	; 0x2c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	484c      	ldr	r0, [pc, #304]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	3350      	adds	r3, #80	; 0x50
 8001d6c:	443b      	add	r3, r7
 8001d6e:	3b2c      	subs	r3, #44	; 0x2c
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	3350      	adds	r3, #80	; 0x50
 8001d94:	443b      	add	r3, r7
 8001d96:	3b3c      	subs	r3, #60	; 0x3c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4299      	cmp	r1, r3
 8001d9c:	d038      	beq.n	8001e10 <HAL_OSPIM_Config+0x488>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	3350      	adds	r3, #80	; 0x50
 8001db0:	443b      	add	r3, r7
 8001db2:	3b38      	subs	r3, #56	; 0x38
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4299      	cmp	r1, r3
 8001db8:	d02a      	beq.n	8001e10 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	3350      	adds	r3, #80	; 0x50
 8001dcc:	443b      	add	r3, r7
 8001dce:	3b34      	subs	r3, #52	; 0x34
 8001dd0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	d01c      	beq.n	8001e10 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
 8001dda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	3350      	adds	r3, #80	; 0x50
 8001de8:	443b      	add	r3, r7
 8001dea:	3b30      	subs	r3, #48	; 0x30
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4299      	cmp	r1, r3
 8001df0:	d00e      	beq.n	8001e10 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6919      	ldr	r1, [r3, #16]
 8001df6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	3350      	adds	r3, #80	; 0x50
 8001e04:	443b      	add	r3, r7
 8001e06:	3b2c      	subs	r3, #44	; 0x2c
 8001e08:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001e0a:	4299      	cmp	r1, r3
 8001e0c:	f040 810e 	bne.w	800202c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	3350      	adds	r3, #80	; 0x50
 8001e22:	443b      	add	r3, r7
 8001e24:	3b3c      	subs	r3, #60	; 0x3c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	d133      	bne.n	8001e94 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	3350      	adds	r3, #80	; 0x50
 8001e3e:	443b      	add	r3, r7
 8001e40:	3b38      	subs	r3, #56	; 0x38
 8001e42:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8001e44:	4299      	cmp	r1, r3
 8001e46:	d125      	bne.n	8001e94 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	3350      	adds	r3, #80	; 0x50
 8001e5a:	443b      	add	r3, r7
 8001e5c:	3b30      	subs	r3, #48	; 0x30
 8001e5e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d117      	bne.n	8001e94 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	3350      	adds	r3, #80	; 0x50
 8001e76:	443b      	add	r3, r7
 8001e78:	3b2c      	subs	r3, #44	; 0x2c
 8001e7a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8001e7c:	4299      	cmp	r1, r3
 8001e7e:	d109      	bne.n	8001e94 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a02      	ldr	r2, [pc, #8]	; (8001e90 <HAL_OSPIM_Config+0x508>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e0ce      	b.n	800202c <HAL_OSPIM_Config+0x6a4>
 8001e8e:	bf00      	nop
 8001e90:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8001e94:	49bb      	ldr	r1, [pc, #748]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001e96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	3350      	adds	r3, #80	; 0x50
 8001ea4:	443b      	add	r3, r7
 8001ea6:	3b3c      	subs	r3, #60	; 0x3c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	48b4      	ldr	r0, [pc, #720]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001eb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	3350      	adds	r3, #80	; 0x50
 8001ec2:	443b      	add	r3, r7
 8001ec4:	3b3c      	subs	r3, #60	; 0x3c
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	f021 0201 	bic.w	r2, r1, #1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4403      	add	r3, r0
 8001ed2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001ed4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	3350      	adds	r3, #80	; 0x50
 8001ee2:	443b      	add	r3, r7
 8001ee4:	3b38      	subs	r3, #56	; 0x38
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01f      	beq.n	8001f2c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001eec:	49a5      	ldr	r1, [pc, #660]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001eee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	3350      	adds	r3, #80	; 0x50
 8001efc:	443b      	add	r3, r7
 8001efe:	3b38      	subs	r3, #56	; 0x38
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	489e      	ldr	r0, [pc, #632]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001f0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	3350      	adds	r3, #80	; 0x50
 8001f1a:	443b      	add	r3, r7
 8001f1c:	3b38      	subs	r3, #56	; 0x38
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	f021 0210 	bic.w	r2, r1, #16
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4403      	add	r3, r0
 8001f2a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8001f2c:	4995      	ldr	r1, [pc, #596]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001f2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	3350      	adds	r3, #80	; 0x50
 8001f3c:	443b      	add	r3, r7
 8001f3e:	3b34      	subs	r3, #52	; 0x34
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	488e      	ldr	r0, [pc, #568]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001f4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	3350      	adds	r3, #80	; 0x50
 8001f5a:	443b      	add	r3, r7
 8001f5c:	3b34      	subs	r3, #52	; 0x34
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001f6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	3350      	adds	r3, #80	; 0x50
 8001f7a:	443b      	add	r3, r7
 8001f7c:	3b30      	subs	r3, #48	; 0x30
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8001f84:	497f      	ldr	r1, [pc, #508]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001f86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	3350      	adds	r3, #80	; 0x50
 8001f94:	443b      	add	r3, r7
 8001f96:	3b30      	subs	r3, #48	; 0x30
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	4877      	ldr	r0, [pc, #476]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001fa8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	3350      	adds	r3, #80	; 0x50
 8001fb6:	443b      	add	r3, r7
 8001fb8:	3b30      	subs	r3, #48	; 0x30
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4403      	add	r3, r0
 8001fca:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001fcc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3350      	adds	r3, #80	; 0x50
 8001fda:	443b      	add	r3, r7
 8001fdc:	3b2c      	subs	r3, #44	; 0x2c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8001fe4:	4967      	ldr	r1, [pc, #412]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8001fe6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	3350      	adds	r3, #80	; 0x50
 8001ff4:	443b      	add	r3, r7
 8001ff6:	3b2c      	subs	r3, #44	; 0x2c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	485f      	ldr	r0, [pc, #380]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002008:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	3350      	adds	r3, #80	; 0x50
 8002016:	443b      	add	r3, r7
 8002018:	3b2c      	subs	r3, #44	; 0x2c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	3b01      	subs	r3, #1
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002040:	025b      	lsls	r3, r3, #9
 8002042:	431a      	orrs	r2, r3
 8002044:	494f      	ldr	r1, [pc, #316]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	3b01      	subs	r3, #1
 800204c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	429a      	cmp	r2, r3
 8002066:	d90a      	bls.n	800207e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	4942      	ldr	r1, [pc, #264]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 809a 	beq.w	80021c0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800208c:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	4939      	ldr	r1, [pc, #228]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d011      	beq.n	80020dc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ca:	492e      	ldr	r1, [pc, #184]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	f042 0210 	orr.w	r2, r2, #16
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d016      	beq.n	8002116 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80020fe:	4921      	ldr	r1, [pc, #132]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	3b01      	subs	r3, #1
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	e019      	b.n	800214a <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d015      	beq.n	800214a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002134:	4913      	ldr	r1, [pc, #76]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d018      	beq.n	8002188 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	3b01      	subs	r3, #1
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800216c:	4905      	ldr	r1, [pc, #20]	; (8002184 <HAL_OSPIM_Config+0x7fc>)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	e0c5      	b.n	8002310 <HAL_OSPIM_Config+0x988>
 8002184:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80bf 	beq.w	8002310 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002192:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	3b01      	subs	r3, #1
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80021a8:	4968      	ldr	r1, [pc, #416]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e0a7      	b.n	8002310 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80021c0:	4a62      	ldr	r2, [pc, #392]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	495c      	ldr	r1, [pc, #368]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d014      	beq.n	800221c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	431a      	orrs	r2, r3
 800220a:	4950      	ldr	r1, [pc, #320]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	3b01      	subs	r3, #1
 8002212:	f042 0210 	orr.w	r2, r2, #16
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d019      	beq.n	800225c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	3b01      	subs	r3, #1
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	049b      	lsls	r3, r3, #18
 8002242:	431a      	orrs	r2, r3
 8002244:	4941      	ldr	r1, [pc, #260]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	3b01      	subs	r3, #1
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e01c      	b.n	8002296 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d018      	beq.n	8002296 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800227a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227c:	069b      	lsls	r3, r3, #26
 800227e:	431a      	orrs	r2, r3
 8002280:	4932      	ldr	r1, [pc, #200]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	3b01      	subs	r3, #1
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80022b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ba:	049b      	lsls	r3, r3, #18
 80022bc:	431a      	orrs	r2, r3
 80022be:	4923      	ldr	r1, [pc, #140]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	e01c      	b.n	8002310 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d018      	beq.n	8002310 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80022f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	431a      	orrs	r2, r3
 80022fa:	4914      	ldr	r1, [pc, #80]	; (800234c <HAL_OSPIM_Config+0x9c4>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	3b01      	subs	r3, #1
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002310:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_OSPIM_Config+0x9c8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_OSPIM_Config+0x9c8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002328:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_OSPIM_Config+0x9cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_OSPIM_Config+0x9cc>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002344:	4618      	mov	r0, r3
 8002346:	3750      	adds	r7, #80	; 0x50
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	5200b400 	.word	0x5200b400
 8002350:	52005000 	.word	0x52005000
 8002354:	5200a000 	.word	0x5200a000

08002358 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002368:	e01a      	b.n	80023a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d016      	beq.n	80023a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7fe fcaf 	bl	8000cd4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10b      	bne.n	80023a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238e:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e00e      	b.n	80023be <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1d6      	bne.n	800236a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d114      	bne.n	8002436 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002414:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800241e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002428:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e02c      	b.n	8002490 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d114      	bne.n	8002468 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002446:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002450:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800245a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e013      	b.n	8002490 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002470:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800247a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002484:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800248e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	431a      	orrs	r2, r3
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	4319      	orrs	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	430b      	orrs	r3, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 021f 	bic.w	r2, r3, #31
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3a01      	subs	r2, #1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8095 	beq.w	800262e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d053      	beq.n	80025b4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01e      	beq.n	8002552 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <OSPI_ConfigCmd+0x2e4>)
 800251a:	4013      	ands	r3, r2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	68d1      	ldr	r1, [r2, #12]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6952      	ldr	r2, [r2, #20]
 8002524:	4311      	orrs	r1, r2
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6912      	ldr	r2, [r2, #16]
 800252a:	4311      	orrs	r1, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	69d2      	ldr	r2, [r2, #28]
 8002530:	4311      	orrs	r1, r2
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002536:	4311      	orrs	r1, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	6a12      	ldr	r2, [r2, #32]
 800253c:	4311      	orrs	r1, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002542:	4311      	orrs	r1, r2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002548:	430a      	orrs	r2, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e026      	b.n	80025a0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <OSPI_ConfigCmd+0x2e8>)
 8002558:	4013      	ands	r3, r2
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68d1      	ldr	r1, [r2, #12]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6952      	ldr	r2, [r2, #20]
 8002562:	4311      	orrs	r1, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	6912      	ldr	r2, [r2, #16]
 8002568:	4311      	orrs	r1, r2
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	69d2      	ldr	r2, [r2, #28]
 800256e:	4311      	orrs	r1, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002574:	4311      	orrs	r1, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6a12      	ldr	r2, [r2, #32]
 800257a:	430a      	orrs	r2, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800258a:	d109      	bne.n	80025a0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002590:	2b08      	cmp	r3, #8
 8002592:	d105      	bne.n	80025a0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6992      	ldr	r2, [r2, #24]
 80025b0:	649a      	str	r2, [r3, #72]	; 0x48
 80025b2:	e074      	b.n	800269e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <OSPI_ConfigCmd+0x2ec>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	68d1      	ldr	r1, [r2, #12]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	6952      	ldr	r2, [r2, #20]
 80025cc:	4311      	orrs	r1, r2
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	6912      	ldr	r2, [r2, #16]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d8:	4311      	orrs	r1, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025de:	430a      	orrs	r2, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e01d      	b.n	8002624 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68d9      	ldr	r1, [r3, #12]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	4319      	orrs	r1, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	430b      	orrs	r3, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260e:	d109      	bne.n	8002624 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002614:	2b08      	cmp	r3, #8
 8002616:	d105      	bne.n	8002624 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e037      	b.n	800269e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02e      	beq.n	8002694 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <OSPI_ConfigCmd+0x2f0>)
 8002644:	4013      	ands	r3, r2
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	69d1      	ldr	r1, [r2, #28]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264e:	4311      	orrs	r1, r2
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6a12      	ldr	r2, [r2, #32]
 8002654:	4311      	orrs	r1, r2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265a:	4311      	orrs	r1, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002660:	430a      	orrs	r2, r1
 8002662:	431a      	orrs	r2, r3
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e00e      	b.n	8002688 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	69d9      	ldr	r1, [r3, #28]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	4319      	orrs	r1, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	430b      	orrs	r3, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	6992      	ldr	r2, [r2, #24]
 8002690:	649a      	str	r2, [r3, #72]	; 0x48
 8002692:	e004      	b.n	800269e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2208      	movs	r2, #8
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800269e:	7ffb      	ldrb	r3, [r7, #31]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3724      	adds	r7, #36	; 0x24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	f0ffc0c0 	.word	0xf0ffc0c0
 80026b0:	ffffc0c0 	.word	0xffffc0c0
 80026b4:	f0ffffc0 	.word	0xf0ffffc0
 80026b8:	f0ffc0ff 	.word	0xf0ffc0ff

080026bc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <OSPIM_GetConfig+0x26>
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d802      	bhi.n	80026e2 <OSPIM_GetConfig+0x26>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	e098      	b.n	800281a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d10b      	bne.n	8002724 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <OSPIM_GetConfig+0x16c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002718:	4b44      	ldr	r3, [pc, #272]	; (800282c <OSPIM_GetConfig+0x170>)
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	e002      	b.n	8002724 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800271e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002722:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e074      	b.n	8002814 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800272a:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <OSPIM_GetConfig+0x16c>)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4053      	eors	r3, r2
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4053      	eors	r3, r2
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4053      	eors	r3, r2
 8002786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d018      	beq.n	80027d2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4053      	eors	r3, r2
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d111      	bne.n	80027d2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	e005      	b.n	80027d2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d018      	beq.n	800280e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4053      	eors	r3, r2
 80027e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d111      	bne.n	800280e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3301      	adds	r3, #1
 80027f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	e005      	b.n	800280e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3301      	adds	r3, #1
 8002806:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d987      	bls.n	800272a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	5200b400 	.word	0x5200b400
 800282c:	04040222 	.word	0x04040222

08002830 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00a      	beq.n	800285a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e01f      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e01d      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	490f      	ldr	r1, [pc, #60]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800286a:	f7fe fa33 	bl	8000cd4 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002870:	e009      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002872:	f7fe fa2f 	bl	8000cd4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002880:	d901      	bls.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d1ee      	bne.n	8002872 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	58024800 	.word	0x58024800

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f000 bc1f 	b.w	80030f6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80b3 	beq.w	8002a2c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	4b95      	ldr	r3, [pc, #596]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x48>
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b18      	cmp	r3, #24
 80028e0:	d112      	bne.n	8002908 <HAL_RCC_OscConfig+0x64>
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d10d      	bne.n	8002908 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8098 	beq.w	8002a2a <HAL_RCC_OscConfig+0x186>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 8093 	bne.w	8002a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e3f6      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x7c>
 8002912:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a81      	ldr	r2, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e058      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d112      	bne.n	800294e <HAL_RCC_OscConfig+0xaa>
 8002928:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7b      	ldr	r2, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b79      	ldr	r3, [pc, #484]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a78      	ldr	r2, [pc, #480]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800293a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e041      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0xda>
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800295e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6c      	ldr	r2, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800296a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e029      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0x10a>
 8002988:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e011      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d013      	beq.n	8002a02 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe f97b 	bl	8000cd4 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e2:	f7fe f977 	bl	8000cd4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e380      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe f967 	bl	8000cd4 <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f963 	bl	8000cd4 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	; 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e36c      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x166>
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 808c 	beq.w	8002b52 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1bc>
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	d137      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x222>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d132      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x1d4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e33e      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 0219 	bic.w	r2, r3, #25
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4925      	ldr	r1, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f923 	bl	8000cd4 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe f91f 	bl	8000cd4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e328      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	4917      	ldr	r1, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	e045      	b.n	8002b52 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0219 	bic.w	r2, r3, #25
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4910      	ldr	r1, [pc, #64]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f8f8 	bl	8000cd4 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f8f4 	bl	8000cd4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e2fd      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	061b      	lsls	r3, r3, #24
 8002b14:	4901      	ldr	r1, [pc, #4]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
 8002b1a:	e01a      	b.n	8002b52 <HAL_RCC_OscConfig+0x2ae>
 8002b1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b20:	4b97      	ldr	r3, [pc, #604]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a96      	ldr	r2, [pc, #600]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f8d2 	bl	8000cd4 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe f8ce 	bl	8000cd4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2d7      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b46:	4b8e      	ldr	r3, [pc, #568]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b68:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d007      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2e0>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b18      	cmp	r3, #24
 8002b78:	d11b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x30e>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d116      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b84:	4b7e      	ldr	r3, [pc, #504]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e2ac      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b9c:	4b78      	ldr	r3, [pc, #480]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	4975      	ldr	r1, [pc, #468]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb0:	e040      	b.n	8002c34 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d023      	beq.n	8002c02 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bba:	4b71      	ldr	r3, [pc, #452]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f885 	bl	8000cd4 <HAL_GetTick>
 8002bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bce:	f7fe f881 	bl	8000cd4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e28a      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002be0:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	4961      	ldr	r1, [pc, #388]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
 8002c00:	e018      	b.n	8002c34 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f861 	bl	8000cd4 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c16:	f7fe f85d 	bl	8000cd4 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e266      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c28:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d036      	beq.n	8002cae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d019      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe f83e 	bl	8000cd4 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe f83a 	bl	8000cd4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e243      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c6e:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x3b8>
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c80:	4a3f      	ldr	r2, [pc, #252]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe f824 	bl	8000cd4 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe f820 	bl	8000cd4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e229      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d036      	beq.n	8002d28 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cce:	f7fe f801 	bl	8000cd4 <HAL_GetTick>
 8002cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd6:	f7fd fffd 	bl	8000cd4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e206      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x432>
 8002cf4:	e018      	b.n	8002d28 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d02:	f7fd ffe7 	bl	8000cd4 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0a:	f7fd ffe3 	bl	8000cd4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e1ec      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80af 	beq.w	8002e94 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCC_OscConfig+0x4e0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x4e0>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d42:	f7fd ffc7 	bl	8000cd4 <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fd ffc3 	bl	8000cd4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1cc      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_OscConfig+0x4e0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4e4>
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a02      	ldr	r2, [pc, #8]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e05b      	b.n	8002e36 <HAL_RCC_OscConfig+0x592>
 8002d7e:	bf00      	nop
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58024800 	.word	0x58024800
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_RCC_OscConfig+0x512>
 8002d90:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a9c      	ldr	r2, [pc, #624]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	4b9a      	ldr	r3, [pc, #616]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a99      	ldr	r2, [pc, #612]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	4b97      	ldr	r3, [pc, #604]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a96      	ldr	r2, [pc, #600]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	e03f      	b.n	8002e36 <HAL_RCC_OscConfig+0x592>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x540>
 8002dbe:	4b92      	ldr	r3, [pc, #584]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a91      	ldr	r2, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	4b8f      	ldr	r3, [pc, #572]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a8e      	ldr	r2, [pc, #568]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b8c      	ldr	r3, [pc, #560]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a8b      	ldr	r2, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e028      	b.n	8002e36 <HAL_RCC_OscConfig+0x592>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b85      	cmp	r3, #133	; 0x85
 8002dea:	d112      	bne.n	8002e12 <HAL_RCC_OscConfig+0x56e>
 8002dec:	4b86      	ldr	r3, [pc, #536]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a85      	ldr	r2, [pc, #532]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	4b83      	ldr	r3, [pc, #524]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a82      	ldr	r2, [pc, #520]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b80      	ldr	r3, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a7f      	ldr	r2, [pc, #508]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e011      	b.n	8002e36 <HAL_RCC_OscConfig+0x592>
 8002e12:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a79      	ldr	r2, [pc, #484]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b77      	ldr	r3, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a76      	ldr	r2, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fd ff49 	bl	8000cd4 <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fd ff45 	bl	8000cd4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e14c      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x5a2>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fd ff33 	bl	8000cd4 <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fd ff2f 	bl	8000cd4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e136      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 812b 	beq.w	80030f4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e9e:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ea6:	2b18      	cmp	r3, #24
 8002ea8:	f000 80bb 	beq.w	8003022 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f040 8095 	bne.w	8002fe0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b54      	ldr	r3, [pc, #336]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a53      	ldr	r2, [pc, #332]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fd ff07 	bl	8000cd4 <HAL_GetTick>
 8002ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fd ff03 	bl	8000cd4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10c      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x768>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	430a      	orrs	r2, r1
 8002efc:	4942      	ldr	r1, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	628b      	str	r3, [r1, #40]	; 0x28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	3b01      	subs	r3, #1
 8002f12:	025b      	lsls	r3, r3, #9
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f32:	4935      	ldr	r1, [pc, #212]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f48:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	492d      	ldr	r1, [pc, #180]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f023 020c 	bic.w	r2, r3, #12
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4928      	ldr	r1, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f023 0202 	bic.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4924      	ldr	r1, [pc, #144]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fe8c 	bl	8000cd4 <HAL_GetTick>
 8002fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fd fe88 	bl	8000cd4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e091      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x71c>
 8002fde:	e089      	b.n	80030f4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a08      	ldr	r2, [pc, #32]	; (8003008 <HAL_RCC_OscConfig+0x764>)
 8002fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fd fe72 	bl	8000cd4 <HAL_GetTick>
 8002ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ff2:	e00f      	b.n	8003014 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fd fe6e 	bl	8000cd4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d908      	bls.n	8003014 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e077      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
 8003006:	bf00      	nop
 8003008:	58024400 	.word	0x58024400
 800300c:	fffffc0c 	.word	0xfffffc0c
 8003010:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003014:	4b3a      	ldr	r3, [pc, #232]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e9      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x750>
 8003020:	e068      	b.n	80030f4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	d031      	beq.n	800309a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d12a      	bne.n	800309a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d122      	bne.n	800309a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d11a      	bne.n	800309a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	0a5b      	lsrs	r3, r3, #9
 8003068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d111      	bne.n	800309a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d108      	bne.n	800309a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0e1b      	lsrs	r3, r3, #24
 800308c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02b      	b.n	80030f6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030a8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d01f      	beq.n	80030f4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c0:	f7fd fe08 	bl	8000cd4 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80030c6:	bf00      	nop
 80030c8:	f7fd fe04 	bl	8000cd4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d0f9      	beq.n	80030c8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_OscConfig+0x860>)
 80030da:	4013      	ands	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030e0:	00d2      	lsls	r2, r2, #3
 80030e2:	4907      	ldr	r1, [pc, #28]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_OscConfig+0x85c>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
 8003104:	ffff0007 	.word	0xffff0007

08003108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e19c      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b8a      	ldr	r3, [pc, #552]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b87      	ldr	r3, [pc, #540]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4985      	ldr	r1, [pc, #532]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e184      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d908      	bls.n	800317a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003168:	4b78      	ldr	r3, [pc, #480]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4975      	ldr	r1, [pc, #468]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003176:	4313      	orrs	r3, r2
 8003178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	4b70      	ldr	r3, [pc, #448]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003196:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	496a      	ldr	r1, [pc, #424]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	495e      	ldr	r1, [pc, #376]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d908      	bls.n	8003204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031f2:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4953      	ldr	r1, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003200:	4313      	orrs	r3, r2
 8003202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	429a      	cmp	r2, r3
 800321e:	d908      	bls.n	8003232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 020f 	bic.w	r2, r3, #15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4947      	ldr	r1, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d055      	beq.n	80032ea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800323e:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4940      	ldr	r1, [pc, #256]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800324c:	4313      	orrs	r3, r2
 800324e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003258:	4b3c      	ldr	r3, [pc, #240]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d121      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0f6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ea      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0de      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0d6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f023 0207 	bic.w	r2, r3, #7
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fd fd0b 	bl	8000cd4 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fd fd07 	bl	8000cd4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0be      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	4b1c      	ldr	r3, [pc, #112]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1eb      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	429a      	cmp	r2, r3
 8003304:	d208      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003314:	4313      	orrs	r3, r2
 8003316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d214      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	4906      	ldr	r1, [pc, #24]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e086      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
 8003348:	52002000 	.word	0x52002000
 800334c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003368:	429a      	cmp	r2, r3
 800336a:	d208      	bcs.n	800337e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800336c:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4939      	ldr	r1, [pc, #228]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800337a:	4313      	orrs	r3, r2
 800337c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d208      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	492e      	ldr	r1, [pc, #184]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d208      	bcs.n	80033da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4922      	ldr	r1, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d208      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4917      	ldr	r1, [pc, #92]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003404:	4313      	orrs	r3, r2
 8003406:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003408:	f000 f834 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4912      	ldr	r1, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x35c>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_RCC_ClockConfig+0x35c>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x360>)
 800343e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x364>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x368>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd fbf8 	bl	8000c40 <HAL_InitTick>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024400 	.word	0x58024400
 8003464:	08005e78 	.word	0x08005e78
 8003468:	24000004 	.word	0x24000004
 800346c:	24000000 	.word	0x24000000
 8003470:	24000008 	.word	0x24000008

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347a:	4bb3      	ldr	r3, [pc, #716]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003482:	2b18      	cmp	r3, #24
 8003484:	f200 8155 	bhi.w	8003732 <HAL_RCC_GetSysClockFreq+0x2be>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034f5 	.word	0x080034f5
 8003494:	08003733 	.word	0x08003733
 8003498:	08003733 	.word	0x08003733
 800349c:	08003733 	.word	0x08003733
 80034a0:	08003733 	.word	0x08003733
 80034a4:	08003733 	.word	0x08003733
 80034a8:	08003733 	.word	0x08003733
 80034ac:	08003733 	.word	0x08003733
 80034b0:	0800351b 	.word	0x0800351b
 80034b4:	08003733 	.word	0x08003733
 80034b8:	08003733 	.word	0x08003733
 80034bc:	08003733 	.word	0x08003733
 80034c0:	08003733 	.word	0x08003733
 80034c4:	08003733 	.word	0x08003733
 80034c8:	08003733 	.word	0x08003733
 80034cc:	08003733 	.word	0x08003733
 80034d0:	08003521 	.word	0x08003521
 80034d4:	08003733 	.word	0x08003733
 80034d8:	08003733 	.word	0x08003733
 80034dc:	08003733 	.word	0x08003733
 80034e0:	08003733 	.word	0x08003733
 80034e4:	08003733 	.word	0x08003733
 80034e8:	08003733 	.word	0x08003733
 80034ec:	08003733 	.word	0x08003733
 80034f0:	08003527 	.word	0x08003527
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f4:	4b94      	ldr	r3, [pc, #592]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003500:	4b91      	ldr	r3, [pc, #580]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	4a90      	ldr	r2, [pc, #576]	; (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003512:	e111      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003514:	4b8d      	ldr	r3, [pc, #564]	; (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003516:	61bb      	str	r3, [r7, #24]
      break;
 8003518:	e10e      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800351a:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800351c:	61bb      	str	r3, [r7, #24]
      break;
 800351e:	e10b      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003522:	61bb      	str	r3, [r7, #24]
      break;
 8003524:	e108      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003530:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800353c:	4b82      	ldr	r3, [pc, #520]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003546:	4b80      	ldr	r3, [pc, #512]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80e1 	beq.w	800372c <HAL_RCC_GetSysClockFreq+0x2b8>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b02      	cmp	r3, #2
 800356e:	f000 8083 	beq.w	8003678 <HAL_RCC_GetSysClockFreq+0x204>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b02      	cmp	r3, #2
 8003576:	f200 80a1 	bhi.w	80036bc <HAL_RCC_GetSysClockFreq+0x248>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x114>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d056      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003586:	e099      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02d      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003594:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	4a6b      	ldr	r2, [pc, #428]	; (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80035ee:	e087      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800375c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b51      	ldr	r3, [pc, #324]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003632:	e065      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003676:	e043      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369a:	ed97 6a02 	vldr	s12, [r7, #8]
 800369e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ba:	e021      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036de:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	0a5b      	lsrs	r3, r3, #9
 8003706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370a:	3301      	adds	r3, #1
 800370c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003718:	edd7 6a07 	vldr	s13, [r7, #28]
 800371c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	ee17 3a90 	vmov	r3, s15
 8003728:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800372a:	e005      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
      break;
 8003730:	e002      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003734:	61bb      	str	r3, [r7, #24]
      break;
 8003736:	bf00      	nop
  }

  return sysclockfreq;
 8003738:	69bb      	ldr	r3, [r7, #24]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	58024400 	.word	0x58024400
 800374c:	03d09000 	.word	0x03d09000
 8003750:	003d0900 	.word	0x003d0900
 8003754:	00f42400 	.word	0x00f42400
 8003758:	46000000 	.word	0x46000000
 800375c:	4c742400 	.word	0x4c742400
 8003760:	4a742400 	.word	0x4a742400
 8003764:	4b742400 	.word	0x4b742400

08003768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b0c8      	sub	sp, #288	; 0x120
 800376e:	af00      	add	r7, sp, #0
 8003770:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003774:	2300      	movs	r3, #0
 8003776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800377a:	2300      	movs	r3, #0
 800377c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800378c:	2500      	movs	r5, #0
 800378e:	ea54 0305 	orrs.w	r3, r4, r5
 8003792:	d049      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800379e:	d02f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037a4:	d828      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037aa:	d01a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b0:	d822      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ba:	d007      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037bc:	e01c      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037be:	4ba7      	ldr	r3, [pc, #668]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	4aa6      	ldr	r2, [pc, #664]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ca:	e01a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d0:	3308      	adds	r3, #8
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f985 	bl	8004ae4 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037e0:	e00f      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e6:	3328      	adds	r3, #40	; 0x28
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fa2c 	bl	8004c48 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800380a:	4b94      	ldr	r3, [pc, #592]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003818:	4a90      	ldr	r2, [pc, #576]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	430b      	orrs	r3, r1
 800381c:	6513      	str	r3, [r2, #80]	; 0x50
 800381e:	e003      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003834:	f04f 0900 	mov.w	r9, #0
 8003838:	ea58 0309 	orrs.w	r3, r8, r9
 800383c:	d047      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	2b04      	cmp	r3, #4
 8003846:	d82a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003865 	.word	0x08003865
 8003854:	08003873 	.word	0x08003873
 8003858:	08003889 	.word	0x08003889
 800385c:	080038a7 	.word	0x080038a7
 8003860:	080038a7 	.word	0x080038a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b7d      	ldr	r3, [pc, #500]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a7c      	ldr	r2, [pc, #496]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e01a      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f932 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003886:	e00f      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	3328      	adds	r3, #40	; 0x28
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f9d9 	bl	8004c48 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	f023 0107 	bic.w	r1, r3, #7
 80038b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6513      	str	r3, [r2, #80]	; 0x50
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80038ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80038da:	f04f 0b00 	mov.w	fp, #0
 80038de:	ea5a 030b 	orrs.w	r3, sl, fp
 80038e2:	d054      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80038ee:	d036      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80038f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80038f4:	d82f      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d032      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80038fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003900:	d829      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003902:	2bc0      	cmp	r3, #192	; 0xc0
 8003904:	d02f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003906:	2bc0      	cmp	r3, #192	; 0xc0
 8003908:	d825      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d018      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d821      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d007      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800391a:	e01c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a4e      	ldr	r2, [pc, #312]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003928:	e01e      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f8d6 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800393e:	e013      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003944:	3328      	adds	r3, #40	; 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 f97d 	bl	8004c48 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800395c:	e004      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003970:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	4a37      	ldr	r2, [pc, #220]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6513      	str	r3, [r2, #80]	; 0x50
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800398a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800399a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d05c      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80039b8:	d03b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80039be:	d834      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c4:	d037      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	d82e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039d0:	d033      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80039d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039d6:	d828      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d01a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d822      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80039e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ec:	d007      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 80039ee:	e01c      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80039fc:	e01e      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	3308      	adds	r3, #8
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f86c 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003a12:	e013      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a18:	3328      	adds	r3, #40	; 0x28
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 f913 	bl	8004c48 <RCCEx_PLL3_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	4a02      	ldr	r2, [pc, #8]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6513      	str	r3, [r2, #80]	; 0x50
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003a5a:	bf00      	nop
 8003a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a82:	460b      	mov	r3, r1
 8003a84:	4313      	orrs	r3, r2
 8003a86:	d03a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	2b30      	cmp	r3, #48	; 0x30
 8003a90:	d01f      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d819      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d00c      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d815      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d111      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa6:	4bae      	ldr	r3, [pc, #696]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	4aad      	ldr	r2, [pc, #692]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ab2:	e011      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f811 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ae0:	4b9f      	ldr	r3, [pc, #636]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	4a9c      	ldr	r2, [pc, #624]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003afa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d051      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b28:	d035      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2e:	d82e      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b34:	d031      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b3a:	d828      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d01a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d822      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d007      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003b52:	e01c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a81      	ldr	r2, [pc, #516]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b60:	e01c      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	3308      	adds	r3, #8
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 ffba 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b76:	e011      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	3328      	adds	r3, #40	; 0x28
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f861 	bl	8004c48 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b94:	e002      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ba4:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb2:	4a6b      	ldr	r2, [pc, #428]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6513      	str	r3, [r2, #80]	; 0x50
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003bd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4313      	orrs	r3, r2
 8003be0:	d053      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bec:	d033      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d82c      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf8:	d02f      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfe:	d826      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c04:	d02b      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0a:	d820      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d012      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c16:	d81a      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d115      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c26:	3308      	adds	r3, #8
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 ff5a 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c36:	e015      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	3328      	adds	r3, #40	; 0x28
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f801 	bl	8004c48 <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7a:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ca0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	d060      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003cb6:	d039      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003cb8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003cbc:	d832      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc2:	d035      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc8:	d82c      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d031      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d826      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cda:	d02d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce0:	d820      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce6:	d012      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cec:	d81a      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d024      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf6:	d115      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 feef 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d0c:	e017      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d12:	3328      	adds	r3, #40	; 0x28
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 ff96 	bl	8004c48 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d22:	e00c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d2a:	e008      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d2c:	bf00      	nop
 8003d2e:	e006      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d30:	bf00      	nop
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d34:	bf00      	nop
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d56:	4a02      	ldr	r2, [pc, #8]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d037      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d816      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da6:	d111      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4bc4      	ldr	r3, [pc, #784]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4ac3      	ldr	r2, [pc, #780]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fe90 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dde:	4bb7      	ldr	r3, [pc, #732]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dec:	4ab3      	ldr	r2, [pc, #716]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6513      	str	r3, [r2, #80]	; 0x50
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003df8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d039      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81c      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e3d 	.word	0x08003e3d
 8003e34:	08003e4b 	.word	0x08003e4b
 8003e38:	08003e69 	.word	0x08003e69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b9f      	ldr	r3, [pc, #636]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a9e      	ldr	r2, [pc, #632]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4e:	3308      	adds	r3, #8
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fe46 	bl	8004ae4 <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e72:	4b92      	ldr	r3, [pc, #584]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	f023 0103 	bic.w	r1, r3, #3
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	4a8e      	ldr	r2, [pc, #568]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ea6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f000 8099 	beq.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb2:	4b83      	ldr	r3, [pc, #524]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a82      	ldr	r2, [pc, #520]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebe:	f7fc ff09 	bl	8000cd4 <HAL_GetTick>
 8003ec2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fc ff04 	bl	8000cd4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d903      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee0:	4b77      	ldr	r3, [pc, #476]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d173      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ef4:	4b71      	ldr	r3, [pc, #452]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f00:	4053      	eors	r3, r2
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	4b69      	ldr	r3, [pc, #420]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a68      	ldr	r2, [pc, #416]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f22:	4b66      	ldr	r3, [pc, #408]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a65      	ldr	r2, [pc, #404]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f2e:	4a63      	ldr	r2, [pc, #396]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f42:	d118      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fc fec6 	bl	8000cd4 <HAL_GetTick>
 8003f48:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4c:	e00d      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fc fec1 	bl	8000cd4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d903      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6a:	4b54      	ldr	r3, [pc, #336]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0eb      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003f76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d129      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d10e      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa0:	091a      	lsrs	r2, r3, #4
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a45      	ldr	r2, [pc, #276]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6113      	str	r3, [r2, #16]
 8003fac:	e005      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	4a42      	ldr	r2, [pc, #264]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb8:	6113      	str	r3, [r2, #16]
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f002 0301 	and.w	r3, r2, #1
 8003ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	f000 8090 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	2b28      	cmp	r3, #40	; 0x28
 8004010:	d870      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	080040fd 	.word	0x080040fd
 800401c:	080040f5 	.word	0x080040f5
 8004020:	080040f5 	.word	0x080040f5
 8004024:	080040f5 	.word	0x080040f5
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040c9 	.word	0x080040c9
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040f5 	.word	0x080040f5
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040df 	.word	0x080040df
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040f5 	.word	0x080040f5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040fd 	.word	0x080040fd
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040f5 	.word	0x080040f5
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040fd 	.word	0x080040fd
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040fd 	.word	0x080040fd
 80040bc:	58024400 	.word	0x58024400
 80040c0:	58024800 	.word	0x58024800
 80040c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	3308      	adds	r3, #8
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fd07 	bl	8004ae4 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fdae 	bl	8004c48 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004106:	4bc0      	ldr	r3, [pc, #768]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004116:	4abc      	ldr	r2, [pc, #752]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004118:	430b      	orrs	r3, r1
 800411a:	6553      	str	r3, [r2, #84]	; 0x54
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004122:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f002 0302 	and.w	r3, r2, #2
 8004132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800413c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d043      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	2b05      	cmp	r3, #5
 8004150:	d824      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	080041a5 	.word	0x080041a5
 800415c:	08004171 	.word	0x08004171
 8004160:	08004187 	.word	0x08004187
 8004164:	080041a5 	.word	0x080041a5
 8004168:	080041a5 	.word	0x080041a5
 800416c:	080041a5 	.word	0x080041a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004174:	3308      	adds	r3, #8
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fcb3 	bl	8004ae4 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418a:	3328      	adds	r3, #40	; 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd5a 	bl	8004c48 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041ae:	4b96      	ldr	r3, [pc, #600]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f023 0107 	bic.w	r1, r3, #7
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4a92      	ldr	r2, [pc, #584]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6553      	str	r3, [r2, #84]	; 0x54
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f002 0304 	and.w	r3, r2, #4
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d043      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d824      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004219 	.word	0x08004219
 8004208:	0800422f 	.word	0x0800422f
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fc5f 	bl	8004ae4 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fd06 	bl	8004c48 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004256:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f023 0107 	bic.w	r1, r3, #7
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004266:	4a68      	ldr	r2, [pc, #416]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004272:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f002 0320 	and.w	r3, r2, #32
 8004282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800428c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d055      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a2:	d033      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80042a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a8:	d82c      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d02f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d826      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ba:	d02b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80042bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042c0:	d820      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c6:	d012      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80042c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042cc:	d81a      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d022      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80042d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d6:	d115      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	3308      	adds	r3, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fbff 	bl	8004ae4 <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042ec:	e015      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f2:	3328      	adds	r3, #40	; 0x28
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fca6 	bl	8004c48 <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004302:	e00a      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800430a:	e006      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800430c:	bf00      	nop
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800432a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004332:	4a35      	ldr	r2, [pc, #212]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004334:	430b      	orrs	r3, r1
 8004336:	6553      	str	r3, [r2, #84]	; 0x54
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800433e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800434e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004358:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800435c:	460b      	mov	r3, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	d058      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800436a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800436e:	d033      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004370:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004374:	d82c      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d826      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004386:	d02b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800438c:	d820      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d012      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d81a      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d022      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d115      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a8:	3308      	adds	r3, #8
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fb99 	bl	8004ae4 <RCCEx_PLL2_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043b8:	e015      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043be:	3328      	adds	r3, #40	; 0x28
 80043c0:	2102      	movs	r1, #2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fc40 	bl	8004c48 <RCCEx_PLL3_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043ce:	e00a      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043d6:	e006      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80043d8:	bf00      	nop
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80043f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043fe:	4a02      	ldr	r2, [pc, #8]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004400:	430b      	orrs	r3, r1
 8004402:	6593      	str	r3, [r2, #88]	; 0x58
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004406:	bf00      	nop
 8004408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004410:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800442a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d055      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800443c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004440:	d033      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004442:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004446:	d82c      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444c:	d02f      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d826      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004454:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004458:	d02b      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800445a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800445e:	d820      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004464:	d012      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446a:	d81a      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004474:	d115      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447a:	3308      	adds	r3, #8
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb30 	bl	8004ae4 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800448a:	e015      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	3328      	adds	r3, #40	; 0x28
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fbd7 	bl	8004c48 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044a0:	e00a      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044a8:	e006      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044c0:	4ba1      	ldr	r3, [pc, #644]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044d0:	4a9d      	ldr	r2, [pc, #628]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6593      	str	r3, [r2, #88]	; 0x58
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 0308 	and.w	r3, r2, #8
 80044ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d01e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d10c      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800450e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004512:	3328      	adds	r3, #40	; 0x28
 8004514:	2102      	movs	r1, #2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fb96 	bl	8004c48 <RCCEx_PLL3_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004528:	4b87      	ldr	r3, [pc, #540]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	4a83      	ldr	r2, [pc, #524]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800453a:	430b      	orrs	r3, r1
 800453c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f002 0310 	and.w	r3, r2, #16
 800454a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004554:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d01e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d10c      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	3328      	adds	r3, #40	; 0x28
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fb67 	bl	8004c48 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004586:	4b70      	ldr	r3, [pc, #448]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004596:	4a6c      	ldr	r2, [pc, #432]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80045a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d03e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c8:	d022      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80045ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ce:	d81b      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80045da:	e015      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e0:	3308      	adds	r3, #8
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fa7d 	bl	8004ae4 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f6:	3328      	adds	r3, #40	; 0x28
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fb24 	bl	8004c48 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800461a:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800462a:	4a47      	ldr	r2, [pc, #284]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004636:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004646:	67bb      	str	r3, [r7, #120]	; 0x78
 8004648:	2300      	movs	r3, #0
 800464a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800464c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004662:	d01f      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004668:	d818      	bhi.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d003      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004674:	d007      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004676:	e011      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	4b33      	ldr	r3, [pc, #204]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004684:	e00f      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468a:	3328      	adds	r3, #40	; 0x28
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fada 	bl	8004c48 <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800469a:	e004      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80046a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6553      	str	r3, [r2, #84]	; 0x54
 80046c4:	e003      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80046da:	673b      	str	r3, [r7, #112]	; 0x70
 80046dc:	2300      	movs	r3, #0
 80046de:	677b      	str	r3, [r7, #116]	; 0x74
 80046e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d034      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d007      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80046fa:	e011      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4a11      	ldr	r2, [pc, #68]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004708:	e00e      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470e:	3308      	adds	r3, #8
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f9e6 	bl	8004ae4 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004728:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	4a02      	ldr	r2, [pc, #8]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004740:	430b      	orrs	r3, r1
 8004742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004750:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004760:	66bb      	str	r3, [r7, #104]	; 0x68
 8004762:	2300      	movs	r3, #0
 8004764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004766:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d00c      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004774:	3328      	adds	r3, #40	; 0x28
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fa65 	bl	8004c48 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004796:	663b      	str	r3, [r7, #96]	; 0x60
 8004798:	2300      	movs	r3, #0
 800479a:	667b      	str	r3, [r7, #100]	; 0x64
 800479c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d038      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b2:	d018      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80047b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b8:	d811      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80047ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047be:	d014      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d80b      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ce:	d106      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d0:	4bc3      	ldr	r3, [pc, #780]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4ac2      	ldr	r2, [pc, #776]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047dc:	e008      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047e4:	e004      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f8:	4bb9      	ldr	r3, [pc, #740]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	4ab5      	ldr	r2, [pc, #724]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800480a:	430b      	orrs	r3, r1
 800480c:	6553      	str	r3, [r2, #84]	; 0x54
 800480e:	e003      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004814:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004824:	65bb      	str	r3, [r7, #88]	; 0x58
 8004826:	2300      	movs	r3, #0
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004834:	4baa      	ldr	r3, [pc, #680]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004842:	4aa7      	ldr	r2, [pc, #668]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004844:	430b      	orrs	r3, r1
 8004846:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004854:	653b      	str	r3, [r7, #80]	; 0x50
 8004856:	2300      	movs	r3, #0
 8004858:	657b      	str	r3, [r7, #84]	; 0x54
 800485a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004864:	4b9e      	ldr	r3, [pc, #632]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a9b      	ldr	r2, [pc, #620]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004884:	64bb      	str	r3, [r7, #72]	; 0x48
 8004886:	2300      	movs	r3, #0
 8004888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800488e:	460b      	mov	r3, r1
 8004890:	4313      	orrs	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004894:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	4a8f      	ldr	r2, [pc, #572]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	2300      	movs	r3, #0
 80048b8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c4:	4b86      	ldr	r3, [pc, #536]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a85      	ldr	r2, [pc, #532]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ce:	6113      	str	r3, [r2, #16]
 80048d0:	4b83      	ldr	r3, [pc, #524]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048d2:	6919      	ldr	r1, [r3, #16]
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048dc:	4a80      	ldr	r2, [pc, #512]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f0:	2300      	movs	r3, #0
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048fe:	4b78      	ldr	r3, [pc, #480]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	4a74      	ldr	r2, [pc, #464]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800490e:	430b      	orrs	r3, r1
 8004910:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800491e:	633b      	str	r3, [r7, #48]	; 0x30
 8004920:	2300      	movs	r3, #0
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
 8004924:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004928:	460b      	mov	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800492e:	4b6c      	ldr	r3, [pc, #432]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493e:	4a68      	ldr	r2, [pc, #416]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	2100      	movs	r1, #0
 800494e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004956:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800495a:	460b      	mov	r3, r1
 800495c:	4313      	orrs	r3, r2
 800495e:	d011      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004964:	3308      	adds	r3, #8
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f8bb 	bl	8004ae4 <RCCEx_PLL2_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004980:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	2100      	movs	r1, #0
 800498e:	6239      	str	r1, [r7, #32]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800499a:	460b      	mov	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	d011      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a4:	3308      	adds	r3, #8
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f89b 	bl	8004ae4 <RCCEx_PLL2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80049b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	2100      	movs	r1, #0
 80049ce:	61b9      	str	r1, [r7, #24]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d011      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e4:	3308      	adds	r3, #8
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f87b 	bl	8004ae4 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80049f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	6139      	str	r1, [r7, #16]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d011      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a24:	3328      	adds	r3, #40	; 0x28
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f90d 	bl	8004c48 <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004a34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d011      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a64:	3328      	adds	r3, #40	; 0x28
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f8ed 	bl	8004c48 <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004a74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	6039      	str	r1, [r7, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d011      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa4:	3328      	adds	r3, #40	; 0x28
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f8cd 	bl	8004c48 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ac0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004ac4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400

08004ae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004af2:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d101      	bne.n	8004b02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e099      	b.n	8004c36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b02:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4e      	ldr	r2, [pc, #312]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0e:	f7fc f8e1 	bl	8000cd4 <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b16:	f7fc f8dd 	bl	8000cd4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e086      	b.n	8004c36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b34:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	493f      	ldr	r1, [pc, #252]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	; 0x28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b78:	4931      	ldr	r1, [pc, #196]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	492d      	ldr	r1, [pc, #180]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f023 0220 	bic.w	r2, r3, #32
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4928      	ldr	r1, [pc, #160]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	f023 0310 	bic.w	r3, r3, #16
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bae:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <RCCEx_PLL2_Config+0x160>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	69d2      	ldr	r2, [r2, #28]
 8004bba:	00d2      	lsls	r2, r2, #3
 8004bbc:	4920      	ldr	r1, [pc, #128]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	f043 0310 	orr.w	r3, r3, #16
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004be0:	e00f      	b.n	8004c02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bf4:	e005      	b.n	8004c02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc f861 	bl	8000cd4 <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c16:	f7fc f85d 	bl	8000cd4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	ffff0007 	.word	0xffff0007

08004c48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c56:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d101      	bne.n	8004c66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e099      	b.n	8004d9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c66:	4b4f      	ldr	r3, [pc, #316]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4e      	ldr	r2, [pc, #312]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fc f82f 	bl	8000cd4 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c7a:	f7fc f82b 	bl	8000cd4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e086      	b.n	8004d9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c8c:	4b45      	ldr	r3, [pc, #276]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	051b      	lsls	r3, r3, #20
 8004ca6:	493f      	ldr	r1, [pc, #252]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	628b      	str	r3, [r1, #40]	; 0x28
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	025b      	lsls	r3, r3, #9
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cdc:	4931      	ldr	r1, [pc, #196]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	492d      	ldr	r1, [pc, #180]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	4928      	ldr	r1, [pc, #160]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <RCCEx_PLL3_Config+0x160>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	69d2      	ldr	r2, [r2, #28]
 8004d1e:	00d2      	lsls	r2, r2, #3
 8004d20:	4920      	ldr	r1, [pc, #128]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d26:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d44:	e00f      	b.n	8004d66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d4c:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d58:	e005      	b.n	8004d66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d72:	f7fb ffaf 	bl	8000cd4 <HAL_GetTick>
 8004d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d78:	e008      	b.n	8004d8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d7a:	f7fb ffab 	bl	8000cd4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e006      	b.n	8004d9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	58024400 	.word	0x58024400
 8004da8:	ffff0007 	.word	0xffff0007

08004dac <OCTOSPI1_Init>:
* Function: Initialize OSPI configuration
* Description: None
***************************************************** ***************************************************/

void OCTOSPI1_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
	OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8004db2:	463b      	mov	r3, r7
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
 8004dc0:	615a      	str	r2, [r3, #20]

	//OSPI_PinInit(&hospi1);

   HAL_OSPI_DeInit(&hospi1); // Reset OSPI
 8004dc2:	4826      	ldr	r0, [pc, #152]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dc4:	f7fc fc2a 	bl	800161c <HAL_OSPI_DeInit>

	hospi1.Instance = OCTOSPI1; // OSPI peripheral
 8004dc8:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dca:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <OCTOSPI1_Init+0xb4>)
 8004dcc:	601a      	str	r2, [r3, #0]

	hospi1.Init.ClockPrescaler = 2; // Clock frequency division value, divide the OSPI core clock by 2 to obtain the OSPI communication drive clock
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24
	hospi1.Init.FifoThreshold = 8; // FIFO threshold
 8004dd4:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE; // Disable dual OSPI mode
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON; // Memory mode, only used in 8-wire mode
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 23; // flash size, the core board uses W25Q64 with 8M bytes, here it is set to 23, that is, 2^23
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004de8:	2217      	movs	r2, #23
 8004dea:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 1; // The time for chip select to remain high
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE; // Disable free running clock mode
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3; // mode 3
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	61da      	str	r2, [r3, #28]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED; // do not use wrap-size
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	621a      	str	r2, [r3, #32]
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE; // Sampling after half a CLK cycle
 8004e04:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE; // Do not use the data hold function
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c
	hospi1.Init.ChipSelectBoundary = 0; // disable chip select boundary function
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
	hospi1.Init.ChipSelectHighTime = 0; // Set CS to high for 0 CLK cycles after communication ends
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	615a      	str	r2, [r3, #20]
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED; // delay block bypass
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e20:	2208      	movs	r2, #8
 8004e22:	635a      	str	r2, [r3, #52]	; 0x34
   hospi1.Init.MaxTran = 0; // disable communication management function
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
   hospi1.Init.Refresh = 0; // disable refresh function
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_OSPI_Init(&hospi1); // Initialize OSPI1 settings
 8004e30:	480a      	ldr	r0, [pc, #40]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e32:	f7fc fb37 	bl	80014a4 <HAL_OSPI_Init>

	sOspiManagerCfg.ClkPort = 1; // OSPI pin allocation manager settings, use Port1's CLK
 8004e36:	2301      	movs	r3, #1
 8004e38:	603b      	str	r3, [r7, #0]
	sOspiManagerCfg.NCSPort = 1; // OSPI pin allocation manager settings, use NCS of Port1
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW; // OSPI pin allocation manager settings, using the lower 4-bit pins of Port1, IO[3:0]
 8004e3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004e42:	60fb      	str	r3, [r7, #12]

	HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE); // Initialize OSPI pin assignment manager settings
 8004e44:	463b      	mov	r3, r7
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4803      	ldr	r0, [pc, #12]	; (8004e5c <OCTOSPI1_Init+0xb0>)
 8004e4e:	f7fc fd9b 	bl	8001988 <HAL_OSPIM_Config>
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2400008c 	.word	0x2400008c
 8004e60:	52005000 	.word	0x52005000

08004e64 <OSPI_W25Qxx_Init>:
* Function: Initialize OSPI configuration, read W25Q64ID
* Description: None	
***************************************************** ***************************************************/

int8_t OSPI_W25Qxx_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
	uint32_t Device_ID; // Device ID
	
	//OSPI_PinInit(&hospi1);
	OCTOSPI1_Init(); // Initialize OSPI configuration
 8004e6a:	f7ff ff9f 	bl	8004dac <OCTOSPI1_Init>

	Device_ID = OSPI_W25Qxx_ReadID(); // read device ID
 8004e6e:	f000 f81b 	bl	8004ea8 <OSPI_W25Qxx_ReadID>
 8004e72:	6078      	str	r0, [r7, #4]
	
	if( Device_ID == W25Qxx_FLASH_ID ) // match
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <OSPI_W25Qxx_Init+0x38>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d105      	bne.n	8004e88 <OSPI_W25Qxx_Init+0x24>
	{
		printf ("W25Q64 OK,flash ID:%X\r\n",Device_ID); // initialization is successful
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4808      	ldr	r0, [pc, #32]	; (8004ea0 <OSPI_W25Qxx_Init+0x3c>)
 8004e80:	f000 f95e 	bl	8005140 <iprintf>
		return OSPI_W25Qxx_OK; // return success flag		
 8004e84:	2300      	movs	r3, #0
 8004e86:	e005      	b.n	8004e94 <OSPI_W25Qxx_Init+0x30>
	}
	else
	{
		printf ("W25Q64 ERROR!!!!! ID:%X\r\n",Device_ID); // initialization failed	
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <OSPI_W25Qxx_Init+0x40>)
 8004e8c:	f000 f958 	bl	8005140 <iprintf>
		return W25Qxx_ERROR_INIT; // return error flag
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
	}	
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	00ef4017 	.word	0x00ef4017
 8004ea0:	08005e44 	.word	0x08005e44
 8004ea4:	08005e5c 	.word	0x08005e5c

08004ea8 <OSPI_W25Qxx_ReadID>:
* Function: Initialize OSPI configuration, read device ID
* Description: None	
***************************************************** ***************************************************/

uint32_t OSPI_W25Qxx_ReadID(void)	
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b096      	sub	sp, #88	; 0x58
 8004eac:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand; // OSPI transport configuration

	uint8_t OSPI_ReceiveBuff[3]; // Store the data read by OSPI
	uint32_t W25Qxx_ID; // Device ID

	sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG; // general configuration
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
	sCommand.FlashId = HAL_OSPI_FLASH_ID_1; // flash ID
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // 1-line instruction mode
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	613b      	str	r3, [r7, #16]
	sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS; // instruction length 8 bits
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE; // disable instruction DTR mode
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE; // no address mode
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS; // Address length 24 bits
 8004ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE; // no alternate bytes
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = HAL_OSPI_DATA_1_LINE; // 1-line data mode
 8004ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE; // Disable data DTR mode
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.NbData = 3; // Length of transmitted data
 8004eda:	2303      	movs	r3, #3
 8004edc:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0; // number of dummy cycles
 8004ede:	2300      	movs	r3, #0
 8004ee0:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DQSMode = HAL_OSPI_DQS_DISABLE; // Do not use DQS
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD; // Send commands every time data is transmitted   
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	653b      	str	r3, [r7, #80]	; 0x50

	sCommand.Instruction = W25Qxx_CMD_JedecID; // Execute the read device ID command
 8004eea:	239f      	movs	r3, #159	; 0x9f
 8004eec:	60fb      	str	r3, [r7, #12]


	HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE); // send command
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	480b      	ldr	r0, [pc, #44]	; (8004f24 <OSPI_W25Qxx_ReadID+0x7c>)
 8004ef8:	f7fc fbb7 	bl	800166a <HAL_OSPI_Command>

	HAL_OSPI_Receive (&hospi1, OSPI_ReceiveBuff, HAL_OSPI_TIMEOUT_DEFAULT_VALUE); // receive data
 8004efc:	463b      	mov	r3, r7
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4619      	mov	r1, r3
 8004f04:	4807      	ldr	r0, [pc, #28]	; (8004f24 <OSPI_W25Qxx_ReadID+0x7c>)
 8004f06:	f7fc fc3d 	bl	8001784 <HAL_OSPI_Receive>

	W25Qxx_ID = (OSPI_ReceiveBuff[0] << 16) | (OSPI_ReceiveBuff[1] << 8 ) | OSPI_ReceiveBuff[2]; // Combine the obtained data into an ID
 8004f0a:	783b      	ldrb	r3, [r7, #0]
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	787b      	ldrb	r3, [r7, #1]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	4313      	orrs	r3, r2
 8004f14:	78ba      	ldrb	r2, [r7, #2]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	657b      	str	r3, [r7, #84]	; 0x54

	return W25Qxx_ID; // return ID
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3758      	adds	r7, #88	; 0x58
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	2400008c 	.word	0x2400008c

08004f28 <OSPI_W25Qxx_MemoryMappedMode>:
* Function: Set OSPI to memory mapping mode
* Description: None
***************************************************** ***************************************************/

int8_t OSPI_W25Qxx_MemoryMappedMode(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b096      	sub	sp, #88	; 0x58
 8004f2c:	af00      	add	r7, sp, #0
   OSPI_RegularCmdTypeDef sCommand; // QSPI transmission configuration
   OSPI_MemoryMappedTypeDef sMemMappedCfg; // memory mapping access parameters

   sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG; // general configuration
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
   sCommand.FlashId = HAL_OSPI_FLASH_ID_1; // flash ID
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]

   sCommand.Instruction = W25Qxx_CMD_FastReadQuad_IO; // In 1-4-4 mode (1-line instruction, 4-line address, 4-line data), fast read instruction
 8004f36:	23eb      	movs	r3, #235	; 0xeb
 8004f38:	613b      	str	r3, [r7, #16]
   sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // 1-line instruction mode
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
   sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS; // instruction length 8 bits
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE; // disable instruction DTR mode
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]

   sCommand.AddressMode = HAL_OSPI_ADDRESS_4_LINES; // 4-line address mode
 8004f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
   sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS; // Address length 24 bits
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE; // disable address DTR mode
 8004f52:	2300      	movs	r3, #0
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c

   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE; // no alternate bytes    
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
   sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; // Disable byte DTR mode
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c

   sCommand.DataMode = HAL_OSPI_DATA_4_LINES; // 4-line data mode
 8004f5e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
   sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE; // Disable data DTR mode
 8004f64:	2300      	movs	r3, #0
 8004f66:	64bb      	str	r3, [r7, #72]	; 0x48

   sCommand.DummyCycles = 6; // number of dummy cycles
 8004f68:	2306      	movs	r3, #6
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   sCommand.DQSMode = HAL_OSPI_DQS_DISABLE; // Do not use DQS
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	653b      	str	r3, [r7, #80]	; 0x50
   sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD; // Send commands every time data is transmitted   
 8004f70:	2300      	movs	r3, #0
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54

 	// write configuration
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f74:	f107 0308 	add.w	r3, r7, #8
 8004f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	480e      	ldr	r0, [pc, #56]	; (8004fb8 <OSPI_W25Qxx_MemoryMappedMode+0x90>)
 8004f80:	f7fc fb73 	bl	800166a <HAL_OSPI_Command>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <OSPI_W25Qxx_MemoryMappedMode+0x68>
	{
		return W25Qxx_ERROR_TRANSMIT; // transmission data error
 8004f8a:	f06f 0304 	mvn.w	r3, #4
 8004f8e:	e00f      	b.n	8004fb0 <OSPI_W25Qxx_MemoryMappedMode+0x88>
	}   

   sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE; // disable timeout counter, nCS remains active
 8004f90:	2300      	movs	r3, #0
 8004f92:	603b      	str	r3, [r7, #0]
   sMemMappedCfg.TimeOutPeriod = 0; // timeout period
 8004f94:	2300      	movs	r3, #0
 8004f96:	607b      	str	r3, [r7, #4]
   // enable memory-mapped mode
	if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK) // configure
 8004f98:	463b      	mov	r3, r7
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <OSPI_W25Qxx_MemoryMappedMode+0x90>)
 8004f9e:	f7fc fc95 	bl	80018cc <HAL_OSPI_MemoryMapped>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <OSPI_W25Qxx_MemoryMappedMode+0x86>
	{
		return W25Qxx_ERROR_MemoryMapped; // set memory mapping mode error
 8004fa8:	f06f 0305 	mvn.w	r3, #5
 8004fac:	e000      	b.n	8004fb0 <OSPI_W25Qxx_MemoryMappedMode+0x88>
	}
	return OSPI_W25Qxx_OK; // configured successfully
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3758      	adds	r7, #88	; 0x58
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2400008c 	.word	0x2400008c

08004fbc <std>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fca:	6083      	str	r3, [r0, #8]
 8004fcc:	8181      	strh	r1, [r0, #12]
 8004fce:	6643      	str	r3, [r0, #100]	; 0x64
 8004fd0:	81c2      	strh	r2, [r0, #14]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	; 0x5c
 8004fda:	f000 f906 	bl	80051ea <memset>
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <std+0x58>)
 8004fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <std+0x5c>)
 8004fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <std+0x60>)
 8004fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <std+0x64>)
 8004fec:	6323      	str	r3, [r4, #48]	; 0x30
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <std+0x68>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d006      	beq.n	8005004 <std+0x48>
 8004ff6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ffa:	4294      	cmp	r4, r2
 8004ffc:	d002      	beq.n	8005004 <std+0x48>
 8004ffe:	33d0      	adds	r3, #208	; 0xd0
 8005000:	429c      	cmp	r4, r3
 8005002:	d105      	bne.n	8005010 <std+0x54>
 8005004:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 b966 	b.w	80052dc <__retarget_lock_init_recursive>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005165 	.word	0x08005165
 8005018:	08005187 	.word	0x08005187
 800501c:	080051bf 	.word	0x080051bf
 8005020:	080051e3 	.word	0x080051e3
 8005024:	240000f0 	.word	0x240000f0

08005028 <stdio_exit_handler>:
 8005028:	4a02      	ldr	r2, [pc, #8]	; (8005034 <stdio_exit_handler+0xc>)
 800502a:	4903      	ldr	r1, [pc, #12]	; (8005038 <stdio_exit_handler+0x10>)
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <stdio_exit_handler+0x14>)
 800502e:	f000 b869 	b.w	8005104 <_fwalk_sglue>
 8005032:	bf00      	nop
 8005034:	24000010 	.word	0x24000010
 8005038:	08005b89 	.word	0x08005b89
 800503c:	2400001c 	.word	0x2400001c

08005040 <cleanup_stdio>:
 8005040:	6841      	ldr	r1, [r0, #4]
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <cleanup_stdio+0x34>)
 8005044:	4299      	cmp	r1, r3
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	d001      	beq.n	8005050 <cleanup_stdio+0x10>
 800504c:	f000 fd9c 	bl	8005b88 <_fflush_r>
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <cleanup_stdio+0x38>)
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <cleanup_stdio+0x1e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fd95 	bl	8005b88 <_fflush_r>
 800505e:	68e1      	ldr	r1, [r4, #12]
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <cleanup_stdio+0x3c>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d004      	beq.n	8005070 <cleanup_stdio+0x30>
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 bd8c 	b.w	8005b88 <_fflush_r>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	240000f0 	.word	0x240000f0
 8005078:	24000158 	.word	0x24000158
 800507c:	240001c0 	.word	0x240001c0

08005080 <global_stdio_init.part.0>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <global_stdio_init.part.0+0x30>)
 8005084:	4c0b      	ldr	r4, [pc, #44]	; (80050b4 <global_stdio_init.part.0+0x34>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <global_stdio_init.part.0+0x38>)
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2104      	movs	r1, #4
 8005090:	f7ff ff94 	bl	8004fbc <std>
 8005094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005098:	2201      	movs	r2, #1
 800509a:	2109      	movs	r1, #9
 800509c:	f7ff ff8e 	bl	8004fbc <std>
 80050a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050a4:	2202      	movs	r2, #2
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff bf86 	b.w	8004fbc <std>
 80050b0:	24000228 	.word	0x24000228
 80050b4:	240000f0 	.word	0x240000f0
 80050b8:	08005029 	.word	0x08005029

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 b90e 	b.w	80052de <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	24000231 	.word	0x24000231

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 b909 	b.w	80052e0 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	24000231 	.word	0x24000231

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sfp_lock_acquire>
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sfp_lock_release>
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <__sinit+0x28>)
 80050ea:	6223      	str	r3, [r4, #32]
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__sinit+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f5      	bne.n	80050e0 <__sinit+0xc>
 80050f4:	f7ff ffc4 	bl	8005080 <global_stdio_init.part.0>
 80050f8:	e7f2      	b.n	80050e0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	08005041 	.word	0x08005041
 8005100:	24000228 	.word	0x24000228

08005104 <_fwalk_sglue>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4607      	mov	r7, r0
 800510a:	4688      	mov	r8, r1
 800510c:	4614      	mov	r4, r2
 800510e:	2600      	movs	r6, #0
 8005110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005114:	f1b9 0901 	subs.w	r9, r9, #1
 8005118:	d505      	bpl.n	8005126 <_fwalk_sglue+0x22>
 800511a:	6824      	ldr	r4, [r4, #0]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d1f7      	bne.n	8005110 <_fwalk_sglue+0xc>
 8005120:	4630      	mov	r0, r6
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d907      	bls.n	800513c <_fwalk_sglue+0x38>
 800512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	d003      	beq.n	800513c <_fwalk_sglue+0x38>
 8005134:	4629      	mov	r1, r5
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	4306      	orrs	r6, r0
 800513c:	3568      	adds	r5, #104	; 0x68
 800513e:	e7e9      	b.n	8005114 <_fwalk_sglue+0x10>

08005140 <iprintf>:
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b507      	push	{r0, r1, r2, lr}
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <iprintf+0x20>)
 8005146:	ab04      	add	r3, sp, #16
 8005148:	6808      	ldr	r0, [r1, #0]
 800514a:	f853 2b04 	ldr.w	r2, [r3], #4
 800514e:	6881      	ldr	r1, [r0, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	f000 f9e9 	bl	8005528 <_vfiprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	24000068 	.word	0x24000068

08005164 <__sread>:
 8005164:	b510      	push	{r4, lr}
 8005166:	460c      	mov	r4, r1
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	f000 f868 	bl	8005240 <_read_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	bfab      	itete	ge
 8005174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005176:	89a3      	ldrhlt	r3, [r4, #12]
 8005178:	181b      	addge	r3, r3, r0
 800517a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800517e:	bfac      	ite	ge
 8005180:	6563      	strge	r3, [r4, #84]	; 0x54
 8005182:	81a3      	strhlt	r3, [r4, #12]
 8005184:	bd10      	pop	{r4, pc}

08005186 <__swrite>:
 8005186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	461f      	mov	r7, r3
 800518c:	898b      	ldrh	r3, [r1, #12]
 800518e:	05db      	lsls	r3, r3, #23
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	4616      	mov	r6, r2
 8005196:	d505      	bpl.n	80051a4 <__swrite+0x1e>
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	2302      	movs	r3, #2
 800519e:	2200      	movs	r2, #0
 80051a0:	f000 f83c 	bl	800521c <_lseek_r>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	4632      	mov	r2, r6
 80051b2:	463b      	mov	r3, r7
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	f000 b853 	b.w	8005264 <_write_r>

080051be <__sseek>:
 80051be:	b510      	push	{r4, lr}
 80051c0:	460c      	mov	r4, r1
 80051c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c6:	f000 f829 	bl	800521c <_lseek_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	bf15      	itete	ne
 80051d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80051d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051da:	81a3      	strheq	r3, [r4, #12]
 80051dc:	bf18      	it	ne
 80051de:	81a3      	strhne	r3, [r4, #12]
 80051e0:	bd10      	pop	{r4, pc}

080051e2 <__sclose>:
 80051e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e6:	f000 b809 	b.w	80051fc <_close_r>

080051ea <memset>:
 80051ea:	4402      	add	r2, r0
 80051ec:	4603      	mov	r3, r0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d100      	bne.n	80051f4 <memset+0xa>
 80051f2:	4770      	bx	lr
 80051f4:	f803 1b01 	strb.w	r1, [r3], #1
 80051f8:	e7f9      	b.n	80051ee <memset+0x4>
	...

080051fc <_close_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_close_r+0x1c>)
 8005200:	2300      	movs	r3, #0
 8005202:	4604      	mov	r4, r0
 8005204:	4608      	mov	r0, r1
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	f7fb fbd1 	bl	80009ae <_close>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_close_r+0x1a>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_close_r+0x1a>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	2400022c 	.word	0x2400022c

0800521c <_lseek_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d07      	ldr	r5, [pc, #28]	; (800523c <_lseek_r+0x20>)
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	2200      	movs	r2, #0
 8005228:	602a      	str	r2, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f7fb fbe6 	bl	80009fc <_lseek>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_lseek_r+0x1e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_lseek_r+0x1e>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	2400022c 	.word	0x2400022c

08005240 <_read_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	; (8005260 <_read_r+0x20>)
 8005244:	4604      	mov	r4, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	2200      	movs	r2, #0
 800524c:	602a      	str	r2, [r5, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fb fb74 	bl	800093c <_read>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_read_r+0x1e>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_read_r+0x1e>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	2400022c 	.word	0x2400022c

08005264 <_write_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d07      	ldr	r5, [pc, #28]	; (8005284 <_write_r+0x20>)
 8005268:	4604      	mov	r4, r0
 800526a:	4608      	mov	r0, r1
 800526c:	4611      	mov	r1, r2
 800526e:	2200      	movs	r2, #0
 8005270:	602a      	str	r2, [r5, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f7fb fb7f 	bl	8000976 <_write>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_write_r+0x1e>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b103      	cbz	r3, 8005282 <_write_r+0x1e>
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	2400022c 	.word	0x2400022c

08005288 <__errno>:
 8005288:	4b01      	ldr	r3, [pc, #4]	; (8005290 <__errno+0x8>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	24000068 	.word	0x24000068

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	; (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	; (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	; (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	; (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 fdc0 	bl	8005e2c <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	08005ebc 	.word	0x08005ebc
 80052d0:	08005ebc 	.word	0x08005ebc
 80052d4:	08005ebc 	.word	0x08005ebc
 80052d8:	08005ec0 	.word	0x08005ec0

080052dc <__retarget_lock_init_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_acquire_recursive>:
 80052de:	4770      	bx	lr

080052e0 <__retarget_lock_release_recursive>:
 80052e0:	4770      	bx	lr
	...

080052e4 <_free_r>:
 80052e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d044      	beq.n	8005374 <_free_r+0x90>
 80052ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ee:	9001      	str	r0, [sp, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f1a1 0404 	sub.w	r4, r1, #4
 80052f6:	bfb8      	it	lt
 80052f8:	18e4      	addlt	r4, r4, r3
 80052fa:	f000 f8df 	bl	80054bc <__malloc_lock>
 80052fe:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <_free_r+0x94>)
 8005300:	9801      	ldr	r0, [sp, #4]
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x30>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	b003      	add	sp, #12
 800530c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005310:	f000 b8da 	b.w	80054c8 <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x46>
 8005318:	6825      	ldr	r5, [r4, #0]
 800531a:	1961      	adds	r1, r4, r5
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1949      	addeq	r1, r1, r5
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x22>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x50>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x46>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1855      	adds	r5, r2, r1
 8005338:	42a5      	cmp	r5, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x70>
 800533c:	6824      	ldr	r4, [r4, #0]
 800533e:	4421      	add	r1, r4
 8005340:	1854      	adds	r4, r2, r1
 8005342:	42a3      	cmp	r3, r4
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x26>
 8005348:	681c      	ldr	r4, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6053      	str	r3, [r2, #4]
 800534e:	440c      	add	r4, r1
 8005350:	6014      	str	r4, [r2, #0]
 8005352:	e7da      	b.n	800530a <_free_r+0x26>
 8005354:	d902      	bls.n	800535c <_free_r+0x78>
 8005356:	230c      	movs	r3, #12
 8005358:	6003      	str	r3, [r0, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x26>
 800535c:	6825      	ldr	r5, [r4, #0]
 800535e:	1961      	adds	r1, r4, r5
 8005360:	428b      	cmp	r3, r1
 8005362:	bf04      	itt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	bf04      	itt	eq
 800536c:	1949      	addeq	r1, r1, r5
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	6054      	str	r4, [r2, #4]
 8005372:	e7ca      	b.n	800530a <_free_r+0x26>
 8005374:	b003      	add	sp, #12
 8005376:	bd30      	pop	{r4, r5, pc}
 8005378:	24000234 	.word	0x24000234

0800537c <sbrk_aligned>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0e      	ldr	r6, [pc, #56]	; (80053b8 <sbrk_aligned+0x3c>)
 8005380:	460c      	mov	r4, r1
 8005382:	6831      	ldr	r1, [r6, #0]
 8005384:	4605      	mov	r5, r0
 8005386:	b911      	cbnz	r1, 800538e <sbrk_aligned+0x12>
 8005388:	f000 fcbc 	bl	8005d04 <_sbrk_r>
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fcb7 	bl	8005d04 <_sbrk_r>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d00a      	beq.n	80053b0 <sbrk_aligned+0x34>
 800539a:	1cc4      	adds	r4, r0, #3
 800539c:	f024 0403 	bic.w	r4, r4, #3
 80053a0:	42a0      	cmp	r0, r4
 80053a2:	d007      	beq.n	80053b4 <sbrk_aligned+0x38>
 80053a4:	1a21      	subs	r1, r4, r0
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fcac 	bl	8005d04 <_sbrk_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d101      	bne.n	80053b4 <sbrk_aligned+0x38>
 80053b0:	f04f 34ff 	mov.w	r4, #4294967295
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	24000238 	.word	0x24000238

080053bc <_malloc_r>:
 80053bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c0:	1ccd      	adds	r5, r1, #3
 80053c2:	f025 0503 	bic.w	r5, r5, #3
 80053c6:	3508      	adds	r5, #8
 80053c8:	2d0c      	cmp	r5, #12
 80053ca:	bf38      	it	cc
 80053cc:	250c      	movcc	r5, #12
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	4607      	mov	r7, r0
 80053d2:	db01      	blt.n	80053d8 <_malloc_r+0x1c>
 80053d4:	42a9      	cmp	r1, r5
 80053d6:	d905      	bls.n	80053e4 <_malloc_r+0x28>
 80053d8:	230c      	movs	r3, #12
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	2600      	movs	r6, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054b8 <_malloc_r+0xfc>
 80053e8:	f000 f868 	bl	80054bc <__malloc_lock>
 80053ec:	f8d8 3000 	ldr.w	r3, [r8]
 80053f0:	461c      	mov	r4, r3
 80053f2:	bb5c      	cbnz	r4, 800544c <_malloc_r+0x90>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff ffc0 	bl	800537c <sbrk_aligned>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	4604      	mov	r4, r0
 8005400:	d155      	bne.n	80054ae <_malloc_r+0xf2>
 8005402:	f8d8 4000 	ldr.w	r4, [r8]
 8005406:	4626      	mov	r6, r4
 8005408:	2e00      	cmp	r6, #0
 800540a:	d145      	bne.n	8005498 <_malloc_r+0xdc>
 800540c:	2c00      	cmp	r4, #0
 800540e:	d048      	beq.n	80054a2 <_malloc_r+0xe6>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	4631      	mov	r1, r6
 8005414:	4638      	mov	r0, r7
 8005416:	eb04 0903 	add.w	r9, r4, r3
 800541a:	f000 fc73 	bl	8005d04 <_sbrk_r>
 800541e:	4581      	cmp	r9, r0
 8005420:	d13f      	bne.n	80054a2 <_malloc_r+0xe6>
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	1a6d      	subs	r5, r5, r1
 8005426:	4629      	mov	r1, r5
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff ffa7 	bl	800537c <sbrk_aligned>
 800542e:	3001      	adds	r0, #1
 8005430:	d037      	beq.n	80054a2 <_malloc_r+0xe6>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	442b      	add	r3, r5
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	f8d8 3000 	ldr.w	r3, [r8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d038      	beq.n	80054b2 <_malloc_r+0xf6>
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	42a2      	cmp	r2, r4
 8005444:	d12b      	bne.n	800549e <_malloc_r+0xe2>
 8005446:	2200      	movs	r2, #0
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e00f      	b.n	800546c <_malloc_r+0xb0>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	1b52      	subs	r2, r2, r5
 8005450:	d41f      	bmi.n	8005492 <_malloc_r+0xd6>
 8005452:	2a0b      	cmp	r2, #11
 8005454:	d917      	bls.n	8005486 <_malloc_r+0xca>
 8005456:	1961      	adds	r1, r4, r5
 8005458:	42a3      	cmp	r3, r4
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	bf18      	it	ne
 800545e:	6059      	strne	r1, [r3, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	bf08      	it	eq
 8005464:	f8c8 1000 	streq.w	r1, [r8]
 8005468:	5162      	str	r2, [r4, r5]
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	4638      	mov	r0, r7
 800546e:	f104 060b 	add.w	r6, r4, #11
 8005472:	f000 f829 	bl	80054c8 <__malloc_unlock>
 8005476:	f026 0607 	bic.w	r6, r6, #7
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	1af2      	subs	r2, r6, r3
 800547e:	d0ae      	beq.n	80053de <_malloc_r+0x22>
 8005480:	1b9b      	subs	r3, r3, r6
 8005482:	50a3      	str	r3, [r4, r2]
 8005484:	e7ab      	b.n	80053de <_malloc_r+0x22>
 8005486:	42a3      	cmp	r3, r4
 8005488:	6862      	ldr	r2, [r4, #4]
 800548a:	d1dd      	bne.n	8005448 <_malloc_r+0x8c>
 800548c:	f8c8 2000 	str.w	r2, [r8]
 8005490:	e7ec      	b.n	800546c <_malloc_r+0xb0>
 8005492:	4623      	mov	r3, r4
 8005494:	6864      	ldr	r4, [r4, #4]
 8005496:	e7ac      	b.n	80053f2 <_malloc_r+0x36>
 8005498:	4634      	mov	r4, r6
 800549a:	6876      	ldr	r6, [r6, #4]
 800549c:	e7b4      	b.n	8005408 <_malloc_r+0x4c>
 800549e:	4613      	mov	r3, r2
 80054a0:	e7cc      	b.n	800543c <_malloc_r+0x80>
 80054a2:	230c      	movs	r3, #12
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4638      	mov	r0, r7
 80054a8:	f000 f80e 	bl	80054c8 <__malloc_unlock>
 80054ac:	e797      	b.n	80053de <_malloc_r+0x22>
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	e7dc      	b.n	800546c <_malloc_r+0xb0>
 80054b2:	605b      	str	r3, [r3, #4]
 80054b4:	deff      	udf	#255	; 0xff
 80054b6:	bf00      	nop
 80054b8:	24000234 	.word	0x24000234

080054bc <__malloc_lock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__malloc_lock+0x8>)
 80054be:	f7ff bf0e 	b.w	80052de <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	24000230 	.word	0x24000230

080054c8 <__malloc_unlock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_unlock+0x8>)
 80054ca:	f7ff bf09 	b.w	80052e0 <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	24000230 	.word	0x24000230

080054d4 <__sfputc_r>:
 80054d4:	6893      	ldr	r3, [r2, #8]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	b410      	push	{r4}
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	da08      	bge.n	80054f2 <__sfputc_r+0x1e>
 80054e0:	6994      	ldr	r4, [r2, #24]
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	db01      	blt.n	80054ea <__sfputc_r+0x16>
 80054e6:	290a      	cmp	r1, #10
 80054e8:	d103      	bne.n	80054f2 <__sfputc_r+0x1e>
 80054ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ee:	f000 bb73 	b.w	8005bd8 <__swbuf_r>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	1c58      	adds	r0, r3, #1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	4608      	mov	r0, r1
 80054fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005500:	4770      	bx	lr

08005502 <__sfputs_r>:
 8005502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4614      	mov	r4, r2
 800550a:	18d5      	adds	r5, r2, r3
 800550c:	42ac      	cmp	r4, r5
 800550e:	d101      	bne.n	8005514 <__sfputs_r+0x12>
 8005510:	2000      	movs	r0, #0
 8005512:	e007      	b.n	8005524 <__sfputs_r+0x22>
 8005514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005518:	463a      	mov	r2, r7
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ffda 	bl	80054d4 <__sfputc_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d1f3      	bne.n	800550c <__sfputs_r+0xa>
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005528 <_vfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	460d      	mov	r5, r1
 800552e:	b09d      	sub	sp, #116	; 0x74
 8005530:	4614      	mov	r4, r2
 8005532:	4698      	mov	r8, r3
 8005534:	4606      	mov	r6, r0
 8005536:	b118      	cbz	r0, 8005540 <_vfiprintf_r+0x18>
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b90b      	cbnz	r3, 8005540 <_vfiprintf_r+0x18>
 800553c:	f7ff fdca 	bl	80050d4 <__sinit>
 8005540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005542:	07d9      	lsls	r1, r3, #31
 8005544:	d405      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	059a      	lsls	r2, r3, #22
 800554a:	d402      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 800554c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800554e:	f7ff fec6 	bl	80052de <__retarget_lock_acquire_recursive>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	d501      	bpl.n	800555c <_vfiprintf_r+0x34>
 8005558:	692b      	ldr	r3, [r5, #16]
 800555a:	b99b      	cbnz	r3, 8005584 <_vfiprintf_r+0x5c>
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f000 fb78 	bl	8005c54 <__swsetup_r>
 8005564:	b170      	cbz	r0, 8005584 <_vfiprintf_r+0x5c>
 8005566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005568:	07dc      	lsls	r4, r3, #31
 800556a:	d504      	bpl.n	8005576 <_vfiprintf_r+0x4e>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	b01d      	add	sp, #116	; 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	0598      	lsls	r0, r3, #22
 800557a:	d4f7      	bmi.n	800556c <_vfiprintf_r+0x44>
 800557c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800557e:	f7ff feaf 	bl	80052e0 <__retarget_lock_release_recursive>
 8005582:	e7f3      	b.n	800556c <_vfiprintf_r+0x44>
 8005584:	2300      	movs	r3, #0
 8005586:	9309      	str	r3, [sp, #36]	; 0x24
 8005588:	2320      	movs	r3, #32
 800558a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800558e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005592:	2330      	movs	r3, #48	; 0x30
 8005594:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005748 <_vfiprintf_r+0x220>
 8005598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800559c:	f04f 0901 	mov.w	r9, #1
 80055a0:	4623      	mov	r3, r4
 80055a2:	469a      	mov	sl, r3
 80055a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a8:	b10a      	cbz	r2, 80055ae <_vfiprintf_r+0x86>
 80055aa:	2a25      	cmp	r2, #37	; 0x25
 80055ac:	d1f9      	bne.n	80055a2 <_vfiprintf_r+0x7a>
 80055ae:	ebba 0b04 	subs.w	fp, sl, r4
 80055b2:	d00b      	beq.n	80055cc <_vfiprintf_r+0xa4>
 80055b4:	465b      	mov	r3, fp
 80055b6:	4622      	mov	r2, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa1 	bl	8005502 <__sfputs_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f000 80a9 	beq.w	8005718 <_vfiprintf_r+0x1f0>
 80055c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c8:	445a      	add	r2, fp
 80055ca:	9209      	str	r2, [sp, #36]	; 0x24
 80055cc:	f89a 3000 	ldrb.w	r3, [sl]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a1 	beq.w	8005718 <_vfiprintf_r+0x1f0>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e0:	f10a 0a01 	add.w	sl, sl, #1
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ec:	931a      	str	r3, [sp, #104]	; 0x68
 80055ee:	4654      	mov	r4, sl
 80055f0:	2205      	movs	r2, #5
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	4854      	ldr	r0, [pc, #336]	; (8005748 <_vfiprintf_r+0x220>)
 80055f8:	f7fa fe7a 	bl	80002f0 <memchr>
 80055fc:	9a04      	ldr	r2, [sp, #16]
 80055fe:	b9d8      	cbnz	r0, 8005638 <_vfiprintf_r+0x110>
 8005600:	06d1      	lsls	r1, r2, #27
 8005602:	bf44      	itt	mi
 8005604:	2320      	movmi	r3, #32
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560a:	0713      	lsls	r3, r2, #28
 800560c:	bf44      	itt	mi
 800560e:	232b      	movmi	r3, #43	; 0x2b
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005614:	f89a 3000 	ldrb.w	r3, [sl]
 8005618:	2b2a      	cmp	r3, #42	; 0x2a
 800561a:	d015      	beq.n	8005648 <_vfiprintf_r+0x120>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	4654      	mov	r4, sl
 8005620:	2000      	movs	r0, #0
 8005622:	f04f 0c0a 	mov.w	ip, #10
 8005626:	4621      	mov	r1, r4
 8005628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562c:	3b30      	subs	r3, #48	; 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d94d      	bls.n	80056ce <_vfiprintf_r+0x1a6>
 8005632:	b1b0      	cbz	r0, 8005662 <_vfiprintf_r+0x13a>
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	e014      	b.n	8005662 <_vfiprintf_r+0x13a>
 8005638:	eba0 0308 	sub.w	r3, r0, r8
 800563c:	fa09 f303 	lsl.w	r3, r9, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	46a2      	mov	sl, r4
 8005646:	e7d2      	b.n	80055ee <_vfiprintf_r+0xc6>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d19      	adds	r1, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9103      	str	r1, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbb      	ittet	lt
 8005654:	425b      	neglt	r3, r3
 8005656:	f042 0202 	orrlt.w	r2, r2, #2
 800565a:	9307      	strge	r3, [sp, #28]
 800565c:	9307      	strlt	r3, [sp, #28]
 800565e:	bfb8      	it	lt
 8005660:	9204      	strlt	r2, [sp, #16]
 8005662:	7823      	ldrb	r3, [r4, #0]
 8005664:	2b2e      	cmp	r3, #46	; 0x2e
 8005666:	d10c      	bne.n	8005682 <_vfiprintf_r+0x15a>
 8005668:	7863      	ldrb	r3, [r4, #1]
 800566a:	2b2a      	cmp	r3, #42	; 0x2a
 800566c:	d134      	bne.n	80056d8 <_vfiprintf_r+0x1b0>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9203      	str	r2, [sp, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	bfb8      	it	lt
 800567a:	f04f 33ff 	movlt.w	r3, #4294967295
 800567e:	3402      	adds	r4, #2
 8005680:	9305      	str	r3, [sp, #20]
 8005682:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005758 <_vfiprintf_r+0x230>
 8005686:	7821      	ldrb	r1, [r4, #0]
 8005688:	2203      	movs	r2, #3
 800568a:	4650      	mov	r0, sl
 800568c:	f7fa fe30 	bl	80002f0 <memchr>
 8005690:	b138      	cbz	r0, 80056a2 <_vfiprintf_r+0x17a>
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	eba0 000a 	sub.w	r0, r0, sl
 8005698:	2240      	movs	r2, #64	; 0x40
 800569a:	4082      	lsls	r2, r0
 800569c:	4313      	orrs	r3, r2
 800569e:	3401      	adds	r4, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a6:	4829      	ldr	r0, [pc, #164]	; (800574c <_vfiprintf_r+0x224>)
 80056a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ac:	2206      	movs	r2, #6
 80056ae:	f7fa fe1f 	bl	80002f0 <memchr>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d03f      	beq.n	8005736 <_vfiprintf_r+0x20e>
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <_vfiprintf_r+0x228>)
 80056b8:	bb1b      	cbnz	r3, 8005702 <_vfiprintf_r+0x1da>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3307      	adds	r3, #7
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	3308      	adds	r3, #8
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c8:	443b      	add	r3, r7
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	e768      	b.n	80055a0 <_vfiprintf_r+0x78>
 80056ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d2:	460c      	mov	r4, r1
 80056d4:	2001      	movs	r0, #1
 80056d6:	e7a6      	b.n	8005626 <_vfiprintf_r+0xfe>
 80056d8:	2300      	movs	r3, #0
 80056da:	3401      	adds	r4, #1
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	4619      	mov	r1, r3
 80056e0:	f04f 0c0a 	mov.w	ip, #10
 80056e4:	4620      	mov	r0, r4
 80056e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ea:	3a30      	subs	r2, #48	; 0x30
 80056ec:	2a09      	cmp	r2, #9
 80056ee:	d903      	bls.n	80056f8 <_vfiprintf_r+0x1d0>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0c6      	beq.n	8005682 <_vfiprintf_r+0x15a>
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	e7c4      	b.n	8005682 <_vfiprintf_r+0x15a>
 80056f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fc:	4604      	mov	r4, r0
 80056fe:	2301      	movs	r3, #1
 8005700:	e7f0      	b.n	80056e4 <_vfiprintf_r+0x1bc>
 8005702:	ab03      	add	r3, sp, #12
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	462a      	mov	r2, r5
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <_vfiprintf_r+0x22c>)
 800570a:	a904      	add	r1, sp, #16
 800570c:	4630      	mov	r0, r6
 800570e:	f3af 8000 	nop.w
 8005712:	4607      	mov	r7, r0
 8005714:	1c78      	adds	r0, r7, #1
 8005716:	d1d6      	bne.n	80056c6 <_vfiprintf_r+0x19e>
 8005718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	d405      	bmi.n	800572a <_vfiprintf_r+0x202>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	059a      	lsls	r2, r3, #22
 8005722:	d402      	bmi.n	800572a <_vfiprintf_r+0x202>
 8005724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005726:	f7ff fddb 	bl	80052e0 <__retarget_lock_release_recursive>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	065b      	lsls	r3, r3, #25
 800572e:	f53f af1d 	bmi.w	800556c <_vfiprintf_r+0x44>
 8005732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005734:	e71c      	b.n	8005570 <_vfiprintf_r+0x48>
 8005736:	ab03      	add	r3, sp, #12
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	462a      	mov	r2, r5
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <_vfiprintf_r+0x22c>)
 800573e:	a904      	add	r1, sp, #16
 8005740:	4630      	mov	r0, r6
 8005742:	f000 f879 	bl	8005838 <_printf_i>
 8005746:	e7e4      	b.n	8005712 <_vfiprintf_r+0x1ea>
 8005748:	08005e88 	.word	0x08005e88
 800574c:	08005e92 	.word	0x08005e92
 8005750:	00000000 	.word	0x00000000
 8005754:	08005503 	.word	0x08005503
 8005758:	08005e8e 	.word	0x08005e8e

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4699      	mov	r9, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a8:	1e13      	subs	r3, r2, #0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf02      	ittt	eq
 80057ce:	68e5      	ldreq	r5, [r4, #12]
 80057d0:	6833      	ldreq	r3, [r6, #0]
 80057d2:	1aed      	subeq	r5, r5, r3
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	; 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	7e0f      	ldrb	r7, [r1, #24]
 800583e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005840:	2f78      	cmp	r7, #120	; 0x78
 8005842:	4691      	mov	r9, r2
 8005844:	4680      	mov	r8, r0
 8005846:	460c      	mov	r4, r1
 8005848:	469a      	mov	sl, r3
 800584a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d4 	beq.w	8005a02 <_printf_i+0x1ca>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80c0 	beq.w	80059e0 <_printf_i+0x1a8>
 8005860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a101      	add	r1, pc, #4	; (adr r1, 8005878 <_printf_i+0x40>)
 8005874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059e9 	.word	0x080059e9
 80058a8:	08005911 	.word	0x08005911
 80058ac:	080059a3 	.word	0x080059a3
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a0b 	.word	0x08005a0b
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005911 	.word	0x08005911
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059ab 	.word	0x080059ab
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e09f      	b.n	8005a24 <_printf_i+0x1ec>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	0607      	lsls	r7, r0, #24
 80058ea:	f103 0104 	add.w	r1, r3, #4
 80058ee:	6029      	str	r1, [r5, #0]
 80058f0:	d501      	bpl.n	80058f6 <_printf_i+0xbe>
 80058f2:	681e      	ldr	r6, [r3, #0]
 80058f4:	e003      	b.n	80058fe <_printf_i+0xc6>
 80058f6:	0646      	lsls	r6, r0, #25
 80058f8:	d5fb      	bpl.n	80058f2 <_printf_i+0xba>
 80058fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058fe:	2e00      	cmp	r6, #0
 8005900:	da03      	bge.n	800590a <_printf_i+0xd2>
 8005902:	232d      	movs	r3, #45	; 0x2d
 8005904:	4276      	negs	r6, r6
 8005906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590a:	485a      	ldr	r0, [pc, #360]	; (8005a74 <_printf_i+0x23c>)
 800590c:	230a      	movs	r3, #10
 800590e:	e012      	b.n	8005936 <_printf_i+0xfe>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	1d19      	adds	r1, r3, #4
 8005916:	6029      	str	r1, [r5, #0]
 8005918:	0605      	lsls	r5, r0, #24
 800591a:	d501      	bpl.n	8005920 <_printf_i+0xe8>
 800591c:	681e      	ldr	r6, [r3, #0]
 800591e:	e002      	b.n	8005926 <_printf_i+0xee>
 8005920:	0641      	lsls	r1, r0, #25
 8005922:	d5fb      	bpl.n	800591c <_printf_i+0xe4>
 8005924:	881e      	ldrh	r6, [r3, #0]
 8005926:	4853      	ldr	r0, [pc, #332]	; (8005a74 <_printf_i+0x23c>)
 8005928:	2f6f      	cmp	r7, #111	; 0x6f
 800592a:	bf0c      	ite	eq
 800592c:	2308      	moveq	r3, #8
 800592e:	230a      	movne	r3, #10
 8005930:	2100      	movs	r1, #0
 8005932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005936:	6865      	ldr	r5, [r4, #4]
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	2d00      	cmp	r5, #0
 800593c:	bfa2      	ittt	ge
 800593e:	6821      	ldrge	r1, [r4, #0]
 8005940:	f021 0104 	bicge.w	r1, r1, #4
 8005944:	6021      	strge	r1, [r4, #0]
 8005946:	b90e      	cbnz	r6, 800594c <_printf_i+0x114>
 8005948:	2d00      	cmp	r5, #0
 800594a:	d04b      	beq.n	80059e4 <_printf_i+0x1ac>
 800594c:	4615      	mov	r5, r2
 800594e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005952:	fb03 6711 	mls	r7, r3, r1, r6
 8005956:	5dc7      	ldrb	r7, [r0, r7]
 8005958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800595c:	4637      	mov	r7, r6
 800595e:	42bb      	cmp	r3, r7
 8005960:	460e      	mov	r6, r1
 8005962:	d9f4      	bls.n	800594e <_printf_i+0x116>
 8005964:	2b08      	cmp	r3, #8
 8005966:	d10b      	bne.n	8005980 <_printf_i+0x148>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07de      	lsls	r6, r3, #31
 800596c:	d508      	bpl.n	8005980 <_printf_i+0x148>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	4299      	cmp	r1, r3
 8005974:	bfde      	ittt	le
 8005976:	2330      	movle	r3, #48	; 0x30
 8005978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800597c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005980:	1b52      	subs	r2, r2, r5
 8005982:	6122      	str	r2, [r4, #16]
 8005984:	f8cd a000 	str.w	sl, [sp]
 8005988:	464b      	mov	r3, r9
 800598a:	aa03      	add	r2, sp, #12
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff fee4 	bl	800575c <_printf_common>
 8005994:	3001      	adds	r0, #1
 8005996:	d14a      	bne.n	8005a2e <_printf_i+0x1f6>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	b004      	add	sp, #16
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	4833      	ldr	r0, [pc, #204]	; (8005a78 <_printf_i+0x240>)
 80059ac:	2778      	movs	r7, #120	; 0x78
 80059ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	6829      	ldr	r1, [r5, #0]
 80059b6:	061f      	lsls	r7, r3, #24
 80059b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059bc:	d402      	bmi.n	80059c4 <_printf_i+0x18c>
 80059be:	065f      	lsls	r7, r3, #25
 80059c0:	bf48      	it	mi
 80059c2:	b2b6      	uxthmi	r6, r6
 80059c4:	07df      	lsls	r7, r3, #31
 80059c6:	bf48      	it	mi
 80059c8:	f043 0320 	orrmi.w	r3, r3, #32
 80059cc:	6029      	str	r1, [r5, #0]
 80059ce:	bf48      	it	mi
 80059d0:	6023      	strmi	r3, [r4, #0]
 80059d2:	b91e      	cbnz	r6, 80059dc <_printf_i+0x1a4>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	2310      	movs	r3, #16
 80059de:	e7a7      	b.n	8005930 <_printf_i+0xf8>
 80059e0:	4824      	ldr	r0, [pc, #144]	; (8005a74 <_printf_i+0x23c>)
 80059e2:	e7e4      	b.n	80059ae <_printf_i+0x176>
 80059e4:	4615      	mov	r5, r2
 80059e6:	e7bd      	b.n	8005964 <_printf_i+0x12c>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6826      	ldr	r6, [r4, #0]
 80059ec:	6961      	ldr	r1, [r4, #20]
 80059ee:	1d18      	adds	r0, r3, #4
 80059f0:	6028      	str	r0, [r5, #0]
 80059f2:	0635      	lsls	r5, r6, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1c4>
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1ca>
 80059fc:	0670      	lsls	r0, r6, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1c0>
 8005a00:	8019      	strh	r1, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4615      	mov	r5, r2
 8005a08:	e7bc      	b.n	8005984 <_printf_i+0x14c>
 8005a0a:	682b      	ldr	r3, [r5, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f7fa fc6a 	bl	80002f0 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1ea>
 8005a1e:	1b40      	subs	r0, r0, r5
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e7aa      	b.n	8005984 <_printf_i+0x14c>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ad      	beq.n	8005998 <_printf_i+0x160>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x232>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a6      	b.n	800599c <_printf_i+0x164>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09d      	beq.n	8005998 <_printf_i+0x160>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x216>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x20a>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x226>
 8005a72:	bf00      	nop
 8005a74:	08005e99 	.word	0x08005e99
 8005a78:	08005eaa 	.word	0x08005eaa

08005a7c <__sflush_r>:
 8005a7c:	898a      	ldrh	r2, [r1, #12]
 8005a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	4605      	mov	r5, r0
 8005a84:	0710      	lsls	r0, r2, #28
 8005a86:	460c      	mov	r4, r1
 8005a88:	d458      	bmi.n	8005b3c <__sflush_r+0xc0>
 8005a8a:	684b      	ldr	r3, [r1, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc05      	bgt.n	8005a9c <__sflush_r+0x20>
 8005a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dc02      	bgt.n	8005a9c <__sflush_r+0x20>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	d0f9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005aa8:	682f      	ldr	r7, [r5, #0]
 8005aaa:	6a21      	ldr	r1, [r4, #32]
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	d032      	beq.n	8005b16 <__sflush_r+0x9a>
 8005ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	075a      	lsls	r2, r3, #29
 8005ab6:	d505      	bpl.n	8005ac4 <__sflush_r+0x48>
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	1ac0      	subs	r0, r0, r3
 8005abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005abe:	b10b      	cbz	r3, 8005ac4 <__sflush_r+0x48>
 8005ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ac2:	1ac0      	subs	r0, r0, r3
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aca:	6a21      	ldr	r1, [r4, #32]
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	d106      	bne.n	8005ae4 <__sflush_r+0x68>
 8005ad6:	6829      	ldr	r1, [r5, #0]
 8005ad8:	291d      	cmp	r1, #29
 8005ada:	d82b      	bhi.n	8005b34 <__sflush_r+0xb8>
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <__sflush_r+0x108>)
 8005ade:	410a      	asrs	r2, r1
 8005ae0:	07d6      	lsls	r6, r2, #31
 8005ae2:	d427      	bmi.n	8005b34 <__sflush_r+0xb8>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	6062      	str	r2, [r4, #4]
 8005ae8:	04d9      	lsls	r1, r3, #19
 8005aea:	6922      	ldr	r2, [r4, #16]
 8005aec:	6022      	str	r2, [r4, #0]
 8005aee:	d504      	bpl.n	8005afa <__sflush_r+0x7e>
 8005af0:	1c42      	adds	r2, r0, #1
 8005af2:	d101      	bne.n	8005af8 <__sflush_r+0x7c>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b903      	cbnz	r3, 8005afa <__sflush_r+0x7e>
 8005af8:	6560      	str	r0, [r4, #84]	; 0x54
 8005afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afc:	602f      	str	r7, [r5, #0]
 8005afe:	2900      	cmp	r1, #0
 8005b00:	d0c9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d002      	beq.n	8005b10 <__sflush_r+0x94>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7ff fbea 	bl	80052e4 <_free_r>
 8005b10:	2000      	movs	r0, #0
 8005b12:	6360      	str	r0, [r4, #52]	; 0x34
 8005b14:	e7c0      	b.n	8005a98 <__sflush_r+0x1c>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	1c41      	adds	r1, r0, #1
 8005b1e:	d1c8      	bne.n	8005ab2 <__sflush_r+0x36>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c5      	beq.n	8005ab2 <__sflush_r+0x36>
 8005b26:	2b1d      	cmp	r3, #29
 8005b28:	d001      	beq.n	8005b2e <__sflush_r+0xb2>
 8005b2a:	2b16      	cmp	r3, #22
 8005b2c:	d101      	bne.n	8005b32 <__sflush_r+0xb6>
 8005b2e:	602f      	str	r7, [r5, #0]
 8005b30:	e7b1      	b.n	8005a96 <__sflush_r+0x1a>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	e7ad      	b.n	8005a98 <__sflush_r+0x1c>
 8005b3c:	690f      	ldr	r7, [r1, #16]
 8005b3e:	2f00      	cmp	r7, #0
 8005b40:	d0a9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005b42:	0793      	lsls	r3, r2, #30
 8005b44:	680e      	ldr	r6, [r1, #0]
 8005b46:	bf08      	it	eq
 8005b48:	694b      	ldreq	r3, [r1, #20]
 8005b4a:	600f      	str	r7, [r1, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	2300      	movne	r3, #0
 8005b50:	eba6 0807 	sub.w	r8, r6, r7
 8005b54:	608b      	str	r3, [r1, #8]
 8005b56:	f1b8 0f00 	cmp.w	r8, #0
 8005b5a:	dd9c      	ble.n	8005a96 <__sflush_r+0x1a>
 8005b5c:	6a21      	ldr	r1, [r4, #32]
 8005b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b60:	4643      	mov	r3, r8
 8005b62:	463a      	mov	r2, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dc06      	bgt.n	8005b7a <__sflush_r+0xfe>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	e78e      	b.n	8005a98 <__sflush_r+0x1c>
 8005b7a:	4407      	add	r7, r0
 8005b7c:	eba8 0800 	sub.w	r8, r8, r0
 8005b80:	e7e9      	b.n	8005b56 <__sflush_r+0xda>
 8005b82:	bf00      	nop
 8005b84:	dfbffffe 	.word	0xdfbffffe

08005b88 <_fflush_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	b913      	cbnz	r3, 8005b98 <_fflush_r+0x10>
 8005b92:	2500      	movs	r5, #0
 8005b94:	4628      	mov	r0, r5
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	b118      	cbz	r0, 8005ba2 <_fflush_r+0x1a>
 8005b9a:	6a03      	ldr	r3, [r0, #32]
 8005b9c:	b90b      	cbnz	r3, 8005ba2 <_fflush_r+0x1a>
 8005b9e:	f7ff fa99 	bl	80050d4 <__sinit>
 8005ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f3      	beq.n	8005b92 <_fflush_r+0xa>
 8005baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bac:	07d0      	lsls	r0, r2, #31
 8005bae:	d404      	bmi.n	8005bba <_fflush_r+0x32>
 8005bb0:	0599      	lsls	r1, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_fflush_r+0x32>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb6:	f7ff fb92 	bl	80052de <__retarget_lock_acquire_recursive>
 8005bba:	4628      	mov	r0, r5
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f7ff ff5d 	bl	8005a7c <__sflush_r>
 8005bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc4:	07da      	lsls	r2, r3, #31
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	d4e4      	bmi.n	8005b94 <_fflush_r+0xc>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	059b      	lsls	r3, r3, #22
 8005bce:	d4e1      	bmi.n	8005b94 <_fflush_r+0xc>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f7ff fb85 	bl	80052e0 <__retarget_lock_release_recursive>
 8005bd6:	e7dd      	b.n	8005b94 <_fflush_r+0xc>

08005bd8 <__swbuf_r>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	460e      	mov	r6, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	4605      	mov	r5, r0
 8005be0:	b118      	cbz	r0, 8005bea <__swbuf_r+0x12>
 8005be2:	6a03      	ldr	r3, [r0, #32]
 8005be4:	b90b      	cbnz	r3, 8005bea <__swbuf_r+0x12>
 8005be6:	f7ff fa75 	bl	80050d4 <__sinit>
 8005bea:	69a3      	ldr	r3, [r4, #24]
 8005bec:	60a3      	str	r3, [r4, #8]
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	071a      	lsls	r2, r3, #28
 8005bf2:	d525      	bpl.n	8005c40 <__swbuf_r+0x68>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	b31b      	cbz	r3, 8005c40 <__swbuf_r+0x68>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	6922      	ldr	r2, [r4, #16]
 8005bfc:	1a98      	subs	r0, r3, r2
 8005bfe:	6963      	ldr	r3, [r4, #20]
 8005c00:	b2f6      	uxtb	r6, r6
 8005c02:	4283      	cmp	r3, r0
 8005c04:	4637      	mov	r7, r6
 8005c06:	dc04      	bgt.n	8005c12 <__swbuf_r+0x3a>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7ff ffbc 	bl	8005b88 <_fflush_r>
 8005c10:	b9e0      	cbnz	r0, 8005c4c <__swbuf_r+0x74>
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60a3      	str	r3, [r4, #8]
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	701e      	strb	r6, [r3, #0]
 8005c20:	6962      	ldr	r2, [r4, #20]
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d004      	beq.n	8005c32 <__swbuf_r+0x5a>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	07db      	lsls	r3, r3, #31
 8005c2c:	d506      	bpl.n	8005c3c <__swbuf_r+0x64>
 8005c2e:	2e0a      	cmp	r6, #10
 8005c30:	d104      	bne.n	8005c3c <__swbuf_r+0x64>
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f7ff ffa7 	bl	8005b88 <_fflush_r>
 8005c3a:	b938      	cbnz	r0, 8005c4c <__swbuf_r+0x74>
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c40:	4621      	mov	r1, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f806 	bl	8005c54 <__swsetup_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d0d5      	beq.n	8005bf8 <__swbuf_r+0x20>
 8005c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c50:	e7f4      	b.n	8005c3c <__swbuf_r+0x64>
	...

08005c54 <__swsetup_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <__swsetup_r+0xac>)
 8005c58:	4605      	mov	r5, r0
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	b118      	cbz	r0, 8005c68 <__swsetup_r+0x14>
 8005c60:	6a03      	ldr	r3, [r0, #32]
 8005c62:	b90b      	cbnz	r3, 8005c68 <__swsetup_r+0x14>
 8005c64:	f7ff fa36 	bl	80050d4 <__sinit>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c6e:	0718      	lsls	r0, r3, #28
 8005c70:	d422      	bmi.n	8005cb8 <__swsetup_r+0x64>
 8005c72:	06d9      	lsls	r1, r3, #27
 8005c74:	d407      	bmi.n	8005c86 <__swsetup_r+0x32>
 8005c76:	2309      	movs	r3, #9
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e034      	b.n	8005cf0 <__swsetup_r+0x9c>
 8005c86:	0758      	lsls	r0, r3, #29
 8005c88:	d512      	bpl.n	8005cb0 <__swsetup_r+0x5c>
 8005c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8c:	b141      	cbz	r1, 8005ca0 <__swsetup_r+0x4c>
 8005c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d002      	beq.n	8005c9c <__swsetup_r+0x48>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7ff fb24 	bl	80052e4 <_free_r>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f043 0308 	orr.w	r3, r3, #8
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	b94b      	cbnz	r3, 8005cd0 <__swsetup_r+0x7c>
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc6:	d003      	beq.n	8005cd0 <__swsetup_r+0x7c>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f850 	bl	8005d70 <__smakebuf_r>
 8005cd0:	89a0      	ldrh	r0, [r4, #12]
 8005cd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cd6:	f010 0301 	ands.w	r3, r0, #1
 8005cda:	d00a      	beq.n	8005cf2 <__swsetup_r+0x9e>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60a3      	str	r3, [r4, #8]
 8005ce0:	6963      	ldr	r3, [r4, #20]
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	61a3      	str	r3, [r4, #24]
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	b943      	cbnz	r3, 8005cfc <__swsetup_r+0xa8>
 8005cea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cee:	d1c4      	bne.n	8005c7a <__swsetup_r+0x26>
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
 8005cf2:	0781      	lsls	r1, r0, #30
 8005cf4:	bf58      	it	pl
 8005cf6:	6963      	ldrpl	r3, [r4, #20]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	e7f4      	b.n	8005ce6 <__swsetup_r+0x92>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e7f7      	b.n	8005cf0 <__swsetup_r+0x9c>
 8005d00:	24000068 	.word	0x24000068

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	; (8005d20 <_sbrk_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fa fe82 	bl	8000a18 <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	2400022c 	.word	0x2400022c

08005d24 <__swhatbuf_r>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	460c      	mov	r4, r1
 8005d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	b096      	sub	sp, #88	; 0x58
 8005d30:	4615      	mov	r5, r2
 8005d32:	461e      	mov	r6, r3
 8005d34:	da0d      	bge.n	8005d52 <__swhatbuf_r+0x2e>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	bf0c      	ite	eq
 8005d42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d46:	2340      	movne	r3, #64	; 0x40
 8005d48:	2000      	movs	r0, #0
 8005d4a:	6031      	str	r1, [r6, #0]
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	b016      	add	sp, #88	; 0x58
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	466a      	mov	r2, sp
 8005d54:	f000 f848 	bl	8005de8 <_fstat_r>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	dbec      	blt.n	8005d36 <__swhatbuf_r+0x12>
 8005d5c:	9901      	ldr	r1, [sp, #4]
 8005d5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d66:	4259      	negs	r1, r3
 8005d68:	4159      	adcs	r1, r3
 8005d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6e:	e7eb      	b.n	8005d48 <__swhatbuf_r+0x24>

08005d70 <__smakebuf_r>:
 8005d70:	898b      	ldrh	r3, [r1, #12]
 8005d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d74:	079d      	lsls	r5, r3, #30
 8005d76:	4606      	mov	r6, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	d507      	bpl.n	8005d8c <__smakebuf_r+0x1c>
 8005d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	2301      	movs	r3, #1
 8005d86:	6163      	str	r3, [r4, #20]
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	ab01      	add	r3, sp, #4
 8005d8e:	466a      	mov	r2, sp
 8005d90:	f7ff ffc8 	bl	8005d24 <__swhatbuf_r>
 8005d94:	9900      	ldr	r1, [sp, #0]
 8005d96:	4605      	mov	r5, r0
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff fb0f 	bl	80053bc <_malloc_r>
 8005d9e:	b948      	cbnz	r0, 8005db4 <__smakebuf_r+0x44>
 8005da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da4:	059a      	lsls	r2, r3, #22
 8005da6:	d4ef      	bmi.n	8005d88 <__smakebuf_r+0x18>
 8005da8:	f023 0303 	bic.w	r3, r3, #3
 8005dac:	f043 0302 	orr.w	r3, r3, #2
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	e7e3      	b.n	8005d7c <__smakebuf_r+0xc>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	6020      	str	r0, [r4, #0]
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	9b00      	ldr	r3, [sp, #0]
 8005dc0:	6163      	str	r3, [r4, #20]
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	6120      	str	r0, [r4, #16]
 8005dc6:	b15b      	cbz	r3, 8005de0 <__smakebuf_r+0x70>
 8005dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f000 f81d 	bl	8005e0c <_isatty_r>
 8005dd2:	b128      	cbz	r0, 8005de0 <__smakebuf_r+0x70>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	431d      	orrs	r5, r3
 8005de4:	81a5      	strh	r5, [r4, #12]
 8005de6:	e7cf      	b.n	8005d88 <__smakebuf_r+0x18>

08005de8 <_fstat_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	; (8005e08 <_fstat_r+0x20>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	f7fa fde6 	bl	80009c6 <_fstat>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d102      	bne.n	8005e04 <_fstat_r+0x1c>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	b103      	cbz	r3, 8005e04 <_fstat_r+0x1c>
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	bd38      	pop	{r3, r4, r5, pc}
 8005e06:	bf00      	nop
 8005e08:	2400022c 	.word	0x2400022c

08005e0c <_isatty_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d06      	ldr	r5, [pc, #24]	; (8005e28 <_isatty_r+0x1c>)
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	f7fa fde5 	bl	80009e6 <_isatty>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_isatty_r+0x1a>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_isatty_r+0x1a>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	2400022c 	.word	0x2400022c

08005e2c <_init>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr

08005e38 <_fini>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr
