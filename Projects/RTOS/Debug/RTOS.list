
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  080043d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000040b0  24000018  080043ec  00020018  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240040c8  080043ec  000240c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 10 .debug_info   000111d6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002878  00000000  00000000  0003125b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd8  00000000  00000000  00033ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c2b  00000000  00000000  00034ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003140e  00000000  00000000  000356db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012d58  00000000  00000000  00066ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001420c8  00000000  00000000  00079841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004124  00000000  00000000  001bb90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000036  00000000  00000000  001bfa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000018 	.word	0x24000018
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004290 	.word	0x08004290

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400001c 	.word	0x2400001c
 80002ec:	08004290 	.word	0x08004290

080002f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <vApplicationGetIdleTaskMemory+0x2c>)
 8000300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <vApplicationGetIdleTaskMemory+0x30>)
 8000306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	24000034 	.word	0x24000034
 8000320:	24000088 	.word	0x24000088

08000324 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_GPIO_Init+0x50>)
 800032c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <MX_GPIO_Init+0x50>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_GPIO_Init+0x50>)
 800033c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_GPIO_Init+0x50>)
 800034a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <MX_GPIO_Init+0x50>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_GPIO_Init+0x50>)
 800035a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	58024400 	.word	0x58024400

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 fb09 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f87b 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f7ff ffcd 	bl	8000324 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTask1, "vTask1", 100, NULL, 1, &xTask1Handle);
 800038a:	4b2c      	ldr	r3, [pc, #176]	; (800043c <main+0xc4>)
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2301      	movs	r3, #1
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2300      	movs	r3, #0
 8000394:	2264      	movs	r2, #100	; 0x64
 8000396:	492a      	ldr	r1, [pc, #168]	; (8000440 <main+0xc8>)
 8000398:	482a      	ldr	r0, [pc, #168]	; (8000444 <main+0xcc>)
 800039a:	f002 fc46 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vTask2, "vTask2", 100, NULL, 2, &xTask2Handle);
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <main+0xd0>)
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	2302      	movs	r3, #2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2300      	movs	r3, #0
 80003a8:	2264      	movs	r2, #100	; 0x64
 80003aa:	4928      	ldr	r1, [pc, #160]	; (800044c <main+0xd4>)
 80003ac:	4828      	ldr	r0, [pc, #160]	; (8000450 <main+0xd8>)
 80003ae:	f002 fc3c 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vTask3, "vTask3", 1000, NULL, 3, NULL);
 80003b2:	2300      	movs	r3, #0
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2303      	movs	r3, #3
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2300      	movs	r3, #0
 80003bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c0:	4924      	ldr	r1, [pc, #144]	; (8000454 <main+0xdc>)
 80003c2:	4825      	ldr	r0, [pc, #148]	; (8000458 <main+0xe0>)
 80003c4:	f002 fc31 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vTask4, "vTask4", 1000, NULL, 4, NULL);
 80003c8:	2300      	movs	r3, #0
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	2304      	movs	r3, #4
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2300      	movs	r3, #0
 80003d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003d6:	4921      	ldr	r1, [pc, #132]	; (800045c <main+0xe4>)
 80003d8:	4821      	ldr	r0, [pc, #132]	; (8000460 <main+0xe8>)
 80003da:	f002 fc26 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vSenderTask, "vSenderTask1", 100, (void*)100, 3, NULL);
 80003de:	2300      	movs	r3, #0
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	2303      	movs	r3, #3
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2364      	movs	r3, #100	; 0x64
 80003e8:	2264      	movs	r2, #100	; 0x64
 80003ea:	491e      	ldr	r1, [pc, #120]	; (8000464 <main+0xec>)
 80003ec:	481e      	ldr	r0, [pc, #120]	; (8000468 <main+0xf0>)
 80003ee:	f002 fc1c 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vSenderTask, "vSenderTask1", 100, (void*)200, 3, NULL);
 80003f2:	2300      	movs	r3, #0
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2303      	movs	r3, #3
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	23c8      	movs	r3, #200	; 0xc8
 80003fc:	2264      	movs	r2, #100	; 0x64
 80003fe:	4919      	ldr	r1, [pc, #100]	; (8000464 <main+0xec>)
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <main+0xf0>)
 8000402:	f002 fc12 	bl	8002c2a <xTaskCreate>
  xTaskCreate(vReceiverTask, "vReceiverTask", 100, NULL, 2, NULL);
 8000406:	2300      	movs	r3, #0
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	2302      	movs	r3, #2
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	2264      	movs	r2, #100	; 0x64
 8000412:	4916      	ldr	r1, [pc, #88]	; (800046c <main+0xf4>)
 8000414:	4816      	ldr	r0, [pc, #88]	; (8000470 <main+0xf8>)
 8000416:	f002 fc08 	bl	8002c2a <xTaskCreate>
  //
  xMutex = xSemaphoreCreateMutex();
 800041a:	2001      	movs	r0, #1
 800041c:	f002 f883 	bl	8002526 <xQueueCreateMutex>
 8000420:	4603      	mov	r3, r0
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <main+0xfc>)
 8000424:	6013      	str	r3, [r2, #0]
  if(xMutex != NULL);
  //
  xQueue = xQueueCreate(100, sizeof(uint32_t));
 8000426:	2200      	movs	r2, #0
 8000428:	2104      	movs	r1, #4
 800042a:	2064      	movs	r0, #100	; 0x64
 800042c:	f002 f808 	bl	8002440 <xQueueGenericCreate>
 8000430:	4603      	mov	r3, r0
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <main+0x100>)
 8000434:	6013      	str	r3, [r2, #0]
  if(xQueue != NULL);
  //

  vTaskStartScheduler();
 8000436:	f002 fde1 	bl	8002ffc <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800043a:	e7fe      	b.n	800043a <main+0xc2>
 800043c:	24000314 	.word	0x24000314
 8000440:	080042a8 	.word	0x080042a8
 8000444:	08000589 	.word	0x08000589
 8000448:	24000318 	.word	0x24000318
 800044c:	080042b0 	.word	0x080042b0
 8000450:	080005b1 	.word	0x080005b1
 8000454:	080042b8 	.word	0x080042b8
 8000458:	080005e9 	.word	0x080005e9
 800045c:	080042c0 	.word	0x080042c0
 8000460:	08000625 	.word	0x08000625
 8000464:	080042c8 	.word	0x080042c8
 8000468:	08000661 	.word	0x08000661
 800046c:	080042d8 	.word	0x080042d8
 8000470:	0800069d 	.word	0x0800069d
 8000474:	24000320 	.word	0x24000320
 8000478:	2400031c 	.word	0x2400031c

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b09c      	sub	sp, #112	; 0x70
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	224c      	movs	r2, #76	; 0x4c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fec6 	bl	800421c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2220      	movs	r2, #32
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f003 fec0 	bl	800421c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <SystemClock_Config+0xe0>)
 800049e:	f04f 32ff 	mov.w	r2, #4294967295
 80004a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 fbb0 	bl	8000c0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <SystemClock_Config+0xe4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <SystemClock_Config+0xe4>)
 80004b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b28      	ldr	r3, [pc, #160]	; (8000560 <SystemClock_Config+0xe4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c8:	bf00      	nop
 80004ca:	4b25      	ldr	r3, [pc, #148]	; (8000560 <SystemClock_Config+0xe4>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d6:	d1f8      	bne.n	80004ca <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d8:	2301      	movs	r3, #1
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	2302      	movs	r3, #2
 80004e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004ea:	2305      	movs	r3, #5
 80004ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 112;
 80004ee:	2370      	movs	r3, #112	; 0x70
 80004f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004fe:	2308      	movs	r3, #8
 8000500:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000502:	2300      	movs	r3, #0
 8000504:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fbb6 	bl	8000c80 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800051a:	f000 f8f3 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	233f      	movs	r3, #63	; 0x3f
 8000520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 800052e:	2350      	movs	r3, #80	; 0x50
 8000530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV8;
 8000532:	2360      	movs	r3, #96	; 0x60
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000536:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2106      	movs	r1, #6
 8000544:	4618      	mov	r0, r3
 8000546:	f000 ffcd 	bl	80014e4 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000550:	f000 f8d8 	bl	8000704 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3770      	adds	r7, #112	; 0x70
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	58024400 	.word	0x58024400
 8000560:	58024800 	.word	0x58024800

08000564 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook( void )
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
 /* This hook function does nothing but increment a counter. */
  x0++;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <vApplicationIdleHook+0x20>)
 800056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800056e:	1c50      	adds	r0, r2, #1
 8000570:	f143 0100 	adc.w	r1, r3, #0
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <vApplicationIdleHook+0x20>)
 8000576:	e9c3 0100 	strd	r0, r1, [r3]
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	24000288 	.word	0x24000288

08000588 <vTask1>:

void vTask1( void * pvParameters )
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

	while(1)
	{
         x1++;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <vTask1+0x24>)
 8000592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000596:	1c54      	adds	r4, r2, #1
 8000598:	f143 0500 	adc.w	r5, r3, #0
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <vTask1+0x24>)
 800059e:	e9c3 4500 	strd	r4, r5, [r3]
         vTaskDelay(pdMS_TO_TICKS(1000));
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f002 fcf5 	bl	8002f94 <vTaskDelay>
         x1++;
 80005aa:	e7f1      	b.n	8000590 <vTask1+0x8>
 80005ac:	24000290 	.word	0x24000290

080005b0 <vTask2>:
	}
}

void vTask2( void * pvParameters )
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 80005b8:	f002 fe2a 	bl	8003210 <xTaskGetTickCount>
 80005bc:	4603      	mov	r3, r0
 80005be:	60fb      	str	r3, [r7, #12]
	while(1)
	{
        x2++;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <vTask2+0x34>)
 80005c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c6:	1c54      	adds	r4, r2, #1
 80005c8:	f143 0500 	adc.w	r5, r3, #0
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <vTask2+0x34>)
 80005ce:	e9c3 4500 	strd	r4, r5, [r3]
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1000));
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fc5c 	bl	8002e98 <vTaskDelayUntil>
        x2++;
 80005e0:	e7ee      	b.n	80005c0 <vTask2+0x10>
 80005e2:	bf00      	nop
 80005e4:	24000298 	.word	0x24000298

080005e8 <vTask3>:
	}
}

void vTask3( void * pvParameters )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	char c[] = "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll";
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <vTask3+0x34>)
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4611      	mov	r1, r2
 80005f8:	2265      	movs	r2, #101	; 0x65
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fe3a 	bl	8004274 <memcpy>
	while(1)
	{
		//xSemaphoreTake( xMutex, pdMS_TO_TICKS(100));

		{
			memcpy(&global, c, 100);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <vTask3+0x38>)
 8000602:	4618      	mov	r0, r3
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	4619      	mov	r1, r3
 800060c:	f003 fe32 	bl	8004274 <memcpy>
		}

		//xSemaphoreGive( xMutex);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f002 fcbe 	bl	8002f94 <vTaskDelay>
			memcpy(&global, c, 100);
 8000618:	e7f2      	b.n	8000600 <vTask3+0x18>
 800061a:	bf00      	nop
 800061c:	080042e8 	.word	0x080042e8
 8000620:	240002b0 	.word	0x240002b0

08000624 <vTask4>:
	}
}

void vTask4( void * pvParameters )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    char c [] = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <vTask4+0x34>)
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4611      	mov	r1, r2
 8000634:	2265      	movs	r2, #101	; 0x65
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fe1c 	bl	8004274 <memcpy>
	while(1)
	{
		//xSemaphoreTake( xMutex, pdMS_TO_TICKS(100));

		{
			memcpy(&global, c, 100);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <vTask4+0x38>)
 800063e:	4618      	mov	r0, r3
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	4619      	mov	r1, r3
 8000648:	f003 fe14 	bl	8004274 <memcpy>
		}

		//xSemaphoreGive( xMutex);
		vTaskDelay(pdMS_TO_TICKS(900));
 800064c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000650:	f002 fca0 	bl	8002f94 <vTaskDelay>
			memcpy(&global, c, 100);
 8000654:	e7f2      	b.n	800063c <vTask4+0x18>
 8000656:	bf00      	nop
 8000658:	08004350 	.word	0x08004350
 800065c:	240002b0 	.word	0x240002b0

08000660 <vSenderTask>:
	}
}

void vSenderTask( void * pvParameters )
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    uint32_t data = (uint32_t)pvParameters;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60bb      	str	r3, [r7, #8]
    BaseType_t xStatus;

	while(1)
	{
		xStatus = xQueueSendToBack( xQueue, &data, pdMS_TO_TICKS(100));
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <vSenderTask+0x34>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2300      	movs	r3, #0
 8000676:	2264      	movs	r2, #100	; 0x64
 8000678:	f001 ff6e 	bl	8002558 <xQueueGenericSend>
 800067c:	60f8      	str	r0, [r7, #12]
 		if( xStatus == pdPASS )
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d1f3      	bne.n	800066c <vSenderTask+0xc>
		{
			send = data;
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2200      	movs	r2, #0
 8000688:	461c      	mov	r4, r3
 800068a:	4615      	mov	r5, r2
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <vSenderTask+0x38>)
 800068e:	e9c3 4500 	strd	r4, r5, [r3]
		xStatus = xQueueSendToBack( xQueue, &data, pdMS_TO_TICKS(100));
 8000692:	e7eb      	b.n	800066c <vSenderTask+0xc>
 8000694:	2400031c 	.word	0x2400031c
 8000698:	240002a0 	.word	0x240002a0

0800069c <vReceiverTask>:
		}
	}
}

void vReceiverTask( void * pvParameters )
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    uint32_t data;
    BaseType_t xStatus;

	while(1)
	{
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <vReceiverTask+0x3c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f933 	bl	8002914 <uxQueueMessagesWaiting>
		{

		}

		xStatus = xQueueReceive(xQueue, &data, 0);
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <vReceiverTask+0x3c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f107 0108 	add.w	r1, r7, #8
 80006b6:	2200      	movs	r2, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f84b 	bl	8002754 <xQueueReceive>
 80006be:	60f8      	str	r0, [r7, #12]
		if( xStatus == pdPASS )
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1ee      	bne.n	80006a4 <vReceiverTask+0x8>
		{
			receive = data;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2200      	movs	r2, #0
 80006ca:	461c      	mov	r4, r3
 80006cc:	4615      	mov	r5, r2
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <vReceiverTask+0x40>)
 80006d0:	e9c3 4500 	strd	r4, r5, [r3]
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 80006d4:	e7e6      	b.n	80006a4 <vReceiverTask+0x8>
 80006d6:	bf00      	nop
 80006d8:	2400031c 	.word	0x2400031c
 80006dc:	240002a8 	.word	0x240002a8

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f2:	f000 f98b 	bl	8000a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010000 	.word	0x40010000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x38>)
 8000718:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_MspInit+0x38>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_MspInit+0x38>)
 8000728:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	210f      	movs	r1, #15
 8000738:	f06f 0001 	mvn.w	r0, #1
 800073c:	f000 fa3e 	bl	8000bbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d844      	bhi.n	80007e4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800075a:	2200      	movs	r2, #0
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	2019      	movs	r0, #25
 8000760:	f000 fa2c 	bl	8000bbc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000764:	2019      	movs	r0, #25
 8000766:	f000 fa43 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <HAL_InitTick+0xb0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <HAL_InitTick+0xb4>)
 8000772:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000776:	4a22      	ldr	r2, [pc, #136]	; (8000800 <HAL_InitTick+0xb4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <HAL_InitTick+0xb4>)
 8000782:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800078e:	f107 020c 	add.w	r2, r7, #12
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fa19 	bl	8001bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800079e:	f001 fa01 	bl	8001ba4 <HAL_RCC_GetPCLK2Freq>
 80007a2:	4603      	mov	r3, r0
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <HAL_InitTick+0xb8>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	0c9b      	lsrs	r3, r3, #18
 80007b2:	3b01      	subs	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_InitTick+0xbc>)
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_InitTick+0xc0>)
 80007ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0xbc>)
 80007be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007c4:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_InitTick+0xbc>)
 80007c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_InitTick+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_InitTick+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <HAL_InitTick+0xbc>)
 80007d8:	f001 fa3c 	bl	8001c54 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d107      	bne.n	80007f2 <HAL_InitTick+0xa6>
 80007e2:	e001      	b.n	80007e8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e005      	b.n	80007f4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <HAL_InitTick+0xbc>)
 80007ea:	f001 fa95 	bl	8001d18 <HAL_TIM_Base_Start_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3738      	adds	r7, #56	; 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	24000008 	.word	0x24000008
 8000800:	58024400 	.word	0x58024400
 8000804:	431bde83 	.word	0x431bde83
 8000808:	24000324 	.word	0x24000324
 800080c:	40010000 	.word	0x40010000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM1_UP_IRQHandler+0x10>)
 8000842:	f001 fae1 	bl	8001e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24000324 	.word	0x24000324

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <SystemInit+0xd0>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <SystemInit+0xd0>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <SystemInit+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f003 030f 	and.w	r3, r3, #15
 800086c:	2b02      	cmp	r3, #2
 800086e:	d807      	bhi.n	8000880 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <SystemInit+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f023 030f 	bic.w	r3, r3, #15
 8000878:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <SystemInit+0xd4>)
 800087a:	f043 0303 	orr.w	r3, r3, #3
 800087e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <SystemInit+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a28      	ldr	r2, [pc, #160]	; (8000928 <SystemInit+0xd8>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <SystemInit+0xd8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <SystemInit+0xd8>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4924      	ldr	r1, [pc, #144]	; (8000928 <SystemInit+0xd8>)
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <SystemInit+0xdc>)
 800089a:	4013      	ands	r3, r2
 800089c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemInit+0xd4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d007      	beq.n	80008ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <SystemInit+0xd4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f023 030f 	bic.w	r3, r3, #15
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <SystemInit+0xd4>)
 80008b4:	f043 0303 	orr.w	r3, r3, #3
 80008b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <SystemInit+0xd8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <SystemInit+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <SystemInit+0xd8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <SystemInit+0xd8>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <SystemInit+0xe0>)
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <SystemInit+0xd8>)
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <SystemInit+0xe4>)
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <SystemInit+0xd8>)
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <SystemInit+0xe8>)
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <SystemInit+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <SystemInit+0xd8>)
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <SystemInit+0xe8>)
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <SystemInit+0xd8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <SystemInit+0xd8>)
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <SystemInit+0xe8>)
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <SystemInit+0xd8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SystemInit+0xd8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <SystemInit+0xd8>)
 8000902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <SystemInit+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <SystemInit+0xec>)
 8000910:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000914:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	52002000 	.word	0x52002000
 8000928:	58024400 	.word	0x58024400
 800092c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000930:	02020200 	.word	0x02020200
 8000934:	01ff0000 	.word	0x01ff0000
 8000938:	01010280 	.word	0x01010280
 800093c:	52004000 	.word	0x52004000

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000944:	f7ff ff84 	bl	8000850 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800096e:	f003 fc5d 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fd01 	bl	8000378 <main>
  bx  lr
 8000976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000978:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800097c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000980:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000984:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 8000988:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800098c:	240040c8 	.word	0x240040c8

08000990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f903 	bl	8000ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80009a0:	f000 ff56 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80009a4:	4602      	mov	r2, r0
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_Init+0x68>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	4913      	ldr	r1, [pc, #76]	; (8000a00 <HAL_Init+0x6c>)
 80009b2:	5ccb      	ldrb	r3, [r1, r3]
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	fa22 f303 	lsr.w	r3, r2, r3
 80009bc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_Init+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_Init+0x6c>)
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x70>)
 80009d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_Init+0x74>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff feb4 	bl	800074c <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e002      	b.n	80009f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ee:	f7ff fe8f 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024400 	.word	0x58024400
 8000a00:	080043c0 	.word	0x080043c0
 8000a04:	24000004 	.word	0x24000004
 8000a08:	24000000 	.word	0x24000000

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2400000c 	.word	0x2400000c
 8000a30:	24000370 	.word	0x24000370

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	24000370 	.word	0x24000370

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <__NVIC_SetPriorityGrouping+0x40>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x40>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	05fa0000 	.word	0x05fa0000

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff4c 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bca:	f7ff ff63 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f7ff ffb3 	bl	8000b40 <NVIC_EncodePriority>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff82 	bl	8000aec <__NVIC_SetPriority>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff56 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d00a      	beq.n	8000c36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d001      	beq.n	8000c32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e01f      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e01d      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f023 0207 	bic.w	r2, r3, #7
 8000c3e:	490f      	ldr	r1, [pc, #60]	; (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000c46:	f7ff fef5 	bl	8000a34 <HAL_GetTick>
 8000c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c4c:	e009      	b.n	8000c62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000c4e:	f7ff fef1 	bl	8000a34 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c5c:	d901      	bls.n	8000c62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e007      	b.n	8000c72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_PWREx_ConfigSupply+0x70>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6e:	d1ee      	bne.n	8000c4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	58024800 	.word	0x58024800

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f000 bc1f 	b.w	80014d2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80b3 	beq.w	8000e08 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b95      	ldr	r3, [pc, #596]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cac:	4b92      	ldr	r3, [pc, #584]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	d007      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x48>
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	2b18      	cmp	r3, #24
 8000cbc:	d112      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x64>
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d10d      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	4b8b      	ldr	r3, [pc, #556]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 8098 	beq.w	8000e06 <HAL_RCC_OscConfig+0x186>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 8093 	bne.w	8000e06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e3f6      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d106      	bne.n	8000cfc <HAL_RCC_OscConfig+0x7c>
 8000cee:	4b82      	ldr	r3, [pc, #520]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a81      	ldr	r2, [pc, #516]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e058      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d112      	bne.n	8000d2a <HAL_RCC_OscConfig+0xaa>
 8000d04:	4b7c      	ldr	r3, [pc, #496]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a7b      	ldr	r2, [pc, #492]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a78      	ldr	r2, [pc, #480]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b76      	ldr	r3, [pc, #472]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a75      	ldr	r2, [pc, #468]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e041      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d32:	d112      	bne.n	8000d5a <HAL_RCC_OscConfig+0xda>
 8000d34:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a6f      	ldr	r2, [pc, #444]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b6d      	ldr	r3, [pc, #436]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a6c      	ldr	r2, [pc, #432]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e029      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000d62:	d112      	bne.n	8000d8a <HAL_RCC_OscConfig+0x10a>
 8000d64:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a63      	ldr	r2, [pc, #396]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a60      	ldr	r2, [pc, #384]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a5d      	ldr	r2, [pc, #372]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e011      	b.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000d8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a57      	ldr	r2, [pc, #348]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b55      	ldr	r3, [pc, #340]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a54      	ldr	r2, [pc, #336]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000da8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d013      	beq.n	8000dde <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db6:	f7ff fe3d 	bl	8000a34 <HAL_GetTick>
 8000dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dbc:	e008      	b.n	8000dd0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fe39 	bl	8000a34 <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b64      	cmp	r3, #100	; 0x64
 8000dca:	d901      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e380      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f0      	beq.n	8000dbe <HAL_RCC_OscConfig+0x13e>
 8000ddc:	e014      	b.n	8000e08 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dde:	f7ff fe29 	bl	8000a34 <HAL_GetTick>
 8000de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fe25 	bl	8000a34 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b64      	cmp	r3, #100	; 0x64
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e36c      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000df8:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f0      	bne.n	8000de6 <HAL_RCC_OscConfig+0x166>
 8000e04:	e000      	b.n	8000e08 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 808c 	beq.w	8000f2e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e1e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <HAL_RCC_OscConfig+0x1bc>
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	2b18      	cmp	r3, #24
 8000e30:	d137      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x222>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d132      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <HAL_RCC_OscConfig+0x1d4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e33e      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 0219 	bic.w	r2, r3, #25
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4925      	ldr	r1, [pc, #148]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e66:	f7ff fde5 	bl	8000a34 <HAL_GetTick>
 8000e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fde1 	bl	8000a34 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e328      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	4917      	ldr	r1, [pc, #92]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea0:	e045      	b.n	8000f2e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d028      	beq.n	8000efc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 0219 	bic.w	r2, r3, #25
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	4910      	ldr	r1, [pc, #64]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fdba 	bl	8000a34 <HAL_GetTick>
 8000ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fdb6 	bl	8000a34 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e2fd      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	061b      	lsls	r3, r3, #24
 8000ef0:	4901      	ldr	r1, [pc, #4]	; (8000ef8 <HAL_RCC_OscConfig+0x278>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
 8000ef6:	e01a      	b.n	8000f2e <HAL_RCC_OscConfig+0x2ae>
 8000ef8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a96      	ldr	r2, [pc, #600]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd94 	bl	8000a34 <HAL_GetTick>
 8000f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f10:	f7ff fd90 	bl	8000a34 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e2d7      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f22:	4b8e      	ldr	r3, [pc, #568]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d06a      	beq.n	8001010 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f3a:	4b88      	ldr	r3, [pc, #544]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f44:	4b85      	ldr	r3, [pc, #532]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d007      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2e0>
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2b18      	cmp	r3, #24
 8000f54:	d11b      	bne.n	8000f8e <HAL_RCC_OscConfig+0x30e>
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d116      	bne.n	8000f8e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f60:	4b7e      	ldr	r3, [pc, #504]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2f8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b80      	cmp	r3, #128	; 0x80
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e2ac      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	4975      	ldr	r1, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f8c:	e040      	b.n	8001010 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d023      	beq.n	8000fde <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a70      	ldr	r2, [pc, #448]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fd47 	bl	8000a34 <HAL_GetTick>
 8000fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000faa:	f7ff fd43 	bl	8000a34 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e28a      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fc8:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	061b      	lsls	r3, r3, #24
 8000fd6:	4961      	ldr	r1, [pc, #388]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60cb      	str	r3, [r1, #12]
 8000fdc:	e018      	b.n	8001010 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fd23 	bl	8000a34 <HAL_GetTick>
 8000fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fd1f 	bl	8000a34 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e266      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001004:	4b55      	ldr	r3, [pc, #340]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d036      	beq.n	800108a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d019      	beq.n	8001058 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001024:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001030:	f7ff fd00 	bl	8000a34 <HAL_GetTick>
 8001034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff fcfc 	bl	8000a34 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e243      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 800104c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x3b8>
 8001056:	e018      	b.n	800108a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 800105a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800105c:	4a3f      	ldr	r2, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fce6 	bl	8000a34 <HAL_GetTick>
 8001068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fce2 	bl	8000a34 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e229      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d036      	beq.n	8001104 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fcc3 	bl	8000a34 <HAL_GetTick>
 80010ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010b2:	f7ff fcbf 	bl	8000a34 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e206      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x432>
 80010d0:	e018      	b.n	8001104 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80010de:	f7ff fca9 	bl	8000a34 <HAL_GetTick>
 80010e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e6:	f7ff fca5 	bl	8000a34 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1ec      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80af 	beq.w	8001270 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_RCC_OscConfig+0x4e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_RCC_OscConfig+0x4e0>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800111e:	f7ff fc89 	bl	8000a34 <HAL_GetTick>
 8001122:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fc85 	bl	8000a34 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e1cc      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_RCC_OscConfig+0x4e0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10b      	bne.n	8001164 <HAL_RCC_OscConfig+0x4e4>
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 800114e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001150:	4a02      	ldr	r2, [pc, #8]	; (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6713      	str	r3, [r2, #112]	; 0x70
 8001158:	e05b      	b.n	8001212 <HAL_RCC_OscConfig+0x592>
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	58024800 	.word	0x58024800
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d112      	bne.n	8001192 <HAL_RCC_OscConfig+0x512>
 800116c:	4b9d      	ldr	r3, [pc, #628]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001170:	4a9c      	ldr	r2, [pc, #624]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6713      	str	r3, [r2, #112]	; 0x70
 8001178:	4b9a      	ldr	r3, [pc, #616]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	4a99      	ldr	r2, [pc, #612]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800117e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	4b97      	ldr	r3, [pc, #604]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001188:	4a96      	ldr	r2, [pc, #600]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	6713      	str	r3, [r2, #112]	; 0x70
 8001190:	e03f      	b.n	8001212 <HAL_RCC_OscConfig+0x592>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b05      	cmp	r3, #5
 8001198:	d112      	bne.n	80011c0 <HAL_RCC_OscConfig+0x540>
 800119a:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	4a91      	ldr	r2, [pc, #580]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6713      	str	r3, [r2, #112]	; 0x70
 80011a6:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	4a8e      	ldr	r2, [pc, #568]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a8b      	ldr	r2, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
 80011be:	e028      	b.n	8001212 <HAL_RCC_OscConfig+0x592>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b85      	cmp	r3, #133	; 0x85
 80011c6:	d112      	bne.n	80011ee <HAL_RCC_OscConfig+0x56e>
 80011c8:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011cc:	4a85      	ldr	r2, [pc, #532]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6713      	str	r3, [r2, #112]	; 0x70
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d8:	4a82      	ldr	r2, [pc, #520]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011de:	6713      	str	r3, [r2, #112]	; 0x70
 80011e0:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e4:	4a7f      	ldr	r2, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6713      	str	r3, [r2, #112]	; 0x70
 80011ec:	e011      	b.n	8001212 <HAL_RCC_OscConfig+0x592>
 80011ee:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a7c      	ldr	r2, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a76      	ldr	r2, [pc, #472]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800120c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fc0b 	bl	8000a34 <HAL_GetTick>
 800121e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fc07 	bl	8000a34 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e14c      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ee      	beq.n	8001222 <HAL_RCC_OscConfig+0x5a2>
 8001244:	e014      	b.n	8001270 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001246:	f7ff fbf5 	bl	8000a34 <HAL_GetTick>
 800124a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fbf1 	bl	8000a34 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e136      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001264:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ee      	bne.n	800124e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 812b 	beq.w	80014d0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001282:	2b18      	cmp	r3, #24
 8001284:	f000 80bb 	beq.w	80013fe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2b02      	cmp	r3, #2
 800128e:	f040 8095 	bne.w	80013bc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800129c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fbc9 	bl	8000a34 <HAL_GetTick>
 80012a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fbc5 	bl	8000a34 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e10c      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80012c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c8:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x768>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	430a      	orrs	r2, r1
 80012d8:	4942      	ldr	r1, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	628b      	str	r3, [r1, #40]	; 0x28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	3b01      	subs	r3, #1
 80012ee:	025b      	lsls	r3, r3, #9
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	3b01      	subs	r3, #1
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001306:	3b01      	subs	r3, #1
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800130e:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001310:	4313      	orrs	r3, r2
 8001312:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001324:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_RCC_OscConfig+0x76c>)
 8001326:	4013      	ands	r3, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800132c:	00d2      	lsls	r2, r2, #3
 800132e:	492d      	ldr	r1, [pc, #180]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001330:	4313      	orrs	r3, r2
 8001332:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f023 020c 	bic.w	r2, r3, #12
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4928      	ldr	r1, [pc, #160]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001342:	4313      	orrs	r3, r2
 8001344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f023 0202 	bic.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4924      	ldr	r1, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001354:	4313      	orrs	r3, r2
 8001356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800136a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fb4e 	bl	8000a34 <HAL_GetTick>
 8001398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fb4a 	bl	8000a34 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e091      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x71c>
 80013ba:	e089      	b.n	80014d0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_RCC_OscConfig+0x764>)
 80013c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb34 	bl	8000a34 <HAL_GetTick>
 80013cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ce:	e00f      	b.n	80013f0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff fb30 	bl	8000a34 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d908      	bls.n	80013f0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e077      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
 80013e2:	bf00      	nop
 80013e4:	58024400 	.word	0x58024400
 80013e8:	fffffc0c 	.word	0xfffffc0c
 80013ec:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e9      	bne.n	80013d0 <HAL_RCC_OscConfig+0x750>
 80013fc:	e068      	b.n	80014d0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	2b01      	cmp	r3, #1
 8001410:	d031      	beq.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d12a      	bne.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d122      	bne.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d11a      	bne.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0a5b      	lsrs	r3, r3, #9
 8001444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d111      	bne.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d108      	bne.n	8001476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0e1b      	lsrs	r3, r3, #24
 8001468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e02b      	b.n	80014d2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	08db      	lsrs	r3, r3, #3
 8001480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001484:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d01f      	beq.n	80014d0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800149c:	f7ff faca 	bl	8000a34 <HAL_GetTick>
 80014a0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80014a2:	bf00      	nop
 80014a4:	f7ff fac6 	bl	8000a34 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d0f9      	beq.n	80014a4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_OscConfig+0x860>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	4907      	ldr	r1, [pc, #28]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_RCC_OscConfig+0x85c>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	ffff0007 	.word	0xffff0007

080014e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e19c      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b8a      	ldr	r3, [pc, #552]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d910      	bls.n	8001528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b87      	ldr	r3, [pc, #540]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 020f 	bic.w	r2, r3, #15
 800150e:	4985      	ldr	r1, [pc, #532]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b83      	ldr	r3, [pc, #524]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e184      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d010      	beq.n	8001556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001540:	429a      	cmp	r2, r3
 8001542:	d908      	bls.n	8001556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001544:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4975      	ldr	r1, [pc, #468]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001552:	4313      	orrs	r3, r2
 8001554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d010      	beq.n	8001584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	4b70      	ldr	r3, [pc, #448]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800156e:	429a      	cmp	r2, r3
 8001570:	d908      	bls.n	8001584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	496a      	ldr	r1, [pc, #424]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001580:	4313      	orrs	r3, r2
 8001582:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	d010      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	4b64      	ldr	r3, [pc, #400]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800159c:	429a      	cmp	r2, r3
 800159e:	d908      	bls.n	80015b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	495e      	ldr	r1, [pc, #376]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d908      	bls.n	80015e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4953      	ldr	r1, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d010      	beq.n	800160e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d908      	bls.n	800160e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f023 020f 	bic.w	r2, r3, #15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4947      	ldr	r1, [pc, #284]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 800160a:	4313      	orrs	r3, r2
 800160c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d055      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4940      	ldr	r1, [pc, #256]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001628:	4313      	orrs	r3, r2
 800162a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d121      	bne.n	8001684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0f6      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d107      	bne.n	800165c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d115      	bne.n	8001684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0ea      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d109      	bne.n	8001684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0de      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d6      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f023 0207 	bic.w	r2, r3, #7
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4925      	ldr	r1, [pc, #148]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 8001692:	4313      	orrs	r3, r2
 8001694:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001696:	f7ff f9cd 	bl	8000a34 <HAL_GetTick>
 800169a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169e:	f7ff f9c9 	bl	8000a34 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0be      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d1eb      	bne.n	800169e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d010      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	429a      	cmp	r2, r3
 80016e0:	d208      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f023 020f 	bic.w	r2, r3, #15
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_RCC_ClockConfig+0x244>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d214      	bcs.n	800172c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 020f 	bic.w	r2, r3, #15
 800170a:	4906      	ldr	r1, [pc, #24]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_RCC_ClockConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e086      	b.n	8001832 <HAL_RCC_ClockConfig+0x34e>
 8001724:	52002000 	.word	0x52002000
 8001728:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001744:	429a      	cmp	r2, r3
 8001746:	d208      	bcs.n	800175a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4939      	ldr	r1, [pc, #228]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 8001756:	4313      	orrs	r3, r2
 8001758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001772:	429a      	cmp	r2, r3
 8001774:	d208      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	492e      	ldr	r1, [pc, #184]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 8001784:	4313      	orrs	r3, r2
 8001786:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d010      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d208      	bcs.n	80017b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4922      	ldr	r1, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d208      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4917      	ldr	r1, [pc, #92]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017e4:	f000 f834 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4912      	ldr	r1, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x35c>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x358>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_RCC_ClockConfig+0x35c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x360>)
 800181a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x364>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x368>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe ff90 	bl	800074c <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	58024400 	.word	0x58024400
 8001840:	080043c0 	.word	0x080043c0
 8001844:	24000004 	.word	0x24000004
 8001848:	24000000 	.word	0x24000000
 800184c:	24000008 	.word	0x24000008

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001856:	4bb3      	ldr	r3, [pc, #716]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800185e:	2b18      	cmp	r3, #24
 8001860:	f200 8155 	bhi.w	8001b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	080018d1 	.word	0x080018d1
 8001870:	08001b0f 	.word	0x08001b0f
 8001874:	08001b0f 	.word	0x08001b0f
 8001878:	08001b0f 	.word	0x08001b0f
 800187c:	08001b0f 	.word	0x08001b0f
 8001880:	08001b0f 	.word	0x08001b0f
 8001884:	08001b0f 	.word	0x08001b0f
 8001888:	08001b0f 	.word	0x08001b0f
 800188c:	080018f7 	.word	0x080018f7
 8001890:	08001b0f 	.word	0x08001b0f
 8001894:	08001b0f 	.word	0x08001b0f
 8001898:	08001b0f 	.word	0x08001b0f
 800189c:	08001b0f 	.word	0x08001b0f
 80018a0:	08001b0f 	.word	0x08001b0f
 80018a4:	08001b0f 	.word	0x08001b0f
 80018a8:	08001b0f 	.word	0x08001b0f
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	08001b0f 	.word	0x08001b0f
 80018b4:	08001b0f 	.word	0x08001b0f
 80018b8:	08001b0f 	.word	0x08001b0f
 80018bc:	08001b0f 	.word	0x08001b0f
 80018c0:	08001b0f 	.word	0x08001b0f
 80018c4:	08001b0f 	.word	0x08001b0f
 80018c8:	08001b0f 	.word	0x08001b0f
 80018cc:	08001903 	.word	0x08001903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018d0:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	4a90      	ldr	r2, [pc, #576]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80018ee:	e111      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80018f0:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018f2:	61bb      	str	r3, [r7, #24]
      break;
 80018f4:	e10e      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80018f6:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80018f8:	61bb      	str	r3, [r7, #24]
      break;
 80018fa:	e10b      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80018fe:	61bb      	str	r3, [r7, #24]
      break;
 8001900:	e108      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800190c:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001916:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001918:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001922:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80e1 	beq.w	8001b08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f000 8083 	beq.w	8001a54 <HAL_RCC_GetSysClockFreq+0x204>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b02      	cmp	r3, #2
 8001952:	f200 80a1 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x248>
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x114>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d056      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001962:	e099      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	4a6b      	ldr	r2, [pc, #428]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80019ca:	e087      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80019da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80019f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a0e:	e065      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a52:	e043      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a96:	e021      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001abe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ada:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	0a5b      	lsrs	r3, r3, #9
 8001ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
      break;
 8001b0c:	e002      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b10:	61bb      	str	r3, [r7, #24]
      break;
 8001b12:	bf00      	nop
  }

  return sysclockfreq;
 8001b14:	69bb      	ldr	r3, [r7, #24]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	58024400 	.word	0x58024400
 8001b28:	03d09000 	.word	0x03d09000
 8001b2c:	003d0900 	.word	0x003d0900
 8001b30:	017d7840 	.word	0x017d7840
 8001b34:	46000000 	.word	0x46000000
 8001b38:	4c742400 	.word	0x4c742400
 8001b3c:	4a742400 	.word	0x4a742400
 8001b40:	4bbebc20 	.word	0x4bbebc20

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001b4a:	f7ff fe81 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490f      	ldr	r1, [pc, #60]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8001b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400
 8001b98:	080043c0 	.word	0x080043c0
 8001b9c:	24000004 	.word	0x24000004
 8001ba0:	24000000 	.word	0x24000000

08001ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8001ba8:	f7ff ffcc 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4904      	ldr	r1, [pc, #16]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	080043c0 	.word	0x080043c0

08001bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	223f      	movs	r2, #63	; 0x3f
 8001bde:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0207 	and.w	r2, r3, #7
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_GetClockConfig+0x7c>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetClockConfig+0x80>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 020f 	and.w	r2, r3, #15
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	52002000 	.word	0x52002000

08001c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e049      	b.n	8001cfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f841 	bl	8001d02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 fa00 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e054      	b.n	8001dda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d01d      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_TIM_Base_Start_IT+0xd4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_TIM_Base_Start_IT+0xe0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_TIM_Base_Start_IT+0xe4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_TIM_Base_Start_IT+0xe8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d115      	bne.n	8001dc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_TIM_Base_Start_IT+0xec>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d015      	beq.n	8001dd6 <HAL_TIM_Base_Start_IT+0xbe>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d011      	beq.n	8001dd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc2:	e008      	b.n	8001dd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e000      	b.n	8001dd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40010400 	.word	0x40010400
 8001dfc:	40001800 	.word	0x40001800
 8001e00:	40014000 	.word	0x40014000
 8001e04:	00010007 	.word	0x00010007

08001e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0202 	mvn.w	r2, #2
 8001e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f905 	bl	800205a <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8f7 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f908 	bl	800206e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0204 	mvn.w	r2, #4
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8db 	bl	800205a <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8cd 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8de 	bl	800206e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0208 	mvn.w	r2, #8
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8b1 	bl	800205a <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8a3 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8b4 	bl	800206e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0210 	mvn.w	r2, #16
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2208      	movs	r2, #8
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f887 	bl	800205a <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f879 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f88a 	bl	800206e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0201 	mvn.w	r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fbaa 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b80      	cmp	r3, #128	; 0x80
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f914 	bl	80021e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d10e      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	d107      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f907 	bl	80021f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d10e      	bne.n	8002012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d107      	bne.n	8002012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800200a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f838 	bl	8002082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b20      	cmp	r3, #32
 800201e:	d10e      	bne.n	800203e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d107      	bne.n	800203e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f06f 0220 	mvn.w	r2, #32
 8002036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8c7 	bl	80021cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a40      	ldr	r2, [pc, #256]	; (80021ac <TIM_Base_SetConfig+0x114>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d00f      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <TIM_Base_SetConfig+0x118>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00b      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <TIM_Base_SetConfig+0x11c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <TIM_Base_SetConfig+0x120>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <TIM_Base_SetConfig+0x124>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d108      	bne.n	80020ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <TIM_Base_SetConfig+0x114>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d01b      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <TIM_Base_SetConfig+0x118>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d017      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <TIM_Base_SetConfig+0x11c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <TIM_Base_SetConfig+0x120>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00f      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a29      	ldr	r2, [pc, #164]	; (80021bc <TIM_Base_SetConfig+0x124>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <TIM_Base_SetConfig+0x128>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <TIM_Base_SetConfig+0x12c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <TIM_Base_SetConfig+0x130>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <TIM_Base_SetConfig+0x128>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <TIM_Base_SetConfig+0x12c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <TIM_Base_SetConfig+0x130>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d103      	bne.n	8002198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800

080021cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f103 0208 	add.w	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f103 0208 	add.w	r2, r3, #8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0208 	add.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d103      	bne.n	80022ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e00c      	b.n	80022e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3308      	adds	r3, #8
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e002      	b.n	80022d8 <vListInsert+0x2e>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d2f6      	bcs.n	80022d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6892      	ldr	r2, [r2, #8]
 8002332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d103      	bne.n	8002350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800239a:	f001 fc73 	bl	8003c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	3b01      	subs	r3, #1
 80023cc:	68f9      	ldr	r1, [r7, #12]
 80023ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	441a      	add	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d114      	bne.n	800241a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01a      	beq.n	800242e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3310      	adds	r3, #16
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f84f 	bl	80034a0 <xTaskRemoveFromEventList>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <xQueueGenericReset+0xcc>)
 800240a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	e009      	b.n	800242e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3310      	adds	r3, #16
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fef2 	bl	8002208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3324      	adds	r3, #36	; 0x24
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff feed 	bl	8002208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800242e:	f001 fc59 	bl	8003ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	e000ed04 	.word	0xe000ed04

08002440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	613b      	str	r3, [r7, #16]
}
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3348      	adds	r3, #72	; 0x48
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fce5 	bl	8003e48 <pvPortMalloc>
 800247e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d011      	beq.n	80024aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3348      	adds	r3, #72	; 0x48
 800248e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f805 	bl	80024b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024aa:	69bb      	ldr	r3, [r7, #24]
	}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e002      	b.n	80024d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024e2:	2101      	movs	r1, #1
 80024e4:	69b8      	ldr	r0, [r7, #24]
 80024e6:	f7ff ff43 	bl	8002370 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002512:	2300      	movs	r3, #0
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f81d 	bl	8002558 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	461a      	mov	r2, r3
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff7e 	bl	8002440 <xQueueGenericCreate>
 8002544:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff ffd3 	bl	80024f2 <prvInitialiseMutex>

		return xNewQueue;
 800254c:	68fb      	ldr	r3, [r7, #12]
	}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <xQueueGenericSend+0x32>
	__asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <xQueueGenericSend+0x40>
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <xQueueGenericSend+0x44>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <xQueueGenericSend+0x46>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <xQueueGenericSend+0x60>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d103      	bne.n	80025c6 <xQueueGenericSend+0x6e>
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <xQueueGenericSend+0x72>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <xQueueGenericSend+0x74>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	623b      	str	r3, [r7, #32]
}
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025e6:	f001 f919 	bl	800381c <xTaskGetSchedulerState>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <xQueueGenericSend+0x9e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <xQueueGenericSend+0xa2>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <xQueueGenericSend+0xa4>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSend+0xbe>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	61fb      	str	r3, [r7, #28]
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002616:	f001 fb35 	bl	8003c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <xQueueGenericSend+0xd4>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d129      	bne.n	8002680 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002632:	f000 f98d 	bl	8002950 <prvCopyDataToQueue>
 8002636:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	3324      	adds	r3, #36	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f000 ff2b 	bl	80034a0 <xTaskRemoveFromEventList>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002650:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <xQueueGenericSend+0x1f8>)
 8002652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	e00a      	b.n	8002678 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <xQueueGenericSend+0x1f8>)
 800266a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002678:	f001 fb34 	bl	8003ce4 <vPortExitCritical>
				return pdPASS;
 800267c:	2301      	movs	r3, #1
 800267e:	e063      	b.n	8002748 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002686:	f001 fb2d 	bl	8003ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800268a:	2300      	movs	r3, #0
 800268c:	e05c      	b.n	8002748 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4618      	mov	r0, r3
 800269a:	f000 ff63 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800269e:	2301      	movs	r3, #1
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026a2:	f001 fb1f 	bl	8003ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026a6:	f000 fd09 	bl	80030bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026aa:	f001 faeb 	bl	8003c84 <vPortEnterCritical>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d103      	bne.n	80026c4 <xQueueGenericSend+0x16c>
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d103      	bne.n	80026da <xQueueGenericSend+0x182>
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026da:	f001 fb03 	bl	8003ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026de:	1d3a      	adds	r2, r7, #4
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 ff52 	bl	8003590 <xTaskCheckForTimeOut>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d124      	bne.n	800273c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f4:	f000 fa24 	bl	8002b40 <prvIsQueueFull>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d018      	beq.n	8002730 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	3310      	adds	r3, #16
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fea6 	bl	8003458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800270c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800270e:	f000 f9af 	bl	8002a70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002712:	f000 fce1 	bl	80030d8 <xTaskResumeAll>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f af7c 	bne.w	8002616 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <xQueueGenericSend+0x1f8>)
 8002720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	e772      	b.n	8002616 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002732:	f000 f99d 	bl	8002a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002736:	f000 fccf 	bl	80030d8 <xTaskResumeAll>
 800273a:	e76c      	b.n	8002616 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800273c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800273e:	f000 f997 	bl	8002a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002742:	f000 fcc9 	bl	80030d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002746:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002748:	4618      	mov	r0, r3
 800274a:	3738      	adds	r7, #56	; 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <xQueueReceive+0x30>
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	623b      	str	r3, [r7, #32]
}
 8002780:	bf00      	nop
 8002782:	e7fe      	b.n	8002782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <xQueueReceive+0x3e>
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xQueueReceive+0x42>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueReceive+0x44>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueReceive+0x5e>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61fb      	str	r3, [r7, #28]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027b2:	f001 f833 	bl	800381c <xTaskGetSchedulerState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <xQueueReceive+0x6e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <xQueueReceive+0x72>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <xQueueReceive+0x74>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <xQueueReceive+0x8e>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	61bb      	str	r3, [r7, #24]
}
 80027de:	bf00      	nop
 80027e0:	e7fe      	b.n	80027e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027e2:	f001 fa4f 	bl	8003c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01f      	beq.n	8002832 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f6:	f000 f915 	bl	8002a24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00f      	beq.n	800282a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	3310      	adds	r3, #16
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fe46 	bl	80034a0 <xTaskRemoveFromEventList>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <xQueueReceive+0x1bc>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800282a:	f001 fa5b 	bl	8003ce4 <vPortExitCritical>
				return pdPASS;
 800282e:	2301      	movs	r3, #1
 8002830:	e069      	b.n	8002906 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002838:	f001 fa54 	bl	8003ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800283c:	2300      	movs	r3, #0
 800283e:	e062      	b.n	8002906 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fe8a 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002854:	f001 fa46 	bl	8003ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002858:	f000 fc30 	bl	80030bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800285c:	f001 fa12 	bl	8003c84 <vPortEnterCritical>
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002866:	b25b      	sxtb	r3, r3
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d103      	bne.n	8002876 <xQueueReceive+0x122>
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287c:	b25b      	sxtb	r3, r3
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d103      	bne.n	800288c <xQueueReceive+0x138>
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800288c:	f001 fa2a 	bl	8003ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002890:	1d3a      	adds	r2, r7, #4
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fe79 	bl	8003590 <xTaskCheckForTimeOut>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d123      	bne.n	80028ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a6:	f000 f935 	bl	8002b14 <prvIsQueueEmpty>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fdcd 	bl	8003458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c0:	f000 f8d6 	bl	8002a70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028c4:	f000 fc08 	bl	80030d8 <xTaskResumeAll>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d189      	bne.n	80027e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <xQueueReceive+0x1bc>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	e780      	b.n	80027e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e2:	f000 f8c5 	bl	8002a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e6:	f000 fbf7 	bl	80030d8 <xTaskResumeAll>
 80028ea:	e77a      	b.n	80027e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ee:	f000 f8bf 	bl	8002a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028f2:	f000 fbf1 	bl	80030d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f8:	f000 f90c 	bl	8002b14 <prvIsQueueEmpty>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f43f af6f 	beq.w	80027e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002906:	4618      	mov	r0, r3
 8002908:	3730      	adds	r7, #48	; 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	60bb      	str	r3, [r7, #8]
}
 8002934:	bf00      	nop
 8002936:	e7fe      	b.n	8002936 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8002938:	f001 f9a4 	bl	8003c84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8002942:	f001 f9cf 	bl	8003ce4 <vPortExitCritical>

	return uxReturn;
 8002946:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d14d      	bne.n	8002a12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ff6c 	bl	8003858 <xTaskPriorityDisinherit>
 8002980:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e043      	b.n	8002a12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d119      	bne.n	80029c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6858      	ldr	r0, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	461a      	mov	r2, r3
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	f001 fc6a 	bl	8004274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	441a      	add	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d32b      	bcc.n	8002a12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e026      	b.n	8002a12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68d8      	ldr	r0, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	461a      	mov	r2, r3
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	f001 fc50 	bl	8004274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	425b      	negs	r3, r3
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d207      	bcs.n	8002a00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	425b      	negs	r3, r3
 80029fa:	441a      	add	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d105      	bne.n	8002a12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a1a:	697b      	ldr	r3, [r7, #20]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d018      	beq.n	8002a68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	441a      	add	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d303      	bcc.n	8002a58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68d9      	ldr	r1, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	461a      	mov	r2, r3
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f001 fc06 	bl	8004274 <memcpy>
	}
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a78:	f001 f904 	bl	8003c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a84:	e011      	b.n	8002aaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3324      	adds	r3, #36	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fd04 	bl	80034a0 <xTaskRemoveFromEventList>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a9e:	f000 fdd9 	bl	8003654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	dce9      	bgt.n	8002a86 <prvUnlockQueue+0x16>
 8002ab2:	e000      	b.n	8002ab6 <prvUnlockQueue+0x46>
					break;
 8002ab4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	22ff      	movs	r2, #255	; 0xff
 8002aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002abe:	f001 f911 	bl	8003ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ac2:	f001 f8df 	bl	8003c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002acc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ace:	e011      	b.n	8002af4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3310      	adds	r3, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fcdf 	bl	80034a0 <xTaskRemoveFromEventList>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ae8:	f000 fdb4 	bl	8003654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002af4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	dce9      	bgt.n	8002ad0 <prvUnlockQueue+0x60>
 8002afc:	e000      	b.n	8002b00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002afe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	22ff      	movs	r2, #255	; 0xff
 8002b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b08:	f001 f8ec 	bl	8003ce4 <vPortExitCritical>
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b1c:	f001 f8b2 	bl	8003c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e001      	b.n	8002b32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b32:	f001 f8d7 	bl	8003ce4 <vPortExitCritical>

	return xReturn;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b48:	f001 f89c 	bl	8003c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d102      	bne.n	8002b5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e001      	b.n	8002b62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b62:	f001 f8bf 	bl	8003ce4 <vPortExitCritical>

	return xReturn;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	623b      	str	r3, [r7, #32]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61fb      	str	r3, [r7, #28]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bb6:	2354      	movs	r3, #84	; 0x54
 8002bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b54      	cmp	r3, #84	; 0x54
 8002bbe:	d00a      	beq.n	8002bd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61bb      	str	r3, [r7, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01e      	beq.n	8002c1c <xTaskCreateStatic+0xac>
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f850 	bl	8002cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c16:	f000 f8d5 	bl	8002dc4 <prvAddNewTaskToReadyList>
 8002c1a:	e001      	b.n	8002c20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c20:	697b      	ldr	r3, [r7, #20]
	}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08c      	sub	sp, #48	; 0x30
 8002c2e:	af04      	add	r7, sp, #16
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f902 	bl	8003e48 <pvPortMalloc>
 8002c44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c4c:	2054      	movs	r0, #84	; 0x54
 8002c4e:	f001 f8fb 	bl	8003e48 <pvPortMalloc>
 8002c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c60:	e005      	b.n	8002c6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f001 f9bc 	bl	8003fe0 <vPortFree>
 8002c68:	e001      	b.n	8002c6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9303      	str	r3, [sp, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f80e 	bl	8002cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c98:	69f8      	ldr	r0, [r7, #28]
 8002c9a:	f000 f893 	bl	8002dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e002      	b.n	8002caa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002caa:	69bb      	ldr	r3, [r7, #24]
	}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002ccc:	440b      	add	r3, r1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f023 0307 	bic.w	r3, r3, #7
 8002cda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	617b      	str	r3, [r7, #20]
}
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e012      	b.n	8002d2e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	7819      	ldrb	r1, [r3, #0]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	3334      	adds	r3, #52	; 0x34
 8002d18:	460a      	mov	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d9e9      	bls.n	8002d08 <prvInitialiseNewTask+0x54>
 8002d34:	e000      	b.n	8002d38 <prvInitialiseNewTask+0x84>
			{
				break;
 8002d36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d40:	e003      	b.n	8002d4a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d901      	bls.n	8002d54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d50:	2306      	movs	r3, #6
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	2200      	movs	r2, #0
 8002d64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fa6c 	bl	8002248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	3318      	adds	r3, #24
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fa67 	bl	8002248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	f1c3 0207 	rsb	r2, r3, #7
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	69b8      	ldr	r0, [r7, #24]
 8002da4:	f000 fe44 	bl	8003a30 <pxPortInitialiseStack>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dba:	bf00      	nop
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dcc:	f000 ff5a 	bl	8003c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <prvAddNewTaskToReadyList+0xb8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <prvAddNewTaskToReadyList+0xb8>)
 8002dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <prvAddNewTaskToReadyList+0xbc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002de2:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <prvAddNewTaskToReadyList+0xbc>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <prvAddNewTaskToReadyList+0xb8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d110      	bne.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002df0:	f000 fc56 	bl	80036a0 <prvInitialiseTaskLists>
 8002df4:	e00d      	b.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <prvAddNewTaskToReadyList+0xc0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <prvAddNewTaskToReadyList+0xbc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d802      	bhi.n	8002e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <prvAddNewTaskToReadyList+0xbc>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <prvAddNewTaskToReadyList+0xc4>)
 8002e1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <prvAddNewTaskToReadyList+0xc8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <prvAddNewTaskToReadyList+0xc8>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <prvAddNewTaskToReadyList+0xcc>)
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7ff fa0c 	bl	8002262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e4a:	f000 ff4b 	bl	8003ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <prvAddNewTaskToReadyList+0xc0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <prvAddNewTaskToReadyList+0xbc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d207      	bcs.n	8002e74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <prvAddNewTaskToReadyList+0xd0>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	24000474 	.word	0x24000474
 8002e80:	24000374 	.word	0x24000374
 8002e84:	24000480 	.word	0x24000480
 8002e88:	24000490 	.word	0x24000490
 8002e8c:	2400047c 	.word	0x2400047c
 8002e90:	24000378 	.word	0x24000378
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	617b      	str	r3, [r7, #20]
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <vTaskDelayUntil+0x46>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	613b      	str	r3, [r7, #16]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <vTaskDelayUntil+0xf0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <vTaskDelayUntil+0x64>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	60fb      	str	r3, [r7, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002efc:	f000 f8de 	bl	80030bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <vTaskDelayUntil+0xf4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d20b      	bcs.n	8002f32 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d211      	bcs.n	8002f48 <vTaskDelayUntil+0xb0>
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d90d      	bls.n	8002f48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e00a      	b.n	8002f48 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d303      	bcc.n	8002f44 <vTaskDelayUntil+0xac>
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d901      	bls.n	8002f48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fd01 	bl	8003964 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002f62:	f000 f8b9 	bl	80030d8 <xTaskResumeAll>
 8002f66:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <vTaskDelayUntil+0xf8>)
 8002f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2400049c 	.word	0x2400049c
 8002f8c:	24000478 	.word	0x24000478
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d017      	beq.n	8002fd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <vTaskDelay+0x60>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <vTaskDelay+0x30>
	__asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	60bb      	str	r3, [r7, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	e7fe      	b.n	8002fc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fc4:	f000 f87a 	bl	80030bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fc8:	2100      	movs	r1, #0
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fcca 	bl	8003964 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fd0:	f000 f882 	bl	80030d8 <xTaskResumeAll>
 8002fd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <vTaskDelay+0x64>)
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2400049c 	.word	0x2400049c
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800300a:	463a      	mov	r2, r7
 800300c:	1d39      	adds	r1, r7, #4
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd f96c 	bl	80002f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	9202      	str	r2, [sp, #8]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	460a      	mov	r2, r1
 800302a:	491e      	ldr	r1, [pc, #120]	; (80030a4 <vTaskStartScheduler+0xa8>)
 800302c:	481e      	ldr	r0, [pc, #120]	; (80030a8 <vTaskStartScheduler+0xac>)
 800302e:	f7ff fd9f 	bl	8002b70 <xTaskCreateStatic>
 8003032:	4603      	mov	r3, r0
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <vTaskStartScheduler+0xb0>)
 8003036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <vTaskStartScheduler+0xb0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003040:	2301      	movs	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e001      	b.n	800304a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d116      	bne.n	800307e <vTaskStartScheduler+0x82>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	613b      	str	r3, [r7, #16]
}
 8003062:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <vTaskStartScheduler+0xb4>)
 8003066:	f04f 32ff 	mov.w	r2, #4294967295
 800306a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <vTaskStartScheduler+0xb8>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <vTaskStartScheduler+0xbc>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003078:	f000 fd62 	bl	8003b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800307c:	e00e      	b.n	800309c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d10a      	bne.n	800309c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	60fb      	str	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <vTaskStartScheduler+0x9e>
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	080043b8 	.word	0x080043b8
 80030a8:	0800366d 	.word	0x0800366d
 80030ac:	24000498 	.word	0x24000498
 80030b0:	24000494 	.word	0x24000494
 80030b4:	24000480 	.word	0x24000480
 80030b8:	24000478 	.word	0x24000478

080030bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <vTaskSuspendAll+0x18>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <vTaskSuspendAll+0x18>)
 80030c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	2400049c 	.word	0x2400049c

080030d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <xTaskResumeAll+0x114>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <xTaskResumeAll+0x2c>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	603b      	str	r3, [r7, #0]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003104:	f000 fdbe 	bl	8003c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <xTaskResumeAll+0x114>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a37      	ldr	r2, [pc, #220]	; (80031ec <xTaskResumeAll+0x114>)
 8003110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003112:	4b36      	ldr	r3, [pc, #216]	; (80031ec <xTaskResumeAll+0x114>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d161      	bne.n	80031de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800311a:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <xTaskResumeAll+0x118>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d05d      	beq.n	80031de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003122:	e02e      	b.n	8003182 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <xTaskResumeAll+0x11c>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3318      	adds	r3, #24
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f8f3 	bl	800231c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f8ee 	bl	800231c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <xTaskResumeAll+0x120>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <xTaskResumeAll+0x120>)
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a27      	ldr	r2, [pc, #156]	; (80031fc <xTaskResumeAll+0x124>)
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7ff f87a 	bl	8002262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <xTaskResumeAll+0x128>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <xTaskResumeAll+0x12c>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <xTaskResumeAll+0x11c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1cc      	bne.n	8003124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003190:	f000 fb24 	bl	80037dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <xTaskResumeAll+0x130>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031a0:	f000 f846 	bl	8003230 <xTaskIncrementTick>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <xTaskResumeAll+0x12c>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f1      	bne.n	80031a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <xTaskResumeAll+0x130>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <xTaskResumeAll+0x12c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <xTaskResumeAll+0x134>)
 80031d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031de:	f000 fd81 	bl	8003ce4 <vPortExitCritical>

	return xAlreadyYielded;
 80031e2:	68bb      	ldr	r3, [r7, #8]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2400049c 	.word	0x2400049c
 80031f0:	24000474 	.word	0x24000474
 80031f4:	24000434 	.word	0x24000434
 80031f8:	2400047c 	.word	0x2400047c
 80031fc:	24000378 	.word	0x24000378
 8003200:	24000374 	.word	0x24000374
 8003204:	24000488 	.word	0x24000488
 8003208:	24000484 	.word	0x24000484
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <xTaskGetTickCount+0x1c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800321c:	687b      	ldr	r3, [r7, #4]
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	24000478 	.word	0x24000478

08003230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800323a:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <xTaskIncrementTick+0x144>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 808e 	bne.w	8003360 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003244:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <xTaskIncrementTick+0x148>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800324c:	4a4a      	ldr	r2, [pc, #296]	; (8003378 <xTaskIncrementTick+0x148>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d120      	bne.n	800329a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <xTaskIncrementTick+0x14c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <xTaskIncrementTick+0x48>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	603b      	str	r3, [r7, #0]
}
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xTaskIncrementTick+0x46>
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <xTaskIncrementTick+0x14c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b40      	ldr	r3, [pc, #256]	; (8003380 <xTaskIncrementTick+0x150>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3e      	ldr	r2, [pc, #248]	; (800337c <xTaskIncrementTick+0x14c>)
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4a3e      	ldr	r2, [pc, #248]	; (8003380 <xTaskIncrementTick+0x150>)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <xTaskIncrementTick+0x154>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <xTaskIncrementTick+0x154>)
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	f000 faa1 	bl	80037dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <xTaskIncrementTick+0x158>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d348      	bcc.n	8003336 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a4:	4b35      	ldr	r3, [pc, #212]	; (800337c <xTaskIncrementTick+0x14c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <xTaskIncrementTick+0x158>)
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	601a      	str	r2, [r3, #0]
					break;
 80032b6:	e03e      	b.n	8003336 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b8:	4b30      	ldr	r3, [pc, #192]	; (800337c <xTaskIncrementTick+0x14c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d203      	bcs.n	80032d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032d0:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <xTaskIncrementTick+0x158>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032d6:	e02e      	b.n	8003336 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff f81d 	bl	800231c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3318      	adds	r3, #24
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f814 	bl	800231c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <xTaskIncrementTick+0x15c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4313      	orrs	r3, r2
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <xTaskIncrementTick+0x15c>)
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <xTaskIncrementTick+0x160>)
 8003314:	441a      	add	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3304      	adds	r3, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f7fe ffa0 	bl	8002262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <xTaskIncrementTick+0x164>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d3b9      	bcc.n	80032a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003334:	e7b6      	b.n	80032a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <xTaskIncrementTick+0x164>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4914      	ldr	r1, [pc, #80]	; (8003390 <xTaskIncrementTick+0x160>)
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d901      	bls.n	8003352 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <xTaskIncrementTick+0x168>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e004      	b.n	800336a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <xTaskIncrementTick+0x16c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <xTaskIncrementTick+0x16c>)
 8003368:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800336a:	697b      	ldr	r3, [r7, #20]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2400049c 	.word	0x2400049c
 8003378:	24000478 	.word	0x24000478
 800337c:	2400042c 	.word	0x2400042c
 8003380:	24000430 	.word	0x24000430
 8003384:	2400048c 	.word	0x2400048c
 8003388:	24000494 	.word	0x24000494
 800338c:	2400047c 	.word	0x2400047c
 8003390:	24000378 	.word	0x24000378
 8003394:	24000374 	.word	0x24000374
 8003398:	24000488 	.word	0x24000488
 800339c:	24000484 	.word	0x24000484

080033a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <vTaskSwitchContext+0xa4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <vTaskSwitchContext+0xa8>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033b4:	e03f      	b.n	8003436 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <vTaskSwitchContext+0xa8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <vTaskSwitchContext+0xac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	f1c3 031f 	rsb	r3, r3, #31
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	491f      	ldr	r1, [pc, #124]	; (8003450 <vTaskSwitchContext+0xb0>)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	607b      	str	r3, [r7, #4]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <vTaskSwitchContext+0x5a>
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <vTaskSwitchContext+0xb0>)
 8003408:	4413      	add	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3308      	adds	r3, #8
 800341e:	429a      	cmp	r2, r3
 8003420:	d104      	bne.n	800342c <vTaskSwitchContext+0x8c>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <vTaskSwitchContext+0xb4>)
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2400049c 	.word	0x2400049c
 8003448:	24000488 	.word	0x24000488
 800344c:	2400047c 	.word	0x2400047c
 8003450:	24000378 	.word	0x24000378
 8003454:	24000374 	.word	0x24000374

08003458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <vTaskPlaceOnEventList+0x44>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3318      	adds	r3, #24
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe ff0f 	bl	80022aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800348c:	2101      	movs	r1, #1
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f000 fa68 	bl	8003964 <prvAddCurrentTaskToDelayedList>
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	24000374 	.word	0x24000374

080034a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60fb      	str	r3, [r7, #12]
}
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3318      	adds	r3, #24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe ff23 	bl	800231c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <xTaskRemoveFromEventList+0xac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11c      	bne.n	8003518 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff1a 	bl	800231c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <xTaskRemoveFromEventList+0xb0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <xTaskRemoveFromEventList+0xb0>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <xTaskRemoveFromEventList+0xb4>)
 8003508:	441a      	add	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fea6 	bl	8002262 <vListInsertEnd>
 8003516:	e005      	b.n	8003524 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3318      	adds	r3, #24
 800351c:	4619      	mov	r1, r3
 800351e:	480e      	ldr	r0, [pc, #56]	; (8003558 <xTaskRemoveFromEventList+0xb8>)
 8003520:	f7fe fe9f 	bl	8002262 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <xTaskRemoveFromEventList+0xbc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d905      	bls.n	800353e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <xTaskRemoveFromEventList+0xc0>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e001      	b.n	8003542 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003542:	697b      	ldr	r3, [r7, #20]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	2400049c 	.word	0x2400049c
 8003550:	2400047c 	.word	0x2400047c
 8003554:	24000378 	.word	0x24000378
 8003558:	24000434 	.word	0x24000434
 800355c:	24000374 	.word	0x24000374
 8003560:	24000488 	.word	0x24000488

08003564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <vTaskInternalSetTimeOutState+0x24>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <vTaskInternalSetTimeOutState+0x28>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	2400048c 	.word	0x2400048c
 800358c:	24000478 	.word	0x24000478

08003590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035d2:	f000 fb57 	bl	8003c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <xTaskCheckForTimeOut+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d102      	bne.n	80035f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e023      	b.n	800363e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <xTaskCheckForTimeOut+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d007      	beq.n	8003612 <xTaskCheckForTimeOut+0x82>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e015      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d20b      	bcs.n	8003634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff9b 	bl	8003564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e004      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f000 fb51 	bl	8003ce4 <vPortExitCritical>

	return xReturn;
 8003642:	69fb      	ldr	r3, [r7, #28]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	24000478 	.word	0x24000478
 8003650:	2400048c 	.word	0x2400048c

08003654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <vTaskMissedYield+0x14>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	24000488 	.word	0x24000488

0800366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003674:	f000 f854 	bl	8003720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <prvIdleTask+0x2c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d907      	bls.n	8003690 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <prvIdleTask+0x30>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003690:	f7fc ff68 	bl	8000564 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003694:	e7ee      	b.n	8003674 <prvIdleTask+0x8>
 8003696:	bf00      	nop
 8003698:	24000378 	.word	0x24000378
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e00c      	b.n	80036c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <prvInitialiseTaskLists+0x60>)
 80036b8:	4413      	add	r3, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fda4 	bl	8002208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d9ef      	bls.n	80036ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036cc:	480d      	ldr	r0, [pc, #52]	; (8003704 <prvInitialiseTaskLists+0x64>)
 80036ce:	f7fe fd9b 	bl	8002208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <prvInitialiseTaskLists+0x68>)
 80036d4:	f7fe fd98 	bl	8002208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <prvInitialiseTaskLists+0x6c>)
 80036da:	f7fe fd95 	bl	8002208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036de:	480c      	ldr	r0, [pc, #48]	; (8003710 <prvInitialiseTaskLists+0x70>)
 80036e0:	f7fe fd92 	bl	8002208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e4:	480b      	ldr	r0, [pc, #44]	; (8003714 <prvInitialiseTaskLists+0x74>)
 80036e6:	f7fe fd8f 	bl	8002208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <prvInitialiseTaskLists+0x78>)
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <prvInitialiseTaskLists+0x64>)
 80036ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <prvInitialiseTaskLists+0x7c>)
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <prvInitialiseTaskLists+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	24000378 	.word	0x24000378
 8003704:	24000404 	.word	0x24000404
 8003708:	24000418 	.word	0x24000418
 800370c:	24000434 	.word	0x24000434
 8003710:	24000448 	.word	0x24000448
 8003714:	24000460 	.word	0x24000460
 8003718:	2400042c 	.word	0x2400042c
 800371c:	24000430 	.word	0x24000430

08003720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003726:	e019      	b.n	800375c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003728:	f000 faac 	bl	8003c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <prvCheckTasksWaitingTermination+0x50>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fdef 	bl	800231c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 8003750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003752:	f000 fac7 	bl	8003ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f810 	bl	800377c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e1      	bne.n	8003728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	24000448 	.word	0x24000448
 8003774:	24000474 	.word	0x24000474
 8003778:	2400045c 	.word	0x2400045c

0800377c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fc24 	bl	8003fe0 <vPortFree>
				vPortFree( pxTCB );
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fc21 	bl	8003fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800379e:	e018      	b.n	80037d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d103      	bne.n	80037b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fc18 	bl	8003fe0 <vPortFree>
	}
 80037b0:	e00f      	b.n	80037d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d00a      	beq.n	80037d2 <prvDeleteTCB+0x56>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	60fb      	str	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <prvDeleteTCB+0x54>
	}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <prvResetNextTaskUnblockTime+0x38>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <prvResetNextTaskUnblockTime+0x3c>)
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037f4:	e008      	b.n	8003808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <prvResetNextTaskUnblockTime+0x38>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <prvResetNextTaskUnblockTime+0x3c>)
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	2400042c 	.word	0x2400042c
 8003818:	24000494 	.word	0x24000494

0800381c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <xTaskGetSchedulerState+0x34>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800382a:	2301      	movs	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e008      	b.n	8003842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <xTaskGetSchedulerState+0x38>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003838:	2302      	movs	r3, #2
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	e001      	b.n	8003842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003842:	687b      	ldr	r3, [r7, #4]
	}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	24000480 	.word	0x24000480
 8003854:	2400049c 	.word	0x2400049c

08003858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06e      	beq.n	800394c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800386e:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <xTaskPriorityDisinherit+0x100>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	429a      	cmp	r2, r3
 8003876:	d00a      	beq.n	800388e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60fb      	str	r3, [r7, #12]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60bb      	str	r3, [r7, #8]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	429a      	cmp	r2, r3
 80038c0:	d044      	beq.n	800394c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d140      	bne.n	800394c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fd24 	bl	800231c <uxListRemove>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	491f      	ldr	r1, [pc, #124]	; (800395c <xTaskPriorityDisinherit+0x104>)
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xTaskPriorityDisinherit+0xae>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	2201      	movs	r2, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <xTaskPriorityDisinherit+0x108>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4013      	ands	r3, r2
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <xTaskPriorityDisinherit+0x108>)
 8003904:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f1c3 0207 	rsb	r2, r3, #7
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	2201      	movs	r2, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskPriorityDisinherit+0x108>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <xTaskPriorityDisinherit+0x108>)
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4a08      	ldr	r2, [pc, #32]	; (800395c <xTaskPriorityDisinherit+0x104>)
 800393a:	441a      	add	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe fc8d 	bl	8002262 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800394c:	697b      	ldr	r3, [r7, #20]
	}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	24000374 	.word	0x24000374
 800395c:	24000378 	.word	0x24000378
 8003960:	2400047c 	.word	0x2400047c

08003964 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fcce 	bl	800231c <uxListRemove>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2201      	movs	r2, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4013      	ands	r3, r2
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800399c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d10a      	bne.n	80039bc <prvAddCurrentTaskToDelayedList+0x58>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	481a      	ldr	r0, [pc, #104]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xbc>)
 80039b6:	f7fe fc54 	bl	8002262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ba:	e026      	b.n	8003a0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d209      	bcs.n	80039e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe fc62 	bl	80022aa <vListInsert>
}
 80039e6:	e010      	b.n	8003a0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <prvAddCurrentTaskToDelayedList+0xc4>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fe fc58 	bl	80022aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d202      	bcs.n	8003a0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6013      	str	r3, [r2, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	24000478 	.word	0x24000478
 8003a18:	24000374 	.word	0x24000374
 8003a1c:	2400047c 	.word	0x2400047c
 8003a20:	24000460 	.word	0x24000460
 8003a24:	24000430 	.word	0x24000430
 8003a28:	2400042c 	.word	0x2400042c
 8003a2c:	24000494 	.word	0x24000494

08003a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3b04      	subs	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b04      	subs	r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a60:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <pxPortInitialiseStack+0x64>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b14      	subs	r3, #20
 8003a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3b04      	subs	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f06f 0202 	mvn.w	r2, #2
 8003a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b20      	subs	r3, #32
 8003a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	08003a99 	.word	0x08003a99

08003a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <prvTaskExitError+0x54>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d00a      	beq.n	8003ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <prvTaskExitError+0x28>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	60bb      	str	r3, [r7, #8]
}
 8003ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ad6:	bf00      	nop
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0fc      	beq.n	8003ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	24000010 	.word	0x24000010

08003af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <pxCurrentTCBConst2>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	f380 8809 	msr	PSP, r0
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	4770      	bx	lr
 8003b0c:	f3af 8000 	nop.w

08003b10 <pxCurrentTCBConst2>:
 8003b10:	24000374 	.word	0x24000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <prvPortStartFirstTask+0x24>)
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f380 8808 	msr	MSP, r0
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8814 	msr	CONTROL, r0
 8003b2a:	b662      	cpsie	i
 8003b2c:	b661      	cpsie	f
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	df00      	svc	0
 8003b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b3a:	bf00      	nop
 8003b3c:	e000ed08 	.word	0xe000ed08

08003b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <xPortStartScheduler+0x120>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a46      	ldr	r2, [pc, #280]	; (8003c64 <xPortStartScheduler+0x124>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10a      	bne.n	8003b66 <xPortStartScheduler+0x26>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	613b      	str	r3, [r7, #16]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <xPortStartScheduler+0x120>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3f      	ldr	r2, [pc, #252]	; (8003c68 <xPortStartScheduler+0x128>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10a      	bne.n	8003b86 <xPortStartScheduler+0x46>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <xPortStartScheduler+0x130>)
 8003bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <xPortStartScheduler+0x134>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bb4:	e009      	b.n	8003bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <xPortStartScheduler+0x134>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <xPortStartScheduler+0x134>)
 8003bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d0ef      	beq.n	8003bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bd6:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <xPortStartScheduler+0x134>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00a      	beq.n	8003bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60bb      	str	r3, [r7, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <xPortStartScheduler+0x134>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <xPortStartScheduler+0x134>)
 8003c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <xPortStartScheduler+0x134>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <xPortStartScheduler+0x134>)
 8003c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c2e:	f000 f8dd 	bl	8003dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <xPortStartScheduler+0x13c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c38:	f000 f8fc 	bl	8003e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <xPortStartScheduler+0x140>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <xPortStartScheduler+0x140>)
 8003c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c48:	f7ff ff66 	bl	8003b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c4c:	f7ff fba8 	bl	80033a0 <vTaskSwitchContext>
	prvTaskExitError();
 8003c50:	f7ff ff22 	bl	8003a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00
 8003c64:	410fc271 	.word	0x410fc271
 8003c68:	410fc270 	.word	0x410fc270
 8003c6c:	e000e400 	.word	0xe000e400
 8003c70:	240004a0 	.word	0x240004a0
 8003c74:	240004a4 	.word	0x240004a4
 8003c78:	e000ed20 	.word	0xe000ed20
 8003c7c:	24000010 	.word	0x24000010
 8003c80:	e000ef34 	.word	0xe000ef34

08003c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	607b      	str	r3, [r7, #4]
}
 8003c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <vPortEnterCritical+0x58>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <vPortEnterCritical+0x58>)
 8003ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <vPortEnterCritical+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10f      	bne.n	8003cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <vPortEnterCritical+0x5c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <vPortEnterCritical+0x4a>
	}
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	24000010 	.word	0x24000010
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <vPortExitCritical+0x50>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <vPortExitCritical+0x24>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	607b      	str	r3, [r7, #4]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <vPortExitCritical+0x50>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <vPortExitCritical+0x50>)
 8003d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <vPortExitCritical+0x50>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <vPortExitCritical+0x42>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	24000010 	.word	0x24000010
	...

08003d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d40:	f3ef 8009 	mrs	r0, PSP
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <pxCurrentTCBConst>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f01e 0f10 	tst.w	lr, #16
 8003d50:	bf08      	it	eq
 8003d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d64:	f380 8811 	msr	BASEPRI, r0
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f7ff fb16 	bl	80033a0 <vTaskSwitchContext>
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f380 8811 	msr	BASEPRI, r0
 8003d7c:	bc09      	pop	{r0, r3}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d86:	f01e 0f10 	tst.w	lr, #16
 8003d8a:	bf08      	it	eq
 8003d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d90:	f380 8809 	msr	PSP, r0
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst>:
 8003da0:	24000374 	.word	0x24000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003dc2:	f7ff fa35 	bl	8003230 <xTaskIncrementTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <SysTick_Handler+0x40>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f383 8811 	msr	BASEPRI, r3
}
 8003dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <vPortSetupTimerInterrupt+0x34>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <vPortSetupTimerInterrupt+0x38>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <vPortSetupTimerInterrupt+0x3c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <vPortSetupTimerInterrupt+0x40>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <vPortSetupTimerInterrupt+0x44>)
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <vPortSetupTimerInterrupt+0x34>)
 8003e10:	2207      	movs	r2, #7
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e010 	.word	0xe000e010
 8003e24:	e000e018 	.word	0xe000e018
 8003e28:	24000000 	.word	0x24000000
 8003e2c:	10624dd3 	.word	0x10624dd3
 8003e30:	e000e014 	.word	0xe000e014

08003e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e44 <vPortEnableVFP+0x10>
 8003e38:	6801      	ldr	r1, [r0, #0]
 8003e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e3e:	6001      	str	r1, [r0, #0]
 8003e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e42:	bf00      	nop
 8003e44:	e000ed88 	.word	0xe000ed88

08003e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e54:	f7ff f932 	bl	80030bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e58:	4b5b      	ldr	r3, [pc, #364]	; (8003fc8 <pvPortMalloc+0x180>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e60:	f000 f920 	bl	80040a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <pvPortMalloc+0x184>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 8093 	bne.w	8003f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01d      	beq.n	8003eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e78:	2208      	movs	r2, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d014      	beq.n	8003eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	3308      	adds	r3, #8
 8003e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	617b      	str	r3, [r7, #20]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d06e      	beq.n	8003f98 <pvPortMalloc+0x150>
 8003eba:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <pvPortMalloc+0x188>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d869      	bhi.n	8003f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ec4:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <pvPortMalloc+0x18c>)
 8003ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <pvPortMalloc+0x18c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ece:	e004      	b.n	8003eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d903      	bls.n	8003eec <pvPortMalloc+0xa4>
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f1      	bne.n	8003ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <pvPortMalloc+0x180>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d050      	beq.n	8003f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2208      	movs	r2, #8
 8003efc:	4413      	add	r3, r2
 8003efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	2308      	movs	r3, #8
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d91f      	bls.n	8003f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <pvPortMalloc+0xf8>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	613b      	str	r3, [r7, #16]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f52:	69b8      	ldr	r0, [r7, #24]
 8003f54:	f000 f908 	bl	8004168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <pvPortMalloc+0x188>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <pvPortMalloc+0x188>)
 8003f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <pvPortMalloc+0x188>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <pvPortMalloc+0x190>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d203      	bcs.n	8003f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f72:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <pvPortMalloc+0x188>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <pvPortMalloc+0x190>)
 8003f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <pvPortMalloc+0x184>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <pvPortMalloc+0x194>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <pvPortMalloc+0x194>)
 8003f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f98:	f7ff f89e 	bl	80030d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <pvPortMalloc+0x174>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <pvPortMalloc+0x172>
	return pvReturn;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	240040b0 	.word	0x240040b0
 8003fcc:	240040c4 	.word	0x240040c4
 8003fd0:	240040b4 	.word	0x240040b4
 8003fd4:	240040a8 	.word	0x240040a8
 8003fd8:	240040b8 	.word	0x240040b8
 8003fdc:	240040bc 	.word	0x240040bc

08003fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d04d      	beq.n	800408e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <vPortFree+0xb8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <vPortFree+0x44>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60fb      	str	r3, [r7, #12]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <vPortFree+0x62>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60bb      	str	r3, [r7, #8]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <vPortFree+0xb8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01e      	beq.n	800408e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11a      	bne.n	800408e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <vPortFree+0xb8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004068:	f7ff f828 	bl	80030bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <vPortFree+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4413      	add	r3, r2
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <vPortFree+0xbc>)
 8004078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800407a:	6938      	ldr	r0, [r7, #16]
 800407c:	f000 f874 	bl	8004168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <vPortFree+0xc0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <vPortFree+0xc0>)
 8004088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800408a:	f7ff f825 	bl	80030d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	240040c4 	.word	0x240040c4
 800409c:	240040b4 	.word	0x240040b4
 80040a0:	240040c0 	.word	0x240040c0

080040a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <prvHeapInit+0xac>)
 80040b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3307      	adds	r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <prvHeapInit+0xac>)
 80040d4:	4413      	add	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <prvHeapInit+0xb0>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <prvHeapInit+0xb0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	4413      	add	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040f0:	2208      	movs	r2, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a15      	ldr	r2, [pc, #84]	; (8004158 <prvHeapInit+0xb4>)
 8004104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <prvHeapInit+0xb4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <prvHeapInit+0xb4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <prvHeapInit+0xb4>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <prvHeapInit+0xb8>)
 8004132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <prvHeapInit+0xbc>)
 800413a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <prvHeapInit+0xc0>)
 800413e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	240004a8 	.word	0x240004a8
 8004154:	240040a8 	.word	0x240040a8
 8004158:	240040b0 	.word	0x240040b0
 800415c:	240040b8 	.word	0x240040b8
 8004160:	240040b4 	.word	0x240040b4
 8004164:	240040c4 	.word	0x240040c4

08004168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <prvInsertBlockIntoFreeList+0xac>)
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <prvInsertBlockIntoFreeList+0x14>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d8f7      	bhi.n	8004176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4413      	add	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d108      	bne.n	80041aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	441a      	add	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d118      	bne.n	80041f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <prvInsertBlockIntoFreeList+0xb0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d00d      	beq.n	80041e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	441a      	add	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e008      	b.n	80041f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvInsertBlockIntoFreeList+0xb0>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e003      	b.n	80041f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d002      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	240040a8 	.word	0x240040a8
 8004218:	240040b0 	.word	0x240040b0

0800421c <memset>:
 800421c:	4402      	add	r2, r0
 800421e:	4603      	mov	r3, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	d100      	bne.n	8004226 <memset+0xa>
 8004224:	4770      	bx	lr
 8004226:	f803 1b01 	strb.w	r1, [r3], #1
 800422a:	e7f9      	b.n	8004220 <memset+0x4>

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4d0d      	ldr	r5, [pc, #52]	; (8004264 <__libc_init_array+0x38>)
 8004230:	4c0d      	ldr	r4, [pc, #52]	; (8004268 <__libc_init_array+0x3c>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	2600      	movs	r6, #0
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	4d0b      	ldr	r5, [pc, #44]	; (800426c <__libc_init_array+0x40>)
 800423e:	4c0c      	ldr	r4, [pc, #48]	; (8004270 <__libc_init_array+0x44>)
 8004240:	f000 f826 	bl	8004290 <_init>
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	2600      	movs	r6, #0
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	f855 3b04 	ldr.w	r3, [r5], #4
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	f855 3b04 	ldr.w	r3, [r5], #4
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	080043d0 	.word	0x080043d0
 8004268:	080043d0 	.word	0x080043d0
 800426c:	080043d0 	.word	0x080043d0
 8004270:	080043d4 	.word	0x080043d4

08004274 <memcpy>:
 8004274:	440a      	add	r2, r1
 8004276:	4291      	cmp	r1, r2
 8004278:	f100 33ff 	add.w	r3, r0, #4294967295
 800427c:	d100      	bne.n	8004280 <memcpy+0xc>
 800427e:	4770      	bx	lr
 8004280:	b510      	push	{r4, lr}
 8004282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800428a:	4291      	cmp	r1, r2
 800428c:	d1f9      	bne.n	8004282 <memcpy+0xe>
 800428e:	bd10      	pop	{r4, pc}

08004290 <_init>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr

0800429c <_fini>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr
